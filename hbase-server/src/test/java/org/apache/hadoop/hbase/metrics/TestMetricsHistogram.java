begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|histogram
operator|.
name|MetricsHistogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Deprecated
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetricsHistogram
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBasicUniform
parameter_list|()
block|{
name|MetricsHistogram
name|h
init|=
operator|new
name|MetricsHistogram
argument_list|(
literal|"testHistogram"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|.
name|update
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|h
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|h
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|safeIndex
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
name|len
operator|&&
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
name|len
condition|)
block|{
return|return
name|len
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|MetricsHistogram
name|h
init|=
operator|new
name|MetricsHistogram
argument_list|(
literal|"testHistogram"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|long
call|)
argument_list|(
name|r
operator|.
name|nextGaussian
argument_list|()
operator|*
literal|10000.0
argument_list|)
expr_stmt|;
name|h
operator|.
name|update
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Snapshot
name|s
init|=
name|h
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// as long as the histogram chooses an item with index N+/-slop, accept it
specifier|final
name|int
name|slop
init|=
literal|20
decl_stmt|;
comment|// make sure the median, 75th percentile and 95th percentile are good
specifier|final
name|int
name|medianIndex
init|=
name|data
operator|.
name|length
operator|/
literal|2
decl_stmt|;
specifier|final
name|long
name|minAcceptableMedian
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|medianIndex
operator|-
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|long
name|maxAcceptableMedian
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|medianIndex
operator|+
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|getMedian
argument_list|()
operator|>=
name|minAcceptableMedian
operator|&&
name|s
operator|.
name|getMedian
argument_list|()
operator|<=
name|maxAcceptableMedian
argument_list|)
expr_stmt|;
specifier|final
name|int
name|seventyFifthIndex
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|.
name|length
operator|*
literal|0.75
argument_list|)
decl_stmt|;
specifier|final
name|long
name|minAcceptableseventyFifth
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|seventyFifthIndex
operator|-
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|long
name|maxAcceptableseventyFifth
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|seventyFifthIndex
operator|+
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|get75thPercentile
argument_list|()
operator|>=
name|minAcceptableseventyFifth
operator|&&
name|s
operator|.
name|get75thPercentile
argument_list|()
operator|<=
name|maxAcceptableseventyFifth
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ninetyFifthIndex
init|=
call|(
name|int
call|)
argument_list|(
name|data
operator|.
name|length
operator|*
literal|0.95
argument_list|)
decl_stmt|;
specifier|final
name|long
name|minAcceptableninetyFifth
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|ninetyFifthIndex
operator|-
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|long
name|maxAcceptableninetyFifth
init|=
name|data
index|[
name|safeIndex
argument_list|(
name|ninetyFifthIndex
operator|+
name|slop
argument_list|,
name|data
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|get95thPercentile
argument_list|()
operator|>=
name|minAcceptableninetyFifth
operator|&&
name|s
operator|.
name|get95thPercentile
argument_list|()
operator|<=
name|maxAcceptableninetyFifth
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

