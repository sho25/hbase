begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyFloat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|histogram
operator|.
name|MetricsHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetricsHistogram
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBasicUniform
parameter_list|()
block|{
name|MetricsHistogram
name|h
init|=
operator|new
name|MetricsHistogram
argument_list|(
literal|"testHistogram"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|.
name|update
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|h
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|h
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|49.5d
argument_list|,
name|h
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotPercentiles
parameter_list|()
block|{
specifier|final
name|MetricsHistogram
name|h
init|=
operator|new
name|MetricsHistogram
argument_list|(
literal|"testHistogram"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|data
init|=
name|genRandomData
argument_list|(
name|h
argument_list|)
decl_stmt|;
specifier|final
name|Snapshot
name|s
init|=
name|h
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|50
argument_list|,
name|s
operator|.
name|getMedian
argument_list|()
argument_list|)
expr_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|75
argument_list|,
name|s
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|95
argument_list|,
name|s
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|98
argument_list|,
name|s
operator|.
name|get98thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|99
argument_list|,
name|s
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|assertPercentile
argument_list|(
name|data
argument_list|,
literal|99.9
argument_list|,
name|s
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPushMetric
parameter_list|()
block|{
specifier|final
name|MetricsHistogram
name|h
init|=
operator|new
name|MetricsHistogram
argument_list|(
literal|"testHistogram"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|genRandomData
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|MetricsRecord
name|mr
init|=
name|mock
argument_list|(
name|MetricsRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|h
operator|.
name|pushMetric
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
literal|"testHistogram_num_ops"
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_min"
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_max"
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_mean"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_std_dev"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_median"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_75th_percentile"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_95th_percentile"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mr
argument_list|)
operator|.
name|setMetric
argument_list|(
name|eq
argument_list|(
literal|"testHistogram_99th_percentile"
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPercentile
parameter_list|(
name|long
index|[]
name|data
parameter_list|,
name|double
name|percentile
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|data
control|)
block|{
if|if
condition|(
name|v
operator|<
name|value
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong "
operator|+
name|percentile
operator|+
literal|" percentile"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|percentile
operator|/
literal|100
argument_list|)
argument_list|,
name|count
operator|/
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
index|[]
name|genRandomData
parameter_list|(
specifier|final
name|MetricsHistogram
name|h
parameter_list|)
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|10000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|long
call|)
argument_list|(
name|r
operator|.
name|nextGaussian
argument_list|()
operator|*
literal|10000
argument_list|)
expr_stmt|;
name|h
operator|.
name|update
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

