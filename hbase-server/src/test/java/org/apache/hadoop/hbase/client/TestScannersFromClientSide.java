begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTestConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnRangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScannerHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * A client-side test, mostly testing scanners with various parameters.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestScannersFromClientSide
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestScannersFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|prefetching
decl_stmt|;
specifier|private
name|long
name|maxSize
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
specifier|final
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|prefetchings
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|prefetchings
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|prefetchings
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|prefetchings
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|prefetchings
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|1024
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|prefetchings
return|;
block|}
specifier|public
name|TestScannersFromClientSide
parameter_list|(
name|Long
name|maxPrefetchedResultSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxPrefetchedResultSize
operator|.
name|longValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxSize
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|prefetching
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|prefetching
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxSize
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|RegionScannerHolder
operator|.
name|MAX_PREFETCHED_RESULT_SIZE_DEFAULT
expr_stmt|;
block|}
else|else
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|Configuration
name|conf
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|RegionScannerHolder
operator|.
name|MAX_PREFETCHED_RESULT_SIZE_KEY
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|long
name|remainingPrefetchedSize
init|=
name|RegionScannerHolder
operator|.
name|getPrefetchedResultSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All prefetched results should be gone"
argument_list|,
literal|0
argument_list|,
name|remainingPrefetchedSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side for batch of scan    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testScanBatchWithDefaultCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|batchedScanWithCachingSpecified
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Using default caching which is 100
block|}
comment|/**      * Test from client side for batch of scan      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testScanBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|batchedScanWithCachingSpecified
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|batchedScanWithCachingSpecified
parameter_list|(
name|int
name|caching
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testScanBatch-"
operator|+
name|prefetching
operator|+
literal|"_"
operator|+
name|maxSize
operator|+
literal|"_"
operator|+
name|caching
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Delete
name|delete
decl_stmt|;
name|Result
name|result
decl_stmt|;
name|ClientScanner
name|scanner
decl_stmt|;
name|boolean
name|toLog
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvListExp
decl_stmt|;
comment|// table: row, family, c0:0, c1:1, ... , c7:7
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// table: row, family, c0:0, c1:1, ..., c6:2, c6:6 , c7:7
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
literal|2
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// delete upto ts: 3
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// without batch
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setPrefetching
argument_list|(
name|prefetching
argument_list|)
expr_stmt|;
name|scanner
operator|=
operator|(
name|ClientScanner
operator|)
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// c4:4, c5:5, c6:6, c7:7
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|4
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|5
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
literal|6
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
literal|7
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing first batch of scan"
argument_list|)
expr_stmt|;
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// with batch
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setPrefetching
argument_list|(
name|prefetching
argument_list|)
expr_stmt|;
name|scanner
operator|=
operator|(
name|ClientScanner
operator|)
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// First batch: c4:4, c5:5
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|4
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|5
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing first batch of scan"
argument_list|)
expr_stmt|;
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// Second batch: c6:6, c7:7
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
literal|6
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
literal|7
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing second batch of scan"
argument_list|)
expr_stmt|;
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side for get with maxResultPerCF set    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetMaxResults
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetMaxResults-"
operator|+
name|prefetching
operator|+
literal|"_"
operator|+
name|maxSize
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
name|boolean
name|toLog
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvListExp
decl_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
comment|// Insert one CF for row[0]
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing without setting maxResults"
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing basic setMaxResults"
argument_list|)
expr_stmt|;
comment|// Filters: ColumnRangeFilter
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnRangeFilter
argument_list|(
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing single CF with CRF"
argument_list|)
expr_stmt|;
comment|// Insert two more CF for row[0]
comment|// 20 columns for CF2, 10 columns for CF1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
comment|//Exp: CF1:q0, ..., q9, CF2: q0, q1, q10, q11, ..., q19
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing multiple CFs"
argument_list|)
expr_stmt|;
comment|// Filters: ColumnRangeFilter and ColumnPrefixFilter
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnRangeFilter
argument_list|(
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing multiple CFs + CRF"
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing multiple CFs + PFF"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side for scan with maxResultPerCF set    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testScanMaxResults
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testScanLimit-"
operator|+
name|prefetching
operator|+
literal|"_"
operator|+
name|maxSize
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Result
name|result
decl_stmt|;
name|boolean
name|toLog
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvListExp
decl_stmt|,
name|kvListScan
decl_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|ROWS
operator|.
name|length
condition|;
name|r
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|r
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|FAMILIES
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|q
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROWS
index|[
name|r
index|]
argument_list|,
name|FAMILIES
index|[
name|c
index|]
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|<
literal|4
condition|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setPrefetching
argument_list|(
name|prefetching
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|ClientScanner
name|scanner
init|=
operator|(
name|ClientScanner
operator|)
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|kvListScan
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|verifyPrefetching
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|list
argument_list|()
control|)
block|{
name|kvListScan
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvListScan
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing scan with maxResults"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side for get with rowOffset    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetRowOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetRowOffset-"
operator|+
name|prefetching
operator|+
literal|"_"
operator|+
name|maxSize
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
name|boolean
name|toLog
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvListExp
decl_stmt|;
comment|// Insert one CF for row
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
comment|// skipping first two kvs
if|if
condition|(
name|i
operator|<
literal|2
condition|)
continue|continue;
name|kvListExp
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//setting offset to 2
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing basic setRowOffset"
argument_list|)
expr_stmt|;
comment|//setting offset to 20
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing offset> #kvs"
argument_list|)
expr_stmt|;
comment|//offset + maxResultPerCF
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing offset + setMaxResultsPerCF"
argument_list|)
expr_stmt|;
comment|// Filters: ColumnRangeFilter
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnRangeFilter
argument_list|(
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing offset with CRF"
argument_list|)
expr_stmt|;
comment|// Insert into two more CFs for row
comment|// 10 columns for CF2, 10 columns for CF1
for|for
control|(
name|int
name|j
init|=
literal|2
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvListExp
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
comment|//Exp: CF1:q4, q5, CF2: q4, q5
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|kvListExp
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|kvListExp
argument_list|,
name|toLog
argument_list|,
literal|"Testing offset + multiple CFs + maxResults"
argument_list|)
expr_stmt|;
block|}
comment|/**    * For testing only, find a region scanner holder for a scan.    */
name|RegionScannerHolder
name|findRegionScannerHolder
parameter_list|(
name|ClientScanner
name|scanner
parameter_list|)
block|{
name|long
name|scannerId
init|=
name|scanner
operator|.
name|currentScannerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|scannerId
operator|==
operator|-
literal|1L
condition|)
return|return
literal|null
return|;
name|HRegionInfo
name|expectedRegion
init|=
name|scanner
operator|.
name|currentRegionInfo
argument_list|()
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|RegionScannerHolder
name|rsh
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getScannerHolder
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
operator|&&
name|rsh
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedRegion
argument_list|)
condition|)
block|{
return|return
name|rsh
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|void
name|verifyPrefetching
parameter_list|(
name|ClientScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|scannerId
init|=
name|scanner
operator|.
name|currentScannerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|scannerId
operator|==
operator|-
literal|1L
condition|)
return|return;
comment|// scanner is already closed
name|RegionScannerHolder
name|rsh
init|=
name|findRegionScannerHolder
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should be able to find the scanner"
argument_list|,
name|rsh
argument_list|)
expr_stmt|;
name|boolean
name|isPrefetchSubmitted
init|=
name|rsh
operator|.
name|isPrefetchSubmitted
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefetching
operator|&&
operator|(
name|RegionScannerHolder
operator|.
name|getPrefetchedResultSize
argument_list|()
operator|<
name|this
operator|.
name|maxSize
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Prefetching should be submitted or no more result"
argument_list|,
name|isPrefetchSubmitted
operator|||
name|scanner
operator|.
name|next
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPrefetchSubmitted
condition|)
block|{
comment|// Prefetch submitted, it must be because prefetching is enabled,
comment|// and there was still room before it's scheduled
name|long
name|sizeBefore
init|=
name|RegionScannerHolder
operator|.
name|getPrefetchedResultSize
argument_list|()
operator|-
name|rsh
operator|.
name|currentPrefetchedResultSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should have room before prefetching is submitted, maxSize="
operator|+
name|this
operator|.
name|maxSize
operator|+
literal|", prefetching="
operator|+
name|prefetching
operator|+
literal|", sizeBefore="
operator|+
name|sizeBefore
argument_list|,
name|prefetching
operator|&&
name|sizeBefore
operator|<
name|this
operator|.
name|maxSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPrefetchSubmitted
operator|&&
name|rsh
operator|.
name|waitForPrefetchingDone
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Prefetched result size should not be 0"
argument_list|,
name|rsh
operator|.
name|currentPrefetchedResultSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|verifyResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expKvList
parameter_list|,
name|boolean
name|toLog
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected count: "
operator|+
name|expKvList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual count: "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expKvList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|raw
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|expKvList
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
comment|// we will check the size later
block|}
name|KeyValue
name|kvExp
init|=
name|expKvList
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|toLog
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"get kv is: "
operator|+
name|kv
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exp kv is: "
operator|+
name|kvExp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Not equal"
argument_list|,
name|kvExp
operator|.
name|equals
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expKvList
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

