begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHRegionFileSystem
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHRegionFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testOnDiskRegionCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testOnDiskRegionCreation"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create a Region
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestTable"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Verify if the region is on disk
name|Path
name|regionDir
init|=
name|regionFs
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The region folder should be created"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the .regioninfo
name|HRegionInfo
name|hriVerify
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hri
argument_list|,
name|hriVerify
argument_list|)
expr_stmt|;
comment|// Open the region
name|regionFs
operator|=
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regionDir
argument_list|,
name|regionFs
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the region
name|HRegionFileSystem
operator|.
name|deleteRegionFromFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The region folder should be removed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionDir
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonIdempotentOpsWithRetries
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testOnDiskRegionCreation"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create a Region
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestTable"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|regionFs
operator|.
name|getRegionDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|regionFs
operator|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFileSystemForCreate
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// HRegionFileSystem.createRegionOnFileSystem(conf, new MockFileSystemForCreate(), rootDir,
comment|// hri);
name|boolean
name|result
init|=
name|regionFs
operator|.
name|createDir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't create the directory"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|regionFs
operator|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFileSystem
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|regionFs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't rename the directory"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|regionFs
operator|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|MockFileSystem
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|regionFs
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't delete the directory"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MockFileSystemForCreate
extends|extends
name|MockFileSystem
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * a mock fs which throws exception for first 3 times, and then process the call (returns the    * excepted result).    */
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FileSystem
block|{
name|int
name|retryCount
decl_stmt|;
specifier|final
specifier|static
name|int
name|successRetryCount
init|=
literal|3
decl_stmt|;
specifier|public
name|MockFileSystem
parameter_list|()
block|{
name|retryCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|Progressable
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|FsPermission
name|arg1
parameter_list|,
name|boolean
name|arg2
parameter_list|,
name|int
name|arg3
parameter_list|,
name|short
name|arg4
parameter_list|,
name|long
name|arg5
parameter_list|,
name|Progressable
name|arg6
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create, "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryCount
operator|++
operator|<
name|successRetryCount
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|retryCount
operator|++
operator|<
name|successRetryCount
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|boolean
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|retryCount
operator|++
operator|<
name|successRetryCount
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
init|=
operator|new
name|FileStatus
argument_list|()
decl_stmt|;
return|return
name|fs
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|FsPermission
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mkdirs, "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryCount
operator|++
operator|<
name|successRetryCount
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|arg0
parameter_list|,
name|Path
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rename, "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryCount
operator|++
operator|<
name|successRetryCount
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Something bad happen"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTempAndCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testTempAndCommit"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create a Region
name|String
name|familyName
init|=
literal|"cf"
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestTable"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// New region, no store files
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
init|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|storeFiles
operator|!=
literal|null
condition|?
name|storeFiles
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
comment|// Create a new file in temp (no files in the family)
name|Path
name|buildPath
init|=
name|regionFs
operator|.
name|createTempName
argument_list|()
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|buildPath
argument_list|)
expr_stmt|;
name|storeFiles
operator|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|storeFiles
operator|!=
literal|null
condition|?
name|storeFiles
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
comment|// commit the file
name|Path
name|dstPath
init|=
name|regionFs
operator|.
name|commitStoreFile
argument_list|(
name|familyName
argument_list|,
name|buildPath
argument_list|)
decl_stmt|;
name|storeFiles
operator|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|storeFiles
operator|!=
literal|null
condition|?
name|storeFiles
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|buildPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

