begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHDFSBlocksDistribution
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddHostsAndBlockWeight
parameter_list|()
throws|throws
name|Exception
block|{
name|HDFSBlocksDistribution
name|distribution
init|=
operator|new
name|HDFSBlocksDistribution
argument_list|()
decl_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no hosts weights"
argument_list|,
literal|0
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no hosts weights"
argument_list|,
literal|0
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be one host"
argument_list|,
literal|1
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|202
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be one host"
argument_list|,
literal|1
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test host should have weight 303"
argument_list|,
literal|303
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testTwo"
block|}
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be two hosts"
argument_list|,
literal|2
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total weight should be 525"
argument_list|,
literal|525
argument_list|,
name|distribution
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|MockHDFSBlocksDistribution
extends|extends
name|HDFSBlocksDistribution
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|getHostAndWeights
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|HostAndWeight
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
operator|new
name|HostAndWeight
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|HDFSBlocksDistribution
name|distribution
init|=
operator|new
name|HDFSBlocksDistribution
argument_list|()
decl_stmt|;
name|distribution
operator|.
name|add
argument_list|(
operator|new
name|MockHDFSBlocksDistribution
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no hosts weights"
argument_list|,
literal|0
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|addHostsAndBlockWeight
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be one host"
argument_list|,
literal|1
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|distribution
operator|.
name|add
argument_list|(
operator|new
name|MockHDFSBlocksDistribution
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be one host"
argument_list|,
literal|1
argument_list|,
name|distribution
operator|.
name|getHostAndWeights
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total weight should be 10"
argument_list|,
literal|10
argument_list|,
name|distribution
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

