begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A blocking queue implementation for adding a constant delay. Uses a DelayQueue as a backing store  * @param<E> type of elements  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ConstantDelayQueue
parameter_list|<
name|E
parameter_list|>
implements|implements
name|BlockingQueue
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
class|class
name|DelayedElement
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Delayed
block|{
name|T
name|element
decl_stmt|;
name|long
name|end
decl_stmt|;
specifier|public
name|DelayedElement
parameter_list|(
name|T
name|element
parameter_list|,
name|long
name|delayMs
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|delayMs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
name|long
name|cmp
init|=
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|o
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
name|cmp
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|cmp
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|long
name|delayMs
decl_stmt|;
comment|// backing DelayQueue
specifier|private
name|DelayQueue
argument_list|<
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|DelayQueue
argument_list|<
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ConstantDelayQueue
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delayMs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|delay
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|remove
parameter_list|()
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|poll
parameter_list|()
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|element
parameter_list|()
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|element
argument_list|()
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|peek
parameter_list|()
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|peek
argument_list|()
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|queue
operator|.
name|add
argument_list|(
operator|new
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|(
name|e
argument_list|,
name|delayMs
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|(
name|e
argument_list|,
name|delayMs
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|queue
operator|.
name|put
argument_list|(
operator|new
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|(
name|e
argument_list|,
name|delayMs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|DelayedElement
argument_list|<
name|E
argument_list|>
argument_list|(
name|e
argument_list|,
name|delayMs
argument_list|)
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|DelayedElement
argument_list|<
name|E
argument_list|>
name|el
init|=
name|queue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
return|return
name|el
operator|==
literal|null
condition|?
literal|null
else|:
name|el
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|queue
operator|.
name|remainingCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// not implemented yet
block|}
block|}
end_class

end_unit

