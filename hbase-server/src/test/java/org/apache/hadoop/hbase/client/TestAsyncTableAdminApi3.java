begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AsyncMetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous table admin operations.  * @see TestAsyncTableAdminApi2 This test and it used to be joined it was taking longer than our  * ten minute timeout so they were split.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTableAdminApi3
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncTableAdminApi3
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTableExist
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|exist
decl_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|exist
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exist
argument_list|)
expr_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exist
argument_list|)
expr_stmt|;
comment|// meta table already exists
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exist
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTables
init|=
name|admin
operator|.
name|listTableDescriptors
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|tableName1
block|,
name|tableName2
block|,
name|tableName3
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|createTableWithDefaultConf
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescs
init|=
name|admin
operator|.
name|listTableDescriptors
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|tableDescs
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|size
operator|>=
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|tableDescs
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|tables
index|[
name|i
index|]
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|admin
operator|.
name|listTableNames
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|size
operator|=
name|tableNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|size
operator|==
operator|(
name|numTables
operator|+
name|tables
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|tableNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|tables
index|[
name|i
index|]
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|(
name|tables
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|tableDescs
operator|=
name|admin
operator|.
name|listTableDescriptors
argument_list|(
name|tableNames
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|size
operator|=
name|tableDescs
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|tableNames
argument_list|,
name|tables
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|tableDescs
operator|=
name|admin
operator|.
name|listTableDescriptors
argument_list|(
name|tableNames
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|size
operator|=
name|tableDescs
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|tables
operator|.
name|length
operator|+
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|j
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"tableName should be equal in order"
argument_list|,
name|tableDescs
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tableDescs
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|tableDescs
operator|=
name|admin
operator|.
name|listTableDescriptors
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not found system tables"
argument_list|,
name|tableDescs
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tableNames
operator|=
name|admin
operator|.
name|listTableNames
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not found system tables"
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY
block|,
name|FAMILY_0
block|,
name|FAMILY_1
block|}
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableDescriptor
name|desc
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ModifyableTableDescriptor
name|modifyableDesc
init|=
operator|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|desc
operator|)
decl_stmt|;
name|TableDescriptor
name|confirmedHtd
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|modifyableDesc
operator|.
name|compareTo
argument_list|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|confirmedHtd
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be disabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|ok
operator|=
literal|false
expr_stmt|;
comment|// verify that scan encounters correct exception
try|try
block|{
name|table
operator|.
name|scanAll
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is enabled
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName1
argument_list|)
expr_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName2
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table1
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table2
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table1
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|table2
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|admin
operator|.
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|".*"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|admin
operator|.
name|disableTable
argument_list|(
name|t
argument_list|)
operator|.
name|join
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that tables are disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|".*"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|admin
operator|.
name|enableTable
argument_list|(
name|t
argument_list|)
operator|.
name|join
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that tables are enabled
try|try
block|{
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|TestAsyncTableAdminApi
operator|.
name|getStateFromMeta
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableTableRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|}
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|metaTable
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable table.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Enable table, use retain assignment to assign regions.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions2
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Check the assignment.
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regions2
operator|.
name|containsAll
argument_list|(
name|regions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTableEnabledAndDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// meta table is always enabled
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTableAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

