begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
operator|.
name|NextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test cases against ReversibleKeyValueScanner  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReversibleScanners
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReversibleScanners
operator|.
name|class
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILYNAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|TS
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|MAXMVCC
init|=
literal|7
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROWSIZE
init|=
literal|200
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|ROWSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQual"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|QUALSIZE
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|QUALS
init|=
name|makeN
argument_list|(
name|QUAL
argument_list|,
name|QUALSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VALUESIZE
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
name|VALUESIZE
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testReversibleStoreFileScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"testReversibleStoreFileScanner"
argument_list|)
argument_list|,
literal|"regionname"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataBlockEncoding
name|encoding
range|:
name|DataBlockEncoding
operator|.
name|values
argument_list|()
control|)
block|{
name|HFileContextBuilder
name|hcBuilder
init|=
operator|new
name|HFileContextBuilder
argument_list|()
decl_stmt|;
name|hcBuilder
operator|.
name|withBlockSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|hcBuilder
operator|.
name|withDataBlockEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|HFileContext
name|hFileContext
init|=
name|hcBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|StoreFile
name|sf
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sf
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|scanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|seekTestOfReversibleKeyValueScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|readPoint
init|=
literal|0
init|;
name|readPoint
operator|<
name|MAXMVCC
condition|;
name|readPoint
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting read point to "
operator|+
name|readPoint
argument_list|)
expr_stmt|;
name|scanners
operator|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sf
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
name|seekTestOfReversibleKeyValueScannerWithMVCC
argument_list|(
name|scanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversibleMemstoreScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|MemStore
name|memstore
init|=
operator|new
name|DefaultMemStore
argument_list|()
decl_stmt|;
name|writeMemstore
argument_list|(
name|memstore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|seekTestOfReversibleKeyValueScanner
argument_list|(
name|scanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|readPoint
init|=
literal|0
init|;
name|readPoint
operator|<
name|MAXMVCC
condition|;
name|readPoint
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting read point to "
operator|+
name|readPoint
argument_list|)
expr_stmt|;
name|scanners
operator|=
name|memstore
operator|.
name|getScanners
argument_list|(
name|readPoint
argument_list|)
expr_stmt|;
name|seekTestOfReversibleKeyValueScannerWithMVCC
argument_list|(
name|scanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversibleKeyValueHeap
parameter_list|()
throws|throws
name|IOException
block|{
comment|// write data to one memstore and two store files
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"testReversibleKeyValueHeap"
argument_list|)
argument_list|,
literal|"regionname"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContextBuilder
name|hcBuilder
init|=
operator|new
name|HFileContextBuilder
argument_list|()
decl_stmt|;
name|hcBuilder
operator|.
name|withBlockSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|HFileContext
name|hFileContext
init|=
name|hcBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer1
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer2
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MemStore
name|memstore
init|=
operator|new
name|DefaultMemStore
argument_list|()
decl_stmt|;
name|writeMemstoreAndStoreFiles
argument_list|(
name|memstore
argument_list|,
operator|new
name|StoreFile
operator|.
name|Writer
index|[]
block|{
name|writer1
block|,
name|writer2
block|}
argument_list|)
expr_stmt|;
name|StoreFile
name|sf1
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer1
operator|.
name|getPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|StoreFile
name|sf2
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer2
operator|.
name|getPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
comment|/**      * Test without MVCC      */
name|int
name|startRowNum
init|=
name|ROWSIZE
operator|/
literal|2
decl_stmt|;
name|ReversedKeyValueHeap
name|kvHeap
init|=
name|getReversibleKeyValueHeap
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|ROWS
index|[
name|startRowNum
index|]
argument_list|,
name|MAXMVCC
argument_list|)
decl_stmt|;
name|internalTestSeekAndNextForReversibleKeyValueHeap
argument_list|(
name|kvHeap
argument_list|,
name|startRowNum
argument_list|)
expr_stmt|;
name|startRowNum
operator|=
name|ROWSIZE
operator|-
literal|1
expr_stmt|;
name|kvHeap
operator|=
name|getReversibleKeyValueHeap
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|MAXMVCC
argument_list|)
expr_stmt|;
name|internalTestSeekAndNextForReversibleKeyValueHeap
argument_list|(
name|kvHeap
argument_list|,
name|startRowNum
argument_list|)
expr_stmt|;
comment|/**      * Test with MVCC      */
for|for
control|(
name|int
name|readPoint
init|=
literal|0
init|;
name|readPoint
operator|<
name|MAXMVCC
condition|;
name|readPoint
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting read point to "
operator|+
name|readPoint
argument_list|)
expr_stmt|;
name|startRowNum
operator|=
name|ROWSIZE
operator|-
literal|1
expr_stmt|;
name|kvHeap
operator|=
name|getReversibleKeyValueHeap
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRowNum
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|i
operator|-
literal|2
operator|<
literal|0
condition|)
break|break;
name|i
operator|=
name|i
operator|-
literal|2
expr_stmt|;
name|kvHeap
operator|.
name|seekToPreviousRow
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|ROWS
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nextReadableNum
init|=
name|getNextReadableNumWithBackwardScan
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextReadableNum
operator|==
literal|null
condition|)
break|break;
name|KeyValue
name|expecedKey
init|=
name|makeKV
argument_list|(
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
argument_list|,
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expecedKey
argument_list|,
name|kvHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|int
name|qualNum
init|=
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualNum
operator|+
literal|1
operator|<
name|QUALSIZE
condition|)
block|{
name|kvHeap
operator|.
name|backwardSeek
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|qualNum
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nextReadableNum
operator|=
name|getNextReadableNumWithBackwardScan
argument_list|(
name|i
argument_list|,
name|qualNum
operator|+
literal|1
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextReadableNum
operator|==
literal|null
condition|)
break|break;
name|expecedKey
operator|=
name|makeKV
argument_list|(
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
argument_list|,
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expecedKey
argument_list|,
name|kvHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|qualNum
operator|=
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|kvHeap
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualNum
operator|+
literal|1
operator|>=
name|QUALSIZE
condition|)
block|{
name|nextReadableNum
operator|=
name|getNextReadableNumWithBackwardScan
argument_list|(
name|i
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextReadableNum
operator|=
name|getNextReadableNumWithBackwardScan
argument_list|(
name|i
argument_list|,
name|qualNum
operator|+
literal|1
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextReadableNum
operator|==
literal|null
condition|)
break|break;
name|expecedKey
operator|=
name|makeKV
argument_list|(
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
argument_list|,
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expecedKey
argument_list|,
name|kvHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversibleStoreScanner
parameter_list|()
throws|throws
name|IOException
block|{
comment|// write data to one memstore and two store files
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"testReversibleStoreScanner"
argument_list|)
argument_list|,
literal|"regionname"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContextBuilder
name|hcBuilder
init|=
operator|new
name|HFileContextBuilder
argument_list|()
decl_stmt|;
name|hcBuilder
operator|.
name|withBlockSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|HFileContext
name|hFileContext
init|=
name|hcBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer1
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer2
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MemStore
name|memstore
init|=
operator|new
name|DefaultMemStore
argument_list|()
decl_stmt|;
name|writeMemstoreAndStoreFiles
argument_list|(
name|memstore
argument_list|,
operator|new
name|StoreFile
operator|.
name|Writer
index|[]
block|{
name|writer1
block|,
name|writer2
block|}
argument_list|)
expr_stmt|;
name|StoreFile
name|sf1
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer1
operator|.
name|getPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|StoreFile
name|sf2
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer2
operator|.
name|getPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|ScanType
name|scanType
init|=
name|ScanType
operator|.
name|USER_SCAN
decl_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|FAMILYNAME
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
comment|// Case 1.Test a full reversed scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StoreScanner
name|storeScanner
init|=
name|getReversibleStoreScanner
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|scan
argument_list|,
name|scanType
argument_list|,
name|scanInfo
argument_list|,
name|MAXMVCC
argument_list|)
decl_stmt|;
name|verifyCountAndOrder
argument_list|(
name|storeScanner
argument_list|,
name|QUALSIZE
operator|*
name|ROWSIZE
argument_list|,
name|ROWSIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case 2.Test reversed scan with a specified start row
name|int
name|startRowNum
init|=
name|ROWSIZE
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|ROWS
index|[
name|startRowNum
index|]
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|storeScanner
operator|=
name|getReversibleStoreScanner
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|scan
argument_list|,
name|scanType
argument_list|,
name|scanInfo
argument_list|,
name|MAXMVCC
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|storeScanner
argument_list|,
name|QUALSIZE
operator|*
operator|(
name|startRowNum
operator|+
literal|1
operator|)
argument_list|,
name|startRowNum
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case 3.Test reversed scan with a specified start row and specified
comment|// qualifiers
name|assertTrue
argument_list|(
name|QUALSIZE
operator|>
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILYNAME
argument_list|,
name|QUALS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILYNAME
argument_list|,
name|QUALS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|storeScanner
operator|=
name|getReversibleStoreScanner
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|scan
argument_list|,
name|scanType
argument_list|,
name|scanInfo
argument_list|,
name|MAXMVCC
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|storeScanner
argument_list|,
literal|2
operator|*
operator|(
name|startRowNum
operator|+
literal|1
operator|)
argument_list|,
name|startRowNum
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case 4.Test reversed scan with mvcc based on case 3
for|for
control|(
name|int
name|readPoint
init|=
literal|0
init|;
name|readPoint
operator|<
name|MAXMVCC
condition|;
name|readPoint
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting read point to "
operator|+
name|readPoint
argument_list|)
expr_stmt|;
name|storeScanner
operator|=
name|getReversibleStoreScanner
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|scan
argument_list|,
name|scanType
argument_list|,
name|scanInfo
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
name|int
name|expectedRowCount
init|=
literal|0
decl_stmt|;
name|int
name|expectedKVCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRowNum
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|kvCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|makeMVCC
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|<=
name|readPoint
condition|)
block|{
name|kvCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|makeMVCC
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
operator|<=
name|readPoint
condition|)
block|{
name|kvCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|kvCount
operator|>
literal|0
condition|)
block|{
name|expectedRowCount
operator|++
expr_stmt|;
name|expectedKVCount
operator|+=
name|kvCount
expr_stmt|;
block|}
block|}
name|verifyCountAndOrder
argument_list|(
name|storeScanner
argument_list|,
name|expectedKVCount
argument_list|,
name|expectedRowCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversibleRegionScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|FAMILYNAME2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCf2"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtable"
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYNAME
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYNAME2
argument_list|)
argument_list|)
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|loadDataToRegion
argument_list|(
name|region
argument_list|,
name|FAMILYNAME2
argument_list|)
expr_stmt|;
comment|// verify row count with forward scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|ROWSIZE
operator|*
name|QUALSIZE
operator|*
literal|2
argument_list|,
name|ROWSIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Case1:Full reversed scan
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|ROWSIZE
operator|*
name|QUALSIZE
operator|*
literal|2
argument_list|,
name|ROWSIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case2:Full reversed scan with one family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILYNAME
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|ROWSIZE
operator|*
name|QUALSIZE
argument_list|,
name|ROWSIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case3:Specify qualifiers + One family
name|byte
index|[]
index|[]
name|specifiedQualifiers
init|=
block|{
name|QUALS
index|[
literal|1
index|]
block|,
name|QUALS
index|[
literal|2
index|]
block|}
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|specifiedQualifier
range|:
name|specifiedQualifiers
control|)
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILYNAME
argument_list|,
name|specifiedQualifier
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|ROWSIZE
operator|*
literal|2
argument_list|,
name|ROWSIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case4:Specify qualifiers + Two families
for|for
control|(
name|byte
index|[]
name|specifiedQualifier
range|:
name|specifiedQualifiers
control|)
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILYNAME2
argument_list|,
name|specifiedQualifier
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|ROWSIZE
operator|*
literal|2
operator|*
literal|2
argument_list|,
name|ROWSIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case5: Case4 + specify start row
name|int
name|startRowNum
init|=
name|ROWSIZE
operator|*
literal|3
operator|/
literal|4
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
name|startRowNum
index|]
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
operator|(
name|startRowNum
operator|+
literal|1
operator|)
operator|*
literal|2
operator|*
literal|2
argument_list|,
operator|(
name|startRowNum
operator|+
literal|1
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case6: Case4 + specify stop row
name|int
name|stopRowNum
init|=
name|ROWSIZE
operator|/
literal|4
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
name|stopRowNum
index|]
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
operator|(
name|ROWSIZE
operator|-
name|stopRowNum
operator|-
literal|1
operator|)
operator|*
literal|2
operator|*
literal|2
argument_list|,
operator|(
name|ROWSIZE
operator|-
name|stopRowNum
operator|-
literal|1
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case7: Case4 + specify start row + specify stop row
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
name|startRowNum
index|]
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
operator|(
name|startRowNum
operator|-
name|stopRowNum
operator|)
operator|*
literal|2
operator|*
literal|2
argument_list|,
operator|(
name|startRowNum
operator|-
name|stopRowNum
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case8: Case7 + SingleColumnValueFilter
name|int
name|valueNum
init|=
name|startRowNum
operator|%
name|VALUESIZE
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILYNAME
argument_list|,
name|specifiedQualifiers
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
name|valueNum
index|]
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|int
name|unfilteredRowNum
init|=
operator|(
name|startRowNum
operator|-
name|stopRowNum
operator|)
operator|/
name|VALUESIZE
operator|+
operator|(
name|stopRowNum
operator|/
name|VALUESIZE
operator|==
name|valueNum
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|unfilteredRowNum
operator|*
literal|2
operator|*
literal|2
argument_list|,
name|unfilteredRowNum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case9: Case7 + PageFilter
name|int
name|pageSize
init|=
literal|10
decl_stmt|;
name|filter
operator|=
operator|new
name|PageFilter
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|int
name|expectedRowNum
init|=
name|pageSize
decl_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|expectedRowNum
operator|*
literal|2
operator|*
literal|2
argument_list|,
name|expectedRowNum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case10: Case7 + FilterList+MUST_PASS_ONE
name|SingleColumnValueFilter
name|scvFilter1
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILYNAME
argument_list|,
name|specifiedQualifiers
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SingleColumnValueFilter
name|scvFilter2
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILYNAME
argument_list|,
name|specifiedQualifiers
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|expectedRowNum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRowNum
init|;
name|i
operator|>
name|stopRowNum
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|i
operator|%
name|VALUESIZE
operator|==
literal|0
operator|||
name|i
operator|%
name|VALUESIZE
operator|==
literal|1
condition|)
block|{
name|expectedRowNum
operator|++
expr_stmt|;
block|}
block|}
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|scvFilter1
argument_list|,
name|scvFilter2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|expectedRowNum
operator|*
literal|2
operator|*
literal|2
argument_list|,
name|expectedRowNum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Case10: Case7 + FilterList+MUST_PASS_ALL
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|scvFilter1
argument_list|,
name|scvFilter2
argument_list|)
expr_stmt|;
name|expectedRowNum
operator|=
literal|0
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|verifyCountAndOrder
argument_list|(
name|scanner
argument_list|,
name|expectedRowNum
operator|*
literal|2
operator|*
literal|2
argument_list|,
name|expectedRowNum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StoreScanner
name|getReversibleStoreScanner
parameter_list|(
name|MemStore
name|memstore
parameter_list|,
name|StoreFile
name|sf1
parameter_list|,
name|StoreFile
name|sf2
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|int
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|getScanners
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|entry
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Should only one family
name|columns
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|StoreScanner
name|storeScanner
init|=
operator|new
name|ReversedStoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scanType
argument_list|,
name|columns
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
return|return
name|storeScanner
return|;
block|}
specifier|private
name|void
name|verifyCountAndOrder
parameter_list|(
name|InternalScanner
name|scanner
parameter_list|,
name|int
name|expectedKVCount
parameter_list|,
name|int
name|expectedRowCount
parameter_list|,
name|boolean
name|forward
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvList
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|Result
name|lastResult
init|=
literal|null
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|int
name|kvCount
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|NextState
operator|.
name|hasMoreValues
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|kvList
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|kvList
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|rowCount
operator|++
expr_stmt|;
name|kvCount
operator|+=
name|kvList
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|Result
name|curResult
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"LastResult:"
operator|+
name|lastResult
operator|+
literal|"CurResult:"
operator|+
name|curResult
argument_list|,
name|forward
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|curResult
operator|.
name|getRow
argument_list|()
argument_list|,
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastResult
operator|=
name|Result
operator|.
name|create
argument_list|(
name|kvList
argument_list|)
expr_stmt|;
name|kvList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|kvList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rowCount
operator|++
expr_stmt|;
name|kvCount
operator|+=
name|kvList
operator|.
name|size
argument_list|()
expr_stmt|;
name|kvList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedKVCount
argument_list|,
name|kvCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRowCount
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|internalTestSeekAndNextForReversibleKeyValueHeap
parameter_list|(
name|ReversedKeyValueHeap
name|kvHeap
parameter_list|,
name|int
name|startRowNum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Test next and seek
for|for
control|(
name|int
name|i
init|=
name|startRowNum
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|1
operator|&&
name|i
operator|-
literal|2
operator|>=
literal|0
condition|)
block|{
name|i
operator|=
name|i
operator|-
literal|2
expr_stmt|;
name|kvHeap
operator|.
name|seekToPreviousRow
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|ROWS
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|1
operator|&&
operator|(
name|j
operator|+
literal|1
operator|)
operator|<
name|QUALSIZE
condition|)
block|{
name|j
operator|=
name|j
operator|+
literal|1
expr_stmt|;
name|kvHeap
operator|.
name|backwardSeek
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|kvHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|kvHeap
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|kvHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ReversedKeyValueHeap
name|getReversibleKeyValueHeap
parameter_list|(
name|MemStore
name|memstore
parameter_list|,
name|StoreFile
name|sf1
parameter_list|,
name|StoreFile
name|sf2
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|int
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|getScanners
argument_list|(
name|memstore
argument_list|,
name|sf1
argument_list|,
name|sf2
argument_list|,
name|startRow
argument_list|,
literal|true
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
name|ReversedKeyValueHeap
name|kvHeap
init|=
operator|new
name|ReversedKeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
return|return
name|kvHeap
return|;
block|}
specifier|private
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|getScanners
parameter_list|(
name|MemStore
name|memstore
parameter_list|,
name|StoreFile
name|sf1
parameter_list|,
name|StoreFile
name|sf2
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|boolean
name|doSeek
parameter_list|,
name|int
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|fileScanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sf1
argument_list|,
name|sf2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memScanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
name|readPoint
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|(
name|fileScanners
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|addAll
argument_list|(
name|fileScanners
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|addAll
argument_list|(
name|memScanners
argument_list|)
expr_stmt|;
if|if
condition|(
name|doSeek
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|startRow
argument_list|)
condition|)
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|seekToLastRow
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|KeyValue
name|startKey
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scanners
return|;
block|}
specifier|private
name|void
name|seekTestOfReversibleKeyValueScanner
parameter_list|(
name|KeyValueScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Test without MVCC      */
comment|// Test seek to last row
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekToLastRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|makeKV
argument_list|(
name|ROWSIZE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test backward seek in three cases
comment|// Case1: seek in the same row in backwardSeek
name|KeyValue
name|seekKey
init|=
name|makeKV
argument_list|(
name|ROWSIZE
operator|-
literal|2
argument_list|,
name|QUALSIZE
operator|-
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|seekKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seekKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case2: seek to the previous row in backwardSeek
name|int
name|seekRowNum
init|=
name|ROWSIZE
operator|-
literal|2
decl_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|KeyValueUtil
operator|.
name|createLastOnRow
argument_list|(
name|ROWS
index|[
name|seekRowNum
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|expectedKey
init|=
name|makeKV
argument_list|(
name|seekRowNum
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case3: unable to backward seek
name|assertFalse
argument_list|(
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|KeyValueUtil
operator|.
name|createLastOnRow
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test seek to previous row
name|seekRowNum
operator|=
name|ROWSIZE
operator|-
literal|4
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekToPreviousRow
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|ROWS
index|[
name|seekRowNum
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKey
operator|=
name|makeKV
argument_list|(
name|seekRowNum
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test seek to previous row for the first row
name|assertFalse
argument_list|(
name|scanner
operator|.
name|seekToPreviousRow
argument_list|(
name|makeKV
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|seekTestOfReversibleKeyValueScannerWithMVCC
parameter_list|(
name|KeyValueScanner
name|scanner
parameter_list|,
name|int
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Test with MVCC      */
comment|// Test seek to last row
name|KeyValue
name|expectedKey
init|=
name|getNextReadableKeyValueWithBackwardScan
argument_list|(
name|ROWSIZE
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
operator|!=
literal|null
argument_list|,
name|scanner
operator|.
name|seekToLastRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test backward seek in two cases
comment|// Case1: seek in the same row in backwardSeek
name|expectedKey
operator|=
name|getNextReadableKeyValueWithBackwardScan
argument_list|(
name|ROWSIZE
operator|-
literal|2
argument_list|,
name|QUALSIZE
operator|-
literal|2
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
operator|!=
literal|null
argument_list|,
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|expectedKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case2: seek to the previous row in backwardSeek
name|int
name|seekRowNum
init|=
name|ROWSIZE
operator|-
literal|3
decl_stmt|;
name|KeyValue
name|seekKey
init|=
name|KeyValueUtil
operator|.
name|createLastOnRow
argument_list|(
name|ROWS
index|[
name|seekRowNum
index|]
argument_list|)
decl_stmt|;
name|expectedKey
operator|=
name|getNextReadableKeyValueWithBackwardScan
argument_list|(
name|seekRowNum
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
operator|!=
literal|null
argument_list|,
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|seekKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test seek to previous row
name|seekRowNum
operator|=
name|ROWSIZE
operator|-
literal|4
expr_stmt|;
name|expectedKey
operator|=
name|getNextReadableKeyValueWithBackwardScan
argument_list|(
name|seekRowNum
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|readPoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
operator|!=
literal|null
argument_list|,
name|scanner
operator|.
name|seekToPreviousRow
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|ROWS
index|[
name|seekRowNum
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KeyValue
name|getNextReadableKeyValueWithBackwardScan
parameter_list|(
name|int
name|startRowNum
parameter_list|,
name|int
name|startQualNum
parameter_list|,
name|int
name|readPoint
parameter_list|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nextReadableNum
init|=
name|getNextReadableNumWithBackwardScan
argument_list|(
name|startRowNum
argument_list|,
name|startQualNum
argument_list|,
name|readPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextReadableNum
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|makeKV
argument_list|(
name|nextReadableNum
operator|.
name|getFirst
argument_list|()
argument_list|,
name|nextReadableNum
operator|.
name|getSecond
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getNextReadableNumWithBackwardScan
parameter_list|(
name|int
name|startRowNum
parameter_list|,
name|int
name|startQualNum
parameter_list|,
name|int
name|readPoint
parameter_list|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nextReadableNum
init|=
literal|null
decl_stmt|;
name|boolean
name|findExpected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRowNum
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
for|for
control|(
name|int
name|j
init|=
operator|(
name|i
operator|==
name|startRowNum
condition|?
name|startQualNum
else|:
literal|0
operator|)
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|makeMVCC
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
operator|<=
name|readPoint
condition|)
block|{
name|nextReadableNum
operator|=
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|findExpected
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|findExpected
condition|)
break|break;
block|}
return|return
name|nextReadableNum
return|;
block|}
specifier|private
specifier|static
name|void
name|loadDataToRegion
parameter_list|(
name|Region
name|region
parameter_list|,
name|byte
index|[]
name|additionalFamily
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
comment|// put additional family
name|put
operator|.
name|add
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|additionalFamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|ROWSIZE
operator|/
literal|3
operator|||
name|i
operator|==
name|ROWSIZE
operator|*
literal|2
operator|/
literal|3
condition|)
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeMemstoreAndStoreFiles
parameter_list|(
name|MemStore
name|memstore
parameter_list|,
specifier|final
name|StoreFile
operator|.
name|Writer
index|[]
name|writers
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|memstore
operator|.
name|add
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
index|[
operator|(
name|i
operator|+
name|j
operator|)
operator|%
name|writers
operator|.
name|length
index|]
operator|.
name|append
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeStoreFile
parameter_list|(
specifier|final
name|StoreFile
operator|.
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeMemstore
parameter_list|(
name|MemStore
name|memstore
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add half of the keyvalues to memstore
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|+
name|j
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|memstore
operator|.
name|add
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// Add another half of the keyvalues to snapshot
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUALSIZE
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|+
name|j
operator|)
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|memstore
operator|.
name|add
argument_list|(
name|makeKV
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|KeyValue
name|makeKV
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|cqNum
parameter_list|)
block|{
return|return
name|makeKV
argument_list|(
name|rowNum
argument_list|,
name|cqNum
argument_list|,
name|FAMILYNAME
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|KeyValue
name|makeKV
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|cqNum
parameter_list|,
name|byte
index|[]
name|familyName
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|ROWS
index|[
name|rowNum
index|]
argument_list|,
name|familyName
argument_list|,
name|QUALS
index|[
name|cqNum
index|]
argument_list|,
name|TS
argument_list|,
name|VALUES
index|[
name|rowNum
operator|%
name|VALUESIZE
index|]
argument_list|)
decl_stmt|;
name|kv
operator|.
name|setSequenceId
argument_list|(
name|makeMVCC
argument_list|(
name|rowNum
argument_list|,
name|cqNum
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kv
return|;
block|}
specifier|private
specifier|static
name|long
name|makeMVCC
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|cqNum
parameter_list|)
block|{
return|return
operator|(
name|rowNum
operator|+
name|cqNum
operator|)
operator|%
operator|(
name|MAXMVCC
operator|+
literal|1
operator|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

