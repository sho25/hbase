begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoreCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|HasRegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests around regionserver shutdown and abort  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionServerAbort
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionServerAbort
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|testUtil
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|testUtil
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|conf
operator|=
name|testUtil
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|StopBlockingRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|StopBlockingRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we have multiple blocks so that the client does not prefetch all block locations
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.blocksize"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// prefetch the first block
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_PREFETCH_SIZE_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_IMPL
argument_list|,
name|ErrorThrowingHRegion
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|testUtil
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
name|testUtil
operator|.
name|startMiniDFSCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|testUtil
operator|.
name|startMiniHBaseCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|StopBlockingRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|rs
init|=
name|t
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|RegionServerCoprocessorHost
name|cpHost
init|=
name|rs
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|StopBlockingRegionObserver
name|cp
init|=
operator|(
name|StopBlockingRegionObserver
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|cp
operator|.
name|setStopAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|RegionServerCoprocessorHost
name|host
init|=
name|master
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|StopBlockingRegionObserver
name|obs
init|=
operator|(
name|StopBlockingRegionObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|obs
operator|!=
literal|null
condition|)
name|obs
operator|.
name|setStopAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|testUtil
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that a regionserver is able to abort properly, even when a coprocessor    * throws an exception in preStopRegionServer().    */
annotation|@
name|Test
specifier|public
name|void
name|testAbortFromRPC
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testAbortFromRPC"
argument_list|)
decl_stmt|;
comment|// create a test table
name|Table
name|table
init|=
name|testUtil
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY_BYTES
argument_list|)
decl_stmt|;
comment|// write some edits
name|testUtil
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|FAMILY_BYTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrote data"
argument_list|)
expr_stmt|;
comment|// force a flush
name|cluster
operator|.
name|flushcache
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushed table"
argument_list|)
expr_stmt|;
comment|// Send a poisoned put to trigger the abort
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_BYTES
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|put
operator|.
name|setAttribute
argument_list|(
name|StopBlockingRegionObserver
operator|.
name|DO_ABORT
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// should have triggered an abort due to FileNotFoundException
comment|// verify that the regionserver is stopped
name|HRegion
name|firstRegion
init|=
name|cluster
operator|.
name|findRegionsForTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|firstRegion
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|firstRegion
operator|.
name|getRegionServerServices
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"isAborted = "
operator|+
name|firstRegion
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|isAborted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|firstRegion
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|isAborted
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"isStopped = "
operator|+
name|firstRegion
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|firstRegion
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a coprocessor is able to override a normal regionserver stop request.    */
annotation|@
name|Test
specifier|public
name|void
name|testStopOverrideFromCoprocessor
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|testUtil
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HRegionServer
name|regionserver
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|admin
operator|.
name|stopRegionServer
argument_list|(
name|regionserver
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// regionserver should have failed to stop due to coprocessor
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|isAborted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CoreCoprocessor
specifier|public
specifier|static
class|class
name|StopBlockingRegionObserver
implements|implements
name|RegionServerCoprocessor
implements|,
name|RegionCoprocessor
implements|,
name|RegionServerObserver
implements|,
name|RegionObserver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DO_ABORT
init|=
literal|"DO_ABORT"
decl_stmt|;
specifier|private
name|boolean
name|stopAllowed
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionServerObserver
argument_list|>
name|getRegionServerObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|put
operator|.
name|getAttribute
argument_list|(
name|DO_ABORT
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Change this so it throws a CP Abort Exception instead.
name|RegionServerServices
name|rss
init|=
operator|(
operator|(
name|HasRegionServerServices
operator|)
name|c
operator|.
name|getEnvironment
argument_list|()
operator|)
operator|.
name|getRegionServerServices
argument_list|()
decl_stmt|;
name|String
name|str
init|=
literal|"Aborting for test"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
operator|+
literal|" "
operator|+
name|rss
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|rss
operator|.
name|abort
argument_list|(
name|str
argument_list|,
operator|new
name|Throwable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopRegionServer
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|stopAllowed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stop not allowed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setStopAllowed
parameter_list|(
name|boolean
name|allowed
parameter_list|)
block|{
name|this
operator|.
name|stopAllowed
operator|=
name|allowed
expr_stmt|;
block|}
block|}
comment|/**    * Throws an exception during store file refresh in order to trigger a regionserver abort.    */
specifier|public
specifier|static
class|class
name|ErrorThrowingHRegion
extends|extends
name|HRegion
block|{
specifier|public
name|ErrorThrowingHRegion
parameter_list|(
name|Path
name|tableDir
parameter_list|,
name|WAL
name|wal
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|confParam
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|super
argument_list|(
name|tableDir
argument_list|,
name|wal
argument_list|,
name|fs
argument_list|,
name|confParam
argument_list|,
name|regionInfo
argument_list|,
name|htd
argument_list|,
name|rsServices
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ErrorThrowingHRegion
parameter_list|(
name|HRegionFileSystem
name|fs
parameter_list|,
name|WAL
name|wal
parameter_list|,
name|Configuration
name|confParam
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|wal
argument_list|,
name|confParam
argument_list|,
name|htd
argument_list|,
name|rsServices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|refreshStoreFiles
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
comment|// forced when called through RegionScannerImpl.handleFileNotFound()
if|if
condition|(
name|force
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failing file refresh for testing"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|refreshStoreFiles
argument_list|(
name|force
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

