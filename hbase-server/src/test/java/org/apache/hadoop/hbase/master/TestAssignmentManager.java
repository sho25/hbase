begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScannable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaMockingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|consensus
operator|.
name|ConsensusProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|consensus
operator|.
name|ConsensusProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PayloadCarryingRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
operator|.
name|NullTableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadBalancerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|SimpleLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|EnableTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|ServerShutdownHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RecoverableZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Test {@link AssignmentManager}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAssignmentManager
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SERVERNAME_A
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"example.org"
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SERVERNAME_B
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"example.org"
argument_list|,
literal|0
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|REGIONINFO
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|assignmentCount
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|enabling
init|=
literal|false
decl_stmt|;
comment|// Mocked objects or; get redone for each test.
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
name|LoadBalancer
name|balancer
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
comment|// TODO: Make generic versions of what we do below and put up in a mocking
comment|// utility class or move up into HBaseTestingUtility.
comment|// Mock a Server.  Have it return a legit Configuration and ZooKeeperWatcher.
comment|// If abort is called, be sure to fail the test (don't just swallow it
comment|// silently as is mockito default).
name|this
operator|.
name|server
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"master,1,1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"mockedServer"
argument_list|,
name|this
operator|.
name|server
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Aborted"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|server
argument_list|)
operator|.
name|abort
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
operator|(
name|Throwable
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mock a ServerManager.  Say server SERVERNAME_{A,B} are online.  Also
comment|// make it so if close or open, we return 'success'.
name|this
operator|.
name|serverManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_B
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getDeadServers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DeadServer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|onlineServers
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
argument_list|()
decl_stmt|;
name|onlineServers
operator|.
name|put
argument_list|(
name|SERVERNAME_B
argument_list|,
name|ServerLoad
operator|.
name|EMPTY_SERVERLOAD
argument_list|)
expr_stmt|;
name|onlineServers
operator|.
name|put
argument_list|(
name|SERVERNAME_A
argument_list|,
name|ServerLoad
operator|.
name|EMPTY_SERVERLOAD
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|onlineServers
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|onlineServers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|avServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|avServers
operator|.
name|addAll
argument_list|(
name|onlineServers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|avServers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|avServers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_A
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Ditto on open.
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionOpen
argument_list|(
name|SERVERNAME_A
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionOpen
argument_list|(
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|this
operator|.
name|watcher
operator|!=
literal|null
condition|)
block|{
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test a balance going on at same time as a master failover    *    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    * @throws DeserializationException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithOpenedNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|ServiceException
throws|,
name|DeserializationException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// As part of the failover cleanup, the balancing region plan is removed.
comment|// So a random server will be used to open the region. For testing purpose,
comment|// let's assume it is going to open on server b:
name|am
operator|.
name|addPlan
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
literal|null
argument_list|,
name|SERVERNAME_B
argument_list|)
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionFailedToCloseAndSetToPendingClose
argument_list|(
name|am
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionPendingOpenInRIT
argument_list|(
name|am
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test times out.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithClosedNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|ServiceException
throws|,
name|DeserializationException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// As part of the failover cleanup, the balancing region plan is removed.
comment|// So a random server will be used to open the region. For testing purpose,
comment|// let's assume it is going to open on server b:
name|am
operator|.
name|addPlan
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
literal|null
argument_list|,
name|SERVERNAME_B
argument_list|)
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionFailedToCloseAndSetToPendingClose
argument_list|(
name|am
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionPendingOpenInRIT
argument_list|(
name|am
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test timesout.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithOfflineNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|ServiceException
throws|,
name|DeserializationException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// As part of the failover cleanup, the balancing region plan is removed.
comment|// So a random server will be used to open the region. For testing purpose,
comment|// let's assume it is going to open on server b:
name|am
operator|.
name|addPlan
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
literal|null
argument_list|,
name|SERVERNAME_B
argument_list|)
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionFailedToCloseAndSetToPendingClose
argument_list|(
name|am
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionPendingOpenInRIT
argument_list|(
name|am
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test timesout.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createRegionPlanAndBalance
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ServerName
name|from
parameter_list|,
specifier|final
name|ServerName
name|to
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|RegionException
block|{
comment|// Call the balance function but fake the region being online first at
comment|// servername from.
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|from
argument_list|)
expr_stmt|;
comment|// Balance region from 'from' to 'to'. It calls unassign setting CLOSING state
comment|// up in zk.  Create a plan and balance
name|am
operator|.
name|balance
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests AssignmentManager balance function.  Runs a balance moving a region    * from one server to another mocking regionserver responding over zk.    * @throws IOException    * @throws KeeperException    * @throws DeserializationException    */
annotation|@
name|Test
specifier|public
name|void
name|testBalance
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|DeserializationException
throws|,
name|InterruptedException
block|{
comment|// Create and startup an executor.  This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testBalanceExecutor"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|failoverCleanupDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Make sure our new AM gets callbacks; once registered, can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|this
operator|.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
comment|// Call the balance function but fake the region being online first at
comment|// SERVERNAME_A.  Create a balance plan.
name|am
operator|.
name|regionOnline
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// Balance region from A to B.
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|)
decl_stmt|;
name|am
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
comment|// Must be failed to close since the server is fake
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|REGIONINFO
argument_list|)
operator|&&
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|FAILED_CLOSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Move it back to pending_close
name|regionStates
operator|.
name|updateRegionState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|PENDING_CLOSE
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state.  This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// AM is going to notice above CLOSED and queue up a new assign.  The
comment|// assign will go to open the region in the new location set by the
comment|// balancer.  The zk node will be OFFLINE waiting for regionserver to
comment|// transition it through OPENING, OPENED.  Wait till we see the OFFLINE
comment|// zk node before we proceed.
name|Mocking
operator|.
name|waitForRegionPendingOpenInRIT
argument_list|(
name|am
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get current versionid else will fail on transition from OFFLINE to OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Wait on the handler removing the OPENED znode.
while|while
condition|(
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|REGIONINFO
argument_list|)
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run a simple server shutdown handler.    * @throws KeeperException    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testShutdownHandler
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|ServiceException
block|{
comment|// Create and startup an executor.  This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testShutdownHandler"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|processServerShutdownHandler
argument_list|(
name|ct
argument_list|,
name|am
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * To test closed region handler to remove rit and delete corresponding znode    * if region in pending close or closing while processing shutdown of a region    * server.(HBASE-5927).    *    * @throws KeeperException    * @throws IOException    * @throws ServiceException    */
annotation|@
name|Test
specifier|public
name|void
name|testSSHWhenDisableTableInProgress
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|ServiceException
block|{
name|testCaseWithPartiallyDisabledState
argument_list|(
name|Table
operator|.
name|State
operator|.
name|DISABLING
argument_list|)
expr_stmt|;
name|testCaseWithPartiallyDisabledState
argument_list|(
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
comment|/**    * To test if the split region is removed from RIT if the region was in SPLITTING state but the RS    * has actually completed the splitting in hbase:meta but went down. See HBASE-6070 and also HBASE-5806    *    * @throws KeeperException    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testSSHWhenSplitRegionInProgress
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|Exception
block|{
comment|// true indicates the region is split but still in RIT
name|testCaseWithSplitRegionPartial
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// false indicate the region is not split
name|testCaseWithSplitRegionPartial
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCaseWithSplitRegionPartial
parameter_list|(
name|boolean
name|regionSplitDone
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|NodeExistsException
throws|,
name|InterruptedException
throws|,
name|ServiceException
block|{
comment|// Create and startup an executor. This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testSSHWhenSplitRegionInProgress"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
comment|// Create an AM.
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
comment|// adding region to regions and servers maps.
name|am
operator|.
name|regionOnline
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// adding region in pending close.
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|updateRegionState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|SPLITTING
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|RegionTransition
name|data
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create znode in M_ZK_REGION_CLOSING state.
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|node
argument_list|,
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|processServerShutdownHandler
argument_list|(
name|ct
argument_list|,
name|am
argument_list|,
name|regionSplitDone
argument_list|)
expr_stmt|;
comment|// check znode deleted or not.
comment|// In both cases the znode should be deleted.
if|if
condition|(
name|regionSplitDone
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Region state of region in SPLITTING should be removed from rit."
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|am
operator|.
name|assignInvoked
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Assign should be invoked."
argument_list|,
name|am
operator|.
name|assignInvoked
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|REGIONINFO
operator|.
name|setOffline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|REGIONINFO
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testCaseWithPartiallyDisabledState
parameter_list|(
name|Table
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|NodeExistsException
throws|,
name|ServiceException
block|{
comment|// Create and startup an executor. This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testSSHWhenDisableTableInProgress"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
comment|// adding region to regions and servers maps.
name|am
operator|.
name|regionOnline
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// adding region in pending close.
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|updateRegionState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|PENDING_CLOSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|Table
operator|.
name|State
operator|.
name|DISABLING
condition|)
block|{
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setDisablingTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setDisabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionTransition
name|data
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|EventType
operator|.
name|M_ZK_REGION_CLOSING
argument_list|,
name|REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
comment|// RegionTransitionData data = new
comment|// RegionTransitionData(EventType.M_ZK_REGION_CLOSING,
comment|// REGIONINFO.getRegionName(), SERVERNAME_A);
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create znode in M_ZK_REGION_CLOSING state.
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|node
argument_list|,
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|processServerShutdownHandler
argument_list|(
name|ct
argument_list|,
name|am
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// check znode deleted or not.
comment|// In both cases the znode should be deleted.
name|assertTrue
argument_list|(
literal|"The znode should be deleted."
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|node
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check whether in rit or not. In the DISABLING case also the below
comment|// assert will be true but the piece of code added for HBASE-5927 will not
comment|// do that.
if|if
condition|(
name|state
operator|==
name|Table
operator|.
name|State
operator|.
name|DISABLED
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Region state of region in pending close should be removed from rit."
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|am
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processServerShutdownHandler
parameter_list|(
name|CatalogTracker
name|ct
parameter_list|,
name|AssignmentManager
name|am
parameter_list|,
name|boolean
name|splitRegion
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServiceException
block|{
comment|// Make sure our new AM gets callbacks; once registered, can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|this
operator|.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
comment|// Need to set up a fake scan of meta for the servershutdown handler
comment|// Make an RS Interface implementation.  Make it so a scanner can go against it.
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|implementation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get a meta row result that has region up on SERVERNAME_A
name|Result
name|r
decl_stmt|;
if|if
condition|(
name|splitRegion
condition|)
block|{
name|r
operator|=
name|MetaMockingUtil
operator|.
name|getMetaTableRowResultAsSplitRegion
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|MetaMockingUtil
operator|.
name|getMetaTableRowResult
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setMoreResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCellsPerResult
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cellScannables
init|=
operator|new
name|ArrayList
argument_list|<
name|CellScannable
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cellScannables
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|implementation
operator|.
name|scan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|ScanResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScanResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|PayloadCarryingRpcController
name|controller
init|=
operator|(
name|PayloadCarryingRpcController
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
name|controller
operator|.
name|setCellScanner
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cellScannables
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Get a connection w/ mocked up common methods.
name|HConnection
name|connection
init|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnectionAndDecorate
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|implementation
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
comment|// Make it so we can get a catalogtracker from servermanager.. .needed
comment|// down in guts of server shutdown handler.
name|Mockito
operator|.
name|when
argument_list|(
name|ct
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ct
argument_list|)
expr_stmt|;
comment|// Now make a server shutdown handler instance and invoke process.
comment|// Have it that SERVERNAME_A died.
name|DeadServer
name|deadServers
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|deadServers
operator|.
name|add
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// I need a services instance that will return the AM
name|MasterServices
name|services
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getServerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|serverManager
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|ServerShutdownHandler
name|handler
init|=
operator|new
name|ServerShutdownHandler
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|services
argument_list|,
name|deadServers
argument_list|,
name|SERVERNAME_A
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|am
operator|.
name|failoverCleanupDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|handler
operator|.
name|process
argument_list|()
expr_stmt|;
comment|// The region in r will have been assigned.  It'll be up in zk as unassigned.
block|}
comment|/**    * Create and startup executor pools. Start same set as master does (just    * run a few less).    * @param name Name to give our executor    * @return Created executor (be sure to call shutdown when done).    */
specifier|private
name|ExecutorService
name|startupMasterExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// TODO: Move up into HBaseTestingUtility?  Generally useful.
name|ExecutorService
name|executor
init|=
operator|new
name|ExecutorService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_OPEN_REGION
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_CLOSE_REGION
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_SERVER_OPERATIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_META_SERVER_OPERATIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassignWithSplitAtSameTime
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
comment|// Region to use in test.
specifier|final
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
comment|// First amend the servermanager mock so that when we do send close of the
comment|// first meta region on SERVERNAME_A, it will return true rather than
comment|// default null.
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// First make sure my mock up basically works.  Unassign a region.
name|unassign
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This delete will fail if the previous unassign did wrong thing.
name|ZKAssign
operator|.
name|deleteClosingNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// Now put a SPLITTING region in the way.  I don't have to assert it
comment|// go put in place.  This method puts it in place then asserts it still
comment|// owns it by moving state from SPLITTING to SPLITTING.
name|int
name|version
init|=
name|createNodeSplitting
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
comment|// Now, retry the unassign with the SPLTTING in place.  It should just
comment|// complete without fail; a sort of 'silent' recognition that the
comment|// region to unassign has been split and no longer exists: TOOD: what if
comment|// the split fails and the parent region comes back to life?
name|unassign
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This transition should fail if the znode has been messed with.
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the processDeadServersAndRegionsInTransition should not fail with NPE    * when it failed to get the children. Let's abort the system in this    * situation    * @throws ServiceException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testProcessDeadServersAndRegionsInTransitionShouldNotFailWithNPE
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|ServiceException
block|{
specifier|final
name|RecoverableZooKeeper
name|recoverableZk
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RecoverableZooKeeper
operator|.
name|class
argument_list|)
decl_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
name|Watcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
literal|"unittest"
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RecoverableZooKeeper
name|getRecoverableZooKeeper
parameter_list|()
block|{
return|return
name|recoverableZk
return|;
block|}
block|}
decl_stmt|;
operator|(
operator|(
name|ZooKeeperWatcher
operator|)
name|zkw
operator|)
operator|.
name|registerListener
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|recoverableZk
argument_list|)
operator|.
name|getChildren
argument_list|(
literal|"/hbase/region-in-transition"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am
operator|.
name|setWatcher
argument_list|(
operator|(
name|ZooKeeperWatcher
operator|)
name|zkw
argument_list|)
expr_stmt|;
try|try
block|{
name|am
operator|.
name|processDeadServersAndRegionsInTransition
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to abort"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Aborted"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * TestCase verifies that the regionPlan is updated whenever a region fails to open    * and the master tries to process RS_ZK_FAILED_OPEN state.(HBASE-5546).    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionPlanIsUpdatedWhenRegionFailsToOpen
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|ServiceException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|MockedLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Boolean variable used for waiting until randomAssignment is called and
comment|// new
comment|// plan is generated.
name|AtomicBoolean
name|gate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|balancer
operator|instanceof
name|MockedLoadBalancer
condition|)
block|{
operator|(
operator|(
name|MockedLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|setGateVariable
argument_list|(
name|gate
argument_list|)
expr_stmt|;
block|}
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|int
name|v
init|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_FAILED_OPEN
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|updateRegionState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|OPENING
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// a dummy plan inserted into the regionPlans. This plan is cleared and
comment|// new one is formed
name|am
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
literal|null
argument_list|,
name|SERVERNAME_A
argument_list|)
argument_list|)
expr_stmt|;
name|RegionPlan
name|regionPlan
init|=
name|am
operator|.
name|regionPlans
operator|.
name|get
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|serverList
operator|.
name|add
argument_list|(
name|SERVERNAME_B
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverList
argument_list|)
expr_stmt|;
name|am
operator|.
name|nodeDataChanged
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// here we are waiting until the random assignment in the load balancer is
comment|// called.
while|while
condition|(
operator|!
name|gate
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// new region plan may take some time to get updated after random
comment|// assignment is called and
comment|// gate is set to true.
name|RegionPlan
name|newRegionPlan
init|=
name|am
operator|.
name|regionPlans
operator|.
name|get
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|newRegionPlan
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|newRegionPlan
operator|=
name|am
operator|.
name|regionPlans
operator|.
name|get
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the new region plan created may contain the same RS as destination but
comment|// it should
comment|// be new plan.
name|assertNotSame
argument_list|(
literal|"Same region plan should not come"
argument_list|,
name|regionPlan
argument_list|,
name|newRegionPlan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination servers should be different."
argument_list|,
operator|!
operator|(
name|regionPlan
operator|.
name|getDestination
argument_list|()
operator|.
name|equals
argument_list|(
name|newRegionPlan
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Mocking
operator|.
name|waitForRegionPendingOpenInRIT
argument_list|(
name|am
argument_list|,
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|SimpleLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Mocked load balancer class used in the testcase to make sure that the testcase waits until    * random assignment is called and the gate variable is set to true.    */
specifier|public
specifier|static
class|class
name|MockedLoadBalancer
extends|extends
name|SimpleLoadBalancer
block|{
specifier|private
name|AtomicBoolean
name|gate
decl_stmt|;
specifier|public
name|void
name|setGateVariable
parameter_list|(
name|AtomicBoolean
name|gate
parameter_list|)
block|{
name|this
operator|.
name|gate
operator|=
name|gate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|ServerName
name|randomServerName
init|=
name|super
operator|.
name|randomAssignment
argument_list|(
name|regionInfo
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|this
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|randomServerName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|this
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|retainAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
return|;
block|}
block|}
comment|/**    * Test the scenario when the master is in failover and trying to process a    * region which is in Opening state on a dead RS. Master will force offline the    * region and put it in transition. AM relies on SSH to reassign it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionInOpeningStateOnDeadRSWhileMasterFailover
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|ServiceException
throws|,
name|InterruptedException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|SERVERNAME_A
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|version
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|logSplit
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// Assume log splitting is done
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|createRegionState
argument_list|(
name|REGIONINFO
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|processRegionsInTransition
argument_list|(
name|rt
argument_list|,
name|REGIONINFO
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|processServerShutdownHandler
argument_list|(
name|ct
argument_list|,
name|am
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Waiting for the assignment to get completed.
while|while
condition|(
operator|!
name|am
operator|.
name|gate
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The region should be assigned immediately."
argument_list|,
literal|null
operator|!=
name|am
operator|.
name|regionPlans
operator|.
name|get
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test verifies whether assignment is skipped for regions of tables in DISABLING state during    * clean cluster startup. See HBASE-6281.    *    * @throws KeeperException    * @throws IOException    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDisablingTableRegionsAssignmentDuringCleanClusterStartup
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|Exception
block|{
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|MockedLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|destServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|destServers
operator|.
name|add
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|destServers
argument_list|)
expr_stmt|;
comment|// To avoid cast exception in DisableTableHandler process.
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ConsensusProvider
name|cp
init|=
name|ConsensusProviderFactory
operator|.
name|getConsensusProvider
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|HMaster
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|gate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|balancer
operator|instanceof
name|MockedLoadBalancer
condition|)
block|{
operator|(
operator|(
name|MockedLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|setGateVariable
argument_list|(
name|gate
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// set table in disabling state.
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setDisablingTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|joinCluster
argument_list|()
expr_stmt|;
comment|// should not call retainAssignment if we get empty regions in assignAllUserRegions.
name|assertFalse
argument_list|(
literal|"Assign should not be invoked for disabling table regions during clean cluster startup."
argument_list|,
name|gate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to change table state from disabling to disabled.
name|assertTrue
argument_list|(
literal|"Table should be disabled."
argument_list|,
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|isDisabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|SimpleLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test verifies whether all the enabling table regions assigned only once during master startup.    *    * @throws KeeperException    * @throws IOException    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMasterRestartWhenTableInEnabling
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|Exception
block|{
name|enabling
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|destServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|destServers
operator|.
name|add
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|destServers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ConsensusProvider
name|cp
init|=
name|ConsensusProviderFactory
operator|.
name|getConsensusProvider
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|HMaster
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|server
argument_list|,
literal|"serverManager"
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
expr_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
comment|// set table in enabling state.
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnablingTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|EnableTableHandler
argument_list|(
name|server
argument_list|,
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|,
name|am
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|am
argument_list|,
operator|new
name|NullTableLockManager
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|prepare
argument_list|()
operator|.
name|process
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of assignments should be 1."
argument_list|,
literal|1
argument_list|,
name|assignmentCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be enabled."
argument_list|,
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enabling
operator|=
literal|false
expr_stmt|;
name|assignmentCount
operator|=
literal|0
expr_stmt|;
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test verifies whether stale znodes of unknown tables as for the hbase:meta will be removed or    * not.    * @throws KeeperException    * @throws IOException    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMasterRestartShouldRemoveStaleZnodesOfUnknownTableAsForMeta
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|destServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|destServers
operator|.
name|add
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|destServers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ConsensusProvider
name|cp
init|=
name|ConsensusProviderFactory
operator|.
name|getConsensusProvider
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|HMaster
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|server
argument_list|,
literal|"serverManager"
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
expr_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dummyTable"
argument_list|)
decl_stmt|;
comment|// set table in enabling state.
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnablingTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|am
operator|.
name|joinCluster
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table should not be present in zookeeper."
argument_list|,
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|isTablePresent
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{     }
block|}
comment|/**    * When a region is in transition, if the region server opening the region goes down,    * the region assignment takes a long time normally (waiting for timeout monitor to trigger assign).    * This test is to make sure SSH reassigns it right away.    */
annotation|@
name|Test
specifier|public
name|void
name|testSSHTimesOutOpeningRegionTransition
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|ServiceException
block|{
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
comment|// adding region in pending open.
name|RegionState
name|state
init|=
operator|new
name|RegionState
argument_list|(
name|REGIONINFO
argument_list|,
name|State
operator|.
name|OPENING
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|regionOnline
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|regionsInTransition
operator|.
name|put
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// adding region plan
name|am
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|SERVERNAME_A
argument_list|)
argument_list|)
expr_stmt|;
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|REGIONINFO
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|am
operator|.
name|assignInvoked
operator|=
literal|false
expr_stmt|;
name|processServerShutdownHandler
argument_list|(
name|ct
argument_list|,
name|am
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|assignInvoked
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|regionPlans
operator|.
name|remove
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Scenario:<ul>    *<li> master starts a close, and creates a znode</li>    *<li> it fails just at this moment, before contacting the RS</li>    *<li> while the second master is coming up, the targeted RS dies. But it's before ZK timeout so    *    we don't know, and we have an exception.</li>    *<li> the master must handle this nicely and reassign.    *</ul>    */
annotation|@
name|Test
specifier|public
name|void
name|testClosingFailureDuringRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|createRegionState
argument_list|(
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|processRegionInTransition
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new ephemeral node in the SPLITTING state for the specified region.    * Create it ephemeral in case regionserver dies mid-split.    *    *<p>Does not transition nodes from other states.  If a node already exists    * for this region, a {@link NodeExistsException} will be thrown.    *    * @param zkw zk reference    * @param region region to be created as offline    * @param serverName server event originates from    * @return Version of znode created.    * @throws KeeperException    * @throws IOException    */
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|createNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|rt
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
comment|// Transition node from SPLITTING to SPLITTING and pick up version so we
comment|// can be sure this znode is ours; version is needed deleting.
return|return
name|transitionNodeSplitting
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|transitionNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|parent
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|private
name|void
name|unassign
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|RegionException
block|{
comment|// Before I can unassign a region, I need to set it online.
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
expr_stmt|;
comment|// Unassign region.
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an {@link AssignmentManagerWithExtrasForTesting} that has mocked    * {@link CatalogTracker} etc.    * @param server    * @param manager    * @return An AssignmentManagerWithExtras with mock connections, etc.    * @throws IOException    * @throws KeeperException    */
specifier|private
name|AssignmentManagerWithExtrasForTesting
name|setUpMockedAssignmentManager
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|ServerManager
name|manager
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|ServiceException
block|{
comment|// We need a mocked catalog tracker. Its used by our AM instance.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Make an RS Interface implementation. Make it so a scanner can go against
comment|// it and a get to return the single region, REGIONINFO, this test is
comment|// messing with. Needed when "new master" joins cluster. AM will try and
comment|// rebuild its list of user regions and it will also get the HRI that goes
comment|// with an encoded name by doing a Get on hbase:meta
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|ri
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get a meta row result that has region up on SERVERNAME_A for REGIONINFO
name|Result
name|r
init|=
name|MetaMockingUtil
operator|.
name|getMetaTableRowResult
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
specifier|final
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setMoreResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCellsPerResult
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CellScannable
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|CellScannable
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Answer
argument_list|<
name|ScanResponse
argument_list|>
name|ans
init|=
operator|new
name|Answer
argument_list|<
name|ClientProtos
operator|.
name|ScanResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScanResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|PayloadCarryingRpcController
name|controller
init|=
operator|(
name|PayloadCarryingRpcController
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
name|controller
operator|.
name|setCellScanner
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|enabling
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|scan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMoreResults
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|scan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|ans
argument_list|)
expr_stmt|;
block|}
comment|// If a get, return the above result too for REGIONINFO
name|GetResponse
operator|.
name|Builder
name|getBuilder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|getBuilder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|get
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|GetRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get a connection w/ mocked up common methods.
name|HConnection
name|connection
init|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnectionAndDecorate
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ri
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
comment|// Make it so we can get the connection from our mocked catalogtracker
name|Mockito
operator|.
name|when
argument_list|(
name|ct
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Create and startup an executor. Used by AM handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"mockedAMExecutor"
argument_list|)
decl_stmt|;
name|this
operator|.
name|balancer
operator|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
operator|new
name|AssignmentManagerWithExtrasForTesting
argument_list|(
name|server
argument_list|,
name|manager
argument_list|,
name|ct
argument_list|,
name|this
operator|.
name|balancer
argument_list|,
name|executor
argument_list|,
operator|new
name|NullTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|am
return|;
block|}
comment|/**    * An {@link AssignmentManager} with some extra facility used testing    */
class|class
name|AssignmentManagerWithExtrasForTesting
extends|extends
name|AssignmentManager
block|{
comment|// Keep a reference so can give it out below in {@link #getExecutorService}
specifier|private
specifier|final
name|ExecutorService
name|es
decl_stmt|;
comment|// Ditto for ct
specifier|private
specifier|final
name|CatalogTracker
name|ct
decl_stmt|;
name|boolean
name|processRITInvoked
init|=
literal|false
decl_stmt|;
name|boolean
name|assignInvoked
init|=
literal|false
decl_stmt|;
name|AtomicBoolean
name|gate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|AssignmentManagerWithExtrasForTesting
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|ServerManager
name|serverManager
parameter_list|,
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|LoadBalancer
name|balancer
parameter_list|,
specifier|final
name|ExecutorService
name|service
parameter_list|,
specifier|final
name|TableLockManager
name|tableLockManager
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|master
argument_list|,
name|serverManager
argument_list|,
name|catalogTracker
argument_list|,
name|balancer
argument_list|,
name|service
argument_list|,
literal|null
argument_list|,
name|tableLockManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|es
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|ct
operator|=
name|catalogTracker
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|processRegionInTransition
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|this
operator|.
name|processRITInvoked
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|processRegionInTransition
argument_list|(
name|encodedRegionName
argument_list|,
name|regionInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|boolean
name|setOfflineInZK
parameter_list|,
name|boolean
name|forceNewPlan
parameter_list|)
block|{
if|if
condition|(
name|enabling
condition|)
block|{
name|assignmentCount
operator|++
expr_stmt|;
name|this
operator|.
name|regionOnline
argument_list|(
name|region
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|assign
argument_list|(
name|region
argument_list|,
name|setOfflineInZK
argument_list|,
name|forceNewPlan
argument_list|)
expr_stmt|;
name|this
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|assign
parameter_list|(
name|ServerName
name|destination
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|enabling
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assignmentCount
operator|++
expr_stmt|;
name|this
operator|.
name|regionOnline
argument_list|(
name|region
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|assign
argument_list|(
name|destination
argument_list|,
name|regions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|assignInvoked
operator|=
operator|(
name|regions
operator|!=
literal|null
operator|&&
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
expr_stmt|;
name|super
operator|.
name|assign
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|this
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** reset the watcher */
name|void
name|setWatcher
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
block|}
comment|/**      * @return ExecutorService used by this instance.      */
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|this
operator|.
name|es
return|;
block|}
comment|/**      * @return CatalogTracker used by this AM (Its a mock).      */
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|ct
return|;
block|}
block|}
comment|/**    * Call joinCluster on the passed AssignmentManager.  Do it in a thread    * so it runs independent of what all else is going on.  Try to simulate    * an AM running insided a failed over master by clearing all in-memory    * AM state first.   */
specifier|private
name|void
name|startFakeFailedOverMasterAssignmentManager
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
comment|// Make sure our new AM gets callbacks; once registered, we can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"RunAmJoinCluster"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Call the joinCluster function as though we were doing a master
comment|// failover at this point. It will stall just before we go to add
comment|// the RIT region to our RIT Map in AM at processRegionsInTransition.
comment|// First clear any inmemory state from AM so it acts like a new master
comment|// coming on line.
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|regionsInTransition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|am
operator|.
name|regionPlans
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|am
operator|.
name|joinCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|isAlive
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForceAssignMergingRegion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Region to use in test.
specifier|final
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
comment|// Need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
try|try
block|{
comment|// First set the state of the region to merging
name|regionStates
operator|.
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|MERGING
argument_list|)
expr_stmt|;
comment|// Now, try to assign it with force new plan
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The region should be still in merging state"
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|MERGING
argument_list|,
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test assignment related ZK events are ignored by AM if the region is not known    * by AM to be in transition. During normal operation, all assignments are started    * by AM (not considering split/merge), if an event is received but the region    * is not in transition, the event must be a very late one. So it can be ignored.    * During master failover, since AM watches assignment znodes after failover cleanup    * is completed, when an event comes in, AM should already have the region in transition    * if ZK is used during the assignment action (only hbck doesn't use ZK for region    * assignment). So during master failover, we can ignored such events too.    */
annotation|@
name|Test
specifier|public
name|void
name|testAssignmentEventIgnoredIfNotExpected
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
comment|// Region to use in test.
specifier|final
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
comment|// Need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|zkEventProcessed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|void
name|handleRegion
parameter_list|(
specifier|final
name|RegionTransition
name|rt
parameter_list|,
name|int
name|expectedVersion
parameter_list|)
block|{
name|super
operator|.
name|handleRegion
argument_list|(
name|rt
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rt
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
condition|)
block|{
name|zkEventProcessed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
comment|// First make sure the region is not in transition
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|zkEventProcessed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Reset it before faking zk transition
name|this
operator|.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The region should not be in transition"
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// Trigger a transition event
name|ZKAssign
operator|.
name|transitionNodeOpening
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|zkEventProcessed
operator|.
name|get
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timed out in waiting for ZK event to be processed"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
literal|30000
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If a table is deleted, we should not be able to balance it anymore.    * Otherwise, the region will be brought back.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBalanceRegionOfDeletedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|REGIONINFO
decl_stmt|;
name|regionStates
operator|.
name|createRegionState
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|)
decl_stmt|;
comment|// Fake table is deleted
name|regionStates
operator|.
name|tableDeleted
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The region should not in transition"
argument_list|,
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests an on-the-fly RPC that was scheduled for the earlier RS on the same port    * for openRegion. AM should assign this somewhere else. (HBASE-9721)    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testOpenCloseRegionRPCIntendedForPreviousServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionOpen
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|SERVERNAME_B
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|REGIONINFO
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|ServerName
argument_list|>
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.assignment.maximum.attempts"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|REGIONINFO
decl_stmt|;
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|balancer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|master
operator|.
name|getTableLockManager
argument_list|()
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
try|try
block|{
name|am
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
literal|null
argument_list|,
name|SERVERNAME_B
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should fail once, but succeed on the second attempt for the SERVERNAME_A
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertEquals
argument_list|(
name|SERVERNAME_A
argument_list|,
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|REGIONINFO
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

