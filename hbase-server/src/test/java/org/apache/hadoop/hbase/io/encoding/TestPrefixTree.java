begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPrefixTree
block|{
specifier|private
specifier|static
specifier|final
name|String
name|row4
init|=
literal|"a-b-B-2-1402397300-1402416535"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row4_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row3
init|=
literal|"a-b-A-1-1402397227-1402415999"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row3_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row2
init|=
literal|"a-b-A-1-1402329600-1402396277"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row2_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row1
init|=
literal|"a-b-A-1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row1_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf_2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HBaseTestingUtility
name|testUtil
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|testUtil
operator|.
name|getDataTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|testUtil
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|testUtil
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBASE11728
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-0-0"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1-value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1-value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value-2"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value-3"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|rows
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|rows
index|[
literal|0
index|]
operator|=
name|row1
expr_stmt|;
name|rows
index|[
literal|1
index|]
operator|=
name|row2
expr_stmt|;
name|rows
index|[
literal|2
index|]
operator|=
name|row3
expr_stmt|;
name|byte
index|[]
index|[]
name|val
init|=
operator|new
name|byte
index|[
literal|3
index|]
index|[]
decl_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1-value"
argument_list|)
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value"
argument_list|)
expr_stmt|;
name|val
index|[
literal|2
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value-2"
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|<
literal|2
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|CellScanner
name|cellScanner
init|=
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|val
index|[
name|i
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|<
literal|2
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|CellScanner
name|cellScanner
init|=
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1-"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|<
literal|2
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|CellScanner
name|cellScanner
init|=
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1-140239"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cells
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBASE12817
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj"
operator|+
operator|(
literal|2900
operator|+
name|i
operator|)
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj299"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj29"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj2"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj3"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj29995"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"obj3"
argument_list|)
argument_list|,
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

