begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPrefixTree
block|{
specifier|private
specifier|static
specifier|final
name|String
name|row4
init|=
literal|"a-b-B-2-1402397300-1402416535"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row4_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row3
init|=
literal|"a-b-A-1-1402397227-1402415999"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row3_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row2
init|=
literal|"a-b-A-1-1402329600-1402396277"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row2_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|row1
init|=
literal|"a-b-A-1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row1_bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf_2"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|TEST_NAME
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.online.schema.update.enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.scanner.timeout.period"
argument_list|,
literal|600000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBASE11728
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Admin
name|hBaseAdmin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
expr_stmt|;
name|colDesc
operator|.
name|setTimeToLive
argument_list|(
literal|15552000
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|hBaseAdmin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-0-0"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1-value"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1-value"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value-2"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4_bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2-value-3"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|hBaseAdmin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|String
index|[]
name|rows
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|rows
index|[
literal|0
index|]
operator|=
name|row1
expr_stmt|;
name|rows
index|[
literal|1
index|]
operator|=
name|row2
expr_stmt|;
name|rows
index|[
literal|2
index|]
operator|=
name|row3
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|next
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|res
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|row1_bytes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
operator|.
name|length
argument_list|)
expr_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|res
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1-"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|res
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cellScanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1-140239"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a-b-A-1:"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|next
operator|.
name|length
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

