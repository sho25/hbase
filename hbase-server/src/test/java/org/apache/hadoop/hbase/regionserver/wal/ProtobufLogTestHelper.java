begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
import|;
end_import

begin_comment
comment|/**  * Helper class for testing protobuf log.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ProtobufLogTestHelper
block|{
specifier|private
name|ProtobufLogTestHelper
parameter_list|()
block|{   }
specifier|private
specifier|static
name|byte
index|[]
name|toValue
parameter_list|(
name|int
name|prefix
parameter_list|,
name|int
name|suffix
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|prefix
operator|+
literal|"-"
operator|+
name|suffix
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RegionInfo
name|toRegionInfo
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|WAL
operator|.
name|Entry
name|generateEdit
parameter_list|(
name|int
name|i
parameter_list|,
name|RegionInfo
name|hri
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
block|{
name|WALKeyImpl
name|key
init|=
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|i
argument_list|,
name|timestamp
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|,
name|mvcc
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|int
name|prefix
init|=
name|i
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|columnCount
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|j
lambda|->
name|toValue
argument_list|(
name|prefix
argument_list|,
name|j
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|value
lambda|->
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|value
argument_list|)
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|edit
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
operator|new
name|WAL
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|edit
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|doWrite
parameter_list|(
name|WALProvider
operator|.
name|Writer
name|writer
parameter_list|,
name|boolean
name|withTrailer
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|int
name|recordCount
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|hri
init|=
name|toRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|generateEdit
argument_list|(
name|i
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|columnCount
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|withTrailer
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|doWrite
parameter_list|(
name|WAL
name|wal
parameter_list|,
name|RegionInfo
name|hri
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|int
name|recordCount
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
name|i
operator|++
control|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|generateEdit
argument_list|(
name|i
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|columnCount
argument_list|,
name|timestamp
argument_list|,
name|mvcc
argument_list|)
decl_stmt|;
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doRead
parameter_list|(
name|ProtobufLogReader
name|reader
parameter_list|,
name|boolean
name|withTrailer
parameter_list|,
name|RegionInfo
name|hri
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|int
name|recordCount
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|withTrailer
condition|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|trailer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|reader
operator|.
name|trailer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
operator|++
name|i
control|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnCount
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|,
name|val
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|val
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|val
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|toValue
argument_list|(
name|i
argument_list|,
name|idx
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doRead
parameter_list|(
name|ProtobufLogReader
name|reader
parameter_list|,
name|boolean
name|withTrailer
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|int
name|recordCount
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|doRead
argument_list|(
name|reader
argument_list|,
name|withTrailer
argument_list|,
name|toRegionInfo
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|columnCount
argument_list|,
name|recordCount
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

