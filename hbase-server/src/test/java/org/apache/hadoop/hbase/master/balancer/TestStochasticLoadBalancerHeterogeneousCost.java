begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RackManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStochasticLoadBalancerHeterogeneousCost
extends|extends
name|BalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestStochasticLoadBalancerHeterogeneousCost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStochasticLoadBalancerHeterogeneousCost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|allowedWindow
init|=
literal|1.20
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
block|{
name|BalancerTestBase
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.regionCountCost"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.primaryRegionCountCost"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.tableSkewCost"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.balancer.stochastic.runMaxSteps"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|set
argument_list|(
name|StochasticLoadBalancer
operator|.
name|COST_FUNCTIONS_COST_FUNCTIONS_KEY
argument_list|,
name|HeterogeneousRegionCountCostFunction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HeterogeneousRegionCountCostFunction
operator|.
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
argument_list|,
name|TestStochasticLoadBalancerHeterogeneousCostRules
operator|.
name|DEFAULT_RULES_TMP_LOCATION
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|loadBalancer
operator|=
operator|new
name|StochasticLoadBalancer
argument_list|()
expr_stmt|;
name|BalancerTestBase
operator|.
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|BalancerTestBase
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|300
decl_stmt|;
specifier|final
name|int
name|numRegionsPerServer
init|=
literal|250
decl_stmt|;
comment|// Initial state: { rs1:50 , rs0:250 }
comment|// Cluster can hold 300/400 regions (75%)
comment|// Expected balanced Cluster: { rs0:150 , rs1:150 }
name|this
operator|.
name|testHeterogeneousWithCluster
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneGroup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"rs.* 100"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|300
decl_stmt|;
specifier|final
name|int
name|numRegionsPerServer
init|=
literal|30
decl_stmt|;
comment|// Initial state: { rs0:30 , rs1:30 , rs2:30 , rs3:210 }.
comment|// The cluster can hold 300/400 regions (75%)
comment|// Expected balanced Cluster: { rs0:75 , rs1:75 , rs2:75 , rs3:75 }
name|this
operator|.
name|testHeterogeneousWithCluster
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoGroups
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"rs[0-4] 200"
argument_list|,
literal|"rs[5-9] 50"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|500
decl_stmt|;
specifier|final
name|int
name|numRegionsPerServer
init|=
literal|50
decl_stmt|;
comment|// Initial state: { rs0:50 , rs1:50 , rs2:50 , rs3:50 , rs4:50 , rs5:50 , rs6:50 , rs7:50 ,
comment|// rs8:50 , rs9:50 }
comment|// the cluster can hold 500/1250 regions (40%)
comment|// Expected balanced Cluster: { rs5:20 , rs6:20 , rs7:20 , rs8:20 , rs9:20 , rs0:80 , rs1:80 ,
comment|// rs2:80 , rs3:80 , rs4:80 }
name|this
operator|.
name|testHeterogeneousWithCluster
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFourGroups
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"rs[1-3] 200"
argument_list|,
literal|"rs[4-7] 250"
argument_list|,
literal|"rs[8-9] 100"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|800
decl_stmt|;
specifier|final
name|int
name|numRegionsPerServer
init|=
literal|80
decl_stmt|;
comment|// Initial state: { rs0:80 , rs1:80 , rs2:80 , rs3:80 , rs4:80 , rs5:80 , rs6:80 , rs7:80 ,
comment|// rs8:80 , rs9:80 }
comment|// Cluster can hold 800/2000 regions (40%)
comment|// Expected balanced Cluster: { rs8:40 , rs9:40 , rs2:80 , rs3:80 , rs1:82 , rs0:94 , rs4:96 ,
comment|// rs5:96 , rs6:96 , rs7:96 }
name|this
operator|.
name|testHeterogeneousWithCluster
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverloaded
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"rs[0-1] 50"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|120
decl_stmt|;
specifier|final
name|int
name|numRegionsPerServer
init|=
literal|60
decl_stmt|;
name|TestStochasticLoadBalancerHeterogeneousCostRules
operator|.
name|createSimpleRulesFile
argument_list|(
name|rules
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|this
operator|.
name|createServerMap
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|BalancerTestBase
operator|.
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
comment|// As we disabled all the other cost functions, balancing only according to
comment|// the heterogeneous cost function should return nothing.
name|assertNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testHeterogeneousWithCluster
parameter_list|(
specifier|final
name|int
name|numNodes
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|,
specifier|final
name|int
name|numRegionsPerServer
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
parameter_list|)
throws|throws
name|IOException
block|{
name|TestStochasticLoadBalancerHeterogeneousCostRules
operator|.
name|createSimpleRulesFile
argument_list|(
name|rules
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|this
operator|.
name|createServerMap
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|testWithCluster
argument_list|(
name|serverMap
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testWithCluster
parameter_list|(
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverMap
parameter_list|,
specifier|final
name|RackManager
name|rackManager
parameter_list|,
specifier|final
name|boolean
name|assertFullyBalanced
parameter_list|,
specifier|final
name|boolean
name|assertFullyBalancedForReplicas
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
name|this
operator|.
name|convertToList
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster : "
operator|+
name|this
operator|.
name|printMock
argument_list|(
name|list
argument_list|)
operator|+
literal|" "
operator|+
name|this
operator|.
name|printStats
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|BalancerTestBase
operator|.
name|loadBalancer
operator|.
name|setRackManager
argument_list|(
name|rackManager
argument_list|)
expr_stmt|;
comment|// Run the balancer.
specifier|final
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|BalancerTestBase
operator|.
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
comment|// Check to see that this actually got to a stable place.
if|if
condition|(
name|assertFullyBalanced
operator|||
name|assertFullyBalancedForReplicas
condition|)
block|{
comment|// Apply the plan to the mock cluster.
specifier|final
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster
init|=
name|this
operator|.
name|reconcile
argument_list|(
name|list
argument_list|,
name|plans
argument_list|,
name|serverMap
argument_list|)
decl_stmt|;
comment|// Print out the cluster loads to make debugging easier.
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balanced cluster : "
operator|+
name|this
operator|.
name|printMock
argument_list|(
name|balancedCluster
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertFullyBalanced
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|secondPlans
init|=
name|BalancerTestBase
operator|.
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|secondPlans
argument_list|)
expr_stmt|;
comment|// create external cost function to retrieve limit
comment|// for each RS
specifier|final
name|HeterogeneousRegionCountCostFunction
name|cf
init|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
operator|new
name|BaseLoadBalancer
operator|.
name|Cluster
argument_list|(
name|serverMap
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cf
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// checking that we all hosts have a number of regions below their limit
for|for
control|(
specifier|final
name|ServerAndLoad
name|serverAndLoad
range|:
name|balancedCluster
control|)
block|{
specifier|final
name|ServerName
name|sn
init|=
name|serverAndLoad
operator|.
name|getServerName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numberRegions
init|=
name|serverAndLoad
operator|.
name|getLoad
argument_list|()
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|cf
operator|.
name|findLimitForRS
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|double
name|usage
init|=
operator|(
name|double
operator|)
name|numberRegions
operator|/
operator|(
name|double
operator|)
name|limit
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|numberRegions
operator|+
literal|"/"
operator|+
name|limit
operator|+
literal|"("
operator|+
operator|(
name|usage
operator|*
literal|100
operator|)
operator|+
literal|"%)"
argument_list|)
expr_stmt|;
comment|// as the balancer is stochastic, we cannot check exactly the result of the balancing,
comment|// hence the allowedWindow parameter
name|assertTrue
argument_list|(
literal|"Host "
operator|+
name|sn
operator|.
name|getHostname
argument_list|()
operator|+
literal|" should be below "
operator|+
name|cf
operator|.
name|overallUsage
operator|*
name|allowedWindow
operator|*
literal|100
operator|+
literal|"%"
argument_list|,
name|usage
operator|<=
name|cf
operator|.
name|overallUsage
operator|*
name|allowedWindow
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assertFullyBalancedForReplicas
condition|)
block|{
name|this
operator|.
name|assertRegionReplicaPlacement
argument_list|(
name|serverMap
argument_list|,
name|rackManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|createServerMap
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|,
name|int
name|replication
parameter_list|,
name|int
name|numTables
parameter_list|)
block|{
comment|// construct a cluster of numNodes, having a total of numRegions. Each RS will hold
comment|// numRegionsPerServer many regions except for the last one, which will host all the
comment|// remaining regions
name|int
index|[]
name|cluster
init|=
operator|new
name|int
index|[
name|numNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|cluster
index|[
name|i
index|]
operator|=
name|numRegionsPerServer
expr_stmt|;
block|}
name|cluster
index|[
name|cluster
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|numRegions
operator|-
operator|(
operator|(
name|cluster
operator|.
name|length
operator|-
literal|1
operator|)
operator|*
name|numRegionsPerServer
operator|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
name|mockClusterServers
argument_list|(
name|cluster
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
if|if
condition|(
name|replication
operator|>
literal|0
condition|)
block|{
comment|// replicate the regions to the same servers
for|for
control|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
range|:
name|clusterState
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|length
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|replication
condition|;
name|r
operator|++
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|clusterState
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|mockClusterServers
parameter_list|(
name|int
index|[]
name|mockCluster
parameter_list|,
name|int
name|numTables
parameter_list|)
block|{
name|int
name|numServers
init|=
name|mockCluster
operator|.
name|length
decl_stmt|;
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|servers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numRegions
init|=
name|mockCluster
index|[
name|i
index|]
decl_stmt|;
name|ServerAndLoad
name|sal
init|=
name|createServer
argument_list|(
literal|"rs"
operator|+
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|numRegions
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
name|servers
operator|.
name|put
argument_list|(
name|sal
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|private
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|serverQueue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ServerAndLoad
name|createServer
parameter_list|(
specifier|final
name|String
name|host
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|serverQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ServerName
name|sn
init|=
name|this
operator|.
name|serverQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|Random
name|rand
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
decl_stmt|;
return|return
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

