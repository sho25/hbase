begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetaFixer
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMetaFixer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|deleteRegion
parameter_list|(
name|MasterServices
name|services
parameter_list|,
name|RegionInfo
name|ri
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaTableAccessor
operator|.
name|deleteRegionInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|// Delete it from Master context too else it sticks around.
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|deleteRegion
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlugsHoles
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tn
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|ris
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|MasterServices
name|services
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|CatalogJanitor
operator|.
name|Report
name|report
init|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|originalCount
init|=
name|ris
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Remove first, last and middle region. See if hole gets plugged. Table has 26 regions.
name|deleteRegion
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
name|ris
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|report
operator|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|report
operator|.
name|getHoles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MetaFixer
name|fixer
init|=
operator|new
name|MetaFixer
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|fixer
operator|.
name|fixHoles
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|report
operator|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|,
name|report
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable and reenable so the added regions get reassigned.
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|ris
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|ris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Just make sure running fixMeta does right thing for the case    * of a single-region Table where the region gets dropped.    * There is nothing much we can do. We can't restore what    * we don't know about (at least from a read of hbase:meta).    */
annotation|@
name|Test
specifier|public
name|void
name|testOneRegionTable
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tn
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|ris
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|MasterServices
name|services
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|deleteRegion
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|CatalogJanitor
operator|.
name|Report
name|report
init|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
decl_stmt|;
name|ris
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ris
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|MetaFixer
name|fixer
init|=
operator|new
name|MetaFixer
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|fixer
operator|.
name|fixHoles
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|report
operator|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ris
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|makeOverlap
parameter_list|(
name|MasterServices
name|services
parameter_list|,
name|RegionInfo
name|a
parameter_list|,
name|RegionInfo
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|overlapRegion
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|a
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|a
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|b
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaTableAccessor
operator|.
name|putsToMetaTable
argument_list|(
name|services
operator|.
name|getConnection
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|MetaTableAccessor
operator|.
name|makePutFromRegionInfo
argument_list|(
name|overlapRegion
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Add checks at assign time to PREVENT being able to assign over existing assign.
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|assign
argument_list|(
name|overlapRegion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlap
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tn
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|ris
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ris
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
name|MasterServices
name|services
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|CatalogJanitor
operator|.
name|Report
name|report
init|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make a simple overlap spanning second and third region.
name|makeOverlap
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|makeOverlap
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|makeOverlap
argument_list|(
name|services
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ris
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|report
operator|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|report
operator|.
name|getOverlaps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MetaFixer
operator|.
name|calculateMerges
argument_list|(
literal|10
argument_list|,
name|report
operator|.
name|getOverlaps
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MetaFixer
name|fixer
init|=
operator|new
name|MetaFixer
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|fixer
operator|.
name|fixOverlaps
argument_list|(
name|report
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|scan
argument_list|()
expr_stmt|;
name|report
operator|=
name|services
operator|.
name|getCatalogJanitor
argument_list|()
operator|.
name|getLastReport
argument_list|()
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|,
name|report
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

