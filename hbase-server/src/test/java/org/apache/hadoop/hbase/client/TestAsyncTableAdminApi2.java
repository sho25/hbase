begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous table admin operations  * @see TestAsyncTableAdminApi This test and it used to be joined it was taking longer than our  * ten minute timeout so they were split.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTableAdminApi2
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncTableAdminApi2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDisableCatalogTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to throw ConstraintException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Before the fix for HBASE-6146, the below table creation was failing as the hbase:meta table
comment|// actually getting disabled by the disableTable() call.
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSameColumnFamilyTwice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with one families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add same column family again - expect failure
name|this
operator|.
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptorBuilder
name|tdBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|cfd
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tdBuilder
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|int
name|newBlockSize
init|=
literal|2
operator|*
name|blockSize
decl_stmt|;
name|cfd
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_0
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|newBlockSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Modify colymn family
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|cfd
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|TableDescriptor
name|htd
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|hcfd
init|=
name|htd
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hcfd
operator|.
name|getBlocksize
argument_list|()
operator|==
name|newBlockSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyNonExistingColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptorBuilder
name|tdBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|cfd
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tdBuilder
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|int
name|newBlockSize
init|=
literal|2
operator|*
name|blockSize
decl_stmt|;
name|cfd
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|newBlockSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Modify a column family that is not in the table.
try|try
block|{
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|cfd
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Modify a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSameColumnFamilyTwice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Delete again - expect failure
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
specifier|private
name|void
name|verifyTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify descriptor from master
name|TableDescriptor
name|htd
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|verifyTableDescriptor
argument_list|(
name|htd
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|// Verify descriptor from HDFS
name|MasterFileSystem
name|mfs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptorFromFs
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
name|verifyTableDescriptor
argument_list|(
name|td
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyTableDescriptor
parameter_list|(
specifier|final
name|TableDescriptor
name|htd
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|htdFamilies
init|=
name|htd
operator|.
name|getColumnFamilyNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
argument_list|,
name|htdFamilies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|familyName
range|:
name|families
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyName
argument_list|)
argument_list|,
name|htdFamilies
operator|.
name|contains
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableAvailableWithRandomSplitKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Table should be created with 1 row in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|ts
init|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// no files written -> no data
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// still 0, we flushed a file, but no major compaction happened
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|regionName
init|=
name|ASYNC_CONN
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|ts1
init|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// make sure the region API returns the same value, as the old file is still around
name|assertFalse
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|waitTime
init|=
literal|10000
decl_stmt|;
name|long
name|endt
init|=
name|curt
operator|+
name|waitTime
decl_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 1 is "
operator|+
name|state
argument_list|)
expr_stmt|;
while|while
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|curt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 2 is "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Now, should have the right compaction state, let's wait until the compaction is done
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|MAJOR
condition|)
block|{
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 3 is "
operator|+
name|state
argument_list|)
expr_stmt|;
while|while
condition|(
name|state
operator|!=
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 4 is "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sleep to wait region server report
name|Thread
operator|.
name|sleep
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// after a compaction our earliest timestamp will have progressed forward
name|assertTrue
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// region api still the same
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

