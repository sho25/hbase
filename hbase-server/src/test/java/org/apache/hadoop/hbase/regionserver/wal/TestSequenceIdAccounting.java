begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSequenceIdAccounting
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSequenceIdAccounting
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ENCODED_REGION_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|FAMILIES
decl_stmt|;
static|static
block|{
name|FAMILIES
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|FAMILIES
operator|.
name|add
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartCacheFlush
parameter_list|()
block|{
name|SequenceIdAccounting
name|sida
init|=
operator|new
name|SequenceIdAccounting
argument_list|()
decl_stmt|;
name|sida
operator|.
name|getOrCreateLowestSequenceIds
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
operator|(
name|long
operator|)
name|sida
operator|.
name|startCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|completeCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|long
name|sequenceid
init|=
literal|1
decl_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Only one family so should return NO_SEQNUM still.
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
operator|(
name|long
operator|)
name|sida
operator|.
name|startCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|completeCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|long
name|currentSequenceId
init|=
name|sequenceid
decl_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|otherFamily
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|otherFamily
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"otherCf"
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
operator|++
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Should return oldest sequence id in the region.
name|assertEquals
argument_list|(
name|currentSequenceId
argument_list|,
operator|(
name|long
operator|)
name|sida
operator|.
name|startCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|otherFamily
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|completeCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAreAllLower
parameter_list|()
block|{
name|SequenceIdAccounting
name|sida
init|=
operator|new
name|SequenceIdAccounting
argument_list|()
decl_stmt|;
name|sida
operator|.
name|getOrCreateLowestSequenceIds
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|sequenceid
init|=
literal|1
decl_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|sequenceid
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
name|regions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lowest
init|=
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Lowest should be first sequence id inserted"
argument_list|,
literal|1
argument_list|,
name|lowest
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|lowest
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make sure above works when flushing.
name|sida
operator|.
name|startCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let the flush complete and if we ask if the sequenceid is lower, should be yes since no edits
name|sida
operator|.
name|completeCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|sequenceid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Flush again but add sequenceids while we are flushing.
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lowest
operator|=
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|lowest
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|startCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
comment|// The cache flush will clear out all sequenceid accounting by region.
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|sida
operator|.
name|completeCacheFlush
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
comment|// No new edits have gone in so no sequenceid to work with.
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make an edit behind all we'll put now into sida.
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|sequenceid
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
operator|++
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
operator|++
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
operator|++
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|areAllLower
argument_list|(
name|m
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindLower
parameter_list|()
block|{
name|SequenceIdAccounting
name|sida
init|=
operator|new
name|SequenceIdAccounting
argument_list|()
decl_stmt|;
name|sida
operator|.
name|getOrCreateLowestSequenceIds
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
name|long
name|sequenceid
init|=
literal|1
decl_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sida
operator|.
name|update
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|FAMILIES
argument_list|,
name|sequenceid
operator|++
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|findLower
argument_list|(
name|m
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|findLower
argument_list|(
name|m
argument_list|)
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|ENCODED_REGION_NAME
argument_list|,
name|sida
operator|.
name|getLowestSequenceId
argument_list|(
name|ENCODED_REGION_NAME
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sida
operator|.
name|findLower
argument_list|(
name|m
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

