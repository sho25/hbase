begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class which verifies that region sizes are reported to the master.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionSizeUse
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionSizeUse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionSizeUse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIZE_PER_VALUE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SPLITS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|F1
init|=
literal|"f1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Increase the frequency of some of the chores for responsiveness of the test
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicRegionSizeReports
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|bytesWritten
init|=
literal|5L
operator|*
literal|1024L
operator|*
literal|1024L
decl_stmt|;
comment|// 5MB
specifier|final
name|TableName
name|tn
init|=
name|writeData
argument_list|(
name|bytesWritten
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data was written to HBase"
argument_list|)
expr_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Push the data to disk.
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data flushed to disk"
argument_list|)
expr_stmt|;
comment|// Get the final region distribution
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterQuotaManager
name|quotaManager
init|=
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
decl_stmt|;
comment|// Wait until we get all of the region reports for our table
comment|// The table may split, so make sure we have at least as many as expected right after we
comment|// finished writing the data.
name|int
name|observedRegions
init|=
name|numRegionsForTable
argument_list|(
name|tn
argument_list|,
name|regionSizes
argument_list|)
decl_stmt|;
while|while
condition|(
name|observedRegions
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expecting more regions. Saw "
operator|+
name|observedRegions
operator|+
literal|" region sizes reported, expected at least "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|regionSizes
operator|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
expr_stmt|;
name|observedRegions
operator|=
name|numRegionsForTable
argument_list|(
name|tn
argument_list|,
name|regionSizes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Observed region sizes by the HMaster: "
operator|+
name|regionSizes
argument_list|)
expr_stmt|;
name|long
name|totalRegionSize
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Long
name|regionSize
range|:
name|regionSizes
operator|.
name|values
argument_list|()
control|)
block|{
name|totalRegionSize
operator|+=
name|regionSize
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected region size report to exceed "
operator|+
name|bytesWritten
operator|+
literal|", but was "
operator|+
name|totalRegionSize
operator|+
literal|". RegionSizes="
operator|+
name|regionSizes
argument_list|,
name|bytesWritten
operator|<
name|totalRegionSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes at least {@code sizeInBytes} bytes of data to HBase and returns the TableName used.    *    * @param sizeInBytes The amount of data to write in bytes.    * @return The table the data was written to    */
specifier|private
name|TableName
name|writeData
parameter_list|(
name|long
name|sizeInBytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Delete the old table
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|// Create the table
name|TableDescriptorBuilder
name|tableDescriptorBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|F1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|tableDescriptorBuilder
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptorBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"9"
argument_list|)
argument_list|,
name|NUM_SPLITS
argument_list|)
expr_stmt|;
specifier|final
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|bytesToWrite
init|=
name|sizeInBytes
decl_stmt|;
name|long
name|rowKeyId
init|=
literal|0L
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
name|bytesToWrite
operator|>
literal|0L
condition|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|rowKeyId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use the reverse counter as the rowKey to get even spread across all regions
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sb
operator|.
name|reverse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|SIZE_PER_VALUE
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Batch 50K worth of updates
if|if
condition|(
name|updates
operator|.
name|size
argument_list|()
operator|>
literal|50
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|updates
argument_list|)
expr_stmt|;
name|updates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Just count the value size, ignore the size of rowkey + column
name|bytesToWrite
operator|-=
name|SIZE_PER_VALUE
expr_stmt|;
name|rowKeyId
operator|++
expr_stmt|;
block|}
comment|// Write the final batch
if|if
condition|(
operator|!
name|updates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|updates
argument_list|)
expr_stmt|;
block|}
return|return
name|tn
return|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Computes the number of regions for the given table that have a positive size.    *    * @param tn The TableName in question    * @param regions A collection of region sizes    * @return The number of regions for the given table.    */
specifier|private
name|int
name|numRegionsForTable
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regions
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|tn
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
operator|&&
literal|0
operator|<
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|sum
operator|++
expr_stmt|;
block|}
block|}
return|return
name|sum
return|;
block|}
block|}
end_class

end_unit

