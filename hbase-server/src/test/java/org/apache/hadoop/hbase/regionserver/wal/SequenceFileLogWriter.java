begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALTrailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link HLog.Writer} that delegates to  * SequenceFile.Writer. Legacy implementation only used for compat tests.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SequenceFileLogWriter
extends|extends
name|WriterBase
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// The sequence file we delegate to.
specifier|private
name|SequenceFile
operator|.
name|Writer
name|writer
decl_stmt|;
comment|// This is the FSDataOutputStream instance that is the 'out' instance
comment|// in the SequenceFile.Writer 'writer' instance above.
specifier|private
name|FSDataOutputStream
name|writer_out
decl_stmt|;
comment|// Legacy stuff from pre-PB WAL metadata.
specifier|private
specifier|static
specifier|final
name|Text
name|WAL_VERSION_KEY
init|=
operator|new
name|Text
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|WAL_COMPRESSION_TYPE_KEY
init|=
operator|new
name|Text
argument_list|(
literal|"compression.type"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|DICTIONARY_COMPRESSION_TYPE
init|=
operator|new
name|Text
argument_list|(
literal|"dictionary"
argument_list|)
decl_stmt|;
comment|/**    * Default constructor.    */
specifier|public
name|SequenceFileLogWriter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create sequence file Metadata for our WAL file with version and compression    * type (if any).    * @param conf    * @param compress    * @return Metadata instance.    */
specifier|private
specifier|static
name|Metadata
name|createMetadata
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|compress
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|metaMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|metaMap
operator|.
name|put
argument_list|(
name|WAL_VERSION_KEY
argument_list|,
operator|new
name|Text
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
comment|// Currently we only do one compression type.
name|metaMap
operator|.
name|put
argument_list|(
name|WAL_COMPRESSION_TYPE_KEY
argument_list|,
name|DICTIONARY_COMPRESSION_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Metadata
argument_list|(
name|metaMap
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|overwritable
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|compress
init|=
name|initializeCompressionContext
argument_list|(
name|conf
argument_list|,
name|path
argument_list|)
decl_stmt|;
comment|// Create a SF.Writer instance.
try|try
block|{
comment|// reflection for a version of SequenceFile.createWriter that doesn't
comment|// automatically create the parent directory (see HBASE-2312)
name|this
operator|.
name|writer
operator|=
operator|(
name|SequenceFile
operator|.
name|Writer
operator|)
name|SequenceFile
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"createWriter"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|FileSystem
operator|.
name|class
block|,
name|Configuration
operator|.
name|class
block|,
name|Path
operator|.
name|class
block|,
name|Class
operator|.
name|class
block|,
name|Class
operator|.
name|class
block|,
name|Integer
operator|.
name|TYPE
block|,
name|Short
operator|.
name|TYPE
block|,
name|Long
operator|.
name|TYPE
block|,
name|Boolean
operator|.
name|TYPE
block|,
name|CompressionType
operator|.
name|class
block|,
name|CompressionCodec
operator|.
name|class
block|,
name|Metadata
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fs
block|,
name|conf
block|,
name|path
block|,
name|HLogKey
operator|.
name|class
block|,
name|WALEdit
operator|.
name|class
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|FSUtils
operator|.
name|getDefaultBufferSize
argument_list|(
name|fs
argument_list|)
argument_list|)
block|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.replication"
argument_list|,
name|FSUtils
operator|.
name|getDefaultReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
block|,
name|Long
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|FSUtils
operator|.
name|getDefaultBlockSize
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
block|,
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
comment|/*createParent*/
block|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
block|,
operator|new
name|DefaultCodec
argument_list|()
block|,
name|createMetadata
argument_list|(
name|conf
argument_list|,
name|compress
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
comment|// function was properly called, but threw it's own exception
throw|throw
operator|new
name|IOException
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore all other exceptions. related to reflection failure
block|}
comment|// if reflection failed, use the old createWriter
if|if
condition|(
name|this
operator|.
name|writer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"new createWriter -- HADOOP-6840 -- not available"
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|path
argument_list|,
name|HLogKey
operator|.
name|class
argument_list|,
name|WALEdit
operator|.
name|class
argument_list|,
name|FSUtils
operator|.
name|getDefaultBufferSize
argument_list|(
name|fs
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.replication"
argument_list|,
name|FSUtils
operator|.
name|getDefaultReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|FSUtils
operator|.
name|getDefaultBlockSize
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|,
literal|null
argument_list|,
name|createMetadata
argument_list|(
name|conf
argument_list|,
name|compress
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using new createWriter -- HADOOP-6840"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|writer_out
operator|=
name|getSequenceFilePrivateFSDataOutputStreamAccessible
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Path="
operator|+
name|path
operator|+
literal|", compression="
operator|+
name|compress
argument_list|)
expr_stmt|;
block|}
comment|// Get at the private FSDataOutputStream inside in SequenceFile so we can
comment|// call sync on it.  Make it accessible.
specifier|private
name|FSDataOutputStream
name|getSequenceFilePrivateFSDataOutputStreamAccessible
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
specifier|final
name|Field
name|fields
index|[]
init|=
name|this
operator|.
name|writer
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
literal|"out"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Make the 'out' field up in SF.Writer accessible.
name|fields
index|[
name|i
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|FSDataOutputStream
operator|)
name|fields
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|this
operator|.
name|writer
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Accessing "
operator|+
name|fieldName
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Does not have access to out field from FSDataOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|out
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|HLog
operator|.
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|entry
operator|.
name|setCompressionContext
argument_list|(
name|compressionContext
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Concurrent close...
throw|throw
operator|new
name|IOException
argument_list|(
name|npe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Can get a NPE coming up from down in DFSClient$DFSOutputStream#close
name|LOG
operator|.
name|warn
argument_list|(
name|npe
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|syncFs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Concurrent close...
throw|throw
operator|new
name|IOException
argument_list|(
name|npe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|this
operator|.
name|writer
operator|.
name|getLength
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Concurrent close...
throw|throw
operator|new
name|IOException
argument_list|(
name|npe
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return The dfsclient out stream up inside SF.Writer made accessible, or    * null if not available.    */
specifier|public
name|FSDataOutputStream
name|getWriterFSDataOutputStream
parameter_list|()
block|{
return|return
name|this
operator|.
name|writer_out
return|;
block|}
comment|/**    * This method is empty as trailer is added only in Protobuf based hlog readers/writers.    */
annotation|@
name|Override
specifier|public
name|void
name|setWALTrailer
parameter_list|(
name|WALTrailer
name|walTrailer
parameter_list|)
block|{   }
block|}
end_class

end_unit

