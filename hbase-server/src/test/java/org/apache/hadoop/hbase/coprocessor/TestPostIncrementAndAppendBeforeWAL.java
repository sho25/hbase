begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TestFromClientSide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|NoSuchColumnFamilyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test coprocessor methods  * {@link RegionObserver#postIncrementBeforeWAL(ObserverContext, Mutation, List)} and  * {@link RegionObserver#postAppendBeforeWAL(ObserverContext, Mutation, List)}. These methods may  * change the cells which will be applied to memstore and WAL. So add unit test for the case which  * change the cell's column family.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPostIncrementAndAppendBeforeWAL
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestPostIncrementAndAppendBeforeWAL
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CF1
init|=
literal|"cf1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF1_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CF1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CF2
init|=
literal|"cf2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF2_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CF2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CF_NOT_EXIST
init|=
literal|"cf_not_exist"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF_NOT_EXIST_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CF_NOT_EXIST
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CQ1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CQ2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|connection
operator|=
name|UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTableWithCoprocessor
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|coprocessor
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|CF1_BYTES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|CF2_BYTES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setCoprocessor
argument_list|(
name|coprocessor
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|connection
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeCellWithDifferntColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|createTableWithCoprocessor
argument_list|(
name|tableName
argument_list|,
name|ChangeCellWithDifferntColumnFamilyObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF1_BYTES
argument_list|,
name|CQ1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF2_BYTES
argument_list|,
name|CQ1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|CF2_BYTES
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF1_BYTES
argument_list|,
name|CQ2
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF2_BYTES
argument_list|,
name|CQ2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|CF2_BYTES
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeCellWithNotExistColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|createTableWithCoprocessor
argument_list|(
name|tableName
argument_list|,
name|ChangeCellWithNotExistColumnFamilyObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
try|try
block|{
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF1_BYTES
argument_list|,
name|CQ1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw NoSuchColumnFamilyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|NoSuchColumnFamilyException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF1_BYTES
argument_list|,
name|CQ2
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw NoSuchColumnFamilyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|NoSuchColumnFamilyException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ChangeCellWithDifferntColumnFamilyObserver
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|postIncrementBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|cellPairs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cellPairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
operator|new
name|Pair
argument_list|<>
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|newCellWithDifferentColumnFamily
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Cell
name|newCellWithDifferentColumnFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|CF2_BYTES
argument_list|,
literal|0
argument_list|,
name|CF2_BYTES
operator|.
name|length
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|cell
operator|.
name|getType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|postAppendBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|cellPairs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cellPairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
operator|new
name|Pair
argument_list|<>
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|newCellWithDifferentColumnFamily
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ChangeCellWithNotExistColumnFamilyObserver
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|postIncrementBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|cellPairs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cellPairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
operator|new
name|Pair
argument_list|<>
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|newCellWithNotExistColumnFamily
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Cell
name|newCellWithNotExistColumnFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|CF_NOT_EXIST_BYTES
argument_list|,
literal|0
argument_list|,
name|CF_NOT_EXIST_BYTES
operator|.
name|length
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|cell
operator|.
name|getType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|postAppendBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Cell
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|cellPairs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cellPairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
operator|new
name|Pair
argument_list|<>
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|newCellWithNotExistColumnFamily
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

