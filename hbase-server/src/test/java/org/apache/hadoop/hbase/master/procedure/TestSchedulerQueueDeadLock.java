begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSchedulerQueueDeadLock
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSchedulerQueueDeadLock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"deadlock"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|TestEnv
block|{
specifier|private
specifier|final
name|MasterProcedureScheduler
name|scheduler
decl_stmt|;
specifier|public
name|TestEnv
parameter_list|(
name|MasterProcedureScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
specifier|public
name|MasterProcedureScheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableSharedProcedure
extends|extends
name|NoopProcedure
argument_list|<
name|TestEnv
argument_list|>
implements|implements
name|TableProcedureInterface
block|{
specifier|private
specifier|final
name|Semaphore
name|latch
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|TestEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|TestEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
name|latch
operator|.
name|acquire
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|waitTableSharedLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|wakeTableSharedLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|holdLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|TABLE_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|READ
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableExclusiveProcedure
extends|extends
name|NoopProcedure
argument_list|<
name|TestEnv
argument_list|>
implements|implements
name|TableProcedureInterface
block|{
specifier|private
specifier|final
name|Semaphore
name|latch
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|TestEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|TestEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
name|latch
operator|.
name|acquire
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|waitTableExclusiveLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|wakeTableExclusiveLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|holdLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|TABLE_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|EDIT
return|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
specifier|private
name|WALProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|ProcedureExecutor
argument_list|<
name|TestEnv
argument_list|>
name|procExec
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.procedure.worker.stuck.threshold.msec"
argument_list|,
literal|6000000
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MasterProcedureScheduler
name|scheduler
init|=
operator|new
name|MasterProcedureScheduler
argument_list|(
name|pid
lambda|->
literal|null
argument_list|)
decl_stmt|;
name|procExec
operator|=
operator|new
name|ProcedureExecutor
argument_list|<>
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TestEnv
argument_list|(
name|scheduler
argument_list|)
argument_list|,
name|procStore
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|procExec
operator|.
name|init
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|procExec
operator|.
name|stop
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|TableSharedProcedureWithId
extends|extends
name|TableSharedProcedure
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setProcId
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
comment|// this is a hack to make this procedure be loaded after the procedure below as we will sort
comment|// the procedures by id when loading.
name|super
operator|.
name|setProcId
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|TableExclusiveProcedureWithId
extends|extends
name|TableExclusiveProcedure
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setProcId
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
comment|// this is a hack to make this procedure be loaded before the procedure above as we will
comment|// sort the procedures by id when loading.
name|super
operator|.
name|setProcId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableProcedureDeadLockAfterRestarting
parameter_list|()
throws|throws
name|Exception
block|{
comment|// let the shared procedure run first, but let it have a greater procId so when loading it will
comment|// be loaded at last.
name|long
name|procId1
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|TableSharedProcedureWithId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|procId2
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|TableExclusiveProcedureWithId
argument_list|()
argument_list|)
decl_stmt|;
name|procExec
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
operator|(
operator|(
name|TableSharedProcedure
operator|)
name|procExec
operator|.
name|getProcedure
argument_list|(
name|procId1
argument_list|)
operator|)
operator|.
name|latch
operator|.
name|hasQueuedThreads
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TableSharedProcedure
operator|)
name|procExec
operator|.
name|getProcedure
argument_list|(
name|procId1
argument_list|)
operator|)
operator|.
name|latch
operator|.
name|release
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TableExclusiveProcedure
operator|)
name|procExec
operator|.
name|getProcedure
argument_list|(
name|procId2
argument_list|)
operator|)
operator|.
name|latch
operator|.
name|release
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId1
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|TableShardParentProcedure
extends|extends
name|NoopProcedure
argument_list|<
name|TestEnv
argument_list|>
implements|implements
name|TableProcedureInterface
block|{
specifier|private
name|boolean
name|scheduled
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|TestEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|TestEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|scheduled
condition|)
block|{
name|scheduled
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|Procedure
index|[]
block|{
operator|new
name|TableSharedProcedure
argument_list|()
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|waitTableSharedLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getScheduler
argument_list|()
operator|.
name|wakeTableSharedLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|holdLock
parameter_list|(
name|TestEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|TABLE_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|READ
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableProcedureSubProcedureDeadLock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the shared procedure will also schedule a shared procedure, but after the exclusive procedure
name|long
name|procId1
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|TableShardParentProcedure
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|procId2
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|TableExclusiveProcedure
argument_list|()
argument_list|)
decl_stmt|;
name|procExec
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExec
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|instanceof
name|TableSharedProcedure
argument_list|)
argument_list|)
expr_stmt|;
name|procExec
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|instanceof
name|TableSharedProcedure
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|(
name|TableSharedProcedure
operator|)
name|p
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|p
operator|.
name|latch
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TableExclusiveProcedure
operator|)
name|procExec
operator|.
name|getProcedure
argument_list|(
name|procId2
argument_list|)
operator|)
operator|.
name|latch
operator|.
name|release
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId1
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

