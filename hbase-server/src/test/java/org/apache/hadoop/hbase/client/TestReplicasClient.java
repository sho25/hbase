begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StorefileRefresherChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestRegionServerNoMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_comment
comment|/**  * Tests for region replicas. Sad that we cannot isolate these without bringing up a whole  * cluster. See {@link org.apache.hadoop.hbase.regionserver.TestRegionServerNoMaster}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestReplicasClient
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicasClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicasClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
decl_stmt|;
specifier|private
name|Table
name|table
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TestReplicasClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|hriPrimary
decl_stmt|;
specifier|private
specifier|static
name|HRegionInfo
name|hriSecondary
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REFRESH_PERIOD
init|=
literal|1000
decl_stmt|;
comment|/**    * This copro is used to synchronize the tests.    */
specifier|public
specifier|static
class|class
name|SlowMeCopro
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicBoolean
name|slowDownNext
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicInteger
name|countOfNext
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|primaryCdl
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|secondaryCdl
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|SlowMeCopro
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|slowdownCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|slowdownCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this will slow down a certain next operation if the conditions are met. The slowness
comment|//will allow the call to go to a replica
if|if
condition|(
name|slowDownNext
operator|.
name|get
argument_list|()
condition|)
block|{
comment|//have some "next" return successfully from the primary; hence countOfNext checked
if|if
condition|(
name|countOfNext
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|2
condition|)
block|{
name|sleepTime
operator|.
name|set
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|slowdownCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|slowdownCode
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We're the primary replicas."
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sleepTime
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|sleepTime
operator|.
name|get
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the counterCountDownLatch"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// To help the tests to finish.
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't wait more"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We're not the primary replicas."
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
name|getSecondaryCdl
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the secondary counterCountDownLatch"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// To help the tests to finish.
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't wait more"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|getPrimaryCdl
parameter_list|()
block|{
return|return
name|primaryCdl
return|;
block|}
specifier|public
specifier|static
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|getSecondaryCdl
parameter_list|()
block|{
return|return
name|secondaryCdl
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable store file refreshing
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|StorefileRefresherChore
operator|.
name|REGIONSERVER_STOREFILE_REFRESH_PERIOD
argument_list|,
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.client.log.scanner.activity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|MetricsConnection
operator|.
name|CLIENT_SIDE_METRICS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numRegionServers
argument_list|(
literal|1
argument_list|)
operator|.
name|numAlwaysStandByMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|numMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
name|TestReplicasClient
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TABLE_NAME
operator|=
name|hdt
operator|.
name|getTableName
argument_list|()
expr_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|hriPrimary
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
operator|.
name|getRegion
argument_list|()
expr_stmt|;
block|}
comment|// mock a secondary region info to open
name|hriSecondary
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|hriPrimary
operator|.
name|getTable
argument_list|()
argument_list|,
name|hriPrimary
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|hriPrimary
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|hriPrimary
operator|.
name|isSplit
argument_list|()
argument_list|,
name|hriPrimary
operator|.
name|getRegionId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// No master
name|LOG
operator|.
name|info
argument_list|(
literal|"Master is going to be stopped"
argument_list|)
expr_stmt|;
name|TestRegionServerNoMaster
operator|.
name|stopMasterAndAssignMeta
argument_list|(
name|HTU
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Master has stopped"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionServer
operator|.
name|TEST_SKIP_REPORTING_TRANSITION
operator|=
literal|false
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionLocationCache
argument_list|()
expr_stmt|;
try|try
block|{
name|openRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
try|try
block|{
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
name|table
operator|=
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
try|try
block|{
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
try|try
block|{
name|closeRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionLocationCache
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegionServer
name|getRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|void
name|openRegion
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|isRegionOpened
argument_list|(
name|hri
argument_list|)
condition|)
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// first version is '0'
name|AdminProtos
operator|.
name|OpenRegionRequest
name|orr
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|getRS
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|hri
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AdminProtos
operator|.
name|OpenRegionResponse
name|responseOpen
init|=
name|getRS
argument_list|()
operator|.
name|getRSRpcServices
argument_list|()
operator|.
name|openRegion
argument_list|(
literal|null
argument_list|,
name|orr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responseOpen
operator|.
name|getOpeningStateCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AdminProtos
operator|.
name|OpenRegionResponse
operator|.
name|RegionOpeningState
operator|.
name|OPENED
argument_list|,
name|responseOpen
operator|.
name|getOpeningState
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkRegionIsOpened
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closeRegion
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
name|AdminProtos
operator|.
name|CloseRegionRequest
name|crr
init|=
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|getRS
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|AdminProtos
operator|.
name|CloseRegionResponse
name|responseClose
init|=
name|getRS
argument_list|()
operator|.
name|getRSRpcServices
argument_list|()
operator|.
name|closeRegion
argument_list|(
literal|null
argument_list|,
name|crr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|responseClose
operator|.
name|getClosed
argument_list|()
argument_list|)
expr_stmt|;
name|checkRegionIsClosed
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRegionIsOpened
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|getRS
argument_list|()
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isRegionOpened
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRS
argument_list|()
operator|.
name|getRegionByEncodedName
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|.
name|isAvailable
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkRegionIsClosed
parameter_list|(
name|String
name|encodedRegionName
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|getRS
argument_list|()
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|getRS
argument_list|()
operator|.
name|getRegionByEncodedName
argument_list|(
name|encodedRegionName
argument_list|)
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|expected
parameter_list|)
block|{
comment|// That's how it work: if the region is closed we have an exception.
block|}
comment|// We don't delete the znode here, because there is not always a znode.
block|}
specifier|private
name|void
name|flushRegion
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|TestRegionServerNoMaster
operator|.
name|flushRegion
argument_list|(
name|HTU
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseRegionWithoutReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testUseRegionWithoutReplica"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testLocations"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_NAME
argument_list|)
init|)
block|{
name|conn
operator|.
name|clearRegionLocationCache
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|rl
init|=
name|locator
operator|.
name|getRegionLocations
argument_list|(
name|b1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rl
operator|=
name|locator
operator|.
name|getRegionLocations
argument_list|(
name|b1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|clearRegionLocationCache
argument_list|()
expr_stmt|;
name|rl
operator|=
name|locator
operator|.
name|getRegionLocations
argument_list|(
name|b1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rl
operator|=
name|locator
operator|.
name|getRegionLocations
argument_list|(
name|b1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNoResultNoStaleRegionWithReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetNoResultNoStaleRegionWithReplica"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
comment|// A get works and is not stale
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNoResultStaleRegionWithReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetNoResultStaleRegionWithReplica"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNoResultNotStaleSleepRegionWithReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetNoResultNotStaleSleepRegionWithReplica"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
comment|// We sleep; but we won't go to the stale region as we don't get the stale by default.
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushTable
parameter_list|()
throws|throws
name|Exception
block|{
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
name|flushRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushPrimary
parameter_list|()
throws|throws
name|Exception
block|{
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
name|flushRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushSecondary
parameter_list|()
throws|throws
name|Exception
block|{
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
name|flushRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|expected
parameter_list|)
block|{     }
finally|finally
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseRegionWithReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testUseRegionWithReplica"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
comment|// A simple put works, even if there here a second replica
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|b1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Put done"
argument_list|)
expr_stmt|;
comment|// A get works and is not stale
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"get works and is not stale done"
argument_list|)
expr_stmt|;
comment|// Even if it we have to wait a little on the main region
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep and is not stale done"
argument_list|)
expr_stmt|;
comment|// But if we ask for stale we will get it
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stale done"
argument_list|)
expr_stmt|;
comment|// exists works and is not stale
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exists not stale done"
argument_list|)
expr_stmt|;
comment|// exists works on stale but don't see the put
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The secondary has stale data"
argument_list|,
name|r
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exists stale before flush done"
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriPrimary
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"flush done"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|+
name|REFRESH_PERIOD
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// get works and is not stale
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stale done"
argument_list|)
expr_stmt|;
comment|// exists works on stale and we see the put after the flush
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exists stale after flush done"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHedgedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testHedgedRead"
argument_list|)
decl_stmt|;
name|openRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
try|try
block|{
comment|// A simple put works, even if there here a second replica
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|b1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Put done"
argument_list|)
expr_stmt|;
comment|// A get works and is not stale
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"get works and is not stale done"
argument_list|)
expr_stmt|;
comment|//reset
name|AsyncConnectionImpl
name|conn
init|=
operator|(
name|AsyncConnectionImpl
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|toAsyncConnection
argument_list|()
decl_stmt|;
name|Counter
name|hedgedReadOps
init|=
name|conn
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|hedgedReadOps
decl_stmt|;
name|Counter
name|hedgedReadWin
init|=
name|conn
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|hedgedReadWin
decl_stmt|;
name|hedgedReadOps
operator|.
name|dec
argument_list|(
name|hedgedReadOps
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|hedgedReadWin
operator|.
name|dec
argument_list|(
name|hedgedReadWin
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait a little on the main region, just enough to happen once hedged read
comment|// and hedged read did not returned faster
name|long
name|primaryCallTimeoutNs
init|=
name|conn
operator|.
name|connConf
operator|.
name|getPrimaryCallTimeoutNs
argument_list|()
decl_stmt|;
comment|// The resolution of our timer is 10ms, so we need to sleep a bit more otherwise we may not
comment|// trigger the hedged read...
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|primaryCallTimeoutNs
argument_list|)
operator|+
literal|100
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getSecondaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hedgedReadOps
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hedgedReadWin
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getSecondaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hedged read occurred but not faster"
argument_list|)
expr_stmt|;
comment|// But if we ask for stale we will get it and hedged read returned faster
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
name|b1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hedgedReadOps
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// we update the metrics after we finish the request so we use a waitFor here, use assert
comment|// directly may cause failure if we run too fast.
name|HTU
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|hedgedReadWin
operator|.
name|getCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hedged read occurred and faster"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|getPrimaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|getSecondaryCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|closeRegion
argument_list|(
name|hriSecondary
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

