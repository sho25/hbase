begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * A helper class for process-based mini-cluster tests. Unlike  * {@link MiniHBaseCluster}, starts daemons as separate processes, allowing to  * do real kill testing.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|ProcessBasedLocalHBaseCluster
block|{
specifier|private
specifier|final
name|String
name|hbaseHome
decl_stmt|,
name|workDir
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|int
name|numMasters
decl_stmt|,
name|numRegionServers
decl_stmt|,
name|numDataNodes
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rsPorts
decl_stmt|,
name|masterPorts
decl_stmt|;
specifier|private
specifier|final
name|int
name|zkClientPort
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FILE_SIZE_OVERRIDE
init|=
literal|10
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcessBasedLocalHBaseCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|daemonPidFiles
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|private
name|boolean
name|shutdownHookInstalled
decl_stmt|;
specifier|private
name|String
name|hbaseDaemonScript
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|testUtil
decl_stmt|;
specifier|private
name|Thread
name|logTailerThread
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|logTailDirs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|ServerType
block|{
name|MASTER
argument_list|(
literal|"master"
argument_list|)
block|,
name|RS
argument_list|(
literal|"regionserver"
argument_list|)
block|,
name|ZK
argument_list|(
literal|"zookeeper"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|fullName
decl_stmt|;
specifier|private
name|ServerType
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
block|}
block|}
comment|/**    * Constructor. Modifies the passed configuration.    * @param hbaseHome the top directory of the HBase source tree    */
specifier|public
name|ProcessBasedLocalHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|numRegionServers
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|hbaseHome
operator|=
name|HBaseHomePath
operator|.
name|getHomePath
argument_list|()
expr_stmt|;
name|this
operator|.
name|numMasters
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|numRegionServers
operator|=
name|numRegionServers
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|hbaseHome
operator|+
literal|"/target/local_cluster"
expr_stmt|;
name|this
operator|.
name|numDataNodes
operator|=
name|numDataNodes
expr_stmt|;
name|hbaseDaemonScript
operator|=
name|hbaseHome
operator|+
literal|"/bin/hbase-daemon.sh"
expr_stmt|;
name|zkClientPort
operator|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
expr_stmt|;
name|this
operator|.
name|rsPorts
operator|=
name|sortedPorts
argument_list|(
name|numRegionServers
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterPorts
operator|=
name|sortedPorts
argument_list|(
name|numMasters
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
block|}
comment|/**    * Makes this local HBase cluster use a mini-DFS cluster. Must be called before    * {@link #startHBase()}.    * @throws IOException    */
specifier|public
name|void
name|startMiniDFS
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testUtil
operator|==
literal|null
condition|)
block|{
name|testUtil
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|dfsCluster
operator|=
name|testUtil
operator|.
name|startMiniDFSCluster
argument_list|(
name|numDataNodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a list of random port numbers in the sorted order. A sorted    * order makes sense if we ever want to refer to these servers by their index    * in the returned array, e.g. server #0, #1, etc.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|sortedPorts
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|ports
operator|.
name|add
argument_list|(
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ports
argument_list|)
expr_stmt|;
return|return
name|ports
return|;
block|}
specifier|public
name|void
name|startHBase
parameter_list|()
throws|throws
name|IOException
block|{
name|startDaemonLogTailer
argument_list|()
expr_stmt|;
name|cleanupOldState
argument_list|()
expr_stmt|;
comment|// start ZK
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting ZooKeeper on port "
operator|+
name|zkClientPort
argument_list|)
expr_stmt|;
name|startZK
argument_list|()
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|waitForHostPort
argument_list|(
name|HConstants
operator|.
name|LOCALHOST
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|masterPort
range|:
name|masterPorts
control|)
block|{
name|startMaster
argument_list|(
name|masterPort
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
operator|.
name|waitForBaseZNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rsPort
range|:
name|rsPorts
control|)
block|{
name|startRegionServer
argument_list|(
name|rsPort
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HBase startup by scanning META"
argument_list|)
expr_stmt|;
name|int
name|attemptsLeft
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|attemptsLeft
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|testUtil
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HBase to startup. Retries left: "
operator|+
name|attemptsLeft
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Process-based HBase Cluster with "
operator|+
name|numRegionServers
operator|+
literal|" region servers up and running... \n\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startRegionServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|startServer
argument_list|(
name|ServerType
operator|.
name|RS
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startMaster
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|startServer
argument_list|(
name|ServerType
operator|.
name|MASTER
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killRegionServer
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|killServer
argument_list|(
name|ServerType
operator|.
name|RS
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killMaster
parameter_list|()
throws|throws
name|IOException
block|{
name|killServer
argument_list|(
name|ServerType
operator|.
name|MASTER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startZK
parameter_list|()
block|{
name|startServer
argument_list|(
name|ServerType
operator|.
name|ZK
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|executeCommand
argument_list|(
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOverrides
parameter_list|)
block|{
name|ensureShutdownHookInstalled
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Command : "
operator|+
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|envp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|envOverrides
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|envOverrides
argument_list|)
expr_stmt|;
name|envp
operator|=
operator|new
name|String
index|[
name|map
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|envp
index|[
name|idx
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|,
name|envp
argument_list|)
decl_stmt|;
name|BufferedReader
name|stdInput
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|stdError
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// read the output from the command
name|String
name|s
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|s
operator|=
name|stdInput
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// read any errors from the attempted command
while|while
condition|(
operator|(
name|s
operator|=
name|stdError
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running: "
operator|+
name|command
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutdownAllProcesses
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing daemons using pid files"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|pidFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|daemonPidFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pidFile
range|:
name|pidFiles
control|)
block|{
name|int
name|pid
init|=
literal|0
decl_stmt|;
try|try
block|{
name|pid
operator|=
name|readPidFromFile
argument_list|(
name|pidFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not read pid from file "
operator|+
name|pidFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pid
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing pid "
operator|+
name|pid
operator|+
literal|" ("
operator|+
name|pidFile
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|ensureShutdownHookInstalled
parameter_list|()
block|{
if|if
condition|(
name|shutdownHookInstalled
condition|)
block|{
return|return;
block|}
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|shutdownAllProcesses
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownHookInstalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupOldState
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"rm -rf "
operator|+
name|workDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeStringToFile
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing to: "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|serverWorkingDir
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|workDir
operator|+
literal|"/"
operator|+
name|serverType
operator|+
literal|"-"
operator|+
name|port
return|;
block|}
specifier|private
name|int
name|getServerPID
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pidFile
init|=
name|pidFilePath
argument_list|(
name|serverType
argument_list|,
name|port
argument_list|)
decl_stmt|;
return|return
name|readPidFromFile
argument_list|(
name|pidFile
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|readPidFromFile
parameter_list|(
name|String
name|pidFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
operator|new
name|File
argument_list|(
name|pidFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|scanner
operator|.
name|nextInt
argument_list|()
return|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|pidFilePath
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|dir
init|=
name|serverWorkingDir
argument_list|(
name|serverType
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
name|String
name|pidFile
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/hbase-%s-%s.pid"
argument_list|,
name|dir
argument_list|,
name|user
argument_list|,
name|serverType
operator|.
name|fullName
argument_list|)
decl_stmt|;
return|return
name|pidFile
return|;
block|}
specifier|private
name|void
name|killServer
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pid
init|=
name|getServerPID
argument_list|(
name|serverType
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing "
operator|+
name|serverType
operator|+
literal|"; pid="
operator|+
name|pid
argument_list|)
expr_stmt|;
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|killProcess
parameter_list|(
name|int
name|pid
parameter_list|)
block|{
name|String
name|cmd
init|=
literal|"kill -s KILL "
operator|+
name|pid
decl_stmt|;
name|executeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startServer
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|rsPort
parameter_list|)
block|{
comment|// create working directory for this region server.
name|String
name|dir
init|=
name|serverWorkingDir
argument_list|(
name|serverType
argument_list|,
name|rsPort
argument_list|)
decl_stmt|;
name|String
name|confStr
init|=
name|generateConfig
argument_list|(
name|serverType
argument_list|,
name|rsPort
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating directory "
operator|+
name|dir
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|writeStringToFile
argument_list|(
name|confStr
argument_list|,
name|dir
operator|+
literal|"/hbase-site.xml"
argument_list|)
expr_stmt|;
comment|// Set debug options to an empty string so that hbase-config.sh does not configure them
comment|// using default ports. If we want to run remote debugging on process-based local cluster's
comment|// daemons, we can automatically choose non-conflicting JDWP and JMX ports for each daemon
comment|// and specify them here.
name|writeStringToFile
argument_list|(
literal|"unset HBASE_MASTER_OPTS\n"
operator|+
literal|"unset HBASE_REGIONSERVER_OPTS\n"
operator|+
literal|"unset HBASE_ZOOKEEPER_OPTS\n"
operator|+
literal|"HBASE_MASTER_DBG_OPTS=' '\n"
operator|+
literal|"HBASE_REGIONSERVER_DBG_OPTS=' '\n"
operator|+
literal|"HBASE_ZOOKEEPER_DBG_OPTS=' '\n"
operator|+
literal|"HBASE_MASTER_JMX_OPTS=' '\n"
operator|+
literal|"HBASE_REGIONSERVER_JMX_OPTS=' '\n"
operator|+
literal|"HBASE_ZOOKEEPER_JMX_OPTS=' '\n"
argument_list|,
name|dir
operator|+
literal|"/hbase-env.sh"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|envOverrides
operator|.
name|put
argument_list|(
literal|"HBASE_LOG_DIR"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|envOverrides
operator|.
name|put
argument_list|(
literal|"HBASE_PID_DIR"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|hbaseHome
argument_list|,
literal|"conf/log4j.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"log4j.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not install log4j.properties into "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
name|executeCommand
argument_list|(
name|hbaseDaemonScript
operator|+
literal|" --config "
operator|+
name|dir
operator|+
literal|" start "
operator|+
name|serverType
operator|.
name|fullName
argument_list|,
name|envOverrides
argument_list|)
expr_stmt|;
name|daemonPidFiles
operator|.
name|add
argument_list|(
name|pidFilePath
argument_list|(
name|serverType
argument_list|,
name|rsPort
argument_list|)
argument_list|)
expr_stmt|;
name|logTailDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|generateConfig
parameter_list|(
name|ServerType
name|serverType
parameter_list|,
name|int
name|rpcPort
parameter_list|,
name|String
name|daemonDir
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|confMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|CLUSTER_DISTRIBUTED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverType
operator|==
name|ServerType
operator|.
name|MASTER
condition|)
block|{
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
name|rpcPort
argument_list|)
expr_stmt|;
name|int
name|masterInfoPort
init|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
decl_stmt|;
name|reportWebUIPort
argument_list|(
literal|"master"
argument_list|,
name|masterInfoPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|MASTER_INFO_PORT
argument_list|,
name|masterInfoPort
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|serverType
operator|==
name|ServerType
operator|.
name|RS
condition|)
block|{
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|rpcPort
argument_list|)
expr_stmt|;
name|int
name|rsInfoPort
init|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
decl_stmt|;
name|reportWebUIPort
argument_list|(
literal|"region server"
argument_list|,
name|rsInfoPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT
argument_list|,
name|rsInfoPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_DATA_DIR
argument_list|,
name|daemonDir
argument_list|)
expr_stmt|;
block|}
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|MAX_FILE_SIZE_OVERRIDE
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|String
name|fsURL
init|=
literal|"hdfs://"
operator|+
name|HConstants
operator|.
name|LOCALHOST
operator|+
literal|":"
operator|+
name|dfsCluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
name|confMap
operator|.
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fsURL
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
literal|"hbase.rootdir"
argument_list|,
name|fsURL
operator|+
literal|"/hbase_test"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|confMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<property>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<name>"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"</name>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<value>"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"</value>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|reportWebUIPort
parameter_list|(
name|String
name|daemon
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Local "
operator|+
name|daemon
operator|+
literal|" web UI is at http://"
operator|+
name|HConstants
operator|.
name|LOCALHOST
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|shutdownAllProcesses
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|TO_REMOVE_FROM_LOG_LINES_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"org\\.apache\\.hadoop\\.hbase\\."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|LOG_PATH_FORMAT_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*/([A-Z]+)-(\\d+)/[^/]+$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|TO_REMOVE_FROM_LOG_LINES_RE
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|LocalDaemonLogTailer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tailedFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|printLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FilenameFilter
name|LOG_FILES
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".out"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".log"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runInternal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runInternal
parameter_list|()
throws|throws
name|IOException
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scanDirs
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log tailer thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|scanDirs
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|dirList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirList
operator|.
name|addAll
argument_list|(
name|logTailDirs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|d
range|:
name|dirList
control|)
block|{
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
argument_list|(
name|d
argument_list|)
operator|.
name|listFiles
argument_list|(
name|LOG_FILES
argument_list|)
control|)
block|{
name|String
name|filePath
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tailedFiles
operator|.
name|contains
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|tailedFiles
operator|.
name|add
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|startTailingFile
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|startTailingFile
parameter_list|(
specifier|final
name|String
name|filePath
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
specifier|final
name|PrintStream
name|dest
init|=
name|filePath
operator|.
name|endsWith
argument_list|(
literal|".log"
argument_list|)
condition|?
name|System
operator|.
name|err
else|:
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|ServerType
name|serverType
decl_stmt|;
specifier|final
name|int
name|serverPort
decl_stmt|;
name|Matcher
name|m
init|=
name|LOG_PATH_FORMAT_RE
operator|.
name|matcher
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|serverType
operator|=
name|ServerType
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|serverPort
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecognized log path format: "
operator|+
name|filePath
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|logMsgPrefix
init|=
literal|"["
operator|+
name|serverType
operator|+
operator|(
name|serverPort
operator|!=
literal|0
condition|?
literal|":"
operator|+
name|serverPort
else|:
literal|""
operator|)
operator|+
literal|"] "
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tailing "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fis
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Tailer for "
operator|+
name|filePath
operator|+
literal|" interrupted"
argument_list|)
expr_stmt|;
break|break;
block|}
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|logMsgPrefix
operator|+
name|processLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|printLock
init|)
block|{
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|dest
operator|.
name|print
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed tailing "
operator|+
name|filePath
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"Tailer for "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startDaemonLogTailer
parameter_list|()
block|{
name|logTailerThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|LocalDaemonLogTailer
argument_list|()
argument_list|)
expr_stmt|;
name|logTailerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logTailerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

