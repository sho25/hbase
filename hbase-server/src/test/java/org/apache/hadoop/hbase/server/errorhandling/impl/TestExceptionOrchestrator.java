begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|OperationAttemptTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|exception
operator|.
name|OperationAttemptTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|BaseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test that we propagate errors through an orchestrator as expected  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
class|class
name|TestExceptionOrchestrator
block|{
annotation|@
name|Test
specifier|public
name|void
name|testErrorPropagation
parameter_list|()
block|{
name|ExceptionListener
name|listener1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionListener
name|listener2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionOrchestrator
argument_list|<
name|Exception
argument_list|>
name|orchestrator
init|=
operator|new
name|ExceptionOrchestrator
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
comment|// add the listeners
name|orchestrator
operator|.
name|addErrorListener
argument_list|(
name|orchestrator
operator|.
name|genericVisitor
argument_list|,
name|listener1
argument_list|)
expr_stmt|;
name|orchestrator
operator|.
name|addErrorListener
argument_list|(
name|orchestrator
operator|.
name|genericVisitor
argument_list|,
name|listener2
argument_list|)
expr_stmt|;
comment|// create an artificial error
name|String
name|message
init|=
literal|"Some error"
decl_stmt|;
name|Object
index|[]
name|info
init|=
operator|new
name|Object
index|[]
block|{
literal|"info1"
block|}
decl_stmt|;
name|Exception
name|e
init|=
operator|new
name|ExceptionForTesting
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|orchestrator
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// make sure the listeners got the error
name|Mockito
operator|.
name|verify
argument_list|(
name|listener1
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener2
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// push another error, which should be passed to listeners
name|message
operator|=
literal|"another error"
expr_stmt|;
name|e
operator|=
operator|new
name|ExceptionForTesting
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|info
index|[
literal|0
index|]
operator|=
literal|"info2"
expr_stmt|;
name|orchestrator
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener1
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener2
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// now create a timer and check for that error
name|info
index|[
literal|0
index|]
operator|=
literal|"timer"
expr_stmt|;
name|OperationAttemptTimer
name|timer
init|=
operator|new
name|OperationAttemptTimer
argument_list|(
name|orchestrator
argument_list|,
literal|1000
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|.
name|trigger
argument_list|()
expr_stmt|;
comment|// make sure that we got the timer error
name|Mockito
operator|.
name|verify
argument_list|(
name|listener1
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|OperationAttemptTimeoutException
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|argThat
argument_list|(
operator|new
name|VarArgMatcher
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener2
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receiveError
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|OperationAttemptTimeoutException
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|argThat
argument_list|(
operator|new
name|VarArgMatcher
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Matcher that matches var-args elements    * @param<T> Type of args to match    */
specifier|private
specifier|static
class|class
name|VarArgMatcher
parameter_list|<
name|T
parameter_list|>
extends|extends
name|BaseMatcher
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|T
index|[]
name|expected
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
specifier|private
name|String
name|reason
decl_stmt|;
comment|/**      * Setup the matcher to expect args of the given type      * @param clazz type of args to expect      * @param expected expected arguments      */
specifier|public
name|VarArgMatcher
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
modifier|...
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|arg0
parameter_list|)
block|{
comment|// null check early exit
if|if
condition|(
name|expected
operator|==
literal|null
operator|&&
name|arg0
operator|==
literal|null
condition|)
return|return
literal|true
return|;
comment|// single arg matching
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|arg0
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|expected
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|arg0
operator|.
name|equals
argument_list|(
name|expected
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
name|reason
operator|=
literal|"single argument received, but didn't match argument"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"single argument received, but expected array of args, size = "
operator|+
name|expected
operator|.
name|length
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg0
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// array matching
try|try
block|{
name|T
index|[]
name|arg
init|=
operator|(
name|T
index|[]
operator|)
name|arg0
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|arg
argument_list|)
condition|)
return|return
literal|true
return|;
name|reason
operator|=
literal|"Array of args didn't match expected"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reason
operator|=
literal|"Exception while matching arguments:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|reason
operator|=
literal|"Objet wasn't the same as passed class or not an array"
expr_stmt|;
comment|// nothing worked - fail
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|arg0
parameter_list|)
block|{
name|arg0
operator|.
name|appendText
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

