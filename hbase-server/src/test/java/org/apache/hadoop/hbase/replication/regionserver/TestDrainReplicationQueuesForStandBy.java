begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|ExplainingPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDrainReplicationQueuesForStandBy
extends|extends
name|SyncReplicationTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestDrainReplicationQueuesForStandBy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|UTIL1
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|UTIL1
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|String
name|walGroupId
init|=
name|AbstractFSWALProvider
operator|.
name|getWALPrefixFromWALName
argument_list|(
operator|(
operator|(
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
operator|)
name|rs
operator|.
name|getWAL
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|)
operator|.
name|getCurrentFileName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
comment|// transit cluster2 to DA and cluster 1 to S
name|verify
argument_list|(
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// delete the original value, and then major compact
try|try
init|(
name|Table
name|table
init|=
name|UTIL2
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|UTIL2
operator|.
name|flush
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|compact
argument_list|(
name|TABLE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// wait until the new values are replicated back to cluster1
name|HRegion
name|region
init|=
name|rs
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UTIL1
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|99
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|"Replication has not been catched up yet"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// transit cluster1 to DA and cluster2 to S, then we will start replicating from cluster1 to
comment|// cluster2
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
comment|// confirm that we will not replicate the old data which causes inconsistency
name|ReplicationSource
name|source
init|=
call|(
name|ReplicationSource
call|)
argument_list|(
operator|(
name|Replication
operator|)
name|rs
operator|.
name|getReplicationSourceService
argument_list|()
argument_list|)
operator|.
name|getReplicationManager
argument_list|()
operator|.
name|getSource
argument_list|(
name|PEER_ID
argument_list|)
decl_stmt|;
name|UTIL1
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|source
operator|.
name|workerThreads
operator|.
name|containsKey
argument_list|(
name|walGroupId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|"Replication has not been catched up yet"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HRegion
name|region2
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|region2
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

