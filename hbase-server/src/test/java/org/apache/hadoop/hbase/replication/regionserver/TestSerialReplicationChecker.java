begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSerialReplicationChecker
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSerialReplicationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|PEER_ID
init|=
literal|"1"
decl_stmt|;
specifier|private
specifier|static
name|ReplicationQueueStorage
name|QUEUE_STORAGE
decl_stmt|;
specifier|private
specifier|static
name|String
name|WAL_FILE_NAME
init|=
literal|"test.wal"
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|SerialReplicationChecker
name|checker
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QUEUE_STORAGE
operator|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|QUEUE_STORAGE
operator|.
name|addWAL
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_ID
argument_list|,
name|WAL_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|ReplicationSource
name|source
init|=
name|mock
argument_list|(
name|ReplicationSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getPeerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getQueueStorage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QUEUE_STORAGE
argument_list|)
expr_stmt|;
name|conn
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Table
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Table
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
operator|(
name|TableName
operator|)
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|conn
argument_list|)
operator|.
name|getTable
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|server
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getServer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|checker
operator|=
operator|new
name|SerialReplicationChecker
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Entry
name|createEntry
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|long
name|seqId
parameter_list|)
block|{
name|WALKeyImpl
name|key
init|=
name|mock
argument_list|(
name|WALKeyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|key
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|key
operator|.
name|getSequenceId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|seqId
argument_list|)
expr_stmt|;
name|Entry
name|entry
init|=
name|mock
argument_list|(
name|Entry
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|private
name|Cell
name|createCell
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
block|{
return|return
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoBarrierCanPush
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|100
argument_list|)
argument_list|,
name|createCell
argument_list|(
name|region
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStateAndBarrier
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|,
name|long
modifier|...
name|barriers
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|barriers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|,
name|put
operator|.
name|getTimeStamp
argument_list|()
operator|-
name|barriers
operator|.
name|length
operator|+
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|barriers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setState
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updatePushedSeqId
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|QUEUE_STORAGE
operator|.
name|setWALPosition
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_ID
argument_list|,
name|WAL_FILE_NAME
argument_list|,
literal|10
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|seqId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addParents
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|REPLICATION_PARENT_QUALIFIER
argument_list|,
name|MetaTableAccessor
operator|.
name|getParentsBytes
argument_list|(
name|parents
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastRegionAndOpeningCanNotPush
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|createCell
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// can push since we are in the first range
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|100
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPENING
argument_list|)
expr_stmt|;
comment|// can not push since we are in the last range and the state is OPENING
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|102
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// can not push since the previous range has not been finished yet
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|102
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|49
argument_list|)
expr_stmt|;
comment|// can push since the previous range has been finished
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|102
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPENING
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|104
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPushUnder
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|createCell
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|20
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|conn
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTable
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// not continuous
for|for
control|(
name|int
name|i
init|=
literal|22
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
name|i
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify that we do not go to meta table
name|verify
argument_list|(
name|conn
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTable
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPushIfContinuous
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|createCell
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|20
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|conn
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTable
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// continuous
for|for
control|(
name|int
name|i
init|=
literal|21
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
name|i
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify that we do not go to meta table
name|verify
argument_list|(
name|conn
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getTable
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPushAfterMerge
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
comment|// 0xFF is the escape byte when storing region name so let's make sure it can work.
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x01
block|}
decl_stmt|;
name|RegionInfo
name|regionA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|regionA
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|regionB
argument_list|,
literal|null
argument_list|,
literal|20
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|addParents
argument_list|(
name|region
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|regionA
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|createCell
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// can not push since both parents have not been finished yet
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|300
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|regionB
argument_list|,
literal|199
argument_list|)
expr_stmt|;
comment|// can not push since regionA has not been finished yet
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|300
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|regionA
argument_list|,
literal|99
argument_list|)
expr_stmt|;
comment|// can push since all parents have been finished
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|300
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPushAfterSplit
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
comment|// 0xFF is the escape byte when storing region name so let's make sure it can work.
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x01
block|}
decl_stmt|;
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|regionA
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|regionB
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|100
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|addParents
argument_list|(
name|regionA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|addParents
argument_list|(
name|regionB
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|cellA
init|=
name|createCell
argument_list|(
name|regionA
argument_list|)
decl_stmt|;
name|Cell
name|cellB
init|=
name|createCell
argument_list|(
name|regionB
argument_list|)
decl_stmt|;
comment|// can not push since parent has not been finished yet
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|regionA
argument_list|,
literal|150
argument_list|)
argument_list|,
name|cellA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|regionB
argument_list|,
literal|200
argument_list|)
argument_list|,
name|cellB
argument_list|)
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|99
argument_list|)
expr_stmt|;
comment|// can push since parent has been finished
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|regionA
argument_list|,
literal|150
argument_list|)
argument_list|,
name|cellA
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|regionB
argument_list|,
literal|200
argument_list|)
argument_list|,
name|cellB
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPushEqualsToBarrier
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
comment|// For binary search, equals to an element will result to a positive value, let's test whether
comment|// it works.
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|createCell
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|10
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|100
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|canPush
argument_list|(
name|createEntry
argument_list|(
name|region
argument_list|,
literal|100
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

