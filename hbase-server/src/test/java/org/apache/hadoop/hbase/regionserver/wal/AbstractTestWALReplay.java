begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultStoreFlusher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|FlushLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|FlushRequestListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|FlushRequester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MemStoreSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MemStoreSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
operator|.
name|StreamLacksCapabilityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test replay of edits out of a WAL split.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestWALReplay
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractTestWALReplay
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|hbaseRootDir
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|logName
decl_stmt|;
specifier|private
name|Path
name|oldLogDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|WALFactory
name|wals
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|currentTest
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// The below config supported by 0.20-append and CDH3b2
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.recovery.retries"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Path
name|hbaseRootDir
init|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.rootdir="
operator|+
name|hbaseRootDir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|hbaseRootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|hbaseRootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldLogDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
expr_stmt|;
name|String
name|serverName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|currentTest
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-manual"
argument_list|,
literal|16010
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|logName
operator|=
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
expr_stmt|;
if|if
condition|(
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|)
condition|)
block|{
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|wals
operator|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
name|currentTest
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|wals
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param p Directory to cleanup    */
specifier|private
name|void
name|deleteDir
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed remove of "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsAfterRegionMovedWithMultiCF
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsAfterRegionMovedWithMultiCF"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testV"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|familys
init|=
block|{
name|family1
block|,
name|family2
block|}
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familys
argument_list|)
expr_stmt|;
name|Table
name|htable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|htable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanner
init|=
name|htable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultScanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|resultScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|hbaseCluster
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|hbaseCluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// move region to another regionserver
name|Region
name|destRegion
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|originServerNum
init|=
name|hbaseCluster
operator|.
name|getServerWith
argument_list|(
name|destRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Please start more than 1 regionserver"
argument_list|,
name|hbaseCluster
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|int
name|destServerNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|destServerNum
operator|==
name|originServerNum
condition|)
block|{
name|destServerNum
operator|++
expr_stmt|;
block|}
name|HRegionServer
name|originServer
init|=
name|hbaseCluster
operator|.
name|getRegionServer
argument_list|(
name|originServerNum
argument_list|)
decl_stmt|;
name|HRegionServer
name|destServer
init|=
name|hbaseCluster
operator|.
name|getRegionServer
argument_list|(
name|destServerNum
argument_list|)
decl_stmt|;
comment|// move region to destination regionserver
name|TEST_UTIL
operator|.
name|moveRegionAndWait
argument_list|(
name|destRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|destServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the row
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|htable
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|resultScanner
operator|=
name|htable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|resultScanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|resultScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// flush region and make major compaction
name|HRegion
name|region
init|=
operator|(
name|HRegion
operator|)
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|destRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait to complete major compaction
for|for
control|(
name|HStore
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
control|)
block|{
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// move region to origin regionserver
name|TEST_UTIL
operator|.
name|moveRegionAndWait
argument_list|(
name|destRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|originServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// abort the origin regionserver
name|originServer
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
comment|// see what we get
name|Result
name|result
init|=
name|htable
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Row is deleted, but we get"
operator|+
name|result
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|result
operator|==
literal|null
operator|)
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resultScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests for hbase-2727.    * @throws Exception    * @see<a href="https://issues.apache.org/jira/browse/HBASE-2727">HBASE-2727</a>    */
annotation|@
name|Test
specifier|public
name|void
name|test2727
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test being able to have> 1 set of edits in the recovered.edits directory.
comment|// Ensure edits are replayed properly.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test2727"
argument_list|)
decl_stmt|;
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Region
name|region2
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region2
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|WAL
name|wal1
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
comment|// Add 1k to each family.
specifier|final
name|int
name|countPerFamily
init|=
literal|1000
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addWALEdits
argument_list|(
name|tableName
argument_list|,
name|hri
argument_list|,
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|ee
argument_list|,
name|wal1
argument_list|,
name|htd
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
block|}
name|wal1
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
comment|// Add 1k to each family.
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addWALEdits
argument_list|(
name|tableName
argument_list|,
name|hri
argument_list|,
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|ee
argument_list|,
name|wal2
argument_list|,
name|htd
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
block|}
name|wal2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|WAL
name|wal3
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal3
argument_list|)
decl_stmt|;
name|long
name|seqid
init|=
name|region
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
comment|// The regions opens with sequenceId as 1. With 6k edits, its sequence number reaches 6k + 1.
comment|// When opened, this region would apply 6k edits, and increment the sequenceId by 1
name|assertTrue
argument_list|(
name|seqid
operator|>
name|mvcc
operator|.
name|getWritePoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seqid
operator|-
literal|1
argument_list|,
name|mvcc
operator|.
name|getWritePoint
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"region.getOpenSeqNum(): "
operator|+
name|region
operator|.
name|getOpenSeqNum
argument_list|()
operator|+
literal|", wal3.id: "
operator|+
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Scan all.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|wal3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test case of HRegion that is only made out of bulk loaded files.  Assert    * that we don't 'crash'.    * @throws IOException    * @throws IllegalAccessException    * @throws NoSuchFieldException    * @throws IllegalArgumentException    * @throws SecurityException    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionMadeOfBulkLoadedFilesOnly
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRegionMadeOfBulkLoadedFilesOnly"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Region
name|region2
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region2
argument_list|)
expr_stmt|;
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"hfile"
argument_list|)
decl_stmt|;
name|HFileTestUtil
operator|.
name|createHFile
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fs
argument_list|,
name|f
argument_list|,
name|family
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|hfs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|hfs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|family
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|hfs
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Add an edit so something in the WAL
name|byte
index|[]
name|row
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|family
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|int
name|rowsInsertedCount
init|=
literal|11
decl_stmt|;
name|assertEquals
argument_list|(
name|rowsInsertedCount
argument_list|,
name|getScannedCount
argument_list|(
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now 'crash' the region by stealing its wal
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|runWALSplit
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|newConf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|newConf
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|newConf
argument_list|)
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid2
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowsInsertedCount
argument_list|,
name|getScannedCount
argument_list|(
name|region2
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// I can't close wal1.  Its been appropriated when we split.
name|region2
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal2
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * HRegion test case that is made of a major compacted HFile (created with three bulk loaded    * files) and an edit in the memstore.    * This is for HBASE-10958 "[dataloss] Bulk loading with seqids can prevent some log entries    * from being replayed"    * @throws IOException    * @throws IllegalAccessException    * @throws NoSuchFieldException    * @throws IllegalArgumentException    * @throws SecurityException    */
annotation|@
name|Test
specifier|public
name|void
name|testCompactedBulkLoadedFiles
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompactedBulkLoadedFiles"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region2
argument_list|)
expr_stmt|;
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Add an edit so something in the WAL
name|byte
index|[]
name|row
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|family
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|hfs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"hfile"
operator|+
name|i
argument_list|)
decl_stmt|;
name|HFileTestUtil
operator|.
name|createHFile
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fs
argument_list|,
name|f
argument_list|,
name|family
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|"00"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|"50"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|hfs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|family
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|hfs
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|int
name|rowsInsertedCount
init|=
literal|31
decl_stmt|;
name|assertEquals
argument_list|(
name|rowsInsertedCount
argument_list|,
name|getScannedCount
argument_list|(
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// major compact to turn all the bulk loaded files into one normal file
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowsInsertedCount
argument_list|,
name|getScannedCount
argument_list|(
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now 'crash' the region by stealing its wal
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|runWALSplit
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|newConf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|newConf
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|newConf
argument_list|)
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid2
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowsInsertedCount
argument_list|,
name|getScannedCount
argument_list|(
name|region2
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// I can't close wal1.  Its been appropriated when we split.
name|region2
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal2
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test writing edits into an HRegion, closing it, splitting logs, opening    * Region again.  Verify seqids.    * @throws IOException    * @throws IllegalAccessException    * @throws NoSuchFieldException    * @throws IllegalArgumentException    * @throws SecurityException    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsWrittenViaHRegion
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsWrittenViaHRegion"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families.  Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|long
name|seqid
init|=
name|region
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
comment|// If first, so we have at least one family w/ different seqid to rest.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now close the region (without flush), split the log, reopen the region and assert that
comment|// replay of log has the correct effect, that our seqids are calculated correctly so
comment|// all edits in logs are seen as 'stale'/old.
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid
operator|+
name|result
operator|.
name|size
argument_list|()
operator|<
name|seqid2
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result1b
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result1b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Next test.  Add more edits, then 'crash' this region by stealing its wal
comment|// out from under it and assert that replay of the log adds the edits back
comment|// correctly when region is opened again.
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region2
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
block|}
comment|// Get count of edits.
specifier|final
name|Result
name|result2
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wal2
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|runWALSplit
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|FileSystem
name|newFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
comment|// Make a new wal for new region open.
name|WAL
name|wal3
init|=
name|createWAL
argument_list|(
name|newConf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|countOfRestoredEdits
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
operator|new
name|HRegion
argument_list|(
name|basedir
argument_list|,
name|wal3
argument_list|,
name|newFS
argument_list|,
name|newConf
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|restoreEdit
parameter_list|(
name|HStore
name|s
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|MemStoreSizing
name|memstoreSizing
parameter_list|)
block|{
name|super
operator|.
name|restoreEdit
argument_list|(
name|s
argument_list|,
name|cell
argument_list|,
name|memstoreSizing
argument_list|)
expr_stmt|;
name|countOfRestoredEdits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|long
name|seqid3
init|=
name|region3
operator|.
name|initialize
argument_list|()
decl_stmt|;
name|Result
name|result3
init|=
name|region3
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// Assert that count of cells is same as before crash.
name|assertEquals
argument_list|(
name|result2
operator|.
name|size
argument_list|()
argument_list|,
name|result3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|countPerFamily
argument_list|,
name|countOfRestoredEdits
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// I can't close wal1.  Its been appropriated when we split.
name|region3
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal3
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we recover correctly when there is a failure in between the    * flushes. i.e. Some stores got flushed but others did not.    *    * Unfortunately, there is no easy hook to flush at a store level. The way    * we get around this is by flushing at the region level, and then deleting    * the recently flushed store file for one of the Stores. This would put us    * back in the situation where all but that store got flushed and the region    * died.    *    * We restart Region again, and verify that the edits were replayed.    *    * @throws IOException    * @throws IllegalAccessException    * @throws NoSuchFieldException    * @throws IllegalArgumentException    * @throws SecurityException    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsAfterPartialFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsWrittenViaHRegion"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families.  Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|long
name|seqid
init|=
name|region
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let us flush the region
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// delete the store files in the second column family to simulate a failure
comment|// in between the flushcache();
comment|// we have 3 families. killing the middle one ensures that taking the maximum
comment|// will make us fail.
name|int
name|cf_count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|cf_count
operator|++
expr_stmt|;
if|if
condition|(
name|cf_count
operator|==
literal|2
condition|)
block|{
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|deleteFamily
argument_list|(
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let us try to split and recover
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid
operator|+
name|result
operator|.
name|size
argument_list|()
operator|<
name|seqid2
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result1b
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result1b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// StoreFlusher implementation used in testReplayEditsAfterAbortingFlush.
comment|// Only throws exception if throwExceptionWhenFlushing is set true.
specifier|public
specifier|static
class|class
name|CustomStoreFlusher
extends|extends
name|DefaultStoreFlusher
block|{
comment|// Switch between throw and not throw exception in flush
specifier|static
specifier|final
name|AtomicBoolean
name|throwExceptionWhenFlushing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|CustomStoreFlusher
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|flushSnapshot
parameter_list|(
name|MemStoreSnapshot
name|snapshot
parameter_list|,
name|long
name|cacheFlushId
parameter_list|,
name|MonitoredTask
name|status
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwExceptionWhenFlushing
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Simulated exception by tests"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|flushSnapshot
argument_list|(
name|snapshot
argument_list|,
name|cacheFlushId
argument_list|,
name|status
argument_list|,
name|throughputController
argument_list|,
name|tracker
argument_list|)
return|;
block|}
block|}
comment|/**    * Test that we could recover the data correctly after aborting flush. In the    * test, first we abort flush after writing some data, then writing more data    * and flush again, at last verify the data.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsAfterAbortingFlush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsAfterAbortingFlush"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families. Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|RegionServerServices
name|rsServices
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rsServices
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|customConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|customConf
operator|.
name|set
argument_list|(
name|DefaultStoreEngine
operator|.
name|DEFAULT_STORE_FLUSHER_CLASS_KEY
argument_list|,
name|CustomStoreFlusher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|,
name|customConf
argument_list|,
name|rsServices
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|writtenRowCount
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|HColumnDescriptor
argument_list|>
name|families
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|htd
operator|.
name|getFamilies
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writtenRowCount
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|families
operator|.
name|get
argument_list|(
name|i
operator|%
name|families
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|writtenRowCount
argument_list|,
name|getScannedCount
argument_list|(
name|scanner
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let us flush the region
name|CustomStoreFlusher
operator|.
name|throwExceptionWhenFlushing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Injected exception hasn't been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected simulated exception when flushing region, {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulated to abort server
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|region
operator|.
name|setClosing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// region normally does not accept writes after
comment|// DroppedSnapshotException. We mock around it for this test.
block|}
comment|// writing more data
name|int
name|moreRow
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|writtenRowCount
init|;
name|i
operator|<
name|writtenRowCount
operator|+
name|moreRow
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|families
operator|.
name|get
argument_list|(
name|i
operator|%
name|families
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|writtenRowCount
operator|+=
name|moreRow
expr_stmt|;
comment|// call flush again
name|CustomStoreFlusher
operator|.
name|throwExceptionWhenFlushing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception when flushing region because server is stopped,"
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Let us try to split and recover
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|rsServices
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|region2
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenRowCount
argument_list|,
name|getScannedCount
argument_list|(
name|scanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getScannedCount
parameter_list|(
name|RegionScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|scannedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|existMore
init|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
name|scannedCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|existMore
condition|)
break|break;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|scannedCount
return|;
block|}
comment|/**    * Create an HRegion with the result of a WAL split and test we only see the    * good edits    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsWrittenIntoWAL
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsWrittenIntoWAL"
argument_list|)
decl_stmt|;
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic3FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region2
argument_list|)
expr_stmt|;
specifier|final
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|regionName
init|=
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
comment|// Add 1k to each family.
specifier|final
name|int
name|countPerFamily
init|=
literal|1000
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|familyNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addWALEdits
argument_list|(
name|tableName
argument_list|,
name|hri
argument_list|,
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|ee
argument_list|,
name|wal
argument_list|,
name|htd
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
name|familyNames
operator|.
name|add
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add a cache flush, shouldn't have any effect
name|wal
operator|.
name|startCacheFlush
argument_list|(
name|regionName
argument_list|,
name|familyNames
argument_list|)
expr_stmt|;
name|wal
operator|.
name|completeCacheFlush
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
comment|// Add an edit to another family, should be skipped.
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|ee
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"another family"
argument_list|)
argument_list|,
name|rowName
argument_list|,
name|now
argument_list|,
name|rowName
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|now
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|edit
argument_list|)
expr_stmt|;
comment|// Delete the c family to verify deletes make it over.
name|edit
operator|=
operator|new
name|WALEdit
argument_list|()
expr_stmt|;
name|now
operator|=
name|ee
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|now
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|edit
argument_list|)
expr_stmt|;
comment|// Sync.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// Make a new conf and a new fs for the splitter to run on so we can take
comment|// over old wal.
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
literal|".replay.wal.secondtime"
argument_list|)
decl_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|runWALSplit
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|FileSystem
name|newFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
comment|// 100k seems to make for about 4 flushes during HRegion#initialize.
name|newConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|1024
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|// Make a new wal for new region.
name|WAL
name|newWal
init|=
name|createWAL
argument_list|(
name|newConf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|flushcount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|HRegion
name|region
init|=
operator|new
name|HRegion
argument_list|(
name|basedir
argument_list|,
name|newWal
argument_list|,
name|newFS
argument_list|,
name|newConf
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FlushResultImpl
name|internalFlushcache
parameter_list|(
specifier|final
name|WAL
name|wal
parameter_list|,
specifier|final
name|long
name|myseqid
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|HStore
argument_list|>
name|storesToFlush
parameter_list|,
name|MonitoredTask
name|status
parameter_list|,
name|boolean
name|writeFlushWalMarker
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"InternalFlushCache Invoked"
argument_list|)
expr_stmt|;
name|FlushResultImpl
name|fs
init|=
name|super
operator|.
name|internalFlushcache
argument_list|(
name|wal
argument_list|,
name|myseqid
argument_list|,
name|storesToFlush
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|,
name|writeFlushWalMarker
argument_list|,
name|tracker
argument_list|)
decl_stmt|;
name|flushcount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|fs
return|;
block|}
block|}
decl_stmt|;
comment|// The seq id this region has opened up with
name|long
name|seqid
init|=
name|region
operator|.
name|initialize
argument_list|()
decl_stmt|;
comment|// The mvcc readpoint of from inserting data.
name|long
name|writePoint
init|=
name|mvcc
operator|.
name|getWritePoint
argument_list|()
decl_stmt|;
comment|// We flushed during init.
name|assertTrue
argument_list|(
literal|"Flushcount="
operator|+
name|flushcount
operator|.
name|get
argument_list|()
argument_list|,
name|flushcount
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|seqid
operator|-
literal|1
operator|)
operator|==
name|writePoint
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// Make sure we only see the good edits
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
operator|(
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|newWal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// the following test is for HBASE-6065
specifier|public
name|void
name|testSequentialEditLogSeqNum
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|currentTest
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getWALTableDir
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic1FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Mock the WAL
name|MockWAL
name|wal
init|=
name|createMockWAL
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Let us flush the region
comment|// But this time completeflushcache is not yet done
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
literal|5
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
name|long
name|lastestSeqNumber
init|=
name|region
operator|.
name|getReadPoint
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// get the current seq no
name|wal
operator|.
name|doCompleteCacheFlush
operator|=
literal|true
expr_stmt|;
comment|// allow complete cache flush with the previous seq number got after first
comment|// set of edits.
name|wal
operator|.
name|completeCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|listStatus
init|=
name|wal
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|listStatus
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listStatus
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|WALSplitter
operator|.
name|splitLogFile
argument_list|(
name|hbaseRootDir
argument_list|,
name|listStatus
index|[
literal|0
index|]
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listStatus1
init|=
name|this
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getWALTableDir
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|"recovered.edits"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|!
name|WALSplitUtil
operator|.
name|isSequenceIdFile
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|int
name|editCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|listStatus1
control|)
block|{
name|editCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The sequence number should be same
name|assertEquals
argument_list|(
literal|"The sequence number of the recoverd.edits and the current edit seq should be same"
argument_list|,
name|lastestSeqNumber
argument_list|,
name|editCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * testcase for https://issues.apache.org/jira/browse/HBASE-15252    */
annotation|@
name|Test
specifier|public
name|void
name|testDatalossWhenInputError
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testDatalossWhenInputError"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getWALTableDir
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic1FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region1
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|region1
operator|.
name|getWALRegionDir
argument_list|()
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region1
argument_list|)
expr_stmt|;
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now close the region (without flush), split the log, reopen the region and assert that
comment|// replay of log has the correct effect.
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|runWALSplit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// here we let the DFSInputStream throw an IOException just after the WALHeader.
name|Path
name|editFile
init|=
name|WALSplitUtil
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|regionDir
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stream
init|=
name|fs
operator|.
name|open
argument_list|(
name|editFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|ProtobufLogReader
operator|.
name|PB_WAL_MAGIC
operator|.
name|length
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AbstractFSWALProvider
operator|.
name|Reader
argument_list|>
name|logReaderClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|ProtobufLogReader
operator|.
name|class
argument_list|,
name|AbstractFSWALProvider
operator|.
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractFSWALProvider
operator|.
name|Reader
name|reader
init|=
name|logReaderClass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|reader
operator|.
name|init
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|editFile
argument_list|,
name|conf
argument_list|,
name|stream
argument_list|)
expr_stmt|;
specifier|final
name|long
name|headerLength
init|=
name|stream
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
name|spyFs
init|=
name|spy
argument_list|(
name|this
operator|.
name|fs
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|FSDataInputStream
name|stream
init|=
operator|(
name|FSDataInputStream
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|FilterInputStream
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"in"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DFSInputStream
name|in
init|=
operator|(
name|DFSInputStream
operator|)
name|field
operator|.
name|get
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|DFSInputStream
name|spyIn
init|=
name|spy
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|pos
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Integer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|pos
operator|>=
name|headerLength
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read over limit"
argument_list|)
throw|;
block|}
name|int
name|b
init|=
operator|(
name|Integer
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|b
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyIn
argument_list|)
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyIn
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|stream
argument_list|,
name|spyIn
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyFs
argument_list|)
operator|.
name|open
argument_list|(
name|eq
argument_list|(
name|editFile
argument_list|)
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
decl_stmt|;
try|try
block|{
comment|// log replay should fail due to the IOException, otherwise we may lose data.
name|region2
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|conf
argument_list|,
name|spyFs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"read over limit"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region2
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * testcase for https://issues.apache.org/jira/browse/HBASE-14949.    */
specifier|private
name|void
name|testNameConflictWhenSplit
parameter_list|(
name|boolean
name|largeFirst
parameter_list|)
throws|throws
name|IOException
throws|,
name|StreamLacksCapabilityException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReplayEditsWrittenIntoWAL"
argument_list|)
decl_stmt|;
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|createBasic3FamilyHRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|hbaseRootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createBasic1FamilyHTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|region
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|hbaseRootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|family
init|=
name|htd
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|FSWALEntry
name|entry1
init|=
name|createFSWALEntry
argument_list|(
name|htd
argument_list|,
name|hri
argument_list|,
literal|1L
argument_list|,
name|rowName
argument_list|,
name|family
argument_list|,
name|ee
argument_list|,
name|mvcc
argument_list|,
literal|1
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|FSWALEntry
name|entry2
init|=
name|createFSWALEntry
argument_list|(
name|htd
argument_list|,
name|hri
argument_list|,
literal|2L
argument_list|,
name|rowName
argument_list|,
name|family
argument_list|,
name|ee
argument_list|,
name|mvcc
argument_list|,
literal|2
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|Path
name|largeFile
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
literal|"wal-1"
argument_list|)
decl_stmt|;
name|Path
name|smallFile
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
literal|"wal-2"
argument_list|)
decl_stmt|;
name|writerWALFile
argument_list|(
name|largeFile
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entry1
argument_list|,
name|entry2
argument_list|)
argument_list|)
expr_stmt|;
name|writerWALFile
argument_list|(
name|smallFile
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entry2
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|first
decl_stmt|,
name|second
decl_stmt|;
if|if
condition|(
name|largeFirst
condition|)
block|{
name|first
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|largeFile
argument_list|)
expr_stmt|;
name|second
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|smallFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|smallFile
argument_list|)
expr_stmt|;
name|second
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|largeFile
argument_list|)
expr_stmt|;
block|}
name|WALSplitter
operator|.
name|splitLogFile
argument_list|(
name|hbaseRootDir
argument_list|,
name|first
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|WALSplitter
operator|.
name|splitLogFile
argument_list|(
name|hbaseRootDir
argument_list|,
name|second
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|region
operator|.
name|getOpenSeqNum
argument_list|()
operator|>
name|mvcc
operator|.
name|getWritePoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameConflictWhenSplit0
parameter_list|()
throws|throws
name|IOException
throws|,
name|StreamLacksCapabilityException
block|{
name|testNameConflictWhenSplit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameConflictWhenSplit1
parameter_list|()
throws|throws
name|IOException
throws|,
name|StreamLacksCapabilityException
block|{
name|testNameConflictWhenSplit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MockWAL
extends|extends
name|FSHLog
block|{
name|boolean
name|doCompleteCacheFlush
init|=
literal|false
decl_stmt|;
specifier|public
name|MockWAL
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|String
name|logName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completeCacheFlush
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|doCompleteCacheFlush
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|completeCacheFlush
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HTableDescriptor
name|createBasic1FamilyHTD
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|a
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
specifier|private
name|MockWAL
name|createMockWAL
parameter_list|()
throws|throws
name|IOException
block|{
name|MockWAL
name|wal
init|=
operator|new
name|MockWAL
argument_list|(
name|fs
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|wal
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// Set down maximum recovery so we dfsclient doesn't linger retrying something
comment|// long gone.
name|HBaseTestingUtility
operator|.
name|setMaxRecoveryErrorCount
argument_list|(
name|wal
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|wal
return|;
block|}
comment|// Flusher used in this test.  Keep count of how often we are called and
comment|// actually run the flush inside here.
specifier|static
class|class
name|TestFlusher
implements|implements
name|FlushRequester
block|{
specifier|private
name|HRegion
name|r
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|requestFlush
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|boolean
name|force
parameter_list|,
name|FlushLifeCycleTracker
name|tracker
parameter_list|)
block|{
try|try
block|{
name|r
operator|.
name|flush
argument_list|(
name|force
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception flushing"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requestDelayedFlush
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|long
name|when
parameter_list|,
name|boolean
name|forceFlushAllStores
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerFlushRequestListener
parameter_list|(
name|FlushRequestListener
name|listener
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|boolean
name|unregisterFlushRequestListener
parameter_list|(
name|FlushRequestListener
name|listener
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setGlobalMemStoreLimit
parameter_list|(
name|long
name|globalMemStoreSize
parameter_list|)
block|{      }
block|}
specifier|private
name|WALKeyImpl
name|createWALKey
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
block|{
return|return
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|999
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
return|;
block|}
specifier|private
name|WALEdit
name|createWALEdit
parameter_list|(
specifier|final
name|byte
index|[]
name|rowName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|EnvironmentEdge
name|ee
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|byte
index|[]
name|qualifierBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|qualifierBytes
argument_list|,
name|ee
operator|.
name|currentTime
argument_list|()
argument_list|,
name|columnBytes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|edit
return|;
block|}
specifier|private
name|FSWALEntry
name|createFSWALEntry
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|long
name|sequence
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|EnvironmentEdge
name|ee
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|int
name|index
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
throws|throws
name|IOException
block|{
name|FSWALEntry
name|entry
init|=
operator|new
name|FSWALEntry
argument_list|(
name|sequence
argument_list|,
name|createWALKey
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hri
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|createWALEdit
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|ee
argument_list|,
name|index
argument_list|)
argument_list|,
name|hri
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|entry
operator|.
name|stampRegionSequenceId
argument_list|(
name|mvcc
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|private
name|void
name|addWALEdits
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|byte
index|[]
name|rowName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
name|EnvironmentEdge
name|ee
parameter_list|,
specifier|final
name|WAL
name|wal
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
name|createWALKey
argument_list|(
name|tableName
argument_list|,
name|hri
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|createWALEdit
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|ee
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
specifier|static
name|List
argument_list|<
name|Put
argument_list|>
name|addRegionEdits
parameter_list|(
specifier|final
name|byte
index|[]
name|rowName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
name|EnvironmentEdge
name|ee
parameter_list|,
specifier|final
name|Region
name|r
parameter_list|,
specifier|final
name|String
name|qualifierPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifierPrefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ee
operator|.
name|currentTime
argument_list|()
argument_list|,
name|rowName
argument_list|)
expr_stmt|;
name|r
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
comment|/*    * Creates an HRI around an HTD that has<code>tableName</code> and three    * column families named 'a','b', and 'c'.    * @param tableName Name of table to use when we create HTableDescriptor.    */
specifier|private
name|HRegionInfo
name|createBasic3FamilyHRegionInfo
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * Run the split.  Verify only single split file made.    * @param c    * @return The single split file made    * @throws IOException    */
specifier|private
name|Path
name|runWALSplit
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
name|WALSplitter
operator|.
name|split
argument_list|(
name|hbaseRootDir
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|,
name|c
argument_list|,
name|wals
argument_list|)
decl_stmt|;
comment|// Split should generate only 1 file since there's only 1 region
name|assertEquals
argument_list|(
literal|"splits="
operator|+
name|splits
argument_list|,
literal|1
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the file exists
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Split file="
operator|+
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|HTableDescriptor
name|createBasic3FamilyHTD
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|a
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|b
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|c
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
specifier|private
name|void
name|writerWALFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|List
argument_list|<
name|FSWALEntry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
throws|,
name|StreamLacksCapabilityException
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|ProtobufLogWriter
name|writer
init|=
operator|new
name|ProtobufLogWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|,
name|WALUtil
operator|.
name|getWALBlockSize
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FSWALEntry
name|entry
range|:
name|entries
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|WAL
name|createWAL
parameter_list|(
name|Configuration
name|c
parameter_list|,
name|Path
name|hbaseRootDir
parameter_list|,
name|String
name|logName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

