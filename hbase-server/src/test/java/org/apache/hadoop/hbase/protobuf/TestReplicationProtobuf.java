begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationProtobuf
block|{
comment|/**    * Little test to check we can basically convert list of a list of KVs into a CellScanner    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetCellScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|akv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|akv
argument_list|)
expr_stmt|;
comment|// Add a few just to make it less regular.
name|a
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aa"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|b
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|bkv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|bkv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|ckv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|ckv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|all
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|CellScanner
name|scanner
init|=
name|ReplicationProtbufUtil
operator|.
name|getCellScanner
argument_list|(
name|all
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testAdvancetHasSameRow
argument_list|(
name|scanner
argument_list|,
name|akv
argument_list|)
expr_stmt|;
comment|// Skip over aa
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
comment|// Skip over aaa
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|testAdvancetHasSameRow
argument_list|(
name|scanner
argument_list|,
name|bkv
argument_list|)
expr_stmt|;
name|testAdvancetHasSameRow
argument_list|(
name|scanner
argument_list|,
name|ckv
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAdvancetHasSameRow
parameter_list|(
name|CellScanner
name|scanner
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scanner
operator|.
name|current
argument_list|()
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|scanner
operator|.
name|current
argument_list|()
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|scanner
operator|.
name|current
argument_list|()
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

