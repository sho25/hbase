begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBaseFsckTwoRS
extends|extends
name|BaseTestHBaseFsck
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|MasterSyncObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.metahandler.count"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hconnection.threads.max"
argument_list|,
literal|2
operator|*
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.close.timeout"
argument_list|,
literal|2
operator|*
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|8
operator|*
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tableExecutorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|POOL_SIZE
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"testhbck"
argument_list|)
argument_list|)
expr_stmt|;
name|hbfsckExecutorService
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|AssignmentManager
name|assignmentManager
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|regionStates
operator|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
expr_stmt|;
name|connection
operator|=
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|tableExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hbfsckExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFixAssignmentsWhenMETAinTransition
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|admin
operator|.
name|closeRegion
argument_list|(
name|cluster
operator|.
name|getServerHoldingMeta
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|regionOffline
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|deleteMetaLocation
argument_list|(
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|regionStates
operator|.
name|isRegionOnline
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNKNOWN
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_META_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NULL_META_REGION
block|}
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This create and fixes a bad table with regions that have a duplicate    * start key    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testDupeStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableDupeStartKey"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriDupe
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriDupe
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// seems like the "bigger" region won.
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This create and fixes a bad table with regions that have a duplicate    * start key    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testDupeRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableDupeRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriDupe
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriDupe
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
comment|// Yikes! The assignment manager can't tell between diff between two
comment|// different regions with the same start/endkeys since it doesn't
comment|// differentiate on ts/regionId!  We actually need to recheck
comment|// deployments!
while|while
condition|(
name|findDeployedHSI
argument_list|(
name|getDeployedHRIs
argument_list|(
name|admin
argument_list|)
argument_list|,
name|hriDupe
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished assignment of dupe region"
argument_list|)
expr_stmt|;
comment|// TODO why is dupe region different from dupe start keys?
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// seems like the "bigger" region won.
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table where a region is completely contained    * by another region.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testContainedRegionOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableContainedRegionOverlap"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriOverlap
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriOverlap
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test fixing lingering reference file.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testLingeringReferenceFile
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLingeringReferenceFile"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating a fake reference file
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|famDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|FAM_STR
argument_list|)
decl_stmt|;
name|Path
name|fakeReferenceFile
init|=
operator|new
name|Path
argument_list|(
name|famDir
argument_list|,
literal|"fbce357483ceea.12144538"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|fakeReferenceFile
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|LINGERING_REFERENCE_HFILE
block|}
argument_list|)
expr_stmt|;
comment|// fix reference file
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that reference file fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMetaOffline
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check no errors
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|deleteMetaRegion
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// ERROR_CODE.UNKNOWN is coming because we reportError with a message for the hbase:meta
comment|// inconsistency and whether we will be fixing it or not.
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_META_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNKNOWN
block|}
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_META_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNKNOWN
block|}
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
block|}
comment|/**    * This creates and fixes a bad table where an overlap group of    * 3 regions. Set HBaseFsck.maxMerge to 2 to trigger sideline overlapped    * region. Mess around the meta data so that closeRegion/offlineRegion    * throws exceptions.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSidelineOverlapRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSidelineOverlapRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hriOverlap1
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|hriOverlap1
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOverlap2
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AB"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|hriOverlap2
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// mess around the overlapped regions, to trigger NotServingRegionException
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|HBaseFsck
operator|.
name|HbckInfo
argument_list|>
name|overlapGroups
init|=
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HBaseFsck
operator|.
name|HbckInfo
name|hbi
range|:
name|overlapGroups
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|hbi
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
operator|&&
literal|"B"
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|hbi
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|regionName
operator|=
name|hbi
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
comment|// get an RS not serving the region to force bad assignment info in to META.
name|int
name|k
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|k
condition|)
block|{
name|HRegionServer
name|rs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|serverName
operator|=
name|rs
operator|.
name|getServerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|HBaseFsckRepair
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
name|connection
argument_list|,
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|k
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|hbi
operator|.
name|getHdfsHRI
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|offline
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverName
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// fix the problem.
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixAssignments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixMeta
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsHoles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsOverlaps
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsOrphans
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixVersionFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setSidelineBigOverlaps
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setMaxMerge
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that overlaps are fixed, and there are less rows
comment|// since one region is sidelined.
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|>
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHBaseFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableBadMetaAssign"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now let's mess it up and change the assignment in hbase:meta to
comment|// point to a different region server
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
operator|+
literal|",,"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|meta
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
literal|null
decl_stmt|;
name|Result
name|res
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|ServerName
name|currServer
init|=
name|ServerName
operator|.
name|parseFrom
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rs
range|:
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|ServerName
name|sn
init|=
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// When we find a diff RS, change the assignment and break
if|if
condition|(
operator|!
name|currServer
operator|.
name|getHostAndPort
argument_list|()
operator|.
name|equals
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
operator|||
name|startCode
operator|!=
name|sn
operator|.
name|getStartcode
argument_list|()
condition|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|hri
operator|=
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|res
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Try to fix the data
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|SERVER_DOES_NOT_MATCH_META
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// Should be fixed now
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// comment needed - what is the purpose of this line
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|,
name|tableExecutorService
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta and data present but    * .regioninfo missing (an orphan hdfs region)in the fs. At last we check every row was present    * at the correct region.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHDFSRegioninfoMissingAndCheckRegionBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHDFSRegioninfoMissingAndCheckRegionBoundary"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// check data belong to the correct region,every scan should get one row.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWKEYS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|ROWKEYS
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countRows
argument_list|(
name|ROWKEYS
index|[
name|i
index|]
argument_list|,
name|ROWKEYS
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countRows
argument_list|(
name|ROWKEYS
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

