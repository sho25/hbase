begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|MockMasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test CoreCoprocessor Annotation works giving access to facility not usually available.  * Test MasterCoprocessor.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCoreMasterCoprocessor
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCoreMasterCoprocessor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|MasterServices
name|ms
decl_stmt|;
specifier|private
name|MasterCoprocessorHost
name|mch
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|methodName
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|this
operator|.
name|ms
operator|=
operator|new
name|MockMasterServices
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|mch
operator|=
operator|new
name|MasterCoprocessorHost
argument_list|(
name|this
operator|.
name|ms
argument_list|,
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|mch
operator|.
name|preMasterInitialization
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|mch
operator|.
name|preStopMaster
argument_list|()
expr_stmt|;
block|}
comment|/**    * No annotation with CoreCoprocessor. This should make it so I can NOT get at instance of a    * MasterServices instance after some gymnastics.    */
specifier|public
specifier|static
class|class
name|NotCoreMasterCoprocessor
implements|implements
name|MasterCoprocessor
block|{
specifier|public
name|NotCoreMasterCoprocessor
parameter_list|()
block|{}
block|}
comment|/**    * Annotate with CoreCoprocessor. This should make it so I can get at instance of a    * MasterServices instance after some gymnastics.    */
annotation|@
name|CoreCoprocessor
specifier|public
specifier|static
class|class
name|CoreMasterCoprocessor
implements|implements
name|MasterCoprocessor
block|{
specifier|public
name|CoreMasterCoprocessor
parameter_list|()
block|{}
block|}
comment|/**    * Assert that when a Coprocessor is annotated with CoreCoprocessor, then it is possible to    * access a MasterServices instance. Assert the opposite too.    * Do it to MasterCoprocessors.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testCoreRegionCoprocessor
parameter_list|()
throws|throws
name|IOException
block|{
name|MasterCoprocessorEnvironment
name|env
init|=
name|this
operator|.
name|mch
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|NotCoreMasterCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|env
operator|instanceof
name|HasMasterServices
argument_list|)
expr_stmt|;
name|env
operator|=
name|this
operator|.
name|mch
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|CoreMasterCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|env
operator|instanceof
name|HasMasterServices
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|ms
argument_list|,
operator|(
operator|(
name|HasMasterServices
operator|)
name|env
operator|)
operator|.
name|getMasterServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

