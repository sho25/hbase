begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link TestRule} that clears all user namespaces and tables  * {@link ExternalResource#before() before} the test executes. Can be used in either the  * {@link Rule} or {@link ClassRule} positions. Lazily realizes the provided  * {@link AsyncConnection} so as to avoid initialization races with other {@link Rule Rules}.  *<b>Does not</b> {@link AsyncConnection#close() close()} provided connection instance when  * finished.  *</p>  * Use in combination with {@link MiniClusterRule} and {@link ConnectionRule}, for example:  *  *<pre>{@code  *   public class TestMyClass {  *     @ClassRule  *     public static final MiniClusterRule miniClusterRule = new MiniClusterRule();  *  *     private final ConnectionRule connectionRule =  *       new ConnectionRule(miniClusterRule::createConnection);  *     private final ClearUserNamespacesAndTablesRule clearUserNamespacesAndTablesRule =  *       new ClearUserNamespacesAndTablesRule(connectionRule::getConnection);  *  *     @Rule  *     public TestRule rule = RuleChain  *       .outerRule(connectionRule)  *       .around(clearUserNamespacesAndTablesRule);  *   }  * }</pre>  */
end_comment

begin_class
specifier|public
class|class
name|ClearUserNamespacesAndTablesRule
extends|extends
name|ExternalResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClearUserNamespacesAndTablesRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|AsyncConnection
argument_list|>
name|connectionSupplier
decl_stmt|;
specifier|private
name|AsyncAdmin
name|admin
decl_stmt|;
specifier|public
name|ClearUserNamespacesAndTablesRule
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|AsyncConnection
argument_list|>
name|connectionSupplier
parameter_list|)
block|{
name|this
operator|.
name|connectionSupplier
operator|=
name|connectionSupplier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|AsyncConnection
name|connection
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|connectionSupplier
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|clearTablesAndNamespaces
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|clearTablesAndNamespaces
parameter_list|()
block|{
return|return
name|deleteUserTables
argument_list|()
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|deleteUserNamespaces
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteUserTables
parameter_list|()
block|{
return|return
name|listTableNames
argument_list|()
operator|.
name|thenApply
argument_list|(
name|tableNames
lambda|->
name|tableNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|tableName
lambda|->
name|disableIfEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|deleteTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|CompletableFuture
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|CompletableFuture
operator|::
name|allOf
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNames
parameter_list|()
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|logger
operator|.
name|trace
argument_list|(
literal|"listing tables"
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|admin
operator|.
name|listTableNames
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|tableNames
lambda|->
block|{
lambda|if (logger.isTraceEnabled(
argument_list|)
block|)
block|{
specifier|final
name|StringJoiner
name|joiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|", "
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
decl_stmt|;
name|tableNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TableName
operator|::
name|getNameAsString
argument_list|)
operator|.
name|forEach
argument_list|(
name|joiner
operator|::
name|add
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"found existing tables {}"
argument_list|,
name|joiner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableEnabled
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|thenApply
argument_list|(
name|isEnabled
lambda|->
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"table {} is enabled."
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
name|isEnabled
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableIfEnabled
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|isEnabled
lambda|->
name|isEnabled
condition|?
name|disableTable
argument_list|(
name|tableName
argument_list|)
else|:
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|logger
operator|.
name|trace
argument_list|(
literal|"disabling enabled table {}"
argument_list|,
name|tableName
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|logger
operator|.
name|trace
argument_list|(
literal|"deleting disabled table {}"
argument_list|,
name|tableName
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listUserNamespaces
parameter_list|()
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|logger
operator|.
name|trace
argument_list|(
literal|"listing namespaces"
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
argument_list|)
operator|.
name|thenApply
argument_list|(
name|namespaceDescriptors
lambda|->
block|{
name|final
name|StringJoiner
name|joiner
operator|=
operator|new
name|StringJoiner
argument_list|(
literal|", "
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
argument_list|;
name|final
name|List
argument_list|<
name|String
argument_list|>
name|names
operator|=
name|namespaceDescriptors
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|NamespaceDescriptor
operator|::
name|getName
argument_list|)
operator|.
name|peek
argument_list|(
name|joiner
operator|::
name|add
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|;
name|logger
operator|.
name|trace
argument_list|(
literal|"found existing namespaces {}"
argument_list|,
name|joiner
argument_list|)
argument_list|;         return
name|names
argument_list|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|thenApply
argument_list|(
name|namespaces
lambda|->
name|namespaces
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|namespace
lambda|->
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|namespace
lambda|->
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|namespace
argument_list|,
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|logger
operator|.
name|trace
argument_list|(
literal|"deleting namespace {}"
argument_list|,
name|namespace
argument_list|)
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteUserNamespaces
parameter_list|()
block|{
return|return
name|listUserNamespaces
argument_list|()
operator|.
name|thenCompose
argument_list|(
name|namespaces
lambda|->
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|namespaces
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|deleteNamespace
argument_list|)
operator|.
name|toArray
argument_list|(
name|CompletableFuture
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

