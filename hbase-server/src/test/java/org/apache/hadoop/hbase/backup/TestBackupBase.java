begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupHandler
operator|.
name|BACKUPSTATUS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|regionserver
operator|.
name|LogRollRegionServerProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * This class is only a base for other integration-level backup tests.  * Do not add tests here.  * TestBackupSmallTests is where tests that don't require bring machines up/down should go  * All other tests should have their own classes and extend this one  */
end_comment

begin_class
specifier|public
class|class
name|TestBackupBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBackupBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf1
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf2
decl_stmt|;
specifier|protected
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|protected
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL2
decl_stmt|;
specifier|protected
specifier|static
name|TableName
name|table1
decl_stmt|;
specifier|protected
specifier|static
name|TableName
name|table2
decl_stmt|;
specifier|protected
specifier|static
name|TableName
name|table3
decl_stmt|;
specifier|protected
specifier|static
name|TableName
name|table4
decl_stmt|;
specifier|protected
specifier|static
name|String
name|table1_restore
init|=
literal|"table1_restore"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|table2_restore
init|=
literal|"table2_restore"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|table3_restore
init|=
literal|"table3_restore"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|table4_restore
init|=
literal|"table4_restore"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NB_ROWS_IN_BATCH
init|=
literal|100
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|qualName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|famName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|String
name|BACKUP_ROOT_DIR
init|=
literal|"/backupUT"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|BACKUP_REMOTE_ROOT_DIR
init|=
literal|"/backupUT"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BACKUP_ZNODE
init|=
literal|"/backup/hbase"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BACKUP_SUCCEED_NODE
init|=
literal|"complete"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BACKUP_FAILED_NODE
init|=
literal|"failed"
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.procedure.regionserver.classes"
argument_list|,
name|LogRollRegionServerProcedureManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.procedure.master.classes"
argument_list|,
name|LogRollMasterProcedureManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/1"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniZooKeeperCluster
name|miniZK
init|=
name|TEST_UTIL
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
name|conf1
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf2
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|TEST_UTIL2
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|TEST_UTIL2
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL2
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|conf1
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
name|BACKUP_ROOT_DIR
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.defaultFS"
argument_list|)
operator|+
literal|"/backupUT"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ROOTDIR "
operator|+
name|BACKUP_ROOT_DIR
argument_list|)
expr_stmt|;
name|BACKUP_REMOTE_ROOT_DIR
operator|=
name|TEST_UTIL2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.defaultFS"
argument_list|)
operator|+
literal|"/backupUT"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"REMOTE ROOTDIR "
operator|+
name|BACKUP_REMOTE_ROOT_DIR
argument_list|)
expr_stmt|;
name|BackupClient
operator|.
name|setConf
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|RestoreClient
operator|.
name|setConf
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotTestingUtils
operator|.
name|deleteAllSnapshots
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|deleteArchiveDirectory
argument_list|(
name|TEST_UTIL
argument_list|)
expr_stmt|;
comment|//zkw1.close();
name|TEST_UTIL2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|loadTable
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|p
decl_stmt|;
comment|// 100 + 1 row to t1_syncup
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|createTables
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|table1
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test-"
operator|+
name|tid
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|ha
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table1
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|famName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|ha
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
operator|(
name|HTable
operator|)
name|conn
operator|.
name|getTable
argument_list|(
name|table1
argument_list|)
decl_stmt|;
name|loadTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|table2
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test-"
operator|+
name|tid
operator|+
literal|1
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|ha
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|(
name|HTable
operator|)
name|conn
operator|.
name|getTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|loadTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|table3
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test-"
operator|+
name|tid
operator|+
literal|2
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table3
argument_list|,
name|famName
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|table4
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test-"
operator|+
name|tid
operator|+
literal|3
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table4
argument_list|,
name|famName
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|ha
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|checkSucceeded
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupContext
name|status
init|=
name|getBackupContext
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|status
operator|.
name|getFlag
argument_list|()
operator|==
name|BACKUPSTATUS
operator|.
name|COMPLETE
return|;
block|}
specifier|protected
name|boolean
name|checkFailed
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupContext
name|status
init|=
name|getBackupContext
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|status
operator|.
name|getFlag
argument_list|()
operator|==
name|BACKUPSTATUS
operator|.
name|FAILED
return|;
block|}
specifier|private
name|BackupContext
name|getBackupContext
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|BackupClient
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|BackupContext
name|status
init|=
name|table
operator|.
name|readBackupStatus
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

