begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Tests for the hdfs fix from HBASE-6435.  *  * Please don't add new subtest which involves starting / stopping MiniDFSCluster in this class.  * When stopping MiniDFSCluster, shutdown hooks would be cleared in hadoop's ShutdownHookManager  *   in hadoop 3.  * This leads to 'Failed suppression of fs shutdown hook' error in region server.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBlockReorderBlockLocation
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBlockReorderBlockLocation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|htu
decl_stmt|;
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host1
init|=
literal|"host1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host2
init|=
literal|"host2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host3
init|=
literal|"host3"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|htu
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// For the test with multiple blocks
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/r1"
block|,
literal|"/r2"
block|,
literal|"/r3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|host1
block|,
name|host2
block|,
name|host3
block|}
argument_list|)
expr_stmt|;
name|conf
operator|=
name|htu
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|htu
operator|.
name|getDFSCluster
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|htu
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClientProtocol
name|getNamenode
parameter_list|(
name|DFSClient
name|dfsc
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|nf
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"namenode"
argument_list|)
decl_stmt|;
name|nf
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|ClientProtocol
operator|)
name|nf
operator|.
name|get
argument_list|(
name|dfsc
argument_list|)
return|;
block|}
comment|/**    * Test that the reorder algo works as we expect.    */
annotation|@
name|Test
specifier|public
name|void
name|testBlockLocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We need to start HBase to get  HConstants.HBASE_DIR set in conf
name|htu
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniHBaseCluster
name|hbm
init|=
name|htu
operator|.
name|startMiniHBaseCluster
argument_list|()
decl_stmt|;
name|conf
operator|=
name|hbm
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// The "/" is mandatory, without it we've got a null pointer exception on the namenode
specifier|final
name|String
name|fileName
init|=
literal|"/helloWorld"
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|repCount
init|=
literal|3
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|short
operator|)
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|repCount
argument_list|)
expr_stmt|;
comment|// Let's write the file
name|FSDataOutputStream
name|fop
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
operator|(
name|short
operator|)
name|repCount
argument_list|)
decl_stmt|;
specifier|final
name|double
name|toWrite
init|=
literal|875.5613
decl_stmt|;
name|fop
operator|.
name|writeDouble
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|fop
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// The interceptor is not set in this test, so we get the raw list at this point
name|LocatedBlocks
name|l
decl_stmt|;
specifier|final
name|long
name|max
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
do|do
block|{
name|l
operator|=
name|getNamenode
argument_list|(
name|dfs
operator|.
name|getClient
argument_list|()
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|l
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expecting "
operator|+
name|repCount
operator|+
literal|" , got "
operator|+
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|max
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|!=
name|repCount
condition|)
do|;
comment|// Should be filtered, the name is different => The order won't change
name|Object
name|originalList
index|[]
init|=
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|HFileSystem
operator|.
name|ReorderWALBlocks
name|lrb
init|=
operator|new
name|HFileSystem
operator|.
name|ReorderWALBlocks
argument_list|()
decl_stmt|;
name|lrb
operator|.
name|reorderBlocks
argument_list|(
name|conf
argument_list|,
name|l
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|originalList
argument_list|,
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should be reordered, as we pretend to be a file name with a compliant stuff
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pseudoLogFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
operator|+
literal|"/"
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
operator|+
literal|"/"
operator|+
name|host1
operator|+
literal|",6977,6576"
operator|+
literal|"/mylogfile"
decl_stmt|;
comment|// Check that it will be possible to extract a ServerName from our construction
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"log= "
operator|+
name|pseudoLogFile
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
name|pseudoLogFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// And check we're doing the right reorder.
name|lrb
operator|.
name|reorderBlocks
argument_list|(
name|conf
argument_list|,
name|l
argument_list|,
name|pseudoLogFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|host1
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
literal|2
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check again, it should remain the same.
name|lrb
operator|.
name|reorderBlocks
argument_list|(
name|conf
argument_list|,
name|l
argument_list|,
name|pseudoLogFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|host1
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
literal|2
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

