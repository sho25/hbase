begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSHedgedReadMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test {@link FSUtils}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFSUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|fs
operator|=
name|htu
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|conf
operator|=
name|htu
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsHDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|FSUtils
operator|.
name|isHDFS
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|isHDFS
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|WriteDataToHDFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|dataSize
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataSize
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testcomputeHDFSBlocksDistribution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"dfs.blocksize"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|Path
name|testFile
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// set up a cluster with 3 nodes
name|String
name|hosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
name|cluster
operator|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a file with two blocks
name|testFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/test1.txt"
argument_list|)
expr_stmt|;
name|WriteDataToHDFS
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
literal|2
operator|*
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// given the default replication factor is 3, the same as the number of
comment|// datanodes; the locality index for each host should be 100%,
comment|// or getWeight for each host should be the same as getUniqueBlocksWeights
specifier|final
name|long
name|maxTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
do|do
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|HDFSBlocksDistribution
name|blocksDistribution
init|=
name|FSUtils
operator|.
name|computeHDFSBlocksDistribution
argument_list|(
name|fs
argument_list|,
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|uniqueBlocksTotalWeight
init|=
name|blocksDistribution
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|long
name|weight
init|=
name|blocksDistribution
operator|.
name|getWeight
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|ok
operator|=
operator|(
name|ok
operator|&&
name|uniqueBlocksTotalWeight
operator|==
name|weight
operator|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|ok
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|maxTime
condition|)
do|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|htu
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// set up a cluster with 4 nodes
name|String
name|hosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|,
literal|"host4"
block|}
decl_stmt|;
name|cluster
operator|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a file with three blocks
name|testFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/test2.txt"
argument_list|)
expr_stmt|;
name|WriteDataToHDFS
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
literal|3
operator|*
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// given the default replication factor is 3, we will have total of 9
comment|// replica of blocks; thus the host with the highest weight should have
comment|// weight == 3 * DEFAULT_BLOCK_SIZE
specifier|final
name|long
name|maxTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
name|long
name|weight
decl_stmt|;
name|long
name|uniqueBlocksTotalWeight
decl_stmt|;
do|do
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|HDFSBlocksDistribution
name|blocksDistribution
init|=
name|FSUtils
operator|.
name|computeHDFSBlocksDistribution
argument_list|(
name|fs
argument_list|,
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|uniqueBlocksTotalWeight
operator|=
name|blocksDistribution
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
expr_stmt|;
name|String
name|tophost
init|=
name|blocksDistribution
operator|.
name|getTopHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|weight
operator|=
name|blocksDistribution
operator|.
name|getWeight
argument_list|(
name|tophost
argument_list|)
expr_stmt|;
comment|// NameNode is informed asynchronously, so we may have a delay. See HBASE-6175
block|}
do|while
condition|(
name|uniqueBlocksTotalWeight
operator|!=
name|weight
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|maxTime
condition|)
do|;
name|assertTrue
argument_list|(
name|uniqueBlocksTotalWeight
operator|==
name|weight
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|htu
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// set up a cluster with 4 nodes
name|String
name|hosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|,
literal|"host4"
block|}
decl_stmt|;
name|cluster
operator|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a file with one block
name|testFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/test3.txt"
argument_list|)
expr_stmt|;
name|WriteDataToHDFS
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// given the default replication factor is 3, we will have total of 3
comment|// replica of blocks; thus there is one host without weight
specifier|final
name|long
name|maxTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
name|HDFSBlocksDistribution
name|blocksDistribution
decl_stmt|;
do|do
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|blocksDistribution
operator|=
name|FSUtils
operator|.
name|computeHDFSBlocksDistribution
argument_list|(
name|fs
argument_list|,
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// NameNode is informed asynchronously, so we may have a delay. See HBASE-6175
block|}
do|while
condition|(
name|blocksDistribution
operator|.
name|getTopHosts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|3
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|maxTime
condition|)
do|;
name|assertEquals
argument_list|(
literal|"Wrong number of hosts distributing blocks."
argument_list|,
literal|3
argument_list|,
name|blocksDistribution
operator|.
name|getTopHosts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|htu
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|DeserializationException
throws|,
name|IOException
block|{
specifier|final
name|Path
name|rootdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|FSUtils
operator|.
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write out old format version file.  See if we can read it in and convert.
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s
init|=
name|fs
operator|.
name|create
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
specifier|final
name|String
name|version
init|=
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
decl_stmt|;
name|s
operator|.
name|writeUTF
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|versionFile
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|newVersion
init|=
name|FSUtils
operator|.
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version
operator|.
name|length
argument_list|()
argument_list|,
name|newVersion
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|newVersion
argument_list|)
expr_stmt|;
comment|// File will have been converted. Exercise the pb format
name|assertEquals
argument_list|(
name|version
argument_list|,
name|FSUtils
operator|.
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermMask
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|rootdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// default fs permission
name|FsPermission
name|defaultFsPerm
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// 'hbase.data.umask.enable' is false. We will get default fs permission.
name|assertEquals
argument_list|(
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|defaultFsPerm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_DATA_FILE_UMASK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// first check that we don't crash if we don't have perms set
name|FsPermission
name|defaultStartPerm
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// default 'hbase.data.umask'is 000, and this umask will be used when
comment|// 'hbase.data.umask.enable' is true.
comment|// Therefore we will not get the real fs default in this case.
comment|// Instead we will get the starting point FULL_RWX_PERMISSIONS
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|FSUtils
operator|.
name|FULL_RWX_PERMISSIONS
argument_list|)
argument_list|,
name|defaultStartPerm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
comment|// now check that we get the right perms
name|FsPermission
name|filePerm
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|,
name|filePerm
argument_list|)
expr_stmt|;
comment|// then that the correct file is created
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|out
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
name|filePerm
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
comment|// and then cleanup
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteAndExists
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|rootdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_DATA_FILE_UMASK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FsPermission
name|perms
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// then that the correct file is created
name|String
name|file
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"temptarget"
operator|+
name|File
operator|.
name|separator
operator|+
name|file
argument_list|)
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"temppath"
operator|+
name|File
operator|.
name|separator
operator|+
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|out
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
name|perms
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The created file should be present"
argument_list|,
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the file with recursion as false. Only the file will be deleted.
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create another file
name|FSDataOutputStream
name|out1
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|p1
argument_list|,
name|perms
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// delete the file with recursion as false. Still the file only will be deleted
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The created file should be present"
argument_list|,
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then cleanup
block|}
finally|finally
block|{
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilteredStatusDoesNotThrowOnNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|assertNull
argument_list|(
name|FSUtils
operator|.
name|listStatusWithStatusFilter
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"definitely/doesn't/exist"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameAndSetModifyTime
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|isHDFS
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
name|htu
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testArchiveFile"
argument_list|)
decl_stmt|;
name|String
name|file
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The created file should be present"
argument_list|,
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|expect
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
decl_stmt|;
name|assertNotEquals
argument_list|(
name|expect
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|ManualEnvironmentEdge
name|mockEnv
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|mockEnv
operator|.
name|setValue
argument_list|(
name|expect
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|mockEnv
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dstFile
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|dstFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The moved file should not be present"
argument_list|,
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The dst file should be present"
argument_list|,
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetStoragePolicyDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyFileInDirWithStoragePolicy
argument_list|(
name|HConstants
operator|.
name|DEFAULT_WAL_STORAGE_POLICY
argument_list|)
expr_stmt|;
block|}
comment|/* might log a warning, but still work. (always warning on Hadoop< 2.6.0) */
annotation|@
name|Test
specifier|public
name|void
name|testSetStoragePolicyValidButMaybeNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyFileInDirWithStoragePolicy
argument_list|(
literal|"ALL_SSD"
argument_list|)
expr_stmt|;
block|}
comment|/* should log a warning, but still work. (different warning on Hadoop< 2.6.0) */
annotation|@
name|Test
specifier|public
name|void
name|testSetStoragePolicyInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyFileInDirWithStoragePolicy
argument_list|(
literal|"1772"
argument_list|)
expr_stmt|;
block|}
comment|// Here instead of TestCommonFSUtils because we need a minicluster
specifier|private
name|void
name|verifyFileInDirWithStoragePolicy
parameter_list|(
specifier|final
name|String
name|policy
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|WAL_STORAGE_POLICY
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|isHDFS
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
name|htu
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testArchiveFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setStoragePolicy
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|testDir
argument_list|,
name|HConstants
operator|.
name|WAL_STORAGE_POLICY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_WAL_STORAGE_POLICY
argument_list|)
expr_stmt|;
name|String
name|file
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|WriteDataToHDFS
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
comment|// will assert existance before deleting.
name|cleanupFile
argument_list|(
name|fs
argument_list|,
name|testDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Ugly test that ensures we can get at the hedged read counters in dfsclient.    * Does a bit of preading with hedged reads enabled using code taken from hdfs TestPread.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testDFSHedgedReadMetrics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable hedged reads and set it so the threshold is really low.
comment|// Most of this test is taken from HDFS, from TestPread.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DFSCLIENT_HEDGED_READ_THREADPOOL_SIZE
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DFSCLIENT_HEDGED_READ_THRESHOLD_MILLIS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_PREFETCH_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_WINDOW_BASE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.datanode.transferTo.allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Get the metrics.  Should be empty.
name|DFSHedgedReadMetrics
name|metrics
init|=
name|FSUtils
operator|.
name|getDFSHedgedReadMetrics
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getHedgedReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"preadtest.dat"
argument_list|)
decl_stmt|;
comment|// We need> 1 blocks to test out the hedged reads.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|p
argument_list|,
literal|12
operator|*
name|blockSize
argument_list|,
literal|12
operator|*
name|blockSize
argument_list|,
name|blockSize
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|pReadFile
argument_list|(
name|fileSys
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getHedgedReadOps
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Below is taken from TestPread over in HDFS.
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
specifier|private
name|void
name|pReadFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|12
operator|*
name|blockSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// do a sanity check. Read first 4K bytes
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|"Read Sanity Test"
argument_list|)
expr_stmt|;
comment|// now do a pread for the first 8K bytes
name|actual
operator|=
operator|new
name|byte
index|[
literal|8192
index|]
expr_stmt|;
name|doPread
argument_list|(
name|stm
argument_list|,
literal|0L
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 1"
argument_list|)
expr_stmt|;
comment|// Now check to see if the normal read returns 4K-8K byte range
name|actual
operator|=
operator|new
name|byte
index|[
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|4096
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 2"
argument_list|)
expr_stmt|;
comment|// Now see if we can cross a single block boundary successfully
comment|// read 4K bytes from blockSize - 2K offset
name|stm
operator|.
name|readFully
argument_list|(
name|blockSize
operator|-
literal|2048
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
operator|(
name|blockSize
operator|-
literal|2048
operator|)
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 3"
argument_list|)
expr_stmt|;
comment|// now see if we can cross two block boundaries successfully
comment|// read blockSize + 4K bytes from blockSize - 2K offset
name|actual
operator|=
operator|new
name|byte
index|[
name|blockSize
operator|+
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|blockSize
operator|-
literal|2048
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
operator|(
name|blockSize
operator|-
literal|2048
operator|)
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 4"
argument_list|)
expr_stmt|;
comment|// now see if we can cross two block boundaries that are not cached
comment|// read blockSize + 4K bytes from 10*blockSize - 2K offset
name|actual
operator|=
operator|new
name|byte
index|[
name|blockSize
operator|+
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|10
operator|*
name|blockSize
operator|-
literal|2048
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
operator|(
literal|10
operator|*
name|blockSize
operator|-
literal|2048
operator|)
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 5"
argument_list|)
expr_stmt|;
comment|// now check that even after all these preads, we can still read
comment|// bytes 8K-12K
name|actual
operator|=
operator|new
name|byte
index|[
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|8192
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 6"
argument_list|)
expr_stmt|;
comment|// done
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check block location caching
name|stm
operator|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|1
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|4
operator|*
name|blockSize
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|7
operator|*
name|blockSize
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|actual
operator|=
operator|new
name|byte
index|[
literal|3
operator|*
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|0
operator|*
name|blockSize
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|3
operator|*
literal|4096
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 7"
argument_list|)
expr_stmt|;
name|actual
operator|=
operator|new
name|byte
index|[
literal|8
operator|*
literal|4096
index|]
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|3
operator|*
name|blockSize
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
literal|4096
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|3
operator|*
name|blockSize
argument_list|,
name|expected
argument_list|,
literal|"Pread Test 8"
argument_list|)
expr_stmt|;
comment|// read the tail
name|stm
operator|.
name|readFully
argument_list|(
literal|11
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|2
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|blockSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|IOException
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// read beyond the end of the file
name|stm
operator|.
name|readFully
argument_list|(
literal|11
operator|*
name|blockSize
operator|+
name|blockSize
operator|/
literal|2
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should throw an exception
name|res
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Error reading beyond file boundary."
argument_list|,
name|res
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkAndEraseData
parameter_list|(
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|from
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|actual
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|message
operator|+
literal|" byte "
operator|+
operator|(
name|from
operator|+
name|idx
operator|)
operator|+
literal|" differs. expected "
operator|+
name|expected
index|[
name|from
operator|+
name|idx
index|]
operator|+
literal|" actual "
operator|+
name|actual
index|[
name|idx
index|]
argument_list|,
name|actual
index|[
name|idx
index|]
argument_list|,
name|expected
index|[
name|from
operator|+
name|idx
index|]
argument_list|)
expr_stmt|;
name|actual
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doPread
parameter_list|(
name|FSDataInputStream
name|stm
parameter_list|,
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nread
init|=
literal|0
decl_stmt|;
comment|// long totalRead = 0;
comment|// DFSInputStream dfstm = null;
comment|/* Disable. This counts do not add up. Some issue in original hdfs tests?     if (stm.getWrappedStream() instanceof DFSInputStream) {       dfstm = (DFSInputStream) (stm.getWrappedStream());       totalRead = dfstm.getReadStatistics().getTotalBytesRead();     } */
while|while
condition|(
name|nread
operator|<
name|length
condition|)
block|{
name|int
name|nbytes
init|=
name|stm
operator|.
name|read
argument_list|(
name|position
operator|+
name|nread
argument_list|,
name|buffer
argument_list|,
name|offset
operator|+
name|nread
argument_list|,
name|length
operator|-
name|nread
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Error in pread"
argument_list|,
name|nbytes
operator|>
literal|0
argument_list|)
expr_stmt|;
name|nread
operator|+=
name|nbytes
expr_stmt|;
block|}
comment|/* Disable. This counts do not add up. Some issue in original hdfs tests?     if (dfstm != null) {       if (isHedgedRead) {         assertTrue("Expected read statistic to be incremented",           length<= dfstm.getReadStatistics().getTotalBytesRead() - totalRead);       } else {         assertEquals("Expected read statistic to be incremented", length, dfstm             .getReadStatistics().getTotalBytesRead() - totalRead);       }     }*/
block|}
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|boolean
name|STREAM_CAPABILITIES_IS_PRESENT
decl_stmt|;
static|static
block|{
name|boolean
name|tmp
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.StreamCapabilities"
argument_list|)
expr_stmt|;
name|tmp
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test thought StreamCapabilities class was present."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test didn't think StreamCapabilities class was present."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|STREAM_CAPABILITIES_IS_PRESENT
operator|=
name|tmp
expr_stmt|;
block|}
block|}
comment|// Here instead of TestCommonFSUtils because we need a minicluster
annotation|@
name|Test
specifier|public
name|void
name|checkStreamCapabilitiesOnHdfsDataOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|FileSystem
name|filesystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
init|)
block|{
name|FSDataOutputStream
name|stream
init|=
name|filesystem
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"hsync"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"hflush"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"We expect HdfsDataOutputStream to say it has a dummy capability iff the "
operator|+
literal|"StreamCapabilities class is not defined."
argument_list|,
name|STREAM_CAPABILITIES_IS_PRESENT
argument_list|,
name|FSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"a capability that hopefully HDFS doesn't add."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

