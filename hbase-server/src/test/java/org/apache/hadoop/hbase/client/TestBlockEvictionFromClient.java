begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CachedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CombinedBlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestBlockEvictionFromClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockEvictionFromClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
specifier|private
specifier|static
name|int
name|NO_OF_THREADS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|FAMILIES_1
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|int
name|SLAVES
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|CountDownLatch
name|latch
decl_stmt|;
specifier|private
specifier|static
name|CountDownLatch
name|getLatch
decl_stmt|;
specifier|private
specifier|static
name|CountDownLatch
name|compactionLatch
decl_stmt|;
specifier|private
specifier|static
name|CountDownLatch
name|exceptionLatch
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ROWS
index|[
literal|0
index|]
operator|=
name|ROW
expr_stmt|;
name|ROWS
index|[
literal|1
index|]
operator|=
name|ROW1
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.table.sanity.checks"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable for below
comment|// tests
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.bucketcache.size"
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"hbase.bucketcache.ioengine"
argument_list|,
literal|"offheap"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hfile.block.cache.size"
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.regionserver.global.memstore.size"
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// do not retry
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|FAMILIES_1
index|[
literal|0
index|]
operator|=
name|FAMILY
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|countOfNext
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|countOfGets
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getLatch
operator|!=
literal|null
condition|)
block|{
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compactionLatch
operator|!=
literal|null
condition|)
block|{
name|compactionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exceptionLatch
operator|!=
literal|null
condition|)
block|{
name|exceptionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|latch
operator|=
literal|null
expr_stmt|;
name|getLatch
operator|=
literal|null
expr_stmt|;
name|compactionLatch
operator|=
literal|null
expr_stmt|;
name|exceptionLatch
operator|=
literal|null
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|throwException
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Clean up the tables for every test case
name|TableName
index|[]
name|listTableNames
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|listTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|listTableNames
control|)
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockEvictionWithParallelScans
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testBlockEvictionWithParallelScans"
argument_list|)
decl_stmt|;
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// insert data. 2 Rows are added
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// data was in memstore so don't expect any changes
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache in problematic area"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Load cache
comment|// Create three sets of scan
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// CustomInnerRegionObserver.sleepTime.set(0);
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// Check how this miss is happening
comment|// insert a second column, read the row, no new blocks, 3 new hits
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// compact, net minus two blocks, two hits, no misses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// read the row, this should be a cache miss because we don't cache data
comment|// blocks on compaction
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelGetsAndScans
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testParallelGetsAndScans"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|insertData
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create three sets of scan
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create three sets of gets
name|GetThread
index|[]
name|getThreads
init|=
name|initiateGet
argument_list|(
name|table
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Verify whether the gets have returned the blocks that it had
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// giving some time for the block to be decremented
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Scans should have returned the bloks"
argument_list|)
expr_stmt|;
comment|// Check with either true or false
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// The scan should also have released the blocks by now
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithCellsInDifferentFiles
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testGetWithCellsInDifferentFiles"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create three sets of gets
name|GetThread
index|[]
name|getThreads
init|=
name|initiateGet
argument_list|(
name|table
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Verify whether the gets have returned the blocks that it had
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// giving some time for the block to be decremented
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gets should have returned the bloks"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
comment|// TODO : check how block index works here
specifier|public
name|void
name|testGetsWithMultiColumnsAndExplicitTracker
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testGetsWithMultiColumnsAndExplicitTracker"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|BlockCache
name|cache
init|=
name|setCacheProperties
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
name|i
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create three sets of gets
name|GetThread
index|[]
name|getThreads
init|=
name|initiateGet
argument_list|(
name|table
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|int
name|noOfBlocksWithRef
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The refCount is "
operator|+
name|refCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
name|noOfBlocksWithRef
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// the number of blocks referred
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|noOfBlocksWithRef
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Verify whether the gets have returned the blocks that it had
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// giving some time for the block to be decremented
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gets should have returned the bloks"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithMultipleColumnFamilies
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testGetWithMultipleColumnFamilies"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|byte
index|[]
index|[]
name|fams
init|=
operator|new
name|byte
index|[
literal|10
index|]
index|[]
decl_stmt|;
name|fams
index|[
literal|0
index|]
operator|=
name|FAMILY
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|fams
index|[
name|i
index|]
operator|=
operator|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
name|i
argument_list|)
operator|)
expr_stmt|;
block|}
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|fams
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|BlockCache
name|cache
init|=
name|setCacheProperties
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
name|i
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create three sets of gets
name|GetThread
index|[]
name|getThreads
init|=
name|initiateGet
argument_list|(
name|table
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|int
name|noOfBlocksWithRef
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The refCount is "
operator|+
name|refCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
name|noOfBlocksWithRef
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// the number of blocks referred
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|noOfBlocksWithRef
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Verify whether the gets have returned the blocks that it had
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// giving some time for the block to be decremented
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gets should have returned the bloks"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockRefCountAfterSplits
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testBlockRefCountAfterSplits"
argument_list|)
decl_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|ROW1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Wait for splits
while|while
condition|(
name|tableRegions
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|tableRegions
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Though the split had created the HalfStorefileReader - the firstkey and lastkey scanners
comment|// should be closed inorder to return those blocks
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiGets
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMultiGets"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create three sets of gets
name|MultiGetThread
index|[]
name|getThreads
init|=
name|initiateMultiGet
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|int
name|refCount
decl_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|foundNonZeroBlock
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|foundNonZeroBlock
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Should have found nonzero ref count block"
argument_list|,
name|foundNonZeroBlock
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|MultiGetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Verify whether the gets have returned the blocks that it had
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// giving some time for the block to be decremented
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gets should have returned the bloks"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithMultipleColumnFamilies
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testScanWithMultipleColumnFamilies"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|byte
index|[]
index|[]
name|fams
init|=
operator|new
name|byte
index|[
literal|10
index|]
index|[]
decl_stmt|;
name|fams
index|[
literal|0
index|]
operator|=
name|FAMILY
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|fams
index|[
name|i
index|]
operator|=
operator|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
name|i
argument_list|)
operator|)
expr_stmt|;
block|}
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|fams
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|BlockCache
name|cache
init|=
name|setCacheProperties
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
name|i
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
comment|// Create three sets of gets
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|int
name|noOfBlocksWithRef
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The refCount is "
operator|+
name|refCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
name|noOfBlocksWithRef
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// the number of blocks referred
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|noOfBlocksWithRef
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// giving some time for the block to be decremented
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|BlockCache
name|setCacheProperties
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Store
argument_list|>
name|strItr
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BlockCache
name|cache
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|strItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Store
name|store
init|=
name|strItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Use the last one
name|cache
operator|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelGetsAndScanWithWrappedRegionScanner
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Check if get() returns blocks on its close() itself
name|getLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testParallelGetsAndScanWithWrappedRegionScanner"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserverWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// insert data. 2 Rows are added
name|insertData
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// CustomInnerRegionObserver.sleepTime.set(5000);
comment|// Create three sets of scan
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create three sets of gets
name|GetThread
index|[]
name|getThreads
init|=
name|initiateGet
argument_list|(
name|table
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The block would have been decremented for the scan case as it was
comment|// wrapped
comment|// before even the postNext hook gets executed.
comment|// giving some time for the block to be decremented
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkForBlockEviction
argument_list|(
name|cache
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// countdown the latch
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|getLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithCompaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testScanWithCompactionInternals
argument_list|(
literal|"testScanWithCompaction"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverseScanWithCompaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testScanWithCompactionInternals
argument_list|(
literal|"testReverseScanWithCompaction"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testScanWithCompactionInternals
parameter_list|(
name|String
name|tableNameStr
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|compactionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameStr
argument_list|)
decl_stmt|;
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserverWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// insert data. 2 Rows are added
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|int
name|refCount
init|=
literal|0
decl_stmt|;
comment|// Check how this miss is happening
comment|// insert a second column, read the row, no new blocks, 3 new hits
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// Create three sets of scan
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
name|reversed
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Blocks with non zero ref count should be found "
argument_list|,
name|usedBlocksFound
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Even after compaction is done we will have some blocks that cannot
comment|// be evicted this is because the scan is still referencing them
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3 as they are not yet cleared
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Blocks with non zero ref count should be found "
argument_list|,
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// Should not throw exception
name|compactionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// by this time all blocks should have been evicted
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The gets would be working on new blocks
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockEvictionAfterHBASE13082WithCompactionAndFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// do flush and scan in parallel
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|compactionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testBlockEvictionAfterHBASE13082WithCompactionAndFlush"
argument_list|)
decl_stmt|;
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserverWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// insert data. 2 Rows are added
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|int
name|refCount
init|=
literal|0
decl_stmt|;
comment|// Check how this miss is happening
comment|// insert a second column, read the row, no new blocks, 3 new hits
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
comment|// Create three sets of scan
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Make a put and do a flush
name|QUALIFIER2
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|data2
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Blocks with non zero ref count should be found "
argument_list|,
name|usedBlocksFound
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Even after compaction is done we will have some blocks that cannot
comment|// be evicted this is because the scan is still referencing them
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3 as they are not yet cleared
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Blocks with non zero ref count should be found "
argument_list|,
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// Should not throw exception
name|compactionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// by this time all blocks should have been evicted
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
comment|// Since a flush and compaction happened after a scan started
comment|// we need to ensure that all the original blocks of the compacted file
comment|// is also removed.
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The gets would be working on new blocks
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterateBlockCache
argument_list|(
name|cache
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|exceptionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testScanWithException"
argument_list|)
decl_stmt|;
comment|// Create KV that will give you two blocks
comment|// Create a table with block size as 1024
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES_1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|CustomInnerRegionObserverWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the block cache and region
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// insert data. 2 Rows are added
name|insertData
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
comment|// Should create one Hfile with 2 blocks
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// CustomInnerRegionObserver.sleepTime.set(5000);
name|CustomInnerRegionObserver
operator|.
name|throwException
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ScanThread
index|[]
name|scanThreads
init|=
name|initiateScan
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The block would have been decremented for the scan case as it was
comment|// wrapped
comment|// before even the postNext hook gets executed.
comment|// giving some time for the block to be decremented
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|usedBlocksFound
init|=
literal|false
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|usedBlocksFound
argument_list|)
expr_stmt|;
name|exceptionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// countdown the latch
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|usedBlocksFound
operator|=
literal|false
expr_stmt|;
name|refCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Blocks will be with count 3
name|assertEquals
argument_list|(
name|NO_OF_THREADS
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
name|usedBlocksFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|usedBlocksFound
argument_list|)
expr_stmt|;
comment|// Sleep till the scan lease would expire? Can we reduce this value?
name|Thread
operator|.
name|sleep
argument_list|(
literal|5100
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|refCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateBlockCache
parameter_list|(
name|BlockCache
name|cache
parameter_list|,
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
parameter_list|)
block|{
name|int
name|refCount
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|insertData
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ScanThread
index|[]
name|initiateScan
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|reverse
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ScanThread
index|[]
name|scanThreads
init|=
operator|new
name|ScanThread
index|[
name|NO_OF_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NO_OF_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|scanThreads
index|[
name|i
index|]
operator|=
operator|new
name|ScanThread
argument_list|(
name|table
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScanThread
name|thread
range|:
name|scanThreads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|scanThreads
return|;
block|}
specifier|private
name|GetThread
index|[]
name|initiateGet
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|tracker
parameter_list|,
name|boolean
name|multipleCFs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|GetThread
index|[]
name|getThreads
init|=
operator|new
name|GetThread
index|[
name|NO_OF_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NO_OF_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|getThreads
index|[
name|i
index|]
operator|=
operator|new
name|GetThread
argument_list|(
name|table
argument_list|,
name|tracker
argument_list|,
name|multipleCFs
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GetThread
name|thread
range|:
name|getThreads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|getThreads
return|;
block|}
specifier|private
name|MultiGetThread
index|[]
name|initiateMultiGet
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MultiGetThread
index|[]
name|multiGetThreads
init|=
operator|new
name|MultiGetThread
index|[
name|NO_OF_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NO_OF_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|multiGetThreads
index|[
name|i
index|]
operator|=
operator|new
name|MultiGetThread
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MultiGetThread
name|thread
range|:
name|multiGetThreads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|multiGetThreads
return|;
block|}
specifier|private
name|void
name|checkForBlockEviction
parameter_list|(
name|BlockCache
name|cache
parameter_list|,
name|boolean
name|getClosed
parameter_list|,
name|boolean
name|expectOnlyZero
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|counter
init|=
name|NO_OF_THREADS
decl_stmt|;
if|if
condition|(
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Because only one row is selected, it has only 2 blocks
name|counter
operator|=
name|counter
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|CustomInnerRegionObserver
operator|.
name|countOfGets
operator|.
name|get
argument_list|()
operator|<
name|NO_OF_THREADS
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|CustomInnerRegionObserver
operator|.
name|countOfNext
operator|.
name|get
argument_list|()
operator|<
name|NO_OF_THREADS
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|next
operator|.
name|getFilename
argument_list|()
argument_list|,
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|BucketCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|BucketCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
operator|instanceof
name|CombinedBlockCache
condition|)
block|{
name|refCount
operator|=
operator|(
operator|(
name|CombinedBlockCache
operator|)
name|cache
operator|)
operator|.
name|getRefCount
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" the refcount is "
operator|+
name|refCount
operator|+
literal|" block is "
operator|+
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|CustomInnerRegionObserver
operator|.
name|waitForGets
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|expectOnlyZero
condition|)
block|{
name|assertTrue
argument_list|(
name|refCount
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
comment|// Because the scan would have also touched up on these blocks but
comment|// it
comment|// would have touched
comment|// all 3
if|if
condition|(
name|getClosed
condition|)
block|{
comment|// If get has closed only the scan's blocks would be available
name|assertEquals
argument_list|(
name|refCount
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|countOfGets
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|refCount
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|countOfGets
operator|.
name|get
argument_list|()
operator|+
operator|(
name|NO_OF_THREADS
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Because the get would have also touched up on these blocks but it
comment|// would have touched
comment|// upon only 2 additionally
if|if
condition|(
name|expectOnlyZero
condition|)
block|{
name|assertTrue
argument_list|(
name|refCount
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|refCount
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|getLatch
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|refCount
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|countOfNext
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|refCount
argument_list|,
name|CustomInnerRegionObserver
operator|.
name|countOfNext
operator|.
name|get
argument_list|()
operator|+
operator|(
name|NO_OF_THREADS
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MultiGetThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MultiGetThread
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|set
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|Result
index|[]
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROW1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
block|}
block|}
specifier|private
specifier|static
class|class
name|GetThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|multipleCFs
decl_stmt|;
specifier|public
name|GetThread
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|tracker
parameter_list|,
name|boolean
name|multipleCFs
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|multipleCFs
operator|=
name|multipleCFs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|initiateGet
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
specifier|private
name|void
name|initiateGet
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
condition|)
block|{
comment|// Change this
if|if
condition|(
operator|!
name|multipleCFs
condition|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|9
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unknown key
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|900
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|3
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|8
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|9
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|9
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unknown key
name|get
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|9
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|900
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|set
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tracker
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|multipleCFs
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|3
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|8
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
operator|+
literal|9
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ScanThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|reverse
decl_stmt|;
specifier|public
name|ScanThread
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|reverse
operator|=
name|reverse
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|initiateScan
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
specifier|private
name|void
name|initiateScan
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|CustomInnerRegionObserver
operator|.
name|getCdl
argument_list|()
operator|.
name|set
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|ResultScanner
name|resScanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|i
init|=
operator|(
name|reverse
condition|?
name|ROWS
operator|.
name|length
operator|-
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|boolean
name|resultFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|resScanner
control|)
block|{
name|resultFound
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverse
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|resultFound
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForStoreFileCount
parameter_list|(
name|Store
name|store
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|start
operator|+
name|timeout
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|!=
name|count
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|", now="
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|", cur="
operator|+
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|CustomScanner
implements|implements
name|RegionScanner
block|{
specifier|private
name|RegionScanner
name|delegate
decl_stmt|;
specifier|public
name|CustomScanner
parameter_list|(
name|RegionScanner
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|next
argument_list|(
name|results
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|ScannerContext
name|scannerContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|next
argument_list|(
name|result
argument_list|,
name|scannerContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextRaw
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|nextRaw
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextRaw
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|ScannerContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|nextRaw
init|=
name|delegate
operator|.
name|nextRaw
argument_list|(
name|result
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactionLatch
operator|!=
literal|null
operator|&&
name|compactionLatch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|compactionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{         }
block|}
if|if
condition|(
name|CustomInnerRegionObserver
operator|.
name|throwException
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|exceptionLatch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|exceptionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
throw|throw
operator|new
name|IOException
argument_list|(
literal|"throw exception"
argument_list|)
throw|;
block|}
block|}
return|return
name|nextRaw
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFilterDone
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|isFilterDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxResultSize
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getMaxResultSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMvccReadPoint
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getMvccReadPoint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBatch
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shipped
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|delegate
operator|.
name|shipped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CustomInnerRegionObserverWrapper
extends|extends
name|CustomInnerRegionObserver
block|{
annotation|@
name|Override
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CustomScanner
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CustomInnerRegionObserver
extends|extends
name|BaseRegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicBoolean
name|slowDownNext
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicInteger
name|countOfNext
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicInteger
name|countOfGets
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicBoolean
name|waitForGets
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicBoolean
name|throwException
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|cdl
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|postScannerNext
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|InternalScanner
name|s
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
name|slowdownCode
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLatch
operator|!=
literal|null
operator|&&
name|getLatch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|getLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{         }
block|}
return|return
name|super
operator|.
name|postScannerNext
argument_list|(
name|e
argument_list|,
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasMore
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|slowdownCode
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|postGetOp
argument_list|(
name|e
argument_list|,
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|getCdl
parameter_list|()
block|{
return|return
name|cdl
return|;
block|}
specifier|private
name|void
name|slowdownCode
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|boolean
name|isGet
parameter_list|)
block|{
name|CountDownLatch
name|latch
init|=
name|getCdl
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|latch
operator|.
name|getCount
argument_list|()
operator|+
literal|" is the count "
operator|+
name|isGet
argument_list|)
expr_stmt|;
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isGet
condition|)
block|{
name|countOfGets
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|countOfNext
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the counterCountDownLatch"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// To help the tests to finish.
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't wait more"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

