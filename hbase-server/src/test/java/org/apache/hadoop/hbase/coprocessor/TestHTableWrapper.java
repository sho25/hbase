begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests class {@link org.apache.hadoop.hbase.client.HTableWrapper}  * by invoking its methods and briefly asserting the result is reasonable.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHTableWrapper
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_E
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|qualifierCol1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|static
class|class
name|DummyRegionObserver
implements|implements
name|RegionObserver
block|{   }
specifier|private
name|Table
name|hTableInterface
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|table
operator|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Put
name|puta
init|=
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|puta
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puta
argument_list|)
expr_stmt|;
name|Put
name|putb
init|=
operator|new
name|Put
argument_list|(
name|ROW_B
argument_list|)
decl_stmt|;
name|putb
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|Put
name|putc
init|=
operator|new
name|Put
argument_list|(
name|ROW_C
argument_list|)
decl_stmt|;
name|putc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableInterfaceMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|implClazz
init|=
name|DummyRegionObserver
operator|.
name|class
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|implClazz
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|CoprocessorEnvironment
name|env
init|=
name|cpHost
operator|.
name|findCoprocessorEnvironment
argument_list|(
name|implClazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Coprocessor
operator|.
name|VERSION
argument_list|,
name|env
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|env
operator|.
name|getHBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|hTableInterface
operator|=
name|env
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|checkHTableInterfaceMethods
argument_list|()
expr_stmt|;
name|cpHost
operator|.
name|shutdown
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkHTableInterfaceMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|checkConf
argument_list|()
expr_stmt|;
name|checkNameAndDescriptor
argument_list|()
expr_stmt|;
name|checkExists
argument_list|()
expr_stmt|;
name|checkAppend
argument_list|()
expr_stmt|;
name|checkPutsAndDeletes
argument_list|()
expr_stmt|;
name|checkCheckAndPut
argument_list|()
expr_stmt|;
name|checkCheckAndDelete
argument_list|()
expr_stmt|;
name|checkIncrementColumnValue
argument_list|()
expr_stmt|;
name|checkIncrement
argument_list|()
expr_stmt|;
name|checkBatch
argument_list|()
expr_stmt|;
name|checkCoprocessorService
argument_list|()
expr_stmt|;
name|checkMutateRow
argument_list|()
expr_stmt|;
name|checkResultScanner
argument_list|()
expr_stmt|;
name|hTableInterface
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkConf
parameter_list|()
block|{
name|Configuration
name|confExpected
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|confActual
init|=
name|hTableInterface
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|confExpected
operator|==
name|confActual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNameAndDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|TEST_TABLE
argument_list|,
name|hTableInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|hTableInterface
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkExists
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|ex
init|=
name|hTableInterface
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|exArray
init|=
name|hTableInterface
operator|.
name|existsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Get
index|[]
block|{
operator|new
name|Get
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
block|,
operator|new
name|Get
argument_list|(
name|ROW_B
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
block|,
operator|new
name|Get
argument_list|(
name|ROW_C
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
block|,
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"does not exist"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
block|,}
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
argument_list|,
name|exArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAppend
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|appendValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"append"
argument_list|)
decl_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|qualifierCol1
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|appendValue
argument_list|)
decl_stmt|;
name|Result
name|appendResult
init|=
name|hTableInterface
operator|.
name|append
argument_list|(
name|append
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appendedRow
init|=
name|appendResult
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|checkRowValue
argument_list|(
name|appendedRow
argument_list|,
name|appendValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPutsAndDeletes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// put:
name|Put
name|putD
init|=
operator|new
name|Put
argument_list|(
name|ROW_D
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes2
argument_list|)
decl_stmt|;
name|hTableInterface
operator|.
name|put
argument_list|(
name|putD
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_D
argument_list|,
name|bytes2
argument_list|)
expr_stmt|;
comment|// delete:
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_D
argument_list|)
decl_stmt|;
name|hTableInterface
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_D
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// multiple puts:
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[]
block|{
operator|new
name|Put
argument_list|(
name|ROW_D
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes2
argument_list|)
block|,
operator|new
name|Put
argument_list|(
name|ROW_E
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes3
argument_list|)
block|}
decl_stmt|;
name|hTableInterface
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowsValues
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|ROW_D
block|,
name|ROW_E
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|bytes2
block|,
name|bytes3
block|}
argument_list|)
expr_stmt|;
comment|// multiple deletes:
name|Delete
index|[]
name|deletes
init|=
operator|new
name|Delete
index|[]
block|{
operator|new
name|Delete
argument_list|(
name|ROW_D
argument_list|)
block|,
operator|new
name|Delete
argument_list|(
name|ROW_E
argument_list|)
block|}
decl_stmt|;
name|hTableInterface
operator|.
name|delete
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|deletes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowsValues
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|ROW_D
block|,
name|ROW_E
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCheckAndPut
parameter_list|()
throws|throws
name|IOException
block|{
name|Put
name|putC
init|=
operator|new
name|Put
argument_list|(
name|ROW_C
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes5
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hTableInterface
operator|.
name|checkAndPut
argument_list|(
name|ROW_C
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
comment|/* expect */
name|bytes4
argument_list|,
name|putC
comment|/* newValue */
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hTableInterface
operator|.
name|checkAndPut
argument_list|(
name|ROW_C
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
comment|/* expect */
name|bytes3
argument_list|,
name|putC
comment|/* newValue */
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_C
argument_list|,
name|bytes5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCheckAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_C
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hTableInterface
operator|.
name|checkAndDelete
argument_list|(
name|ROW_C
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes4
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hTableInterface
operator|.
name|checkAndDelete
argument_list|(
name|ROW_C
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes5
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_C
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIncrementColumnValue
parameter_list|()
throws|throws
name|IOException
block|{
name|hTableInterface
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|newVal
init|=
name|hTableInterface
operator|.
name|incrementColumnValue
argument_list|(
name|ROW_A
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|11L
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|11L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|newVal2
init|=
name|hTableInterface
operator|.
name|incrementColumnValue
argument_list|(
name|ROW_A
argument_list|,
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
operator|-
literal|10L
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|newVal2
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIncrement
parameter_list|()
throws|throws
name|IOException
block|{
name|hTableInterface
operator|.
name|increment
argument_list|(
operator|new
name|Increment
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
operator|-
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|-
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkBatch
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Row
index|[]
block|{
operator|new
name|Increment
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
literal|2L
argument_list|)
block|,
operator|new
name|Increment
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
literal|2L
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Object
index|[]
name|results3
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Object
index|[]
name|results1
init|=
name|results3
decl_stmt|;
name|hTableInterface
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r2
range|:
name|results1
control|)
block|{
name|assertTrue
argument_list|(
name|r2
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
block|}
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results2
init|=
operator|new
name|Result
index|[
literal|2
index|]
decl_stmt|;
name|hTableInterface
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results2
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r2
range|:
name|results2
control|)
block|{
name|assertTrue
argument_list|(
name|r2
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
block|}
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
comment|// with callbacks:
specifier|final
name|long
index|[]
name|updateCounter
init|=
operator|new
name|long
index|[]
block|{
literal|0L
block|}
decl_stmt|;
name|hTableInterface
operator|.
name|batchCallback
argument_list|(
name|actions
argument_list|,
name|results3
argument_list|,
operator|new
name|Batch
operator|.
name|Callback
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|updateCounter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|updateCounter
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results3
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r3
range|:
name|results3
control|)
block|{
name|assertTrue
argument_list|(
name|r3
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
block|}
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8L
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results4
init|=
operator|new
name|Result
index|[
literal|2
index|]
decl_stmt|;
name|updateCounter
index|[
literal|0
index|]
operator|=
literal|0L
expr_stmt|;
name|hTableInterface
operator|.
name|batchCallback
argument_list|(
name|actions
argument_list|,
name|results4
argument_list|,
operator|new
name|Batch
operator|.
name|Callback
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|updateCounter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|updateCounter
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r2
range|:
name|results4
control|)
block|{
name|assertTrue
argument_list|(
name|r2
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
block|}
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCoprocessorService
parameter_list|()
block|{
name|CoprocessorRpcChannel
name|crc
init|=
name|hTableInterface
operator|.
name|coprocessorService
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|crc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkMutateRow
parameter_list|()
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes1
argument_list|)
decl_stmt|;
name|RowMutations
name|rowMutations
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|rowMutations
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|hTableInterface
operator|.
name|mutateRow
argument_list|(
name|rowMutations
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|ROW_A
argument_list|,
name|bytes1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkResultScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|ResultScanner
name|resultScanner
init|=
name|hTableInterface
operator|.
name|getScanner
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
name|resultScanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|resultScanner
operator|=
name|hTableInterface
operator|.
name|getScanner
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultScanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|resultScanner
operator|=
name|hTableInterface
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|ROW_A
argument_list|,
name|ROW_C
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultScanner
operator|.
name|next
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRowValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|expectedValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|hTableInterface
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actualValue
init|=
name|result
operator|.
name|getValue
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRowsValues
parameter_list|(
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|byte
index|[]
index|[]
name|expectedValues
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rows
operator|.
name|length
operator|!=
name|expectedValues
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|Get
index|[]
name|gets
init|=
operator|new
name|Get
index|[
name|rows
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gets
index|[
name|i
index|]
operator|=
operator|new
name|Get
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|results
init|=
name|hTableInterface
operator|.
name|get
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|gets
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|results
index|[
name|i
index|]
operator|.
name|getValue
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedValues
index|[
name|i
index|]
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

