begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterFifoRpcScheduler
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterFifoRpcScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMasterFifoRpcScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_SERVER_REPORT
init|=
literal|"RegionServerReport"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER
init|=
literal|"Other"
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RSRpcServices
operator|.
name|MASTER_RPC_SCHEDULER_FACTORY_CLASS
argument_list|,
literal|"org.apache.hadoop.hbase.regionserver.MasterFifoRpcSchedulerFactory"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_COUNT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MasterFifoRpcScheduler
operator|.
name|MASTER_SERVER_REPORT_HANDLER_COUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterRpcScheduler
parameter_list|()
block|{
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterRpcServices
name|masterRpcServices
init|=
name|master
operator|.
name|getMasterRpcServices
argument_list|()
decl_stmt|;
name|RpcScheduler
name|masterRpcScheduler
init|=
name|masterRpcServices
operator|.
name|getRpcScheduler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|masterRpcScheduler
operator|instanceof
name|MasterFifoRpcScheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCallQueueInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|AtomicInteger
name|callExecutionCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|MockMasterFifoRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|totalCallMethods
init|=
literal|30
decl_stmt|;
name|int
name|unableToDispatch
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|totalCallMethods
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|CallRunner
name|task
init|=
name|createMockTask
argument_list|(
name|callExecutionCount
argument_list|,
name|i
operator|<
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scheduler
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|unableToDispatch
operator|++
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|CallQueueInfo
name|callQueueInfo
init|=
name|scheduler
operator|.
name|getCallQueueInfo
argument_list|()
decl_stmt|;
name|int
name|executionCount
init|=
name|callExecutionCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|expectedQueueName
init|=
literal|"Master Fifo Queue"
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callQueueInfo
operator|.
name|getCallQueueNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|callQueueSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|queueName
range|:
name|callQueueInfo
operator|.
name|getCallQueueNames
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedQueueName
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|methodNames
init|=
name|callQueueInfo
operator|.
name|getCalledMethodNames
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodNames
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
name|methodNames
operator|.
name|contains
argument_list|(
name|REGION_SERVER_REPORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|methodNames
operator|.
name|contains
argument_list|(
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|methodName
range|:
name|callQueueInfo
operator|.
name|getCalledMethodNames
argument_list|(
name|queueName
argument_list|)
control|)
block|{
name|callQueueSize
operator|+=
name|callQueueInfo
operator|.
name|getCallMethodCount
argument_list|(
name|queueName
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|totalCallMethods
operator|-
name|unableToDispatch
argument_list|,
name|callQueueSize
operator|+
name|executionCount
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CallRunner
name|createMockTask
parameter_list|(
name|AtomicInteger
name|callExecutionCount
parameter_list|,
name|boolean
name|isRegionServerReportTask
parameter_list|)
block|{
name|CallRunner
name|task
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerCall
name|call
init|=
name|mock
argument_list|(
name|ServerCall
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getRpcCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|call
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|call
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
name|isRegionServerReportTask
condition|?
name|REGION_SERVER_REPORT
else|:
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|callExecutionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|task
return|;
block|}
specifier|private
specifier|static
class|class
name|MockMasterFifoRpcScheduler
extends|extends
name|MasterFifoRpcScheduler
block|{
specifier|public
name|MockMasterFifoRpcScheduler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|callHandlerCount
parameter_list|,
name|int
name|rsReportHandlerCount
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|callHandlerCount
argument_list|,
name|rsReportHandlerCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Override this method because we can't mock a Descriptors.MethodDescriptor      */
annotation|@
name|Override
specifier|protected
name|String
name|getCallMethod
parameter_list|(
specifier|final
name|CallRunner
name|task
parameter_list|)
block|{
name|RpcCall
name|call
init|=
name|task
operator|.
name|getRpcCall
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|call
operator|.
name|getHeader
argument_list|()
operator|.
name|getMethodName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

