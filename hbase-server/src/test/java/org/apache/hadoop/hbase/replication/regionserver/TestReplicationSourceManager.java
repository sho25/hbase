begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationSourceDummy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ZKReplicationPeerStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSourceManager
operator|.
name|NodeFailoverWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_comment
comment|/**  * An abstract class that tests ReplicationSourceManager. Classes that extend this class should  * set up the proper config for this class and initialize the proper cluster using  * HBaseTestingUtility.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|TestReplicationSourceManager
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationSourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationSourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|HBaseTestingUtility
name|utility
decl_stmt|;
specifier|protected
specifier|static
name|Replication
name|replication
decl_stmt|;
specifier|protected
specifier|static
name|ReplicationSourceManager
name|manager
decl_stmt|;
specifier|protected
specifier|static
name|ReplicationSourceManager
name|managerOfCluster
decl_stmt|;
specifier|protected
specifier|static
name|ZKWatcher
name|zkw
decl_stmt|;
specifier|protected
specifier|static
name|TableDescriptor
name|htd
decl_stmt|;
specifier|protected
specifier|static
name|RegionInfo
name|hri
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|f1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|f2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|TableName
name|test
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|slaveId
init|=
literal|"1"
decl_stmt|;
specifier|protected
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|oldLogDir
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|logDir
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|remoteLogDir
decl_stmt|;
specifier|protected
specifier|static
name|CountDownLatch
name|latch
decl_stmt|;
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
decl_stmt|;
specifier|protected
specifier|static
name|void
name|setupZkAndReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The implementing class should set up the conf
name|assertNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zkw
operator|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1"
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
operator|+
literal|":/1"
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/peer-state"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/peer-state"
argument_list|,
name|ZKReplicationPeerStorage
operator|.
name|ENABLED_ZNODE_BYTES
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/sync-rep-state"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/sync-rep-state"
argument_list|,
name|ZKReplicationPeerStorage
operator|.
name|NONE_STATE_ZNODE_BYTES
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/new-sync-rep-state"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/peers/1/new-sync-rep-state"
argument_list|,
name|ZKReplicationPeerStorage
operator|.
name|NONE_STATE_ZNODE_BYTES
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/state"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
literal|"/hbase/replication/state"
argument_list|,
name|ZKReplicationPeerStorage
operator|.
name|ENABLED_ZNODE_BYTES
argument_list|)
expr_stmt|;
name|ZKClusterId
operator|.
name|setClusterId
argument_list|(
name|zkw
argument_list|,
operator|new
name|ClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|utility
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|utility
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|oldLogDir
operator|=
name|utility
operator|.
name|getDataTestDir
argument_list|(
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
expr_stmt|;
name|logDir
operator|=
name|utility
operator|.
name|getDataTestDir
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
expr_stmt|;
name|remoteLogDir
operator|=
name|utility
operator|.
name|getDataTestDir
argument_list|(
name|ReplicationUtils
operator|.
name|REMOTE_WAL_DIR_NAME
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|new
name|Replication
argument_list|()
expr_stmt|;
name|replication
operator|.
name|initialize
argument_list|(
operator|new
name|DummyServer
argument_list|()
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|managerOfCluster
operator|=
name|getManagerFromCluster
argument_list|()
expr_stmt|;
if|if
condition|(
name|managerOfCluster
operator|!=
literal|null
condition|)
block|{
comment|// After replication procedure, we need to add peer by hand (other than by receiving
comment|// notification from zk)
name|managerOfCluster
operator|.
name|addPeer
argument_list|(
name|slaveId
argument_list|)
expr_stmt|;
block|}
name|manager
operator|=
name|replication
operator|.
name|getReplicationManager
argument_list|()
expr_stmt|;
name|manager
operator|.
name|addSource
argument_list|(
name|slaveId
argument_list|)
expr_stmt|;
if|if
condition|(
name|managerOfCluster
operator|!=
literal|null
condition|)
block|{
name|waitPeer
argument_list|(
name|slaveId
argument_list|,
name|managerOfCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|waitPeer
argument_list|(
name|slaveId
argument_list|,
name|manager
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|htd
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|test
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|f1
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|f2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getColumnFamilyNames
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|hri
operator|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|r1
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|r2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|ReplicationSourceManager
name|getManagerFromCluster
parameter_list|()
block|{
comment|// TestReplicationSourceManagerZkImpl won't start the mini hbase cluster.
if|if
condition|(
name|utility
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|utility
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
operator|::
name|getRegionServer
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|map
argument_list|(
name|RegionServerServices
operator|::
name|getReplicationSourceService
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
operator|(
name|Replication
operator|)
name|r
argument_list|)
operator|.
name|map
argument_list|(
name|Replication
operator|::
name|getReplicationManager
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|utility
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|void
name|cleanLogDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldLogDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|remoteLogDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Start "
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|cleanLogDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"End "
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|cleanLogDir
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|manager
operator|.
name|getSources
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ReplicationSourceInterface
operator|::
name|getPeerId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|slaveId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|removePeerAndWait
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogRoll
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|baseline
init|=
literal|1000
decl_stmt|;
name|long
name|time
init|=
name|baseline
decl_stmt|;
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|f1
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|WALFactory
name|wals
init|=
operator|new
name|WALFactory
argument_list|(
name|utility
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"regionserver:60020"
argument_list|,
literal|"UTF8"
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicationSourceManager
name|replicationManager
init|=
name|replication
operator|.
name|getReplicationManager
argument_list|()
decl_stmt|;
name|wals
operator|.
name|getWALProvider
argument_list|()
operator|.
name|addWALActionsListener
argument_list|(
operator|new
name|ReplicationSourceWALActionListener
argument_list|(
name|conf
argument_list|,
name|replicationManager
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WAL
name|wal
init|=
name|wals
operator|.
name|getWAL
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|manager
operator|.
name|init
argument_list|()
expr_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableame"
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|f1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getColumnFamilyNames
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Testing normal log rolling every 20
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|101
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
operator|&&
name|i
operator|%
literal|20
operator|==
literal|0
condition|)
block|{
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|txid
init|=
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|test
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|edit
argument_list|)
decl_stmt|;
name|wal
operator|.
name|sync
argument_list|(
name|txid
argument_list|)
expr_stmt|;
block|}
comment|// Simulate a rapid insert that's followed
comment|// by a report that's still not totally complete (missing last one)
name|LOG
operator|.
name|info
argument_list|(
name|baseline
operator|+
literal|" and "
operator|+
name|time
argument_list|)
expr_stmt|;
name|baseline
operator|+=
literal|101
expr_stmt|;
name|time
operator|=
name|baseline
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|baseline
operator|+
literal|" and "
operator|+
name|time
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|test
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|edit
argument_list|)
expr_stmt|;
block|}
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|int
name|logNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NavigableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|manager
operator|.
name|getWALs
argument_list|()
operator|.
name|get
argument_list|(
name|slaveId
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|logNumber
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|logNumber
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|ReplicationSourceInterface
name|source
init|=
name|mock
argument_list|(
name|ReplicationSourceInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getQueueId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isRecovered
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isSyncReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|manager
operator|.
name|logPositionAndCleanOldLogs
argument_list|(
name|source
argument_list|,
operator|new
name|WALEntryBatch
argument_list|(
literal|0
argument_list|,
name|manager
operator|.
name|getSources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|appendData
argument_list|(
name|hri
argument_list|,
operator|new
name|WALKeyImpl
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|test
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|edit
argument_list|)
expr_stmt|;
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getWALs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Need a case with only 2 WALs and we only want to delete the first one
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClaimQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|DummyServer
argument_list|(
literal|"hostname0.example.org"
argument_list|)
decl_stmt|;
name|ReplicationQueueStorage
name|rq
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// populate some znodes in the peer znode
name|files
operator|.
name|add
argument_list|(
literal|"log1"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
literal|"log2"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|rq
operator|.
name|addWAL
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|"1"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// create 3 DummyServers
name|Server
name|s1
init|=
operator|new
name|DummyServer
argument_list|(
literal|"dummyserver1.example.org"
argument_list|)
decl_stmt|;
name|Server
name|s2
init|=
operator|new
name|DummyServer
argument_list|(
literal|"dummyserver2.example.org"
argument_list|)
decl_stmt|;
name|Server
name|s3
init|=
operator|new
name|DummyServer
argument_list|(
literal|"dummyserver3.example.org"
argument_list|)
decl_stmt|;
comment|// create 3 DummyNodeFailoverWorkers
name|DummyNodeFailoverWorker
name|w1
init|=
operator|new
name|DummyNodeFailoverWorker
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|s1
argument_list|)
decl_stmt|;
name|DummyNodeFailoverWorker
name|w2
init|=
operator|new
name|DummyNodeFailoverWorker
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|s2
argument_list|)
decl_stmt|;
name|DummyNodeFailoverWorker
name|w3
init|=
operator|new
name|DummyNodeFailoverWorker
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|s3
argument_list|)
decl_stmt|;
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// start the threads
name|w1
operator|.
name|start
argument_list|()
expr_stmt|;
name|w2
operator|.
name|start
argument_list|()
expr_stmt|;
name|w3
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// make sure only one is successful
name|int
name|populatedMap
init|=
literal|0
decl_stmt|;
comment|// wait for result now... till all the workers are done.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|populatedMap
operator|+=
name|w1
operator|.
name|isLogZnodesMapPopulated
argument_list|()
operator|+
name|w2
operator|.
name|isLogZnodesMapPopulated
argument_list|()
operator|+
name|w3
operator|.
name|isLogZnodesMapPopulated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|populatedMap
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanupFailoverQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|DummyServer
argument_list|(
literal|"hostname1.example.org"
argument_list|)
decl_stmt|;
name|ReplicationQueueStorage
name|rq
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// populate some znodes in the peer znode
name|SortedSet
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|group
init|=
literal|"testgroup"
decl_stmt|;
name|String
name|file1
init|=
name|group
operator|+
literal|"."
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|".log1"
decl_stmt|;
name|String
name|file2
init|=
name|group
operator|+
literal|"."
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|".log2"
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file2
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|rq
operator|.
name|addWAL
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|"1"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|Server
name|s1
init|=
operator|new
name|DummyServer
argument_list|(
literal|"dummyserver1.example.org"
argument_list|)
decl_stmt|;
name|ReplicationPeers
name|rp1
init|=
name|ReplicationFactory
operator|.
name|getReplicationPeers
argument_list|(
name|s1
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|s1
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|rp1
operator|.
name|init
argument_list|()
expr_stmt|;
name|NodeFailoverWorker
name|w1
init|=
name|manager
operator|.
expr|new
name|NodeFailoverWorker
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|w1
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manager
operator|.
name|getWalsByIdRecoveredQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
literal|"1-"
operator|+
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|files
argument_list|,
name|manager
operator|.
name|getWalsByIdRecoveredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicationSourceInterface
name|source
init|=
name|mock
argument_list|(
name|ReplicationSourceInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getQueueId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isRecovered
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isSyncReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|manager
operator|.
name|cleanOldLogs
argument_list|(
name|file2
argument_list|,
literal|false
argument_list|,
name|source
argument_list|)
expr_stmt|;
comment|// log1 should be deleted
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|file2
argument_list|)
argument_list|,
name|manager
operator|.
name|getWalsByIdRecoveredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanupUnknownPeerZNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|DummyServer
argument_list|(
literal|"hostname2.example.org"
argument_list|)
decl_stmt|;
name|ReplicationQueueStorage
name|rq
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// populate some znodes in the peer znode
comment|// add log to an unknown peer
name|String
name|group
init|=
literal|"testgroup"
decl_stmt|;
name|rq
operator|.
name|addWAL
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|"2"
argument_list|,
name|group
operator|+
literal|".log1"
argument_list|)
expr_stmt|;
name|rq
operator|.
name|addWAL
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|"2"
argument_list|,
name|group
operator|+
literal|".log2"
argument_list|)
expr_stmt|;
name|NodeFailoverWorker
name|w1
init|=
name|manager
operator|.
expr|new
name|NodeFailoverWorker
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|w1
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// The log of the unknown peer should be removed from zk
for|for
control|(
name|String
name|peer
range|:
name|manager
operator|.
name|getAllQueues
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|peer
operator|.
name|startsWith
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for HBASE-9038, Replication.scopeWALEdits would NPE if it wasn't filtering out the    * compaction WALEdit.    */
annotation|@
name|Test
specifier|public
name|void
name|testCompactionWALEdits
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompactionWALEdits"
argument_list|)
decl_stmt|;
name|WALProtos
operator|.
name|CompactionDescriptor
name|compactionDescriptor
init|=
name|WALProtos
operator|.
name|CompactionDescriptor
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
name|WALEdit
operator|.
name|createCompaction
argument_list|(
name|hri
argument_list|,
name|compactionDescriptor
argument_list|)
decl_stmt|;
name|ReplicationSourceWALActionListener
operator|.
name|scopeWALEdits
argument_list|(
operator|new
name|WALKeyImpl
argument_list|()
argument_list|,
name|edit
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoadWALEditsWithoutBulkLoadReplicationEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scope
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// 1. Get the bulk load wal edit event
name|WALEdit
name|logEdit
init|=
name|getBulkLoadWALEdit
argument_list|(
name|scope
argument_list|)
decl_stmt|;
comment|// 2. Create wal key
name|WALKeyImpl
name|logKey
init|=
operator|new
name|WALKeyImpl
argument_list|(
name|scope
argument_list|)
decl_stmt|;
comment|// 3. Get the scopes for the key
name|ReplicationSourceWALActionListener
operator|.
name|scopeWALEdits
argument_list|(
name|logKey
argument_list|,
name|logEdit
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// 4. Assert that no bulk load entry scopes are added if bulk load hfile replication is disabled
name|assertNull
argument_list|(
literal|"No bulk load entries scope should be added if bulk load replication is disabled."
argument_list|,
name|logKey
operator|.
name|getReplicationScopes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoadWALEdits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. Get the bulk load wal edit event
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scope
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|WALEdit
name|logEdit
init|=
name|getBulkLoadWALEdit
argument_list|(
name|scope
argument_list|)
decl_stmt|;
comment|// 2. Create wal key
name|WALKeyImpl
name|logKey
init|=
operator|new
name|WALKeyImpl
argument_list|(
name|scope
argument_list|)
decl_stmt|;
comment|// 3. Enable bulk load hfile replication
name|Configuration
name|bulkLoadConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|bulkLoadConf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BULKLOAD_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 4. Get the scopes for the key
name|ReplicationSourceWALActionListener
operator|.
name|scopeWALEdits
argument_list|(
name|logKey
argument_list|,
name|logEdit
argument_list|,
name|bulkLoadConf
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
name|logKey
operator|.
name|getReplicationScopes
argument_list|()
decl_stmt|;
comment|// Assert family with replication scope global is present in the key scopes
name|assertTrue
argument_list|(
literal|"This family scope is set to global, should be part of replication key scopes."
argument_list|,
name|scopes
operator|.
name|containsKey
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert family with replication scope local is not present in the key scopes
name|assertFalse
argument_list|(
literal|"This family scope is set to local, should not be part of replication key scopes"
argument_list|,
name|scopes
operator|.
name|containsKey
argument_list|(
name|f2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether calling removePeer() on a ReplicationSourceManager that failed on initializing the    * corresponding ReplicationSourceInterface correctly cleans up the corresponding    * replication queue and ReplicationPeer.    * See HBASE-16096.    */
annotation|@
name|Test
specifier|public
name|void
name|testPeerRemovalCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|replicationSourceImplName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"replication.replicationsource.implementation"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|peerId
init|=
literal|"FakePeer"
decl_stmt|;
specifier|final
name|ReplicationPeerConfig
name|peerConfig
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"localhost:"
operator|+
name|utility
operator|.
name|getZkCluster
argument_list|()
operator|.
name|getClientPort
argument_list|()
operator|+
literal|":/hbase"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DummyServer
name|server
init|=
operator|new
name|DummyServer
argument_list|()
decl_stmt|;
name|ReplicationQueueStorage
name|rq
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Purposely fail ReplicationSourceManager.addSource() by causing ReplicationSourceInterface
comment|// initialization to throw an exception.
name|conf
operator|.
name|set
argument_list|(
literal|"replication.replicationsource.implementation"
argument_list|,
name|FailInitializeDummyReplicationSource
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getReplicationPeers
argument_list|()
expr_stmt|;
comment|// Set up the znode and ReplicationPeer for the fake peer
comment|// Don't wait for replication source to initialize, we know it won't.
name|addPeerAndWait
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Sanity check
name|assertNull
argument_list|(
name|manager
operator|.
name|getSource
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a replication queue for the fake peer
name|rq
operator|.
name|addWAL
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|peerId
argument_list|,
literal|"FakeFile"
argument_list|)
expr_stmt|;
comment|// Unregister peer, this should remove the peer and clear all queues associated with it
comment|// Need to wait for the ReplicationTracker to pick up the changes and notify listeners.
name|removePeerAndWait
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rq
operator|.
name|getAllQueues
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"replication.replicationsource.implementation"
argument_list|,
name|replicationSourceImplName
argument_list|)
expr_stmt|;
name|removePeerAndWait
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|MetricsReplicationSourceSource
name|getGlobalSource
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationSourceInterface
name|source
init|=
name|manager
operator|.
name|getSource
argument_list|(
name|slaveId
argument_list|)
decl_stmt|;
comment|// Retrieve the global replication metrics source
name|Field
name|f
init|=
name|MetricsSource
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"globalSourceSource"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|MetricsReplicationSourceSource
operator|)
name|f
operator|.
name|get
argument_list|(
name|source
operator|.
name|getSourceMetrics
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|getSizeOfLatestPath
parameter_list|()
block|{
comment|// If no mini cluster is running, there are extra replication manager influencing the metrics.
if|if
condition|(
name|utility
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|utility
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
operator|::
name|getRegionServer
argument_list|)
operator|.
name|map
argument_list|(
name|RegionServerServices
operator|::
name|getReplicationSourceService
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
operator|(
name|Replication
operator|)
name|r
argument_list|)
operator|.
name|map
argument_list|(
name|Replication
operator|::
name|getReplicationManager
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|ReplicationSourceManager
operator|::
name|getSizeOfLatestPath
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePeerMetricsCleanup
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|peerId
init|=
literal|"DummyPeer"
decl_stmt|;
specifier|final
name|ReplicationPeerConfig
name|peerConfig
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"localhost:"
operator|+
name|utility
operator|.
name|getZkCluster
argument_list|()
operator|.
name|getClientPort
argument_list|()
operator|+
literal|":/hbase"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|MetricsReplicationSourceSource
name|globalSource
init|=
name|getGlobalSource
argument_list|()
decl_stmt|;
specifier|final
name|int
name|globalLogQueueSizeInitial
init|=
name|globalSource
operator|.
name|getSizeOfLogQueue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|sizeOfLatestPath
init|=
name|getSizeOfLatestPath
argument_list|()
decl_stmt|;
name|addPeerAndWait
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizeOfLatestPath
operator|+
name|globalLogQueueSizeInitial
argument_list|,
name|globalSource
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationSourceInterface
name|source
init|=
name|manager
operator|.
name|getSource
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
comment|// Sanity check
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
specifier|final
name|int
name|sizeOfSingleLogQueue
init|=
name|source
operator|.
name|getSourceMetrics
argument_list|()
operator|.
name|getSizeOfLogQueue
argument_list|()
decl_stmt|;
comment|// Enqueue log and check if metrics updated
name|source
operator|.
name|enqueueLog
argument_list|(
operator|new
name|Path
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|sizeOfSingleLogQueue
argument_list|,
name|source
operator|.
name|getSourceMetrics
argument_list|()
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|source
operator|.
name|getSourceMetrics
argument_list|()
operator|.
name|getSizeOfLogQueue
argument_list|()
operator|+
name|globalLogQueueSizeInitial
argument_list|,
name|globalSource
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Removing the peer should reset the global metrics
name|removePeerAndWait
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|globalLogQueueSizeInitial
argument_list|,
name|globalSource
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding the same peer back again should reset the single source metrics
name|addPeerAndWait
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|source
operator|=
name|manager
operator|.
name|getSource
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|source
operator|.
name|getSourceMetrics
argument_list|()
operator|.
name|getSizeOfLogQueue
argument_list|()
operator|+
name|globalLogQueueSizeInitial
argument_list|,
name|globalSource
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removePeerAndWait
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ReplicationSourceInterface
name|mockReplicationSource
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationSourceInterface
name|source
init|=
name|mock
argument_list|(
name|ReplicationSourceInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getPeerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getQueueId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isRecovered
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|isSyncReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|config
init|=
name|mock
argument_list|(
name|ReplicationPeerConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|getRemoteWALDir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|remoteLogDir
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationPeer
name|peer
init|=
name|mock
argument_list|(
name|ReplicationPeer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|source
operator|.
name|getPeer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peer
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRemoteWALs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|peerId2
init|=
name|slaveId
operator|+
literal|"_2"
decl_stmt|;
name|addPeerAndWait
argument_list|(
name|peerId2
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"localhost:"
operator|+
name|utility
operator|.
name|getZkCluster
argument_list|()
operator|.
name|getClientPort
argument_list|()
operator|+
literal|":/hbase"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// make sure that we can deal with files which does not exist
name|String
name|walNameNotExists
init|=
literal|"remoteWAL-12345-"
operator|+
name|slaveId
operator|+
literal|".12345"
operator|+
name|ReplicationUtils
operator|.
name|SYNC_WAL_SUFFIX
decl_stmt|;
name|Path
name|wal
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|walNameNotExists
argument_list|)
decl_stmt|;
name|manager
operator|.
name|preLogRoll
argument_list|(
name|wal
argument_list|)
expr_stmt|;
name|manager
operator|.
name|postLogRoll
argument_list|(
name|wal
argument_list|)
expr_stmt|;
name|Path
name|remoteLogDirForPeer
init|=
operator|new
name|Path
argument_list|(
name|remoteLogDir
argument_list|,
name|slaveId
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|remoteLogDirForPeer
argument_list|)
expr_stmt|;
name|String
name|walName
init|=
literal|"remoteWAL-12345-"
operator|+
name|slaveId
operator|+
literal|".23456"
operator|+
name|ReplicationUtils
operator|.
name|SYNC_WAL_SUFFIX
decl_stmt|;
name|Path
name|remoteWAL
init|=
operator|new
name|Path
argument_list|(
name|remoteLogDirForPeer
argument_list|,
name|walName
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|remoteWAL
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal
operator|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|walName
argument_list|)
expr_stmt|;
name|manager
operator|.
name|preLogRoll
argument_list|(
name|wal
argument_list|)
expr_stmt|;
name|manager
operator|.
name|postLogRoll
argument_list|(
name|wal
argument_list|)
expr_stmt|;
name|ReplicationSourceInterface
name|source
init|=
name|mockReplicationSource
argument_list|(
name|peerId2
argument_list|)
decl_stmt|;
name|manager
operator|.
name|cleanOldLogs
argument_list|(
name|walName
argument_list|,
literal|true
argument_list|,
name|source
argument_list|)
expr_stmt|;
comment|// still there if peer id does not match
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|remoteWAL
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|mockReplicationSource
argument_list|(
name|slaveId
argument_list|)
expr_stmt|;
name|manager
operator|.
name|cleanOldLogs
argument_list|(
name|walName
argument_list|,
literal|true
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|remoteWAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removePeerAndWait
argument_list|(
name|peerId2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameWALPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|latestWalsBefore
init|=
name|manager
operator|.
name|getLastestPath
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|walName1
init|=
literal|"localhost,8080,12345-45678-Peer.34567"
decl_stmt|;
name|String
name|walName2
init|=
literal|"localhost,8080,12345.56789"
decl_stmt|;
name|manager
operator|.
name|preLogRoll
argument_list|(
operator|new
name|Path
argument_list|(
name|walName1
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|preLogRoll
argument_list|(
operator|new
name|Path
argument_list|(
name|walName2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|latestWals
init|=
name|manager
operator|.
name|getLastestPath
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getName
argument_list|)
operator|.
name|filter
argument_list|(
name|n
lambda|->
operator|!
name|latestWalsBefore
operator|.
name|contains
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|latestWals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latestWals
operator|.
name|contains
argument_list|(
name|walName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latestWals
operator|.
name|contains
argument_list|(
name|walName2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a peer and wait for it to initialize    * @param waitForSource Whether to wait for replication source to initialize    */
specifier|private
name|void
name|addPeerAndWait
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|,
specifier|final
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
specifier|final
name|boolean
name|waitForSource
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReplicationPeers
name|rp
init|=
name|manager
operator|.
name|getReplicationPeers
argument_list|()
decl_stmt|;
name|rp
operator|.
name|getPeerStorage
argument_list|()
operator|.
name|addPeer
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|true
argument_list|,
name|SyncReplicationState
operator|.
name|NONE
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|addPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore the failed exception, because we'll test both success& failed case.
block|}
name|waitPeer
argument_list|(
name|peerId
argument_list|,
name|manager
argument_list|,
name|waitForSource
argument_list|)
expr_stmt|;
if|if
condition|(
name|managerOfCluster
operator|!=
literal|null
condition|)
block|{
name|managerOfCluster
operator|.
name|addPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|waitPeer
argument_list|(
name|peerId
argument_list|,
name|managerOfCluster
argument_list|,
name|waitForSource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|waitPeer
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|,
name|ReplicationSourceManager
name|manager
parameter_list|,
specifier|final
name|boolean
name|waitForSource
parameter_list|)
block|{
name|ReplicationPeers
name|rp
init|=
name|manager
operator|.
name|getReplicationPeers
argument_list|()
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|conf
argument_list|,
literal|20000
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|waitForSource
condition|)
block|{
name|ReplicationSourceInterface
name|rs
init|=
name|manager
operator|.
name|getSource
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rs
operator|instanceof
name|ReplicationSourceDummy
condition|)
block|{
return|return
operator|(
operator|(
name|ReplicationSourceDummy
operator|)
name|rs
operator|)
operator|.
name|isStartup
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|(
name|rp
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a peer and wait for it to get cleaned up    * @param peerId    * @throws Exception    */
specifier|private
name|void
name|removePeerAndWait
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReplicationPeers
name|rp
init|=
name|manager
operator|.
name|getReplicationPeers
argument_list|()
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getPeerStorage
argument_list|()
operator|.
name|listPeerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
name|rp
operator|.
name|getPeerStorage
argument_list|()
operator|.
name|removePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|removePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore the failed exception and continue.
block|}
block|}
name|Waiter
operator|.
name|waitFor
argument_list|(
name|conf
argument_list|,
literal|20000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|peers
init|=
name|rp
operator|.
name|getPeerStorage
argument_list|()
operator|.
name|listPeerIds
argument_list|()
decl_stmt|;
return|return
operator|(
operator|!
name|manager
operator|.
name|getAllQueues
argument_list|()
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
operator|)
operator|&&
operator|(
name|rp
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
operator|==
literal|null
operator|)
operator|&&
operator|(
operator|!
name|peers
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
operator|)
operator|&&
name|manager
operator|.
name|getSource
argument_list|(
name|peerId
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WALEdit
name|getBulkLoadWALEdit
parameter_list|(
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scope
parameter_list|)
block|{
comment|// 1. Create store files for the families
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|storeFilesSize
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|p
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Path
name|hfilePath1
init|=
operator|new
name|Path
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|f1
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|hfilePath1
argument_list|)
expr_stmt|;
try|try
block|{
name|storeFilesSize
operator|.
name|put
argument_list|(
name|hfilePath1
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hfilePath1
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to calculate the size of hfile "
operator|+
name|hfilePath1
argument_list|)
expr_stmt|;
name|storeFilesSize
operator|.
name|put
argument_list|(
name|hfilePath1
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|storeFiles
operator|.
name|put
argument_list|(
name|f1
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|scope
operator|.
name|put
argument_list|(
name|f1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|hfilePath2
init|=
operator|new
name|Path
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|f2
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|hfilePath2
argument_list|)
expr_stmt|;
try|try
block|{
name|storeFilesSize
operator|.
name|put
argument_list|(
name|hfilePath2
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hfilePath2
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to calculate the size of hfile "
operator|+
name|hfilePath2
argument_list|)
expr_stmt|;
name|storeFilesSize
operator|.
name|put
argument_list|(
name|hfilePath2
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|storeFiles
operator|.
name|put
argument_list|(
name|f2
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// 2. Create bulk load descriptor
name|BulkLoadDescriptor
name|desc
init|=
name|ProtobufUtil
operator|.
name|toBulkLoadDescriptor
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|,
name|storeFiles
argument_list|,
name|storeFilesSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// 3. create bulk load wal edit event
name|WALEdit
name|logEdit
init|=
name|WALEdit
operator|.
name|createBulkLoadEvent
argument_list|(
name|hri
argument_list|,
name|desc
argument_list|)
decl_stmt|;
return|return
name|logEdit
return|;
block|}
specifier|static
class|class
name|DummyNodeFailoverWorker
extends|extends
name|Thread
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|logZnodesMap
decl_stmt|;
name|Server
name|server
decl_stmt|;
specifier|private
name|ServerName
name|deadRS
decl_stmt|;
name|ReplicationQueueStorage
name|rq
decl_stmt|;
specifier|public
name|DummyNodeFailoverWorker
parameter_list|(
name|ServerName
name|deadRS
parameter_list|,
name|Server
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|deadRS
operator|=
name|deadRS
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|rq
operator|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|logZnodesMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|rq
operator|.
name|getAllQueues
argument_list|(
name|deadRS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|pair
init|=
name|rq
operator|.
name|claimQueue
argument_list|(
name|deadRS
argument_list|,
name|queue
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
name|logZnodesMap
operator|.
name|put
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|server
operator|.
name|abort
argument_list|(
literal|"Done with testing"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception while running NodeFailoverWorker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return 1 when the map is not empty.      */
specifier|private
name|int
name|isLogZnodesMapPopulated
parameter_list|()
block|{
name|Collection
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sets
init|=
name|logZnodesMap
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|sets
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected size of logZnodesMap: "
operator|+
name|sets
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|sets
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
name|sets
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
comment|// at least one file was missing
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
literal|1
return|;
comment|// we found all the files
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|FailInitializeDummyReplicationSource
extends|extends
name|ReplicationSourceDummy
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ReplicationSourceManager
name|manager
parameter_list|,
name|ReplicationQueueStorage
name|rq
parameter_list|,
name|ReplicationPeer
name|rp
parameter_list|,
name|Server
name|server
parameter_list|,
name|String
name|peerClusterId
parameter_list|,
name|UUID
name|clusterId
parameter_list|,
name|WALFileLengthProvider
name|walFileLengthProvider
parameter_list|,
name|MetricsSource
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failing deliberately"
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|DummyServer
implements|implements
name|Server
block|{
name|String
name|hostname
decl_stmt|;
name|DummyServer
parameter_list|()
block|{
name|hostname
operator|=
literal|"hostname.example.org"
expr_stmt|;
block|}
name|DummyServer
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZKWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zkw
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoordinatedStateManager
name|getCoordinatedStateManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
literal|1234
argument_list|,
literal|1L
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|// To change body of implemented methods use File | Settings | File Templates.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
comment|// To change body of implemented methods use File | Settings | File Templates.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// To change body of implemented methods use File | Settings | File Templates.
block|}
annotation|@
name|Override
specifier|public
name|ChoreService
name|getChoreService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncClusterConnection
name|getAsyncClusterConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

