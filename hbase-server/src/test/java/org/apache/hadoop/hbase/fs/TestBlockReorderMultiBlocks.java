begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for the hdfs fix from HBASE-6435.  *  * Please don't add new subtest which involves starting / stopping MiniDFSCluster in this class.  * When stopping MiniDFSCluster, shutdown hooks would be cleared in hadoop's ShutdownHookManager  *   in hadoop 3.  * This leads to 'Failed suppression of fs shutdown hook' error in region server.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBlockReorderMultiBlocks
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBlockReorderMultiBlocks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockReorderMultiBlocks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|htu
decl_stmt|;
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host1
init|=
literal|"host1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host2
init|=
literal|"host2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|host3
init|=
literal|"host3"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|htu
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// For the test with multiple blocks
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|htu
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/r1"
block|,
literal|"/r2"
block|,
literal|"/r3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|host1
block|,
name|host2
block|,
name|host3
block|}
argument_list|)
expr_stmt|;
name|conf
operator|=
name|htu
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|htu
operator|.
name|getDFSCluster
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|htu
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that the hook works within HBase, including when there are multiple blocks.    */
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testHBaseCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|sb
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sb"
argument_list|)
decl_stmt|;
name|htu
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniHBaseCluster
name|hbm
init|=
name|htu
operator|.
name|startMiniHBaseCluster
argument_list|()
decl_stmt|;
name|hbm
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|HRegionServer
name|targetRs
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|hbm
operator|.
name|getConf
argument_list|()
argument_list|)
condition|?
name|hbm
operator|.
name|getMaster
argument_list|()
else|:
name|hbm
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// We want to have a datanode with the same name as the region server, so
comment|//  we're going to get the regionservername, and start a new datanode with this name.
name|String
name|host4
init|=
name|targetRs
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting a new datanode with the name="
operator|+
name|host4
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/r4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|host4
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
specifier|final
name|int
name|repCount
init|=
literal|3
decl_stmt|;
comment|// We use the regionserver file system& conf as we expect it to have the hook.
name|conf
operator|=
name|targetRs
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|HFileSystem
name|rfs
init|=
operator|(
name|HFileSystem
operator|)
name|targetRs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Table
name|h
init|=
name|htu
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|sb
argument_list|)
decl_stmt|;
comment|// Now, we have 4 datanodes and a replication count of 3. So we don't know if the datanode
comment|// with the same node will be used. We can't really stop an existing datanode, this would
comment|// make us fall in nasty hdfs bugs/issues. So we're going to try multiple times.
comment|// Now we need to find the log file, its locations, and look at it
name|String
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
operator|+
literal|"/"
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
operator|+
literal|"/"
operator|+
name|targetRs
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|mdfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|hbm
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|nbTest
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nbTest
operator|<
literal|10
condition|)
block|{
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|targetRs
operator|.
name|getRegions
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// listen for successful log rolls
specifier|final
name|WALActionsListener
name|listener
init|=
operator|new
name|WALActionsListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|postLogRoll
parameter_list|(
specifier|final
name|Path
name|oldPath
parameter_list|,
specifier|final
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|registerWALActionsListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|htu
operator|.
name|getAdmin
argument_list|()
operator|.
name|rollWALWriter
argument_list|(
name|targetRs
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for the wal of '"
operator|+
name|targetRs
operator|+
literal|"' to roll. If later "
operator|+
literal|"tests fail, it's probably because we should still be waiting."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getWAL
argument_list|()
operator|.
name|unregisterWALActionsListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|// We need a sleep as the namenode is informed asynchronously
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// insert one put to ensure a minimal size
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|sb
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|sb
argument_list|,
name|sb
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|DirectoryListing
name|dl
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|rootDir
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
decl_stmt|;
name|HdfsFileStatus
index|[]
name|hfs
init|=
name|dl
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
comment|// As we wrote a put, we should have at least one log file.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hfs
operator|.
name|length
operator|>=
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|HdfsFileStatus
name|hf
range|:
name|hfs
control|)
block|{
comment|// Because this is a live cluster, log files might get archived while we're processing
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log file found: "
operator|+
name|hf
operator|.
name|getLocalName
argument_list|()
operator|+
literal|" in "
operator|+
name|rootDir
argument_list|)
expr_stmt|;
name|String
name|logFile
init|=
name|rootDir
operator|+
literal|"/"
operator|+
name|hf
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|FileStatus
name|fsLog
init|=
name|rfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|logFile
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking log file: "
operator|+
name|logFile
argument_list|)
expr_stmt|;
comment|// Now checking that the hook is up and running
comment|// We can't call directly getBlockLocations, it's not available in HFileSystem
comment|// We're trying multiple times to be sure, as the order is random
name|BlockLocation
index|[]
name|bls
init|=
name|rfs
operator|.
name|getFileBlockLocations
argument_list|(
name|fsLog
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|bls
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|BlockLocation
name|bl
init|=
name|bls
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|bl
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|+
literal|" replicas for block 0 in "
operator|+
name|logFile
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bl
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|bl
operator|.
name|getHosts
argument_list|()
index|[
name|i
index|]
operator|+
literal|"    "
operator|+
name|logFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|bl
operator|.
name|getHosts
argument_list|()
index|[
name|i
index|]
argument_list|,
name|host4
argument_list|)
expr_stmt|;
block|}
name|String
name|last
init|=
name|bl
operator|.
name|getHosts
argument_list|()
index|[
name|bl
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|last
operator|+
literal|"    "
operator|+
name|logFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|host4
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
block|{
name|nbTest
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|logFile
operator|+
literal|" is on the new datanode and is ok"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bl
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
literal|3
condition|)
block|{
comment|// We can test this case from the file system as well
comment|// Checking the underlying file system. Multiple times as the order is random
name|testFromDFS
argument_list|(
name|dfs
argument_list|,
name|logFile
argument_list|,
name|repCount
argument_list|,
name|host4
argument_list|)
expr_stmt|;
comment|// now from the master
name|testFromDFS
argument_list|(
name|mdfs
argument_list|,
name|logFile
argument_list|,
name|repCount
argument_list|,
name|host4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to find log file '"
operator|+
name|hf
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"'; it probably was "
operator|+
literal|"archived out from under us so we'll ignore and retry. If this test hangs "
operator|+
literal|"indefinitely you should treat this failure as a symptom."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to find log file '"
operator|+
name|hf
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"'; it probably was "
operator|+
literal|"archived out from under us so we'll ignore and retry. If this test hangs "
operator|+
literal|"indefinitely you should treat this failure as a symptom."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|exception
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|testFromDFS
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
name|src
parameter_list|,
name|int
name|repCount
parameter_list|,
name|String
name|localhost
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Multiple times as the order is random
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlocks
name|l
decl_stmt|;
comment|// The NN gets the block list asynchronously, so we may need multiple tries to get the list
specifier|final
name|long
name|max
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
name|boolean
name|done
decl_stmt|;
do|do
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Can't get enouth replica."
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|max
argument_list|)
expr_stmt|;
name|l
operator|=
name|getNamenode
argument_list|(
name|dfs
operator|.
name|getClient
argument_list|()
argument_list|)
operator|.
name|getBlockLocations
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Can't get block locations for "
operator|+
name|src
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|l
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|done
condition|;
name|y
operator|++
control|)
block|{
name|done
operator|=
operator|(
name|l
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|==
name|repCount
operator|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|done
condition|)
do|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|l
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|done
condition|;
name|y
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localhost
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getLocations
argument_list|()
index|[
name|repCount
operator|-
literal|1
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|ClientProtocol
name|getNamenode
parameter_list|(
name|DFSClient
name|dfsc
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|nf
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"namenode"
argument_list|)
decl_stmt|;
name|nf
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|ClientProtocol
operator|)
name|nf
operator|.
name|get
argument_list|(
name|dfsc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

