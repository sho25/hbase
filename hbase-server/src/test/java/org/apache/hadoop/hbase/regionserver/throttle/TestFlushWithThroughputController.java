begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFlushWithThroughputController
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFlushWithThroughputController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1E
operator|-
literal|6
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
name|Store
name|getStoreWithName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rsts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|hrs
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
return|return
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Store
name|generateAndFlushData
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|256
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
literal|10
operator|+
name|j
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|getStoreWithName
argument_list|(
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|long
name|testFlushWithThroughputLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|throughputLimit
init|=
literal|1L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushThroughputControllerFactory
operator|.
name|HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY
argument_list|,
name|PressureAwareFlushThroughputController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_LOWER_BOUND
argument_list|,
name|throughputLimit
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_UPPER_BOUND
argument_list|,
name|throughputLimit
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_THROUGHPUT_CONTROL_CHECK_INTERVAL
argument_list|,
name|throughputLimit
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|generateAndFlushData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|double
name|throughput
init|=
operator|(
name|double
operator|)
name|store
operator|.
name|getStorefilesSize
argument_list|()
operator|/
name|duration
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Throughput is: "
operator|+
operator|(
name|throughput
operator|/
literal|1024
operator|/
literal|1024
operator|)
operator|+
literal|" MB/s"
argument_list|)
expr_stmt|;
comment|// confirm that the speed limit work properly(not too fast, and also not too slow)
comment|// 20% is the max acceptable error rate.
name|assertTrue
argument_list|(
name|throughput
operator|<
name|throughputLimit
operator|*
literal|1.2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throughput
operator|>
name|throughputLimit
operator|*
literal|0.8
argument_list|)
expr_stmt|;
return|return
name|duration
return|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|testFlushWithoutThroughputLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushThroughputControllerFactory
operator|.
name|HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY
argument_list|,
name|NoLimitThroughputController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|generateAndFlushData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|double
name|throughput
init|=
operator|(
name|double
operator|)
name|store
operator|.
name|getStorefilesSize
argument_list|()
operator|/
name|duration
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Throughput w/o limit is: "
operator|+
operator|(
name|throughput
operator|/
literal|1024
operator|/
literal|1024
operator|)
operator|+
literal|" MB/s"
argument_list|)
expr_stmt|;
return|return
name|duration
return|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushControl
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|limitTime
init|=
name|testFlushWithThroughputLimit
argument_list|()
decl_stmt|;
name|long
name|noLimitTime
init|=
name|testFlushWithoutThroughputLimit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"With 1M/s limit, flush use "
operator|+
operator|(
name|limitTime
operator|/
literal|1000000
operator|)
operator|+
literal|"ms; without limit, flush use "
operator|+
operator|(
name|noLimitTime
operator|/
literal|1000000
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
comment|// Commonly if multiple region flush at the same time, the throughput could be very high
comment|// but flush in this test is in serial, so we use a weak assumption.
name|assertTrue
argument_list|(
name|limitTime
operator|>
literal|2
operator|*
name|noLimitTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the tuning task of {@link PressureAwareFlushThroughputController}    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushThroughputTuning
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StoreEngine
operator|.
name|STORE_ENGINE_CLASS_KEY
argument_list|,
name|DefaultStoreEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_UPPER_BOUND
argument_list|,
literal|20L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_MAX_THROUGHPUT_LOWER_BOUND
argument_list|,
literal|10L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushThroughputControllerFactory
operator|.
name|HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY
argument_list|,
name|PressureAwareFlushThroughputController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|PressureAwareFlushThroughputController
operator|.
name|HBASE_HSTORE_FLUSH_THROUGHPUT_TUNE_PERIOD
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setCompactionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|PressureAwareFlushThroughputController
name|throughputController
init|=
operator|(
name|PressureAwareFlushThroughputController
operator|)
name|regionServer
operator|.
name|getFlushThroughputController
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regionServer
operator|.
name|getOnlineRegions
argument_list|()
control|)
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|regionServer
operator|.
name|getFlushPressure
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|throughputController
operator|.
name|getMaxThroughput
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|256
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
literal|10
operator|+
name|j
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|double
name|expectedThroughPut
init|=
literal|10L
operator|*
literal|1024
operator|*
literal|1024
operator|*
operator|(
literal|1
operator|+
name|regionServer
operator|.
name|getFlushPressure
argument_list|()
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedThroughPut
argument_list|,
name|throughputController
operator|.
name|getMaxThroughput
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushThroughputControllerFactory
operator|.
name|HBASE_FLUSH_THROUGHPUT_CONTROLLER_KEY
argument_list|,
name|NoLimitThroughputController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regionServer
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throughputController
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionServer
operator|.
name|getFlushThroughputController
argument_list|()
operator|instanceof
name|NoLimitThroughputController
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the logic for striped store.    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushControlForStripedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|StoreEngine
operator|.
name|STORE_ENGINE_CLASS_KEY
argument_list|,
name|StripeStoreEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|testFlushControl
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

