begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Unit test version of rs metrics tests.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetricsHeapMemoryManager
block|{
specifier|public
specifier|static
name|MetricsAssertHelper
name|HELPER
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MetricsHeapMemoryManager
name|hmm
decl_stmt|;
specifier|private
name|MetricsHeapMemoryManagerSource
name|source
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|hmm
operator|=
operator|new
name|MetricsHeapMemoryManager
argument_list|()
expr_stmt|;
name|source
operator|=
name|hmm
operator|.
name|getMetricsSource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstuctor
parameter_list|()
block|{
name|assertNotNull
argument_list|(
literal|"There should be a hadoop1/hadoop2 metrics source"
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCounter
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|hmm
operator|.
name|increaseAboveHeapOccupancyLowWatermarkCounter
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|hmm
operator|.
name|increaseTunerDoNothingCounter
argument_list|()
expr_stmt|;
block|}
name|HELPER
operator|.
name|assertCounter
argument_list|(
literal|"aboveHeapOccupancyLowWaterMarkCounter"
argument_list|,
literal|10L
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|HELPER
operator|.
name|assertCounter
argument_list|(
literal|"tunerDoNothingCounter"
argument_list|,
literal|11L
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGauge
parameter_list|()
block|{
name|hmm
operator|.
name|updateBlockedFlushCount
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|hmm
operator|.
name|updateUnblockedFlushCount
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|hmm
operator|.
name|setCurMemStoreSizeGauge
argument_list|(
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|hmm
operator|.
name|setCurBlockCacheSizeGauge
argument_list|(
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|HELPER
operator|.
name|assertGauge
argument_list|(
literal|"blockedFlushGauge"
argument_list|,
literal|200
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|HELPER
operator|.
name|assertGauge
argument_list|(
literal|"unblockedFlushGauge"
argument_list|,
literal|50
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|HELPER
operator|.
name|assertGauge
argument_list|(
literal|"memStoreSize"
argument_list|,
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|HELPER
operator|.
name|assertGauge
argument_list|(
literal|"blockCacheSize"
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

