begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestExpiredMobFileCleaner
block|{
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestExpiredMobFileCleaner"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|family
init|=
literal|"family"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BufferedMutator
name|table
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|admin
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{    }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|getBufferedMutator
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|modifyColumnExpiryDays
parameter_list|(
name|int
name|expireDays
parameter_list|)
throws|throws
name|Exception
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
comment|// change ttl as expire days to make some row expired
name|int
name|timeToLive
init|=
name|expireDays
operator|*
name|secondsOfDay
argument_list|()
decl_stmt|;
name|hcd
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putKVAndFlush
parameter_list|(
name|BufferedMutator
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|qf
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flush
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a 3 day old hfile and an 1 day old hfile then sets expiry to 2 days.    * Verifies that the 3 day old hfile is removed but the 1 day one is still present    * after the expiry based cleaner is run.    */
annotation|@
name|Test
specifier|public
name|void
name|testCleaner
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dummyData
init|=
name|makeDummyData
argument_list|(
literal|600
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|3
operator|*
name|secondsOfDay
argument_list|()
operator|*
literal|1000
decl_stmt|;
comment|// 3 days before
name|putKVAndFlush
argument_list|(
name|table
argument_list|,
name|row1
argument_list|,
name|dummyData
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|firstFiles
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
comment|//the first mob file
name|assertEquals
argument_list|(
literal|"Before cleanup without delay 1"
argument_list|,
literal|1
argument_list|,
name|firstFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|firstFile
init|=
name|firstFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ts
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1
operator|*
name|secondsOfDay
argument_list|()
operator|*
literal|1000
expr_stmt|;
comment|// 1 day before
name|putKVAndFlush
argument_list|(
name|table
argument_list|,
name|row2
argument_list|,
name|dummyData
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|secondFiles
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
comment|//now there are 2 mob files
name|assertEquals
argument_list|(
literal|"Before cleanup without delay 2"
argument_list|,
literal|2
argument_list|,
name|secondFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|f1
init|=
name|secondFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|f2
init|=
name|secondFiles
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|secondFile
init|=
name|f1
operator|.
name|equals
argument_list|(
name|firstFile
argument_list|)
condition|?
name|f2
else|:
name|f1
decl_stmt|;
name|modifyColumnExpiryDays
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// ttl = 2, make the first row expired
comment|//run the cleaner
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|tableName
operator|.
name|getNameAsString
argument_list|()
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|family
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|ExpiredMobFileCleaner
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|filesAfterClean
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
name|String
name|lastFile
init|=
name|filesAfterClean
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//the first mob fie is removed
name|assertEquals
argument_list|(
literal|"After cleanup without delay 1"
argument_list|,
literal|1
argument_list|,
name|filesAfterClean
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After cleanup without delay 2"
argument_list|,
name|secondFile
argument_list|,
name|lastFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|secondsOfDay
parameter_list|()
block|{
return|return
literal|24
operator|*
literal|3600
return|;
block|}
specifier|private
name|byte
index|[]
name|makeDummyData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|dummyData
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|dummyData
argument_list|)
expr_stmt|;
return|return
name|dummyData
return|;
block|}
block|}
end_class

end_unit

