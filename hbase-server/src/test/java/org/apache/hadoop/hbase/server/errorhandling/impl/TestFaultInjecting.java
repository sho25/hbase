begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionCheckable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|FaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test that we can correctly inject faults for testing  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
class|class
name|TestFaultInjecting
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFaultInjecting
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ExceptionVisitor
argument_list|<
name|ExceptionListener
argument_list|>
name|VISITOR
init|=
operator|new
name|ExceptionVisitor
argument_list|<
name|ExceptionListener
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|ExceptionListener
name|listener
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
name|listener
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleFaultInjection
parameter_list|()
block|{
name|ExceptionDispatcherFactory
argument_list|<
name|ExceptionListener
argument_list|>
name|factory
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|ExceptionDispatcherFactory
argument_list|<
name|ExceptionListener
argument_list|>
argument_list|(
name|TestFaultInjecting
operator|.
name|VISITOR
argument_list|)
argument_list|)
decl_stmt|;
name|ExceptionDispatcher
argument_list|<
name|ExceptionListener
argument_list|,
name|Exception
argument_list|>
name|dispatcher
init|=
operator|new
name|ExceptionDispatcher
argument_list|<
name|ExceptionListener
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|factory
operator|.
name|buildErrorHandler
argument_list|(
name|VISITOR
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|String
name|info
init|=
literal|"info"
decl_stmt|;
name|ExceptionOrchestratorFactory
operator|.
name|addFaultInjector
argument_list|(
operator|new
name|StringFaultInjector
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|ExceptionCheckable
argument_list|<
name|Exception
argument_list|>
name|monitor
init|=
name|factory
operator|.
name|createErrorHandler
argument_list|()
decl_stmt|;
comment|// make sure we wrap the dispatcher with the fault injection
name|assertNotSame
argument_list|(
name|dispatcher
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
comment|// test that we actually inject a fault
name|assertTrue
argument_list|(
literal|"Monitor didn't get an injected error"
argument_list|,
name|monitor
operator|.
name|checkForError
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Monitor didn't get an exception from the fault injected in the factory."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionForTesting
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Correctly got an exception from the test!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got an unexpected exception:"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Fault injector that will always throw a string error    */
specifier|public
specifier|static
class|class
name|StringFaultInjector
implements|implements
name|FaultInjector
argument_list|<
name|ExceptionForTesting
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|info
decl_stmt|;
specifier|public
name|StringFaultInjector
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|ExceptionForTesting
argument_list|,
name|Object
index|[]
argument_list|>
name|injectFault
parameter_list|(
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
if|if
condition|(
name|ExceptionTestingUtils
operator|.
name|stackContainsClass
argument_list|(
name|trace
argument_list|,
name|TestFaultInjecting
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|ExceptionForTesting
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|(
operator|new
name|ExceptionForTesting
argument_list|(
literal|"injected!"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|info
block|}
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

