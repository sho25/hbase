begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketAllocator
operator|.
name|BucketSizeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketAllocator
operator|.
name|IndexStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Basic test of BucketCache.Puts and gets.  *<p>  * Tests will ensure that blocks' data correctness under several threads  * concurrency  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBucketCache
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBucketCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|BucketCache
name|cache
decl_stmt|;
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|1000000
decl_stmt|;
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CACHE_SIZE
operator|/
name|NUM_BLOCKS
decl_stmt|;
specifier|final
name|int
name|NUM_THREADS
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|NUM_QUERIES
init|=
literal|10000
decl_stmt|;
specifier|final
name|long
name|capacitySize
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|writeThreads
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_THREADS
decl_stmt|;
specifier|final
name|int
name|writerQLen
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_QUEUE_ITEMS
decl_stmt|;
name|String
name|ioEngineName
init|=
literal|"heap"
decl_stmt|;
name|String
name|persistencePath
init|=
literal|null
decl_stmt|;
specifier|private
class|class
name|MockedBucketCache
extends|extends
name|BucketCache
block|{
specifier|public
name|MockedBucketCache
parameter_list|(
name|String
name|ioEngineName
parameter_list|,
name|long
name|capacity
parameter_list|,
name|int
name|writerThreads
parameter_list|,
name|int
name|writerQLen
parameter_list|,
name|String
name|persistencePath
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|ioEngineName
argument_list|,
name|capacity
argument_list|,
name|writerThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
name|super
operator|.
name|wait_when_cache
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cacheBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|getBlock
argument_list|(
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cached an already cached block"
argument_list|)
throw|;
block|}
name|super
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|buf
argument_list|,
name|inMemory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cacheBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|getBlock
argument_list|(
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cached an already cached block"
argument_list|)
throw|;
block|}
name|super
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|cache
operator|=
operator|new
name|MockedBucketCache
argument_list|(
name|ioEngineName
argument_list|,
name|capacitySize
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketAllocator
parameter_list|()
throws|throws
name|BucketAllocatorException
block|{
name|BucketAllocator
name|mAllocator
init|=
name|cache
operator|.
name|getAllocator
argument_list|()
decl_stmt|;
comment|/*      * Test the allocator first      */
name|int
index|[]
name|blockSizes
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|blockSizes
index|[
literal|0
index|]
operator|=
literal|4
operator|*
literal|1024
expr_stmt|;
name|blockSizes
index|[
literal|1
index|]
operator|=
literal|8
operator|*
literal|1024
expr_stmt|;
name|boolean
name|full
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|allocations
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Fill the allocated extents
while|while
condition|(
operator|!
name|full
condition|)
block|{
try|try
block|{
name|allocations
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|mAllocator
operator|.
name|allocateBlock
argument_list|(
name|blockSizes
index|[
name|i
operator|%
name|blockSizes
operator|.
name|length
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CacheFullException
name|cfe
parameter_list|)
block|{
name|full
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|blockSizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BucketSizeInfo
name|bucketSizeInfo
init|=
name|mAllocator
operator|.
name|roundUpToBucketSizeInfo
argument_list|(
name|blockSizes
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|IndexStatistics
name|indexStatistics
init|=
name|bucketSizeInfo
operator|.
name|statistics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|indexStatistics
operator|.
name|freeCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|offset
range|:
name|allocations
control|)
block|{
name|assertTrue
argument_list|(
name|mAllocator
operator|.
name|sizeOfAllocation
argument_list|(
name|offset
argument_list|)
operator|==
name|mAllocator
operator|.
name|freeBlock
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mAllocator
operator|.
name|getUsedSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheTestUtils
operator|.
name|testCacheSimple
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|NUM_QUERIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheMultiThreadedSingleKey
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheTestUtils
operator|.
name|hammerSingleKey
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|NUM_THREADS
argument_list|,
name|NUM_QUERIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSizeChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|stopWriterThreads
argument_list|()
expr_stmt|;
name|CacheTestUtils
operator|.
name|testHeapSizeChanges
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

