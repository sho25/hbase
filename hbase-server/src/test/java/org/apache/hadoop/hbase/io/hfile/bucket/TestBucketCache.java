begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheTestUtils
operator|.
name|HFileBlockPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketAllocator
operator|.
name|BucketSizeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketAllocator
operator|.
name|IndexStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Basic test of BucketCache.Puts and gets.  *<p>  * Tests will ensure that blocks' data correctness under several threads concurrency  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBucketCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBucketCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: blockSize={0}, bucketSizes={1}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|8192
block|,
literal|null
block|}
block|,
comment|// TODO: why is 8k the default blocksize for these tests?
block|{
literal|16
operator|*
literal|1024
block|,
operator|new
name|int
index|[]
block|{
literal|2
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|4
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|8
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|16
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|28
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|32
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|64
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|96
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|128
operator|*
literal|1024
operator|+
literal|1024
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|int
name|constructedBlockSize
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|int
index|[]
name|constructedBlockSizes
decl_stmt|;
name|BucketCache
name|cache
decl_stmt|;
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|1000000
decl_stmt|;
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CACHE_SIZE
operator|/
name|NUM_BLOCKS
decl_stmt|;
specifier|final
name|int
name|NUM_THREADS
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|NUM_QUERIES
init|=
literal|10000
decl_stmt|;
specifier|final
name|long
name|capacitySize
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|writeThreads
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_THREADS
decl_stmt|;
specifier|final
name|int
name|writerQLen
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_QUEUE_ITEMS
decl_stmt|;
name|String
name|ioEngineName
init|=
literal|"offheap"
decl_stmt|;
name|String
name|persistencePath
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
class|class
name|MockedBucketCache
extends|extends
name|BucketCache
block|{
specifier|public
name|MockedBucketCache
parameter_list|(
name|String
name|ioEngineName
parameter_list|,
name|long
name|capacity
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|int
index|[]
name|bucketSizes
parameter_list|,
name|int
name|writerThreads
parameter_list|,
name|int
name|writerQLen
parameter_list|,
name|String
name|persistencePath
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|ioEngineName
argument_list|,
name|capacity
argument_list|,
name|blockSize
argument_list|,
name|bucketSizes
argument_list|,
name|writerThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
name|super
operator|.
name|wait_when_cache
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cacheBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|getBlock
argument_list|(
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cached an already cached block"
argument_list|)
throw|;
block|}
name|super
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|buf
argument_list|,
name|inMemory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cacheBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|getBlock
argument_list|(
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cached an already cached block"
argument_list|)
throw|;
block|}
name|super
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|cache
operator|=
operator|new
name|MockedBucketCache
argument_list|(
name|ioEngineName
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return a random element from {@code a}.    */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randFrom
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|get
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketAllocator
parameter_list|()
throws|throws
name|BucketAllocatorException
block|{
name|BucketAllocator
name|mAllocator
init|=
name|cache
operator|.
name|getAllocator
argument_list|()
decl_stmt|;
comment|/*      * Test the allocator first      */
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|BLOCKSIZES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|8
operator|*
literal|1024
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
literal|96
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|boolean
name|full
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|allocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Fill the allocated extents by choosing a random blocksize. Continues selecting blocks until
comment|// the cache is completely filled.
name|List
argument_list|<
name|Integer
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BLOCKSIZES
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|full
condition|)
block|{
name|Integer
name|blockSize
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockSize
operator|=
name|randFrom
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|allocations
operator|.
name|add
argument_list|(
name|mAllocator
operator|.
name|allocateBlock
argument_list|(
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CacheFullException
name|cfe
parameter_list|)
block|{
name|tmp
operator|.
name|remove
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
name|full
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|Integer
name|blockSize
range|:
name|BLOCKSIZES
control|)
block|{
name|BucketSizeInfo
name|bucketSizeInfo
init|=
name|mAllocator
operator|.
name|roundUpToBucketSizeInfo
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|IndexStatistics
name|indexStatistics
init|=
name|bucketSizeInfo
operator|.
name|statistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected freeCount for "
operator|+
name|bucketSizeInfo
argument_list|,
literal|0
argument_list|,
name|indexStatistics
operator|.
name|freeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|offset
range|:
name|allocations
control|)
block|{
name|assertEquals
argument_list|(
name|mAllocator
operator|.
name|sizeOfAllocation
argument_list|(
name|offset
argument_list|)
argument_list|,
name|mAllocator
operator|.
name|freeBlock
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mAllocator
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheTestUtils
operator|.
name|testCacheSimple
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|NUM_QUERIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheMultiThreadedSingleKey
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheTestUtils
operator|.
name|hammerSingleKey
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|2
operator|*
name|NUM_THREADS
argument_list|,
literal|2
operator|*
name|NUM_QUERIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSizeChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|stopWriterThreads
argument_list|()
expr_stmt|;
name|CacheTestUtils
operator|.
name|testHeapSizeChanges
argument_list|(
name|cache
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
comment|// BucketCache.cacheBlock is async, it first adds block to ramCache and writeQueue, then writer
comment|// threads will flush it to the bucket and put reference entry in backingMap.
specifier|private
name|void
name|cacheAndWaitUntilFlushedToBucket
parameter_list|(
name|BucketCache
name|cache
parameter_list|,
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|block
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|cache
operator|.
name|backingMap
operator|.
name|containsKey
argument_list|(
name|cacheKey
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemoryLeak
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
literal|"dummy"
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|cache
argument_list|,
name|cacheKey
argument_list|,
operator|new
name|CacheTestUtils
operator|.
name|ByteArrayCacheable
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lockId
init|=
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
operator|.
name|offset
argument_list|()
decl_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
name|cache
operator|.
name|offsetLock
operator|.
name|getLock
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Thread
name|evictThread
init|=
operator|new
name|Thread
argument_list|(
literal|"evict-block"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|evictBlock
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|evictThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|cache
operator|.
name|offsetLock
operator|.
name|waitForWaiters
argument_list|(
name|lockId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|blockEvicted
argument_list|(
name|cacheKey
argument_list|,
name|cache
operator|.
name|backingMap
operator|.
name|remove
argument_list|(
name|cacheKey
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|cache
argument_list|,
name|cacheKey
argument_list|,
operator|new
name|CacheTestUtils
operator|.
name|ByteArrayCacheable
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|evictThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|getCurrentSize
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should have a block!"
argument_list|,
name|cache
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveFromFile
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|BucketCache
name|bucketCache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
decl_stmt|;
name|long
name|usedSize
init|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|HFileBlockPair
index|[]
name|blocks
init|=
name|CacheTestUtils
operator|.
name|generateHFileBlocks
argument_list|(
name|constructedBlockSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Add blocks
for|for
control|(
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|bucketCache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|bucketCache
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|usedSize
operator|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|usedSize
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reconfig buckets sizes, the biggest bucket is small than constructedBlockSize (8k or 16k)
comment|// so it can't restore cache from file
name|int
index|[]
name|smallBucketSizes
init|=
operator|new
name|int
index|[]
block|{
literal|2
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|4
operator|*
literal|1024
operator|+
literal|1024
block|}
decl_stmt|;
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|smallBucketSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|backingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketAllocatorLargeBuckets
parameter_list|()
throws|throws
name|BucketAllocatorException
block|{
name|long
name|availableSpace
init|=
literal|20
operator|*
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
index|[]
name|bucketSizes
init|=
operator|new
name|int
index|[]
block|{
literal|1024
block|,
literal|1024
operator|*
literal|1024
block|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024
block|}
decl_stmt|;
name|BucketAllocator
name|allocator
init|=
operator|new
name|BucketAllocator
argument_list|(
name|availableSpace
argument_list|,
name|bucketSizes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|allocator
operator|.
name|getBuckets
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionSize
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test default values
name|validateGetPartitionSize
argument_list|(
name|cache
argument_list|,
name|BucketCache
operator|.
name|DEFAULT_SINGLE_FACTOR
argument_list|,
name|BucketCache
operator|.
name|DEFAULT_MIN_FACTOR
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MIN_FACTOR_CONFIG_NAME
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|SINGLE_FACTOR_CONFIG_NAME
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MULTI_FACTOR_CONFIG_NAME
argument_list|,
literal|0.7f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MEMORY_FACTOR_CONFIG_NAME
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|BucketCache
name|cache
init|=
operator|new
name|BucketCache
argument_list|(
name|ioEngineName
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|,
literal|100
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|validateGetPartitionSize
argument_list|(
name|cache
argument_list|,
literal|0.1f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|validateGetPartitionSize
argument_list|(
name|cache
argument_list|,
literal|0.7f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|validateGetPartitionSize
argument_list|(
name|cache
argument_list|,
literal|0.2f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidBucketCacheConfigs
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|ACCEPT_FACTOR_CONFIG_NAME
argument_list|,
literal|0.9f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MIN_FACTOR_CONFIG_NAME
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|EXTRA_FREE_FACTOR_CONFIG_NAME
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|SINGLE_FACTOR_CONFIG_NAME
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MULTI_FACTOR_CONFIG_NAME
argument_list|,
literal|0.7f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BucketCache
operator|.
name|MEMORY_FACTOR_CONFIG_NAME
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|BucketCache
name|cache
init|=
operator|new
name|BucketCache
argument_list|(
name|ioEngineName
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|,
literal|100
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|ACCEPT_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.9f
argument_list|,
name|cache
operator|.
name|getAcceptableFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|MIN_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.5f
argument_list|,
name|cache
operator|.
name|getMinFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|EXTRA_FREE_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.5f
argument_list|,
name|cache
operator|.
name|getExtraFreeFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|SINGLE_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.1f
argument_list|,
name|cache
operator|.
name|getSingleFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|MULTI_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.7f
argument_list|,
name|cache
operator|.
name|getMultiFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BucketCache
operator|.
name|MEMORY_FACTOR_CONFIG_NAME
operator|+
literal|" failed to propagate."
argument_list|,
literal|0.2f
argument_list|,
name|cache
operator|.
name|getMemoryFactor
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidAcceptFactorConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|float
index|[]
name|configValues
init|=
block|{
operator|-
literal|1f
block|,
literal|0.2f
block|,
literal|0.86f
block|,
literal|1.05f
block|}
decl_stmt|;
name|boolean
index|[]
name|expectedOutcomes
init|=
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|float
index|[]
argument_list|>
name|configMappings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|BucketCache
operator|.
name|ACCEPT_FACTOR_CONFIG_NAME
argument_list|,
name|configValues
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|checkConfigValues
argument_list|(
name|conf
argument_list|,
name|configMappings
argument_list|,
name|expectedOutcomes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidMinFactorConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|float
index|[]
name|configValues
init|=
block|{
operator|-
literal|1f
block|,
literal|0f
block|,
literal|0.96f
block|,
literal|1.05f
block|}
decl_stmt|;
comment|//throws due to<0, in expected range, minFactor> acceptableFactor,> 1.0
name|boolean
index|[]
name|expectedOutcomes
init|=
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|float
index|[]
argument_list|>
name|configMappings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|BucketCache
operator|.
name|MIN_FACTOR_CONFIG_NAME
argument_list|,
name|configValues
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|checkConfigValues
argument_list|(
name|conf
argument_list|,
name|configMappings
argument_list|,
name|expectedOutcomes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidExtraFreeFactorConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|float
index|[]
name|configValues
init|=
block|{
operator|-
literal|1f
block|,
literal|0f
block|,
literal|0.2f
block|,
literal|1.05f
block|}
decl_stmt|;
comment|//throws due to<0, in expected range, in expected range, config can be> 1.0
name|boolean
index|[]
name|expectedOutcomes
init|=
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|float
index|[]
argument_list|>
name|configMappings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|BucketCache
operator|.
name|EXTRA_FREE_FACTOR_CONFIG_NAME
argument_list|,
name|configValues
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|checkConfigValues
argument_list|(
name|conf
argument_list|,
name|configMappings
argument_list|,
name|expectedOutcomes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidCacheSplitFactorConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|float
index|[]
name|singleFactorConfigValues
init|=
block|{
literal|0.2f
block|,
literal|0f
block|,
operator|-
literal|0.2f
block|,
literal|1f
block|}
decl_stmt|;
name|float
index|[]
name|multiFactorConfigValues
init|=
block|{
literal|0.4f
block|,
literal|0f
block|,
literal|1f
block|,
literal|.05f
block|}
decl_stmt|;
name|float
index|[]
name|memoryFactorConfigValues
init|=
block|{
literal|0.4f
block|,
literal|0f
block|,
literal|0.2f
block|,
literal|.5f
block|}
decl_stmt|;
comment|// All configs add up to 1.0 and are between 0 and 1.0, configs don't add to 1.0, configs can't be negative, configs don't add to 1.0
name|boolean
index|[]
name|expectedOutcomes
init|=
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|float
index|[]
argument_list|>
name|configMappings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|BucketCache
operator|.
name|SINGLE_FACTOR_CONFIG_NAME
argument_list|,
name|singleFactorConfigValues
argument_list|,
name|BucketCache
operator|.
name|MULTI_FACTOR_CONFIG_NAME
argument_list|,
name|multiFactorConfigValues
argument_list|,
name|BucketCache
operator|.
name|MEMORY_FACTOR_CONFIG_NAME
argument_list|,
name|memoryFactorConfigValues
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|checkConfigValues
argument_list|(
name|conf
argument_list|,
name|configMappings
argument_list|,
name|expectedOutcomes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkConfigValues
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|float
index|[]
argument_list|>
name|configMap
parameter_list|,
name|boolean
index|[]
name|expectSuccess
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|configNames
init|=
name|configMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectSuccess
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
for|for
control|(
name|String
name|configName
range|:
name|configNames
control|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|configName
argument_list|,
name|configMap
operator|.
name|get
argument_list|(
name|configName
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|BucketCache
name|cache
init|=
operator|new
name|BucketCache
argument_list|(
name|ioEngineName
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|,
literal|100
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Created BucketCache and expected it to succeed: "
operator|+
name|expectSuccess
index|[
name|i
index|]
operator|+
literal|", but it actually was: "
operator|+
operator|!
name|expectSuccess
index|[
name|i
index|]
argument_list|,
name|expectSuccess
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Created BucketCache and expected it to succeed: "
operator|+
name|expectSuccess
index|[
name|i
index|]
operator|+
literal|", but it actually was: "
operator|+
operator|!
name|expectSuccess
index|[
name|i
index|]
argument_list|,
name|expectSuccess
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|validateGetPartitionSize
parameter_list|(
name|BucketCache
name|bucketCache
parameter_list|,
name|float
name|partitionFactor
parameter_list|,
name|float
name|minFactor
parameter_list|)
block|{
name|long
name|expectedOutput
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getTotalSize
argument_list|()
operator|*
name|partitionFactor
operator|*
name|minFactor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOutput
argument_list|,
name|bucketCache
operator|.
name|getPartitionSize
argument_list|(
name|partitionFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOffsetProducesPositiveOutput
parameter_list|()
block|{
comment|//This number is picked because it produces negative output if the values isn't ensured to be positive.
comment|//See HBASE-18757 for more information.
name|long
name|testValue
init|=
literal|549888460800L
decl_stmt|;
name|BucketCache
operator|.
name|BucketEntry
name|bucketEntry
init|=
operator|new
name|BucketCache
operator|.
name|BucketEntry
argument_list|(
name|testValue
argument_list|,
literal|10
argument_list|,
literal|10L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testValue
argument_list|,
name|bucketEntry
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

