begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_comment
comment|/**  * These tests verify that the RPC timeouts ('hbase.client.operation.timeout' and  * 'hbase.client.scanner.timeout.period') work correctly using a modified Region Server which  * injects delays to get, scan and mutate operations.  *  * When 'hbase.client.operation.timeout' is set and client operation is not completed in time the  * client will retry the operation 'hbase.client.retries.number' times. After that  * {@link SocketTimeoutException} will be thrown.  *  * Using 'hbase.client.scanner.timeout.period' configuration property similar behavior can be  * specified for scan related operations such as openScanner(), next(). If that times out  * {@link RetriesExhaustedException} will be thrown.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestClientOperationTimeout
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestClientOperationTimeout
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TESTING_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Activate the delays after table creation to test get/scan/put
specifier|private
specifier|static
name|int
name|DELAY_GET
decl_stmt|;
specifier|private
specifier|static
name|int
name|DELAY_SCAN
decl_stmt|;
specifier|private
specifier|static
name|int
name|DELAY_MUTATE
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_META_OPERATION_TIMEOUT
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DelayedRegionServer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|DELAY_GET
operator|=
literal|0
expr_stmt|;
name|DELAY_SCAN
operator|=
literal|0
expr_stmt|;
name|DELAY_MUTATE
operator|=
literal|0
expr_stmt|;
name|table
operator|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests that a get on a table throws {@link SocketTimeoutException} when the operation takes    * longer than 'hbase.client.operation.timeout'.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SocketTimeoutException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|DELAY_GET
operator|=
literal|600
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a put on a table throws {@link SocketTimeoutException} when the operation takes    * longer than 'hbase.client.operation.timeout'.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SocketTimeoutException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPutTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|DELAY_MUTATE
operator|=
literal|600
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that scan on a table throws {@link RetriesExhaustedException} when the operation takes    * longer than 'hbase.client.scanner.timeout.period'.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RetriesExhaustedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testScanTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|DELAY_SCAN
operator|=
literal|600
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DelayedRegionServer
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
block|{
specifier|public
name|DelayedRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RSRpcServices
name|createRpcServices
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DelayedRSRpcServices
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * This {@link RSRpcServices} class injects delay for Rpc calls and after executes super methods.    */
specifier|public
specifier|static
class|class
name|DelayedRSRpcServices
extends|extends
name|RSRpcServices
block|{
name|DelayedRSRpcServices
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|GetResponse
name|get
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ClientProtos
operator|.
name|GetRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DELAY_GET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sleep interrupted during get operation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|get
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|MutateResponse
name|mutate
parameter_list|(
name|RpcController
name|rpcc
parameter_list|,
name|ClientProtos
operator|.
name|MutateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DELAY_MUTATE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sleep interrupted during mutate operation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|mutate
argument_list|(
name|rpcc
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|ScanResponse
name|scan
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ClientProtos
operator|.
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DELAY_SCAN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sleep interrupted during scan operation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|scan
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

