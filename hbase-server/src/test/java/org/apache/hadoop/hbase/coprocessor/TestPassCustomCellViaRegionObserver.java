begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPassCustomCellViaRegionObserver
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestPassCustomCellViaRegionObserver
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|Table
name|table
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ROW"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"FAMILY"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"QUALIFIER"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|APPEND_VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_FROM_CP
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"QUALIFIER_FROM_CP"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// small retry number can speed up the failed tests.
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|clearTable
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionObserverImpl
operator|.
name|COUNT
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
for|for
control|(
name|TableName
name|name
range|:
name|admin
operator|.
name|listTableNames
argument_list|()
control|)
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
name|admin
operator|.
name|deleteTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|table
operator|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
operator|.
name|setCoprocessor
argument_list|(
name|RegionObserverImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|VALUE
decl_stmt|;
name|assertResult
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// QUALIFIER -> 10 (put) + 10 (increment)
comment|// QUALIFIER_FROM_CP -> 10 (from cp's put) + 10 (from cp's increment)
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|20L
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|APPEND_VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
comment|// 10L + "MB"
name|value
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
name|value
operator|.
name|length
operator|+
name|APPEND_VALUE
operator|.
name|length
index|]
argument_list|)
operator|.
name|put
argument_list|(
name|value
argument_list|)
operator|.
name|put
argument_list|(
name|APPEND_VALUE
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|assertResult
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|rawCells
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPut
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertObserverHasExecuted
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertObserverHasExecuted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|RegionObserverImpl
operator|.
name|COUNT
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|expectedValue
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|FAMILY
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|expectedValue
parameter_list|,
name|byte
index|[]
name|expectedFromCp
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|FAMILY
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|QUALIFIER
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|QUALIFIER_FROM_CP
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|expectedFromCp
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"No valid qualifier"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Cell
name|createCustomCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Cell
operator|.
name|Type
name|type
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|private
name|byte
index|[]
name|getArray
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
return|return
name|array
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|array
return|;
block|}
specifier|private
name|int
name|length
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
return|return
name|array
operator|==
literal|null
condition|?
literal|0
else|:
name|array
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|getArray
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|length
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|getArray
argument_list|(
name|family
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|length
argument_list|(
name|family
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|getArray
argument_list|(
name|qualifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|length
argument_list|(
name|qualifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|LATEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|type
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|getArray
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|length
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
return|return
name|KeyValueUtil
operator|.
name|getSerializedSize
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|getArray
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
name|length
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Cell
name|createCustomCell
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|createCustomCell
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER_FROM_CP
argument_list|,
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|VALUE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Cell
name|createCustomCell
parameter_list|(
name|Append
name|append
parameter_list|)
block|{
return|return
name|createCustomCell
argument_list|(
name|append
operator|.
name|getRow
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER_FROM_CP
argument_list|,
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|APPEND_VALUE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Cell
name|createCustomCell
parameter_list|(
name|Increment
name|inc
parameter_list|)
block|{
return|return
name|createCustomCell
argument_list|(
name|inc
operator|.
name|getRow
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER_FROM_CP
argument_list|,
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|VALUE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Cell
name|createCustomCell
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|createCustomCell
argument_list|(
name|delete
operator|.
name|getRow
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER_FROM_CP
argument_list|,
name|Cell
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|RegionObserverImpl
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|static
specifier|final
name|AtomicInteger
name|COUNT
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|put
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndPut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Put
name|put
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|put
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preCheckAndDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|op
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preAppend
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|append
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|append
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrement
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|increment
operator|.
name|add
argument_list|(
name|createCustomCell
argument_list|(
name|increment
argument_list|)
argument_list|)
expr_stmt|;
name|COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

