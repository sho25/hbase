begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests ReplicationTableBase behavior when the Master startup is delayed. The table initialization  * should be non-blocking, but any method calls that access the table should be blocking.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationTableBase
block|{
specifier|private
specifier|static
name|long
name|SLEEP_MILLIS
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|static
name|long
name|TIME_OUT_MILLIS
init|=
literal|3000
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
specifier|static
name|ReplicationTableBase
name|rb
decl_stmt|;
specifier|private
specifier|static
name|ReplicationQueues
name|rq
decl_stmt|;
specifier|private
specifier|static
name|ReplicationQueuesClient
name|rqc
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|asyncRequestSuccess
init|=
literal|false
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSlowStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|utility
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|conf
operator|=
name|utility
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.region.replica.replication.replicationQueues.class"
argument_list|,
name|TableBasedReplicationQueuesImpl
operator|.
name|class
argument_list|,
name|ReplicationQueues
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.region.replica.replication.replicationQueuesClient.class"
argument_list|,
name|TableBasedReplicationQueuesClientImpl
operator|.
name|class
argument_list|,
name|ReplicationQueuesClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|zkw
operator|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|utility
argument_list|)
expr_stmt|;
name|utility
operator|.
name|waitFor
argument_list|(
literal|0
argument_list|,
name|TIME_OUT_MILLIS
argument_list|,
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|rb
operator|=
operator|new
name|ReplicationTableBase
argument_list|(
name|conf
argument_list|,
name|zkw
argument_list|)
block|{}
expr_stmt|;
name|rq
operator|=
name|ReplicationFactory
operator|.
name|getReplicationQueues
argument_list|(
operator|new
name|ReplicationQueuesArguments
argument_list|(
name|conf
argument_list|,
name|zkw
argument_list|,
name|zkw
argument_list|)
argument_list|)
expr_stmt|;
name|rqc
operator|=
name|ReplicationFactory
operator|.
name|getReplicationQueuesClient
argument_list|(
operator|new
name|ReplicationQueuesClientArguments
argument_list|(
name|conf
argument_list|,
name|zkw
argument_list|,
name|zkw
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|"Failed to initialize ReplicationTableBase, TableBasedReplicationQueuesClient and "
operator|+
literal|"TableBasedReplicationQueues after a timeout="
operator|+
name|TIME_OUT_MILLIS
operator|+
literal|" ms. Their initialization "
operator|+
literal|"should be non-blocking"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|RequestReplicationQueueData
name|async
init|=
operator|new
name|RequestReplicationQueueData
argument_list|()
decl_stmt|;
name|async
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
comment|// Test that the Replication Table has not been assigned and the methods are blocking
name|assertFalse
argument_list|(
name|rb
operator|.
name|getInitializationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asyncRequestSuccess
argument_list|)
expr_stmt|;
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
comment|// Test that the methods do return the correct results after getting the table
name|utility
operator|.
name|waitFor
argument_list|(
literal|0
argument_list|,
name|TIME_OUT_MILLIS
argument_list|,
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|async
operator|.
name|join
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|"ReplicationQueue failed to return list of replicators even after Replication Table "
operator|+
literal|"was initialized timeout="
operator|+
name|TIME_OUT_MILLIS
operator|+
literal|" ms"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asyncRequestSuccess
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|RequestReplicationQueueData
extends|extends
name|Thread
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|asyncRequestSuccess
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

