begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|BoundedGroupingStrategy
operator|.
name|NUM_REGION_GROUPS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|BoundedGroupingStrategy
operator|.
name|DEFAULT_NUM_REGION_GROUPS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
operator|.
name|WAL_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|RegionGroupingProvider
operator|.
name|REGION_GROUPING_STRATEGY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|RegionGroupingProvider
operator|.
name|RegionGroupingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBoundedRegionGroupingStrategy
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBoundedRegionGroupingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|currentTest
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|entries
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Make block sizes small.
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// quicker heartbeat interval for faster DN death notification
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.namenode.heartbeat.recheck-interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.client.socket-timeout"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// faster failover with cluster.shutdown();fs.close() idiom
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connect.max.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.recovery.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connection.maxidletime"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|WAL_PROVIDER
argument_list|,
name|RegionGroupingProvider
operator|.
name|class
argument_list|,
name|WALProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|REGION_GROUPING_STRATEGY
argument_list|,
name|RegionGroupingProvider
operator|.
name|Strategies
operator|.
name|bounded
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Write to a log file with three concurrent threads and verifying all data is written.    */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentWrites
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the WPE tool with three threads writing 3000 edits each concurrently.
comment|// When done, verify that all edits were written.
name|int
name|errCode
init|=
name|WALPerformanceEvaluation
operator|.
name|innerMain
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-threads"
block|,
literal|"3"
block|,
literal|"-verify"
block|,
literal|"-noclosefs"
block|,
literal|"-iterations"
block|,
literal|"3000"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure we can successfully run with more regions then our bound.    */
annotation|@
name|Test
specifier|public
name|void
name|testMoreRegionsThanBound
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|parallelism
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_NUM_REGION_GROUPS
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|errCode
init|=
name|WALPerformanceEvaluation
operator|.
name|innerMain
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-threads"
block|,
name|parallelism
block|,
literal|"-verify"
block|,
literal|"-noclosefs"
block|,
literal|"-iterations"
block|,
literal|"3000"
block|,
literal|"-regions"
block|,
name|parallelism
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoundsGreaterThanDefault
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|temp
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|DEFAULT_NUM_REGION_GROUPS
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
operator|*
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|String
name|parallelism
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|temp
operator|*
literal|4
argument_list|)
decl_stmt|;
name|int
name|errCode
init|=
name|WALPerformanceEvaluation
operator|.
name|innerMain
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-threads"
block|,
name|parallelism
block|,
literal|"-verify"
block|,
literal|"-noclosefs"
block|,
literal|"-iterations"
block|,
literal|"3000"
block|,
literal|"-regions"
block|,
name|parallelism
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoreRegionsThanBoundWithBoundsGreaterThanDefault
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|temp
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|DEFAULT_NUM_REGION_GROUPS
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
operator|*
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|String
name|parallelism
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|temp
operator|*
literal|4
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|errCode
init|=
name|WALPerformanceEvaluation
operator|.
name|innerMain
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-threads"
block|,
name|parallelism
block|,
literal|"-verify"
block|,
literal|"-noclosefs"
block|,
literal|"-iterations"
block|,
literal|"3000"
block|,
literal|"-regions"
block|,
name|parallelism
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that we can use Set.add to deduplicate WALs    */
annotation|@
name|Test
specifier|public
name|void
name|setMembershipDedups
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|temp
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|DEFAULT_NUM_REGION_GROUPS
argument_list|)
decl_stmt|;
name|WALFactory
name|wals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// Set HDFS root directory for storing WAL
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|()
argument_list|)
expr_stmt|;
name|wals
operator|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|currentTest
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|WAL
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|WAL
argument_list|>
argument_list|(
name|temp
operator|*
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// we know that this should see one of the wals more than once
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|temp
operator|*
literal|8
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|WAL
name|maybeNewWAL
init|=
name|wals
operator|.
name|getWAL
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Iteration "
operator|+
name|i
operator|+
literal|", checking wal "
operator|+
name|maybeNewWAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|maybeNewWAL
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"received back a different number of WALs that are not equal() to each other "
operator|+
literal|"than the bound we placed."
argument_list|,
name|temp
operator|*
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wals
operator|!=
literal|null
condition|)
block|{
name|wals
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

