begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncProcess
operator|.
name|START_LOG_ERRORS_AFTER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous replication admin operations when more than 1 cluster  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncReplicationAdminApiWithClusters
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncReplicationAdminApiWithClusters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ID_SECOND
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL2
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf2
decl_stmt|;
specifier|private
specifier|static
name|AsyncAdmin
name|admin2
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|START_LOG_ERRORS_AFTER_COUNT_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|ASYNC_CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|conf2
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|TEST_UTIL2
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|TEST_UTIL2
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|admin2
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|TEST_UTIL2
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|TEST_UTIL2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|ASYNC_CONN
operator|.
name|getAdmin
argument_list|()
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|".*"
argument_list|)
decl_stmt|;
name|cleanupTables
argument_list|(
name|admin
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|cleanupTables
argument_list|(
name|admin2
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupTables
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|admin
operator|.
name|listTableNames
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
operator|.
name|whenCompleteAsync
argument_list|(
parameter_list|(
name|tables
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|forEach
argument_list|(
name|table
lambda|->
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table: "
operator|+
name|tableName
operator|+
literal|" already disabled, so just deleting it."
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTableWithDefaultConf
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableAndDisableTableReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default replication scope is local
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|TableDescriptor
name|tableDesc
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|fam
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|,
name|fam
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|disableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|tableDesc
operator|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|fam
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|,
name|fam
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableReplicationWhenSlaveClusterDoesntHaveTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Only create table in source cluster
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableReplicationWhenTableDescriptorIsNotSameInClusters
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|admin2
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"newFamily"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin2
operator|.
name|modifyTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin2
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown if table descriptors in the clusters are not same."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ok
block|}
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|TableDescriptor
name|tableDesc
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|fam
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|,
name|fam
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableReplicationForNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|admin
operator|.
name|disableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableReplicationForNonExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableReplicationWhenTableNameAsNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|admin
operator|.
name|disableTableReplication
argument_list|(
literal|null
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableReplicationWhenTableNameAsNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|admin
operator|.
name|enableTableReplication
argument_list|(
literal|null
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test enable table replication should create table only in user explicit specified table-cfs.    * HBASE-14717    */
annotation|@
name|Test
specifier|public
name|void
name|testEnableReplicationForExplicitSetTableCfs
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
comment|// Only create table in source cluster
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table should not exists in the peer cluster"
argument_list|,
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table should not exists in the peer cluster"
argument_list|,
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Only add tableName to replication peer config
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName2
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table should not be created if user has set table cfs explicitly for the "
operator|+
literal|"peer and this is not part of that collection"
argument_list|,
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add tableName2 to replication peer config, too
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|enableTableReplication
argument_list|(
name|tableName2
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created if user has explicitly added table into table cfs collection"
argument_list|,
name|admin2
operator|.
name|tableExists
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

