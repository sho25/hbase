begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|resetCounters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_heartbeat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_node_create_queued
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_orphan_task_acquired
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_rescan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_rescan_deleted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_dead_server_task
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_force
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_threshold_reached
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_resubmit_unassigned
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_task_deleted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|ZKSplitLogManagerCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TaskBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestMasterAddressTracker
operator|.
name|NodeCreationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSplitLogManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitLogManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|DUMMY_MASTER
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"dummy-master,1,1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServerManager
name|sm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|master
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|DummyServer
name|ds
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|SplitLogManager
name|slm
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|to
decl_stmt|;
specifier|private
name|RecoveryMode
name|mode
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
class|class
name|DummyServer
implements|implements
name|Server
block|{
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|CoordinatedStateManager
name|cm
decl_stmt|;
specifier|public
name|DummyServer
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|zkw
operator|=
name|zkw
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|cm
operator|=
name|CoordinatedStateManagerFactory
operator|.
name|getCoordinatedStateManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|initialize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zkw
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoordinatedStateManager
name|getCoordinatedStateManager
parameter_list|()
block|{
return|return
name|cm
return|;
block|}
annotation|@
name|Override
specifier|public
name|HConnection
name|getShortCircuitConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaTableLocator
name|getMetaTableLocator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|Stoppable
name|stopper
init|=
operator|new
name|Stoppable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Use a different ZK wrapper instance for each tests.
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"split-log-manager-tests"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ds
operator|=
operator|new
name|DummyServer
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|baseZNode
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|baseZNode
operator|+
literal|" created"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|splitLogZNode
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|splitLogZNode
operator|+
literal|" created"
argument_list|)
expr_stmt|;
name|stopped
operator|=
literal|false
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
comment|// By default, we let the test manage the error as before, so the server
comment|// does not appear as dead from the master point of view, only from the split log pov.
name|Mockito
operator|.
name|when
argument_list|(
name|sm
operator|.
name|isServerOnline
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServerName
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|master
operator|.
name|getServerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sm
argument_list|)
expr_stmt|;
name|to
operator|=
literal|12000
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_SPLITLOG_MANAGER_TIMEOUT
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.manager.unassigned.timeout"
argument_list|,
literal|2
operator|*
name|to
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.manager.timeoutmonitor.period"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|to
operator|=
name|to
operator|+
literal|16
operator|*
literal|100
expr_stmt|;
name|this
operator|.
name|mode
operator|=
operator|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
condition|?
name|RecoveryMode
operator|.
name|LOG_REPLAY
else|:
name|RecoveryMode
operator|.
name|LOG_SPLITTING
operator|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|slm
operator|!=
literal|null
condition|)
name|slm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
interface|interface
name|Expr
block|{
name|long
name|eval
parameter_list|()
function_decl|;
block|}
specifier|private
name|void
name|waitForCounter
parameter_list|(
specifier|final
name|AtomicLong
name|ctr
parameter_list|,
name|long
name|oldval
parameter_list|,
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|)
throws|throws
name|Exception
block|{
name|Expr
name|e
init|=
operator|new
name|Expr
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|eval
parameter_list|()
block|{
return|return
name|ctr
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|waitForCounter
argument_list|(
name|e
argument_list|,
name|oldval
argument_list|,
name|newval
argument_list|,
name|timems
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|waitForCounter
parameter_list|(
specifier|final
name|Expr
name|e
parameter_list|,
specifier|final
name|long
name|oldval
parameter_list|,
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|)
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|timems
argument_list|,
literal|10
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|e
operator|.
name|eval
argument_list|()
operator|!=
name|oldval
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newval
argument_list|,
name|e
operator|.
name|eval
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|submitTaskAndWait
parameter_list|(
name|TaskBatch
name|batch
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|tasknode
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|NodeCreationListener
name|listener
init|=
operator|new
name|NodeCreationListener
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
expr_stmt|;
name|slm
operator|.
name|enqueueSplitTask
argument_list|(
name|name
argument_list|,
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|installed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slm
operator|.
name|findOrCreateOrphanTask
argument_list|(
name|tasknode
argument_list|)
operator|.
name|batch
operator|==
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tot_mgr_node_create_queued
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for task node creation"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|waitForCreation
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"task created"
argument_list|)
expr_stmt|;
return|return
name|tasknode
return|;
block|}
comment|/**    * Test whether the splitlog correctly creates a task in zookeeper    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTaskCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestTaskCreation - test the creation of a task in zk"
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Task node created "
operator|+
name|slt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isUnassigned
argument_list|(
name|DUMMY_MASTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testOrphanTaskAcquisition
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestOrphanTaskAcquisition"
argument_list|)
expr_stmt|;
name|String
name|tasknode
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"orphan/test/slash"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|DUMMY_MASTER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_orphan_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|slm
operator|.
name|findOrCreateOrphanTask
argument_list|(
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isOrphan
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|task
operator|.
name|isUnassigned
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|task
operator|.
name|last_update
operator|<=
name|curt
operator|)
operator|&&
operator|(
name|task
operator|.
name|last_update
operator|>
operator|(
name|curt
operator|-
literal|1000
operator|)
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for manager to resubmit the orphan task"
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isUnassigned
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_rescan
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testUnassignedOrphan
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestUnassignedOrphan - an unassigned task is resubmitted at"
operator|+
literal|" startup"
argument_list|)
expr_stmt|;
name|String
name|tasknode
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"orphan/test/slash"
argument_list|)
decl_stmt|;
comment|//create an unassigned orphan task
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|DUMMY_MASTER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_orphan_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Task
name|task
init|=
name|slm
operator|.
name|findOrCreateOrphanTask
argument_list|(
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isOrphan
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isUnassigned
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for RESCAN node to be created
name|waitForCounter
argument_list|(
name|tot_mgr_rescan
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Task
name|task2
init|=
name|slm
operator|.
name|findOrCreateOrphanTask
argument_list|(
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|task
operator|==
name|task2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"task = "
operator|+
name|task
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|task
operator|.
name|incarnation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|task
operator|.
name|unforcedResubmits
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isOrphan
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|isUnassigned
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
operator|>
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMultipleResubmits
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestMultipleResbmits - no indefinite resubmissions"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker2,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker3
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker3,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|int
name|version1
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version1
operator|>
name|version
argument_list|)
expr_stmt|;
name|slt
operator|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker2
argument_list|,
name|this
operator|.
name|mode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|int
name|version2
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version2
operator|>
name|version1
argument_list|)
expr_stmt|;
name|slt
operator|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker3
argument_list|,
name|this
operator|.
name|mode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit_threshold_reached
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
operator|-
name|tot_mgr_resubmit_force
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRescanCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestRescanCleanup - ensure RESCAN nodes are cleaned up"
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
operator|new
name|Expr
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|eval
parameter_list|()
block|{
return|return
operator|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
operator|+
name|tot_mgr_resubmit_failed
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
operator|*
literal|60000
argument_list|)
expr_stmt|;
comment|// wait long enough
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Could not run test. Lost ZK connection?"
argument_list|,
literal|0
argument_list|,
name|tot_mgr_resubmit_failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|version1
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version1
operator|>
name|version
argument_list|)
expr_stmt|;
name|byte
index|[]
name|taskstate
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|taskstate
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isUnassigned
argument_list|(
name|DUMMY_MASTER
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_rescan_deleted
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTaskDone
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestTaskDone - cleanup task node once in DONE state"
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Done
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|batch
init|)
block|{
while|while
condition|(
name|batch
operator|.
name|installed
operator|!=
name|batch
operator|.
name|done
condition|)
block|{
name|batch
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|waitForCounter
argument_list|(
name|tot_mgr_task_deleted
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTaskErr
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestTaskErr - cleanup task node once in ERR state"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Err
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|batch
init|)
block|{
while|while
condition|(
name|batch
operator|.
name|installed
operator|!=
name|batch
operator|.
name|error
condition|)
block|{
name|batch
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|waitForCounter
argument_list|(
name|tot_mgr_task_deleted
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
name|ZKSplitLogManagerCoordination
operator|.
name|DEFAULT_MAX_RESUBMIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTaskResigned
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestTaskResigned - resubmit task node once in RESIGNED state"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Resigned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
expr_stmt|;
comment|// Could be small race here.
if|if
condition|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|taskstate
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|taskstate
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isUnassigned
argument_list|(
name|DUMMY_MASTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testUnassignedTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestUnassignedTimeout - iff all tasks are unassigned then"
operator|+
literal|" resubmit"
argument_list|)
expr_stmt|;
comment|// create an orphan task in OWNED state
name|String
name|tasknode1
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"orphan/1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|tasknode1
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_orphan_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// submit another task which will stay in unassigned mode
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
expr_stmt|;
comment|// keep updating the orphan owned node every to/2 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
literal|3
operator|*
name|to
operator|)
operator|/
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|ServerName
name|worker2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|slt
operator|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker2
argument_list|,
name|this
operator|.
name|mode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode1
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// since we have stopped heartbeating the owned node therefore it should
comment|// get resubmitted
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for manager to resubmit the orphan task"
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// now all the nodes are unassigned. manager should post another rescan
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit_unassigned
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
operator|*
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testDeadWorker
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDeadWorker"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tot_mgr_heartbeat
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
name|slm
operator|.
name|handleDeadWorker
argument_list|(
name|worker1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|tot_mgr_resubmit_dead_server_task
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|waitForCounter
argument_list|(
name|tot_mgr_resubmit_dead_server_task
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|+
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|version1
init|=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version1
operator|>
name|version
argument_list|)
expr_stmt|;
name|byte
index|[]
name|taskstate
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|)
decl_stmt|;
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|taskstate
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isUnassigned
argument_list|(
name|DUMMY_MASTER
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testWorkerCrash
parameter_list|()
throws|throws
name|Exception
block|{
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|String
name|tasknode
init|=
name|submitTaskAndWait
argument_list|(
name|batch
argument_list|,
literal|"foo/1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|worker1
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|tasknode
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tot_mgr_heartbeat
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
name|waitForCounter
argument_list|(
name|tot_mgr_heartbeat
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|to
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Not yet resubmitted.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// This server becomes dead
name|Mockito
operator|.
name|when
argument_list|(
name|sm
operator|.
name|isServerOnline
argument_list|(
name|worker1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1300
argument_list|)
expr_stmt|;
comment|// The timeout checker is done every 1000 ms (hardcoded).
comment|// It has been resubmitted
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tot_mgr_resubmit
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testEmptyLogDir
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testEmptyLogDir"
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|emptyLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyLogDirPath
argument_list|)
expr_stmt|;
name|slm
operator|.
name|splitLogDistributed
argument_list|(
name|emptyLogDirPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|emptyLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testLogFilesAreArchived
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testLogFilesAreArchived"
argument_list|)
expr_stmt|;
specifier|final
name|SplitLogManager
name|slm
init|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testLogFilesAreArchived"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|logDirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|logDirPath
argument_list|)
expr_stmt|;
comment|// create an empty log file
name|String
name|logFile
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|logDirPath
argument_list|,
name|logFile
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// spin up a thread mocking split done.
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Task
argument_list|>
name|entry
range|:
name|slm
operator|.
name|getTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|ServerName
name|worker1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"worker1,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Done
argument_list|(
name|worker1
argument_list|,
name|RecoveryMode
operator|.
name|LOG_SPLITTING
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|slm
operator|.
name|splitLogDistributed
argument_list|(
name|logDirPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|logDirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The following test case is aiming to test the situation when distributedLogReplay is turned off    * and restart a cluster there should no recovery regions in ZK left.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRecoveryRegionRemovedFromZK
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRecoveryRegionRemovedFromZK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|nodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|recoveringRegionsZNode
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|zkw
argument_list|,
name|nodePath
argument_list|,
name|ZKUtil
operator|.
name|positionToByteArray
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|conf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|slm
operator|.
name|removeStaleRecoveringRegions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|recoveringRegions
init|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|zkw
operator|.
name|recoveringRegionsZNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery regions isn't cleaned"
argument_list|,
name|recoveringRegions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testGetPreviousRecoveryMode
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testGetPreviousRecoveryMode"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|Configuration
name|testConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"testRecovery"
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"mgr,1,1"
argument_list|)
argument_list|,
name|RecoveryMode
operator|.
name|LOG_SPLITTING
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|slm
operator|=
operator|new
name|SplitLogManager
argument_list|(
name|ds
argument_list|,
name|testConf
argument_list|,
name|stopper
argument_list|,
name|master
argument_list|,
name|DUMMY_MASTER
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mode1="
operator|+
name|slm
operator|.
name|getRecoveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slm
operator|.
name|isLogSplitting
argument_list|()
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"testRecovery"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mode2="
operator|+
name|slm
operator|.
name|getRecoveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|slm
operator|.
name|setRecoveryMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mode3="
operator|+
name|slm
operator|.
name|getRecoveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Mode4="
operator|+
name|slm
operator|.
name|getRecoveryMode
argument_list|()
argument_list|,
name|slm
operator|.
name|isLogReplaying
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

