begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TestAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|RowCounter
operator|.
name|RowCounterMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LauncherSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test the rowcounter map reduce job.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRowCounter
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_NAME
init|=
literal|"testRowCounter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COL_FAM
init|=
literal|"col_fam"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COL1
init|=
literal|"c1"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COL2
init|=
literal|"c2"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NUM_ONLINE_CHANGES
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|TOTAL_ROWS
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ROWS_WITH_ONE_COL
init|=
literal|20
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COL_FAM
argument_list|)
argument_list|)
decl_stmt|;
name|writeRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test a case when no column was specified in command line arguments.    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRowCounterNoColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|TABLE_NAME
block|}
decl_stmt|;
name|runRowCount
argument_list|(
name|args
argument_list|,
name|TOTAL_ROWS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCounterWithOnlineSchemaChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|TABLE_NAME
block|}
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|INITAL_MAX_VERSIONS
init|=
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
specifier|final
name|int
name|EXPECTED_NUM_REGIONS
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|runRowCounterWithOnlineSchemaChange
argument_list|(
name|args
argument_list|,
name|TOTAL_ROWS
argument_list|)
expr_stmt|;
specifier|final
name|int
name|FINAL_MAX_VERSIONS
init|=
name|TestAdmin
operator|.
name|waitForColumnSchemasToSettle
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|EXPECTED_NUM_REGIONS
argument_list|)
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There was a mismatch in the number of online schema modifications that were created"
argument_list|,
name|FINAL_MAX_VERSIONS
argument_list|,
name|INITAL_MAX_VERSIONS
operator|+
name|NUM_ONLINE_CHANGES
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test a case when the column specified in command line arguments is 	 * exclusive for few rows. 	 *  	 * @throws Exception 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRowCounterExclusiveColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|TABLE_NAME
block|,
name|COL_FAM
operator|+
literal|":"
operator|+
name|COL1
block|}
decl_stmt|;
name|runRowCount
argument_list|(
name|args
argument_list|,
name|TOTAL_ROWS
operator|-
name|ROWS_WITH_ONE_COL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a case when the column specified in command line arguments is not part    * of first KV for a row.    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRowCounterHiddenColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|TABLE_NAME
block|,
name|COL_FAM
operator|+
literal|":"
operator|+
name|COL2
block|}
decl_stmt|;
name|runRowCount
argument_list|(
name|args
argument_list|,
name|TOTAL_ROWS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the RowCounter map reduce job and verify the row count.    *     * @param args the command line arguments to be used for rowcounter job.    * @param expectedCount the expected row count (result of map reduce job).    * @throws Exception    */
specifier|private
name|void
name|runRowCount
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericOptionsParser
name|opts
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|opts
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|args
operator|=
name|opts
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|RowCounter
operator|.
name|createSubmittableJob
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|RowCounterMapper
operator|.
name|Counters
operator|.
name|ROWS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runRowCounterWithOnlineSchemaChange
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericOptionsParser
name|opts
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|opts
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|args
operator|=
name|opts
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|RowCounter
operator|.
name|createSubmittableJob
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|// This is where we'd want to start a background operation to make change on
comment|// the table
name|BackgroundSchemaChangeThread
name|schemaChangeThread
init|=
operator|new
name|BackgroundSchemaChangeThread
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|,
name|NUM_ONLINE_CHANGES
argument_list|)
decl_stmt|;
name|schemaChangeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|trackingURL
init|=
name|job
operator|.
name|getHistoryUrl
argument_list|()
decl_stmt|;
name|String
name|trackingURL2
init|=
name|job
operator|.
name|getTrackingURL
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tracking URL is: "
operator|+
name|trackingURL2
argument_list|)
expr_stmt|;
name|schemaChangeThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// this is where we'd have the thread returning
comment|//might be a timing issue - if it takes too long, then that service is just down. stupid.
comment|//it might also be an issue of asking for the tracking url. that may kill the history server (nope. it's a time thing).
name|assertTrue
argument_list|(
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|RowCounterMapper
operator|.
name|Counters
operator|.
name|ROWS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes TOTAL_ROWS number of distinct rows in to the table. Few rows have    * two columns, Few have one.    *    * @param table    * @throws IOException    */
specifier|private
specifier|static
name|void
name|writeRows
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COL_FAM
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COL1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COL2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
comment|// write few rows with two columns
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|TOTAL_ROWS
operator|-
name|ROWS_WITH_ONE_COL
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// write few rows with only one column
for|for
control|(
init|;
name|i
operator|<
name|TOTAL_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
block|}
comment|/**    * test main method. Import should print help and call System.exit    */
annotation|@
name|Test
specifier|public
name|void
name|testImportMain
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|SecurityManager
name|SECURITY_MANAGER
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|LauncherSecurityManager
name|newSecurityManager
init|=
operator|new
name|LauncherSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|newSecurityManager
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|RowCounter
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|newSecurityManager
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong number of parameters:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage: RowCounter [options]<tablename> [--range=[startKey],[endKey]] "
operator|+
literal|"[<column1><column2>...]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dhbase.client.scanner.caching=100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dmapred.map.tasks.speculative.execution=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"table"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"--range=1"
expr_stmt|;
name|RowCounter
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|newSecurityManager
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Please specify range in such format as \"--range=a,b\" or, with only one boundary,"
operator|+
literal|" \"--range=,b\" or \"--range=a,\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage: RowCounter [options]<tablename> [--range=[startKey],[endKey]] "
operator|+
literal|"[<column1><column2>...]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldPrintStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|SECURITY_MANAGER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|BackgroundSchemaChangeThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|numOnlineChanges
decl_stmt|;
name|HBaseAdmin
name|admin
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
specifier|public
name|BackgroundSchemaChangeThread
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|numOnlineChanges
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|numOnlineChanges
operator|=
name|numOnlineChanges
expr_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[Test Error]: Provided admin should not be null"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|long
name|START_TIME
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ONLINE_CHANGE_TIMEOUT
init|=
literal|200000
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|htd
operator|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fail: Issue pulling table descriptor"
argument_list|)
expr_stmt|;
block|}
name|HColumnDescriptor
name|hcd
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|!=
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|int
name|countOfFamilies
init|=
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|countOfFamilies
operator|>
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
name|int
name|numIterations
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numIterations
operator|<
name|numOnlineChanges
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|START_TIME
operator|>
name|ONLINE_CHANGE_TIMEOUT
condition|)
block|{
name|fail
argument_list|(
literal|"Fail: Timed out reaching before required snapshot count. Only had "
operator|+
name|numIterations
operator|+
literal|" updates"
argument_list|)
expr_stmt|;
block|}
name|hcd
operator|=
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|int
name|maxversions
init|=
name|hcd
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
name|int
name|newMaxVersions
init|=
name|maxversions
operator|+
literal|1
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting max versions on CF to "
operator|+
name|newMaxVersions
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
name|newMaxVersions
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|hcdName
init|=
name|hcd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|expectedException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumn
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fail: IO Issue while modifying column"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|EXPECTED_NUM_REGIONS
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The max version count was not updated"
argument_list|,
name|newMaxVersions
argument_list|,
name|TestAdmin
operator|.
name|waitForColumnSchemasToSettle
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|EXPECTED_NUM_REGIONS
argument_list|)
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fail: Table not found."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Fail: IO Issue while modifying column"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sleep was interrupted. This is unusual, but not grounds for TF"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numIterations
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

