begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ConstantSizeRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|snapshot
operator|.
name|FlushSnapshotSubprocedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_comment
comment|/**  * Testing the region snapshot task on a cluster.  * @see org.apache.hadoop.hbase.regionserver.snapshot.FlushSnapshotSubprocedure.RegionSnapshotTask  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|RegionServerTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionSnapshotTask
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionSnapshotTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|rootDir
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Try to frequently clean up compacted files
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.hfilecleaner.ttl"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests adding a region to the snapshot manifest while compactions are running on the region.    * The idea is to slow down the process of adding a store file to the manifest while    * triggering compactions on the region, allowing the store files to be marked for archival while    * snapshot operation is running.    * This test checks for the correct behavior in such a case that the compacted files should    * not be moved around if a snapshot operation is in progress.    * See HBASE-18398    */
annotation|@
name|Test
specifier|public
name|void
name|testAddRegionWithCompactions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test_table"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|setupTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|hRegions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTable
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test_table_snapshot"
argument_list|)
operator|.
name|setVersion
argument_list|(
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|spy
argument_list|(
name|hRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
specifier|final
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|workingDir
argument_list|,
name|snapshot
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addTableDescriptor
argument_list|(
name|table
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|workingDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingDir
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|workingDir
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|writeSnapshotInfo
argument_list|(
name|snapshot
argument_list|,
name|workingDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|__
lambda|->
block|{
name|addRegionToSnapshot
argument_list|(
name|snapshot
argument_list|,
name|region
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|region
argument_list|)
operator|.
name|addRegionToSnapshot
argument_list|(
name|snapshot
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
name|FlushSnapshotSubprocedure
operator|.
name|RegionSnapshotTask
name|snapshotTask
init|=
operator|new
name|FlushSnapshotSubprocedure
operator|.
name|RegionSnapshotTask
argument_list|(
name|region
argument_list|,
name|snapshot
argument_list|,
literal|true
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
name|f
init|=
name|executor
operator|.
name|submit
argument_list|(
name|snapshotTask
argument_list|)
decl_stmt|;
comment|// Trigger major compaction and wait for snaphot operation to finish
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting major compaction"
argument_list|)
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished major compaction"
argument_list|)
expr_stmt|;
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Consolidate region manifests into a single snapshot manifest
name|manifest
operator|.
name|consolidate
argument_list|()
expr_stmt|;
comment|// Make sure that the region manifest exists, which means the snapshot operation succeeded
name|assertNotNull
argument_list|(
name|manifest
operator|.
name|getRegionManifests
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sanity check, there should be only one region
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|manifest
operator|.
name|getRegionManifests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that no files went missing after the snapshot operation
name|SnapshotReferenceUtil
operator|.
name|verifySnapshot
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRegionToSnapshot
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|SnapshotManifest
name|manifest
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding region to snapshot: "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
operator|.
name|RegionVisitor
name|visitor
init|=
name|createRegionVisitorWithDelay
argument_list|(
name|snapshot
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addRegion
argument_list|(
name|region
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added the region to snapshot: "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SnapshotManifest
operator|.
name|RegionVisitor
name|createRegionVisitorWithDelay
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|desc
parameter_list|,
name|Path
name|workingDir
parameter_list|)
block|{
return|return
operator|new
name|SnapshotManifestV2
operator|.
name|ManifestBuilder
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|workingDir
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
operator|.
name|Builder
name|region
parameter_list|,
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
operator|.
name|Builder
name|family
parameter_list|,
specifier|final
name|StoreFileInfo
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Introducing delay before adding store file to manifest"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted due to error: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|storeFile
argument_list|(
name|region
argument_list|,
name|family
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|Table
name|setupTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Flush many files, but do not compact immediately
comment|// Make sure that the region does not split
name|builder
operator|.
name|setMemStoreFlushSize
argument_list|(
literal|5000
argument_list|)
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|ConstantSizeRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setMaxFileSize
argument_list|(
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|"250"
argument_list|)
expr_stmt|;
name|TableDescriptor
name|td
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|td
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|fam
block|}
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|fam
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

