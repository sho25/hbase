begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_comment
comment|/**   * class for masquerading System.exit(int).   * Use for test main method with System.exit(int )   * usage:   * new LauncherSecurityManager();   *    try {   *      CellCounter.main(args);   *      fail("should be exception");   *    } catch (SecurityException e) {   *      assert(.,e.getExitCode());   *    }  */
end_comment

begin_class
specifier|public
class|class
name|LauncherSecurityManager
extends|extends
name|SecurityManager
block|{
specifier|private
name|int
name|exitCode
decl_stmt|;
specifier|private
name|SecurityManager
name|securityManager
decl_stmt|;
specifier|public
name|LauncherSecurityManager
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|,
name|Object
name|context
parameter_list|)
block|{
if|if
condition|(
name|securityManager
operator|!=
literal|null
condition|)
block|{
comment|// check everything with the original SecurityManager
name|securityManager
operator|.
name|checkPermission
argument_list|(
name|perm
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|securityManager
operator|!=
literal|null
condition|)
block|{
comment|// check everything with the original SecurityManager
name|securityManager
operator|.
name|checkPermission
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkExit
parameter_list|(
name|int
name|status
parameter_list|)
throws|throws
name|SecurityException
block|{
name|exitCode
operator|=
name|status
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Intercepted System.exit("
operator|+
name|status
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|exitCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

