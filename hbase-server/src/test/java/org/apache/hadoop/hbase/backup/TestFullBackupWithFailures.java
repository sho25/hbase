begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|FullTableBackupClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|TableBackupClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFullBackupWithFailures
extends|extends
name|TestBackupBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFullBackupWithFailures
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|FullTableBackupClientForTest
extends|extends
name|FullTableBackupClient
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_TEST_MODE_STAGE
init|=
literal|"backup.test.mode.stage"
decl_stmt|;
specifier|public
name|FullTableBackupClientForTest
parameter_list|()
block|{     }
specifier|public
name|FullTableBackupClientForTest
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|backupId
parameter_list|,
name|BackupRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the stage ID to fail on
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
comment|// Begin BACKUP
name|beginBackup
argument_list|(
name|backupManager
argument_list|,
name|backupInfo
argument_list|)
expr_stmt|;
name|failStageIf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|savedStartCode
init|=
literal|null
decl_stmt|;
name|boolean
name|firstBackup
init|=
literal|false
decl_stmt|;
comment|// do snapshot for full table backup
name|savedStartCode
operator|=
name|backupManager
operator|.
name|readBackupStartCode
argument_list|()
expr_stmt|;
name|firstBackup
operator|=
name|savedStartCode
operator|==
literal|null
operator|||
name|Long
operator|.
name|parseLong
argument_list|(
name|savedStartCode
argument_list|)
operator|==
literal|0L
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// This is our first backup. Let's put some marker to system table so that we can hold the logs
comment|// while we do the backup.
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|failStageIf
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// We roll log here before we do the snapshot. It is possible there is duplicate data
comment|// in the log that is already in the snapshot. But if we do it after the snapshot, we
comment|// could have data loss.
comment|// A better approach is to do the roll log on each RS in the same global procedure as
comment|// the snapshot.
name|LOG
operator|.
name|info
argument_list|(
literal|"Execute roll log procedure for full backup ..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"backupRoot"
argument_list|,
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|execProcedure
argument_list|(
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_SIGNATURE
argument_list|,
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_NAME
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|failStageIf
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|newTimestamps
operator|=
name|backupManager
operator|.
name|readRegionServerLastLogRollResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstBackup
condition|)
block|{
comment|// Updates registered log files
comment|// We record ALL old WAL files as registered, because
comment|// this is a first full backup in the system and these
comment|// files are not needed for next incremental backup
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|BackupUtils
operator|.
name|getWALFilesOlderThan
argument_list|(
name|conf
argument_list|,
name|newTimestamps
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|recordWALFiles
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
block|}
comment|// SNAPSHOT_TABLES:
name|backupInfo
operator|.
name|setPhase
argument_list|(
name|BackupPhase
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableList
control|)
block|{
name|String
name|snapshotName
init|=
literal|"snapshot_"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|"_"
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
decl_stmt|;
name|snapshotTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|backupInfo
operator|.
name|setSnapshotName
argument_list|(
name|tableName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
name|failStageIf
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// SNAPSHOT_COPY:
comment|// do snapshot copy
name|LOG
operator|.
name|debug
argument_list|(
literal|"snapshot copy for "
operator|+
name|backupId
argument_list|)
expr_stmt|;
name|snapshotCopy
argument_list|(
name|backupInfo
argument_list|)
expr_stmt|;
comment|// Updates incremental backup table set
name|backupManager
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|backupInfo
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
comment|// BACKUP_COMPLETE:
comment|// set overall backup status: complete. Here we make sure to complete the backup.
comment|// After this checkpoint, even if entering cancel process, will let the backup finished
name|backupInfo
operator|.
name|setState
argument_list|(
name|BackupState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// The table list in backupInfo is good for both full backup and incremental backup.
comment|// For incremental backup, it contains the incremental backup table set.
name|backupManager
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|backupInfo
operator|.
name|getTables
argument_list|()
argument_list|,
name|newTimestamps
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|newTableSetTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|Long
name|newStartCode
init|=
name|BackupUtils
operator|.
name|getMinValue
argument_list|(
name|BackupUtils
operator|.
name|getRSLogTimestampMins
argument_list|(
name|newTableSetTimestampMap
argument_list|)
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
name|newStartCode
argument_list|)
expr_stmt|;
name|failStageIf
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// backup complete
name|completeBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|BackupType
operator|.
name|FULL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|e
argument_list|,
literal|"Unexpected BackupException : "
argument_list|,
name|BackupType
operator|.
name|FULL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|int
name|getTestStageId
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|BACKUP_TEST_MODE_STAGE
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|failStageIf
parameter_list|(
name|int
name|stage
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|current
init|=
name|getTestStageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
name|stage
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed stage "
operator|+
name|stage
operator|+
literal|" in testing"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullBackupWithFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|conf1
operator|.
name|set
argument_list|(
name|TableBackupClient
operator|.
name|BACKUP_CLIENT_IMPL_CLASS
argument_list|,
name|FullTableBackupClientForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|stage
init|=
operator|(
operator|new
name|Random
argument_list|()
operator|)
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// Fail random stage between 0 and 4 inclusive
name|LOG
operator|.
name|info
argument_list|(
literal|"Running stage "
operator|+
name|stage
argument_list|)
expr_stmt|;
name|runBackupAndFailAtStage
argument_list|(
name|stage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runBackupAndFailAtStage
parameter_list|(
name|int
name|stage
parameter_list|)
throws|throws
name|Exception
block|{
name|conf1
operator|.
name|setInt
argument_list|(
name|FullTableBackupClientForTest
operator|.
name|BACKUP_TEST_MODE_STAGE
argument_list|,
name|stage
argument_list|)
expr_stmt|;
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
init|)
block|{
name|int
name|before
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"create"
block|,
literal|"full"
block|,
name|BACKUP_ROOT_DIR
block|,
literal|"-t"
block|,
name|table1
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|","
operator|+
name|table2
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
comment|// Run backup
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf1
argument_list|,
operator|new
name|BackupDriver
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|backups
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
decl_stmt|;
name|int
name|after
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|after
operator|==
name|before
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupInfo
name|data
range|:
name|backups
control|)
block|{
name|String
name|backupId
init|=
name|data
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|checkSucceeded
argument_list|(
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|table
operator|.
name|getIncrementalBackupTableSet
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

