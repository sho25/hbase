begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PriorityFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Tests to verify correct priority on Master RPC methods.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterPriorityRpc
block|{
specifier|private
name|HMaster
name|master
init|=
literal|null
decl_stmt|;
specifier|private
name|PriorityFunction
name|priority
init|=
literal|null
decl_stmt|;
specifier|private
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ADMIN_METHODS
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"GetLastFlushedSequenceId"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|NORMAL_METHODS
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"CreateTable"
argument_list|,
literal|"DeleteTable"
argument_list|,
literal|"ModifyColumn"
argument_list|,
literal|"OfflineRegion"
argument_list|,
literal|"Shutdown"
argument_list|,
literal|"RegionServerReport"
argument_list|,
literal|"RegionServerStartup"
argument_list|,
literal|"ReportRSFatalError"
argument_list|,
literal|"ReportRegionStateTransition"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.testing.nocluster"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No need to do ZK
name|CoordinatedStateManager
name|cp
init|=
name|CoordinatedStateManagerFactory
operator|.
name|getCoordinatedStateManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|master
operator|=
name|HMaster
operator|.
name|constructMaster
argument_list|(
name|HMaster
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|cp
argument_list|)
expr_stmt|;
name|priority
operator|=
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|user
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"someuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"somegroup"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that the provided method has the given priority.    *    * @param methodName    *          The name of the RPC method.    * @param expectedPriority    *          The expected priority.    */
specifier|private
name|void
name|assertPriority
parameter_list|(
name|String
name|methodName
parameter_list|,
name|int
name|expectedPriority
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|methodName
operator|+
literal|" had unexpected priority"
argument_list|,
name|expectedPriority
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|(
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullMessage
parameter_list|()
block|{
name|assertPriority
argument_list|(
literal|"doesnotexist"
argument_list|,
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminPriorityMethods
parameter_list|()
block|{
for|for
control|(
name|String
name|methodName
range|:
name|ADMIN_METHODS
control|)
block|{
name|assertPriority
argument_list|(
name|methodName
argument_list|,
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSomeNormalMethods
parameter_list|()
block|{
for|for
control|(
name|String
name|methodName
range|:
name|NORMAL_METHODS
control|)
block|{
name|assertPriority
argument_list|(
name|methodName
argument_list|,
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

