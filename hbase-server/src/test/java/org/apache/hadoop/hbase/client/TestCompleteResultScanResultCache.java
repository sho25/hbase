begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCompleteResultScanResultCache
block|{
specifier|private
specifier|static
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq3"
argument_list|)
decl_stmt|;
specifier|private
name|CompleteScanResultCache
name|resultCache
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|resultCache
operator|=
operator|new
name|CompleteScanResultCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resultCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resultCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|Cell
name|createCell
parameter_list|(
name|int
name|key
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|CF
argument_list|,
name|cq
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPartial
parameter_list|()
throws|throws
name|IOException
block|{
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
name|i
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|results
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|results
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombine1
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
name|previousResult
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|0
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result2
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result3
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ3
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|previousResult
block|,
name|result1
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|previousResult
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result3
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombine2
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
name|result1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result2
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result3
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ3
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|nextResult1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|2
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|nextToNextResult1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|3
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result3
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|nextResult1
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|nextToNextResult1
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombine3
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
name|result1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result2
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|nextResult1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|2
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Result
name|nextToNextResult1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|3
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|nextResult1
block|,
name|nextToNextResult1
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombine4
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
name|result1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|result2
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|1
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Result
name|nextResult1
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|2
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Result
name|nextResult2
init|=
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createCell
argument_list|(
literal|2
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|result2
block|,
name|nextResult1
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|nextResult2
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

