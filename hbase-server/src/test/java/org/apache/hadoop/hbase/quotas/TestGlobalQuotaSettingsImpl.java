begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestGlobalQuotaSettingsImpl
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestGlobalQuotaSettingsImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|REQUEST_THROTTLE
init|=
name|QuotaProtos
operator|.
name|TimedQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScope
argument_list|(
name|QuotaProtos
operator|.
name|QuotaScope
operator|.
name|MACHINE
argument_list|)
operator|.
name|setSoftLimit
argument_list|(
literal|100
argument_list|)
operator|.
name|setTimeUnit
argument_list|(
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaProtos
operator|.
name|Throttle
name|THROTTLE
init|=
name|QuotaProtos
operator|.
name|Throttle
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReqNum
argument_list|(
name|REQUEST_THROTTLE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaProtos
operator|.
name|SpaceQuota
name|SPACE_QUOTA
init|=
name|QuotaProtos
operator|.
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1024L
operator|*
literal|1024L
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMergeThrottle
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaProtos
operator|.
name|Quotas
name|quota
init|=
name|QuotaProtos
operator|.
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|setThrottle
argument_list|(
name|THROTTLE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|writeQuota
init|=
name|REQUEST_THROTTLE
operator|.
name|toBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|500
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Unset the req throttle, set a write throttle
name|QuotaProtos
operator|.
name|ThrottleRequest
name|writeThrottle
init|=
name|QuotaProtos
operator|.
name|ThrottleRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTimedQuota
argument_list|(
name|writeQuota
argument_list|)
operator|.
name|setType
argument_list|(
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|settings
init|=
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|"joe"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|quota
argument_list|)
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|merged
init|=
name|settings
operator|.
name|merge
argument_list|(
operator|new
name|ThrottleSettings
argument_list|(
literal|"joe"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|writeThrottle
argument_list|)
argument_list|)
decl_stmt|;
name|QuotaProtos
operator|.
name|Throttle
name|mergedThrottle
init|=
name|merged
operator|.
name|getThrottleProto
argument_list|()
decl_stmt|;
comment|// Verify the request throttle is in place
name|assertTrue
argument_list|(
name|mergedThrottle
operator|.
name|hasReqNum
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|actualReqNum
init|=
name|mergedThrottle
operator|.
name|getReqNum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REQUEST_THROTTLE
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|actualReqNum
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the write throttle is in place
name|assertTrue
argument_list|(
name|mergedThrottle
operator|.
name|hasWriteNum
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|actualWriteNum
init|=
name|mergedThrottle
operator|.
name|getWriteNum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|writeQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|actualWriteNum
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QuotaProtos
operator|.
name|Quotas
name|quota
init|=
name|QuotaProtos
operator|.
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSpace
argument_list|(
name|SPACE_QUOTA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|settings
init|=
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|null
argument_list|,
name|tn
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|quota
argument_list|)
decl_stmt|;
comment|// Switch the violation policy to DISABLE
name|GlobalQuotaSettingsImpl
name|merged
init|=
name|settings
operator|.
name|merge
argument_list|(
operator|new
name|SpaceLimitSettings
argument_list|(
name|tn
argument_list|,
name|SPACE_QUOTA
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
argument_list|)
decl_stmt|;
name|QuotaProtos
operator|.
name|SpaceQuota
name|mergedSpaceQuota
init|=
name|merged
operator|.
name|getSpaceProto
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SPACE_QUOTA
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|mergedSpaceQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|,
name|mergedSpaceQuota
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeThrottleAndSpace
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|ns
init|=
literal|"org1"
decl_stmt|;
name|QuotaProtos
operator|.
name|Quotas
name|quota
init|=
name|QuotaProtos
operator|.
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|setThrottle
argument_list|(
name|THROTTLE
argument_list|)
operator|.
name|setSpace
argument_list|(
name|SPACE_QUOTA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|settings
init|=
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ns
argument_list|,
literal|null
argument_list|,
name|quota
argument_list|)
decl_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|writeQuota
init|=
name|REQUEST_THROTTLE
operator|.
name|toBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|500
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Add a write throttle
name|QuotaProtos
operator|.
name|ThrottleRequest
name|writeThrottle
init|=
name|QuotaProtos
operator|.
name|ThrottleRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTimedQuota
argument_list|(
name|writeQuota
argument_list|)
operator|.
name|setType
argument_list|(
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|merged
init|=
name|settings
operator|.
name|merge
argument_list|(
operator|new
name|ThrottleSettings
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ns
argument_list|,
literal|null
argument_list|,
name|writeThrottle
argument_list|)
argument_list|)
decl_stmt|;
name|GlobalQuotaSettingsImpl
name|finalQuota
init|=
name|merged
operator|.
name|merge
argument_list|(
operator|new
name|SpaceLimitSettings
argument_list|(
name|ns
argument_list|,
name|SPACE_QUOTA
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify both throttle quotas
name|QuotaProtos
operator|.
name|Throttle
name|throttle
init|=
name|finalQuota
operator|.
name|getThrottleProto
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|throttle
operator|.
name|hasReqNum
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|reqNumQuota
init|=
name|throttle
operator|.
name|getReqNum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REQUEST_THROTTLE
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|reqNumQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throttle
operator|.
name|hasWriteNum
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|writeNumQuota
init|=
name|throttle
operator|.
name|getWriteNum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|writeQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|writeNumQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify space quota
name|QuotaProtos
operator|.
name|SpaceQuota
name|finalSpaceQuota
init|=
name|finalQuota
operator|.
name|getSpaceProto
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SPACE_QUOTA
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|finalSpaceQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|,
name|finalSpaceQuota
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

