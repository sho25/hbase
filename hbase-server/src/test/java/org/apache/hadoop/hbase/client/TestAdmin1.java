begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InvalidFamilyOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
import|;
end_import

begin_comment
comment|/**  * Class to test HBaseAdmin.  * Spins up the minicluster once at test start and then takes it down afterward.  * Add any testing of HBaseAdmin functionality here.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdmin1
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.enabletable.roundrobin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
control|)
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitFlushCompactUnknownTable
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|TableName
name|unknowntable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|compact
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEditUnknownColumnFamilyAndOrTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test we get exception if we try to
specifier|final
name|TableName
name|nonexistentTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"nonexistent"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|nonexistentColumn
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nonexistent"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|nonexistentHcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|nonexistentColumn
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentColumn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|nonexistentTable
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|modifyTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
comment|// Now make it so at least the table exists and then do tests against a
comment|// nonexistent column family -- see if we get right exceptions.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|nonexistentHcd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"found="
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"found="
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be disabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|ok
operator|=
literal|false
expr_stmt|;
comment|// verify that scan encounters correct exception
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
do|do
block|{
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|res
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is enabled
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|TableState
operator|.
name|State
name|getStateFromMeta
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|TableState
name|state
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|state
operator|.
name|getState
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTables
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|Table
name|ht1
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table1
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Table
name|ht2
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table2
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTables
argument_list|(
literal|"testDisableAndEnableTable.*"
argument_list|)
expr_stmt|;
comment|// Test that tables are disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTables
argument_list|(
literal|"testDisableAndEnableTable.*"
argument_list|)
expr_stmt|;
comment|// Test that tables are enabled
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|length
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|testTruncateTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTablePreservingSplits
parameter_list|()
throws|throws
name|IOException
block|{
name|testTruncateTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTruncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// Create& Fill the table
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Truncate& Verify
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|HColumnDescriptor
name|fam1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam2
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam3
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam3
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|confirmedHtd
init|=
name|table
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TableDescriptor
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|htd
argument_list|,
name|confirmedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
name|HColumnDescriptor
name|fam1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ts
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// no files written -> no data
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// still 0, we flushed a file, but no major compaction happened
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|byte
index|[]
name|regionName
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|regionName
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
block|}
name|long
name|ts1
init|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// make sure the region API returns the same value, as the old file is still around
name|assertEquals
argument_list|(
name|ts1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// forces a wait for the compaction
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// after a compaction our earliest timestamp will have progressed forward
name|assertTrue
argument_list|(
name|ts
operator|>
name|ts1
argument_list|)
expr_stmt|;
comment|// region api still the same
name|ts1
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|this
operator|.
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHColumnValidName
parameter_list|()
block|{
name|boolean
name|exceptionThrown
decl_stmt|;
try|try
block|{
operator|new
name|HColumnDescriptor
argument_list|(
literal|"\\test\\abc"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify schema change for read only table    */
annotation|@
name|Test
specifier|public
name|void
name|testReadOnlyTableModify
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make table read only
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|this
operator|.
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// try to modify the read only table now
name|htd
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|this
operator|.
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setCompactionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// Delete the table
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotDisabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testModifyRegionReplicasEnabledTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Modify region replication count
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
comment|// try to modify the region replication count without disabling the table
name|admin
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Delete the table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify schema modification takes.    */
annotation|@
name|Test
specifier|public
name|void
name|testOnlineChangeTableSchema
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|length
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// FIRST, do htabledescriptor changes.
name|HTableDescriptor
name|htd
init|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make a copy and assert copy is good.
name|HTableDescriptor
name|copy
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|htd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|equals
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now amend the copy. Introduce differences.
name|long
name|newFlushSize
init|=
name|htd
operator|.
name|getMemStoreFlushSize
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newFlushSize
operator|<=
literal|0
condition|)
block|{
name|newFlushSize
operator|=
name|HTableDescriptor
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
operator|/
literal|2
expr_stmt|;
block|}
name|copy
operator|.
name|setMemStoreFlushSize
argument_list|(
name|newFlushSize
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
literal|"anyoldkey"
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|modifiedHtd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|htd
operator|.
name|equals
argument_list|(
name|modifiedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|equals
argument_list|(
name|modifiedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newFlushSize
argument_list|,
name|modifiedHtd
operator|.
name|getMemStoreFlushSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|modifiedHtd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now work on column family changes.
name|int
name|countOfFamilies
init|=
name|modifiedHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|countOfFamilies
operator|>
literal|0
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|modifiedHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|maxversions
init|=
name|hcd
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newMaxVersions
init|=
name|maxversions
operator|+
literal|1
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
name|newMaxVersions
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|hcdName
init|=
name|hcd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|expectedException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|modifiedHcd
init|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|hcdName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newMaxVersions
argument_list|,
name|modifiedHcd
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try adding a column
name|assertFalse
argument_list|(
name|this
operator|.
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xtracolName
init|=
literal|"xtracol"
decl_stmt|;
name|HColumnDescriptor
name|xtracol
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|xtracolName
argument_list|)
decl_stmt|;
name|xtracol
operator|.
name|setValue
argument_list|(
name|xtracolName
argument_list|,
name|xtracolName
argument_list|)
expr_stmt|;
name|expectedException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|xtracol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
comment|// Add column should work even if the table is enabled
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|.
name|getValue
argument_list|(
name|xtracolName
argument_list|)
operator|.
name|equals
argument_list|(
name|xtracolName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the just-added column.
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Delete the table
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyRoundRobinDistribution
parameter_list|(
name|ClusterConnection
name|c
parameter_list|,
name|RegionLocator
name|regionLocator
parameter_list|,
name|int
name|expectedRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numRS
init|=
name|c
operator|.
name|getCurrentNrHRS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|regionLocator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|server2Regions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|regions
control|)
block|{
name|ServerName
name|server
init|=
name|loc
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regs
init|=
name|server2Regions
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regs
operator|==
literal|null
condition|)
block|{
name|regs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|server2Regions
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regs
argument_list|)
expr_stmt|;
block|}
name|regs
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablesOnMaster
condition|)
block|{
comment|// Ignore the master region server,
comment|// which contains less regions by intention.
name|numRS
operator|--
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|expectedRegions
operator|/
name|numRS
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionList
range|:
name|server2Regions
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"numRS="
operator|+
name|numRS
operator|+
literal|", min="
operator|+
name|min
operator|+
literal|", max="
operator|+
name|max
operator|+
literal|", size="
operator|+
name|regionList
operator|.
name|size
argument_list|()
operator|+
literal|", tablesOnMaster="
operator|+
name|tablesOnMaster
argument_list|,
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableNumberOfRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 1 region"
argument_list|,
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|TABLE_2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_2
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|42
block|}
block|}
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_2
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 2 region"
argument_list|,
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|TABLE_3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_3
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
literal|"a"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"z"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_3
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 3 region"
argument_list|,
literal|3
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|TABLE_4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_4
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
literal|"a"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"z"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to create a table with only 2 regions using this API."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|eae
parameter_list|)
block|{
comment|// Expected
block|}
name|TableName
name|TABLE_5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_5"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_5
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|127
block|}
argument_list|,
literal|16
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_5
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have 16 region"
argument_list|,
literal|16
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|,     }
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created with splitKyes + 1 rows in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
name|Iterator
argument_list|<
name|HRegionLocation
argument_list|>
name|hris
decl_stmt|;
name|RegionInfo
name|hri
decl_stmt|;
name|ClusterConnection
name|conn
init|=
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|conn
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Now test using start/end with a number of regions
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
comment|// Splitting into 10 regions, we expect (null,1) ... (9, null)
comment|// with (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,9) in the middle
name|expectedRegions
operator|=
literal|10
expr_stmt|;
name|TableName
name|TABLE_2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_2
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_2
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|conn
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try once more with something that divides into something infinite
name|startKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|endKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|expectedRegions
operator|=
literal|5
expr_stmt|;
name|TableName
name|TABLE_3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_3
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_3
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|conn
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try an invalid case where there are duplicate split keys
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|TableName
name|TABLE_4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_4
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to create this table because of "
operator|+
literal|"duplicate split keys"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableAvailableWithRandomSplitKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Table should be created with 1 row in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithOnlyEmptyStartRow
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithEmptyRowInTheSplitKeys
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|3
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
literal|"region1"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|splitKeys
index|[
literal|2
index|]
operator|=
literal|"region2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExist
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exist
decl_stmt|;
name|exist
operator|=
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|exist
operator|=
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests forcing split from client and having scanners successfully ride over split.    * @throws Exception    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|}
decl_stmt|;
name|int
name|numVersions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3500
argument_list|)
decl_stmt|;
name|splitTest
argument_list|(
name|splitKey
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test regionSplitSync
name|splitTest
argument_list|(
name|splitKey
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test retain assignment on enableTable.    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testEnableTableRetainAssignment
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|}
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable table.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Enable table, use retain assignment to assign regions.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions2
init|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
comment|// Check the assignment.
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regions2
operator|.
name|containsAll
argument_list|(
name|regions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Multi-family scenario. Tests forcing split from client and    * having scanners successfully ride over split.    * @throws Exception    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplitMultiFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numVersions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
comment|// use small HFile block size so that we can have lots of blocks in HFile
comment|// Otherwise, if there is only one block,
comment|// HFileBlockIndex.midKey()'s value == startKey
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
block|}
decl_stmt|;
comment|// one of the column families isn't splittable
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|1
block|}
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// one column family has much smaller data than the other
comment|// the split key should be based on the largest column family
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|300
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|300
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|void
name|splitTest
parameter_list|(
name|byte
index|[]
name|splitPoint
parameter_list|,
name|byte
index|[]
index|[]
name|familyNames
parameter_list|,
name|int
index|[]
name|rowCounts
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testForceSplit"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Add tail to String so can see better in logs where a test is running.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|rowCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familyNames
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
init|;
name|final
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|q
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// insert rows into column families. The number of rows that have values
comment|// in a specific column family is decided by rowCounts[familyIndex]
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowCounts
index|[
name|index
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
index|[
name|index
index|]
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|k
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|familyNames
index|[
name|index
index|]
argument_list|,
name|q
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
operator|<
name|rowCounts
index|[
name|index
index|]
condition|)
block|{
name|rowCount
operator|=
name|rowCounts
index|[
name|index
index|]
expr_stmt|;
block|}
block|}
comment|// get the initial layout (should just be one region)
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|m
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial regions ("
operator|+
name|m
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Verify row count
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
comment|// Have an outstanding scan going on to make sure we can scan over splits.
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
comment|// Scan first row so we are into first region before split happens.
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Split the table
if|if
condition|(
name|async
condition|)
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"CheckForSplit"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|45
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
comment|// check again
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
continue|continue;
name|count
operator|.
name|set
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found: "
operator|+
name|regions
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cycle waiting on split"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"CheckForSplit thread exited, current region count: "
operator|+
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
operator|-
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Sync split region, no need to create a thread to check
operator|(
operator|(
name|HBaseAdmin
operator|)
name|admin
operator|)
operator|.
name|splitRegionSync
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
block|}
comment|// Verify row count
name|rows
operator|=
literal|1
expr_stmt|;
comment|// We counted one row above.
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rows
operator|++
expr_stmt|;
if|if
condition|(
name|rows
operator|>
name|rowCount
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Scanned more than expected ("
operator|+
name|rowCount
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitPoint
operator|!=
literal|null
condition|)
block|{
comment|// make sure the split point matches our explicit configuration
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properly split on "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|familyNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|int
name|splitKey
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if splitKey is based on the largest column family
comment|// in terms of it store size
name|int
name|deltaForLargestFamily
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCount
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SplitKey="
operator|+
name|splitKey
operator|+
literal|"&deltaForLargestFamily="
operator|+
name|deltaForLargestFamily
operator|+
literal|", r="
operator|+
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|int
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCounts
index|[
name|index
index|]
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|<
name|deltaForLargestFamily
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Delta "
operator|+
name|delta
operator|+
literal|" for family "
operator|+
name|index
operator|+
literal|" should be at least "
operator|+
literal|"deltaForLargestFamily "
operator|+
name|deltaForLargestFamily
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitAndMergeWithReplicaTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The test tries to directly split replica regions and directly merge replica regions. These
comment|// are not allowed. The test validates that. Then the test does a valid split/merge of allowed
comment|// regions.
comment|// Set up a table with 3 regions and replication set to 3
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cf
init|=
literal|"f"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitRows
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'4'
block|}
expr_stmt|;
name|splitRows
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'7'
block|}
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|oldRegions
decl_stmt|;
do|do
block|{
name|oldRegions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldRegions
operator|.
name|size
argument_list|()
operator|!=
literal|9
condition|)
do|;
comment|//3 regions * 3 replicas
comment|// write some data to the table
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|"c"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'6'
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'8'
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
comment|// the element at index 1 would be a replica (since the metareader gives us ordered
comment|// regions). Try splitting that region via the split API . Should fail
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|splitRegion
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|// the element at index 1 would be a replica (since the metareader gives us ordered
comment|// regions). Try splitting that region via a different split API (the difference is
comment|// this API goes direct to the regionserver skipping any checks in the admin). Should fail
try|try
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|splitRegionAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|//testing Sync split operation
try|try
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|splitRegionSync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|// Try merging a replica with another. Should fail.
try|try
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|mergeRegionsSync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|m
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
comment|// Try going to the master directly (that will skip the check in admin)
try|try
block|{
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|nameofRegionsToMerge
index|[
literal|0
index|]
operator|=
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
expr_stmt|;
name|nameofRegionsToMerge
index|[
literal|1
index|]
operator|=
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
expr_stmt|;
name|MergeTableRegionsRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMergeTableRegionsRequest
argument_list|(
name|nameofRegionsToMerge
argument_list|,
literal|true
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getMaster
argument_list|()
operator|.
name|mergeTableRegions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
name|m
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|m
operator|.
name|getCause
argument_list|()
decl_stmt|;
do|do
block|{
if|if
condition|(
name|t
operator|instanceof
name|MergeRegionException
condition|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|!=
literal|null
condition|)
do|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidHColumnDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|HColumnDescriptor
argument_list|(
literal|"/cfamily/name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisableAddColumnDeleteColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|this
operator|.
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteLastColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// test for enabled table
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to delete the only column family of a table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFamilyOperationException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// test for disabled table
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to delete the only column family of a table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFamilyOperationException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test DFS replication for column families, where one CF has default replication(3) and the other    * is set to 1.    */
annotation|@
name|Test
specifier|public
name|void
name|testHFileReplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fn1
init|=
literal|"rep1"
decl_stmt|;
name|HColumnDescriptor
name|hcd1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fn1
argument_list|)
decl_stmt|;
name|hcd1
operator|.
name|setDFSReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|String
name|fn
init|=
literal|"defaultRep"
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd1
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"defaultRep_rk"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rep1_rk"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn1
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|HStore
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|store
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Column family "
operator|+
name|fn
operator|+
literal|" should have 3 copies"
argument_list|,
name|FSUtils
operator|.
name|getDefaultReplication
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
operator|==
operator|(
name|sf
operator|.
name|getFileInfo
argument_list|()
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getReplication
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|=
name|r
operator|.
name|getStore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|store
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Column family "
operator|+
name|fn1
operator|+
literal|" should have only 1 copy"
argument_list|,
literal|1
operator|==
name|sf
operator|.
name|getFileInfo
argument_list|()
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeRegions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|cd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|td
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|td
operator|.
name|addFamily
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitRows
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'3'
block|}
expr_stmt|;
name|splitRows
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'6'
block|}
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|td
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
decl_stmt|;
name|RegionInfo
name|regionA
decl_stmt|;
name|RegionInfo
name|regionB
decl_stmt|;
comment|// merge with full name
name|tableRegions
operator|=
name|admin
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|regionA
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionB
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TODO convert this to version that is synchronous (See HBASE-16668)
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionB
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// merge with encoded name
name|tableRegions
operator|=
name|admin
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|regionA
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionB
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TODO convert this to version that is synchronous (See HBASE-16668)
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionB
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitShouldNotHappenIfSplitIsDisabledForTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row5"
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Nothing to do.
block|}
comment|// Split should not happen.
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|allRegions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|this
operator|.
name|admin
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchema
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|testCloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaPreservingSplits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|testCloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCloneTableSchema
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TableName
name|newTableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|FAMILY_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|int
name|NUM_FAMILYS
init|=
literal|2
decl_stmt|;
name|int
name|NUM_REGIONS
init|=
literal|3
decl_stmt|;
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
name|int
name|TTL
init|=
literal|86400
decl_stmt|;
name|boolean
name|BLOCK_CACHE
init|=
literal|false
decl_stmt|;
comment|// Create the table
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|setBlockCacheEnabled
argument_list|(
name|BLOCK_CACHE
argument_list|)
operator|.
name|setTimeToLive
argument_list|(
name|TTL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created with splitKyes + 1 rows in META"
argument_list|,
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
argument_list|)
expr_stmt|;
comment|// clone& Verify
name|admin
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|preserveSplits
argument_list|)
expr_stmt|;
name|TableDescriptor
name|newTableDesc
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|newTableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILYS
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamilyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|getBlocksize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_CACHE
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TTL
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|verifyTableDescriptorIgnoreTableName
argument_list|(
name|tableDesc
argument_list|,
name|newTableDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|newTableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"New table should be created with splitKyes + 1 rows in META"
argument_list|,
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|newTableName
argument_list|,
name|splitKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|newTableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaWithNonExistentSourceTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
comment|// test for non-existent source table
try|try
block|{
name|admin
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to create a new table by cloning non-existent source table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaWithExistentDestinationTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf0"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|newTableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// test for existent destination table
try|try
block|{
name|admin
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to create a existent table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyTableOnTableWithRegionReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|int
name|maxFileSize
init|=
literal|10000000
decl_stmt|;
name|TableDescriptor
name|newDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|desc
argument_list|)
operator|.
name|setMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|newDesc
argument_list|)
expr_stmt|;
name|TableDescriptor
name|newTableDesc
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxFileSize
argument_list|,
name|newTableDesc
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

