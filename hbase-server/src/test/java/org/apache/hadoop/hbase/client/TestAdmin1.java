begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
import|;
end_import

begin_comment
comment|/**  * Class to test HBaseAdmin. Spins up the minicluster once at test start and then takes it down  * afterward. Add any testing of HBaseAdmin functionality here.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdmin1
extends|extends
name|TestAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSplitFlushCompactUnknownTable
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|TableName
name|unknowntable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|compact
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|flush
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|split
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ts
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// no files written -> no data
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// still 0, we flushed a file, but no major compaction happened
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|byte
index|[]
name|regionName
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|regionName
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
block|}
name|long
name|ts1
init|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// make sure the region API returns the same value, as the old file is still around
name|assertEquals
argument_list|(
name|ts1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// forces a wait for the compaction
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// after a compaction our earliest timestamp will have progressed forward
name|assertTrue
argument_list|(
name|ts
operator|>
name|ts1
argument_list|)
expr_stmt|;
comment|// region api still the same
name|ts1
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ts
operator|=
name|ADMIN
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testColumnValidName
parameter_list|()
block|{
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"\\test\\abc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExist
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exist
decl_stmt|;
name|exist
operator|=
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|exist
operator|=
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests forcing split from client and having scanners successfully ride over split.    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|}
decl_stmt|;
name|int
name|numVersions
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MAX_VERSIONS
decl_stmt|;
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3500
argument_list|)
decl_stmt|;
name|splitTest
argument_list|(
name|splitKey
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test regionSplitSync
name|splitTest
argument_list|(
name|splitKey
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Multi-family scenario. Tests forcing split from client and having scanners successfully ride    * over split.    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplitMultiFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numVersions
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MAX_VERSIONS
decl_stmt|;
comment|// use small HFile block size so that we can have lots of blocks in HFile
comment|// Otherwise, if there is only one block,
comment|// HFileBlockIndex.midKey()'s value == startKey
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
block|}
decl_stmt|;
comment|// one of the column families isn't splittable
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|1
block|}
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// one column family has much smaller data than the other
comment|// the split key should be based on the largest column family
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|300
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|300
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|count
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rows
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
return|return
name|rows
return|;
block|}
specifier|private
name|void
name|splitTest
parameter_list|(
name|byte
index|[]
name|splitPoint
parameter_list|,
name|byte
index|[]
index|[]
name|familyNames
parameter_list|,
name|int
index|[]
name|rowCounts
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testForceSplit"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Add tail to String so can see better in logs where a test is running.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|rowCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familyNames
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
init|;
name|final
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|q
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// insert rows into column families. The number of rows that have values
comment|// in a specific column family is decided by rowCounts[familyIndex]
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowCounts
index|[
name|index
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
index|[
name|index
index|]
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|k
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|familyNames
index|[
name|index
index|]
argument_list|,
name|q
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
operator|<
name|rowCounts
index|[
name|index
index|]
condition|)
block|{
name|rowCount
operator|=
name|rowCounts
index|[
name|index
index|]
expr_stmt|;
block|}
block|}
comment|// get the initial layout (should just be one region)
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|m
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial regions ("
operator|+
name|m
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Verify row count
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|rows
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|rows
operator|=
name|count
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
comment|// Have an outstanding scan going on to make sure we can scan over splits.
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
comment|// Scan first row so we are into first region before split happens.
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Split the table
if|if
condition|(
name|async
condition|)
block|{
name|ADMIN
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"CheckForSplit"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|45
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
comment|// check again
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"get location failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|count
operator|.
name|set
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found: "
operator|+
name|regions
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cycle waiting on split"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"CheckForSplit thread exited, current region count: "
operator|+
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
operator|-
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Sync split region, no need to create a thread to check
name|ADMIN
operator|.
name|splitRegionAsync
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Verify row count
name|rows
operator|=
literal|1
operator|+
name|count
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// We counted one row above.
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitPoint
operator|!=
literal|null
condition|)
block|{
comment|// make sure the split point matches our explicit configuration
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properly split on "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|familyNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|int
name|splitKey
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if splitKey is based on the largest column family
comment|// in terms of it store size
name|int
name|deltaForLargestFamily
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCount
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SplitKey="
operator|+
name|splitKey
operator|+
literal|"&deltaForLargestFamily="
operator|+
name|deltaForLargestFamily
operator|+
literal|", r="
operator|+
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|int
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCounts
index|[
name|index
index|]
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|<
name|deltaForLargestFamily
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Delta "
operator|+
name|delta
operator|+
literal|" for family "
operator|+
name|index
operator|+
literal|" should be at least "
operator|+
literal|"deltaForLargestFamily "
operator|+
name|deltaForLargestFamily
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitAndMergeWithReplicaTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The test tries to directly split replica regions and directly merge replica regions. These
comment|// are not allowed. The test validates that. Then the test does a valid split/merge of allowed
comment|// regions.
comment|// Set up a table with 3 regions and replication set to 3
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|cf
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitRows
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'4'
block|}
expr_stmt|;
name|splitRows
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'7'
block|}
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|oldRegions
decl_stmt|;
do|do
block|{
name|oldRegions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldRegions
operator|.
name|size
argument_list|()
operator|!=
literal|9
condition|)
do|;
comment|// 3 regions * 3 replicas
comment|// write some data to the table
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'6'
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'8'
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
comment|// the element at index 1 would be a replica (since the metareader gives us ordered
comment|// regions). Try splitting that region via the split API . Should fail
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|splitRegionAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|// the element at index 1 would be a replica (since the metareader gives us ordered
comment|// regions). Try splitting that region via a different split API (the difference is
comment|// this API goes direct to the regionserver skipping any checks in the admin). Should fail
try|try
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|splitRegionAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|// testing Sync split operation
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|splitRegionAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'1'
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
comment|// Try merging a replica with another. Should fail.
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|mergeRegionsAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|m
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
comment|// Try going to the master directly (that will skip the check in admin)
try|try
block|{
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|nameofRegionsToMerge
index|[
literal|0
index|]
operator|=
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
expr_stmt|;
name|nameofRegionsToMerge
index|[
literal|1
index|]
operator|=
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
expr_stmt|;
name|MergeTableRegionsRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMergeTableRegionsRequest
argument_list|(
name|nameofRegionsToMerge
argument_list|,
literal|true
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getMaster
argument_list|()
operator|.
name|mergeTableRegions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
name|m
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|m
operator|.
name|getCause
argument_list|()
decl_stmt|;
do|do
block|{
if|if
condition|(
name|t
operator|instanceof
name|MergeRegionException
condition|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|!=
literal|null
condition|)
do|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidColumnDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"/cfamily/name"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test DFS replication for column families, where one CF has default replication(3) and the other    * is set to 1.    */
annotation|@
name|Test
specifier|public
name|void
name|testHFileReplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fn1
init|=
literal|"rep1"
decl_stmt|;
name|String
name|fn
init|=
literal|"defaultRep"
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn1
argument_list|)
argument_list|)
operator|.
name|setDFSReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"defaultRep_rk"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rep1_rk"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn1
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|HStore
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|store
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Column family "
operator|+
name|fn
operator|+
literal|" should have 3 copies"
argument_list|,
name|FSUtils
operator|.
name|getDefaultReplication
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
operator|==
operator|(
name|sf
operator|.
name|getFileInfo
argument_list|()
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getReplication
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|=
name|r
operator|.
name|getStore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|store
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Column family "
operator|+
name|fn1
operator|+
literal|" should have only 1 copy"
argument_list|,
literal|1
operator|==
name|sf
operator|.
name|getFileInfo
argument_list|()
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|ADMIN
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeRegions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"d"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitRows
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'3'
block|}
expr_stmt|;
name|splitRows
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'6'
block|}
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|td
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
decl_stmt|;
name|RegionInfo
name|regionA
decl_stmt|;
name|RegionInfo
name|regionB
decl_stmt|;
comment|// merge with full name
name|tableRegions
operator|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|regionA
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionB
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TODO convert this to version that is synchronous (See HBASE-16668)
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionB
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// merge with encoded name
name|tableRegions
operator|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|regionA
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionB
operator|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TODO convert this to version that is synchronous (See HBASE-16668)
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionB
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeRegionsInvalidRegionCount
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"d"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitRows
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'3'
block|}
expr_stmt|;
name|splitRows
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'6'
block|}
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|td
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// 0
try|try
block|{
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// 1
try|try
block|{
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// 3
try|try
block|{
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
name|tableRegions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RegionInfo
operator|::
name|getEncodedNameAsBytes
argument_list|)
operator|.
name|toArray
argument_list|(
name|byte
index|[]
index|[]
operator|::
operator|new
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
finally|finally
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitShouldNotHappenIfSplitIsDisabledForTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row5"
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Nothing to do.
block|}
comment|// Split should not happen.
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|allRegions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|ADMIN
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

