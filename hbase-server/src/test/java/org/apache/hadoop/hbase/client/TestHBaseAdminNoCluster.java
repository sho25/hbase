begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PleaseHoldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableCatalogJanitorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|OfflineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCatalogScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBaseAdminNoCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHBaseAdminNoCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Verify that PleaseHoldException gets retried.    * HBASE-8764    * @throws IOException    * @throws ZooKeeperConnectionException    * @throws MasterNotRunningException    * @throws ServiceException    * @throws org.apache.hadoop.hbase.shaded.com.google.protobuf.ServiceException     */
comment|//TODO: Clean up, with Procedure V2 and nonce to prevent the same procedure to call mulitple
comment|// time, this test is invalid anymore. Just keep the test around for some time before
comment|// fully removing it.
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMasterMonitorCallableRetries
parameter_list|()
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
throws|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Set the pause and retry count way down.
name|configuration
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Get mocked connection.   Getting the connection will register it so when HBaseAdmin is
comment|// constructed with same configuration, it will find this mocked connection.
name|ClusterConnection
name|connection
init|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// Mock so we get back the master interface.  Make it so when createTable is called, we throw
comment|// the PleaseHoldException.
name|MasterKeepAliveConnection
name|masterAdmin
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterKeepAliveConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|masterAdmin
operator|.
name|createTable
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|CreateTableRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
literal|"Test fail"
argument_list|)
operator|.
name|initCause
argument_list|(
operator|new
name|PleaseHoldException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getKeepAliveMasterService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterAdmin
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMasterMonitorCollableRetries"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Pass any old htable descriptor; not important
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected fail"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Assert we were called 'count' times.
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|createTable
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|CreateTableRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterOperationsRetries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Admin.listTables()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|getTableDescriptors
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|GetTableDescriptorsRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.listTableNames()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|listTableNames
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|getTableNames
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|GetTableNamesRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.getTableDescriptor()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"getTableDescriptor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|getTableDescriptors
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|GetTableDescriptorsRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.getTableDescriptorsByTableName()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|getTableDescriptorsByTableName
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|getTableDescriptors
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|GetTableDescriptorsRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.move()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|move
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|moveRegion
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|MoveRegionRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.offline()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|offline
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|offlineRegion
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|OfflineRegionRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.setBalancerRunning()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|setBalancerRunning
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|SetBalancerRunningRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.balancer()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|balancer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|balance
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|BalanceRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.enabledCatalogJanitor()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|enableCatalogJanitor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|enableCatalogJanitor
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|EnableCatalogJanitorRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.runCatalogScan()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|runCatalogScan
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|runCatalogScan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|RunCatalogScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Admin.isCatalogJanitorEnabled()
name|testMasterOperationIsRetried
argument_list|(
operator|new
name|MethodCaller
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|isCatalogJanitorEnabled
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|isCatalogJanitorEnabled
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|IsCatalogJanitorEnabledRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
interface|interface
name|MethodCaller
block|{
name|void
name|call
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
function_decl|;
name|void
name|verify
parameter_list|(
name|MasterKeepAliveConnection
name|masterAdmin
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
name|void
name|testMasterOperationIsRetried
parameter_list|(
name|MethodCaller
name|caller
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Set the pause and retry count way down.
name|configuration
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|ClusterConnection
name|connection
init|=
name|mock
argument_list|(
name|ClusterConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|MasterKeepAliveConnection
name|masterAdmin
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterKeepAliveConnection
operator|.
name|class
argument_list|,
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|invocation
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
comment|// all methods will throw an exception
block|}
block|}
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getKeepAliveMasterService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterAdmin
argument_list|)
expr_stmt|;
name|RpcControllerFactory
name|rpcControllerFactory
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcControllerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rpcControllerFactory
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// we need a real retrying caller
name|RpcRetryingCallerFactory
name|callerFactory
init|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getRpcRetryingCallerFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|callerFactory
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|admin
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|HBaseAdmin
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
comment|// mock the call to getRegion since in the absence of a cluster (which means the meta
comment|// is not assigned), getRegion can't function
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
operator|(
operator|(
name|HBaseAdmin
operator|)
name|admin
operator|)
argument_list|)
operator|.
name|getRegion
argument_list|(
name|Matchers
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|caller
operator|.
name|call
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// invoke the HBaseAdmin method
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected fail"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Assert we were called 'count' times.
name|caller
operator|.
name|verify
argument_list|(
name|masterAdmin
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

