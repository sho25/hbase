begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RpcRetryingCallerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|TestRegionReplicaReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ServerRegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Tests failover of secondary region replicas.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionReplicaFailover
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionReplicaReplicationEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|RpcRetryingCallerImpl
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|HBaseTestingUtility
operator|.
name|fam1
block|,
name|HBaseTestingUtility
operator|.
name|fam2
block|,
name|HBaseTestingUtility
operator|.
name|fam3
block|}
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|fam
init|=
name|HBaseTestingUtility
operator|.
name|fam1
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|HTableDescriptor
name|htd
decl_stmt|;
comment|/*    * We are testing with dist log split and dist log replay separately    */
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getParameters
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|params
init|=
operator|new
name|Boolean
index|[]
index|[]
block|{
block|{
literal|true
block|}
block|,
block|{
literal|false
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|boolean
name|distributedLogReplay
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HTU
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ServerRegionReplicaUtil
operator|.
name|REGION_REPLICA_REPLICATION_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ServerRegionReplicaUtil
operator|.
name|REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"replication.stats.thread.period.seconds"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
name|distributedLogReplay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|htd
operator|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|deleteTableIfAny
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the case where a newly created table with region replicas and no data, the secondary    * region replicas are available to read immediately.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSecondaryRegionWithEmptyRegion
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a new table with region replication, don't put any data. Test that the secondary
comment|// region replica is available to read.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setReplicaId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// this should not block
block|}
block|}
comment|/**    * Tests the case where if there is some data in the primary region, reopening the region replicas    * (enable/disable table, etc) makes the region replicas readable.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSecondaryRegionWithNonEmptyRegion
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a new table with region replication and load some data
comment|// than disable and enable the table again and verify the data from secondary
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|verifyNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the case where killing a primary region with unflushed data recovers    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testPrimaryRegionKill
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// wal replication is async, we have to wait until the replication catches up, or we timeout
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// we should not have flushed files now, but data in memstores of primary and secondary
comment|// kill the primary region replica now, and ensure that when it comes back up, we can still
comment|// read from it the same data from primary and secondaries
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|Region
name|r
range|:
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting region server hosting primary region replica"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"for test"
argument_list|)
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
comment|// wal replication is async, we have to wait until the replication catches up, or we timeout
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|// restart the region server
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
comment|/** wal replication is async, we have to wait until the replication catches up, or we timeout    */
specifier|private
name|void
name|verifyNumericRowsWithTimeout
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|endRow
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|HTU
operator|.
name|waitFor
argument_list|(
name|timeout
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HTU
operator|.
name|verifyNumericRows
argument_list|(
name|table
argument_list|,
name|f
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore this, but redo the verify do get the actual exception
name|HTU
operator|.
name|verifyNumericRows
argument_list|(
name|table
argument_list|,
name|f
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the case where killing a secondary region with unflushed data recovers, and the replica    * becomes available to read again shortly.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testSecondaryRegionKill
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for some time to ensure that async wal replication does it's magic
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// we should not have flushed files now, but data in memstores of primary and secondary
comment|// kill the secondary region replica now, and ensure that when it comes back up, we can still
comment|// read from it the same data
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|Region
name|r
range|:
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting region server hosting secondary region replica"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"for test"
argument_list|)
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|verifyNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|verifyNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// restart the region server
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the case where there are 3 region replicas and the primary is continuously accepting    * new writes while one of the secondaries is killed. Verification is done for both of the    * secondary replicas.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testSecondaryRegionKillWhilePrimaryIsAcceptingWrites
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|// start a thread to do the loading of primary
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// start with some base
name|admin
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|ex
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|key
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Thread
name|loader
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|key
operator|.
name|get
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|key
operator|.
name|addAndGet
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|ex
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|loader
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|aborter
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|Region
name|r
range|:
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting region server hosting secondary region replica"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"for test"
argument_list|)
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|ex
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
name|aborter
operator|.
name|start
argument_list|()
expr_stmt|;
name|aborter
operator|.
name|join
argument_list|()
expr_stmt|;
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loader
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key
operator|.
name|get
argument_list|()
operator|>
literal|1000
argument_list|)
expr_stmt|;
comment|// assert that the test is working as designed
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded up to key :"
operator|+
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|verifyNumericRowsWithTimeout
argument_list|(
name|table
argument_list|,
name|fam
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|// restart the region server
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the case where we are creating a table with a lot of regions and replicas. Opening region    * replicas should not block handlers on RS indefinitely.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testLotsOfRegionReplicas
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numRegions
init|=
name|NB_SERVERS
operator|*
literal|20
decl_stmt|;
name|int
name|regionReplication
init|=
literal|10
decl_stmt|;
name|String
name|tableName
init|=
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
decl_stmt|;
name|htd
operator|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
comment|// dont care about splits themselves too much
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|HTU
operator|.
name|getRegionSplitStartKeys
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
decl_stmt|;
name|HTU
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regionReplication
condition|;
name|j
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setReplicaId
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// this should not block. Regions should be coming online
block|}
block|}
block|}
name|HTU
operator|.
name|deleteTableIfAny
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

