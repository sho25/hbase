begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * test hfile features.  *<p>  * Copied from  *<a href="https://issues.apache.org/jira/browse/HADOOP-3315">hadoop-3315 tfile</a>.  * Remove after tfile is committed and use the tfile version of this class  * instead.</p>  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHFile
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|ROOT_DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHFile"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|minBlockSize
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
name|String
name|localFormatter
init|=
literal|"%010d"
decl_stmt|;
specifier|private
specifier|static
name|CacheConfig
name|cacheConf
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|startingMetrics
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test empty HFile.    * Test all features work reasonably when hfile is empty of entries.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyHFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContext
name|context
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withIncludesTags
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Writer
name|w
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|f
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|context
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|r
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|r
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getFirstKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getLastKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create 0-length hfile and show that it fails    */
annotation|@
name|Test
specifier|public
name|void
name|testCorrupt0LengthHFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fsos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|fsos
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|Reader
name|r
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptHFileException
name|che
parameter_list|)
block|{
comment|// Expected failure
return|return;
block|}
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|truncateFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fst
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|fst
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|len
operator|=
name|len
operator|/
literal|2
expr_stmt|;
comment|// create a truncated hfile
name|FSDataOutputStream
name|fdos
init|=
name|fs
operator|.
name|create
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|fdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fdis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|fdos
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|fdis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a truncated hfile and verify that exception thrown.    */
annotation|@
name|Test
specifier|public
name|void
name|testCorruptTruncatedHFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContext
name|context
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Writer
name|w
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withPath
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|f
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|context
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|writeSomeRecords
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|trunc
init|=
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"trucated"
argument_list|)
decl_stmt|;
name|truncateFile
argument_list|(
name|fs
argument_list|,
name|w
operator|.
name|getPath
argument_list|()
argument_list|,
name|trunc
argument_list|)
expr_stmt|;
try|try
block|{
name|Reader
name|r
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|trunc
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptHFileException
name|che
parameter_list|)
block|{
comment|// Expected failure
return|return;
block|}
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
comment|// write some records into the tfile
comment|// write them twice
specifier|private
name|int
name|writeSomeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|,
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|"value"
decl_stmt|;
name|KeyValue
name|kv
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|useTags
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|Tag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"myTag1"
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
operator|+
name|key
argument_list|)
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
operator|+
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
specifier|private
name|void
name|readAllRecords
parameter_list|(
name|HFileScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|readAndCheckbytes
argument_list|(
name|scanner
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// read the records and check
specifier|private
name|int
name|readAndCheckbytes
parameter_list|(
name|HFileScanner
name|scanner
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|"value"
decl_stmt|;
name|int
name|i
init|=
name|start
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|key
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|scanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|val
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|keyStr
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|valStr
init|=
name|value
operator|+
name|keyStr
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyStr
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|valStr
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|KeyValue
operator|.
name|KeyOnlyKeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
operator|.
name|length
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"bytes for keys do not match "
operator|+
name|keyStr
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyBytes
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|valBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"bytes for vals do not match "
operator|+
name|valStr
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valBytes
argument_list|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|valStr
argument_list|)
argument_list|,
name|valBytes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|start
operator|+
name|n
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getSomeKey
parameter_list|(
name|int
name|rowId
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|rowId
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
return|return
name|kv
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSomeRecords
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|useTags
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|FSDataOutputStream
name|createFSOutput
parameter_list|(
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if (fs.exists(name)) fs.delete(name, true);
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|fout
return|;
block|}
comment|/**    * test none codecs    * @param useTags    */
name|void
name|basicWithSomeCodec
parameter_list|(
name|String
name|codec
parameter_list|,
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useTags
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|ncTFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"basic.hfile."
operator|+
name|codec
operator|.
name|toString
argument_list|()
operator|+
name|useTags
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|minBlockSize
argument_list|)
operator|.
name|withCompression
argument_list|(
name|HFileWriterImpl
operator|.
name|compressionByName
argument_list|(
name|codec
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withOutputStream
argument_list|(
name|fout
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writeRecords
argument_list|(
name|writer
argument_list|,
name|useTags
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|fin
init|=
name|fs
operator|.
name|open
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReaderFromStream
argument_list|(
name|ncTFile
argument_list|,
name|fs
operator|.
name|open
argument_list|(
name|ncTFile
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|ncTFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cacheConf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Load up the index.
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
comment|// Get a scanner that caches and that does not use pread.
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Align scanner at start of the file.
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
name|readAllRecords
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|int
name|seekTo
init|=
name|scanner
operator|.
name|seekTo
argument_list|(
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"location lookup failed"
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// read the key and see if it matches
name|ByteBuffer
name|readKey
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|scanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"seeked key does not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|readKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|getSomeKey
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|val1
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|getSomeKey
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|val2
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|ncTFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTFileFeatures
parameter_list|()
throws|throws
name|IOException
block|{
name|testTFilefeaturesInternals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testTFilefeaturesInternals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|protected
name|void
name|testTFilefeaturesInternals
parameter_list|(
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|basicWithSomeCodec
argument_list|(
literal|"none"
argument_list|,
name|useTags
argument_list|)
expr_stmt|;
name|basicWithSomeCodec
argument_list|(
literal|"gz"
argument_list|,
name|useTags
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeNumMetablocks
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|n
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|appendMetaBlock
argument_list|(
literal|"HFileMeta"
operator|+
name|i
argument_list|,
operator|new
name|Writable
argument_list|()
block|{
specifier|private
name|int
name|val
decl_stmt|;
specifier|public
name|Writable
name|setVal
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"something to test"
operator|+
name|val
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{ }
block|}
operator|.
name|setVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|someTestingWithMetaBlock
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|writeNumMetablocks
argument_list|(
name|writer
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readNumMetablocks
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|actual
init|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"HFileMeta"
operator|+
name|i
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ByteBuffer
name|expected
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
literal|"something to test"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed to match metadata"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|someReadingWithMetaBlock
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|readNumMetablocks
argument_list|(
name|reader
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|metablocks
parameter_list|(
specifier|final
name|String
name|compress
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|mFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"meta.hfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|mFile
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|HFileWriterImpl
operator|.
name|compressionByName
argument_list|(
name|compress
argument_list|)
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|minBlockSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withOutputStream
argument_list|(
name|fout
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|someTestingWithMetaBlock
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|fin
init|=
name|fs
operator|.
name|open
argument_list|(
name|mFile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReaderFromStream
argument_list|(
name|mFile
argument_list|,
name|fs
operator|.
name|open
argument_list|(
name|mFile
argument_list|)
argument_list|,
name|this
operator|.
name|fs
operator|.
name|getFileStatus
argument_list|(
name|mFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
comment|// No data -- this should return false.
name|assertFalse
argument_list|(
name|reader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|seekTo
argument_list|()
argument_list|)
expr_stmt|;
name|someReadingWithMetaBlock
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|mFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test meta blocks for tfiles
annotation|@
name|Test
specifier|public
name|void
name|testMetaBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|metablocks
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|metablocks
argument_list|(
literal|"gz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullMetaBlocks
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cacheConf
operator|==
literal|null
condition|)
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|compressAlgo
range|:
name|HBaseTestingUtility
operator|.
name|COMPRESSION_ALGORITHMS
control|)
block|{
name|Path
name|mFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"nometa_"
operator|+
name|compressAlgo
operator|+
literal|".hfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|mFile
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compressAlgo
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|minBlockSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withOutputStream
argument_list|(
name|fout
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"f1"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|mFile
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"non-existant"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make sure the ordinals for our compression algorithms do not change on us.    */
specifier|public
name|void
name|testCompressionOrdinance
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|LZO
operator|.
name|ordinal
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|ordinal
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
operator|.
name|ordinal
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|SNAPPY
operator|.
name|ordinal
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|LZ4
operator|.
name|ordinal
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetShortMidpoint
parameter_list|()
block|{
name|Cell
name|left
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|right
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|mid
init|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbbbbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaaaaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaaaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that if meta comparator, it returns the right cell -- i.e. no
comment|// optimization done.
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|CellComparator
operator|.
name|META_COMPARATOR
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|META_COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|left
argument_list|,
name|mid
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|META_COMPARATOR
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|mid
argument_list|,
name|right
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/**      * See HBASE-7845      */
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfB"
argument_list|)
decl_stmt|;
specifier|final
name|CellComparator
name|keyComparator
init|=
name|CellComparator
operator|.
name|COMPARATOR
decl_stmt|;
comment|// verify that faked shorter rowkey could be generated
name|long
name|ts
init|=
literal|5
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"the quick brown fox"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"the who test text"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
name|Cell
name|newKey
init|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedArray
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"the r"
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|newKey
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|expectedArray
argument_list|,
literal|0
argument_list|,
name|expectedArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify: same with "row + family + qualifier", return rightKey directly
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
literal|5
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
literal|0
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
operator|-
literal|5
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
operator|-
literal|10
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// verify: same with row, different with qualifier
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
literal|5
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualB
argument_list|,
literal|5
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|newKey
argument_list|)
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|newKey
argument_list|)
argument_list|,
name|qualB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newKey
operator|.
name|getTimestamp
argument_list|()
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newKey
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|Maximum
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify metaKeyComparator's getShortMidpointKey output
specifier|final
name|CellComparator
name|metaKeyComparator
init|=
name|CellComparator
operator|.
name|META_COMPARATOR
decl_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase123"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
literal|5
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase234"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
literal|0
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|metaKeyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metaKeyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|metaKeyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
comment|// verify common fix scenario
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbase"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbaseandhdfs"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|expectedArray
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ilovehbasea"
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|newKey
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|expectedArray
argument_list|,
literal|0
argument_list|,
name|expectedArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify only 1 offset scenario
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"100abcdefg"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"101abcdefg"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|newKey
operator|=
name|HFileWriterImpl
operator|.
name|getMidpoint
argument_list|(
name|keyComparator
argument_list|,
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|newKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|keyComparator
operator|.
name|compare
argument_list|(
name|kv2
argument_list|,
name|newKey
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|expectedArray
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"101"
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|newKey
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|newKey
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|expectedArray
argument_list|,
literal|0
argument_list|,
name|expectedArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

