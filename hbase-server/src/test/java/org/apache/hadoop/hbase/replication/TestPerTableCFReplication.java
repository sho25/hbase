begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationSerDeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|FlakeyTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|FlakeyTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPerTableCFReplication
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPerTableCFReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf1
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf2
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf3
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility1
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility2
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_RETRIES
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tabAName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tabBName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tabCName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TC"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|famName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f1Name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f2Name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f3Name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|noRepfamName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"norep"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myval"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|table
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|tabA
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|tabB
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|tabC
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf1
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/1"
argument_list|)
expr_stmt|;
comment|// smaller block size and capacity to trigger more operations
comment|// and test them
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
literal|"org.apache.hadoop.hbase.replication.TestMasterReplication$CoprocessorCounter"
argument_list|)
expr_stmt|;
name|utility1
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniZooKeeperCluster
name|miniZK
init|=
name|utility1
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf1
argument_list|,
literal|"cluster1"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf2
operator|=
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|conf3
operator|=
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|conf3
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/3"
argument_list|)
expr_stmt|;
name|utility2
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf2
argument_list|,
literal|"cluster3"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|utility3
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf3
argument_list|)
expr_stmt|;
name|utility3
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf3
argument_list|,
literal|"cluster3"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|famName
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|noRepfamName
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|tabA
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tabAName
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f1Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabA
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f2Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabA
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f3Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabA
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|tabB
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tabBName
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f1Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabB
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f2Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabB
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f3Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabB
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|tabC
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tabCName
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f1Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabC
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f2Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabC
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|f3Name
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|tabC
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|utility2
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|utility3
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|utility3
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|utility2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseTableCFsFromConfig
parameter_list|()
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tabCFsMap
init|=
literal|null
decl_stmt|;
comment|// 1. null or empty string, result should be null
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
argument_list|)
expr_stmt|;
name|TableName
name|tab1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab1"
argument_list|)
decl_stmt|;
name|TableName
name|tab2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab2"
argument_list|)
decl_stmt|;
name|TableName
name|tab3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab3"
argument_list|)
decl_stmt|;
comment|// 2. single table: "tab1" / "tab2:cf1" / "tab3:cf1,cf3"
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one table
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// its table name is "tab1"
name|assertFalse
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
comment|// not other table
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// null cf-list,
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab2:cf1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one table
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
comment|// its table name is "tab2"
name|assertFalse
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// not other table
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// cf-list contains only 1 cf
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// the only cf is "cf1"
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab3 : cf1 , cf3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one table
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
comment|// its table name is "tab2"
name|assertFalse
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// not other table
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// cf-list contains 2 cf
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// contains "cf1"
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// contains "cf3"
comment|// 3. multiple tables: "tab1 ; tab2:cf1 ; tab3:cf1,cf3"
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab1 ; tab2:cf1 ; tab3:cf1,cf3"
argument_list|)
expr_stmt|;
comment|// 3.1 contains 3 tables : "tab1", "tab2" and "tab3"
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.2 table "tab1" : null cf-list
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.3 table "tab2" : cf-list contains a single cf "cf1"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.4 table "tab3" : cf-list contains "cf1" and "cf3"
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. contiguous or additional ";"(table delimiter) or ","(cf delimiter) can be tolerated
comment|// still use the example of multiple tables: "tab1 ; tab2:cf1 ; tab3:cf1,cf3"
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab1 ; ; tab2:cf1 ; tab3:cf1,,cf3 ;"
argument_list|)
expr_stmt|;
comment|// 4.1 contains 3 tables : "tab1", "tab2" and "tab3"
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4.2 table "tab1" : null cf-list
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4.3 table "tab2" : cf-list contains a single cf "cf1"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4.4 table "tab3" : cf-list contains "cf1" and "cf3"
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. invalid format "tab1:tt:cf1 ; tab2::cf1 ; tab3:cf1,cf3"
comment|//    "tab1:tt:cf1" and "tab2::cf1" are invalid and will be ignored totally
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|parseTableCFsFromConfig
argument_list|(
literal|"tab1:tt:cf1 ; tab2::cf1 ; tab3:cf1,cf3"
argument_list|)
expr_stmt|;
comment|// 5.1 no "tab1" and "tab2", only "tab3"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one table
name|assertFalse
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5.2 table "tab3" : cf-list contains "cf1" and "cf3"
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableCFsHelperConverter
parameter_list|()
block|{
name|ReplicationProtos
operator|.
name|TableCF
index|[]
name|tableCFs
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tabCFsMap
init|=
literal|null
decl_stmt|;
comment|// 1. null or empty string, result should be null
name|assertNull
argument_list|(
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|tableCFs
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tableCFs
operator|.
name|length
argument_list|)
expr_stmt|;
name|TableName
name|tab1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab1"
argument_list|)
decl_stmt|;
name|TableName
name|tab2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab2"
argument_list|)
decl_stmt|;
name|TableName
name|tab3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tab3"
argument_list|)
decl_stmt|;
comment|// 2. single table: "tab1" / "tab2:cf1" / "tab3:cf1,cf3"
name|tabCFsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tableCFs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// only one table
name|assertEquals
argument_list|(
name|tab1
operator|.
name|toString
argument_list|()
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|getQualifier
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tableCFs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// only one table
name|assertEquals
argument_list|(
name|tab2
operator|.
name|toString
argument_list|()
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|getQualifier
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamilies
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf3"
argument_list|)
expr_stmt|;
name|tableCFs
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tableCFs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tab3
operator|.
name|toString
argument_list|()
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|getQualifier
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamilies
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf3"
argument_list|,
name|tableCFs
index|[
literal|0
index|]
operator|.
name|getFamilies
argument_list|(
literal|1
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|put
argument_list|(
name|tab3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf3"
argument_list|)
expr_stmt|;
name|tableCFs
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|tabCFsMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tableCFs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab3
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamilies
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamiliesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamilies
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf3"
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|getTableCF
argument_list|(
name|tableCFs
argument_list|,
name|tab3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFamilies
argument_list|(
literal|1
argument_list|)
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|tabCFsMap
operator|=
name|ReplicationSerDeHelper
operator|.
name|convert2Map
argument_list|(
name|tableCFs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tabCFsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.2 table "tab1" : null cf-list
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.3 table "tab2" : cf-list contains a single cf "cf1"
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.4 table "tab3" : cf-list contains "cf1" and "cf3"
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tabCFsMap
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testPerTableCFReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testPerTableCFReplication"
argument_list|)
expr_stmt|;
name|ReplicationAdmin
name|replicationAdmin
init|=
operator|new
name|ReplicationAdmin
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|Connection
name|connection1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|Connection
name|connection2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|Connection
name|connection3
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf3
argument_list|)
decl_stmt|;
try|try
block|{
name|Admin
name|admin1
init|=
name|connection1
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|Admin
name|admin2
init|=
name|connection2
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|Admin
name|admin3
init|=
name|connection3
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|tabA
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|tabB
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|tabC
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|tabA
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|tabB
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|tabC
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createTable
argument_list|(
name|tabA
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createTable
argument_list|(
name|tabB
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createTable
argument_list|(
name|tabC
argument_list|)
expr_stmt|;
name|Table
name|htab1A
init|=
name|connection1
operator|.
name|getTable
argument_list|(
name|tabAName
argument_list|)
decl_stmt|;
name|Table
name|htab2A
init|=
name|connection2
operator|.
name|getTable
argument_list|(
name|tabAName
argument_list|)
decl_stmt|;
name|Table
name|htab3A
init|=
name|connection3
operator|.
name|getTable
argument_list|(
name|tabAName
argument_list|)
decl_stmt|;
name|Table
name|htab1B
init|=
name|connection1
operator|.
name|getTable
argument_list|(
name|tabBName
argument_list|)
decl_stmt|;
name|Table
name|htab2B
init|=
name|connection2
operator|.
name|getTable
argument_list|(
name|tabBName
argument_list|)
decl_stmt|;
name|Table
name|htab3B
init|=
name|connection3
operator|.
name|getTable
argument_list|(
name|tabBName
argument_list|)
decl_stmt|;
name|Table
name|htab1C
init|=
name|connection1
operator|.
name|getTable
argument_list|(
name|tabCName
argument_list|)
decl_stmt|;
name|Table
name|htab2C
init|=
name|connection2
operator|.
name|getTable
argument_list|(
name|tabCName
argument_list|)
decl_stmt|;
name|Table
name|htab3C
init|=
name|connection3
operator|.
name|getTable
argument_list|(
name|tabCName
argument_list|)
decl_stmt|;
comment|// A. add cluster2/cluster3 as peers to cluster1
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabCName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabBName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabBName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabBName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|addPeer
argument_list|(
literal|"2"
argument_list|,
name|rpc2
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc3
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc3
operator|.
name|setClusterKey
argument_list|(
name|utility3
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabAName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabBName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabBName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabBName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|addPeer
argument_list|(
literal|"3"
argument_list|,
name|rpc3
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
comment|// A1. tableA can only replicated to cluster3
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
comment|// A2. cf 'f1' of tableB can replicated to both cluster2 and cluster3
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1B
argument_list|,
name|htab2B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1B
argument_list|,
name|htab2B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
comment|//  cf 'f2' of tableB can only replicated to cluster3
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
comment|//  cf 'f3' of tableB can only replicated to cluster2
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1B
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1B
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
comment|// A3. tableC can only replicated to cluster2
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f1Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f2Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row1
argument_list|,
name|f3Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
comment|// B. change peers' replicable table-cf config
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabAName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabAName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabAName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabCName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabCName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabCName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|setPeerTableCFs
argument_list|(
literal|"2"
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabBName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tabCName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tabCName
argument_list|)
operator|.
name|add
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|setPeerTableCFs
argument_list|(
literal|"3"
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
comment|// B1. cf 'f1' of tableA can only replicated to cluster2
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1A
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1A
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
comment|//     cf 'f2' of tableA can only replicated to cluster2
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1A
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1A
argument_list|,
name|htab2A
argument_list|)
expr_stmt|;
comment|//     cf 'f3' of tableA isn't replicable to either cluster2 or cluster3
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1A
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab2A
argument_list|,
name|htab3A
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1A
argument_list|)
expr_stmt|;
comment|// B2. tableB can only replicated to cluster3
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab2B
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1B
argument_list|,
name|htab3B
argument_list|)
expr_stmt|;
comment|// B3. cf 'f1' of tableC non-replicable to either cluster
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1C
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab2C
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f1Name
argument_list|,
name|htab1C
argument_list|)
expr_stmt|;
comment|//     cf 'f2' of tableC can only replicated to cluster2
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
name|ensureRowNotReplicated
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f2Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|)
expr_stmt|;
comment|//     cf 'f3' of tableC can replicated to cluster2 and cluster3
name|putAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
name|deleteAndWaitWithFamily
argument_list|(
name|row2
argument_list|,
name|f3Name
argument_list|,
name|htab1C
argument_list|,
name|htab2C
argument_list|,
name|htab3C
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ensureRowNotReplicated
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|Table
modifier|...
name|tables
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteAndWaitWithFamily
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|Table
name|source
parameter_list|,
name|Table
modifier|...
name|targets
parameter_list|)
throws|throws
name|Exception
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|source
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|removedFromAll
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Table
name|target
range|:
name|targets
control|)
block|{
name|Result
name|res
init|=
name|target
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not deleted"
argument_list|)
expr_stmt|;
name|removedFromAll
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|removedFromAll
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|putAndWaitWithFamily
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|Table
name|source
parameter_list|,
name|Table
modifier|...
name|targets
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|row
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|source
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|replicatedToAll
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Table
name|target
range|:
name|targets
control|)
block|{
name|Result
name|res
init|=
name|target
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|replicatedToAll
operator|=
literal|false
expr_stmt|;
break|break;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|res
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replicatedToAll
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

