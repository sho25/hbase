begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestGetReplicationLoad
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestGetReplicationLoad
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestGetReplicationLoad
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|private
specifier|static
name|HMaster
name|master
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|public
specifier|static
class|class
name|MyMaster
extends|extends
name|HMaster
block|{
specifier|public
name|MyMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tryRegionServerReport
parameter_list|(
name|long
name|reportStartTime
parameter_list|,
name|long
name|reportEndTime
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting cluster"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
comment|// Set master class and use default values for other options.
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|masterClass
argument_list|(
name|TestMasterMetrics
operator|.
name|MyMaster
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for active/ready master"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|master
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TEST_UTIL
operator|!=
literal|null
condition|)
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReplicationMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|peer1
init|=
literal|"test1"
decl_stmt|,
name|peer2
init|=
literal|"test2"
decl_stmt|;
name|long
name|ageOfLastShippedOp
init|=
literal|2
decl_stmt|,
name|replicationLag
init|=
literal|3
decl_stmt|,
name|timeStampOfLastShippedOp
init|=
literal|4
decl_stmt|;
name|int
name|sizeOfLogQueue
init|=
literal|5
decl_stmt|;
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
operator|.
name|Builder
name|request
init|=
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|cluster
operator|.
name|getMaster
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|request
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|rload1
init|=
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerID
argument_list|(
name|peer1
argument_list|)
operator|.
name|setAgeOfLastShippedOp
argument_list|(
name|ageOfLastShippedOp
argument_list|)
operator|.
name|setReplicationLag
argument_list|(
name|replicationLag
argument_list|)
operator|.
name|setTimeStampOfLastShippedOp
argument_list|(
name|timeStampOfLastShippedOp
argument_list|)
operator|.
name|setSizeOfLogQueue
argument_list|(
name|sizeOfLogQueue
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|rload2
init|=
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerID
argument_list|(
name|peer2
argument_list|)
operator|.
name|setAgeOfLastShippedOp
argument_list|(
name|ageOfLastShippedOp
operator|+
literal|1
argument_list|)
operator|.
name|setReplicationLag
argument_list|(
name|replicationLag
operator|+
literal|1
argument_list|)
operator|.
name|setTimeStampOfLastShippedOp
argument_list|(
name|timeStampOfLastShippedOp
operator|+
literal|1
argument_list|)
operator|.
name|setSizeOfLogQueue
argument_list|(
name|sizeOfLogQueue
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterStatusProtos
operator|.
name|ServerLoad
name|sl
init|=
name|ClusterStatusProtos
operator|.
name|ServerLoad
operator|.
name|newBuilder
argument_list|()
operator|.
name|addReplLoadSource
argument_list|(
name|rload1
argument_list|)
operator|.
name|addReplLoadSource
argument_list|(
name|rload2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|request
operator|.
name|setLoad
argument_list|(
name|sl
argument_list|)
expr_stmt|;
name|master
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|addPeer
argument_list|(
name|peer1
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|master
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|addPeer
argument_list|(
name|peer2
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|regionServerReport
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ReplicationLoadSource
argument_list|>
argument_list|>
argument_list|>
name|replicationLoad
init|=
name|master
operator|.
name|getReplicationLoad
argument_list|(
operator|new
name|ServerName
index|[]
block|{
name|serverName
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"peer size "
argument_list|,
literal|2
argument_list|,
name|replicationLoad
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"load size "
argument_list|,
literal|1
argument_list|,
name|replicationLoad
operator|.
name|get
argument_list|(
name|peer1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log queue size of peer1"
argument_list|,
name|sizeOfLogQueue
argument_list|,
name|replicationLoad
operator|.
name|get
argument_list|(
name|peer1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSecond
argument_list|()
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"replication lag of peer2"
argument_list|,
name|replicationLag
operator|+
literal|1
argument_list|,
name|replicationLoad
operator|.
name|get
argument_list|(
name|peer2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSecond
argument_list|()
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

