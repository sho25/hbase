begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSpaceQuotaBasicFunctioning
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSpaceQuotaBasicFunctioning
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSpaceQuotaBasicFunctioning
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RETRIES
init|=
literal|10
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|removeAllQuotas
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletesAfterNoInserts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|writeUntilViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
comment|// Try a couple of times to verify that the quota never gets enforced, same as we
comment|// do when we're trying to catch the failure.
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"should_not_be_rejected"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RETRIES
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
init|)
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoCompactions
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// We know the policy is active at this point
comment|// Major compactions should be rejected
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected that invoking the compaction should throw an Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// Minor compactions should also be rejected.
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected that invoking the compaction should throw an Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// Expected!
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoEnableAfterDisablePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|writeUntilViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Disabling a table relies on some external action (over the other policies), so wait a bit
comment|// more than the other tests.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RETRIES
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tn
operator|+
literal|" is still enabled, expecting it to be disabled. Will wait and re-check."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|tn
operator|+
literal|" is still enabled but it should be disabled"
argument_list|,
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tn
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|String
name|exceptionContents
init|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedText
init|=
literal|"violated space quota"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the exception to contain "
operator|+
name|expectedText
operator|+
literal|", but was: "
operator|+
name|exceptionContents
argument_list|,
name|exceptionContents
operator|.
name|contains
argument_list|(
name|expectedText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableQuotaOverridesNamespaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SpaceViolationPolicy
name|policy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// 2MB limit on the table, 1GB limit on the namespace
specifier|final
name|long
name|tableLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|long
name|namespaceLimit
init|=
literal|1024L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|tableLimit
argument_list|,
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|namespaceLimit
argument_list|,
name|policy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write more data than should be allowed and flush it to disk
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
comment|// This should be sufficient time for the chores to run and see the change.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// The write should be rejected because the table quota takes priority over the namespace
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|helper
operator|.
name|verifyViolation
argument_list|(
name|policy
argument_list|,
name|tn
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisablePolicyQuotaAndViolate
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|helper
operator|.
name|createTable
argument_list|()
decl_stmt|;
name|helper
operator|.
name|setQuotaLimit
argument_list|(
name|tableName
argument_list|,
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tableName
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
operator|*
literal|2L
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.master.quotas.region.report.retention.millis"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterQuotaManager
name|quotaManager
init|=
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
comment|// Make sure the master has report for the table.
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|regionSizes
operator|.
name|containsKey
argument_list|(
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Check if disabled table region report present in the map after retention period expired.
comment|// It should be present after retention period expired.
specifier|final
name|long
name|regionSizes
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|k
lambda|->
name|k
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|regionSizes
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

