begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  *  Class that test tags  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTags
block|{
specifier|static
name|boolean
name|useFilter
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|TestCoprocessorForTags
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|useFilter
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTags
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testTags"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowa"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowb"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowc"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// colDesc.setDataBlockEncoding(DataBlockEncoding.NONE);
name|colDesc
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|setAttribute
argument_list|(
literal|"visibility"
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myTag"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value1
argument_list|)
expr_stmt|;
comment|// put1.setAttribute("visibility", Bytes.toBytes("myTag3"));
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|put2
operator|.
name|setAttribute
argument_list|(
literal|"visibility"
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myTag3"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|2
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|result
argument_list|(
name|fam
argument_list|,
name|row
argument_list|,
name|qual
argument_list|,
name|row2
argument_list|,
name|table
argument_list|,
name|value
argument_list|,
name|value2
argument_list|,
name|row1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|compact
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|result
argument_list|(
name|fam
argument_list|,
name|row
argument_list|,
name|qual
argument_list|,
name|row2
argument_list|,
name|table
argument_list|,
name|value
argument_list|,
name|value2
argument_list|,
name|row1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushAndCompactionWithoutTags
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFlushAndCompactionWithoutTags"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowa"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowb"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowc"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// colDesc.setDataBlockEncoding(DataBlockEncoding.NONE);
name|colDesc
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|2
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
name|KeyValue
name|current
init|=
operator|(
name|KeyValue
operator|)
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|==
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|compact
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
name|KeyValue
name|current
init|=
operator|(
name|KeyValue
operator|)
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|==
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushAndCompactionwithCombinations
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFlushAndCompactionwithCombinations"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowa"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowb"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowc"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowd
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowd"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowe
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowe"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// colDesc.setDataBlockEncoding(DataBlockEncoding.NONE);
name|colDesc
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
operator|new
name|Tag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"ram"
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
expr_stmt|;
comment|// put.setAttribute("visibility", Bytes.toBytes("myTag"));
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|put1
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|value1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
expr_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|rowd
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsdf"
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|put2
operator|=
operator|new
name|Put
argument_list|(
name|rowe
argument_list|)
expr_stmt|;
name|value2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000dfsddfdf"
argument_list|)
expr_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value2
argument_list|,
name|tags
argument_list|)
expr_stmt|;
comment|// put2.setAttribute("visibility", Bytes.toBytes("myTag3"));
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|2
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
name|KeyValue
name|current
init|=
operator|(
name|KeyValue
operator|)
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
comment|// System.out.println(current);
name|int
name|tagsLength
init|=
name|current
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagsLength
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|==
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// even if taglength is going to be> 0 the byte array would be same
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|!=
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|next
control|)
block|{
name|CellScanner
name|cellScanner
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
name|KeyValue
name|current
init|=
operator|(
name|KeyValue
operator|)
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
comment|// System.out.println(current);
if|if
condition|(
name|current
operator|.
name|getTagsLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|==
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// even if taglength is going to be> 0 the byte array would be same
name|assertTrue
argument_list|(
name|current
operator|.
name|getValueOffset
argument_list|()
operator|+
name|current
operator|.
name|getValueLength
argument_list|()
operator|!=
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|result
parameter_list|(
name|byte
index|[]
name|fam
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|qual
parameter_list|,
name|byte
index|[]
name|row2
parameter_list|,
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|value2
parameter_list|,
name|byte
index|[]
name|row1
parameter_list|,
name|byte
index|[]
name|value1
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// If filters are used this attribute can be specifically check for in
comment|// filterKV method and
comment|// kvs can be filtered out if the tags of interest is not found in that kv
name|s
operator|.
name|setAttribute
argument_list|(
literal|"visibility"
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myTag"
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Result
name|next
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|CellScanner
name|cellScanner
init|=
name|next
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
name|KeyValue
name|current
init|=
operator|(
name|KeyValue
operator|)
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|next2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|next2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next2
operator|.
name|getRow
argument_list|()
argument_list|,
name|row1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next2
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|next2
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|next2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next2
operator|.
name|getRow
argument_list|()
argument_list|,
name|row2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|next2
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestCoprocessorForTags
extends|extends
name|BaseRegionObserver
block|{
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|attribute
init|=
name|put
operator|.
name|getAttribute
argument_list|(
literal|"visibility"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|updatedCells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
name|edits
range|:
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|edits
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|cf
operator|==
literal|null
condition|)
block|{
name|cf
operator|=
name|kv
operator|.
name|getFamily
argument_list|()
expr_stmt|;
block|}
name|Tag
name|tag
init|=
operator|new
name|Tag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|attribute
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tagList
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|KeyValue
name|newKV
init|=
operator|new
name|KeyValue
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|kv
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|tagList
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Cell
argument_list|>
operator|)
name|updatedCells
operator|)
operator|.
name|add
argument_list|(
name|newKV
argument_list|)
expr_stmt|;
block|}
block|}
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|remove
argument_list|(
name|cf
argument_list|)
expr_stmt|;
comment|// Update the family map
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|put
argument_list|(
name|cf
argument_list|,
name|updatedCells
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

