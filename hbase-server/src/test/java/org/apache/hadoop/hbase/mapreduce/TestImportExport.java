begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Import
operator|.
name|KeyValueImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|VerySlowMapReduceTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LauncherSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Tests the table import and table export MR job functionality  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|VerySlowMapReduceTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestImportExport
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILYA_STRING
init|=
literal|"a"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILYB_STRING
init|=
literal|"b"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILYA_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILYB_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_DIR
init|=
literal|"outputdir"
decl_stmt|;
specifier|private
specifier|static
name|String
name|FQ_OUTPUT_DIR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPORT_BATCH_SIZE
init|=
literal|"100"
decl_stmt|;
specifier|private
specifier|static
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
name|FQ_OUTPUT_DIR
operator|=
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniMapReduceCluster
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs an export job with the specified command line args    * @param args    * @return true if job completed successfully    * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
name|boolean
name|runExport
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// need to make a copy of the configuration because to make sure different temp dirs are used.
name|GenericOptionsParser
name|opts
init|=
operator|new
name|GenericOptionsParser
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|opts
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|args
operator|=
name|opts
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Export
operator|.
name|createSubmittableJob
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|isSuccessful
argument_list|()
return|;
block|}
comment|/**    * Runs an import job with the specified command line args    * @param args    * @return true if job completed successfully    * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
name|boolean
name|runImport
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// need to make a copy of the configuration because to make sure different temp dirs are used.
name|GenericOptionsParser
name|opts
init|=
operator|new
name|GenericOptionsParser
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|opts
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|args
operator|=
name|opts
operator|.
name|getRemainingArgs
argument_list|()
expr_stmt|;
name|Job
name|job
init|=
name|Import
operator|.
name|createSubmittableJob
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|isSuccessful
argument_list|()
return|;
block|}
comment|/**    * Test simple replication case with column mapping    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleCase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|EXPORT_TABLE
init|=
literal|"exportSimpleCase"
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|EXPORT_TABLE
argument_list|)
argument_list|,
name|FAMILYA
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|EXPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|,
comment|// max number of key versions per key to export
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|IMPORT_TABLE
init|=
literal|"importTableSimpleCase"
decl_stmt|;
name|t
operator|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|,
name|FAMILYB
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Import
operator|.
name|CF_RENAME_PROP
operator|+
literal|"="
operator|+
name|FAMILYA_STRING
operator|+
literal|":"
operator|+
name|FAMILYB_STRING
block|,
name|IMPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test export hbase:meta table    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaExport
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|EXPORT_TABLE
init|=
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|EXPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1"
block|,
literal|"0"
block|,
literal|"0"
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test import data from 0.94 exported file    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testImport94Table
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TestImportExport
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"exportedTableIn94Format"
argument_list|)
decl_stmt|;
name|Path
name|importPath
init|=
operator|new
name|Path
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|importPath
argument_list|,
operator|new
name|Path
argument_list|(
name|FQ_OUTPUT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"exportedTableIn94Format"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|IMPORT_TABLE
init|=
literal|"importTableExportedFrom94"
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-Dhbase.import.version=0.94"
block|,
name|IMPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|/* exportedTableIn94Format contains 5 rows      ROW         COLUMN+CELL      r1          column=f1:c1, timestamp=1383766761171, value=val1      r2          column=f1:c1, timestamp=1383766771642, value=val2      r3          column=f1:c1, timestamp=1383766777615, value=val3      r4          column=f1:c1, timestamp=1383766785146, value=val4      r5          column=f1:c1, timestamp=1383766791506, value=val5      */
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test export scanner batching    */
annotation|@
name|Test
specifier|public
name|void
name|testExportScannerBatching
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|BATCH_TABLE
init|=
literal|"exportWithBatch"
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|BATCH_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|3
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|4
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Export
operator|.
name|EXPORT_BATCHING
operator|+
literal|"="
operator|+
name|EXPORT_BATCH_SIZE
block|,
comment|// added scanner batching arg.
name|BATCH_TABLE
block|,
name|FQ_OUTPUT_DIR
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|FQ_OUTPUT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|EXPORT_TABLE
init|=
literal|"exportWithDeletes"
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|EXPORT_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|3
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|4
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW1
argument_list|,
name|now
operator|+
literal|3
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Export
operator|.
name|RAW_SCAN
operator|+
literal|"=true"
block|,
name|EXPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|,
comment|// max number of key versions per key to export
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|IMPORT_TABLE
init|=
literal|"importWithDeletes"
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|IMPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|Cell
index|[]
name|res
init|=
name|r
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isDeleteFamily
argument_list|(
name|res
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
operator|+
literal|4
argument_list|,
name|res
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
operator|+
literal|3
argument_list|,
name|res
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|res
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
operator|+
literal|2
argument_list|,
name|res
index|[
literal|4
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
operator|+
literal|1
argument_list|,
name|res
index|[
literal|5
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
argument_list|,
name|res
index|[
literal|6
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithMultipleDeleteFamilyMarkersOfSameRowSameFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|EXPORT_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"exportWithMultipleDeleteFamilyMarkersOfSameRowSameFamily"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|EXPORT_TABLE
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|exportT
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|EXPORT_TABLE
argument_list|)
decl_stmt|;
comment|//Add first version of QUAL
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|exportT
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|//Add Delete family marker
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW1
argument_list|,
name|now
operator|+
literal|3
argument_list|)
decl_stmt|;
name|exportT
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|//Add second version of QUAL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|5
argument_list|,
literal|"s"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|exportT
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|//Add second Delete family marker
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|ROW1
argument_list|,
name|now
operator|+
literal|7
argument_list|)
expr_stmt|;
name|exportT
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Export
operator|.
name|RAW_SCAN
operator|+
literal|"=true"
block|,
name|EXPORT_TABLE
operator|.
name|getNameAsString
argument_list|()
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|,
comment|// max number of key versions per key to export
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|IMPORT_TABLE
init|=
literal|"importWithMultipleDeleteFamilyMarkersOfSameRowSameFamily"
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|importT
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|IMPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|importedTScanner
init|=
name|importT
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Result
name|importedTResult
init|=
name|importedTScanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|ResultScanner
name|exportedTScanner
init|=
name|exportT
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Result
name|exportedTResult
init|=
name|exportedTScanner
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Result
operator|.
name|compareResults
argument_list|(
name|exportedTResult
argument_list|,
name|importedTResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Original and imported tables data comparision failed with error:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|exportT
operator|.
name|close
argument_list|()
expr_stmt|;
name|importT
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a simple table, run an Export Job on it, Import with filtering on,  verify counts,    * attempt with invalid values.    */
annotation|@
name|Test
specifier|public
name|void
name|testWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create simple table to export
name|String
name|EXPORT_TABLE
init|=
literal|"exportSimpleCase_ImportWithFilter"
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|EXPORT_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|exportTable
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Put
name|p1
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|3
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|4
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
comment|// Having another row would actually test the filter.
name|Put
name|p2
init|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
decl_stmt|;
name|p2
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|exportTable
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Export the simple table
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|EXPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Import to a new table
name|String
name|IMPORT_TABLE
init|=
literal|"importWithFilter"
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|IMPORT_TABLE
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILYA
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|importTable
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Import
operator|.
name|FILTER_CLASS_CONF_KEY
operator|+
literal|"="
operator|+
name|PrefixFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"-D"
operator|+
name|Import
operator|.
name|FILTER_ARGS_CONF_KEY
operator|+
literal|"="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ROW1
argument_list|)
block|,
name|IMPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the count of the source table for that time range
name|PrefixFilter
name|filter
init|=
operator|new
name|PrefixFilter
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|getCount
argument_list|(
name|exportTable
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected row count between export and import tables"
argument_list|,
name|count
argument_list|,
name|getCount
argument_list|(
name|importTable
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then test that a broken command doesn't bork everything - easier here because we don't
comment|// need to re-run the export job
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Import
operator|.
name|FILTER_CLASS_CONF_KEY
operator|+
literal|"="
operator|+
name|Filter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"-D"
operator|+
name|Import
operator|.
name|FILTER_ARGS_CONF_KEY
operator|+
literal|"="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ROW1
argument_list|)
operator|+
literal|""
block|,
name|EXPORT_TABLE
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleanup
name|exportTable
operator|.
name|close
argument_list|()
expr_stmt|;
name|importTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Count the number of keyvalues in the specified table for the given timerange    * @param start    * @param end    * @param table    * @return    * @throws IOException    */
specifier|private
name|int
name|getCount
parameter_list|(
name|Table
name|table
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|+=
name|res
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * test main method. Import should print help and call System.exit    */
annotation|@
name|Test
specifier|public
name|void
name|testImportMain
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|SecurityManager
name|SECURITY_MANAGER
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|LauncherSecurityManager
name|newSecurityManager
init|=
operator|new
name|LauncherSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|newSecurityManager
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Import
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|newSecurityManager
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong number of arguments:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dimport.bulk.output=/path/for/output"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dimport.filter.class=<name of filter class>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dimport.bulk.output=/path/for/output"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dmapreduce.reduce.speculative=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldPrintStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|SECURITY_MANAGER
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test main method. Export should print help and call System.exit    */
annotation|@
name|Test
specifier|public
name|void
name|testExportMain
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|SecurityManager
name|SECURITY_MANAGER
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|LauncherSecurityManager
name|newSecurityManager
init|=
operator|new
name|LauncherSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|newSecurityManager
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Export
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|newSecurityManager
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Wrong number of arguments:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage: Export [-D<property=value>]*<tablename><outputdir> [<versions> "
operator|+
literal|"[<starttime> [<endtime>]] [^[regex pattern] or [Prefix] to filter]]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-D hbase.mapreduce.scan.column.family=<familyName>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-D hbase.mapreduce.include.deleted.rows=true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dhbase.client.scanner.caching=100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dmapreduce.map.speculative=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dmapreduce.reduce.speculative=false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-Dhbase.export.scanner.batch=10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldPrintStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|SECURITY_MANAGER
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test map method of Importer    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testKeyValueImporter
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValueImporter
name|importer
init|=
operator|new
name|KeyValueImporter
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Context
name|ctx
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ImmutableBytesWritable
name|writer
init|=
operator|(
name|ImmutableBytesWritable
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|KeyValue
name|key
init|=
operator|(
name|KeyValue
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Key"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|writer
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"row"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|ctx
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|KeyValue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|importer
operator|.
name|setup
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|Result
name|value
init|=
name|mock
argument_list|(
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|keys
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|when
argument_list|(
name|value
operator|.
name|rawCells
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|importer
operator|.
name|map
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Key"
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test addFilterAndArguments method of Import This method set couple    * parameters into Configuration    */
annotation|@
name|Test
specifier|public
name|void
name|testAddFilterAndArguments
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"param1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"param2"
argument_list|)
expr_stmt|;
name|Import
operator|.
name|addFilterAndArguments
argument_list|(
name|configuration
argument_list|,
name|FilterBase
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.hadoop.hbase.filter.FilterBase"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|Import
operator|.
name|FILTER_CLASS_CONF_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"param1,param2"
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|Import
operator|.
name|FILTER_ARGS_CONF_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurability
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// Create an export table.
name|String
name|exportTableName
init|=
literal|"exporttestDurability"
decl_stmt|;
name|Table
name|exportTable
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTableName
argument_list|)
argument_list|,
name|FAMILYA
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Insert some data
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|exportTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|exportTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Run the export
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|exportTableName
block|,
name|FQ_OUTPUT_DIR
block|,
literal|"1000"
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|runExport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the table for import
name|String
name|importTableName
init|=
literal|"importTestDurability1"
decl_stmt|;
name|Table
name|importTable
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|importTableName
argument_list|)
argument_list|,
name|FAMILYA
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Register the wal listener for the import table
name|TableWALActionListener
name|walListener
init|=
operator|new
name|TableWALActionListener
argument_list|(
name|importTableName
argument_list|)
decl_stmt|;
name|WAL
name|wal
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getWAL
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|wal
operator|.
name|registerWALActionsListener
argument_list|(
name|walListener
argument_list|)
expr_stmt|;
comment|// Run the import with SKIP_WAL
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Import
operator|.
name|WAL_DURABILITY
operator|+
literal|"="
operator|+
name|Durability
operator|.
name|SKIP_WAL
operator|.
name|name
argument_list|()
block|,
name|importTableName
block|,
name|FQ_OUTPUT_DIR
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|//Assert that the wal is not visisted
name|assertTrue
argument_list|(
operator|!
name|walListener
operator|.
name|isWALVisited
argument_list|()
argument_list|)
expr_stmt|;
comment|//Ensure that the count is 2 (only one version of key value is obtained)
name|assertTrue
argument_list|(
name|getCount
argument_list|(
name|importTable
argument_list|,
literal|null
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Run the import with the default durability option
name|importTableName
operator|=
literal|"importTestDurability2"
expr_stmt|;
name|importTable
operator|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|importTableName
argument_list|)
argument_list|,
name|FAMILYA
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wal
operator|.
name|unregisterWALActionsListener
argument_list|(
name|walListener
argument_list|)
expr_stmt|;
name|walListener
operator|=
operator|new
name|TableWALActionListener
argument_list|(
name|importTableName
argument_list|)
expr_stmt|;
name|wal
operator|.
name|registerWALActionsListener
argument_list|(
name|walListener
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|importTableName
block|,
name|FQ_OUTPUT_DIR
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|runImport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|//Assert that the wal is visisted
name|assertTrue
argument_list|(
name|walListener
operator|.
name|isWALVisited
argument_list|()
argument_list|)
expr_stmt|;
comment|//Ensure that the count is 2 (only one version of key value is obtained)
name|assertTrue
argument_list|(
name|getCount
argument_list|(
name|importTable
argument_list|,
literal|null
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * This listens to the {@link #visitLogEntryBeforeWrite(HTableDescriptor, WALKey, WALEdit)} to    * identify that an entry is written to the Write Ahead Log for the given table.    */
specifier|private
specifier|static
class|class
name|TableWALActionListener
extends|extends
name|WALActionsListener
operator|.
name|Base
block|{
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|boolean
name|isVisited
init|=
literal|false
decl_stmt|;
specifier|public
name|TableWALActionListener
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|,
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|isVisited
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isWALVisited
parameter_list|()
block|{
return|return
name|isVisited
return|;
block|}
block|}
block|}
end_class

end_unit

