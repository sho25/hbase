begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionReplicasWithRestartScenarios
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionReplicasWithRestartScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionReplicasWithRestartScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.master.wait.on.regionservers.mintostart"
argument_list|,
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|createTableDirectlyFromHTD
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Table
name|createTableDirectlyFromHTD
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
name|HTU
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
name|getSplits
argument_list|(
literal|20
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|getSplits
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|RegionSplitter
operator|.
name|UniformSplit
name|split
init|=
operator|new
name|RegionSplitter
operator|.
name|UniformSplit
argument_list|()
decl_stmt|;
name|split
operator|.
name|setFirstRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|split
operator|.
name|setLastRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|split
argument_list|(
name|numRegions
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionServer
operator|.
name|TEST_SKIP_REPORTING_TRANSITION
operator|=
literal|false
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegionServer
name|getRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|HRegionServer
name|getSecondaryRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
name|HRegionServer
name|getTertiaryRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|2
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionReplicasCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|assertReplicaDistributed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start Region before stopping other so SCP has three servers to play with when it goes
comment|// about assigning instead of two, depending on sequencing of SCP and RS stop/start.
comment|// If two only, then it'll be forced to assign replicas alongside primaries.
name|HTU
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startRegionServerAndWait
argument_list|(
literal|60000
argument_list|)
operator|.
name|getRegionServer
argument_list|()
expr_stmt|;
name|HRegionServer
name|stopRegionServer
init|=
name|getRS
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|stopRegionServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Make a copy because this is actual instance from HRegionServer
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|regionsOnStoppedServer
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|(
name|stopRegionServer
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
argument_list|)
decl_stmt|;
name|HTU
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|stopRegionServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|waitForRegionServerToStop
argument_list|(
name|serverName
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|waitTableAvailable
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|assertReplicaDistributed
argument_list|(
name|regionsOnStoppedServer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertReplicaDistributed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertReplicaDistributed
argument_list|(
name|getRS
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertReplicaDistributed
parameter_list|(
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ASSERT DISTRIBUTED {}"
argument_list|,
name|onlineRegions
argument_list|)
expr_stmt|;
name|boolean
name|res
init|=
name|checkDuplicates
argument_list|(
name|onlineRegions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
decl_stmt|;
name|res
operator|=
name|checkDuplicates
argument_list|(
name|onlineRegions2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
decl_stmt|;
name|checkDuplicates
argument_list|(
name|onlineRegions3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|int
name|totalRegions
init|=
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|62
argument_list|,
name|totalRegions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkDuplicates
parameter_list|(
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Region
argument_list|>
name|copyOfRegion
init|=
operator|new
name|ArrayList
argument_list|<
name|Region
argument_list|>
argument_list|(
name|onlineRegions3
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|copyOfRegion
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionInfoForReplica
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Region
name|actualRegion
range|:
name|onlineRegions3
control|)
block|{
if|if
condition|(
name|regionInfoForReplica
operator|.
name|equals
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|actualRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate found {} and {}"
argument_list|,
name|actualRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|actualRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|actualRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

