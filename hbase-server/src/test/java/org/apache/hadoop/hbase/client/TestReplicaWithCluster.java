begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoreCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StorefileRefresherChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestHRegionServerBulkLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicaWithCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicaWithCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicaWithCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|TestReplicaWithCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// second minicluster used in testing of replication
specifier|private
specifier|static
name|HBaseTestingUtility
name|HTU2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REFRESH_PERIOD
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|META_SCAN_TIMEOUT_IN_MILLISEC
init|=
literal|200
decl_stmt|;
comment|/**    * This copro is used to synchronize the tests.    */
specifier|public
specifier|static
class|class
name|SlowMeCopro
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|cdl
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|SlowMeCopro
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|CountDownLatch
name|latch
init|=
name|cdl
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sleepTime
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|sleepTime
operator|.
name|get
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the counterCountDownLatch"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// To help the tests to finish.
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't wait more"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We're not the primary replicas."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This copro is used to simulate region server down exception for Get and Scan    */
annotation|@
name|CoreCoprocessor
specifier|public
specifier|static
class|class
name|RegionServerStoppedCopro
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|public
name|RegionServerStoppedCopro
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|replicaId
init|=
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
comment|// Fail for the primary replica and replica 1
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Throw Region Server Stopped Exceptoin for replica id "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|+
literal|" not running"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We're replica region "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|replicaId
init|=
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
comment|// Fail for the primary replica and replica 1
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Throw Region Server Stopped Exceptoin for replica id "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|+
literal|" not running"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We're replica region "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This copro is used to slow down the primary meta region scan a bit    */
specifier|public
specifier|static
class|class
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|static
name|boolean
name|slowDownPrimaryMetaScan
init|=
literal|false
decl_stmt|;
specifier|static
name|boolean
name|throwException
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|replicaId
init|=
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
comment|// Fail for the primary replica, but not for meta
if|if
condition|(
name|throwException
condition|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
operator|&&
operator|(
name|replicaId
operator|==
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get, throw Region Server Stopped Exceptoin for region "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|+
literal|" not running"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get, We're replica region "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|replicaId
init|=
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
comment|// Slow down with the primary meta region scan
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
operator|&&
operator|(
name|replicaId
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|slowDownPrimaryMetaScan
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan with primary meta region, slow down a bit"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|META_SCAN_TIMEOUT_IN_MILLISEC
operator|-
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Ingore
block|}
block|}
comment|// Fail for the primary replica
if|if
condition|(
name|throwException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan, throw Region Server Stopped Exceptoin for replica "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|+
literal|" not running"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan, We're replica region "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan, We're replica region "
operator|+
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// enable store file refreshing
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|StorefileRefresherChore
operator|.
name|REGIONSERVER_STOREFILE_REFRESH_PERIOD
argument_list|,
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setFloat
argument_list|(
literal|"hbase.regionserver.logroll.multiplier"
argument_list|,
literal|0.0001f
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry.intervalmill"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Wait for primary call longer so make sure that it will get exception from the primary call
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.primaryCallTimeout.get"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.primaryCallTimeout.scan"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
comment|// Retry less so it can fail faster
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Enable meta replica at server side
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.meta.replica.count"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Make sure master does not host system tables.
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.balancer.tablesOnMaster"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
comment|// Set system coprocessor so it can be applied to meta regions
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_META_REPLICA_SCAN_TIMEOUT
argument_list|,
name|META_SCAN_TIMEOUT_IN_MILLISEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startMaster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|HTU2
operator|!=
literal|null
condition|)
name|HTU2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testCreateDeleteTable"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// But if we ask for stale we will get it
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testChangeTable"
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
operator|.
name|setCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// basic test: it should work.
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a CF, it should work.
name|TableDescriptor
name|bHdt
init|=
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|td
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|td
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|modifyTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|TableDescriptor
name|nHdt
init|=
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fams="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|nHdt
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|bHdt
operator|.
name|getColumnFamilyCount
argument_list|()
operator|+
literal|1
argument_list|,
name|nHdt
operator|.
name|getColumnFamilyCount
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Admin
name|admin
init|=
name|HTU
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|nHdt
operator|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fams="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|nHdt
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|bHdt
operator|.
name|getColumnFamilyCount
argument_list|()
operator|+
literal|1
argument_list|,
name|nHdt
operator|.
name|getColumnFamilyCount
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testReplicaAndReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testReplicaAndReplication"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|MiniZooKeeperCluster
name|miniZK
init|=
name|HTU
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
name|HTU2
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|HTU2
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
name|HTU2
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup second Zk"
argument_list|)
expr_stmt|;
name|HTU2
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
name|ReplicationAdmin
name|admin
init|=
operator|new
name|ReplicationAdmin
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|HTU2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
literal|"2"
argument_list|,
name|rpc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
specifier|final
name|Table
name|table
init|=
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Put& flush done on the first cluster. Now doing a get on the same cluster."
argument_list|)
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|1000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
return|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stale get on the first cluster done. Now for the second."
argument_list|)
expr_stmt|;
specifier|final
name|Table
name|table2
init|=
name|HTU
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|1000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
return|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|table2
operator|.
name|close
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU2
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU2
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We shutdown HTU2 minicluster later, in afterClass(), as shutting down
comment|// the minicluster has negative impact of deleting all HConnections in JVM.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoad
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create table then get the single region for our new table.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating test table"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testBulkLoad"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// create hfiles to load.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating test data"
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|HTU
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testBulkLoad"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numRows
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|famPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|col
range|:
name|hdt
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|Path
name|hfile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|col
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|HTU
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|hfile
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|qual
argument_list|,
name|val
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|famPaths
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|hfile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// bulk load HFiles
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading test data"
argument_list|)
expr_stmt|;
specifier|final
name|ClusterConnection
name|conn
init|=
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|bulkToken
init|=
operator|new
name|SecureBulkLoadClient
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|)
operator|.
name|prepareBulkLoad
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|conn
argument_list|,
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TestHRegionServerBulkLoad
operator|.
name|rowkey
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|newController
argument_list|()
argument_list|,
name|HConstants
operator|.
name|PRIORITY_UNSET
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to connect to server "
operator|+
name|getLocation
argument_list|()
operator|+
literal|" for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SecureBulkLoadClient
name|secureClient
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|secureClient
operator|=
operator|new
name|SecureBulkLoadClient
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|secureClient
operator|.
name|secureBulkLoadHFiles
argument_list|(
name|getStub
argument_list|()
argument_list|,
name|famPaths
argument_list|,
name|regionName
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|bulkToken
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|RpcRetryingCallerFactory
name|factory
init|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|caller
init|=
name|factory
operator|.
name|newCaller
argument_list|()
decl_stmt|;
name|caller
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// verify we can read them from the primary
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying data load"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|TestHRegionServerBulkLoad
operator|.
name|rowkey
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify we can read them from the replica
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying replica queries"
argument_list|)
expr_stmt|;
try|try
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|TestHRegionServerBulkLoad
operator|.
name|rowkey
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicaGetWithPrimaryDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testCreateDeleteTable"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|RegionServerStoppedCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Flush so it can be picked by the replica refresher thread
name|HTU
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep for some time until data is picked up by replicas
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
comment|// But if we ask for stale we will get it
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicaScanWithPrimaryDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testCreateDeleteTable"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|RegionServerStoppedCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Flush so it can be picked by the replica refresher thread
name|HTU
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep for some time until data is picked up by replicas
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
comment|// But if we ask for stale we will get it
comment|// Instantiating the Scan class
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Scanning the required columns
name|scan
operator|.
name|addFamily
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
comment|// Getting the scan result
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicaGetWithRpcClientImpl
parameter_list|()
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.ipc.client.specificThreadForWriting"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.rpc.client.impl"
argument_list|,
literal|"org.apache.hadoop.hbase.ipc.RpcClientImpl"
argument_list|)
expr_stmt|;
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testReplicaGetWithRpcClientImpl"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SlowMeCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Flush so it can be picked by the replica refresher thread
name|HTU
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep for some time until data is picked up by replicas
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Create the new connection so new config can kick in
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// But if we ask for stale we will get it
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SlowMeCopro
operator|.
name|cdl
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|SlowMeCopro
operator|.
name|sleepTime
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|unset
argument_list|(
literal|"hbase.ipc.client.specificThreadForWriting"
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|unset
argument_list|(
literal|"hbase.rpc.client.impl"
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This test is to test when hbase.client.metaReplicaCallTimeout.scan is configured, meta table
comment|// scan will always get the result from primary meta region as long as the result is returned
comment|// within configured hbase.client.metaReplicaCallTimeout.scan from primary meta region.
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionLocationFromPrimaryMetaRegion
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|setUseMetaReplicas
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testGetRegionLocationFromPrimaryMetaRegion"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
operator|.
name|slowDownPrimaryMetaScan
operator|=
literal|true
expr_stmt|;
comment|// Get user table location, always get it from the primary meta replica
name|RegionLocations
name|url
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
block|}
finally|finally
block|{
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
operator|.
name|slowDownPrimaryMetaScan
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|setUseMetaReplicas
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This test is to simulate the case that the meta region and the primary user region
comment|// are down, hbase client is able to access user replica regions and return stale data.
comment|// Meta replica is enabled to show the case that the meta replica region could be out of sync
comment|// with the primary meta region.
annotation|@
name|Test
specifier|public
name|void
name|testReplicaGetWithPrimaryAndMetaDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|setUseMetaReplicas
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create table then get the single region for our new table.
name|HTableDescriptor
name|hdt
init|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
literal|"testReplicaGetWithPrimaryAndMetaDown"
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|setRegionReplication
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Get Meta location
name|RegionLocations
name|mrl
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Get user table location
name|RegionLocations
name|url
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make sure that user primary region is co-hosted with the meta region
if|if
condition|(
operator|!
name|url
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|mrl
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|HTU
operator|.
name|moveRegionAndWait
argument_list|(
name|url
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|mrl
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that the user replica region is not hosted by the same region server with
comment|// primary
if|if
condition|(
name|url
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|mrl
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|HTU
operator|.
name|moveRegionAndWait
argument_list|(
name|url
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|url
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait until the meta table is updated with new location info
while|while
condition|(
literal|true
condition|)
block|{
name|mrl
operator|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Get user table location
name|url
operator|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|HTU
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"meta locations "
operator|+
name|mrl
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"table locations "
operator|+
name|url
argument_list|)
expr_stmt|;
name|ServerName
name|a
init|=
name|url
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ServerName
name|b
init|=
name|mrl
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for new region info to be updated in meta table"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|f
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Flush so it can be picked by the replica refresher thread
name|HTU
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep for some time until data is picked up by replicas
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|REFRESH_PERIOD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
comment|// Simulating the RS down
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
operator|.
name|throwException
operator|=
literal|true
expr_stmt|;
comment|// The first Get is supposed to succeed
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
comment|// The second Get will succeed as well
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|setUseMetaReplicas
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RegionServerHostingPrimayMetaRegionSlowOrStopCopro
operator|.
name|throwException
operator|=
literal|false
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

