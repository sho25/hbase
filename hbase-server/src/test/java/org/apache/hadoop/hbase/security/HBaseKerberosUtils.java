begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBaseKerberosUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseKerberosUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KRB_PRINCIPAL
init|=
name|SecurityConstants
operator|.
name|REGIONSERVER_KRB_PRINCIPAL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_KRB_PRINCIPAL
init|=
name|SecurityConstants
operator|.
name|MASTER_KRB_PRINCIPAL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KRB_KEYTAB_FILE
init|=
name|SecurityConstants
operator|.
name|REGIONSERVER_KRB_KEYTAB_FILE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_PRINCIPAL
init|=
name|AuthUtil
operator|.
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_KEYTAB
init|=
name|AuthUtil
operator|.
name|HBASE_CLIENT_KEYTAB_FILE
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isKerberosPropertySetted
parameter_list|()
block|{
name|String
name|krbPrincipal
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|krbKeytab
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|krbPrincipal
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|krbKeytab
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|setPrincipalForTesting
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
name|setSystemProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setKeytabFileForTesting
parameter_list|(
name|String
name|keytabFile
parameter_list|)
block|{
name|setSystemProperty
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|,
name|keytabFile
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setClientPrincipalForTesting
parameter_list|(
name|String
name|clientPrincipal
parameter_list|)
block|{
name|setSystemProperty
argument_list|(
name|CLIENT_PRINCIPAL
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setClientKeytabForTesting
parameter_list|(
name|String
name|clientKeytab
parameter_list|)
block|{
name|setSystemProperty
argument_list|(
name|CLIENT_KEYTAB
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setSystemProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getKeytabFileForTesting
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getPrincipalForTesting
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getClientPrincipalForTesting
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|CLIENT_PRINCIPAL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getClientKeytabForTesting
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|CLIENT_KEYTAB
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|getConfigurationWoPrincipal
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_CONF_KEY
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|getSecuredConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|setSecuredConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Set up configuration for a secure HDFS+HBase cluster.    * @param conf configuration object.    * @param servicePrincipal service principal used by NN, HM and RS.    * @param spnegoPrincipal SPNEGO principal used by NN web UI.    */
specifier|public
specifier|static
name|void
name|setSecuredConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|servicePrincipal
parameter_list|,
name|String
name|spnegoPrincipal
parameter_list|)
block|{
name|setPrincipalForTesting
argument_list|(
name|servicePrincipal
argument_list|)
expr_stmt|;
name|setSecuredConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setSecuredHadoopConfiguration
argument_list|(
name|conf
argument_list|,
name|spnegoPrincipal
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setSecuredConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_CONF_KEY
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KRB_PRINCIPAL
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MASTER_KRB_PRINCIPAL
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setSecuredHadoopConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|spnegoServerPrincipal
parameter_list|)
block|{
comment|// if we drop support for hadoop-2.4.0 and hadoop-2.4.1,
comment|// the following key should be changed.
comment|// 1) DFS_NAMENODE_USER_NAME_KEY -> DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
comment|// 2) DFS_DATANODE_USER_NAME_KEY -> DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
name|String
name|serverPrincipal
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|keytabFilePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|KRB_KEYTAB_FILE
argument_list|)
decl_stmt|;
comment|// HDFS
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_USER_NAME_KEY
argument_list|,
name|serverPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|keytabFilePath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_USER_NAME_KEY
argument_list|,
name|serverPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|keytabFilePath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// YARN
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
name|KRB_PRINCIPAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PRINCIPAL
argument_list|,
name|KRB_PRINCIPAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|spnegoServerPrincipal
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|spnegoServerPrincipal
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"ignore.secure.ports.for.testing"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up SSL configuration for HDFS NameNode and DataNode.    * @param utility a HBaseTestingUtility object.    * @param clazz the caller test class.    * @throws Exception if unable to set up SSL configuration    */
specifier|public
specifier|static
name|void
name|setSSLConfiguration
parameter_list|(
name|HBaseTestingUtility
name|utility
parameter_list|,
name|Class
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|utility
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|File
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|utility
operator|.
name|getDataTestDir
argument_list|(
literal|"keystore"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|keystoresDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|UserGroupInformation
name|loginAndReturnUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|keyTabFileConfKey
init|=
literal|"hbase."
operator|+
name|username
operator|+
literal|".keytab.file"
decl_stmt|;
name|String
name|keyTabFileLocation
init|=
name|conf
operator|.
name|get
argument_list|(
name|keyTabFileConfKey
argument_list|)
decl_stmt|;
name|String
name|principalConfKey
init|=
literal|"hbase."
operator|+
name|username
operator|+
literal|".kerberos.principal"
decl_stmt|;
name|String
name|principal
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|principalConfKey
argument_list|)
argument_list|,
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyTabFileLocation
operator|==
literal|null
operator|||
name|principal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Principal or key tab file null for : "
operator|+
name|principalConfKey
operator|+
literal|", "
operator|+
name|keyTabFileConfKey
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keyTabFileLocation
argument_list|)
decl_stmt|;
return|return
name|ugi
return|;
block|}
block|}
end_class

end_unit

