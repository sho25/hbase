begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Jdk14Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|ChecksumUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|MapreduceTestingShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|Canary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|MasterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|EmptyWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_comment
comment|/**  * Facility for testing HBase. Replacement for  * old HBaseTestCase and HBaseClusterTestCase functionality.  * Create an instance and keep it around testing HBase.  This class is  * meant to be your one-stop shop for anything you might need testing.  Manages  * one cluster at a time only. Managed cluster can be an in-process  * {@link MiniHBaseCluster}, or a deployed cluster of type {@link DistributedHBaseCluster}.  * Not all methods work with the real cluster.  * Depends on log4j being on classpath and  * hbase-site.xml for logging and test-run configuration.  It does not set  * logging levels nor make changes to configuration parameters.  *<p>To preserve test data directories, pass the system property "hbase.testing.preserve.testdir"  * setting it to true.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|HBaseTestingUtility
extends|extends
name|HBaseCommonTestingUtility
block|{
specifier|private
name|MiniZooKeeperCluster
name|zkCluster
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGIONS_PER_SERVER_KEY
init|=
literal|"hbase.test.regions-per-server"
decl_stmt|;
comment|/**    * The default number of regions per regionserver when creating a pre-split    * table.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONS_PER_SERVER
init|=
literal|5
decl_stmt|;
comment|/**    * Set if we were passed a zkCluster.  If so, we won't shutdown zk as    * part of general shutdown.    */
specifier|private
name|boolean
name|passedZkCluster
init|=
literal|false
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|HBaseCluster
name|hbaseCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
comment|/** If there is a mini cluster running for this testing utility instance. */
specifier|private
name|boolean
name|miniClusterRunning
decl_stmt|;
specifier|private
name|String
name|hadoopLogDir
decl_stmt|;
comment|/** Directory (a subdirectory of dataTestDir) used by the dfs cluster if any */
specifier|private
name|File
name|clusterTestDir
init|=
literal|null
decl_stmt|;
comment|/** Directory on test filesystem where we put the data for this instance of     * HBaseTestingUtility*/
specifier|private
name|Path
name|dataTestDirOnTestFS
init|=
literal|null
decl_stmt|;
comment|/**    * System property key to get test directory value.    * Name is as it is because mini dfs has hard-codings to put test data here.    * It should NOT be used directly in HBase, as it's a property used in    *  mini dfs.    *  @deprecated can be used only with mini dfs    */
annotation|@
name|Deprecated
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIRECTORY_KEY
init|=
literal|"test.build.data"
decl_stmt|;
comment|/** Filesystem URI used for map-reduce mini-cluster setup */
specifier|private
specifier|static
name|String
name|FS_URI
decl_stmt|;
comment|/** A set of ports that have been claimed using {@link #randomFreePort()}. */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|takenRandomPorts
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Compression algorithms to use in parameterized JUnit 4 tests */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|COMPRESSION_ALGORITHMS_PARAMETERIZED
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
block|}
block|,
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** This is for unit tests parameterized with a two booleans. */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|BOOLEAN_PARAMETERIZED
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** This is for unit tests parameterized with a single boolean. */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|MEMSTORETS_TAGS_PARAMETRIZED
init|=
name|memStoreTSAndTagsCombination
argument_list|()
decl_stmt|;
comment|/** Compression algorithms to use in testing */
specifier|public
specifier|static
specifier|final
name|Compression
operator|.
name|Algorithm
index|[]
name|COMPRESSION_ALGORITHMS
init|=
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
block|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
block|}
decl_stmt|;
comment|/**    * Create all combinations of Bloom filters and compression algorithms for    * testing.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|bloomAndCompressionCombinations
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|comprAlgo
range|:
name|HBaseTestingUtility
operator|.
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|BloomType
name|bloomType
range|:
name|BloomType
operator|.
name|values
argument_list|()
control|)
block|{
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|comprAlgo
block|,
name|bloomType
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|configurations
argument_list|)
return|;
block|}
comment|/**    * Create combination of memstoreTS and tags    */
specifier|private
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|memStoreTSAndTagsCombination
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|false
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|configurations
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|BLOOM_AND_COMPRESSION_COMBINATIONS
init|=
name|bloomAndCompressionCombinations
argument_list|()
decl_stmt|;
specifier|public
name|HBaseTestingUtility
parameter_list|()
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HBaseTestingUtility
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// a hbase checksum verification failure will cause unit tests to fail
name|ChecksumUtil
operator|.
name|generateExceptionForChecksumFailureForTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HBaseTestingUtility where all tmp files are written to the local test data dir.    * It is needed to properly base FSUtil.getRootDirs so that they drop temp files in the proper    * test dir.  Use this when you aren't using an Mini HDFS cluster.    * @return HBaseTestingUtility that use local fs for temp files.    */
specifier|public
specifier|static
name|HBaseTestingUtility
name|createLocalHTU
parameter_list|()
block|{
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|createLocalHTU
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**    * Create an HBaseTestingUtility where all tmp files are written to the local test data dir.    * It is needed to properly base FSUtil.getRootDirs so that they drop temp files in the proper    * test dir.  Use this when you aren't using an Mini HDFS cluster.    * @param c Configuration (will be modified)    * @return HBaseTestingUtility that use local fs for temp files.    */
specifier|public
specifier|static
name|HBaseTestingUtility
name|createLocalHTU
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
name|HBaseTestingUtility
name|htu
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|dataTestDir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|dataTestDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|HConstants
operator|.
name|HBASE_DIR
operator|+
literal|" to "
operator|+
name|dataTestDir
argument_list|)
expr_stmt|;
return|return
name|htu
return|;
block|}
comment|/**    * Returns this classes's instance of {@link Configuration}.  Be careful how    * you use the returned Configuration since {@link HConnection} instances    * can be shared.  The Map of HConnections is keyed by the Configuration.  If    * say, a Connection was being used against a cluster that had been shutdown,    * see {@link #shutdownMiniCluster()}, then the Connection will no longer    * be wholesome.  Rather than use the return direct, its usually best to    * make a copy and use that.  Do    *<code>Configuration c = new Configuration(INSTANCE.getConfiguration());</code>    * @return Instance of Configuration.    */
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
specifier|public
name|void
name|setHBaseCluster
parameter_list|(
name|HBaseCluster
name|hbaseCluster
parameter_list|)
block|{
name|this
operator|.
name|hbaseCluster
operator|=
name|hbaseCluster
expr_stmt|;
block|}
comment|/**    * Home our data in a dir under {@link #DEFAULT_BASE_TEST_DIRECTORY}.    * Give it a random name so can have many concurrent tests running if    * we need to.  It needs to amend the {@link #TEST_DIRECTORY_KEY}    * System property, as it's what minidfscluster bases    * it data dir on.  Moding a System property is not the way to do concurrent    * instances -- another instance could grab the temporary    * value unintentionally -- but not anything can do about it at moment;    * single instance only is how the minidfscluster works.    *    * We also create the underlying directory for    *  hadoop.log.dir, mapreduce.cluster.local.dir and hadoop.tmp.dir, and set the values    *  in the conf, and as a system property for hadoop.tmp.dir    *    * @return The calculated data test build directory, if newly-created.    */
annotation|@
name|Override
specifier|protected
name|Path
name|setupDataTestDir
parameter_list|()
block|{
name|Path
name|testPath
init|=
name|super
operator|.
name|setupDataTestDir
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|testPath
condition|)
block|{
return|return
literal|null
return|;
block|}
name|createSubDirAndSystemProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|testPath
argument_list|,
literal|"hadoop-log-dir"
argument_list|)
expr_stmt|;
comment|// This is defaulted in core-default.xml to /tmp/hadoop-${user.name}, but
comment|//  we want our own value to ensure uniqueness on the same machine
name|createSubDirAndSystemProperty
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
name|testPath
argument_list|,
literal|"hadoop-tmp-dir"
argument_list|)
expr_stmt|;
comment|// Read and modified in org.apache.hadoop.mapred.MiniMRCluster
name|createSubDir
argument_list|(
literal|"mapreduce.cluster.local.dir"
argument_list|,
name|testPath
argument_list|,
literal|"mapred-local-dir"
argument_list|)
expr_stmt|;
return|return
name|testPath
return|;
block|}
specifier|private
name|void
name|createSubDirAndSystemProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Path
name|parent
parameter_list|,
name|String
name|subDirName
parameter_list|)
block|{
name|String
name|sysValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysValue
operator|!=
literal|null
condition|)
block|{
comment|// There is already a value set. So we do nothing but hope
comment|//  that there will be no conflicts
name|LOG
operator|.
name|info
argument_list|(
literal|"System.getProperty(\""
operator|+
name|propertyName
operator|+
literal|"\") already set to: "
operator|+
name|sysValue
operator|+
literal|" so I do NOT create it in "
operator|+
name|parent
argument_list|)
expr_stmt|;
name|String
name|confValue
init|=
name|conf
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confValue
operator|!=
literal|null
operator|&&
operator|!
name|confValue
operator|.
name|endsWith
argument_list|(
name|sysValue
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|propertyName
operator|+
literal|" property value differs in configuration and system: "
operator|+
literal|"Configuration="
operator|+
name|confValue
operator|+
literal|" while System="
operator|+
name|sysValue
operator|+
literal|" Erasing configuration value by system value."
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|propertyName
argument_list|,
name|sysValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Ok, it's not set, so we create it as a subdirectory
name|createSubDir
argument_list|(
name|propertyName
argument_list|,
name|parent
argument_list|,
name|subDirName
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return Where to write test data on the test filesystem; Returns working directory    * for the test filesystem by default    * @see #setupDataTestDirOnTestFS()    * @see #getTestFileSystem()    */
specifier|private
name|Path
name|getBaseTestDirOnTestFS
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getTestFileSystem
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
literal|"test-data"
argument_list|)
return|;
block|}
comment|/**    * @return Where the DFS cluster will write data on the local subsystem.    * Creates it if it does not exist already.  A subdir of {@link #getBaseTestDir()}    * @see #getTestFileSystem()    */
name|Path
name|getClusterTestDir
parameter_list|()
block|{
if|if
condition|(
name|clusterTestDir
operator|==
literal|null
condition|)
block|{
name|setupClusterTestDir
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|clusterTestDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a directory for the DFS cluster, under the test data    */
specifier|private
name|void
name|setupClusterTestDir
parameter_list|()
block|{
if|if
condition|(
name|clusterTestDir
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Using randomUUID ensures that multiple clusters can be launched by
comment|//  a same test, if it stops& starts them
name|Path
name|testDir
init|=
name|getDataTestDir
argument_list|(
literal|"dfscluster_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|clusterTestDir
operator|=
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
comment|// Have it cleaned up on exit
name|boolean
name|b
init|=
name|deleteOnExit
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
condition|)
name|clusterTestDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|clusterTestDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new mini-cluster data directory: "
operator|+
name|clusterTestDir
operator|+
literal|", deleteOnExit="
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a Path in the test filesystem, obtained from {@link #getTestFileSystem()}    * to write temporary test data. Call this method after setting up the mini dfs cluster    * if the test relies on it.    * @return a unique path in the test filesystem    */
specifier|public
name|Path
name|getDataTestDirOnTestFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataTestDirOnTestFS
operator|==
literal|null
condition|)
block|{
name|setupDataTestDirOnTestFS
argument_list|()
expr_stmt|;
block|}
return|return
name|dataTestDirOnTestFS
return|;
block|}
comment|/**    * Returns a Path in the test filesystem, obtained from {@link #getTestFileSystem()}    * to write temporary test data. Call this method after setting up the mini dfs cluster    * if the test relies on it.    * @return a unique path in the test filesystem    * @param subdirName name of the subdir to create under the base test dir    */
specifier|public
name|Path
name|getDataTestDirOnTestFS
parameter_list|(
specifier|final
name|String
name|subdirName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|getDataTestDirOnTestFS
argument_list|()
argument_list|,
name|subdirName
argument_list|)
return|;
block|}
comment|/**    * Sets up a path in test filesystem to be used by tests    */
specifier|private
name|void
name|setupDataTestDirOnTestFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataTestDirOnTestFS
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Data test on test fs dir already setup in "
operator|+
name|dataTestDirOnTestFS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//The file system can be either local, mini dfs, or if the configuration
comment|//is supplied externally, it can be an external cluster FS. If it is a local
comment|//file system, the tests should use getBaseTestDir, otherwise, we can use
comment|//the working directory, and create a unique sub dir there
name|FileSystem
name|fs
init|=
name|getTestFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|dataTestDir
init|=
operator|new
name|File
argument_list|(
name|getDataTestDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteOnExit
argument_list|()
condition|)
name|dataTestDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|dataTestDirOnTestFS
operator|=
operator|new
name|Path
argument_list|(
name|dataTestDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|base
init|=
name|getBaseTestDirOnTestFS
argument_list|()
decl_stmt|;
name|String
name|randomStr
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dataTestDirOnTestFS
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|randomStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteOnExit
argument_list|()
condition|)
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|dataTestDirOnTestFS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Cleans the test data directory on the test filesystem.    * @return True if we removed the test dirs    * @throws IOException    */
specifier|public
name|boolean
name|cleanupDataTestDirOnTestFS
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|dataTestDirOnTestFS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
name|dataTestDirOnTestFS
operator|=
literal|null
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Cleans a subdirectory under the test data directory on the test filesystem.    * @return True if we removed child    * @throws IOException    */
specifier|public
name|boolean
name|cleanupDataTestDirOnTestFS
parameter_list|(
name|String
name|subdirName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|cpath
init|=
name|getDataTestDirOnTestFS
argument_list|(
name|subdirName
argument_list|)
decl_stmt|;
return|return
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|cpath
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Start a minidfscluster.    * @param servers How many DNs to start.    * @throws Exception    * @see {@link #shutdownMiniDFSCluster()}    * @return The mini dfs cluster created.    */
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
name|int
name|servers
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniDFSCluster
argument_list|(
name|servers
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Start a minidfscluster.    * This is useful if you want to run datanode on distinct hosts for things    * like HDFS block location verification.    * If you start MiniDFSCluster without host names, all instances of the    * datanodes will have the same host name.    * @param hosts hostnames DNs to run on.    * @throws Exception    * @see {@link #shutdownMiniDFSCluster()}    * @return The mini dfs cluster created.    */
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
specifier|final
name|String
name|hosts
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|hosts
operator|!=
literal|null
operator|&&
name|hosts
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|startMiniDFSCluster
argument_list|(
name|hosts
operator|.
name|length
argument_list|,
name|hosts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Start a minidfscluster.    * Can only create one.    * @param servers How many DNs to start.    * @param hosts hostnames DNs to run on.    * @throws Exception    * @see {@link #shutdownMiniDFSCluster()}    * @return The mini dfs cluster created.    */
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
name|int
name|servers
parameter_list|,
specifier|final
name|String
name|hosts
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|createDirsAndSetProperties
argument_list|()
expr_stmt|;
name|EditLogFileOutputStream
operator|.
name|setShouldSkipFsyncForTesting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Error level to skip some warnings specific to the minicluster. See HBASE-4709
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsSystemImpl
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|this
operator|.
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|servers
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Set this just-started cluster as our filesystem.
name|FileSystem
name|fs
init|=
name|this
operator|.
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|this
operator|.
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for the cluster to be totally up
name|this
operator|.
name|dfsCluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|//reset the test directory for test file system
name|dataTestDirOnTestFS
operator|=
literal|null
expr_stmt|;
return|return
name|this
operator|.
name|dfsCluster
return|;
block|}
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
name|int
name|servers
parameter_list|,
specifier|final
name|String
name|racks
index|[]
parameter_list|,
name|String
name|hosts
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|createDirsAndSetProperties
argument_list|()
expr_stmt|;
name|this
operator|.
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|servers
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Set this just-started cluster as our filesystem.
name|FileSystem
name|fs
init|=
name|this
operator|.
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|this
operator|.
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for the cluster to be totally up
name|this
operator|.
name|dfsCluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|//reset the test directory for test file system
name|dataTestDirOnTestFS
operator|=
literal|null
expr_stmt|;
return|return
name|this
operator|.
name|dfsCluster
return|;
block|}
specifier|public
name|MiniDFSCluster
name|startMiniDFSClusterForTestHLog
parameter_list|(
name|int
name|namenodePort
parameter_list|)
throws|throws
name|IOException
block|{
name|createDirsAndSetProperties
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|namenodePort
argument_list|,
name|conf
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|dfsCluster
return|;
block|}
comment|/** This is used before starting HDFS and map-reduce mini-clusters */
specifier|private
name|void
name|createDirsAndSetProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|setupClusterTestDir
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|clusterTestDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|createDirAndSetProperty
argument_list|(
literal|"cache_data"
argument_list|,
literal|"test.cache.data"
argument_list|)
expr_stmt|;
name|createDirAndSetProperty
argument_list|(
literal|"hadoop_tmp"
argument_list|,
literal|"hadoop.tmp.dir"
argument_list|)
expr_stmt|;
name|hadoopLogDir
operator|=
name|createDirAndSetProperty
argument_list|(
literal|"hadoop_logs"
argument_list|,
literal|"hadoop.log.dir"
argument_list|)
expr_stmt|;
name|createDirAndSetProperty
argument_list|(
literal|"mapred_local"
argument_list|,
literal|"mapreduce.cluster.local.dir"
argument_list|)
expr_stmt|;
name|createDirAndSetProperty
argument_list|(
literal|"mapred_temp"
argument_list|,
literal|"mapreduce.cluster.temp.dir"
argument_list|)
expr_stmt|;
name|enableShortCircuit
argument_list|()
expr_stmt|;
name|Path
name|root
init|=
name|getDataTestDirOnTestFS
argument_list|(
literal|"hadoop"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MapreduceTestingShim
operator|.
name|getMROutputDirProp
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"mapred-output-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.system.dir"
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"mapred-system-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.staging.root.dir"
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"mapreduce-jobtracker-staging-root-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.working.dir"
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"mapred-working-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Get the HBase setting for dfs.client.read.shortcircuit from the conf or a system property.    *  This allows to specify this parameter on the command line.    *   If not set, default is true.    */
specifier|public
name|boolean
name|isReadShortCircuitOn
parameter_list|()
block|{
specifier|final
name|String
name|propName
init|=
literal|"hbase.tests.use.shortcircuit.reads"
decl_stmt|;
name|String
name|readOnProp
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|readOnProp
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|readOnProp
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|propName
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/** Enable the short circuit read, unless configured differently.    * Set both HBase and HDFS settings, including skipping the hdfs checksum checks.    */
specifier|private
name|void
name|enableShortCircuit
parameter_list|()
block|{
if|if
condition|(
name|isReadShortCircuitOn
argument_list|()
condition|)
block|{
name|String
name|curUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"read short circuit is ON for user "
operator|+
name|curUser
argument_list|)
expr_stmt|;
comment|// read short circuit, for hdfs
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.block.local-path-access.user"
argument_list|,
name|curUser
argument_list|)
expr_stmt|;
comment|// read short circuit, for hbase
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.read.shortcircuit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Skip checking checksum, for the hdfs client and the datanode
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.client.read.shortcircuit.skip.checksum"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"read short circuit is OFF"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createDirAndSetProperty
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|String
name|path
init|=
name|getDataTestDir
argument_list|(
name|relPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|path
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting "
operator|+
name|property
operator|+
literal|" to "
operator|+
name|path
operator|+
literal|" in system properties and HBase conf"
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**    * Shuts down instance created by call to {@link #startMiniDFSCluster(int)}    * or does nothing.    * @throws IOException    */
specifier|public
name|void
name|shutdownMiniDFSCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
comment|// The below throws an exception per dn, AsynchronousCloseException.
name|this
operator|.
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
name|dataTestDirOnTestFS
operator|=
literal|null
expr_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|this
operator|.
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Call this if you only want a zk cluster.    * @see #startMiniZKCluster() if you want zk + dfs + hbase mini cluster.    * @throws Exception    * @see #shutdownMiniZKCluster()    * @return zk cluster started.    */
specifier|public
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|startMiniZKCluster
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Call this if you only want a zk cluster.    * @param zooKeeperServerNum    * @see #startMiniZKCluster() if you want zk + dfs + hbase mini cluster.    * @throws Exception    * @see #shutdownMiniZKCluster()    * @return zk cluster started.    */
specifier|public
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
name|int
name|zooKeeperServerNum
parameter_list|)
throws|throws
name|Exception
block|{
name|setupClusterTestDir
argument_list|()
expr_stmt|;
return|return
name|startMiniZKCluster
argument_list|(
name|clusterTestDir
argument_list|,
name|zooKeeperServerNum
argument_list|)
return|;
block|}
specifier|private
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniZKCluster
argument_list|(
name|dir
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Start a mini ZK cluster. If the property "test.hbase.zookeeper.property.clientPort" is set    *  the port mentionned is used as the default port for ZooKeeper.    */
specifier|private
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
name|int
name|zooKeeperServerNum
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster already running at "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|this
operator|.
name|passedZkCluster
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|zkCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|defPort
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.hbase.zookeeper.property.clientPort"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|defPort
operator|>
literal|0
condition|)
block|{
comment|// If there is a port in the config file, we use it.
name|this
operator|.
name|zkCluster
operator|.
name|setDefaultClientPort
argument_list|(
name|defPort
argument_list|)
expr_stmt|;
block|}
name|int
name|clientPort
init|=
name|this
operator|.
name|zkCluster
operator|.
name|startup
argument_list|(
name|dir
argument_list|,
name|zooKeeperServerNum
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|clientPort
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|zkCluster
return|;
block|}
comment|/**    * Shuts down zk cluster created by call to {@link #startMiniZKCluster(File)}    * or does nothing.    * @throws IOException    * @see #startMiniZKCluster()    */
specifier|public
name|void
name|shutdownMiniZKCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|zkCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|zkCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Start up a minicluster of hbase, dfs, and zookeeper.    * @throws Exception    * @return Mini hbase cluster instance created.    * @see {@link #shutdownMiniDFSCluster()}    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Start up a minicluster of hbase, optionally dfs, and zookeeper.    * Modifies Configuration.  Homes the cluster data directory under a random    * subdirectory in a directory under System property test.build.data.    * Directory is cleaned up on exit.    * @param numSlaves Number of slaves to start up.  We'll start this many    * datanodes and regionservers.  If numSlaves is> 1, then make sure    * hbase.regionserver.info.port is -1 (i.e. no ui per regionserver) otherwise    * bind errors.    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
name|numSlaves
argument_list|)
return|;
block|}
comment|/**    * start minicluster    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Start up a minicluster of hbase, optionally dfs, and zookeeper.    * Modifies Configuration.  Homes the cluster data directory under a random    * subdirectory in a directory under System property test.build.data.    * Directory is cleaned up on exit.    * @param numMasters Number of masters to start up.  We'll start this many    * hbase masters.  If numMasters> 1, you can find the active/primary master    * with {@link MiniHBaseCluster#getMaster()}.    * @param numSlaves Number of slaves to start up.  We'll start this many    * regionservers. If dataNodeHosts == null, this also indicates the number of    * datanodes to start. If dataNodeHosts != null, the number of datanodes is    * based on dataNodeHosts.length.    * If numSlaves is> 1, then make sure    * hbase.regionserver.info.port is -1 (i.e. no ui per regionserver) otherwise    * bind errors.    * @param dataNodeHosts hostnames DNs to run on.    * This is useful if you want to run datanode on distinct hosts for things    * like HDFS block location verification.    * If you start MiniDFSCluster without host names,    * all instances of the datanodes will have the same host name.    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|,
specifier|final
name|String
index|[]
name|dataNodeHosts
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
name|numSlaves
argument_list|,
name|dataNodeHosts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Same as {@link #startMiniCluster(int, int)}, but with custom number of datanodes.    * @param numDataNodes Number of data nodes.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|,
specifier|final
name|int
name|numDataNodes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
name|numDataNodes
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Start up a minicluster of hbase, optionally dfs, and zookeeper.    * Modifies Configuration.  Homes the cluster data directory under a random    * subdirectory in a directory under System property test.build.data.    * Directory is cleaned up on exit.    * @param numMasters Number of masters to start up.  We'll start this many    * hbase masters.  If numMasters> 1, you can find the active/primary master    * with {@link MiniHBaseCluster#getMaster()}.    * @param numSlaves Number of slaves to start up.  We'll start this many    * regionservers. If dataNodeHosts == null, this also indicates the number of    * datanodes to start. If dataNodeHosts != null, the number of datanodes is    * based on dataNodeHosts.length.    * If numSlaves is> 1, then make sure    * hbase.regionserver.info.port is -1 (i.e. no ui per regionserver) otherwise    * bind errors.    * @param dataNodeHosts hostnames DNs to run on.    * This is useful if you want to run datanode on distinct hosts for things    * like HDFS block location verification.    * If you start MiniDFSCluster without host names,    * all instances of the datanodes will have the same host name.    * @param masterClass The class to use as HMaster, or null for default    * @param regionserverClass The class to use as HRegionServer, or null for    * default    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|,
specifier|final
name|String
index|[]
name|dataNodeHosts
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|regionserverClass
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
name|numSlaves
argument_list|,
name|dataNodeHosts
argument_list|,
name|masterClass
argument_list|,
name|regionserverClass
argument_list|)
return|;
block|}
comment|/**    * Same as {@link #startMiniCluster(int, int, String[], Class, Class)}, but with custom    * number of datanodes.    * @param numDataNodes Number of data nodes.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
specifier|final
name|String
index|[]
name|dataNodeHosts
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|regionserverClass
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dataNodeHosts
operator|!=
literal|null
operator|&&
name|dataNodeHosts
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|numDataNodes
operator|=
name|dataNodeHosts
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up minicluster with "
operator|+
name|numMasters
operator|+
literal|" master(s) and "
operator|+
name|numSlaves
operator|+
literal|" regionserver(s) and "
operator|+
name|numDataNodes
operator|+
literal|" datanode(s)"
argument_list|)
expr_stmt|;
comment|// If we already put up a cluster, fail.
if|if
condition|(
name|miniClusterRunning
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"A mini-cluster is already running"
argument_list|)
throw|;
block|}
name|miniClusterRunning
operator|=
literal|true
expr_stmt|;
name|setupClusterTestDir
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|this
operator|.
name|clusterTestDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bring up mini dfs cluster. This spews a bunch of warnings about missing
comment|// scheme. Complaints are 'Scheme is undefined for build/test/data/dfs/name1'.
name|startMiniDFSCluster
argument_list|(
name|numDataNodes
argument_list|,
name|dataNodeHosts
argument_list|)
expr_stmt|;
comment|// Start up a zk cluster.
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|==
literal|null
condition|)
block|{
name|startMiniZKCluster
argument_list|(
name|clusterTestDir
argument_list|)
expr_stmt|;
block|}
comment|// Start the MiniHBaseCluster
return|return
name|startMiniHBaseCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
name|masterClass
argument_list|,
name|regionserverClass
argument_list|)
return|;
block|}
specifier|public
name|MiniHBaseCluster
name|startMiniHBaseCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|startMiniHBaseCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Starts up mini hbase cluster.  Usually used after call to    * {@link #startMiniCluster(int, int)} when doing stepped startup of clusters.    * Usually you won't want this.  You'll usually want {@link #startMiniCluster()}.    * @param numMasters    * @param numSlaves    * @return Reference to the hbase mini hbase cluster.    * @throws IOException    * @throws InterruptedException    * @see {@link #startMiniCluster()}    */
specifier|public
name|MiniHBaseCluster
name|startMiniHBaseCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|regionserverClass
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Now do the mini hbase cluster.  Set the hbase.rootdir in config.
name|createRootDir
argument_list|()
expr_stmt|;
comment|// These settings will make the server waits until this exact number of
comment|// regions servers are connected.
if|if
condition|(
name|conf
operator|.
name|getInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|numSlaves
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
name|numSlaves
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|c
argument_list|,
name|numMasters
argument_list|,
name|numSlaves
argument_list|,
name|masterClass
argument_list|,
name|regionserverClass
argument_list|)
expr_stmt|;
comment|// Don't leave here till we've done a successful scan of the hbase:meta
name|Table
name|t
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|getHBaseAdmin
argument_list|()
expr_stmt|;
comment|// create immediately the hbaseAdmin
name|LOG
operator|.
name|info
argument_list|(
literal|"Minicluster is up"
argument_list|)
expr_stmt|;
return|return
operator|(
name|MiniHBaseCluster
operator|)
name|this
operator|.
name|hbaseCluster
return|;
block|}
comment|/**    * Starts the hbase cluster up again after shutting it down previously in a    * test.  Use this if you want to keep dfs/zk up and just stop/start hbase.    * @param servers number of region servers    * @throws IOException    */
specifier|public
name|void
name|restartHBaseCluster
parameter_list|(
name|int
name|servers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// Don't leave here till we've done a successful scan of the hbase:meta
name|Table
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// do nothing
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HBase has been restarted"
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return Current mini hbase cluster. Only has something in it after a call    * to {@link #startMiniCluster()}.    * @see #startMiniCluster()    */
specifier|public
name|MiniHBaseCluster
name|getMiniHBaseCluster
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hbaseCluster
operator|==
literal|null
operator|||
name|this
operator|.
name|hbaseCluster
operator|instanceof
name|MiniHBaseCluster
condition|)
block|{
return|return
operator|(
name|MiniHBaseCluster
operator|)
name|this
operator|.
name|hbaseCluster
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|hbaseCluster
operator|+
literal|" not an instance of "
operator|+
name|MiniHBaseCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Stops mini hbase, zk, and hdfs clusters.    * @throws IOException    * @see {@link #startMiniCluster(int)}    */
specifier|public
name|void
name|shutdownMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down minicluster"
argument_list|)
expr_stmt|;
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|passedZkCluster
condition|)
block|{
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
name|cleanupTestDir
argument_list|()
expr_stmt|;
name|miniClusterRunning
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Minicluster is down"
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return True if we removed the test dirs    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|boolean
name|cleanupTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|super
operator|.
name|cleanupTestDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|deleteDir
argument_list|(
name|this
operator|.
name|clusterTestDir
argument_list|)
condition|)
block|{
name|this
operator|.
name|clusterTestDir
operator|=
literal|null
expr_stmt|;
return|return
name|ret
operator|&
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Shutdown HBase mini cluster.  Does not shutdown zk or dfs if running.    * @throws IOException    */
specifier|public
name|void
name|shutdownMiniHBaseCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hbaseAdmin
operator|!=
literal|null
condition|)
block|{
name|hbaseAdmin
operator|.
name|close0
argument_list|()
expr_stmt|;
name|hbaseAdmin
operator|=
literal|null
expr_stmt|;
block|}
comment|// unset the configuration for MIN and MAX RS to start
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait till hbase is down before going on to shutdown zk.
name|this
operator|.
name|hbaseCluster
operator|.
name|waitUntilShutDown
argument_list|()
expr_stmt|;
name|this
operator|.
name|hbaseCluster
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeperWatcher
operator|!=
literal|null
condition|)
block|{
name|zooKeeperWatcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|zooKeeperWatcher
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns the path to the default root dir the minicluster uses.    * Note: this does not cause the root dir to be created.    * @return Fully qualified path for the default hbase root dir    * @throws IOException    */
specifier|public
name|Path
name|getDefaultRootDirPath
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
argument_list|,
literal|"hbase"
argument_list|)
return|;
block|}
comment|/**    * Creates an hbase rootdir in user home directory.  Also creates hbase    * version file.  Normally you won't make use of this method.  Root hbasedir    * is created for you as part of mini cluster startup.  You'd only use this    * method if you were doing manual operation.    * @return Fully qualified path to hbase root dir    * @throws IOException    */
specifier|public
name|Path
name|createRootDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|Path
name|hbaseRootdir
init|=
name|getDefaultRootDirPath
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|hbaseRootdir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|hbaseRootdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|hbaseRootdir
argument_list|)
expr_stmt|;
return|return
name|hbaseRootdir
return|;
block|}
comment|/**    * Flushes all caches in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
comment|/**    * Flushes all caches in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|flush
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|flushcache
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compact all regions in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|compact
parameter_list|(
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|compact
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compact all of a table's reagion in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
index|[]
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|fams
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|families
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|families
control|)
block|{
name|fams
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
name|fams
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|numVersions
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
return|;
block|}
specifier|public
name|HTable
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|numVersions
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
return|;
block|}
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param htd    * @param families    * @param c Configuration to use    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Disable blooms (they are on by default as of 0.95) but we disable them here because
comment|// tests have hard coded counts of what to expect in block cache, etc., and blooms being
comment|// on is interfering.
name|hcd
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Disable blooms (they are on by default as of 0.95) but we disable them here because
comment|// tests have hard coded counts of what to expect in block cache, etc., and blooms being
comment|// on is interfering.
name|hcd
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
index|[]
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|families
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
index|[]
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @param splitRows    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
index|[]
name|splitRows
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|family
argument_list|,
name|splitRows
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @param splitRows    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
index|[]
name|splitRows
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param splitRows    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|splitRows
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait until they are assigned
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Modify a table, synchronous. Waiting logic similar to that of {@code admin.rb#alter_status}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
name|void
name|modifyTableSync
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|status
init|=
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
block|{
name|setFirst
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setSecond
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|status
operator|.
name|getFirst
argument_list|()
operator|!=
literal|0
operator|&&
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
comment|// wait up to 500 seconds
name|status
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getSecond
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|status
operator|.
name|getSecond
argument_list|()
operator|-
name|status
operator|.
name|getFirst
argument_list|()
operator|+
literal|"/"
operator|+
name|status
operator|.
name|getSecond
argument_list|()
operator|+
literal|" regions updated."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"All regions updated."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getSecond
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to update replica count after 500 seconds."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the number of Region replicas.    */
specifier|public
specifier|static
name|void
name|setReplicas
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|table
parameter_list|,
name|int
name|replicaCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setRegionReplication
argument_list|(
name|replicaCount
argument_list|)
expr_stmt|;
name|modifyTableSync
argument_list|(
name|admin
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop an existing table    * @param tableName existing table    */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop an existing table    * @param tableName existing table    */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop an existing table    * @param tableName existing table    */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table: "
operator|+
name|tableName
operator|+
literal|" already disabled, so just deleting it."
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop an existing table    * @param tableName existing table    */
specifier|public
name|void
name|deleteTableIfAny
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// ==========================================================================
comment|// Canned table and table descriptor creation
comment|// TODO replace HBaseTestCase
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colfamily11"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colfamily21"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colfamily31"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|COLUMNS
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAXVERSIONS
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|FIRST_CHAR
init|=
literal|'a'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|LAST_CHAR
init|=
literal|'z'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|START_KEY_BYTES
init|=
block|{
name|FIRST_CHAR
block|,
name|FIRST_CHAR
block|,
name|FIRST_CHAR
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|START_KEY
init|=
operator|new
name|String
argument_list|(
name|START_KEY_BYTES
argument_list|,
name|HConstants
operator|.
name|UTF8_CHARSET
argument_list|)
decl_stmt|;
comment|/**    * Create a table of name<code>name</code> with {@link COLUMNS} for    * families.    * @param name Name to give table.    * @param versions How many versions to allow per column.    * @return Column descriptor.    */
specifier|public
name|HTableDescriptor
name|createTableDescriptor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|minVersions
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|,
specifier|final
name|int
name|ttl
parameter_list|,
name|boolean
name|keepDeleted
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|cfName
range|:
operator|new
name|byte
index|[]
index|[]
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
control|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|cfName
argument_list|)
operator|.
name|setMinVersions
argument_list|(
name|minVersions
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
name|keepDeleted
argument_list|)
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|htd
return|;
block|}
comment|/**    * Create a table of name<code>name</code> with {@link COLUMNS} for    * families.    * @param name Name to give table.    * @return Column descriptor.    */
specifier|public
name|HTableDescriptor
name|createTableDescriptor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|createTableDescriptor
argument_list|(
name|name
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_MIN_VERSIONS
argument_list|,
name|MAXVERSIONS
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_KEEP_DELETED
argument_list|)
return|;
block|}
comment|/**    * Create an HRegion that writes to the local tmp dirs    * @param desc    * @param startKey    * @param endKey    * @return    * @throws IOException    */
specifier|public
name|HRegion
name|createLocalHRegion
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
return|return
name|createLocalHRegion
argument_list|(
name|hri
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Create an HRegion that writes to the local tmp dirs    * @param info    * @param desc    * @return    * @throws IOException    */
specifier|public
name|HRegion
name|createLocalHRegion
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|getDataTestDir
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Create an HRegion that writes to the local tmp dirs with specified hlog    * @param info regioninfo    * @param desc table descriptor    * @param hlog hlog for this region.    * @return created hregion    * @throws IOException    */
specifier|public
name|HRegion
name|createLocalHRegion
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HLog
name|hlog
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|getDataTestDir
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|desc
argument_list|,
name|hlog
argument_list|)
return|;
block|}
comment|/**    * @param tableName    * @param startKey    * @param stopKey    * @param callingMethod    * @param conf    * @param isReadOnly    * @param families    * @throws IOException    * @return A region on which you must call    *         {@link HRegion#closeHRegion(HRegion)} when done.    */
specifier|public
name|HRegion
name|createLocalHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|stopKey
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|,
name|Durability
name|durability
parameter_list|,
name|HLog
name|hlog
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setReadOnly
argument_list|(
name|isReadOnly
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Set default to be three versions.
name|hcd
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|htd
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|createLocalHRegion
argument_list|(
name|info
argument_list|,
name|htd
argument_list|,
name|hlog
argument_list|)
return|;
block|}
comment|//
comment|// ==========================================================================
comment|/**    * Provide an existing table name to truncate.    * Scans the table and issues a delete for each row read.    * @param tableName existing table    * @return HTable to that new table    * @throws IOException    */
specifier|public
name|HTable
name|deleteTableData
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|deleteTableData
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Provide an existing table name to truncate.    * Scans the table and issues a delete for each row read.    * @param tableName existing table    * @return HTable to that new table    * @throws IOException    */
specifier|public
name|HTable
name|deleteTableData
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|resScan
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|resScan
control|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
name|resScan
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|resScan
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Truncate a table using the admin command.    * Effectively disables, deletes, and recreates the table.    * @param tableName table which must exist.    * @param preserveRegions keep the existing split points    * @return HTable for the new table    */
specifier|public
name|HTable
name|truncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
name|preserveRegions
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Truncate a table using the admin command.    * Effectively disables, deletes, and recreates the table.    * For previous behavior of issuing row deletes, see    * deleteTableData.    * Expressly does not preserve regions of existing table.    * @param tableName table which must exist.    * @return HTable for the new table    */
specifier|public
name|HTable
name|truncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Truncate a table using the admin command.    * Effectively disables, deletes, and recreates the table.    * @param tableName table which must exist.    * @param preserveRegions keep the existing split points    * @return HTable for the new table    */
specifier|public
name|HTable
name|truncateTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|truncateTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|preserveRegions
argument_list|)
return|;
block|}
comment|/**    * Truncate a table using the admin command.    * Effectively disables, deletes, and recreates the table.    * For previous behavior of issuing row deletes, see    * deleteTableData.    * Expressly does not preserve regions of existing table.    * @param tableName table which must exist.    * @return HTable for the new table    */
specifier|public
name|HTable
name|truncateTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Load table with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Family    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadTable
argument_list|(
name|t
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|)
return|;
block|}
comment|/**    * Load table with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Family    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadTable
argument_list|(
name|t
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
literal|null
argument_list|,
name|writeToWAL
argument_list|)
return|;
block|}
comment|/**    * Load table of multiple column families with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Array of Families to load    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadTable
argument_list|(
name|t
argument_list|,
name|f
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Load table of multiple column families with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Array of Families to load    * @param value the values of the cells. If null is passed, the row key is used as value    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadTable
argument_list|(
name|t
argument_list|,
name|f
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Load table of multiple column families with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Array of Families to load    * @param value the values of the cells. If null is passed, the row key is used as value    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|t
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|HBaseTestingUtility
operator|.
name|ROWS
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|writeToWAL
condition|?
name|Durability
operator|.
name|USE_DEFAULT
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|f
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|row
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
name|t
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
return|return
name|rowCount
return|;
block|}
comment|/** A tracker for tracking and validating table rows    * generated with {@link HBaseTestingUtility#loadTable(HTable, byte[])}    */
specifier|public
specifier|static
class|class
name|SeenRowTracker
block|{
name|int
name|dim
init|=
literal|'z'
operator|-
literal|'a'
operator|+
literal|1
decl_stmt|;
name|int
index|[]
index|[]
index|[]
name|seenRows
init|=
operator|new
name|int
index|[
name|dim
index|]
index|[
name|dim
index|]
index|[
name|dim
index|]
decl_stmt|;
comment|//count of how many times the row is seen
name|byte
index|[]
name|startRow
decl_stmt|;
name|byte
index|[]
name|stopRow
decl_stmt|;
specifier|public
name|SeenRowTracker
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|byte
index|[]
name|row
range|:
name|ROWS
control|)
block|{
name|seenRows
index|[
name|i
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|)
index|]
index|[
name|i
argument_list|(
name|row
index|[
literal|1
index|]
argument_list|)
index|]
index|[
name|i
argument_list|(
name|row
index|[
literal|2
index|]
argument_list|)
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|int
name|i
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|b
operator|-
literal|'a'
return|;
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|seenRows
index|[
name|i
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|)
index|]
index|[
name|i
argument_list|(
name|row
index|[
literal|1
index|]
argument_list|)
index|]
index|[
name|i
argument_list|(
name|row
index|[
literal|2
index|]
argument_list|)
index|]
operator|++
expr_stmt|;
block|}
comment|/** Validate that all the rows between startRow and stopRow are seen exactly once, and      * all other rows none      */
specifier|public
name|void
name|validate
parameter_list|()
block|{
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|int
name|count
init|=
name|seenRows
index|[
name|i
argument_list|(
name|b1
argument_list|)
index|]
index|[
name|i
argument_list|(
name|b2
argument_list|)
index|]
index|[
name|i
argument_list|(
name|b3
argument_list|)
index|]
decl_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
operator|new
name|byte
index|[]
block|{
name|b1
operator|,
name|b2
operator|,
name|b3
block|}
operator|,
name|startRow
block|)
operator|>=
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
operator|new
name|byte
index|[]
block|{
name|b1
block|,
name|b2
block|,
name|b3
block|}
argument_list|,
name|stopRow
argument_list|)
operator|<
literal|0
block|)
block|{
name|expectedCount
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
name|expectedCount
condition|)
block|{
name|String
name|row
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[]
block|{
name|b1
block|,
name|b2
block|,
name|b3
block|}
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Row:"
operator|+
name|row
operator|+
literal|" has a seen count of "
operator|+
name|count
operator|+
literal|" instead of "
operator|+
name|expectedCount
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_function
unit|}    public
name|int
name|loadRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadRegion
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Load region with rows from 'aaa' to 'zzz'.    * @param r Region    * @param f Family    * @param flush flush the cache if true    * @return Count of rows loaded.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|int
name|loadRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
specifier|final
name|boolean
name|flush
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|k
index|[
literal|0
index|]
operator|=
name|b1
expr_stmt|;
name|k
index|[
literal|1
index|]
operator|=
name|b2
expr_stmt|;
name|k
index|[
literal|2
index|]
operator|=
name|b3
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getLog
argument_list|()
operator|==
literal|null
condition|)
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|int
name|preRowCount
init|=
name|rowCount
decl_stmt|;
name|int
name|pause
init|=
literal|10
decl_stmt|;
name|int
name|maxPause
init|=
literal|1000
decl_stmt|;
while|while
condition|(
name|rowCount
operator|==
name|preRowCount
condition|)
block|{
try|try
block|{
name|r
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegionTooBusyException
name|e
parameter_list|)
block|{
name|pause
operator|=
operator|(
name|pause
operator|*
literal|2
operator|>=
name|maxPause
operator|)
condition|?
name|maxPause
else|:
name|pause
operator|*
literal|2
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|flush
condition|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rowCount
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|loadNumericRows
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
name|int
name|startRow
parameter_list|,
name|int
name|endRow
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|endRow
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|verifyNumericRows
parameter_list|(
name|HRegion
name|region
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
name|int
name|startRow
parameter_list|,
name|int
name|endRow
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|endRow
condition|;
name|i
operator|++
control|)
block|{
name|String
name|failMsg
init|=
literal|"Failed verification of row :"
operator|+
name|i
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failMsg
argument_list|,
name|result
operator|.
name|containsColumn
argument_list|(
name|f
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failMsg
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|f
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|f
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failMsg
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|deleteNumericRows
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
name|int
name|startRow
parameter_list|,
name|int
name|endRow
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|endRow
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Return the number of rows in the given table.    */
end_comment

begin_function
specifier|public
name|int
name|countRows
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|countRows
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
end_function

begin_comment
comment|/**    * Return an md5 digest of the entire contents of a table.    */
end_comment

begin_function
specifier|public
name|String
name|checksumRows
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|digest
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Creates many regions names "aaa" to "zzz".    *    * @param table  The table to use for the data.    * @param columnFamily  The family to insert the data into.    * @return count of regions created.    * @throws IOException When creating the regions fails.    */
end_comment

begin_function
specifier|public
name|int
name|createMultiRegions
parameter_list|(
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMultiRegions
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** All the row values for the data loaded by {@link #loadTable(HTable, byte[])} */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|'z'
operator|-
literal|'a'
operator|+
literal|1
argument_list|,
literal|3
argument_list|)
index|]
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|// ~52KB
end_comment

begin_static
static|static
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|ROWS
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|b1
expr_stmt|;
name|ROWS
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
name|b2
expr_stmt|;
name|ROWS
index|[
name|i
index|]
index|[
literal|2
index|]
operator|=
name|b3
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_static

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|KEYS
init|=
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"kkk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ooo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qqq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ttt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"www"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|KEYS_FOR_HBA_CREATE_TABLE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"kkk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ooo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qqq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ttt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"www"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Creates many regions names "aaa" to "zzz".    * @param c Configuration to use.    * @param table  The table to use for the data.    * @param columnFamily  The family to insert the data into.    * @return count of regions created.    * @throws IOException When creating the regions fails.    */
end_comment

begin_function
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMultiRegions
argument_list|(
name|c
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|,
name|KEYS
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates the specified number of regions in the specified table.    * @param c    * @param table    * @param family    * @param numRegions    * @return    * @throws IOException    */
end_comment

begin_function
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitKeys
argument_list|,
literal|0
argument_list|,
name|regionStartKeys
argument_list|,
literal|1
argument_list|,
name|splitKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegions
argument_list|(
name|c
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|Table
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|columnFamily
argument_list|)
condition|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
comment|// remove empty region - this is tricky as the mini cluster during the test
comment|// setup already has the "<tablename>,,123456789" row with an empty start
comment|// and end key. Adding the custom regions below adds those blindly,
comment|// including the new start region from empty to "bbb". lg
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
name|getMetaTableRows
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|regionToDeleteInFS
init|=
name|table
operator|.
name|getRegionsInRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// add custom ones
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// see comment above, remove "old" (or previous) single region
for|for
control|(
name|byte
index|[]
name|row
range|:
name|rows
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegions: deleting meta row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove the "old" region from FS
name|Path
name|tableDir
init|=
operator|new
name|Path
argument_list|(
name|getDefaultRootDirPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|regionToDeleteInFS
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|delete
argument_list|(
name|tableDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// flush cache of regions
name|HConnection
name|conn
init|=
name|table
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
comment|// assign all the new regions IF table is enabled.
name|Admin
name|admin
init|=
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|newRegions
control|)
block|{
name|admin
operator|.
name|assign
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
end_function

begin_comment
comment|/**    * Create rows in hbase:meta for regions of the specified table with the specified    * start keys.  The first startKey should be a 0 length byte array if you    * want to form a proper range of regions.    * @param conf    * @param htd    * @param startKeys    * @return list of region info for regions added to meta    * @throws IOException    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|createMultiRegionsInMeta
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// add custom ones
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|newRegions
return|;
block|}
end_function

begin_comment
comment|/**    * Returns all rows from the hbase:meta table.    *    * @throws IOException When reading the rows fails.    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getMetaTableRows
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: Redo using MetaTableAccessor class
name|Table
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|s
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getMetaTableRows: row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
end_function

begin_comment
comment|/**    * Returns all rows from the hbase:meta table for a given user table    *    * @throws IOException When reading the rows fails.    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getMetaTableRows
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Redo using MetaTableAccessor.
name|Table
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|s
control|)
block|{
name|HRegionInfo
name|info
init|=
name|HRegionInfo
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No region info for row "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO figure out what to do for this new hosed case.
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getMetaTableRows: row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
name|info
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
end_function

begin_comment
comment|/**    * Tool to get the reference to the region server object that holds the    * region of the specified user table.    * It first searches for the meta rows that contain the region of the    * specified table, then gets the index of that RS, and finally retrieves    * the RS's reference.    * @param tableName user table to lookup in hbase:meta    * @return region server that holds it, null if the row doesn't exist    * @throws IOException    * @throws InterruptedException    */
end_comment

begin_function
specifier|public
name|HRegionServer
name|getRSForFirstRegionInTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Tool to get the reference to the region server object that holds the    * region of the specified user table.    * It first searches for the meta rows that contain the region of the    * specified table, then gets the index of that RS, and finally retrieves    * the RS's reference.    * @param tableName user table to lookup in hbase:meta    * @return region server that holds it, null if the row doesn't exist    * @throws IOException    */
end_comment

begin_function
specifier|public
name|HRegionServer
name|getRSForFirstRegionInTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
init|=
name|getMetaTableRows
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaRows
operator|==
literal|null
operator|||
name|metaRows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|metaRows
operator|.
name|size
argument_list|()
operator|+
literal|" rows for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|firstrow
init|=
name|metaRows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FirstRow="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|firstrow
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|pause
init|=
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
decl_stmt|;
name|int
name|numRetries
init|=
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
decl_stmt|;
name|RetryCounter
name|retrier
init|=
operator|new
name|RetryCounter
argument_list|(
name|numRetries
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|pause
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|retrier
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerWith
argument_list|(
name|firstrow
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRegionServer
argument_list|()
return|;
block|}
comment|// Came back -1.  Region may not be online yet.  Sleep a while.
name|retrier
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Starts a<code>MiniMRCluster</code> with a default number of    *<code>TaskTracker</code>'s.    *    * @throws IOException When starting the cluster fails.    */
end_comment

begin_function
specifier|public
name|MiniMRCluster
name|startMiniMapReduceCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|startMiniMapReduceCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|mrCluster
return|;
block|}
end_function

begin_comment
comment|/**    * Tasktracker has a bug where changing the hadoop.log.dir system property    * will not change its internal static LOG_DIR variable.    */
end_comment

begin_function
specifier|private
name|void
name|forceChangeTaskLogDir
parameter_list|()
block|{
name|Field
name|logDirField
decl_stmt|;
try|try
block|{
name|logDirField
operator|=
name|TaskLog
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"LOG_DIR"
argument_list|)
expr_stmt|;
name|logDirField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|logDirField
argument_list|,
name|logDirField
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|logDirField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|hadoopLogDir
argument_list|,
literal|"userlogs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Starts a<code>MiniMRCluster</code>. Call {@link #setFileSystemURI(String)} to use a different    * filesystem.    * @param servers  The number of<code>TaskTracker</code>'s to start.    * @throws IOException When starting the cluster fails.    */
end_comment

begin_function
specifier|private
name|void
name|startMiniMapReduceCluster
parameter_list|(
specifier|final
name|int
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"MiniMRCluster is already running"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting mini mapreduce cluster..."
argument_list|)
expr_stmt|;
name|setupClusterTestDir
argument_list|()
expr_stmt|;
name|createDirsAndSetProperties
argument_list|()
expr_stmt|;
name|forceChangeTaskLogDir
argument_list|()
expr_stmt|;
comment|//// hadoop2 specific settings
comment|// Tests were failing because this process used 6GB of virtual memory and was getting killed.
comment|// we up the VM usable so that processes don't get killed.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"yarn.nodemanager.vmem-pmem-ratio"
argument_list|,
literal|8.0f
argument_list|)
expr_stmt|;
comment|// Tests were failing due to MAPREDUCE-4880 / MAPREDUCE-4607 against hadoop 2.0.2-alpha and
comment|// this avoids the problem by disabling speculative task execution in tests.
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.map.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.reduce.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|////
comment|// Allow the user to override FS URI for this map-reduce cluster to use.
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|servers
argument_list|,
name|FS_URI
operator|!=
literal|null
condition|?
name|FS_URI
else|:
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|JobConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|MapreduceTestingShim
operator|.
name|getJobConf
argument_list|(
name|mrCluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobConf
operator|==
literal|null
condition|)
block|{
name|jobConf
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
block|}
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapreduce.cluster.local.dir"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.cluster.local.dir"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Hadoop MiniMR overwrites this while it should not
name|LOG
operator|.
name|info
argument_list|(
literal|"Mini mapreduce cluster started"
argument_list|)
expr_stmt|;
comment|// In hadoop2, YARN/MR2 starts a mini cluster with its own conf instance and updates settings.
comment|// Our HBase MR jobs need several of these settings in order to properly run.  So we copy the
comment|// necessary config properties here.  YARN-129 required adding a few properties.
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this for mrv2 support; mr1 ignores this
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.framework.name"
argument_list|,
literal|"yarn"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"yarn.is.minicluster"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|rmAddress
init|=
name|jobConf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmAddress
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.address"
argument_list|,
name|rmAddress
argument_list|)
expr_stmt|;
block|}
name|String
name|historyAddress
init|=
name|jobConf
operator|.
name|get
argument_list|(
literal|"mapreduce.jobhistory.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyAddress
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobhistory.address"
argument_list|,
name|historyAddress
argument_list|)
expr_stmt|;
block|}
name|String
name|schedulerAddress
init|=
name|jobConf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.scheduler.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerAddress
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.address"
argument_list|,
name|schedulerAddress
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Stops the previously started<code>MiniMRCluster</code>.    */
end_comment

begin_function
specifier|public
name|void
name|shutdownMiniMapReduceCluster
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping mini mapreduce cluster..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mrCluster
operator|=
literal|null
expr_stmt|;
block|}
comment|// Restore configuration to point to local jobtracker
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mini mapreduce cluster stopped"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Create a stubbed out RegionServerService, mainly for getting FS.    */
end_comment

begin_function
specifier|public
name|RegionServerServices
name|createMockRegionServerService
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createMockRegionServerService
argument_list|(
operator|(
name|ServerName
operator|)
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create a stubbed out RegionServerService, mainly for getting FS.    * This version is used by TestTokenAuthentication    */
end_comment

begin_function
specifier|public
name|RegionServerServices
name|createMockRegionServerService
parameter_list|(
name|RpcServerInterface
name|rpc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MockRegionServerServices
name|rss
init|=
operator|new
name|MockRegionServerServices
argument_list|(
name|getZooKeeperWatcher
argument_list|()
argument_list|)
decl_stmt|;
name|rss
operator|.
name|setFileSystem
argument_list|(
name|getTestFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|rss
operator|.
name|setRpcServer
argument_list|(
name|rpc
argument_list|)
expr_stmt|;
return|return
name|rss
return|;
block|}
end_function

begin_comment
comment|/**    * Create a stubbed out RegionServerService, mainly for getting FS.    * This version is used by TestOpenRegionHandler    */
end_comment

begin_function
specifier|public
name|RegionServerServices
name|createMockRegionServerService
parameter_list|(
name|ServerName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MockRegionServerServices
name|rss
init|=
operator|new
name|MockRegionServerServices
argument_list|(
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|rss
operator|.
name|setFileSystem
argument_list|(
name|getTestFileSystem
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rss
return|;
block|}
end_function

begin_comment
comment|/**    * Switches the logger for the given class to DEBUG level.    *    * @param clazz  The class for which to switch to debug logging.    */
end_comment

begin_function
specifier|public
name|void
name|enableDebug
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Log
name|l
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|Log4JLogger
condition|)
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|l
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|instanceof
name|Jdk14Logger
condition|)
block|{
operator|(
operator|(
name|Jdk14Logger
operator|)
name|l
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Expire the Master's session    * @throws Exception    */
end_comment

begin_function
specifier|public
name|void
name|expireMasterSession
parameter_list|()
throws|throws
name|Exception
block|{
name|HMaster
name|master
init|=
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|expireSession
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Expire a region server's session    * @param index which RS    * @throws Exception    */
end_comment

begin_function
specifier|public
name|void
name|expireRegionServerSession
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|HRegionServer
name|rs
init|=
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|expireSession
argument_list|(
name|rs
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|decrementMinRegionServerCount
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|decrementMinRegionServerCount
parameter_list|()
block|{
comment|// decrement the count for this.conf, for newly spwaned master
comment|// this.hbaseCluster shares this configuration too
name|decrementMinRegionServerCount
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// each master thread keeps a copy of configuration
for|for
control|(
name|MasterThread
name|master
range|:
name|getHBaseCluster
argument_list|()
operator|.
name|getMasterThreads
argument_list|()
control|)
block|{
name|decrementMinRegionServerCount
argument_list|(
name|master
operator|.
name|getMaster
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|decrementMinRegionServerCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|currentCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentCount
operator|!=
operator|-
literal|1
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|currentCount
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|expireSession
parameter_list|(
name|ZooKeeperWatcher
name|nodeZK
parameter_list|)
throws|throws
name|Exception
block|{
name|expireSession
argument_list|(
name|nodeZK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Deprecated
specifier|public
name|void
name|expireSession
parameter_list|(
name|ZooKeeperWatcher
name|nodeZK
parameter_list|,
name|Server
name|server
parameter_list|)
throws|throws
name|Exception
block|{
name|expireSession
argument_list|(
name|nodeZK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Expire a ZooKeeper session as recommended in ZooKeeper documentation    * http://wiki.apache.org/hadoop/ZooKeeper/FAQ#A4    * There are issues when doing this:    * [1] http://www.mail-archive.com/dev@zookeeper.apache.org/msg01942.html    * [2] https://issues.apache.org/jira/browse/ZOOKEEPER-1105    *    * @param nodeZK - the ZK watcher to expire    * @param checkStatus - true to check if we can create an HTable with the    *                    current configuration.    */
end_comment

begin_function
specifier|public
name|void
name|expireSession
parameter_list|(
name|ZooKeeperWatcher
name|nodeZK
parameter_list|,
name|boolean
name|checkStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|String
name|quorumServers
init|=
name|ZKConfig
operator|.
name|getZKQuorumServersString
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ZooKeeper
name|zk
init|=
name|nodeZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|byte
index|[]
name|password
init|=
name|zk
operator|.
name|getSessionPasswd
argument_list|()
decl_stmt|;
name|long
name|sessionID
init|=
name|zk
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
comment|// Expiry seems to be asynchronous (see comment from P. Hunt in [1]),
comment|//  so we create a first watcher to be sure that the
comment|//  event was sent. We expect that if our watcher receives the event
comment|//  other watchers on the same machine will get is as well.
comment|// When we ask to close the connection, ZK does not close it before
comment|//  we receive all the events, so don't have to capture the event, just
comment|//  closing the connection should be enough.
name|ZooKeeper
name|monitor
init|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
literal|1000
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|watchedEvent
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Monitor ZKW received event="
operator|+
name|watchedEvent
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|sessionID
argument_list|,
name|password
argument_list|)
decl_stmt|;
comment|// Making it expire
name|ZooKeeper
name|newZK
init|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
literal|1000
argument_list|,
name|EmptyWatcher
operator|.
name|instance
argument_list|,
name|sessionID
argument_list|,
name|password
argument_list|)
decl_stmt|;
comment|//ensure that we have connection to the server before closing down, otherwise
comment|//the close session event will be eaten out before we start CONNECTING state
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|newZK
operator|.
name|getState
argument_list|()
operator|!=
name|States
operator|.
name|CONNECTED
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
literal|1000
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|newZK
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK Closed Session 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|sessionID
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now closing& waiting to be sure that the clients get it.
name|monitor
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkStatus
condition|)
block|{
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Get the Mini HBase cluster.    *    * @return hbase cluster    * @see #getHBaseClusterInterface()    */
end_comment

begin_function
specifier|public
name|MiniHBaseCluster
name|getHBaseCluster
parameter_list|()
block|{
return|return
name|getMiniHBaseCluster
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the HBaseCluster instance.    *<p>Returned object can be any of the subclasses of HBaseCluster, and the    * tests referring this should not assume that the cluster is a mini cluster or a    * distributed one. If the test only works on a mini cluster, then specific    * method {@link #getMiniHBaseCluster()} can be used instead w/o the    * need to type-cast.    */
end_comment

begin_function
specifier|public
name|HBaseCluster
name|getHBaseClusterInterface
parameter_list|()
block|{
comment|//implementation note: we should rename this method as #getHBaseCluster(),
comment|//but this would require refactoring 90+ calls.
return|return
name|hbaseCluster
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a Admin instance.    * This instance is shared between HBaseTestingUtility instance users.    * Closing it has no effect, it will be closed automatically when the    * cluster shutdowns    *    * @return An Admin instance.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|synchronized
name|HBaseAdmin
name|getHBaseAdmin
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hbaseAdmin
operator|==
literal|null
condition|)
block|{
name|hbaseAdmin
operator|=
operator|new
name|HBaseAdminForTests
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hbaseAdmin
return|;
block|}
end_function

begin_decl_stmt
specifier|private
name|HBaseAdminForTests
name|hbaseAdmin
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_class
specifier|private
specifier|static
class|class
name|HBaseAdminForTests
extends|extends
name|HBaseAdmin
block|{
specifier|public
name|HBaseAdminForTests
parameter_list|(
name|Configuration
name|c
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"close() called on HBaseAdmin instance returned from HBaseTestingUtility.getHBaseAdmin()"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|close0
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns a ZooKeeperWatcher instance.    * This instance is shared between HBaseTestingUtility instance users.    * Don't close it, it will be closed automatically when the    * cluster shutdowns    *    * @return The ZooKeeperWatcher instance.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|synchronized
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zooKeeperWatcher
operator|==
literal|null
condition|)
block|{
name|zooKeeperWatcher
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"testing utility"
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected abort in HBaseTestingUtility:"
operator|+
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|zooKeeperWatcher
return|;
block|}
end_function

begin_decl_stmt
specifier|private
name|ZooKeeperWatcher
name|zooKeeperWatcher
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Closes the named region.    *    * @param regionName  The region to close.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|closeRegion
parameter_list|(
name|String
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|closeRegion
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Closes the named region.    *    * @param regionName  The region to close.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|closeRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|closeRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Closes the region containing the given row.    *    * @param row  The row to find the containing region.    * @param table  The table to find the region.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|closeRegionByRow
parameter_list|(
name|String
name|row
parameter_list|,
name|RegionLocator
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|closeRegionByRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Closes the region containing the given row.    *    * @param row  The row to find the containing region.    * @param table  The table to find the region.    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|closeRegionByRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocator
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|hrl
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|closeRegion
argument_list|(
name|hrl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    * Retrieves a splittable region randomly from tableName    *    * @param tableName name of table    * @param maxAttempts maximum number of attempts, unlimited for value of -1    * @return the HRegion chosen, null if none was found within limit of maxAttempts    */
end_comment

begin_function
specifier|public
name|HRegion
name|getSplittableRegion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|maxAttempts
parameter_list|)
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|regCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|attempted
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
do|do
block|{
name|regions
operator|=
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|regCount
operator|!=
name|regions
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// if there was region movement, clear attempted Set
name|attempted
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|regCount
operator|=
name|regions
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// There are chances that before we get the region for the table from an RS the region may
comment|// be going for CLOSE.  This may be because online schema change is enabled
if|if
condition|(
name|regCount
operator|>
literal|0
condition|)
block|{
name|idx
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|regCount
argument_list|)
expr_stmt|;
comment|// if we have just tried this region, there is no need to try again
if|if
condition|(
name|attempted
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|regions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|checkSplit
argument_list|()
expr_stmt|;
return|return
name|regions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|attempted
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|attempts
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|maxAttempts
operator|==
operator|-
literal|1
operator|||
name|attempts
operator|<
name|maxAttempts
condition|)
do|;
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|MiniZooKeeperCluster
name|getZkCluster
parameter_list|()
block|{
return|return
name|zkCluster
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setZkCluster
parameter_list|(
name|MiniZooKeeperCluster
name|zkCluster
parameter_list|)
block|{
name|this
operator|.
name|passedZkCluster
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|zkCluster
operator|=
name|zkCluster
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|zkCluster
operator|.
name|getClientPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|MiniDFSCluster
name|getDFSCluster
parameter_list|()
block|{
return|return
name|dfsCluster
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setDFSCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
operator|&&
name|dfsCluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"DFSCluster is already running! Shut it down first."
argument_list|)
throw|;
block|}
name|this
operator|.
name|dfsCluster
operator|=
name|cluster
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|HFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Wait until all regions in a table have been assigned.  Waits default timeout before giving up    * (30 seconds).    * @param table Table to wait on.    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableAvailable
parameter_list|(
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableAvailable
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableAvailable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableAvailable
argument_list|(
name|admin
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Wait until all regions in a table have been assigned    * @param table Table to wait on.    * @param timeoutMillis Timeout.    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableAvailable
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableAvailable
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableAvailable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timed out waiting for table to become available "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|<
name|timeoutMillis
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Waits for a table to be 'enabled'.  Enabled means that table is set as 'enabled' and the    * regions have been all assigned.  Will timeout after default period (30 seconds)    * @see #waitTableAvailable(byte[])    * @param table Table to wait on.    * @param table    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableEnabled
parameter_list|(
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableEnabled
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableEnabled
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableEnabled
argument_list|(
name|admin
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Waits for a table to be 'enabled'.  Enabled means that table is set as 'enabled' and the    * regions have been all assigned.    * @see #waitTableAvailable(byte[])    * @param table Table to wait on.    * @param timeoutMillis Time to wait on it being marked enabled.    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableEnabled
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableEnabled
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableEnabled
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|waitTableAvailable
argument_list|(
name|admin
argument_list|,
name|table
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timed out waiting for table to become available and enabled "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|<
name|timeoutMillis
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// Finally make sure all regions are fully open and online out on the cluster. Regions may be
comment|// in the hbase:meta table and almost open on all regionservers but there setting the region
comment|// online in the regionserver is the very last thing done and can take a little while to happen.
comment|// Below we do a get.  The get will retry if a NotServeringRegionException or a
comment|// RegionOpeningException.  It is crass but when done all will be online.
try|try
block|{
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Waits for a table to be 'disabled'.  Disabled means that table is set as 'disabled'    * Will timeout after default period (30 seconds)    * @param table Table to wait on.    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableDisabled
parameter_list|(
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableDisabled
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableDisabled
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableDisabled
argument_list|(
name|admin
argument_list|,
name|table
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Waits for a table to be 'disabled'.  Disabled means that table is set as 'disabled'    * @see #waitTableAvailable(byte[])    * @param table Table to wait on.    * @param timeoutMillis Time to wait on it being marked disabled.    * @throws InterruptedException    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitTableDisabled
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|waitTableDisabled
argument_list|(
name|getHBaseAdmin
argument_list|()
argument_list|,
name|table
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitTableDisabled
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timed out waiting for table to become disabled "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|<
name|timeoutMillis
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Make sure that at least the specified number of region servers    * are running    * @param num minimum number of region servers that should be running    * @return true if we started some servers    * @throws IOException    */
end_comment

begin_function
specifier|public
name|boolean
name|ensureSomeRegionServersAvailable
parameter_list|(
specifier|final
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|startedServer
init|=
literal|false
decl_stmt|;
name|MiniHBaseCluster
name|hbaseCluster
init|=
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|hbaseCluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started new server="
operator|+
name|hbaseCluster
operator|.
name|startRegionServer
argument_list|()
argument_list|)
expr_stmt|;
name|startedServer
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|startedServer
return|;
block|}
end_function

begin_comment
comment|/**    * Make sure that at least the specified number of region servers    * are running. We don't count the ones that are currently stopping or are    * stopped.    * @param num minimum number of region servers that should be running    * @return true if we started some servers    * @throws IOException    */
end_comment

begin_function
specifier|public
name|boolean
name|ensureSomeNonStoppedRegionServersAvailable
parameter_list|(
specifier|final
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|startedServer
init|=
name|ensureSomeRegionServersAvailable
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|int
name|nonStoppedServers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|hrs
operator|.
name|isStopping
argument_list|()
operator|||
name|hrs
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"A region server is stopped or stopping:"
operator|+
name|hrs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonStoppedServers
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|nonStoppedServers
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started new server="
operator|+
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
argument_list|)
expr_stmt|;
name|startedServer
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|startedServer
return|;
block|}
end_function

begin_comment
comment|/**    * This method clones the passed<code>c</code> configuration setting a new    * user into the clone.  Use it getting new instances of FileSystem.  Only    * works for DistributedFileSystem.    * @param c Initial configuration    * @param differentiatingSuffix Suffix to differentiate this user from others.    * @return A new configuration instance with a different user set into it.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|User
name|getDifferentUser
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|String
name|differentiatingSuffix
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|currentfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|currentfs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
return|return
name|User
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|// Else distributed filesystem.  Make a new instance per daemon.  Below
comment|// code is taken from the AppendTestUtil over in hdfs.
name|String
name|username
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|differentiatingSuffix
decl_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|c
argument_list|,
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
return|return
name|user
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|getAllOnlineRegions
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|online
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
try|try
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
control|)
block|{
name|online
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RegionServerStoppedException
name|e
parameter_list|)
block|{
comment|// That's fine.
block|}
block|}
for|for
control|(
name|MasterThread
name|mt
range|:
name|cluster
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
try|try
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
control|)
block|{
name|online
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RegionServerStoppedException
name|e
parameter_list|)
block|{
comment|// That's fine.
block|}
block|}
return|return
name|online
return|;
block|}
end_function

begin_comment
comment|/**    * Set maxRecoveryErrorCount in DFSClient.  In 0.20 pre-append its hard-coded to 5 and    * makes tests linger.  Here is the exception you'll see:    *<pre>    * 2010-06-15 11:52:28,511 WARN  [DataStreamer for file /hbase/.logs/hlog.1276627923013 block blk_928005470262850423_1021] hdfs.DFSClient$DFSOutputStream(2657): Error Recovery for block blk_928005470262850423_1021 failed  because recovery from primary datanode 127.0.0.1:53683 failed 4 times.  Pipeline was 127.0.0.1:53687, 127.0.0.1:53683. Will retry...    *</pre>    * @param stream A DFSClient.DFSOutputStream.    * @param max    * @throws NoSuchFieldException    * @throws SecurityException    * @throws IllegalAccessException    * @throws IllegalArgumentException    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|setMaxRecoveryErrorCount
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|clazzes
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|clazzes
control|)
block|{
name|String
name|className
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"DFSOutputStream"
argument_list|)
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|Field
name|maxRecoveryErrorCountField
init|=
name|stream
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"maxRecoveryErrorCount"
argument_list|)
decl_stmt|;
name|maxRecoveryErrorCountField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|maxRecoveryErrorCountField
operator|.
name|setInt
argument_list|(
name|stream
argument_list|,
name|max
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not set max recovery field"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Wait until all regions for a table in hbase:meta have a non-empty    * info:server, up to 60 seconds. This means all regions have been deployed,    * master has been informed and updated hbase:meta with the regions deployed    * server.    * @param tableName the table name    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitUntilAllRegionsAssigned
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Wait until all regions for a table in hbase:meta have a non-empty    * info:server, or until timeout.  This means all regions have been deployed,    * master has been informed and updated hbase:meta with the regions deployed    * server.    * @param tableName the table name    * @param timeout timeout, in milliseconds    * @throws IOException    */
end_comment

begin_function
specifier|public
name|void
name|waitUntilAllRegionsAssigned
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Table
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|waitFor
argument_list|(
name|timeout
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
operator|new
name|Predicate
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|allRegionsAssigned
init|=
literal|true
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|meta
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|b
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|HRegionInfo
operator|.
name|parseFromOrNull
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|b
operator|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|allRegionsAssigned
operator|&=
operator|(
name|b
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|allRegionsAssigned
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Do a small get/scan against one store. This is required because store    * has no actual methods of querying itself, and relies on StoreScanner.    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Cell
argument_list|>
name|getFromStoreFile
parameter_list|(
name|HStore
name|store
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
comment|// originally MultiVersionConsistencyControl.resetThreadReadPoint() was called to set
comment|// readpoint 0.
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// verify that we are on the row we want:
name|Cell
name|kv
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|kv
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Create region split keys between startkey and endKey    *    * @param startKey    * @param endKey    * @param numRegions the number of regions to be created. it has to be greater than 3.    * @return    */
end_comment

begin_function
specifier|public
name|byte
index|[]
index|[]
name|getRegionSplitStartKeys
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|numRegions
operator|>
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|tmpSplitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|tmpSplitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmpSplitKeys
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|1
argument_list|,
name|tmpSplitKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Do a small get/scan against one store. This is required because store    * has no actual methods of querying itself, and relies on StoreScanner.    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Cell
argument_list|>
name|getFromStoreFile
parameter_list|(
name|HStore
name|store
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|s
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
name|s
operator|.
name|put
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Gets a ZooKeeperWatcher.    * @param TEST_UTIL    */
end_comment

begin_function
specifier|public
specifier|static
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|(
name|HBaseTestingUtility
name|TEST_UTIL
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"unittest"
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|aborted
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fatal ZK error, why="
operator|+
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|aborted
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|zkw
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|assertKVListsEqual
parameter_list|(
name|String
name|additionalMsg
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
name|expected
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
name|actual
parameter_list|)
block|{
specifier|final
name|int
name|eLen
init|=
name|expected
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|aLen
init|=
name|actual
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|eLen
argument_list|,
name|aLen
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|minLen
operator|&&
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
literal|0
condition|;
operator|++
name|i
control|)
block|{}
if|if
condition|(
name|additionalMsg
operator|==
literal|null
condition|)
block|{
name|additionalMsg
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|additionalMsg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|additionalMsg
operator|=
literal|". "
operator|+
name|additionalMsg
expr_stmt|;
block|}
if|if
condition|(
name|eLen
operator|!=
name|aLen
operator|||
name|i
operator|!=
name|minLen
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected and actual KV arrays differ at position "
operator|+
name|i
operator|+
literal|": "
operator|+
name|safeGetAsStr
argument_list|(
name|expected
argument_list|,
name|i
argument_list|)
operator|+
literal|" (length "
operator|+
name|eLen
operator|+
literal|") vs. "
operator|+
name|safeGetAsStr
argument_list|(
name|actual
argument_list|,
name|i
argument_list|)
operator|+
literal|" (length "
operator|+
name|aLen
operator|+
literal|")"
operator|+
name|additionalMsg
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|safeGetAsStr
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|lst
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|<=
name|i
operator|&&
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"<out_of_range>"
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
name|getClusterKey
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
operator|+
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Creates a random table with the given parameters */
end_comment

begin_function
specifier|public
name|HTable
name|createRandomTable
parameter_list|(
name|String
name|tableName
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|families
parameter_list|,
specifier|final
name|int
name|maxVersions
parameter_list|,
specifier|final
name|int
name|numColsPerRow
parameter_list|,
specifier|final
name|int
name|numFlushes
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|,
specifier|final
name|int
name|numRowsPerFlush
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nCreating random table "
operator|+
name|tableName
operator|+
literal|" with "
operator|+
name|numRegions
operator|+
literal|" regions, "
operator|+
name|numFlushes
operator|+
literal|" storefiles per region, "
operator|+
name|numRowsPerFlush
operator|+
literal|" rows per flush, maxVersions="
operator|+
name|maxVersions
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|tableName
operator|.
name|hashCode
argument_list|()
operator|*
literal|17L
operator|+
literal|12938197137L
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numCF
init|=
name|families
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|cfBytes
init|=
operator|new
name|byte
index|[
name|numCF
index|]
index|[]
decl_stmt|;
block|{
name|int
name|cfIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|cf
range|:
name|families
control|)
block|{
name|cfBytes
index|[
name|cfIndex
operator|++
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|actualStartKey
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|actualEndKey
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|int
name|keysPerRegion
init|=
operator|(
name|actualEndKey
operator|-
name|actualStartKey
operator|)
operator|/
name|numRegions
decl_stmt|;
specifier|final
name|int
name|splitStartKey
init|=
name|actualStartKey
operator|+
name|keysPerRegion
decl_stmt|;
specifier|final
name|int
name|splitEndKey
init|=
name|actualEndKey
operator|-
name|keysPerRegion
decl_stmt|;
specifier|final
name|String
name|keyFormat
init|=
literal|"%08x"
decl_stmt|;
specifier|final
name|HTable
name|table
init|=
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cfBytes
argument_list|,
name|maxVersions
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|keyFormat
argument_list|,
name|splitStartKey
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|keyFormat
argument_list|,
name|splitEndKey
argument_list|)
argument_list|)
argument_list|,
name|numRegions
argument_list|)
decl_stmt|;
if|if
condition|(
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|flushcache
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|iFlush
init|=
literal|0
init|;
name|iFlush
operator|<
name|numFlushes
condition|;
operator|++
name|iFlush
control|)
block|{
for|for
control|(
name|int
name|iRow
init|=
literal|0
init|;
name|iRow
operator|<
name|numRowsPerFlush
condition|;
operator|++
name|iRow
control|)
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|keyFormat
argument_list|,
name|actualStartKey
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|actualEndKey
operator|-
name|actualStartKey
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iCol
init|=
literal|0
init|;
name|iCol
operator|<
name|numColsPerRow
condition|;
operator|++
name|iCol
control|)
block|{
specifier|final
name|byte
index|[]
name|cf
init|=
name|cfBytes
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|numCF
argument_list|)
index|]
decl_stmt|;
specifier|final
name|long
name|ts
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
operator|+
name|iCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value_for_row_"
operator|+
name|iRow
operator|+
literal|"_cf_"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|cf
argument_list|)
operator|+
literal|"_col_"
operator|+
name|iCol
operator|+
literal|"_ts_"
operator|+
name|ts
operator|+
literal|"_random_"
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.8
condition|)
block|{
name|del
operator|.
name|deleteColumn
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|del
operator|.
name|deleteColumns
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|del
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating flush #"
operator|+
name|iFlush
operator|+
literal|" for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
if|if
condition|(
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|getMiniHBaseCluster
argument_list|()
operator|.
name|flushcache
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
end_function

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|int
name|MIN_RANDOM_PORT
init|=
literal|0xc000
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RANDOM_PORT
init|=
literal|0xfffe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Returns a random port. These ports cannot be registered with IANA and are    * intended for dynamic allocation (see http://bit.ly/dynports).    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|randomPort
parameter_list|()
block|{
return|return
name|MIN_RANDOM_PORT
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_RANDOM_PORT
operator|-
name|MIN_RANDOM_PORT
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a random free port and marks that port as taken. Not thread-safe. Expected to be    * called from single-threaded test setup code/    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|randomFreePort
parameter_list|()
block|{
name|int
name|port
init|=
literal|0
decl_stmt|;
do|do
block|{
name|port
operator|=
name|randomPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|takenRandomPorts
operator|.
name|contains
argument_list|(
name|port
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|takenRandomPorts
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
try|try
block|{
name|ServerSocket
name|sock
init|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|port
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
name|port
operator|==
literal|0
condition|)
do|;
return|return
name|port
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|randomMultiCastAddress
parameter_list|()
block|{
return|return
literal|"226.1.1."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|254
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|waitForHostPort
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxTimeMs
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|maxNumAttempts
init|=
name|maxTimeMs
operator|/
name|HConstants
operator|.
name|SOCKET_RETRY_WAIT_MS
decl_stmt|;
name|IOException
name|savedException
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for server at "
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
name|maxNumAttempts
condition|;
operator|++
name|attempt
control|)
block|{
try|try
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
name|savedException
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server at "
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" is available"
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to look up "
operator|+
name|host
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|savedException
operator|=
name|e
expr_stmt|;
block|}
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
name|HConstants
operator|.
name|SOCKET_RETRY_WAIT_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|savedException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|savedException
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Creates a pre-split table for load testing. If the table already exists,    * logs a warning and continues.    * @return the number of regions the table was split into    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|createPreSplitLoadTestTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|Algorithm
name|compression
parameter_list|,
name|DataBlockEncoding
name|dataBlockEncoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createPreSplitLoadTestTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|compression
argument_list|,
name|dataBlockEncoding
argument_list|,
name|DEFAULT_REGIONS_PER_SERVER
argument_list|,
literal|1
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a pre-split table for load testing. If the table already exists,    * logs a warning and continues.    * @return the number of regions the table was split into    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|createPreSplitLoadTestTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|Algorithm
name|compression
parameter_list|,
name|DataBlockEncoding
name|dataBlockEncoding
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|,
name|int
name|regionReplication
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setDataBlockEncoding
argument_list|(
name|dataBlockEncoding
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setCompressionType
argument_list|(
name|compression
argument_list|)
expr_stmt|;
return|return
name|createPreSplitLoadTestTable
argument_list|(
name|conf
argument_list|,
name|desc
argument_list|,
name|hcd
argument_list|,
name|numRegionsPerServer
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a pre-split table for load testing. If the table already exists,    * logs a warning and continues.    * @return the number of regions the table was split into    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|createPreSplitLoadTestTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createPreSplitLoadTestTable
argument_list|(
name|conf
argument_list|,
name|desc
argument_list|,
name|hcd
argument_list|,
name|DEFAULT_REGIONS_PER_SERVER
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a pre-split table for load testing. If the table already exists,    * logs a warning and continues.    * @return the number of regions the table was split into    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|createPreSplitLoadTestTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|hasFamily
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|int
name|totalNumberOfRegions
init|=
literal|0
decl_stmt|;
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a table a pre-splits regions.
comment|// The number of splits is set as:
comment|//    region servers * regions per region server).
name|int
name|numberOfServers
init|=
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfServers
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No live regionservers"
argument_list|)
throw|;
block|}
name|totalNumberOfRegions
operator|=
name|numberOfServers
operator|*
name|numRegionsPerServer
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of live regionservers: "
operator|+
name|numberOfServers
operator|+
literal|", "
operator|+
literal|"pre-splitting table into "
operator|+
name|totalNumberOfRegions
operator|+
literal|" regions "
operator|+
literal|"(regions per server: "
operator|+
name|numRegionsPerServer
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|RegionSplitter
operator|.
name|HexStringSplit
argument_list|()
operator|.
name|split
argument_list|(
name|totalNumberOfRegions
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Master not running"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists, continuing"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|totalNumberOfRegions
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|int
name|getMetaRSPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocator
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionLocation
name|hloc
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|hloc
operator|.
name|getPort
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    *  Due to async racing issue, a region may not be in    *  the online region list of a region server yet, after    *  the assignment znode is deleted and the new assignment    *  is recorded in master.    */
end_comment

begin_function
specifier|public
name|void
name|assertRegionOnServer
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|server
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|getHBaseAdmin
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
return|return;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Could not find region "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" on server "
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Check to make sure the region is open on the specified    * region server, but not on any other one.    */
end_comment

begin_function
specifier|public
name|void
name|assertRegionOnlyOnServer
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|server
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|getHBaseAdmin
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|rsThreads
init|=
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rsThread
range|:
name|rsThreads
control|)
block|{
name|HRegionServer
name|rs
init|=
name|rsThread
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|hrs
init|=
name|rs
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|hrs
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region should not be double assigned"
argument_list|,
name|r
operator|.
name|getRegionId
argument_list|()
operator|!=
name|hri
operator|.
name|getRegionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
comment|// good, we are happy
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Could not find region "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" on server "
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|HRegion
name|createTestRegion
parameter_list|(
name|String
name|tableName
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|getDataTestDir
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
return|return
name|region
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setFileSystemURI
parameter_list|(
name|String
name|fsURI
parameter_list|)
block|{
name|FS_URI
operator|=
name|fsURI
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Wrapper method for {@link Waiter#waitFor(Configuration, long, Predicate)}.    */
end_comment

begin_function
specifier|public
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|long
name|waitFor
parameter_list|(
name|long
name|timeout
parameter_list|,
name|Predicate
argument_list|<
name|E
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|E
block|{
return|return
name|Waiter
operator|.
name|waitFor
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|timeout
argument_list|,
name|predicate
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Wrapper method for {@link Waiter#waitFor(Configuration, long, long, Predicate)}.    */
end_comment

begin_function
specifier|public
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|long
name|waitFor
parameter_list|(
name|long
name|timeout
parameter_list|,
name|long
name|interval
parameter_list|,
name|Predicate
argument_list|<
name|E
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|E
block|{
return|return
name|Waiter
operator|.
name|waitFor
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|timeout
argument_list|,
name|interval
argument_list|,
name|predicate
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Wrapper method for {@link Waiter#waitFor(Configuration, long, long, boolean, Predicate)}.    */
end_comment

begin_function
specifier|public
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|long
name|waitFor
parameter_list|(
name|long
name|timeout
parameter_list|,
name|long
name|interval
parameter_list|,
name|boolean
name|failIfTimeout
parameter_list|,
name|Predicate
argument_list|<
name|E
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|E
block|{
return|return
name|Waiter
operator|.
name|waitFor
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|timeout
argument_list|,
name|interval
argument_list|,
name|failIfTimeout
argument_list|,
name|predicate
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a {@link Predicate} for checking that there are no regions in transition in master    */
end_comment

begin_function
specifier|public
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
name|predicateNoRegionsInTransition
parameter_list|()
block|{
return|return
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RegionStates
name|regionStates
init|=
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
return|return
operator|!
name|regionStates
operator|.
name|isRegionsInTransition
argument_list|()
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a {@link Predicate} for checking that table is enabled    */
end_comment

begin_function
specifier|public
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
name|predicateTableEnabled
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getHBaseAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Wait until no regions in transition.    * @param timeout How long to wait.    * @throws Exception    */
end_comment

begin_function
specifier|public
name|void
name|waitUntilNoRegionsInTransition
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|waitFor
argument_list|(
name|timeout
argument_list|,
name|predicateNoRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Create a set of column descriptors with the combination of compression,    * encoding, bloom codecs available.    * @return the list of column descriptors    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|HColumnDescriptor
argument_list|>
name|generateColumnDescriptors
parameter_list|()
block|{
return|return
name|generateColumnDescriptors
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create a set of column descriptors with the combination of compression,    * encoding, bloom codecs available.    * @param prefix family names prefix    * @return the list of column descriptors    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|HColumnDescriptor
argument_list|>
name|generateColumnDescriptors
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|HColumnDescriptor
argument_list|>
name|htds
init|=
operator|new
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|familyId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|compressionType
range|:
name|getSupportedCompressionAlgorithms
argument_list|()
control|)
block|{
for|for
control|(
name|DataBlockEncoding
name|encodingType
range|:
name|DataBlockEncoding
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BloomType
name|bloomType
range|:
name|BloomType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s-cf-!@#&-%d!@#"
argument_list|,
name|prefix
argument_list|,
name|familyId
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|htd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setCompressionType
argument_list|(
name|compressionType
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setDataBlockEncoding
argument_list|(
name|encodingType
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setBloomFilterType
argument_list|(
name|bloomType
argument_list|)
expr_stmt|;
name|htds
operator|.
name|add
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|familyId
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|htds
return|;
block|}
end_function

begin_comment
comment|/**    * Get supported compression algorithms.    * @return supported compression algorithms.    */
end_comment

begin_function
specifier|public
specifier|static
name|Compression
operator|.
name|Algorithm
index|[]
name|getSupportedCompressionAlgorithms
parameter_list|()
block|{
name|String
index|[]
name|allAlgos
init|=
name|HFile
operator|.
name|getSupportedCompressionAlgorithms
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Compression
operator|.
name|Algorithm
argument_list|>
name|supportedAlgos
init|=
operator|new
name|ArrayList
argument_list|<
name|Compression
operator|.
name|Algorithm
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|algoName
range|:
name|allAlgos
control|)
block|{
try|try
block|{
name|Compression
operator|.
name|Algorithm
name|algo
init|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|algoName
argument_list|)
decl_stmt|;
name|algo
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
name|supportedAlgos
operator|.
name|add
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// this algo is not available
block|}
block|}
return|return
name|supportedAlgos
operator|.
name|toArray
argument_list|(
operator|new
name|Algorithm
index|[
name|supportedAlgos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

