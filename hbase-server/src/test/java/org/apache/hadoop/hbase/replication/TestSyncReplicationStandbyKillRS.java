begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSyncReplicationStandbyKillRS
extends|extends
name|SyncReplicationTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSyncReplicationStandbyKillRS
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSyncReplicationStandbyKillRS
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testStandbyKillRegionServer
parameter_list|()
throws|throws
name|Exception
block|{
name|MasterFileSystem
name|mfs
init|=
name|UTIL2
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteWALDir
init|=
name|getRemoteWALDir
argument_list|(
name|mfs
argument_list|,
name|PEER_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWALDir
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWALDir
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// Disable async replication and write data, then shutdown
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|UTIL1
argument_list|,
literal|0
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|JVMClusterUtil
operator|.
name|MasterThread
name|activeMaster
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMasterThread
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|regionServers
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|regionServers
control|)
block|{
name|ServerName
name|serverName
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|stop
argument_list|(
literal|"Stop RS for test"
argument_list|)
expr_stmt|;
name|waitForRSShutdownToStartAndFinish
argument_list|(
name|activeMaster
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|restarted
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
decl_stmt|;
name|restarted
operator|.
name|waitForServerOnline
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to kill RS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Transit standby to DA to replay logs
try|try
block|{
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to transit standby cluster to "
operator|+
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|getReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|)
operator|!=
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|UTIL2
argument_list|,
literal|0
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForRSShutdownToStartAndFinish
parameter_list|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|activeMaster
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ServerManager
name|sm
init|=
name|activeMaster
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
comment|// First wait for it to be in dead list
while|while
condition|(
operator|!
name|sm
operator|.
name|getDeadServers
argument_list|()
operator|.
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for ["
operator|+
name|serverName
operator|+
literal|"] to be listed as dead in master"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server ["
operator|+
name|serverName
operator|+
literal|"] marked as dead, waiting for it to "
operator|+
literal|"finish dead processing"
argument_list|)
expr_stmt|;
while|while
condition|(
name|sm
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server ["
operator|+
name|serverName
operator|+
literal|"] still being processed, waiting"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server ["
operator|+
name|serverName
operator|+
literal|"] done with server shutdown processing"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

