begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAppendTimeRange
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAppendTimeRange
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ManualEnvironmentEdge
name|mee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|MyObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make general delay zero rather than default. Timing is off in this
comment|// test that depends on an evironment edge that is manually moved forward.
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|RemoteProcedureDispatcher
operator|.
name|DISPATCH_DELAY_CONF_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|mee
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyObserver
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|private
specifier|static
name|TimeRange
name|tr10
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|TimeRange
name|tr2
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preAppend
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|map
init|=
name|append
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|appendStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendStr
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
name|tr10
operator|=
name|append
operator|.
name|getTimeRange
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|appendStr
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|&&
operator|!
name|append
operator|.
name|getTimeRange
argument_list|()
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|tr2
operator|=
name|append
operator|.
name|getTimeRange
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableInterfaceMethods
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Table
name|table
init|=
name|util
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|TEST_FAMILY
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkRowValue
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|time
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|TimeRange
name|range10
init|=
operator|new
name|TimeRange
argument_list|(
literal|1
argument_list|,
name|time
operator|+
literal|10
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|append
argument_list|(
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|setTimeRange
argument_list|(
name|range10
operator|.
name|getMin
argument_list|()
argument_list|,
name|range10
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|checkRowValue
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MyObserver
operator|.
name|tr10
operator|.
name|getMin
argument_list|()
argument_list|,
name|range10
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MyObserver
operator|.
name|tr10
operator|.
name|getMax
argument_list|()
argument_list|,
name|range10
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|TimeRange
name|range2
init|=
operator|new
name|TimeRange
argument_list|(
literal|1
argument_list|,
name|time
operator|+
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Row
index|[]
block|{
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
operator|.
name|setTimeRange
argument_list|(
name|range2
operator|.
name|getMin
argument_list|()
argument_list|,
name|range2
operator|.
name|getMax
argument_list|()
argument_list|)
block|,
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
operator|.
name|setTimeRange
argument_list|(
name|range2
operator|.
name|getMin
argument_list|()
argument_list|,
name|range2
operator|.
name|getMax
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Object
index|[]
name|results1
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MyObserver
operator|.
name|tr2
operator|.
name|getMin
argument_list|()
argument_list|,
name|range2
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MyObserver
operator|.
name|tr2
operator|.
name|getMax
argument_list|()
argument_list|,
name|range2
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r2
range|:
name|results1
control|)
block|{
name|assertTrue
argument_list|(
name|r2
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
block|}
name|checkRowValue
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkRowValue
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|expectedValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actualValue
init|=
name|result
operator|.
name|getValue
argument_list|(
name|TEST_FAMILY
argument_list|,
name|QUAL
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

