begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestGlobalEventLoopGroup
block|{
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AsyncRpcClient
operator|.
name|USE_GLOBAL_EVENT_LOOP_GROUP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AsyncRpcClient
name|client
init|=
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
argument_list|)
expr_stmt|;
name|AsyncRpcClient
name|client1
init|=
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|client
operator|.
name|bootstrap
operator|.
name|group
argument_list|()
argument_list|,
name|client1
operator|.
name|bootstrap
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|client
operator|.
name|bootstrap
operator|.
name|group
argument_list|()
operator|.
name|isShuttingDown
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AsyncRpcClient
operator|.
name|USE_GLOBAL_EVENT_LOOP_GROUP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AsyncRpcClient
name|client2
init|=
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|client
operator|.
name|bootstrap
operator|.
name|group
argument_list|()
argument_list|,
name|client2
operator|.
name|bootstrap
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

