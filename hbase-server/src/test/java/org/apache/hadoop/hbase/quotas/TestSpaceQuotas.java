begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientServiceCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RpcRetryingCaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RpcRetryingCallerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SecureBulkLoadClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|policies
operator|.
name|BulkLoadVerifyingViolationPolicyEnforcement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestHRegionServerBulkLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * End-to-end test class for filesystem space quotas.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSpaceQuotas
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSpaceQuotas
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RETRIES
init|=
literal|10
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Increase the frequency of some of the chores for responsiveness of the test
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|POLICY_REFRESHER_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Wait for the quota table to be created
if|if
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
do|do
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Quota table does not yet exist"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
do|;
block|}
else|else
block|{
comment|// Or, clean up any quotas from previous test runs.
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
specifier|final
name|String
name|namespace
init|=
name|quotaSettings
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|quotaSettings
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|namespace
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for namespace: "
operator|+
name|namespace
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteNamespaceQuota
argument_list|(
name|conn
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|null
operator|!=
name|tableName
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteTableQuota
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoInsertsWithIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletesAfterNoInserts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tn
init|=
name|writeUntilViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
comment|// Try a couple of times to verify that the quota never gets enforced, same as we
comment|// do when we're trying to catch the failure.
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"should_not_be_rejected"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RETRIES
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
init|)
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWritesWithDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoCompactions
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// We know the policy is active at this point
comment|// Major compactions should be rejected
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected that invoking the compaction should throw an Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// Minor compactions should also be rejected.
try|try
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected that invoking the compaction should throw an Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// Expected!
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoEnableAfterDisablePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|writeUntilViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Disabling a table relies on some external action (over the other policies), so wait a bit
comment|// more than the other tests.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RETRIES
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tn
operator|+
literal|" is still enabled, expecting it to be disabled. Will wait and re-check."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|tn
operator|+
literal|" is still enabled but it should be disabled"
argument_list|,
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tn
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|String
name|exceptionContents
init|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedText
init|=
literal|"violated space quota"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the exception to contain "
operator|+
name|expectedText
operator|+
literal|", but was: "
operator|+
name|exceptionContents
argument_list|,
name|exceptionContents
operator|.
name|contains
argument_list|(
name|expectedText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testNoBulkLoadsWithNoWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|writeUntilViolationAndVerifyViolation
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// The table is now in violation. Try to do a bulk load
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
name|generateFileToLoad
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|RpcRetryingCallerFactory
name|factory
init|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|caller
init|=
name|factory
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|()
decl_stmt|;
try|try
block|{
name|caller
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected the bulk load call to fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SpaceLimitingException
name|e
parameter_list|)
block|{
comment|// Pass
name|LOG
operator|.
name|trace
argument_list|(
literal|"Caught expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testAtomicBulkLoadUnderQuota
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Need to verify that if the batch of hfiles cannot be loaded, none are loaded.
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|50L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionServerSpaceQuotaManager
name|spaceQuotaManager
init|=
name|rs
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
name|spaceQuotaManager
operator|.
name|copyQuotaSnapshots
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
init|=
name|getReportedSizesForTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|snapshots
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|snapshot
operator|&&
name|snapshot
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot does not yet realize quota limit: "
operator|+
name|snapshots
operator|+
literal|", regionsizes: "
operator|+
name|regionSizes
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|snapshots
operator|=
name|spaceQuotaManager
operator|.
name|copyQuotaSnapshots
argument_list|()
expr_stmt|;
name|regionSizes
operator|=
name|getReportedSizesForTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|// Our quota limit should be reflected in the latest snapshot
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|snapshots
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|snapshot
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// We would also not have a "real" policy in violation
name|ActivePolicyEnforcement
name|activePolicies
init|=
name|spaceQuotaManager
operator|.
name|getActiveEnforcements
argument_list|()
decl_stmt|;
name|SpaceViolationPolicyEnforcement
name|enforcement
init|=
name|activePolicies
operator|.
name|getPolicyEnforcement
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find Noop policy, but got "
operator|+
name|enforcement
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|enforcement
operator|instanceof
name|BulkLoadVerifyingViolationPolicyEnforcement
argument_list|)
expr_stmt|;
comment|// Should generate two files, each of which is over 25KB each
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
name|generateFileToLoad
argument_list|(
name|tn
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_files"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected the file, "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|",  length to be larger than 25KB, but was "
operator|+
name|file
operator|.
name|getLen
argument_list|()
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
operator|>
literal|25
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" -> "
operator|+
name|file
operator|.
name|getLen
argument_list|()
operator|+
literal|"B"
argument_list|)
expr_stmt|;
block|}
name|RpcRetryingCallerFactory
name|factory
init|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|caller
init|=
name|factory
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|()
decl_stmt|;
try|try
block|{
name|caller
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected the bulk load call to fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SpaceLimitingException
name|e
parameter_list|)
block|{
comment|// Pass
name|LOG
operator|.
name|trace
argument_list|(
literal|"Caught expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we have no data in the table because neither file should have been
comment|// loaded even though one of the files could have.
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertNull
argument_list|(
literal|"Expected no results"
argument_list|,
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTableQuotaOverridesNamespaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SpaceViolationPolicy
name|policy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// 2MB limit on the table, 1GB limit on the namespace
specifier|final
name|long
name|tableLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|long
name|namespaceLimit
init|=
literal|1024L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|tableLimit
argument_list|,
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|namespaceLimit
argument_list|,
name|policy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write more data than should be allowed and flush it to disk
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
comment|// This should be sufficient time for the chores to run and see the change.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// The write should be rejected because the table quota takes priority over the namespace
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to_reject"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyViolation
argument_list|(
name|policy
argument_list|,
name|tn
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|getReportedSizesForTable
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterQuotaManager
name|quotaManager
init|=
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|filteredRegionSizes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|filteredRegionSizes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredRegionSizes
return|;
block|}
specifier|private
name|TableName
name|writeUntilViolation
parameter_list|(
name|SpaceViolationPolicy
name|policyToViolate
parameter_list|)
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|policyToViolate
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write more data than should be allowed and flush it to disk
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
comment|// This should be sufficient time for the chores to run and see the change.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
return|return
name|tn
return|;
block|}
specifier|private
name|TableName
name|writeUntilViolationAndVerifyViolation
parameter_list|(
name|SpaceViolationPolicy
name|policyToViolate
parameter_list|,
name|Mutation
name|m
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tn
init|=
name|writeUntilViolation
argument_list|(
name|policyToViolate
argument_list|)
decl_stmt|;
name|verifyViolation
argument_list|(
name|policyToViolate
argument_list|,
name|tn
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|tn
return|;
block|}
specifier|private
name|void
name|verifyViolation
parameter_list|(
name|SpaceViolationPolicy
name|policyToViolate
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|Mutation
name|m
parameter_list|)
throws|throws
name|Exception
block|{
comment|// But let's try a few times to get the exception before failing
name|boolean
name|sawError
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RETRIES
operator|&&
operator|!
name|sawError
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
init|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|(
name|Put
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|Delete
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
operator|(
name|Delete
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|Append
condition|)
block|{
name|table
operator|.
name|append
argument_list|(
operator|(
name|Append
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|Increment
condition|)
block|{
name|table
operator|.
name|increment
argument_list|(
operator|(
name|Increment
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Failed to apply "
operator|+
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to the table. Programming error"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Did not reject the "
operator|+
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", will sleep and retry"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected exception message to contain the word '"
operator|+
name|policyToViolate
operator|.
name|name
argument_list|()
operator|+
literal|"', but was "
operator|+
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
name|policyToViolate
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sawError
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sawError
condition|)
block|{
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|scanner
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumping contents of hbase:quota table"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|" => "
operator|+
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Expected to see an exception writing data to a table exceeding its quota"
argument_list|,
name|sawError
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
name|generateFileToLoad
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|int
name|numRowsPerFile
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_files"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|famPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|hfile
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"to"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reject"
argument_list|)
argument_list|,
name|numRowsPerFile
argument_list|)
expr_stmt|;
name|famPaths
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|hfile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// bulk load HFiles
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
specifier|final
name|String
name|bulkToken
init|=
operator|new
name|SecureBulkLoadClient
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
operator|.
name|prepareBulkLoad
argument_list|(
name|conn
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClientServiceCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|SecureBulkLoadClient
name|secureClient
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|secureClient
operator|=
operator|new
name|SecureBulkLoadClient
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|secureClient
operator|.
name|secureBulkLoadHFiles
argument_list|(
name|getStub
argument_list|()
argument_list|,
name|famPaths
argument_list|,
name|regionName
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|bulkToken
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

