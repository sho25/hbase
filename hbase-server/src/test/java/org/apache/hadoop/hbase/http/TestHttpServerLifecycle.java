begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHttpServerLifecycle
extends|extends
name|HttpServerFunctionalTest
block|{
comment|/**    * Check that a server is alive by probing the {@link HttpServer#isAlive()} method    * and the text of its toString() description    * @param server server    */
specifier|private
name|void
name|assertAlive
parameter_list|(
name|HttpServer
name|server
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Server is not alive"
argument_list|,
name|server
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertToStringContains
argument_list|(
name|server
argument_list|,
name|HttpServer
operator|.
name|STATE_DESCRIPTION_ALIVE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotLive
parameter_list|(
name|HttpServer
name|server
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Server should not be live"
argument_list|,
operator|!
name|server
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertToStringContains
argument_list|(
name|server
argument_list|,
name|HttpServer
operator|.
name|STATE_DESCRIPTION_NOT_LIVE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the server is alive once started    *    * @throws Throwable on failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCreatedServerIsNotAlive
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
name|createTestServer
argument_list|()
decl_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStopUnstartedServer
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
name|createTestServer
argument_list|()
decl_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the server is alive once started    *    * @throws Throwable on failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStartedServerIsAlive
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
literal|null
decl_stmt|;
name|server
operator|=
name|createTestServer
argument_list|()
expr_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertAlive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the result of {@link HttpServer#toString()} contains the specific text    * @param server server to examine    * @param text text to search for    */
specifier|private
name|void
name|assertToStringContains
parameter_list|(
name|HttpServer
name|server
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|String
name|description
init|=
name|server
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find \""
operator|+
name|text
operator|+
literal|"\" in \""
operator|+
name|description
operator|+
literal|"\""
argument_list|,
name|description
operator|.
name|contains
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the server is not alive once stopped    *    * @throws Throwable on failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStoppedServerIsNotAlive
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
name|createAndStartTestServer
argument_list|()
decl_stmt|;
name|assertAlive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the server is not alive once stopped    *    * @throws Throwable on failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStoppingTwiceServerIsAllowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
name|createAndStartTestServer
argument_list|()
decl_stmt|;
name|assertAlive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the server is alive once started    *    * @throws Throwable    *           on failure    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testWepAppContextAfterServerStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|HttpServer
name|server
init|=
literal|null
decl_stmt|;
name|String
name|key
init|=
literal|"test.attribute.key"
decl_stmt|;
name|String
name|value
init|=
literal|"test.attribute.value"
decl_stmt|;
name|server
operator|=
name|createTestServer
argument_list|()
expr_stmt|;
name|assertNotLive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|setAttribute
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertAlive
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|server
operator|.
name|getAttribute
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stop
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Server context should have cleared"
argument_list|,
name|server
operator|.
name|getAttribute
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

