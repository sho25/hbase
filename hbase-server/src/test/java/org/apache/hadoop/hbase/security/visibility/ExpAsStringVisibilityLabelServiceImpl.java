begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityUtils
operator|.
name|SYSTEM_LABEL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|LeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|NonLeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is a VisibilityLabelService where labels in Mutation's visibility  * expression will be persisted as Strings itself rather than ordinals in  * 'labels' table. Also there is no need to add labels to the system, prior to  * using them in Mutations/Authorizations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ExpAsStringVisibilityLabelServiceImpl
implements|implements
name|VisibilityLabelService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExpAsStringVisibilityLabelServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|STRING_SERIALIZATION_FORMAT
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Tag
name|STRING_SERIALIZATION_FORMAT_TAG
init|=
operator|new
name|ArrayBackedTag
argument_list|(
name|TagType
operator|.
name|VISIBILITY_EXP_SERIALIZATION_FORMAT_TAG_TYPE
argument_list|,
operator|new
name|byte
index|[]
block|{
name|STRING_SERIALIZATION_FORMAT
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExpressionParser
name|expressionParser
init|=
operator|new
name|ExpressionParser
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExpressionExpander
name|expressionExpander
init|=
operator|new
name|ExpressionExpander
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Region
name|labelsRegion
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ScanLabelGenerator
argument_list|>
name|scanLabelGenerators
decl_stmt|;
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|addLabels
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Not doing specific label add. We will just add labels in Mutation
comment|// visibility expression as it
comment|// is along with every cell.
name|OperationStatus
index|[]
name|status
init|=
operator|new
name|OperationStatus
index|[
name|labels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|status
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|setAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|authLabels
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|labelsRegion
operator|!=
literal|null
assert|;
name|OperationStatus
index|[]
name|finalOpStatus
init|=
operator|new
name|OperationStatus
index|[
name|authLabels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|CellBuilder
name|builder
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|auth
range|:
name|authLabels
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|auth
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|DUMMY_VALUE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|labelsRegion
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// This is a testing impl and so not doing any caching
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|authLabels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|finalOpStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|clearAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|authLabels
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|labelsRegion
operator|!=
literal|null
assert|;
name|OperationStatus
index|[]
name|finalOpStatus
init|=
operator|new
name|OperationStatus
index|[
name|authLabels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentAuths
decl_stmt|;
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|group
init|=
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|currentAuths
operator|=
name|this
operator|.
name|getGroupAuths
argument_list|(
operator|new
name|String
index|[]
block|{
name|group
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentAuths
operator|=
name|this
operator|.
name|getUserAuths
argument_list|(
name|user
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|authLabel
range|:
name|authLabels
control|)
block|{
name|String
name|authLabelStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|authLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAuths
operator|.
name|contains
argument_list|(
name|authLabelStr
argument_list|)
condition|)
block|{
name|d
operator|.
name|addColumns
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|authLabel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This label is not set for the user.
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|FAILURE
argument_list|,
operator|new
name|InvalidLabelException
argument_list|(
literal|"Label '"
operator|+
name|authLabelStr
operator|+
literal|"' is not set for the user "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|labelsRegion
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// This is a testing impl and so not doing any caching
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|authLabels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|finalOpStatus
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|finalOpStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUserAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|boolean
name|systemCall
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|labelsRegion
operator|!=
literal|null
operator|||
name|systemCall
operator|)
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|auths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|labelsRegion
operator|==
literal|null
condition|)
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|cells
operator|=
name|result
operator|.
name|listCells
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|cells
operator|=
name|this
operator|.
name|labelsRegion
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cells
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|String
name|auth
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|auths
operator|.
name|add
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|auths
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroupAuths
parameter_list|(
name|String
index|[]
name|groups
parameter_list|,
name|boolean
name|systemCall
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|labelsRegion
operator|!=
literal|null
operator|||
name|systemCall
operator|)
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|auths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
name|groups
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|labelsRegion
operator|==
literal|null
condition|)
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|cells
operator|=
name|result
operator|.
name|listCells
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|cells
operator|=
name|this
operator|.
name|labelsRegion
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cells
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|String
name|auth
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|auths
operator|.
name|add
argument_list|(
name|auth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|auths
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listLabels
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// return an empty list for this implementation.
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Tag
argument_list|>
name|createVisibilityExpTags
parameter_list|(
name|String
name|visExpression
parameter_list|,
name|boolean
name|withSerializationFormat
parameter_list|,
name|boolean
name|checkAuths
parameter_list|)
throws|throws
name|IOException
block|{
name|ExpressionNode
name|node
init|=
literal|null
decl_stmt|;
try|try
block|{
name|node
operator|=
name|this
operator|.
name|expressionParser
operator|.
name|parse
argument_list|(
name|visExpression
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|node
operator|=
name|this
operator|.
name|expressionExpander
operator|.
name|expand
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|withSerializationFormat
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|STRING_SERIALIZATION_FORMAT_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|NonLeafExpressionNode
operator|&&
operator|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
for|for
control|(
name|ExpressionNode
name|child
range|:
operator|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|createTag
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tags
operator|.
name|add
argument_list|(
name|createTag
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tags
return|;
block|}
annotation|@
name|Override
specifier|public
name|VisibilityExpEvaluator
name|getVisibilityExpEvaluator
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If a super user issues a get/scan, he should be able to scan the cells
comment|// irrespective of the Visibility labels
if|if
condition|(
name|isReadFromSystemAuthUser
argument_list|()
condition|)
block|{
return|return
operator|new
name|VisibilityExpEvaluator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|authLabels
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ScanLabelGenerator
name|scanLabelGenerator
range|:
name|scanLabelGenerators
control|)
block|{
try|try
block|{
comment|// null authorizations to be handled inside SLG impl.
name|authLabels
operator|=
name|scanLabelGenerator
operator|.
name|getLabels
argument_list|(
name|VisibilityUtils
operator|.
name|getActiveUser
argument_list|()
argument_list|,
name|authorizations
argument_list|)
expr_stmt|;
name|authLabels
operator|=
operator|(
name|authLabels
operator|==
literal|null
operator|)
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
name|authLabels
expr_stmt|;
name|authorizations
operator|=
operator|new
name|Authorizations
argument_list|(
name|authLabels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|authLabelsFinal
init|=
name|authLabels
decl_stmt|;
return|return
operator|new
name|VisibilityExpEvaluator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|visibilityTagPresent
init|=
literal|false
decl_stmt|;
comment|// Save an object allocation where we can
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|PrivateCellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
name|includeKV
init|=
literal|true
decl_stmt|;
name|Tag
name|tag
init|=
name|tagsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|visibilityTagPresent
operator|=
literal|true
expr_stmt|;
name|int
name|offset
init|=
name|tag
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|short
name|len
init|=
name|getTagValuePartAsShort
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
comment|// This is a NOT label.
name|len
operator|=
call|(
name|short
call|)
argument_list|(
operator|-
literal|1
operator|*
name|len
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|getTagValuePartAsString
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|authLabelsFinal
operator|.
name|contains
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|includeKV
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|String
name|label
init|=
name|getTagValuePartAsString
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authLabelsFinal
operator|.
name|contains
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|includeKV
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|offset
operator|+=
name|len
expr_stmt|;
block|}
if|if
condition|(
name|includeKV
condition|)
block|{
comment|// We got one visibility expression getting evaluated to true.
comment|// Good to include this
comment|// KV in the result then.
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
operator|!
operator|(
name|visibilityTagPresent
operator|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|boolean
name|isReadFromSystemAuthUser
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|VisibilityUtils
operator|.
name|getActiveUser
argument_list|()
decl_stmt|;
return|return
name|havingSystemAuth
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|private
name|Tag
name|createTag
parameter_list|(
name|ExpressionNode
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notLabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|extractLabels
argument_list|(
name|node
argument_list|,
name|labels
argument_list|,
name|notLabels
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|notLabels
argument_list|)
expr_stmt|;
comment|// We will write the NOT labels 1st followed by normal labels
comment|// Each of the label we will write with label length (as short 1st) followed
comment|// by the label bytes.
comment|// For a NOT node we will write the label length as -ve.
for|for
control|(
name|String
name|label
range|:
name|notLabels
control|)
block|{
name|byte
index|[]
name|bLabel
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|short
name|length
init|=
operator|(
name|short
operator|)
name|bLabel
operator|.
name|length
decl_stmt|;
name|length
operator|=
call|(
name|short
call|)
argument_list|(
operator|-
literal|1
operator|*
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|bLabel
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|byte
index|[]
name|bLabel
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|bLabel
operator|.
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|bLabel
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayBackedTag
argument_list|(
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|extractLabels
parameter_list|(
name|ExpressionNode
name|node
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|notLabels
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|NonLeafExpressionNode
condition|)
block|{
comment|// This is a NOT node.
name|LeafExpressionNode
name|lNode
init|=
call|(
name|LeafExpressionNode
call|)
argument_list|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
argument_list|)
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|notLabels
operator|.
name|add
argument_list|(
name|lNode
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|labels
operator|.
name|add
argument_list|(
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// A non leaf expression of labels with& operator.
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
assert|assert
name|nlNode
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
assert|;
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|childExps
init|=
name|nlNode
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionNode
name|child
range|:
name|childExps
control|)
block|{
name|extractLabels
argument_list|(
name|child
argument_list|,
name|labels
argument_list|,
name|notLabels
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scanLabelGenerators
operator|=
name|VisibilityUtils
operator|.
name|getScanLabelGenerators
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|LABELS_TABLE_NAME
argument_list|)
condition|)
block|{
name|this
operator|.
name|labelsRegion
operator|=
name|e
operator|.
name|getRegion
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|havingSystemAuth
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Superusers
operator|.
name|isSuperUser
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|auths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|auths
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getUserAuths
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|auths
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getGroupAuths
argument_list|(
name|user
operator|.
name|getGroupNames
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|auths
operator|.
name|contains
argument_list|(
name|SYSTEM_LABEL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchVisibility
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|putTags
parameter_list|,
name|Byte
name|putTagsFormat
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|deleteTags
parameter_list|,
name|Byte
name|deleteTagsFormat
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|putTagsFormat
operator|==
name|STRING_SERIALIZATION_FORMAT
assert|;
assert|assert
name|deleteTagsFormat
operator|==
name|STRING_SERIALIZATION_FORMAT
assert|;
return|return
name|checkForMatchingVisibilityTagsWithSortedOrder
argument_list|(
name|putTags
argument_list|,
name|deleteTags
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkForMatchingVisibilityTagsWithSortedOrder
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|putVisTags
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|deleteVisTags
parameter_list|)
block|{
comment|// Early out if there are no tags in both of cell and delete
if|if
condition|(
name|putVisTags
operator|.
name|isEmpty
argument_list|()
operator|&&
name|deleteVisTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|matchFound
init|=
literal|false
decl_stmt|;
comment|// If the size does not match. Definitely we are not comparing the equal
comment|// tags.
if|if
condition|(
operator|(
name|deleteVisTags
operator|.
name|size
argument_list|()
operator|)
operator|==
name|putVisTags
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|deleteVisTags
control|)
block|{
name|matchFound
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Tag
name|givenTag
range|:
name|putVisTags
control|)
block|{
if|if
condition|(
name|Tag
operator|.
name|matchingValue
argument_list|(
name|tag
argument_list|,
name|givenTag
argument_list|)
condition|)
block|{
name|matchFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matchFound
condition|)
break|break;
block|}
block|}
return|return
name|matchFound
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|encodeVisibilityForReplication
parameter_list|(
specifier|final
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|,
specifier|final
name|Byte
name|serializationFormat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tags
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|serializationFormat
operator|==
literal|null
operator|||
name|serializationFormat
operator|==
name|STRING_SERIALIZATION_FORMAT
operator|)
condition|)
block|{
return|return
name|createModifiedVisExpression
argument_list|(
name|tags
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param tags - all the tags associated with the current Cell    * @return - the modified visibility expression as byte[]    */
specifier|private
name|byte
index|[]
name|createModifiedVisExpression
parameter_list|(
specifier|final
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|visibilityString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
if|if
condition|(
name|visibilityString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|CLOSED_PARAN
operator|+
name|VisibilityConstants
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|tag
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|boolean
name|expressionStart
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|short
name|len
init|=
name|getTagValuePartAsShort
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
name|len
operator|=
call|(
name|short
call|)
argument_list|(
operator|-
literal|1
operator|*
name|len
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|getTagValuePartAsString
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|expressionStart
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|OPEN_PARAN
operator|+
name|VisibilityConstants
operator|.
name|NOT_OPERATOR
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|AND_OPERATOR
operator|+
name|VisibilityConstants
operator|.
name|NOT_OPERATOR
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|label
init|=
name|getTagValuePartAsString
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|expressionStart
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|OPEN_PARAN
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|AND_OPERATOR
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|expressionStart
operator|=
literal|false
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|visibilityString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|CLOSED_PARAN
argument_list|)
expr_stmt|;
comment|// Return the string formed as byte[]
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|visibilityString
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|short
name|getTagValuePartAsShort
parameter_list|(
name|Tag
name|t
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|Bytes
operator|.
name|toShort
argument_list|(
name|t
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|offset
argument_list|)
return|;
block|}
return|return
name|ByteBufferUtils
operator|.
name|toShort
argument_list|(
name|t
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTagValuePartAsString
parameter_list|(
name|Tag
name|t
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|t
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|b
argument_list|,
name|t
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
name|offset
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
end_class

end_unit

