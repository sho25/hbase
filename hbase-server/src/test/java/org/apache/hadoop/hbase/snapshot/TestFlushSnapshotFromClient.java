begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ScannerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ConstantSizeRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test creating/using/deleting snapshots from the client  *<p>  * This is an end-to-end test for the snapshot utility  *  * TODO This is essentially a clone of TestSnapshotFromClient.  This is worth refactoring this  * because there will be a few more flavors of snapshots that need to run these tests.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFlushSnapshotFromClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFlushSnapshotFromClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STRING_TABLE_NAME
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|STRING_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|DEFAULT_NUM_ROWS
init|=
literal|1000
decl_stmt|;
comment|/**    * Setup the config for the cluster    * @throws Exception on failure    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|RpcServer
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|RpcClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|ScannerCallable
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// disable the ui
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionsever.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// change the flush size to a small amount, regulating number of store files
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
comment|// so make sure we get a compaction when doing a load, but keep around some
comment|// files in the store
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// block writes if we get to 12 store files
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.blockingStoreFiles"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// drop the number of attempts for the hbase admin
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Enable snapshot
name|conf
operator|.
name|setBoolean
argument_list|(
name|SnapshotManager
operator|.
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_REGION_SPLIT_POLICY_KEY
argument_list|,
name|ConstantSizeRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
comment|// and cleanup the archive directory
try|try
block|{
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure to delete archive directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test simple flush snapshotting a table that is online    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushTableSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// put some stuff in the table
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|loadData
argument_list|(
name|table
argument_list|,
name|DEFAULT_NUM_ROWS
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// get the name of all the regionservers hosting the snapshotted table
name|Set
argument_list|<
name|String
argument_list|>
name|snapshotServers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|servers
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|server
range|:
name|servers
control|)
block|{
if|if
condition|(
name|server
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|snapshotServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state before snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// take a snapshot of the enabled table
name|String
name|snapshotString
init|=
literal|"offlineTableSnapshot"
decl_stmt|;
name|byte
index|[]
name|snapshot
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotString
argument_list|)
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotString
argument_list|,
name|STRING_TABLE_NAME
argument_list|,
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot completed."
argument_list|)
expr_stmt|;
comment|// make sure we have the snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|SnapshotTestingUtils
operator|.
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshot
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
comment|// make sure its a valid snapshot
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state after snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|confirmSnapshotValid
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TABLE_NAME
argument_list|,
name|TEST_FAM
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
argument_list|,
name|snapshotServers
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|snapshots
operator|=
name|admin
operator|.
name|listSnapshots
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotFailsOnNonExistantTable
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"_not_a_table"
decl_stmt|;
comment|// make sure the table doesn't exist
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Table:"
operator|+
name|tableName
operator|+
literal|" already exists, checking a new name"
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|+
literal|"!"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|false
expr_stmt|;
block|}
block|}
do|while
condition|(
name|fail
condition|)
do|;
comment|// snapshot the non-existant table
try|try
block|{
name|admin
operator|.
name|snapshot
argument_list|(
literal|"fail"
argument_list|,
name|tableName
argument_list|,
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Snapshot succeeded even though there is not table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotCreationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Correctly failed to snapshot a non-existant table:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAsyncFlushSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"asyncSnapshot"
argument_list|)
operator|.
name|setTable
argument_list|(
name|STRING_TABLE_NAME
argument_list|)
operator|.
name|setType
argument_list|(
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// take the snapshot async
name|admin
operator|.
name|takeSnapshotAsync
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// constantly loop, looking for the snapshot to complete
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|waitForSnapshotToComplete
argument_list|(
name|master
argument_list|,
name|snapshot
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" === Async Snapshot Completed ==="
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// make sure we get the snapshot
name|SnapshotTestingUtils
operator|.
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
comment|// test that we can delete the snapshot
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" === Async Snapshot Deleted ==="
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// make sure we don't have any snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" === Async Snapshot Test Completed ==="
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotStateAfterMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
name|DEFAULT_NUM_ROWS
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// load the table so we have some data
name|loadData
argument_list|(
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|,
name|numRows
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// and wait until everything stabilizes
name|waitForTableToBeOnline
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
comment|// Take a snapshot
name|String
name|snapshotBeforeMergeName
init|=
literal|"snapshotBeforeMerge"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotBeforeMergeName
argument_list|,
name|STRING_TABLE_NAME
argument_list|,
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
comment|// Clone the table
name|String
name|cloneBeforeMergeName
init|=
literal|"cloneBeforeMerge"
decl_stmt|;
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshotBeforeMergeName
argument_list|,
name|cloneBeforeMergeName
argument_list|)
expr_stmt|;
name|waitForTableToBeOnline
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneBeforeMergeName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Merge two regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|regions
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|HRegionInfo
name|r1
parameter_list|,
name|HRegionInfo
name|r2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|r2
operator|.
name|getStartKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|numRegions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegionsAfterMerge
init|=
name|numRegions
operator|-
literal|2
decl_stmt|;
name|admin
operator|.
name|mergeRegions
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|mergeRegions
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify that there's one region less
name|waitRegionsAfterMerge
argument_list|(
name|numRegionsAfterMerge
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegionsAfterMerge
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clone the table
name|String
name|cloneAfterMergeName
init|=
literal|"cloneAfterMerge"
decl_stmt|;
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshotBeforeMergeName
argument_list|,
name|cloneAfterMergeName
argument_list|)
expr_stmt|;
name|waitForTableToBeOnline
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneAfterMergeName
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|TABLE_NAME
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneBeforeMergeName
argument_list|)
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneAfterMergeName
argument_list|)
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
comment|// test that we can delete the snapshot
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|cloneAfterMergeName
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|cloneBeforeMergeName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotBeforeMergeName
argument_list|)
expr_stmt|;
comment|// make sure we don't have any snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeSnapshotAfterMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
name|DEFAULT_NUM_ROWS
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// load the table so we have some data
name|loadData
argument_list|(
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|,
name|numRows
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// and wait until everything stabilizes
name|waitForTableToBeOnline
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
comment|// Merge two regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|regions
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|HRegionInfo
name|r1
parameter_list|,
name|HRegionInfo
name|r2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|r2
operator|.
name|getStartKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|numRegions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegionsAfterMerge
init|=
name|numRegions
operator|-
literal|2
decl_stmt|;
name|admin
operator|.
name|mergeRegions
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|mergeRegions
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitRegionsAfterMerge
argument_list|(
name|numRegionsAfterMerge
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegionsAfterMerge
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Take a snapshot
name|String
name|snapshotName
init|=
literal|"snapshotAfterMerge"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|STRING_TABLE_NAME
argument_list|,
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
comment|// Clone the table
name|String
name|cloneName
init|=
literal|"cloneMerge"
decl_stmt|;
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|cloneName
argument_list|)
expr_stmt|;
name|waitForTableToBeOnline
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneName
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|TABLE_NAME
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cloneName
argument_list|)
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
comment|// test that we can delete the snapshot
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|cloneName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
comment|// make sure we don't have any snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic end-to-end test of simple-flush-based snapshots    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushCreateListDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"------- Starting Snapshot test -------------"
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// load the table so we have some data
name|loadData
argument_list|(
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|,
name|DEFAULT_NUM_ROWS
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// and wait until everything stabilizes
name|waitForTableToBeOnline
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|String
name|snapshotName
init|=
literal|"flushSnapshotCreateListDestroy"
decl_stmt|;
comment|// test creating the snapshot
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|STRING_TABLE_NAME
argument_list|,
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|logFSTree
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we only have 1 matching snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|SnapshotTestingUtils
operator|.
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshotName
argument_list|,
name|STRING_TABLE_NAME
argument_list|)
decl_stmt|;
comment|// check the directory structure
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|snapshotDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|Path
name|snapshotinfo
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOTINFO_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotinfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the table info
name|HTableDescriptor
name|desc
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptor
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|snapshotDesc
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptor
argument_list|(
name|fs
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|desc
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
comment|// check the region snapshot for all the regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|info
range|:
name|regions
control|)
block|{
name|String
name|regionName
init|=
name|info
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|snapshotRegionInfo
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|snapshotRegionInfo
argument_list|)
expr_stmt|;
comment|// check to make sure we have the family
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|TEST_FAM
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|familyDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we have some file references
name|assertTrue
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test that we can delete the snapshot
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// make sure we don't have any snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"------- Flush-Snapshot Create List Destroy-------------"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Demonstrate that we reject snapshot requests if there is a snapshot already running on the    * same table currently running and that concurrent snapshots on different tables can both    * succeed concurretly.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConcurrentSnapshottingAttempts
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|STRING_TABLE2_NAME
init|=
name|STRING_TABLE_NAME
operator|+
literal|"2"
decl_stmt|;
specifier|final
name|byte
index|[]
name|TABLE2_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|STRING_TABLE2_NAME
argument_list|)
decl_stmt|;
name|int
name|ssNum
init|=
literal|20
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// create second testing table
name|createTable
argument_list|(
name|TABLE2_NAME
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// load the table so we have some data
name|loadData
argument_list|(
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|,
name|DEFAULT_NUM_ROWS
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE2_NAME
argument_list|)
argument_list|,
name|DEFAULT_NUM_ROWS
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// and wait until everything stabilizes
name|waitForTableToBeOnline
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|waitForTableToBeOnline
argument_list|(
name|TABLE2_NAME
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|toBeSubmitted
init|=
operator|new
name|CountDownLatch
argument_list|(
name|ssNum
argument_list|)
decl_stmt|;
comment|// We'll have one of these per thread
class|class
name|SSRunnable
implements|implements
name|Runnable
block|{
name|SnapshotDescription
name|ss
decl_stmt|;
name|SSRunnable
parameter_list|(
name|SnapshotDescription
name|ss
parameter_list|)
block|{
name|this
operator|.
name|ss
operator|=
name|ss
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting snapshot request: "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|ss
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|takeSnapshotAsync
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception during snapshot request: "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|ss
argument_list|)
operator|+
literal|".  This is ok, we expect some"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted snapshot request: "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|ss
argument_list|)
argument_list|)
expr_stmt|;
name|toBeSubmitted
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|// build descriptions
name|SnapshotDescription
index|[]
name|descs
init|=
operator|new
name|SnapshotDescription
index|[
name|ssNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ssNum
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
name|STRING_TABLE_NAME
else|:
name|STRING_TABLE2_NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setName
argument_list|(
literal|"ss"
operator|+
name|i
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|descs
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// kick each off its own thread
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ssNum
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|SSRunnable
argument_list|(
name|descs
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait until all have been submitted
name|toBeSubmitted
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// loop until all are done.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|doneCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|ss
range|:
name|descs
control|)
block|{
try|try
block|{
if|if
condition|(
name|admin
operator|.
name|isSnapshotFinished
argument_list|(
name|ss
argument_list|)
condition|)
block|{
name|doneCount
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got an exception when checking for snapshot "
operator|+
name|ss
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|doneCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doneCount
operator|==
name|descs
operator|.
name|length
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// dump for debugging
name|logFSTree
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|taken
init|=
name|admin
operator|.
name|listSnapshots
argument_list|()
decl_stmt|;
name|int
name|takenSize
init|=
name|taken
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Taken "
operator|+
name|takenSize
operator|+
literal|" snapshots:  "
operator|+
name|taken
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We expect at least 1 request to be rejected because of we concurrently"
operator|+
literal|" issued many requests"
argument_list|,
name|takenSize
argument_list|<
name|ssNum
operator|&&
name|takenSize
argument_list|>
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that there's at least one snapshot per table
name|int
name|t1SnapshotsCount
init|=
literal|0
decl_stmt|;
name|int
name|t2SnapshotsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|ss
range|:
name|taken
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|STRING_TABLE_NAME
argument_list|)
condition|)
block|{
name|t1SnapshotsCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|STRING_TABLE2_NAME
argument_list|)
condition|)
block|{
name|t2SnapshotsCount
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"We expect at least 1 snapshot of table1 "
argument_list|,
name|t1SnapshotsCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We expect at least 1 snapshot of table2 "
argument_list|,
name|t2SnapshotsCount
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// delete snapshots so subsequent tests are clean.
for|for
control|(
name|SnapshotDescription
name|ss
range|:
name|taken
control|)
block|{
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|ss
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE2_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logFSTree
parameter_list|(
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|root
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForTableToBeOnline
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HRegionServer
name|rs
init|=
name|UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|onlineRegions
control|)
block|{
name|region
operator|.
name|waitForFlushesAndCompactions
argument_list|()
expr_stmt|;
block|}
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitRegionsAfterMerge
parameter_list|(
specifier|final
name|long
name|numRegionsAfterMerge
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HBaseAdmin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// Verify that there's one region less
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|admin
operator|.
name|getTableRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|numRegionsAfterMerge
condition|)
block|{
comment|// This may be flaky... if after 15sec the merge is not complete give up
comment|// it will fail in the assertEquals(numRegionsAfterMerge).
if|if
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|>
literal|15000
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|waitForTableToBeOnline
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|14
index|]
index|[]
decl_stmt|;
name|byte
index|[]
name|hex
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123456789abcde"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[]
block|{
name|hex
index|[
name|i
index|]
block|}
expr_stmt|;
block|}
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadData
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|,
name|int
name|rows
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rows
operator|>=
literal|16
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|k
range|:
literal|"0123456789abcdef"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|k
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|putData
argument_list|(
name|table
argument_list|,
name|families
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rows
operator|--
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|--
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rows
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|putData
argument_list|(
name|table
argument_list|,
name|families
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|TEST_QUAL
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRowCount
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|long
name|expectedRows
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRows
argument_list|,
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

