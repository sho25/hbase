begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|TestProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterProcedureScheduler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterProcedureScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MasterProcedureScheduler
name|queue
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|queue
operator|=
operator|new
name|MasterProcedureScheduler
argument_list|(
name|conf
argument_list|,
operator|new
name|TableLockManager
operator|.
name|NullTableLockManager
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"proc-queue expected to be empty"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|stop
argument_list|()
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify simple create/insert/fetch/delete of the table queue.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleTableOpsQueues
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_TABLES
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|NUM_ITEMS
init|=
literal|10
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_TABLES
condition|;
operator|++
name|i
control|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"test-%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// insert items
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|NUM_ITEMS
condition|;
operator|++
name|j
control|)
block|{
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
name|i
operator|*
literal|1000
operator|+
name|j
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|count
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|NUM_TABLES
operator|*
name|NUM_ITEMS
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|NUM_ITEMS
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_TABLES
condition|;
operator|++
name|i
control|)
block|{
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|proc
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
operator|(
operator|(
name|TestTableProcedure
operator|)
name|proc
operator|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|queue
operator|.
name|completionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|--
name|count
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|1000
operator|+
name|j
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_TABLES
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"test-%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TestTableProcedure
name|dummyProc
init|=
operator|new
name|TestTableProcedure
argument_list|(
literal|100
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|DELETE
argument_list|)
decl_stmt|;
comment|// complete the table deletion
name|assertTrue
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check that the table queue is not deletable until every procedure    * in-progress is completed (this is a special case for write-locks).    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteTableOperationsWithWriteLock
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
specifier|final
name|TestTableProcedure
name|dummyProc
init|=
operator|new
name|TestTableProcedure
argument_list|(
literal|100
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|DELETE
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// table can't be deleted because one item is in the queue
name|assertFalse
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch item and take a lock
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// take the xlock
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// table can't be deleted because we have the lock
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the xlock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// complete the table deletion
name|assertTrue
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the table queue is not deletable until every procedure    * in-progress is completed (this is a special case for read-locks).    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteTableOperationsWithReadLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nitems
init|=
literal|2
decl_stmt|;
specifier|final
name|TestTableProcedure
name|dummyProc
init|=
operator|new
name|TestTableProcedure
argument_list|(
literal|100
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|DELETE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nitems
condition|;
operator|++
name|i
control|)
block|{
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
name|i
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// table can't be deleted because one item is in the queue
name|assertFalse
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
name|Procedure
index|[]
name|procs
init|=
operator|new
name|Procedure
index|[
name|nitems
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nitems
condition|;
operator|++
name|i
control|)
block|{
comment|// fetch item and take a lock
name|Procedure
name|proc
init|=
name|procs
index|[
name|i
index|]
operator|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// take the rlock
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// table can't be deleted because we have locks and/or items in the queue
name|assertFalse
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nitems
condition|;
operator|++
name|i
control|)
block|{
comment|// table can't be deleted because we have locks
name|assertFalse
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the rlock
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|procs
index|[
name|i
index|]
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// there are no items and no lock in the queeu
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// complete the table deletion
name|assertTrue
argument_list|(
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|dummyProc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the correct logic of RWLocks on the queue    */
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRwLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|4
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|5
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 1st item and take the write lock
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 2nd item and verify that the lock can't be acquired
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release the write lock and acquire the read lock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Fetch the 2nd item and take the read lock
name|Procedure
name|rdProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rdProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|rdProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 3rd item and verify that the lock can't be acquired
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the rdlock of item 2 and take the wrlock for the 3d item
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|rdProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Fetch the 3rd item and take the write lock
name|Procedure
name|wrProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|wrProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch 4th item and verify that the lock can't be acquired
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release the write lock and acquire the read lock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|wrProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Fetch the 4th item and take the read lock
name|rdProc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rdProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|rdProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 4th item and take the read lock
name|Procedure
name|rdProc2
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rdProc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|rdProc2
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release 4th and 5th read-lock
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|rdProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|rdProc2
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// remove table queue
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"queue should be deleted"
argument_list|,
name|queue
operator|.
name|markTableAsDeleted
argument_list|(
name|tableName
argument_list|,
name|wrProc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyNamespaceRwLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsName1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|nsName2
init|=
literal|"ns2"
decl_stmt|;
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsName1
argument_list|,
literal|"testtb"
argument_list|)
decl_stmt|;
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsName2
argument_list|,
literal|"testtb"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestNamespaceProcedure
argument_list|(
literal|1
argument_list|,
name|nsName1
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName1
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|3
argument_list|,
name|tableName2
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestNamespaceProcedure
argument_list|(
literal|4
argument_list|,
name|nsName2
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 1st item and take the write lock
name|Procedure
name|procNs1
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procNs1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireNamespaceExclusiveLock
argument_list|(
name|procNs1
argument_list|,
name|nsName1
argument_list|)
argument_list|)
expr_stmt|;
comment|// System tables have 2 as default priority
name|Procedure
name|procNs2
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procNs2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireNamespaceExclusiveLock
argument_list|(
name|procNs2
argument_list|,
name|nsName2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseNamespaceExclusiveLock
argument_list|(
name|procNs2
argument_list|,
name|nsName2
argument_list|)
expr_stmt|;
name|queue
operator|.
name|yield
argument_list|(
name|procNs2
argument_list|)
expr_stmt|;
comment|// table on ns1 is locked, so we get table on ns2
name|procNs2
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|procNs2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|procNs2
argument_list|,
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// ns2 is not available (TODO we may avoid this one)
name|Procedure
name|procNs2b
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procNs2b
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|tryAcquireNamespaceExclusiveLock
argument_list|(
name|procNs2b
argument_list|,
name|nsName2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|yield
argument_list|(
name|procNs2b
argument_list|)
expr_stmt|;
comment|// release the ns1 lock
name|queue
operator|.
name|releaseNamespaceExclusiveLock
argument_list|(
name|procNs1
argument_list|,
name|nsName1
argument_list|)
expr_stmt|;
comment|// we are now able to execute table of ns1
name|long
name|procId
init|=
name|queue
operator|.
name|poll
argument_list|()
operator|.
name|getProcId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|procNs2
argument_list|,
name|tableName2
argument_list|)
expr_stmt|;
comment|// we are now able to execute ns2
name|procId
operator|=
name|queue
operator|.
name|poll
argument_list|()
operator|.
name|getProcId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyNamespaceXLock
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsName
init|=
literal|"ns1"
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsName
argument_list|,
literal|"testtb"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestNamespaceProcedure
argument_list|(
literal|1
argument_list|,
name|nsName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the ns item and take the xlock
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireNamespaceExclusiveLock
argument_list|(
name|proc
argument_list|,
name|nsName
argument_list|)
argument_list|)
expr_stmt|;
comment|// the table operation can't be executed because the ns is locked
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the ns lock
name|queue
operator|.
name|releaseNamespaceExclusiveLock
argument_list|(
name|proc
argument_list|,
name|nsName
argument_list|)
expr_stmt|;
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedZkLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestSharedZkLock"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MiniZooKeeperCluster
name|zkCluster
init|=
operator|new
name|MiniZooKeeperCluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|zkPort
init|=
name|zkCluster
operator|.
name|startup
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|,
literal|"localhost:"
operator|+
name|zkPort
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"testSchedWithZkLock"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ServerName
name|mockName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|60000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|MasterProcedureScheduler
name|procQueue
init|=
operator|new
name|MasterProcedureScheduler
argument_list|(
name|conf
argument_list|,
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|conf
argument_list|,
name|zkw
argument_list|,
name|mockName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
name|TestTableProcedure
name|procA
init|=
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
decl_stmt|;
name|TestTableProcedure
name|procB
init|=
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|procQueue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|procA
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procQueue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|procB
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|procQueue
operator|.
name|releaseTableSharedLock
argument_list|(
name|procA
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|procQueue
operator|.
name|releaseTableSharedLock
argument_list|(
name|procB
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXLockWaitingForExecutingSharedLockToRelease
parameter_list|()
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionA
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|ASSIGN
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|UNASSIGN
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 1st item and take the shared lock
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegion
argument_list|(
name|proc
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
comment|// the xlock operation in the queue can't be executed
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the shared lock
name|queue
operator|.
name|wakeRegion
argument_list|(
name|proc
argument_list|,
name|regionA
argument_list|)
expr_stmt|;
comment|// Fetch the 2nd item and take the xlock
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// everything is locked by the table operation
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the table xlock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// grab the last item in the queue
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// lock and unlock the region
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegion
argument_list|(
name|proc
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|wakeRegion
argument_list|(
name|proc
argument_list|,
name|regionA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRegionLocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionA
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionB
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionC
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|MERGE
argument_list|,
name|regionA
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|SPLIT
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|4
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|SPLIT
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestRegionProcedure
argument_list|(
literal|5
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|UNASSIGN
argument_list|,
name|regionC
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 1st item and take the write lock
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// everything is locked by the table operation
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the table lock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Fetch the 2nd item and the the lock on regionA and regionB
name|Procedure
name|mergeProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mergeProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|mergeProc
argument_list|,
name|tableName
argument_list|,
name|regionA
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 3rd item and the try to lock region A which will fail
comment|// because already locked. this procedure will go in waiting.
comment|// (this stuff will be explicit until we get rid of the zk-lock)
name|Procedure
name|procA
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|procA
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|procA
argument_list|,
name|tableName
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 4th item, same story as the 3rd
name|Procedure
name|procB
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procB
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|procB
argument_list|,
name|tableName
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 5th item, since it is a non-locked region we are able to execute it
name|Procedure
name|procC
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|procC
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|procC
argument_list|,
name|tableName
argument_list|,
name|regionC
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3rd and 4th are in the region suspended queue
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release region A-B from merge operation (procId=2)
name|queue
operator|.
name|wakeRegions
argument_list|(
name|mergeProc
argument_list|,
name|tableName
argument_list|,
name|regionA
argument_list|,
name|regionB
argument_list|)
expr_stmt|;
comment|// Fetch the 3rd item, now the lock on the region is available
name|procA
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|procA
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|procA
argument_list|,
name|tableName
argument_list|,
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 4th item, now the lock on the region is available
name|procB
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procB
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|procB
argument_list|,
name|tableName
argument_list|,
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the locks on the regions
name|queue
operator|.
name|wakeRegions
argument_list|(
name|procA
argument_list|,
name|tableName
argument_list|,
name|regionA
argument_list|)
expr_stmt|;
name|queue
operator|.
name|wakeRegions
argument_list|(
name|procB
argument_list|,
name|tableName
argument_list|,
name|regionB
argument_list|)
expr_stmt|;
name|queue
operator|.
name|wakeRegions
argument_list|(
name|procC
argument_list|,
name|tableName
argument_list|,
name|regionC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifySubProcRegionLocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testVerifySubProcRegionLocks"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionA
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionB
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionC
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|ENABLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch the 1st item from the queue, "the root procedure" and take the table lock
name|Procedure
name|rootProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rootProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|rootProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Execute the 1st step of the root-proc.
comment|// we should get 3 sub-proc back, one for each region.
comment|// (this step is done by the executor/rootProc, we are simulating it)
name|Procedure
index|[]
name|subProcs
init|=
operator|new
name|Procedure
index|[]
block|{
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|REGION_EDIT
argument_list|,
name|regionA
argument_list|)
block|,
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|REGION_EDIT
argument_list|,
name|regionB
argument_list|)
block|,
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|REGION_EDIT
argument_list|,
name|regionC
argument_list|)
block|,     }
decl_stmt|;
comment|// at this point the rootProc is going in a waiting state
comment|// and the sub-procedures will be added in the queue.
comment|// (this step is done by the executor, we are simulating it)
for|for
control|(
name|int
name|i
init|=
name|subProcs
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|queue
operator|.
name|addFront
argument_list|(
name|subProcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|subProcs
operator|.
name|length
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should be able to fetch and execute all the sub-procs,
comment|// since they are operating on different regions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subProcs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|TestRegionProcedure
name|regionProc
init|=
operator|(
name|TestRegionProcedure
operator|)
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|subProcs
index|[
name|i
index|]
operator|.
name|getProcId
argument_list|()
argument_list|,
name|regionProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|regionProc
argument_list|,
name|tableName
argument_list|,
name|regionProc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// nothing else in the queue
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release all the region locks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subProcs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|TestRegionProcedure
name|regionProc
init|=
operator|(
name|TestRegionProcedure
operator|)
name|subProcs
index|[
name|i
index|]
decl_stmt|;
name|queue
operator|.
name|wakeRegions
argument_list|(
name|regionProc
argument_list|,
name|tableName
argument_list|,
name|regionProc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// nothing else in the queue
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the table lock (for the root procedure)
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|rootProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendedProcedure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSuspendedProcedure"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// suspend
name|ProcedureEvent
name|event
init|=
operator|new
name|ProcedureEvent
argument_list|(
literal|"testSuspendedProcedureEvent"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|waitEvent
argument_list|(
name|event
argument_list|,
name|proc
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// resume
name|queue
operator|.
name|wakeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|HRegionInfo
index|[]
name|generateRegionInfo
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|HRegionInfo
index|[]
block|{
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
block|,
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
block|,
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
block|,     }
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentXLockAndChildrenSharedLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testParentXLockAndChildrenSharedLock"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
index|[]
name|regions
init|=
name|generateRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|TestRegionProcedure
index|[]
name|childProcs
init|=
operator|new
name|TestRegionProcedure
index|[
name|regions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|childProcs
index|[
name|i
index|]
operator|=
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
literal|2
operator|+
name|i
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|ASSIGN
argument_list|,
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|testInheritedXLockAndChildrenSharedLock
argument_list|(
name|tableName
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|CREATE
argument_list|)
argument_list|,
name|childProcs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootXLockAndChildrenSharedLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRootXLockAndChildrenSharedLock"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
index|[]
name|regions
init|=
name|generateRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|TestRegionProcedure
index|[]
name|childProcs
init|=
operator|new
name|TestRegionProcedure
index|[
name|regions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|childProcs
index|[
name|i
index|]
operator|=
operator|new
name|TestRegionProcedure
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
operator|+
name|i
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|ASSIGN
argument_list|,
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|testInheritedXLockAndChildrenSharedLock
argument_list|(
name|tableName
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|CREATE
argument_list|)
argument_list|,
name|childProcs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testInheritedXLockAndChildrenSharedLock
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TestTableProcedure
name|rootProc
parameter_list|,
specifier|final
name|TestRegionProcedure
index|[]
name|childProcs
parameter_list|)
throws|throws
name|Exception
block|{
name|queue
operator|.
name|addBack
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
comment|// fetch and acquire first xlock proc
name|Procedure
name|parentProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rootProc
argument_list|,
name|parentProc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|parentProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// add child procedure
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childProcs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|queue
operator|.
name|addFront
argument_list|(
name|childProcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// add another xlock procedure (no parent)
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|100
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch and execute child
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childProcs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|TestRegionProcedure
name|childProc
init|=
operator|(
name|TestRegionProcedure
operator|)
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetch children "
operator|+
name|childProc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|queue
operator|.
name|waitRegions
argument_list|(
name|childProc
argument_list|,
name|tableName
argument_list|,
name|childProc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|wakeRegions
argument_list|(
name|childProc
argument_list|,
name|tableName
argument_list|,
name|childProc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// nothing available, until xlock release
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// release xlock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|parentProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// fetch the other xlock proc
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentXLockAndChildrenXLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testParentXLockAndChildrenXLock"
argument_list|)
decl_stmt|;
name|testInheritedXLockAndChildrenXLock
argument_list|(
name|tableName
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootXLockAndChildrenXLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRootXLockAndChildrenXLock"
argument_list|)
decl_stmt|;
comment|// simulate 3 procedures: 1 (root), (2) child of root, (3) child of proc-2
name|testInheritedXLockAndChildrenXLock
argument_list|(
name|tableName
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|,
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testInheritedXLockAndChildrenXLock
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TestTableProcedure
name|rootProc
parameter_list|,
specifier|final
name|TestTableProcedure
name|childProc
parameter_list|)
throws|throws
name|Exception
block|{
name|queue
operator|.
name|addBack
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
comment|// fetch and acquire first xlock proc
name|Procedure
name|parentProc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rootProc
argument_list|,
name|parentProc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|parentProc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// add child procedure
name|queue
operator|.
name|addFront
argument_list|(
name|childProc
argument_list|)
expr_stmt|;
comment|// fetch the other xlock proc
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|childProc
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// release xlock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|parentProc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testYieldWithXLockHeld
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testYieldWithXLockHeld"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch from the queue and acquire xlock for the first proc
name|Procedure
name|proc
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing available, until xlock release
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// put the proc in the queue
name|queue
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
comment|// fetch from the queue, it should be the one with just added back
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the xlock
name|queue
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|proc
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|proc
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testYieldWithSharedLockHeld
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testYieldWithSharedLockHeld"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|1
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|2
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addBack
argument_list|(
operator|new
name|TestTableProcedure
argument_list|(
literal|3
argument_list|,
name|tableName
argument_list|,
name|TableProcedureInterface
operator|.
name|TableOperationType
operator|.
name|EDIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch and acquire the first shared-lock
name|Procedure
name|proc1
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|proc1
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch and acquire the second shared-lock
name|Procedure
name|proc2
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|queue
operator|.
name|tryAcquireTableSharedLock
argument_list|(
name|proc2
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing available, until xlock release
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// put the procs back in the queue
name|queue
operator|.
name|yield
argument_list|(
name|proc2
argument_list|)
expr_stmt|;
name|queue
operator|.
name|yield
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
comment|// fetch from the queue, it should fetch the ones with just added back
name|proc1
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|proc2
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the xlock
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|proc1
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|queue
operator|.
name|releaseTableSharedLock
argument_list|(
name|proc2
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Procedure
name|proc3
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestTableProcedure
extends|extends
name|TestProcedure
implements|implements
name|TableProcedureInterface
block|{
specifier|private
specifier|final
name|TableOperationType
name|opType
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|public
name|TestTableProcedure
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"recovery should not be triggered here"
argument_list|)
throw|;
block|}
specifier|public
name|TestTableProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|)
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestTableProcedure
parameter_list|(
name|long
name|parentProcId
parameter_list|,
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|)
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
name|parentProcId
argument_list|,
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestTableProcedure
parameter_list|(
name|long
name|rootProcId
parameter_list|,
name|long
name|parentProcId
parameter_list|,
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|)
block|{
name|super
argument_list|(
name|procId
argument_list|,
name|parentProcId
argument_list|,
name|rootProcId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|opType
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(table="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestTableProcedureWithEvent
extends|extends
name|TestTableProcedure
block|{
specifier|private
specifier|final
name|ProcedureEvent
name|event
decl_stmt|;
specifier|public
name|TestTableProcedureWithEvent
parameter_list|(
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|)
block|{
name|super
argument_list|(
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|(
name|tableName
operator|+
literal|" procId="
operator|+
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureEvent
name|getEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestRegionProcedure
extends|extends
name|TestTableProcedure
block|{
specifier|private
specifier|final
name|HRegionInfo
index|[]
name|regionInfo
decl_stmt|;
specifier|public
name|TestRegionProcedure
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"recovery should not be triggered here"
argument_list|)
throw|;
block|}
specifier|public
name|TestRegionProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|,
name|HRegionInfo
modifier|...
name|regionInfo
parameter_list|)
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestRegionProcedure
parameter_list|(
name|long
name|parentProcId
parameter_list|,
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|,
name|HRegionInfo
modifier|...
name|regionInfo
parameter_list|)
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
name|parentProcId
argument_list|,
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestRegionProcedure
parameter_list|(
name|long
name|rootProcId
parameter_list|,
name|long
name|parentProcId
parameter_list|,
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|,
name|HRegionInfo
modifier|...
name|regionInfo
parameter_list|)
block|{
name|super
argument_list|(
name|rootProcId
argument_list|,
name|parentProcId
argument_list|,
name|procId
argument_list|,
name|tableName
argument_list|,
name|opType
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
specifier|public
name|HRegionInfo
index|[]
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(regions="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestNamespaceProcedure
extends|extends
name|TestProcedure
implements|implements
name|TableProcedureInterface
block|{
specifier|private
specifier|final
name|TableOperationType
name|opType
decl_stmt|;
specifier|private
specifier|final
name|String
name|nsName
decl_stmt|;
specifier|public
name|TestNamespaceProcedure
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"recovery should not be triggered here"
argument_list|)
throw|;
block|}
specifier|public
name|TestNamespaceProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|String
name|nsName
parameter_list|,
name|TableOperationType
name|opType
parameter_list|)
block|{
name|super
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|this
operator|.
name|nsName
operator|=
name|nsName
expr_stmt|;
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|opType
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(ns="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nsName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

