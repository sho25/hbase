begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_comment
comment|/**  * Tests that we fail fast when hostname resolution is not working and do not cache  * unresolved InetSocketAddresses.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestConnectionImplementation
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|testUtil
decl_stmt|;
specifier|private
specifier|static
name|ConnectionImplementation
name|conn
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|testUtil
operator|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
expr_stmt|;
name|testUtil
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|conn
operator|=
operator|(
name|ConnectionImplementation
operator|)
name|testUtil
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|testUtil
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownHostException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAdminBadHostname
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that we can get an instance with the cluster hostname
name|ServerName
name|master
init|=
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|getAdmin
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Obtaining admin to the cluster master should have succeeded"
argument_list|)
expr_stmt|;
block|}
comment|// test that we fail to get a client to an unresolvable hostname, which
comment|// means it won't be cached
name|ServerName
name|badHost
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"unknownhost.example.com:"
operator|+
name|HConstants
operator|.
name|DEFAULT_MASTER_PORT
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|conn
operator|.
name|getAdmin
argument_list|(
name|badHost
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Obtaining admin to unresolvable hostname should have failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownHostException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetClientBadHostname
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that we can get an instance with the cluster hostname
name|ServerName
name|rs
init|=
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|getClient
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Obtaining client to the cluster regionserver should have succeeded"
argument_list|)
expr_stmt|;
block|}
comment|// test that we fail to get a client to an unresolvable hostname, which
comment|// means it won't be cached
name|ServerName
name|badHost
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"unknownhost.example.com:"
operator|+
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_PORT
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|conn
operator|.
name|getAdmin
argument_list|(
name|badHost
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Obtaining client to unresolvable hostname should have failed"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

