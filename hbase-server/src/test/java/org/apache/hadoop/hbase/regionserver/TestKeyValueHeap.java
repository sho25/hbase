begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionBackedScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestKeyValueHeap
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|PRINT
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|row1
decl_stmt|;
specifier|private
name|byte
index|[]
name|fam1
decl_stmt|;
specifier|private
name|byte
index|[]
name|col1
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|byte
index|[]
name|row2
decl_stmt|;
specifier|private
name|byte
index|[]
name|fam2
decl_stmt|;
specifier|private
name|byte
index|[]
name|col2
decl_stmt|;
specifier|private
name|byte
index|[]
name|col3
decl_stmt|;
specifier|private
name|byte
index|[]
name|col4
decl_stmt|;
specifier|private
name|byte
index|[]
name|col5
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|data
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|row1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
expr_stmt|;
name|fam1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
expr_stmt|;
name|col1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|row2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
expr_stmt|;
name|fam2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
expr_stmt|;
name|col2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|col3
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|col4
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4"
argument_list|)
expr_stmt|;
name|col5
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSorted
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Cases that need to be checked are:
comment|//1. The "smallest" KeyValue is in the same scanners as current
comment|//2. Current scanner gets empty
name|List
argument_list|<
name|Cell
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|kvh
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|kvh
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PRINT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nactual   "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Check if result is sorted according to Comparator
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ret
init|=
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Cases:
comment|//1. Seek KeyValue that is not in scanner
comment|//2. Check that smallest that is returned from a seek is correct
name|List
argument_list|<
name|Cell
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|KeyValue
name|seekKv
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|kvh
operator|.
name|seek
argument_list|(
name|seekKv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|kvh
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PRINT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nactual   "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerLeak
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test for unclosed scanners (HBASE-1927)
name|List
argument_list|<
name|Cell
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Scanner
name|s1
init|=
operator|new
name|Scanner
argument_list|(
name|l1
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Scanner
name|s2
init|=
operator|new
name|Scanner
argument_list|(
name|l2
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Scanner
name|s3
init|=
operator|new
name|Scanner
argument_list|(
name|l3
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l4
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|Scanner
name|s4
init|=
operator|new
name|Scanner
argument_list|(
name|l4
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s4
argument_list|)
expr_stmt|;
comment|//Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
name|kvh
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
comment|// Once the internal scanners go out of Cells, those will be removed from KVHeap's priority
comment|// queue and added to a Set for lazy close. The actual close will happen only on KVHeap#close()
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvh
operator|.
name|scannersForDelayedClose
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvh
operator|.
name|scannersForDelayedClose
operator|.
name|contains
argument_list|(
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvh
operator|.
name|scannersForDelayedClose
operator|.
name|contains
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvh
operator|.
name|scannersForDelayedClose
operator|.
name|contains
argument_list|(
name|s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvh
operator|.
name|scannersForDelayedClose
operator|.
name|contains
argument_list|(
name|s4
argument_list|)
argument_list|)
expr_stmt|;
name|kvh
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|Scanner
operator|)
name|scanner
operator|)
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerException
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test for NPE issue when exception happens in scanners (HBASE-13835)
name|List
argument_list|<
name|Cell
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|SeekScanner
name|s1
init|=
operator|new
name|SeekScanner
argument_list|(
name|l1
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|SeekScanner
name|s2
init|=
operator|new
name|SeekScanner
argument_list|(
name|l2
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|SeekScanner
name|s3
init|=
operator|new
name|SeekScanner
argument_list|(
name|l3
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l4
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|SeekScanner
name|s4
init|=
operator|new
name|SeekScanner
argument_list|(
name|l4
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|s4
argument_list|)
expr_stmt|;
comment|// Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
operator|(
operator|(
name|SeekScanner
operator|)
name|scanner
operator|)
operator|.
name|setRealSeekDone
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|kvh
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
comment|// The pollRealKV should throw IOE.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|kvh
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// It implies there is no NPE thrown from kvh.close() if getting here
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
comment|// Verify that close is called and only called once for each scanner
name|assertTrue
argument_list|(
operator|(
operator|(
name|SeekScanner
operator|)
name|scanner
operator|)
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|SeekScanner
operator|)
name|scanner
operator|)
operator|.
name|getClosedNum
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Scanner
extends|extends
name|CollectionBackedScanner
block|{
specifier|private
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|iter
decl_stmt|;
specifier|private
name|Cell
name|current
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|public
name|Scanner
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|list
parameter_list|)
block|{
name|super
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SeekScanner
extends|extends
name|Scanner
block|{
specifier|private
name|int
name|closedNum
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|realSeekDone
init|=
literal|true
decl_stmt|;
specifier|public
name|SeekScanner
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|list
parameter_list|)
block|{
name|super
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closedNum
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getClosedNum
parameter_list|()
block|{
return|return
name|closedNum
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|realSeekDone
parameter_list|()
block|{
return|return
name|realSeekDone
return|;
block|}
specifier|public
name|void
name|setRealSeekDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|realSeekDone
operator|=
name|done
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enforceSeek
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"enforceSeek must not be called on a "
operator|+
literal|"non-lazy scanner"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

