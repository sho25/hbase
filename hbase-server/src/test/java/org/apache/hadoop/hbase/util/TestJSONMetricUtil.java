begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestJSONMetricUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestJSONMetricUtil
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBuildHashtable
parameter_list|()
block|{
name|String
index|[]
name|keys
init|=
block|{
literal|"type"
block|,
literal|"name"
block|}
decl_stmt|;
name|String
index|[]
name|emptyKey
init|=
block|{}
decl_stmt|;
name|String
index|[]
name|values
init|=
block|{
literal|"MemoryPool"
block|,
literal|"Par Eden Space"
block|}
decl_stmt|;
name|String
index|[]
name|values2
init|=
block|{
literal|"MemoryPool"
block|,
literal|"Par Eden Space"
block|,
literal|"Test"
block|}
decl_stmt|;
name|String
index|[]
name|emptyValue
init|=
block|{}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|keys
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|keys
argument_list|,
name|values2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|keys
argument_list|,
name|emptyValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|emptyKey
argument_list|,
name|values2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|emptyKey
argument_list|,
name|emptyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSearchJson
parameter_list|()
throws|throws
name|JsonProcessingException
throws|,
name|IOException
block|{
name|String
name|jsonString
init|=
literal|"{\"test\":[{\"data1\":100,\"data2\":\"hello\",\"data3\": [1 , 2 , 3]}, "
operator|+
literal|"{\"data4\":0}]}"
decl_stmt|;
name|JsonNode
name|node
init|=
name|JSONMetricUtil
operator|.
name|mappStringToJsonNode
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|JsonNode
name|r1
init|=
name|JSONMetricUtil
operator|.
name|searchJson
argument_list|(
name|node
argument_list|,
literal|"data1"
argument_list|)
decl_stmt|;
name|JsonNode
name|r2
init|=
name|JSONMetricUtil
operator|.
name|searchJson
argument_list|(
name|node
argument_list|,
literal|"data2"
argument_list|)
decl_stmt|;
name|JsonNode
name|r3
init|=
name|JSONMetricUtil
operator|.
name|searchJson
argument_list|(
name|node
argument_list|,
literal|"data3"
argument_list|)
decl_stmt|;
name|JsonNode
name|r4
init|=
name|JSONMetricUtil
operator|.
name|searchJson
argument_list|(
name|node
argument_list|,
literal|"data4"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r1
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|r2
operator|.
name|textValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r4
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildObjectName
parameter_list|()
throws|throws
name|MalformedObjectNameException
block|{
name|String
index|[]
name|keys
init|=
block|{
literal|"type"
block|,
literal|"name"
block|}
decl_stmt|;
name|String
index|[]
name|values
init|=
block|{
literal|"MemoryPool"
block|,
literal|"Par Eden Space"
block|}
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|JSONMetricUtil
operator|.
name|buldKeyValueTable
argument_list|(
name|keys
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|ObjectName
name|testObject
init|=
name|JSONMetricUtil
operator|.
name|buildObjectName
argument_list|(
name|JSONMetricUtil
operator|.
name|JAVA_LANG_DOMAIN
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testObject
operator|.
name|getDomain
argument_list|()
argument_list|,
name|JSONMetricUtil
operator|.
name|JAVA_LANG_DOMAIN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testObject
operator|.
name|getKeyPropertyList
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLastGCInfo
parameter_list|()
block|{
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|bean
range|:
name|gcBeans
control|)
block|{
name|ObjectName
name|on
init|=
name|bean
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|JSONMetricUtil
operator|.
name|getValueFromMBean
argument_list|(
name|on
argument_list|,
literal|"LastGcInfo"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Collector Info: "
operator|+
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|instanceof
name|CompositeData
condition|)
block|{
name|CompositeData
name|cds
init|=
operator|(
name|CompositeData
operator|)
name|value
decl_stmt|;
name|assertNotNull
argument_list|(
name|cds
operator|.
name|get
argument_list|(
literal|"duration"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

