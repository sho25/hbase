begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TierCompactionManager
extends|extends
name|CompactionManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TierCompactionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
index|[]
name|endInTier
decl_stmt|;
specifier|private
name|int
index|[]
name|tierOf
decl_stmt|;
specifier|private
name|TierCompactionConfiguration
name|tierConf
decl_stmt|;
name|TierCompactionManager
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|comConf
operator|=
operator|new
name|TierCompactionConfiguration
argument_list|(
name|configuration
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|tierConf
operator|=
operator|(
name|TierCompactionConfiguration
operator|)
name|comConf
expr_stmt|;
block|}
comment|/**    * @param candidates pre-filtrate    * @return filtered subset    * -- Tier Based minor compaction selection algorithm: Choose CompactSelection from candidates --    *<p/>    * First exclude bulk-load files if indicated in configuration.    * Arrange files from oldest to newest then select an appropriate ['start','end') pair    * try 'start' from oldest to newest (smallest to largest fileIndex)    * for each value, identify the 'end' fileIndex    * stop when the range ['start','end') is an admissible compaction    *<p/>    * Notes:    *<p/>    * a compaction is admissible if    * - file fileSize[start] is at most maxCompactSize AND    * - number of files is at least currentTier.minFilesToCompact AND    * - (fileSize[start] is at most ratio times the rest of the files in the compaction OR    * - fileSize[start] is at most minCompactSize)    *<p/>    * end is endInTier[tierOf[start].endingInclusionTier]    * By default currentTier.endingIndexForTier = currentTier, so in the default    * case 'end' is always 1 + the last fileIndex in currentTier, making sure    * files from different tiers are never selected together in the default case    * normal skew:    *    *         older ----> newer (increasing seqID, increasing minFlushTime)    *    * Tier 2  |  Tier 1   |  Tier 0    *        |          |    *     _  |          |    *    | | |  _       |    *    | | | | |   _  |    *  --|-|-|-|-|- |-|-|--_-------_-------  minCompactSize    *    | | | | |  | | | | |  _  | |    *    | | | | |  | | | | | | | | |    *    | | | | |  | | | | | | | | |    */
annotation|@
name|Override
name|CompactSelection
name|applyCompactionPolicy
parameter_list|(
name|CompactSelection
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we're doing a minor compaction, let's see what files are applicable
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
comment|// skip selection algorithm if we don't have enough files
if|if
condition|(
name|candidates
operator|.
name|getFilesToCompact
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|candidates
operator|.
name|emptyFileList
argument_list|()
expr_stmt|;
return|return
name|candidates
return|;
block|}
comment|// get store file sizes for incremental compacting selection.
name|int
name|countOfFiles
init|=
name|candidates
operator|.
name|getFilesToCompact
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
index|[]
name|fileSizes
init|=
operator|new
name|long
index|[
name|countOfFiles
index|]
decl_stmt|;
name|StoreFile
name|file
decl_stmt|;
name|long
index|[]
name|sumSize
init|=
operator|new
name|long
index|[
name|countOfFiles
operator|+
literal|1
index|]
decl_stmt|;
name|sumSize
index|[
name|countOfFiles
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|countOfFiles
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|file
operator|=
name|candidates
operator|.
name|getFilesToCompact
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fileSizes
index|[
name|i
index|]
operator|=
name|file
operator|.
name|getReader
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// calculate the sum of fileSizes[i,i+maxFilesToCompact-1) for algo
name|sumSize
index|[
name|i
index|]
operator|=
name|fileSizes
index|[
name|i
index|]
operator|+
name|sumSize
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
comment|/**      * divide into tiers:      * assign tierOf[fileIndex] = tierIndex      * assign endInTier[tierIndex] = 1 + index of the last file in tierIndex      */
comment|// Backward compatibility - if files with indices< i don't have minFlushTime field, then
comment|//    all of them get tierOf[i]. If no file has minFlushTime all gets tier zero.
name|int
name|numTiers
init|=
name|tierConf
operator|.
name|getNumCompactionTiers
argument_list|()
decl_stmt|;
name|TierCompactionConfiguration
operator|.
name|CompactionTier
name|tier
decl_stmt|;
name|tierOf
operator|=
operator|new
name|int
index|[
name|countOfFiles
index|]
expr_stmt|;
name|endInTier
operator|=
operator|new
name|int
index|[
name|numTiers
operator|+
literal|1
index|]
expr_stmt|;
name|endInTier
index|[
name|numTiers
index|]
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Applying TierCompactionPolicy with "
operator|+
name|countOfFiles
operator|+
literal|" files"
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
init|=
name|countOfFiles
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numTiers
condition|;
name|i
operator|++
control|)
block|{
name|tier
operator|=
name|tierConf
operator|.
name|getCompactionTier
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|endInTier
index|[
name|i
index|]
operator|=
name|j
expr_stmt|;
while|while
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|file
operator|=
name|candidates
operator|.
name|getFilesToCompact
argument_list|()
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInTier
argument_list|(
name|file
argument_list|,
name|tier
argument_list|)
condition|)
block|{
break|break;
block|}
name|j
operator|--
expr_stmt|;
name|tierOf
index|[
name|j
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|long
name|restSize
decl_stmt|;
name|double
name|ratio
decl_stmt|;
comment|//Main algorithm
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|countOfFiles
condition|;
name|j
operator|++
control|)
block|{
name|start
operator|=
name|next
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|tier
operator|=
name|tierConf
operator|.
name|getCompactionTier
argument_list|(
name|tierOf
index|[
name|start
index|]
argument_list|)
expr_stmt|;
name|end
operator|=
name|endInTier
index|[
name|tier
operator|.
name|getEndingIndexForTier
argument_list|()
index|]
expr_stmt|;
name|restSize
operator|=
name|sumSize
index|[
name|start
operator|+
literal|1
index|]
operator|-
name|sumSize
index|[
name|end
index|]
expr_stmt|;
name|ratio
operator|=
name|tier
operator|.
name|getCompactionRatio
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSizes
index|[
name|start
index|]
operator|<=
name|tierConf
operator|.
name|getMaxCompactSize
argument_list|()
operator|&&
name|end
operator|-
name|start
operator|>=
name|tier
operator|.
name|getMinFilesToCompact
argument_list|()
operator|&&
operator|(
name|fileSizes
index|[
name|start
index|]
operator|<=
name|tierConf
operator|.
name|getMinCompactSize
argument_list|()
operator|||
operator|(
name|fileSizes
index|[
name|start
index|]
operator|<=
name|restSize
operator|*
name|ratio
operator|)
operator|)
condition|)
block|{
break|break;
block|}
block|}
name|String
name|tab
init|=
literal|"    "
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numTiers
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tier "
operator|+
name|i
operator|+
literal|" : "
operator|+
name|tierConf
operator|.
name|getCompactionTier
argument_list|(
name|i
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endInTier
index|[
name|i
index|]
operator|==
name|endInTier
index|[
name|i
operator|+
literal|1
index|]
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tab
operator|+
literal|"No file is assigned to this tier."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tab
operator|+
operator|(
name|endInTier
index|[
name|i
index|]
operator|-
name|endInTier
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|+
literal|" file(s) are assigned to this tier with serial number(s) "
operator|+
name|endInTier
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|" to "
operator|+
operator|(
name|endInTier
index|[
name|i
index|]
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|j
operator|=
name|endInTier
index|[
name|i
operator|+
literal|1
index|]
init|;
name|j
operator|<
name|endInTier
index|[
name|i
index|]
condition|;
name|j
operator|++
control|)
block|{
name|file
operator|=
name|candidates
operator|.
name|getFilesToCompact
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|tab
operator|+
name|tab
operator|+
literal|"SeqID = "
operator|+
name|file
operator|.
name|getMaxSequenceId
argument_list|()
operator|+
literal|", Age = "
operator|+
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|file
operator|.
name|getMinFlushTime
argument_list|()
argument_list|)
operator|+
literal|", Size = "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|fileSizes
index|[
name|j
index|]
argument_list|)
operator|+
literal|", Path = "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|start
operator|<
name|countOfFiles
condition|)
block|{
name|end
operator|=
name|Math
operator|.
name|min
argument_list|(
name|end
argument_list|,
name|start
operator|+
name|tierConf
operator|.
name|getCompactionTier
argument_list|(
name|tierOf
index|[
name|start
index|]
argument_list|)
operator|.
name|getMaxFilesToCompact
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|String
name|strTier
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|tierOf
index|[
name|start
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tierOf
index|[
name|end
operator|-
literal|1
index|]
operator|!=
name|tierOf
index|[
name|start
index|]
condition|)
block|{
name|strTier
operator|+=
literal|" to "
operator|+
name|tierOf
index|[
name|end
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Tier Based compaction algorithm has selected "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" files from tier "
operator|+
name|strTier
operator|+
literal|" out of "
operator|+
name|countOfFiles
operator|+
literal|" candidates"
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|=
name|candidates
operator|.
name|getSubList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|candidates
return|;
block|}
specifier|private
name|boolean
name|isInTier
parameter_list|(
name|StoreFile
name|file
parameter_list|,
name|TierCompactionConfiguration
operator|.
name|CompactionTier
name|tier
parameter_list|)
block|{
return|return
name|file
operator|.
name|getReader
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
name|tier
operator|.
name|getMaxSize
argument_list|()
operator|&&
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|file
operator|.
name|getMinFlushTime
argument_list|()
operator|<=
name|tier
operator|.
name|getMaxAgeInDisk
argument_list|()
return|;
block|}
comment|/**    * This function iterates over the start values in order.    * Whenever an admissible compaction is found, we return the selection.    * Hence the order is important if there are more than one admissible compaction.    * @param start current Value    * @return next Value    */
specifier|private
name|int
name|next
parameter_list|(
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|tierConf
operator|.
name|isRecentFirstOrder
argument_list|()
condition|)
block|{
return|return
name|backNext
argument_list|(
name|start
argument_list|)
return|;
block|}
return|return
name|fwdNext
argument_list|(
name|start
argument_list|)
return|;
block|}
comment|/**    * This function iterates over the start values in newer-first order of tiers,    * but older-first order of files within a tier.    * For example, suppose the tiers are:    * Tier 3 - files 0,1,2    * Tier 2 - files 3,4    * Tier 1 - no files    * Tier 0 - files 5,6,7    * Then the order of 'start' files will be:    * 5,6,7,3,4,0,1,2    * @param start current Value    * @return next Value    */
specifier|private
name|int
name|backNext
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|int
name|tier
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
literal|1
condition|)
block|{
while|while
condition|(
name|endInTier
index|[
name|tier
index|]
operator|>=
name|endInTier
index|[
literal|0
index|]
condition|)
block|{
name|tier
operator|++
expr_stmt|;
block|}
return|return
name|endInTier
index|[
name|tier
index|]
return|;
block|}
name|tier
operator|=
name|tierOf
index|[
name|start
index|]
expr_stmt|;
if|if
condition|(
name|endInTier
index|[
name|tier
index|]
operator|==
name|start
operator|+
literal|1
condition|)
block|{
name|tier
operator|++
expr_stmt|;
name|start
operator|=
name|endInTier
index|[
name|tier
index|]
expr_stmt|;
while|while
condition|(
name|endInTier
index|[
name|tier
index|]
operator|>=
name|start
condition|)
block|{
name|tier
operator|++
expr_stmt|;
block|}
return|return
name|endInTier
index|[
name|tier
index|]
return|;
block|}
return|return
name|start
operator|+
literal|1
return|;
block|}
comment|/**    * This function iterates over the start values in older-first order of files.    * @param start current Value    * @return next Value    */
specifier|private
name|int
name|fwdNext
parameter_list|(
name|int
name|start
parameter_list|)
block|{
return|return
name|start
operator|+
literal|1
return|;
block|}
block|}
end_class

end_unit

