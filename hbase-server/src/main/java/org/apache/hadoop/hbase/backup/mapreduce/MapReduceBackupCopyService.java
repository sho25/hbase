begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupCopyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ExportSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCpOptions
import|;
end_import

begin_comment
comment|/**  * Copier for backup operation. Basically, there are 2 types of copy. One is copying from snapshot,  * which bases on extending ExportSnapshot's function with copy progress reporting to ZooKeeper  * implementation. The other is copying for incremental log files, which bases on extending   * DistCp's function with copy progress reporting to ZooKeeper implementation.  *  * For now this is only a wrapper. The other features such as progress and increment backup will be  * implemented in future jira  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MapReduceBackupCopyService
implements|implements
name|BackupCopyService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapReduceBackupCopyService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// private static final long BYTES_PER_MAP = 2 * 256 * 1024 * 1024;
comment|// Accumulated progress within the whole backup process for the copy operation
specifier|private
name|float
name|progressDone
init|=
literal|0.1f
decl_stmt|;
specifier|private
name|long
name|bytesCopied
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|float
name|INIT_PROGRESS
init|=
literal|0.1f
decl_stmt|;
comment|// The percentage of the current copy task within the whole task if multiple time copies are
comment|// needed. The default value is 100%, which means only 1 copy task for the whole.
specifier|private
name|float
name|subTaskPercntgInWholeTask
init|=
literal|1f
decl_stmt|;
specifier|public
name|MapReduceBackupCopyService
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Get the current copy task percentage within the whole task if multiple copies are needed.    * @return the current copy task percentage    */
specifier|public
name|float
name|getSubTaskPercntgInWholeTask
parameter_list|()
block|{
return|return
name|subTaskPercntgInWholeTask
return|;
block|}
comment|/**    * Set the current copy task percentage within the whole task if multiple copies are needed. Must    * be called before calling    * {@link #copy(BackupHandler, Configuration, Type, String[])}    * @param subTaskPercntgInWholeTask The percentage of the copy subtask    */
specifier|public
name|void
name|setSubTaskPercntgInWholeTask
parameter_list|(
name|float
name|subTaskPercntgInWholeTask
parameter_list|)
block|{
name|this
operator|.
name|subTaskPercntgInWholeTask
operator|=
name|subTaskPercntgInWholeTask
expr_stmt|;
block|}
class|class
name|SnapshotCopy
extends|extends
name|ExportSnapshot
block|{
specifier|private
name|BackupHandler
name|backupHandler
decl_stmt|;
specifier|private
name|String
name|table
decl_stmt|;
specifier|public
name|SnapshotCopy
parameter_list|(
name|BackupHandler
name|backupHandler
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|backupHandler
operator|=
name|backupHandler
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|BackupHandler
name|getBackupHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|backupHandler
return|;
block|}
specifier|public
name|String
name|getTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|table
return|;
block|}
block|}
comment|// Extends DistCp for progress updating to hbase:backup
comment|// during backup. Using DistCpV2 (MAPREDUCE-2765).
comment|// Simply extend it and override execute() method to get the
comment|// Job reference for progress updating.
comment|// Only the argument "src1, [src2, [...]] dst" is supported,
comment|// no more DistCp options.
class|class
name|BackupDistCp
extends|extends
name|DistCp
block|{
specifier|private
name|BackupHandler
name|backupHandler
decl_stmt|;
specifier|public
name|BackupDistCp
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DistCpOptions
name|options
parameter_list|,
name|BackupHandler
name|backupHandler
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupHandler
operator|=
name|backupHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Job
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// reflection preparation for private methods and fields
name|Class
argument_list|<
name|?
argument_list|>
name|classDistCp
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|DistCp
operator|.
name|class
decl_stmt|;
name|Method
name|methodCreateMetaFolderPath
init|=
name|classDistCp
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createMetaFolderPath"
argument_list|)
decl_stmt|;
name|Method
name|methodCreateJob
init|=
name|classDistCp
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createJob"
argument_list|)
decl_stmt|;
name|Method
name|methodCreateInputFileListing
init|=
name|classDistCp
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createInputFileListing"
argument_list|,
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|methodCleanup
init|=
name|classDistCp
operator|.
name|getDeclaredMethod
argument_list|(
literal|"cleanup"
argument_list|)
decl_stmt|;
name|Field
name|fieldInputOptions
init|=
name|classDistCp
operator|.
name|getDeclaredField
argument_list|(
literal|"inputOptions"
argument_list|)
decl_stmt|;
name|Field
name|fieldMetaFolder
init|=
name|classDistCp
operator|.
name|getDeclaredField
argument_list|(
literal|"metaFolder"
argument_list|)
decl_stmt|;
name|Field
name|fieldJobFS
init|=
name|classDistCp
operator|.
name|getDeclaredField
argument_list|(
literal|"jobFS"
argument_list|)
decl_stmt|;
name|Field
name|fieldSubmitted
init|=
name|classDistCp
operator|.
name|getDeclaredField
argument_list|(
literal|"submitted"
argument_list|)
decl_stmt|;
name|methodCreateMetaFolderPath
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|methodCreateJob
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|methodCreateInputFileListing
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|methodCleanup
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldInputOptions
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldMetaFolder
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldJobFS
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldSubmitted
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// execute() logic starts here
assert|assert
name|fieldInputOptions
operator|.
name|get
argument_list|(
name|this
argument_list|)
operator|!=
literal|null
assert|;
assert|assert
name|getConf
argument_list|()
operator|!=
literal|null
assert|;
name|Job
name|job
init|=
literal|null
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Don't cleanup while we are setting up.
name|fieldMetaFolder
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|methodCreateMetaFolderPath
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|fieldJobFS
operator|.
name|set
argument_list|(
name|this
argument_list|,
operator|(
operator|(
name|Path
operator|)
name|fieldMetaFolder
operator|.
name|get
argument_list|(
name|this
argument_list|)
operator|)
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|=
operator|(
name|Job
operator|)
name|methodCreateJob
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|methodCreateInputFileListing
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// Get the total length of the source files
name|List
argument_list|<
name|Path
argument_list|>
name|srcs
init|=
operator|(
operator|(
name|DistCpOptions
operator|)
name|fieldInputOptions
operator|.
name|get
argument_list|(
name|this
argument_list|)
operator|)
operator|.
name|getSourcePaths
argument_list|()
decl_stmt|;
name|long
name|totalSrcLgth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|aSrc
range|:
name|srcs
control|)
block|{
name|totalSrcLgth
operator|+=
name|BackupUtil
operator|.
name|getFilesLength
argument_list|(
name|aSrc
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|aSrc
argument_list|)
expr_stmt|;
block|}
comment|// submit the copy job
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|fieldSubmitted
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// after submit the MR job, set its handler in backup handler for cancel process
comment|// this.backupHandler.copyJob = job;
comment|// Update the copy progress to ZK every 0.5s if progress value changed
name|int
name|progressReportFreq
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.backup.progressreport.frequency"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|float
name|lastProgress
init|=
name|progressDone
decl_stmt|;
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|float
name|newProgress
init|=
name|progressDone
operator|+
name|job
operator|.
name|mapProgress
argument_list|()
operator|*
name|subTaskPercntgInWholeTask
operator|*
operator|(
literal|1
operator|-
name|INIT_PROGRESS
operator|)
decl_stmt|;
if|if
condition|(
name|newProgress
operator|>
name|lastProgress
condition|)
block|{
name|BigDecimal
name|progressData
init|=
operator|new
name|BigDecimal
argument_list|(
name|newProgress
operator|*
literal|100
argument_list|)
operator|.
name|setScale
argument_list|(
literal|1
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
decl_stmt|;
name|String
name|newProgressStr
init|=
name|progressData
operator|+
literal|"%"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Progress: "
operator|+
name|newProgressStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupHandler
operator|.
name|updateProgress
argument_list|(
name|newProgressStr
argument_list|,
name|bytesCopied
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup progress data updated to hbase:backup: \"Progress: "
operator|+
name|newProgressStr
operator|+
literal|".\""
argument_list|)
expr_stmt|;
name|lastProgress
operator|=
name|newProgress
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|progressReportFreq
argument_list|)
expr_stmt|;
block|}
comment|// update the progress data after copy job complete
name|float
name|newProgress
init|=
name|progressDone
operator|+
name|job
operator|.
name|mapProgress
argument_list|()
operator|*
name|subTaskPercntgInWholeTask
operator|*
operator|(
literal|1
operator|-
name|INIT_PROGRESS
operator|)
decl_stmt|;
name|BigDecimal
name|progressData
init|=
operator|new
name|BigDecimal
argument_list|(
name|newProgress
operator|*
literal|100
argument_list|)
operator|.
name|setScale
argument_list|(
literal|1
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
decl_stmt|;
name|String
name|newProgressStr
init|=
name|progressData
operator|+
literal|"%"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Progress: "
operator|+
name|newProgressStr
argument_list|)
expr_stmt|;
comment|// accumulate the overall backup progress
name|progressDone
operator|=
name|newProgress
expr_stmt|;
name|bytesCopied
operator|+=
name|totalSrcLgth
expr_stmt|;
name|this
operator|.
name|backupHandler
operator|.
name|updateProgress
argument_list|(
name|newProgressStr
argument_list|,
name|bytesCopied
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup progress data updated to hbase:backup: \"Progress: "
operator|+
name|newProgressStr
operator|+
literal|" - "
operator|+
name|bytesCopied
operator|+
literal|" bytes copied.\""
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|fieldSubmitted
operator|.
name|getBoolean
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|methodCleanup
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|jobID
init|=
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DistCpConstants
operator|.
name|CONF_LABEL_DISTCP_JOB_ID
argument_list|,
name|jobID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DistCp job-id: "
operator|+
name|jobID
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
block|}
comment|/**    * Do backup copy based on different types.    * @param handler The backup handler reference    * @param conf The hadoop configuration    * @param copyType The backup copy type    * @param options Options for customized ExportSnapshot or DistCp    * @throws Exception exception    */
specifier|public
name|int
name|copy
parameter_list|(
name|BackupHandler
name|handler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|BackupCopyService
operator|.
name|Type
name|copyType
parameter_list|,
name|String
index|[]
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|copyType
operator|==
name|Type
operator|.
name|FULL
condition|)
block|{
name|SnapshotCopy
name|snapshotCp
init|=
operator|new
name|SnapshotCopy
argument_list|(
name|handler
argument_list|,
name|handler
operator|.
name|getBackupContext
argument_list|()
operator|.
name|getTableBySnapshot
argument_list|(
name|options
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Doing SNAPSHOT_COPY"
argument_list|)
expr_stmt|;
comment|// Make a new instance of conf to be used by the snapshot copy class.
name|snapshotCp
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|snapshotCp
operator|.
name|run
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|copyType
operator|==
name|Type
operator|.
name|INCREMENTAL
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Doing COPY_TYPE_DISTCP"
argument_list|)
expr_stmt|;
name|setSubTaskPercntgInWholeTask
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|BackupDistCp
name|distcp
init|=
operator|new
name|BackupDistCp
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|)
decl_stmt|;
comment|// Handle a special case where the source file is a single file.
comment|// In this case, distcp will not create the target dir. It just take the
comment|// target as a file name and copy source file to the target (as a file name).
comment|// We need to create the target dir before run distcp.
name|LOG
operator|.
name|debug
argument_list|(
literal|"DistCp options: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|Path
name|dest
init|=
operator|new
name|Path
argument_list|(
name|options
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|destfs
init|=
name|dest
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destfs
operator|.
name|exists
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|destfs
operator|.
name|mkdirs
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|=
name|distcp
operator|.
name|run
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

