begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|ConfigurationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Makes decisions about the placement and movement of Regions across  * RegionServers.  *  *<p>Cluster-wide load balancing will occur only when there are no regions in  * transition and according to a fixed period of a time using {@link #balanceCluster(Map)}.  *  *<p>On cluster startup, bulk assignment can be used to determine  * locations for all Regions in a cluster.  *  *<p>This class produces plans for the  * {@link org.apache.hadoop.hbase.master.assignment.AssignmentManager}  * to execute.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|LoadBalancer
extends|extends
name|Configurable
extends|,
name|Stoppable
extends|,
name|ConfigurationObserver
block|{
comment|/**    * Master can carry regions as of hbase-2.0.0.    * By default, it carries no tables.    * TODO: Add any | system as flags to indicate what it can do.    */
name|String
name|TABLES_ON_MASTER
init|=
literal|"hbase.balancer.tablesOnMaster"
decl_stmt|;
comment|/**    * Master carries system tables.    */
name|String
name|SYSTEM_TABLES_ON_MASTER
init|=
literal|"hbase.balancer.tablesOnMaster.systemTablesOnly"
decl_stmt|;
comment|// Used to signal to the caller that the region(s) cannot be assigned
comment|// We deliberately use 'localhost' so the operation will fail fast
name|ServerName
name|BOGUS_SERVER_NAME
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost,1,1"
argument_list|)
decl_stmt|;
comment|/**    * Config for pluggable load balancers.    * @deprecated since 3.0.0, will be removed in 4.0.0. In the new implementation, as the base load    *             balancer will always be the rs group based one, you should just use    *             {@link org.apache.hadoop.hbase.HConstants#HBASE_MASTER_LOADBALANCER_CLASS} to    *             config the per group load balancer.    */
annotation|@
name|Deprecated
name|String
name|HBASE_RSGROUP_LOADBALANCER_CLASS
init|=
literal|"hbase.rsgroup.grouploadbalancer.class"
decl_stmt|;
comment|/**    * Set the current cluster status. This allows a LoadBalancer to map host name to a server    */
name|void
name|setClusterMetrics
parameter_list|(
name|ClusterMetrics
name|st
parameter_list|)
function_decl|;
comment|/**    * Pass RegionStates and allow balancer to set the current cluster load.    */
name|void
name|setClusterLoad
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|ClusterLoad
parameter_list|)
function_decl|;
comment|/**    * Set the master service.    */
name|void
name|setMasterServices
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
function_decl|;
comment|/**    * Perform the major balance operation    * @return List of plans    */
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Perform the major balance operation    * @return List of plans    */
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Perform a Round Robin assignment of regions.    * @return Map of servername to regioninfos    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Assign regions to the previously hosting region server    * @return List of plans    */
annotation|@
name|Nullable
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get a random region server from the list    * @param regionInfo Region for which this selection is being done.    */
name|ServerName
name|randomAssignment
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Initialize the load balancer. Must be called after setters.    */
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Marks the region as online at balancer.    */
name|void
name|regionOnline
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|)
function_decl|;
comment|/**    * Marks the region as offline at balancer.    */
name|void
name|regionOffline
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
function_decl|;
comment|/**    * Notification that config has changed    */
annotation|@
name|Override
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/**    * If balancer needs to do initialization after Master has started up, lets do that here.    */
name|void
name|postMasterStartupInitialize
parameter_list|()
function_decl|;
comment|/*Updates balancer status tag reported to JMX*/
name|void
name|updateBalancerStatus
parameter_list|(
name|boolean
name|status
parameter_list|)
function_decl|;
comment|/**    * @return true if Master carries regions    */
specifier|static
name|boolean
name|isTablesOnMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|TABLES_ON_MASTER
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isSystemTablesOnlyOnMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|SYSTEM_TABLES_ON_MASTER
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isMasterCanHostUserRegions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isTablesOnMaster
argument_list|(
name|conf
argument_list|)
operator|&&
operator|!
name|isSystemTablesOnlyOnMaster
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

