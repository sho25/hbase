begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
operator|.
name|LogRollMasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|DefaultWALProvider
import|;
end_import

begin_comment
comment|/**  * After a full backup was created, the incremental backup will only store the changes made  * after the last full or incremental backup.  *  * Creating the backup copies the logfiles in .logs and .oldlogs since the last backup timestamp.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|IncrementalBackupManager
block|{
comment|// parent manager
specifier|private
name|BackupManager
name|backupManager
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IncrementalBackupManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|IncrementalBackupManager
parameter_list|(
name|BackupManager
name|bm
parameter_list|)
block|{
name|this
operator|.
name|backupManager
operator|=
name|bm
expr_stmt|;
block|}
comment|/**    * Obtain the list of logs that need to be copied out for this incremental backup. The list is set    * in BackupContext.    * @param backupContext backup context    * @return The new HashMap of RS log timestamps after the log roll for this incremental backup.    * @throws IOException exception    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getIncrBackupLogFileList
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logList
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newTimestamps
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|previousTimestampMins
decl_stmt|;
name|Configuration
name|conf
init|=
name|BackupUtil
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|savedStartCode
init|=
name|backupManager
operator|.
name|readBackupStartCode
argument_list|()
decl_stmt|;
comment|// key: tableName
comment|// value:<RegionServer,PreviousTimeStamp>
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|previousTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|previousTimestampMins
operator|=
name|BackupUtil
operator|.
name|getRSLogTimestampMins
argument_list|(
name|previousTimestampMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"StartCode "
operator|+
name|savedStartCode
operator|+
literal|"for backupID "
operator|+
name|backupContext
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Timestamps "
operator|+
name|previousTimestampMap
argument_list|)
expr_stmt|;
comment|// get all new log files from .logs and .oldlogs after last TS and before new timestamp
if|if
condition|(
name|savedStartCode
operator|==
literal|null
operator|||
name|previousTimestampMins
operator|==
literal|null
operator|||
name|previousTimestampMins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read any previous back up timestamps from hbase:backup. "
operator|+
literal|"In order to create an incremental backup, at least one full backup is needed."
argument_list|)
throw|;
block|}
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execute roll log procedure for incremental backup ..."
argument_list|)
expr_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|hbadmin
operator|.
name|execProcedure
argument_list|(
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_SIGNATURE
argument_list|,
name|LogRollMasterProcedureManager
operator|.
name|ROLLLOG_PROCEDURE_NAME
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|newTimestamps
operator|=
name|backupManager
operator|.
name|readRegionServerLastLogRollResult
argument_list|()
expr_stmt|;
name|logList
operator|=
name|getLogFilesForNewBackup
argument_list|(
name|previousTimestampMins
argument_list|,
name|newTimestamps
argument_list|,
name|conf
argument_list|,
name|savedStartCode
argument_list|)
expr_stmt|;
name|backupContext
operator|.
name|setIncrBackupFileList
argument_list|(
name|logList
argument_list|)
expr_stmt|;
return|return
name|newTimestamps
return|;
block|}
comment|/**    * For each region server: get all log files newer than the last timestamps but not newer than the    * newest timestamps.    * @param olderTimestamps the timestamp for each region server of the last backup.    * @param newestTimestamps the timestamp for each region server that the backup should lead to.    * @param conf the Hadoop and Hbase configuration    * @param savedStartCode the startcode (timestamp) of last successful backup.    * @return a list of log files to be backed up    * @throws IOException exception    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getLogFilesForNewBackup
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|olderTimestamps
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newestTimestamps
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|savedStartCode
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In getLogFilesForNewBackup()\n"
operator|+
literal|"olderTimestamps: "
operator|+
name|olderTimestamps
operator|+
literal|"\n newestTimestamps: "
operator|+
name|newestTimestamps
argument_list|)
expr_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NewestLogFilter
name|pathFilter
init|=
operator|new
name|NewestLogFilter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resultLogFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newestLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/*      * The old region servers and timestamps info we kept in hbase:backup may be out of sync if new      * region server is added or existing one lost. We'll deal with it here when processing the      * logs. If data in hbase:backup has more hosts, just ignore it. If the .logs directory includes      * more hosts, the additional hosts will not have old timestamps to compare with. We'll just use      * all the logs in that directory. We always write up-to-date region server and timestamp info      * to hbase:backup at the end of successful backup.      */
name|FileStatus
index|[]
name|rss
decl_stmt|;
name|Path
name|p
decl_stmt|;
name|String
name|host
decl_stmt|;
name|String
name|oldTimeStamp
decl_stmt|;
name|String
name|currentLogFile
decl_stmt|;
name|String
name|currentLogTS
decl_stmt|;
comment|// Get the files in .logs.
name|rss
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|rs
range|:
name|rss
control|)
block|{
name|p
operator|=
name|rs
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|host
operator|=
name|DefaultWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|p
argument_list|)
operator|.
name|getHostname
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|logs
decl_stmt|;
name|oldTimeStamp
operator|=
name|olderTimestamps
operator|.
name|get
argument_list|(
name|host
argument_list|)
expr_stmt|;
comment|// It is possible that there is no old timestamp in hbase:backup for this host if
comment|// this region server is newly added after our last backup.
if|if
condition|(
name|oldTimeStamp
operator|==
literal|null
condition|)
block|{
name|logs
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathFilter
operator|.
name|setLastBackupTS
argument_list|(
name|oldTimeStamp
argument_list|)
expr_stmt|;
name|logs
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|,
name|pathFilter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|log
range|:
name|logs
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"currentLogFile: "
operator|+
name|log
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|DefaultWALProvider
operator|.
name|isMetaFile
argument_list|(
name|log
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip hbase:meta log file: "
operator|+
name|log
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|currentLogFile
operator|=
name|log
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|resultLogFiles
operator|.
name|add
argument_list|(
name|currentLogFile
argument_list|)
expr_stmt|;
name|currentLogTS
operator|=
name|BackupUtil
operator|.
name|getCreationTime
argument_list|(
name|log
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// newestTimestamps is up-to-date with the current list of hosts
comment|// so newestTimestamps.get(host) will not be null.
if|if
condition|(
name|Long
operator|.
name|valueOf
argument_list|(
name|currentLogTS
argument_list|)
operator|>
name|Long
operator|.
name|valueOf
argument_list|(
name|newestTimestamps
operator|.
name|get
argument_list|(
name|host
argument_list|)
argument_list|)
condition|)
block|{
name|newestLogs
operator|.
name|add
argument_list|(
name|currentLogFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Include the .oldlogs files too.
name|FileStatus
index|[]
name|oldlogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|oldLogDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|oldlog
range|:
name|oldlogs
control|)
block|{
name|p
operator|=
name|oldlog
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|currentLogFile
operator|=
name|p
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|DefaultWALProvider
operator|.
name|isMetaFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip .meta log file: "
operator|+
name|currentLogFile
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|host
operator|=
name|BackupUtil
operator|.
name|parseHostFromOldLog
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|currentLogTS
operator|=
name|BackupUtil
operator|.
name|getCreationTime
argument_list|(
name|p
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|oldTimeStamp
operator|=
name|olderTimestamps
operator|.
name|get
argument_list|(
name|host
argument_list|)
expr_stmt|;
comment|/*        * It is possible that there is no old timestamp in hbase:backup for this host. At the time of        * our last backup operation, this rs did not exist. The reason can be one of the two: 1. The        * rs already left/crashed. Its logs were moved to .oldlogs. 2. The rs was added after our        * last backup.        */
if|if
condition|(
name|oldTimeStamp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Long
operator|.
name|valueOf
argument_list|(
name|currentLogTS
argument_list|)
operator|<
name|Long
operator|.
name|valueOf
argument_list|(
name|savedStartCode
argument_list|)
condition|)
block|{
comment|// This log file is really old, its region server was before our last backup.
continue|continue;
block|}
else|else
block|{
name|resultLogFiles
operator|.
name|add
argument_list|(
name|currentLogFile
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|valueOf
argument_list|(
name|currentLogTS
argument_list|)
operator|>
name|Long
operator|.
name|valueOf
argument_list|(
name|oldTimeStamp
argument_list|)
condition|)
block|{
name|resultLogFiles
operator|.
name|add
argument_list|(
name|currentLogFile
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"resultLogFiles before removal of newestLogs: "
operator|+
name|resultLogFiles
argument_list|)
expr_stmt|;
comment|// It is possible that a host in .oldlogs is an obsolete region server
comment|// so newestTimestamps.get(host) here can be null.
comment|// Even if these logs belong to a obsolete region server, we still need
comment|// to include they to avoid loss of edits for backup.
name|String
name|newTimestamp
init|=
name|newestTimestamps
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTimestamp
operator|!=
literal|null
operator|&&
name|Long
operator|.
name|valueOf
argument_list|(
name|currentLogTS
argument_list|)
operator|>
name|Long
operator|.
name|valueOf
argument_list|(
name|newTimestamp
argument_list|)
condition|)
block|{
name|newestLogs
operator|.
name|add
argument_list|(
name|currentLogFile
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"newestLogs: "
operator|+
name|newestLogs
argument_list|)
expr_stmt|;
comment|// remove newest log per host because they are still in use
name|resultLogFiles
operator|.
name|removeAll
argument_list|(
name|newestLogs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"resultLogFiles after removal of newestLogs: "
operator|+
name|resultLogFiles
argument_list|)
expr_stmt|;
return|return
name|resultLogFiles
return|;
block|}
class|class
name|NewestLogFilter
implements|implements
name|PathFilter
block|{
specifier|private
name|String
name|lastBackupTS
init|=
literal|"0"
decl_stmt|;
specifier|final
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|NewestLogFilter
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|protected
name|void
name|setLastBackupTS
parameter_list|(
name|String
name|ts
parameter_list|)
block|{
name|this
operator|.
name|lastBackupTS
operator|=
name|ts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// skip meta table log -- ts.meta file
if|if
condition|(
name|DefaultWALProvider
operator|.
name|isMetaFile
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip .meta log file: "
operator|+
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|timestamp
decl_stmt|;
try|try
block|{
name|timestamp
operator|=
name|BackupUtil
operator|.
name|getCreationTime
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|timestamp
argument_list|)
operator|>
name|Long
operator|.
name|valueOf
argument_list|(
name|lastBackupTS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot read timestamp of log file "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

