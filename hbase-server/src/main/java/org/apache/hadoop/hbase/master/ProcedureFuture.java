begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Map Future Interface on to Procedure result processing.  */
end_comment

begin_comment
comment|// Has no extra methods as of now beyond Future<ProcedureInfo>. Use #toString if you want to log
end_comment

begin_comment
comment|// procId of procedure.
end_comment

begin_comment
comment|// TODO: This should be in Procedure? Have it in master package for now. Lets out ProcedureInfo.
end_comment

begin_comment
comment|// Implementation informed by HBaseAdmin#ProcedureFuture.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ProcedureFuture
implements|implements
name|Future
argument_list|<
name|ProcedureInfo
argument_list|>
block|{
comment|// Save exception so we can rethrow if called again. Same for result.
specifier|private
name|ExecutionException
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
name|ProcedureInfo
name|result
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Long
name|procId
decl_stmt|;
specifier|private
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procedureExecutor
decl_stmt|;
name|ProcedureFuture
parameter_list|(
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procedureExecutor
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|this
operator|.
name|procedureExecutor
operator|=
name|procedureExecutor
expr_stmt|;
name|this
operator|.
name|procId
operator|=
name|procId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"procId="
operator|+
name|this
operator|.
name|procId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|cancelled
condition|)
block|{
name|this
operator|.
name|cancelled
operator|=
name|this
operator|.
name|procedureExecutor
operator|.
name|abort
argument_list|(
name|this
operator|.
name|procId
argument_list|,
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cancelled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|this
operator|.
name|cancelled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
comment|/**    * This method is unsupported. We will throw an UnsupportedOperationException. Only the lazy    * would call this method because they can avoid thinking through implication of a Procedure that    * might never return so this is disallowed. Use {@link #get(long, TimeUnit)}.    */
annotation|@
name|Override
specifier|public
name|ProcedureInfo
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// TODO: should we ever spin forever?
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ProcedureInfo
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|done
condition|)
block|{
comment|// TODO: add this sort of facility to EnvironmentEdgeManager
name|long
name|deadlineTs
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|result
operator|=
name|waitProcedureResult
argument_list|(
name|procId
argument_list|,
name|deadlineTs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param procId    * @param deadlineTs    * @return A ProcedureInfo instance or null if procedure not found.    * @throws IOException    * @throws TimeoutException    * @throws InterruptedException    */
specifier|private
name|ProcedureInfo
name|waitProcedureResult
parameter_list|(
name|long
name|procId
parameter_list|,
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|deadlineTs
condition|)
block|{
name|Pair
argument_list|<
name|ProcedureInfo
argument_list|,
name|Procedure
argument_list|>
name|pair
init|=
name|this
operator|.
name|procedureExecutor
operator|.
name|getResultOrProcedure
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|procedureExecutor
operator|.
name|removeResult
argument_list|(
name|procId
argument_list|)
expr_stmt|;
return|return
name|pair
operator|.
name|getFirst
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
comment|// TODO: Add a wait.
block|}
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"The procedure "
operator|+
name|procId
operator|+
literal|" is still running"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

