begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MetricsMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SnapshotSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|HFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|HFileLinkCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|CloneSnapshotProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|RestoreSnapshotProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|MasterProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|ProcedureCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|ProcedureCoordinatorRpcs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|ZKProcedureCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotReferenceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|TablePartiallyOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|UnknownSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * This class manages the procedure of taking and restoring snapshots. There is only one  * SnapshotManager for the master.  *<p>  * The class provides methods for monitoring in-progress snapshot actions.  *<p>  * Note: Currently there can only be one snapshot being taken at a time over the cluster. This is a  * simplification in the current implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|SnapshotManager
extends|extends
name|MasterProcedureManager
implements|implements
name|Stoppable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** By default, check to see if the snapshot is complete every WAKE MILLIS (ms) */
specifier|private
specifier|static
specifier|final
name|int
name|SNAPSHOT_WAKE_MILLIS_DEFAULT
init|=
literal|500
decl_stmt|;
comment|/**    * Wait time before removing a finished sentinel from the in-progress map    *    * NOTE: This is used as a safety auto cleanup.    * The snapshot and restore handlers map entries are removed when a user asks if a snapshot or    * restore is completed. This operation is part of the HBaseAdmin snapshot/restore API flow.    * In case something fails on the client side and the snapshot/restore state is not reclaimed    * after a default timeout, the entry is removed from the in-progress map.    * At this point, if the user asks for the snapshot/restore status, the result will be    * snapshot done if exists or failed if it doesn't exists.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SNAPSHOT_SENTINELS_CLEANUP_TIMEOUT_MILLIS
init|=
literal|"hbase.snapshot.sentinels.cleanup.timeoutMillis"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|SNAPSHOT_SENTINELS_CLEANUP_TIMEOUT_MILLS_DEFAULT
init|=
literal|60
operator|*
literal|1000L
decl_stmt|;
comment|/** Enable or disable snapshot support */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SNAPSHOT_ENABLED
init|=
literal|"hbase.snapshot.enabled"
decl_stmt|;
comment|/**    * Conf key for # of ms elapsed between checks for snapshot errors while waiting for    * completion.    */
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_WAKE_MILLIS_KEY
init|=
literal|"hbase.snapshot.master.wakeMillis"
decl_stmt|;
comment|/** Name of the operation to use in the controller */
specifier|public
specifier|static
specifier|final
name|String
name|ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION
init|=
literal|"online-snapshot"
decl_stmt|;
comment|/** Conf key for # of threads used by the SnapshotManager thread pool */
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_POOL_THREADS_KEY
init|=
literal|"hbase.snapshot.master.threads"
decl_stmt|;
comment|/** number of current operations running on the master */
specifier|private
specifier|static
specifier|final
name|int
name|SNAPSHOT_POOL_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
comment|// Needed by TableEventHandlers
specifier|private
name|ProcedureCoordinator
name|coordinator
decl_stmt|;
comment|// Is snapshot feature enabled?
specifier|private
name|boolean
name|isSnapshotSupported
init|=
literal|false
decl_stmt|;
comment|// Snapshot handlers map, with table name as key.
comment|// The map is always accessed and modified under the object lock using synchronized.
comment|// snapshotTable() will insert an Handler in the table.
comment|// isSnapshotDone() will remove the handler requested if the operation is finished.
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
name|snapshotHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduleThreadPool
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"SnapshotHandlerChoreCleaner"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|snapshotHandlerChoreCleanerTask
decl_stmt|;
comment|// Restore map, with table name as key, procedure ID as value.
comment|// The map is always accessed and modified under the object lock using synchronized.
comment|// restoreSnapshot()/cloneSnapshot() will insert a procedure ID in the map.
comment|//
comment|// TODO: just as the Apache HBase 1.x implementation, this map would not survive master
comment|// restart/failover. This is just a stopgap implementation until implementation of taking
comment|// snapshot using Procedure-V2.
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|restoreTableToProcIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
comment|/**    * Read write lock between taking snapshot and snapshot HFile cleaner. The cleaner should skip to    * check the HFiles if any snapshot is in progress, otherwise it may clean a HFile which would    * belongs to the newly creating snapshot. So we should grab the write lock first when cleaner    * start to work. (See HBASE-21387)    */
specifier|private
name|ReentrantReadWriteLock
name|takingSnapshotLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|SnapshotManager
parameter_list|()
block|{}
comment|/**    * Fully specify all necessary components of a snapshot manager. Exposed for testing.    * @param master services for the master where the manager is running    * @param coordinator procedure coordinator instance.  exposed for testing.    * @param pool HBase ExecutorServcie instance, exposed for testing.    */
annotation|@
name|VisibleForTesting
name|SnapshotManager
parameter_list|(
specifier|final
name|MasterServices
name|master
parameter_list|,
name|ProcedureCoordinator
name|coordinator
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|sentinelCleanInterval
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|checkSnapshotSupport
argument_list|(
name|conf
argument_list|,
name|master
operator|.
name|getMasterFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|coordinator
operator|=
name|coordinator
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|pool
expr_stmt|;
name|resetTempDir
argument_list|()
expr_stmt|;
name|snapshotHandlerChoreCleanerTask
operator|=
name|this
operator|.
name|scheduleThreadPool
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|::
name|cleanupSentinels
argument_list|,
name|sentinelCleanInterval
argument_list|,
name|sentinelCleanInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the list of all completed snapshots.    * @return list of SnapshotDescriptions    * @throws IOException File system exception    */
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|getCompletedSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getCompletedSnapshots
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Gets the list of all completed snapshots.    * @param snapshotDir snapshot directory    * @param withCpCall Whether to call CP hooks    * @return list of SnapshotDescriptions    * @throws IOException File system exception    */
specifier|private
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|getCompletedSnapshots
parameter_list|(
name|Path
name|snapshotDir
parameter_list|,
name|boolean
name|withCpCall
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshotDescs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first create the snapshot root path and check to see if it exists
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotDir
operator|==
literal|null
condition|)
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
comment|// if there are no snapshots, return an empty list
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
return|return
name|snapshotDescs
return|;
block|}
comment|// ignore all the snapshots in progress
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|withCpCall
operator|=
name|withCpCall
operator|&&
name|cpHost
operator|!=
literal|null
expr_stmt|;
comment|// loop through all the completed snapshots
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|Path
name|info
init|=
operator|new
name|Path
argument_list|(
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOTINFO_FILE
argument_list|)
decl_stmt|;
comment|// if the snapshot is bad
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot information for "
operator|+
name|snapshot
operator|.
name|getPath
argument_list|()
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescription
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|descPOJO
init|=
operator|(
name|withCpCall
operator|)
condition|?
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|desc
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|withCpCall
condition|)
block|{
try|try
block|{
name|cpHost
operator|.
name|preListSnapshot
argument_list|(
name|descPOJO
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Current user does not have access to "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" snapshot. "
operator|+
literal|"Either you should be owner of this snapshot or admin user."
argument_list|)
expr_stmt|;
comment|// Skip this and try for next snapshot
continue|continue;
block|}
block|}
name|snapshotDescs
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// call coproc post hook
if|if
condition|(
name|withCpCall
condition|)
block|{
name|cpHost
operator|.
name|postListSnapshot
argument_list|(
name|descPOJO
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found a corrupted snapshot "
operator|+
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|snapshotDescs
return|;
block|}
comment|/**    * Cleans up any snapshots in the snapshot/.tmp directory that were left from failed    * snapshot attempts.    *    * @throws IOException if we can't reach the filesystem    */
specifier|private
name|void
name|resetTempDir
parameter_list|()
throws|throws
name|IOException
block|{
comment|// cleanup any existing snapshots.
name|Path
name|tmpdir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|rootDir
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|tmpFs
init|=
name|tmpdir
operator|.
name|getFileSystem
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpFs
operator|.
name|delete
argument_list|(
name|tmpdir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't delete working snapshot directory: "
operator|+
name|tmpdir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete the specified snapshot    * @param snapshot    * @throws SnapshotDoesNotExistException If the specified snapshot does not exist.    * @throws IOException For filesystem IOExceptions    */
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check to see if it is completed
if|if
condition|(
operator|!
name|isSnapshotCompleted
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotDoesNotExistException
argument_list|(
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|snapshotName
init|=
name|snapshot
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// first create the snapshot description and check to see if it exists
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
comment|// Get snapshot info from file system. The one passed as parameter is a "fake" snapshotInfo with
comment|// just the "name" and it does not contains the "real" snapshot information
name|snapshot
operator|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
expr_stmt|;
comment|// call coproc pre hook
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|snapshotPOJO
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|snapshotPOJO
operator|=
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|cpHost
operator|.
name|preDeleteSnapshot
argument_list|(
name|snapshotPOJO
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting snapshot: "
operator|+
name|snapshotName
argument_list|)
expr_stmt|;
comment|// delete the existing snapshot
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|snapshotDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseSnapshotException
argument_list|(
literal|"Failed to delete snapshot directory: "
operator|+
name|snapshotDir
argument_list|)
throw|;
block|}
comment|// call coproc post hook
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDeleteSnapshot
argument_list|(
name|snapshotPOJO
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the specified snapshot is done    *    * @param expected    * @return true if snapshot is ready to be restored, false if it is still being taken.    * @throws IOException IOException if error from HDFS or RPC    * @throws UnknownSnapshotException if snapshot is invalid or does not exist.    */
specifier|public
name|boolean
name|isSnapshotDone
parameter_list|(
name|SnapshotDescription
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check the request to make sure it has a snapshot
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"No snapshot name passed in request, can't figure out which snapshot you want to check."
argument_list|)
throw|;
block|}
name|String
name|ssString
init|=
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
decl_stmt|;
comment|// check to see if the sentinel exists,
comment|// and if the task is complete removes it from the in-progress snapshots map.
name|SnapshotSentinel
name|handler
init|=
name|removeSentinelIfFinished
argument_list|(
name|this
operator|.
name|snapshotHandlers
argument_list|,
name|expected
argument_list|)
decl_stmt|;
comment|// stop tracking "abandoned" handlers
name|cleanupSentinels
argument_list|()
expr_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
comment|// If there's no handler in the in-progress map, it means one of the following:
comment|//   - someone has already requested the snapshot state
comment|//   - the requested snapshot was completed long time ago (cleanupSentinels() timeout)
comment|//   - the snapshot was never requested
comment|// In those cases returns to the user the "done state" if the snapshots exists on disk,
comment|// otherwise raise an exception saying that the snapshot is not running and doesn't exist.
if|if
condition|(
operator|!
name|isSnapshotCompleted
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"Snapshot "
operator|+
name|ssString
operator|+
literal|" is not currently running or one of the known completed snapshots."
argument_list|)
throw|;
block|}
comment|// was done, return true;
return|return
literal|true
return|;
block|}
comment|// pass on any failure we find in the sentinel
try|try
block|{
name|handler
operator|.
name|rethrowExceptionIfFailed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
comment|// Give some procedure info on an exception.
name|String
name|status
decl_stmt|;
name|Procedure
name|p
init|=
name|coordinator
operator|.
name|getProcedure
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|p
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|expected
operator|.
name|getName
argument_list|()
operator|+
literal|" not found in proclist "
operator|+
name|coordinator
operator|.
name|getProcedureNames
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|HBaseSnapshotException
argument_list|(
literal|"Snapshot "
operator|+
name|ssString
operator|+
literal|" had an error.  "
operator|+
name|status
argument_list|,
name|e
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|expected
argument_list|)
argument_list|)
throw|;
block|}
comment|// check to see if we are done
if|if
condition|(
name|handler
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot '"
operator|+
name|ssString
operator|+
literal|"' has completed, notifying client."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshoting '"
operator|+
name|ssString
operator|+
literal|"' is still in progress!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check to see if there is a snapshot in progress with the same name or on the same table.    * Currently we have a limitation only allowing a single snapshot per table at a time. Also we    * don't allow snapshot with the same name.    * @param snapshot description of the snapshot being checked.    * @return<tt>true</tt> if there is a snapshot in progress with the same name or on the same    *         table.    */
specifier|synchronized
name|boolean
name|isTakingSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|TableName
name|snapshotTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|snapshotTable
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
argument_list|>
name|it
init|=
name|this
operator|.
name|snapshotHandlers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SnapshotSentinel
name|sentinel
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sentinel
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|sentinel
operator|.
name|isFinished
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check to see if the specified table has a snapshot in progress.  Currently we have a    * limitation only allowing a single snapshot per table at a time.    * @param tableName name of the table being snapshotted.    * @return<tt>true</tt> if there is a snapshot in progress on the specified table.    */
specifier|public
name|boolean
name|isTakingSnapshot
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|SnapshotSentinel
name|handler
init|=
name|this
operator|.
name|snapshotHandlers
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|handler
operator|!=
literal|null
operator|&&
operator|!
name|handler
operator|.
name|isFinished
argument_list|()
return|;
block|}
comment|/**    * Check to make sure that we are OK to run the passed snapshot. Checks to make sure that we    * aren't already running a snapshot or restore on the requested table.    * @param snapshot description of the snapshot we want to start    * @throws HBaseSnapshotException if the filesystem could not be prepared to start the snapshot    */
specifier|private
specifier|synchronized
name|void
name|prepareToTakeSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TableName
name|snapshotTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
comment|// make sure we aren't already running a snapshot
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
name|SnapshotSentinel
name|handler
init|=
name|this
operator|.
name|snapshotHandlers
operator|.
name|get
argument_list|(
name|snapshotTable
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Rejected taking "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
operator|+
literal|" because we are already running another snapshot "
operator|+
operator|(
name|handler
operator|!=
literal|null
condition|?
operator|(
literal|"on the same table "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|handler
operator|.
name|getSnapshot
argument_list|()
argument_list|)
operator|)
else|:
literal|"with the same name"
operator|)
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|snapshotTable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Rejected taking "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
operator|+
literal|" because we are already have a restore in progress on the same snapshot."
argument_list|)
throw|;
block|}
try|try
block|{
name|FileSystem
name|workingDirFS
init|=
name|workingDir
operator|.
name|getFileSystem
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// delete the working directory, since we aren't running the snapshot. Likely leftovers
comment|// from a failed attempt.
name|workingDirFS
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// recreate the working directory for the snapshot
if|if
condition|(
operator|!
name|workingDirFS
operator|.
name|mkdirs
argument_list|(
name|workingDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Couldn't create working directory ("
operator|+
name|workingDir
operator|+
literal|") for snapshot"
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|HBaseSnapshotException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Exception while checking to see if snapshot could be started."
argument_list|,
name|e
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Take a snapshot of a disabled table.    * @param snapshot description of the snapshot to take. Modified to be {@link Type#DISABLED}.    * @throws IOException if the snapshot could not be started or filesystem for snapshot    *         temporary directory could not be determined    */
specifier|private
specifier|synchronized
name|void
name|snapshotDisabledTable
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup the snapshot
name|prepareToTakeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// set the snapshot to be a disabled snapshot, since the client doesn't know about that
name|snapshot
operator|=
name|snapshot
operator|.
name|toBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|DISABLED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Take the snapshot of the disabled table
name|DisabledTableSnapshotHandler
name|handler
init|=
operator|new
name|DisabledTableSnapshotHandler
argument_list|(
name|snapshot
argument_list|,
name|master
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|snapshotTable
argument_list|(
name|snapshot
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot of an enabled table.    * @param snapshot description of the snapshot to take.    * @throws IOException if the snapshot could not be started or filesystem for snapshot    *         temporary directory could not be determined    */
specifier|private
specifier|synchronized
name|void
name|snapshotEnabledTable
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup the snapshot
name|prepareToTakeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// Take the snapshot of the enabled table
name|EnabledTableSnapshotHandler
name|handler
init|=
operator|new
name|EnabledTableSnapshotHandler
argument_list|(
name|snapshot
argument_list|,
name|master
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|snapshotTable
argument_list|(
name|snapshot
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot using the specified handler.    * On failure the snapshot temporary working directory is removed.    * NOTE: prepareToTakeSnapshot() called before this one takes care of the rejecting the    *       snapshot request if the table is busy with another snapshot/restore operation.    * @param snapshot the snapshot description    * @param handler the snapshot handler    */
specifier|private
specifier|synchronized
name|void
name|snapshotTable
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TakeSnapshotHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotHandlers
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// cleanup the working directory by trying to delete it from the fs.
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|workingDirFs
init|=
name|workingDir
operator|.
name|getFileSystem
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|workingDirFs
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fail the snapshot
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Could not build snapshot handler"
argument_list|,
name|e
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ReadWriteLock
name|getTakingSnapshotLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|takingSnapshotLock
return|;
block|}
comment|/**    * The snapshot operation processing as following:<br>    * 1. Create a Snapshot Handler, and do some initialization;<br>    * 2. Put the handler into snapshotHandlers<br>    * So when we consider if any snapshot is taking, we should consider both the takingSnapshotLock    * and snapshotHandlers;    * @return true to indicate that there're some running snapshots.    */
specifier|public
specifier|synchronized
name|boolean
name|isTakingAnySnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|takingSnapshotLock
operator|.
name|getReadHoldCount
argument_list|()
operator|>
literal|0
operator|||
name|this
operator|.
name|snapshotHandlers
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**    * Take a snapshot based on the enabled/disabled state of the table.    * @param snapshot    * @throws HBaseSnapshotException when a snapshot specific exception occurs.    * @throws IOException when some sort of generic IO exception occurs.    */
specifier|public
name|void
name|takeSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|takingSnapshotLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|takeSnapshotInternal
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|takingSnapshotLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|takeSnapshotInternal
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check to see if we already completed the snapshot
if|if
condition|(
name|isSnapshotCompleted
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotExistsException
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' already stored on the filesystem."
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"No existing snapshot, attempting snapshot..."
argument_list|)
expr_stmt|;
comment|// stop tracking "abandoned" handlers
name|cleanupSentinels
argument_list|()
expr_stmt|;
comment|// check to see if the table exists
name|TableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|desc
operator|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Table:"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|" info doesn't exist!"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Error while geting table description for table "
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|,
name|e
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Table '"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|"' doesn't exist, can't take snapshot."
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|snapshot
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
comment|// if not specified, set the snapshot format
if|if
condition|(
operator|!
name|snapshot
operator|.
name|hasVersion
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setVersion
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
block|}
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|user
lambda|->
block|{
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// call pre coproc hook
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|snapshotPOJO
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|snapshotPOJO
operator|=
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|cpHost
operator|.
name|preSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// if the table is enabled, then have the RS run actually the snapshot work
name|TableName
name|snapshotTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|snapshotTable
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table enabled, starting distributed snapshot."
argument_list|)
expr_stmt|;
name|snapshotEnabledTable
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started snapshot: "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// For disabled table, snapshot is created by the master
elseif|else
if|if
condition|(
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|snapshotTable
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table is disabled, running snapshot entirely on master."
argument_list|)
expr_stmt|;
name|snapshotDisabledTable
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started snapshot: "
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't snapshot table '"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|"', isn't open or closed, we don't know what to do!"
argument_list|)
expr_stmt|;
name|TablePartiallyOpenException
name|tpoe
init|=
operator|new
name|TablePartiallyOpenException
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|" isn't fully open."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Table is not entirely open or closed"
argument_list|,
name|tpoe
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
throw|;
block|}
comment|// call post coproc hook
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the handler for the current snapshot    *<p>    * Exposed for TESTING    * @param tableName    * @param handler handler the master should use    *    * TODO get rid of this if possible, repackaging, modify tests.    */
specifier|public
specifier|synchronized
name|void
name|setSnapshotHandlerForTesting
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|SnapshotSentinel
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|snapshotHandlers
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|snapshotHandlers
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return distributed commit coordinator for all running snapshots    */
name|ProcedureCoordinator
name|getCoordinator
parameter_list|()
block|{
return|return
name|coordinator
return|;
block|}
comment|/**    * Check to see if the snapshot is one of the currently completed snapshots    * Returns true if the snapshot exists in the "completed snapshots folder".    *    * @param snapshot expected snapshot to check    * @return<tt>true</tt> if the snapshot is stored on the {@link FileSystem},<tt>false</tt> if is    *         not stored    * @throws IOException if the filesystem throws an unexpected exception,    * @throws IllegalArgumentException if snapshot name is invalid.    */
specifier|private
name|boolean
name|isSnapshotCompleted
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// check to see if the snapshot already exists
return|return
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"Unexpected exception thrown"
argument_list|,
name|iae
argument_list|)
throw|;
block|}
block|}
comment|/**    * Clone the specified snapshot.    * The clone will fail if the destination table has a snapshot or restore in progress.    *    * @param reqSnapshot Snapshot Descriptor from request    * @param tableName table to clone    * @param snapshot Snapshot Descriptor    * @param snapshotTableDesc Table Descriptor    * @param nonceKey unique identifier to prevent duplicated RPC    * @return procId the ID of the clone snapshot procedure    * @throws IOException    */
specifier|private
name|long
name|cloneSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|reqSnapshot
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|snapshotTableDesc
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|copy
argument_list|(
name|tableName
argument_list|,
name|snapshotTableDesc
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|snapshotPOJO
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|snapshotPOJO
operator|=
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|cpHost
operator|.
name|preCloneSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
name|long
name|procId
decl_stmt|;
try|try
block|{
name|procId
operator|=
name|cloneSnapshot
argument_list|(
name|snapshot
argument_list|,
name|htd
argument_list|,
name|nonceKey
argument_list|,
name|restoreAcl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred while cloning the snapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Clone snapshot="
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCloneSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
return|return
name|procId
return|;
block|}
comment|/**    * Clone the specified snapshot into a new table.    * The operation will fail if the destination table has a snapshot or restore in progress.    *    * @param snapshot Snapshot Descriptor    * @param tableDescriptor Table Descriptor of the table to create    * @param nonceKey unique identifier to prevent duplicated RPC    * @return procId the ID of the clone snapshot procedure    */
specifier|synchronized
name|long
name|cloneSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|TableName
name|tableName
init|=
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// make sure we aren't running a snapshot on the same table
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Snapshot in progress on the restore table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Restore already in progress on the table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
operator|new
name|CloneSnapshotProcedure
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|tableDescriptor
argument_list|,
name|snapshot
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|nonceKey
argument_list|)
decl_stmt|;
name|this
operator|.
name|restoreTableToProcIdMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|procId
argument_list|)
expr_stmt|;
return|return
name|procId
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't clone the snapshot="
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
operator|+
literal|" on table="
operator|+
name|tableName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Restore or Clone the specified snapshot    * @param reqSnapshot    * @param nonceKey unique identifier to prevent duplicated RPC    * @throws IOException    */
specifier|public
name|long
name|restoreOrCloneSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|reqSnapshot
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|reqSnapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
comment|// check if the snapshot exists
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A Snapshot named '"
operator|+
name|reqSnapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' does not exist."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SnapshotDoesNotExistException
argument_list|(
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|reqSnapshot
argument_list|)
argument_list|)
throw|;
block|}
comment|// Get snapshot info from file system. The reqSnapshot is a "fake" snapshotInfo with
comment|// just the snapshot "name" and table name to restore. It does not contains the "real" snapshot
comment|// information.
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
name|TableDescriptor
name|snapshotTableDesc
init|=
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|reqSnapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
comment|// stop tracking "abandoned" handlers
name|cleanupSentinels
argument_list|()
expr_stmt|;
comment|// Verify snapshot validity
name|SnapshotReferenceUtil
operator|.
name|verifySnapshot
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
comment|// Execute the restore/clone operation
name|long
name|procId
decl_stmt|;
if|if
condition|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|procId
operator|=
name|restoreSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|,
name|snapshotTableDesc
argument_list|,
name|nonceKey
argument_list|,
name|restoreAcl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|procId
operator|=
name|cloneSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|,
name|snapshotTableDesc
argument_list|,
name|nonceKey
argument_list|,
name|restoreAcl
argument_list|)
expr_stmt|;
block|}
return|return
name|procId
return|;
block|}
comment|/**    * Restore the specified snapshot. The restore will fail if the destination table has a snapshot    * or restore in progress.    * @param reqSnapshot Snapshot Descriptor from request    * @param tableName table to restore    * @param snapshot Snapshot Descriptor    * @param snapshotTableDesc Table Descriptor    * @param nonceKey unique identifier to prevent duplicated RPC    * @param restoreAcl true to restore acl of snapshot    * @return procId the ID of the restore snapshot procedure    * @throws IOException    */
specifier|private
name|long
name|restoreSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|reqSnapshot
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|snapshotTableDesc
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Table '"
operator|+
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
operator|+
literal|"' must be disabled in order to "
operator|+
literal|"perform a restore operation."
argument_list|)
throw|;
block|}
comment|// call Coprocessor pre hook
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|snapshotPOJO
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|snapshotPOJO
operator|=
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|cpHost
operator|.
name|preRestoreSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|snapshotTableDesc
argument_list|)
expr_stmt|;
block|}
name|long
name|procId
decl_stmt|;
try|try
block|{
name|procId
operator|=
name|restoreSnapshot
argument_list|(
name|snapshot
argument_list|,
name|snapshotTableDesc
argument_list|,
name|nonceKey
argument_list|,
name|restoreAcl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred while restoring the snapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore snapshot="
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postRestoreSnapshot
argument_list|(
name|snapshotPOJO
argument_list|,
name|snapshotTableDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|procId
return|;
block|}
comment|/**    * Restore the specified snapshot. The restore will fail if the destination table has a snapshot    * or restore in progress.    * @param snapshot Snapshot Descriptor    * @param tableDescriptor Table Descriptor    * @param nonceKey unique identifier to prevent duplicated RPC    * @param restoreAcl true to restore acl of snapshot    * @return procId the ID of the restore snapshot procedure    */
specifier|private
specifier|synchronized
name|long
name|restoreSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// make sure we aren't running a snapshot on the same table
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Snapshot in progress on the restore table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Restore already in progress on the table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
try|try
block|{
name|long
name|procId
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
operator|new
name|RestoreSnapshotProcedure
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|tableDescriptor
argument_list|,
name|snapshot
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|nonceKey
argument_list|)
decl_stmt|;
name|this
operator|.
name|restoreTableToProcIdMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|procId
argument_list|)
expr_stmt|;
return|return
name|procId
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't restore the snapshot="
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
operator|+
literal|" on table="
operator|+
name|tableName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify if the restore of the specified table is in progress.    *    * @param tableName table under restore    * @return<tt>true</tt> if there is a restore in progress of the specified table.    */
specifier|private
specifier|synchronized
name|boolean
name|isRestoringTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|Long
name|procId
init|=
name|this
operator|.
name|restoreTableToProcIdMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
name|procExec
operator|.
name|isRunning
argument_list|()
operator|&&
operator|!
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|this
operator|.
name|restoreTableToProcIdMap
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Return the handler if it is currently live and has the same snapshot target name.    * The handler is removed from the sentinels map if completed.    * @param sentinels live handlers    * @param snapshot snapshot description    * @return null if doesn't match, else a live handler.    */
specifier|private
specifier|synchronized
name|SnapshotSentinel
name|removeSentinelIfFinished
parameter_list|(
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
name|sentinels
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|snapshot
operator|.
name|hasTable
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TableName
name|snapshotTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotSentinel
name|h
init|=
name|sentinels
operator|.
name|get
argument_list|(
name|snapshotTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|h
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// specified snapshot is to the one currently running
return|return
literal|null
return|;
block|}
comment|// Remove from the "in-progress" list once completed
if|if
condition|(
name|h
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|sentinels
operator|.
name|remove
argument_list|(
name|snapshotTable
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/**    * Removes "abandoned" snapshot/restore requests.    * As part of the HBaseAdmin snapshot/restore API the operation status is checked until completed,    * and the in-progress maps are cleaned up when the status of a completed task is requested.    * To avoid having sentinels staying around for long time if something client side is failed,    * each operation tries to clean up the in-progress maps sentinels finished from a long time.    */
specifier|private
name|void
name|cleanupSentinels
parameter_list|()
block|{
name|cleanupSentinels
argument_list|(
name|this
operator|.
name|snapshotHandlers
argument_list|)
expr_stmt|;
name|cleanupCompletedRestoreInMap
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove the sentinels that are marked as finished and the completion time    * has exceeded the removal timeout.    * @param sentinels map of sentinels to clean    */
specifier|private
specifier|synchronized
name|void
name|cleanupSentinels
parameter_list|(
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
name|sentinels
parameter_list|)
block|{
name|long
name|currentTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|sentinelsCleanupTimeoutMillis
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|HBASE_SNAPSHOT_SENTINELS_CLEANUP_TIMEOUT_MILLIS
argument_list|,
name|SNAPSHOT_SENTINELS_CLEANUP_TIMEOUT_MILLS_DEFAULT
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
argument_list|>
name|it
init|=
name|sentinels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SnapshotSentinel
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SnapshotSentinel
name|sentinel
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|sentinel
operator|.
name|isFinished
argument_list|()
operator|&&
operator|(
name|currentTime
operator|-
name|sentinel
operator|.
name|getCompletionTimestamp
argument_list|()
operator|)
operator|>
name|sentinelsCleanupTimeoutMillis
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove the procedures that are marked as finished    */
specifier|private
specifier|synchronized
name|void
name|cleanupCompletedRestoreInMap
parameter_list|()
block|{
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|restoreTableToProcIdMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|procId
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|procExec
operator|.
name|isRunning
argument_list|()
operator|&&
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Implementing Stoppable interface
comment|//
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
comment|// short circuit
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
comment|// make sure we get stop
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
comment|// pass the stop onto take snapshot handlers
for|for
control|(
name|SnapshotSentinel
name|snapshotHandler
range|:
name|this
operator|.
name|snapshotHandlers
operator|.
name|values
argument_list|()
control|)
block|{
name|snapshotHandler
operator|.
name|cancel
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotHandlerChoreCleanerTask
operator|!=
literal|null
condition|)
block|{
name|snapshotHandlerChoreCleanerTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|coordinator
operator|!=
literal|null
condition|)
block|{
name|coordinator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"stop ProcedureCoordinator error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
comment|/**    * Throws an exception if snapshot operations (take a snapshot, restore, clone) are not supported.    * Called at the beginning of snapshot() and restoreSnapshot() methods.    * @throws UnsupportedOperationException if snapshot are not supported    */
specifier|public
name|void
name|checkSnapshotSupport
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isSnapshotSupported
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"To use snapshots, You must add to the hbase-site.xml of the HBase Master: '"
operator|+
name|HBASE_SNAPSHOT_ENABLED
operator|+
literal|"' property with value 'true'."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Called at startup, to verify if snapshot operation is supported, and to avoid    * starting the master if there're snapshots present but the cleaners needed are missing.    * Otherwise we can end up with snapshot data loss.    * @param conf The {@link Configuration} object to use    * @param mfs The MasterFileSystem to use    * @throws IOException in case of file-system operation failure    * @throws UnsupportedOperationException in case cleaners are missing and    *         there're snapshot in the system    */
specifier|private
name|void
name|checkSnapshotSupport
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|MasterFileSystem
name|mfs
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
comment|// Verify if snapshot is disabled by the user
name|String
name|enabled
init|=
name|conf
operator|.
name|get
argument_list|(
name|HBASE_SNAPSHOT_ENABLED
argument_list|)
decl_stmt|;
name|boolean
name|snapshotEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|userDisabled
init|=
operator|(
name|enabled
operator|!=
literal|null
operator|&&
name|enabled
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|snapshotEnabled
operator|)
decl_stmt|;
comment|// Extract cleaners from conf
name|Set
argument_list|<
name|String
argument_list|>
name|hfileCleaners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|cleaners
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HFileCleaner
operator|.
name|MASTER_HFILE_CLEANER_PLUGINS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleaners
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|addAll
argument_list|(
name|hfileCleaners
argument_list|,
name|cleaners
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logCleaners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|cleaners
operator|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOGCLEANER_PLUGINS
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleaners
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|addAll
argument_list|(
name|logCleaners
argument_list|,
name|cleaners
argument_list|)
expr_stmt|;
comment|// check if an older version of snapshot directory was present
name|Path
name|oldSnapshotDir
init|=
operator|new
name|Path
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|HConstants
operator|.
name|OLD_SNAPSHOT_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|ss
init|=
name|getCompletedSnapshots
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|oldSnapshotDir
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshots from an earlier release were found under: "
operator|+
name|oldSnapshotDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Please rename the directory as "
operator|+
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
argument_list|)
expr_stmt|;
block|}
comment|// If the user has enabled the snapshot, we force the cleaners to be present
comment|// otherwise we still need to check if cleaners are enabled or not and verify
comment|// that there're no snapshot in the .snapshot folder.
if|if
condition|(
name|snapshotEnabled
condition|)
block|{
comment|// Inject snapshot cleaners, if snapshot.enable is true
name|hfileCleaners
operator|.
name|add
argument_list|(
name|SnapshotHFileCleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hfileCleaners
operator|.
name|add
argument_list|(
name|HFileLinkCleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set cleaners conf
name|conf
operator|.
name|setStrings
argument_list|(
name|HFileCleaner
operator|.
name|MASTER_HFILE_CLEANER_PLUGINS
argument_list|,
name|hfileCleaners
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hfileCleaners
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOGCLEANER_PLUGINS
argument_list|,
name|logCleaners
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|logCleaners
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Verify if cleaners are present
name|snapshotEnabled
operator|=
name|hfileCleaners
operator|.
name|contains
argument_list|(
name|SnapshotHFileCleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|hfileCleaners
operator|.
name|contains
argument_list|(
name|HFileLinkCleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Warn if the cleaners are enabled but the snapshot.enabled property is false/not set.
if|if
condition|(
name|snapshotEnabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot log and hfile cleaners are present in the configuration, "
operator|+
literal|"but the '"
operator|+
name|HBASE_SNAPSHOT_ENABLED
operator|+
literal|"' property "
operator|+
operator|(
name|userDisabled
condition|?
literal|"is set to 'false'."
else|:
literal|"is not set."
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Mark snapshot feature as enabled if cleaners are present and user has not disabled it.
name|this
operator|.
name|isSnapshotSupported
operator|=
name|snapshotEnabled
operator|&&
operator|!
name|userDisabled
expr_stmt|;
comment|// If cleaners are not enabled, verify that there're no snapshot in the .snapshot folder
comment|// otherwise we end up with snapshot data loss.
if|if
condition|(
operator|!
name|snapshotEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot feature is not enabled, missing log and hfile cleaners."
argument_list|)
expr_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|snapshots
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshots are present, but cleaners are not enabled."
argument_list|)
expr_stmt|;
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|MetricsMaster
name|metricsMaster
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
throws|,
name|UnsupportedOperationException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
expr_stmt|;
name|checkSnapshotSupport
argument_list|(
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|master
operator|.
name|getMasterFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the configuration for the coordinator
name|Configuration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|wakeFrequency
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPSHOT_WAKE_MILLIS_KEY
argument_list|,
name|SNAPSHOT_WAKE_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|timeoutMillis
init|=
name|Math
operator|.
name|max
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|MASTER_SNAPSHOT_TIMEOUT_MILLIS
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|MASTER_SNAPSHOT_TIMEOUT_MILLIS
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|opThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPSHOT_POOL_THREADS_KEY
argument_list|,
name|SNAPSHOT_POOL_THREADS_DEFAULT
argument_list|)
decl_stmt|;
comment|// setup the default procedure coordinator
name|String
name|name
init|=
name|master
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|tpool
init|=
name|ProcedureCoordinator
operator|.
name|defaultPool
argument_list|(
name|name
argument_list|,
name|opThreads
argument_list|)
decl_stmt|;
name|ProcedureCoordinatorRpcs
name|comms
init|=
operator|new
name|ZKProcedureCoordinator
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|SnapshotManager
operator|.
name|ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|this
operator|.
name|coordinator
operator|=
operator|new
name|ProcedureCoordinator
argument_list|(
name|comms
argument_list|,
name|tpool
argument_list|,
name|timeoutMillis
argument_list|,
name|wakeFrequency
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|master
operator|.
name|getExecutorService
argument_list|()
expr_stmt|;
name|resetTempDir
argument_list|()
expr_stmt|;
name|snapshotHandlerChoreCleanerTask
operator|=
name|scheduleThreadPool
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|::
name|cleanupSentinels
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProcedureSignature
parameter_list|()
block|{
return|return
name|ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execProcedure
parameter_list|(
name|ProcedureDescription
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|takeSnapshot
argument_list|(
name|toSnapshotDescription
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermissions
parameter_list|(
name|ProcedureDescription
name|desc
parameter_list|,
name|AccessChecker
name|accessChecker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Done by AccessController as part of preSnapshot coprocessor hook (legacy code path).
comment|// In future, when we AC is removed for good, that check should be moved here.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProcedureDone
parameter_list|(
name|ProcedureDescription
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isSnapshotDone
argument_list|(
name|toSnapshotDescription
argument_list|(
name|desc
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|SnapshotDescription
name|toSnapshotDescription
parameter_list|(
name|ProcedureDescription
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|hasInstance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Snapshot name is not defined: "
operator|+
name|desc
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|snapshotName
init|=
name|desc
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NameStringPair
argument_list|>
name|props
init|=
name|desc
operator|.
name|getConfigurationList
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NameStringPair
name|prop
range|:
name|props
control|)
block|{
if|if
condition|(
literal|"table"
operator|.
name|equalsIgnoreCase
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|table
operator|=
name|prop
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Snapshot table is not defined: "
operator|+
name|desc
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

