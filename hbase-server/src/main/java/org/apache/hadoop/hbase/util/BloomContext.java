begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_comment
comment|/**  * The bloom context that is used by the StorefileWriter to add the bloom details  * per cell  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|BloomContext
block|{
comment|// TODO : Avoid holding references to lastCell
specifier|protected
name|Cell
name|lastCell
decl_stmt|;
specifier|protected
name|BloomFilterWriter
name|bloomFilterWriter
decl_stmt|;
specifier|public
name|BloomContext
parameter_list|(
name|BloomFilterWriter
name|bloomFilterWriter
parameter_list|)
block|{
name|this
operator|.
name|bloomFilterWriter
operator|=
name|bloomFilterWriter
expr_stmt|;
block|}
specifier|public
name|Cell
name|getLastCell
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastCell
return|;
block|}
comment|/**    * Bloom information from the cell is retrieved    * @param cell    * @throws IOException    */
specifier|public
name|void
name|writeBloom
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only add to the bloom filter on a new, unique key
if|if
condition|(
name|isNewKey
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|bloomFilterWriter
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastCell
operator|=
name|cell
expr_stmt|;
block|}
block|}
comment|/**    * Adds the last bloom key to the HFile Writer as part of StorefileWriter close.    * @param writer    * @throws IOException    */
specifier|public
specifier|abstract
name|void
name|addLastBloomKey
parameter_list|(
name|HFile
operator|.
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Returns true if the cell is a new key as per the bloom type    * @param cell the cell to be verified    * @return true if a new key else false    */
specifier|protected
specifier|abstract
name|boolean
name|isNewKey
parameter_list|(
name|Cell
name|cell
parameter_list|)
function_decl|;
block|}
end_class

end_unit

