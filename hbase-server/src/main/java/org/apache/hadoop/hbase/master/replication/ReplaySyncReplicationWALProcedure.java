begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|PeerProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|RSProcedureDispatcher
operator|.
name|ServerOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|FailedRemoteDispatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
operator|.
name|RemoteProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplaySyncReplicationWALCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|ReplaySyncReplicationWALParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|ReplaySyncReplicationWALStateData
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplaySyncReplicationWALProcedure
extends|extends
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
implements|implements
name|RemoteProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerName
argument_list|>
implements|,
name|PeerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplaySyncReplicationWALProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WAIT_AVAILABLE_SERVER_TIMEOUT
init|=
literal|10000
decl_stmt|;
specifier|private
name|String
name|peerId
decl_stmt|;
specifier|private
name|ServerName
name|targetServer
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|wal
decl_stmt|;
specifier|private
name|boolean
name|dispatched
decl_stmt|;
specifier|private
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
decl_stmt|;
specifier|private
name|boolean
name|succ
decl_stmt|;
specifier|public
name|ReplaySyncReplicationWALProcedure
parameter_list|()
block|{   }
specifier|public
name|ReplaySyncReplicationWALProcedure
parameter_list|(
name|String
name|peerId
parameter_list|,
name|String
name|wal
parameter_list|)
block|{
name|this
operator|.
name|peerId
operator|=
name|peerId
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|wal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteOperation
name|remoteCallBuild
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|remote
parameter_list|)
block|{
return|return
operator|new
name|ServerOperation
argument_list|(
name|this
argument_list|,
name|getProcId
argument_list|()
argument_list|,
name|ReplaySyncReplicationWALCallable
operator|.
name|class
argument_list|,
name|ReplaySyncReplicationWALParameter
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerId
argument_list|(
name|peerId
argument_list|)
operator|.
name|setWal
argument_list|(
name|wal
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteCallFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|remote
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
name|complete
argument_list|(
name|env
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationCompleted
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|complete
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remoteOperationFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RemoteProcedureException
name|error
parameter_list|)
block|{
name|complete
argument_list|(
name|env
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|complete
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"procedure event for {} is null, maybe the procedure is created when recovery"
argument_list|,
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ReplaySyncReplicationWALManager
name|replaySyncReplicationWALManager
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getReplaySyncReplicationWALManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replay sync replication wal {} on {} failed for peer id={}"
argument_list|,
name|wal
argument_list|,
name|targetServer
argument_list|,
name|peerId
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|this
operator|.
name|succ
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replay sync replication wal {} on {} suceeded for peer id={}"
argument_list|,
name|wal
argument_list|,
name|targetServer
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|succ
operator|=
literal|true
expr_stmt|;
name|replaySyncReplicationWALManager
operator|.
name|addAvailServer
argument_list|(
name|peerId
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|wake
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|dispatched
condition|)
block|{
if|if
condition|(
name|succ
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// retry
name|dispatched
operator|=
literal|false
expr_stmt|;
block|}
comment|// Try poll a available server
if|if
condition|(
name|targetServer
operator|==
literal|null
condition|)
block|{
name|targetServer
operator|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getReplaySyncReplicationWALManager
argument_list|()
operator|.
name|getAvailServer
argument_list|(
name|peerId
argument_list|,
name|DEFAULT_WAIT_AVAILABLE_SERVER_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetServer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No available server to replay wal {} for peer id={}, retry"
argument_list|,
name|wal
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
block|}
comment|// Dispatch task to target server
try|try
block|{
name|env
operator|.
name|getRemoteDispatcher
argument_list|()
operator|.
name|addOperationToNode
argument_list|(
name|targetServer
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedRemoteDispatchException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can not add remote operation for replay wal {} on {} for peer id={}, "
operator|+
literal|"this usually because the server is already dead, "
operator|+
literal|"retry"
argument_list|,
name|wal
argument_list|,
name|targetServer
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|targetServer
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
name|dispatched
operator|=
literal|true
expr_stmt|;
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|<>
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplaySyncReplicationWALStateData
operator|.
name|Builder
name|builder
init|=
name|ReplaySyncReplicationWALStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerId
argument_list|(
name|peerId
argument_list|)
operator|.
name|setWal
argument_list|(
name|wal
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetServer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTargetServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|serialize
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplaySyncReplicationWALStateData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|ReplaySyncReplicationWALStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|peerId
operator|=
name|data
operator|.
name|getPeerId
argument_list|()
expr_stmt|;
name|wal
operator|=
name|data
operator|.
name|getWal
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasTargetServer
argument_list|()
condition|)
block|{
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getTargetServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPeerId
parameter_list|()
block|{
return|return
name|peerId
return|;
block|}
annotation|@
name|Override
specifier|public
name|PeerOperationType
name|getPeerOperationType
parameter_list|()
block|{
return|return
name|PeerOperationType
operator|.
name|REPLAY_SYNC_REPLICATION_WAL
return|;
block|}
block|}
end_class

end_unit

