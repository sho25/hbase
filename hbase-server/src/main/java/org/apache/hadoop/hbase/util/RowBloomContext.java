begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|LAST_BLOOM_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Handles ROW bloom related context. It works with both ByteBufferedCell and byte[] backed cells  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RowBloomContext
extends|extends
name|BloomContext
block|{
specifier|public
name|RowBloomContext
parameter_list|(
name|BloomFilterWriter
name|bloomFilterWriter
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
block|{
name|super
argument_list|(
name|bloomFilterWriter
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addLastBloomKey
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|getLastCell
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|CellUtil
operator|.
name|copyRow
argument_list|(
name|this
operator|.
name|getLastCell
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|appendFileInfo
argument_list|(
name|LAST_BLOOM_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isNewKey
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getLastCell
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|!
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|cell
argument_list|,
name|this
operator|.
name|getLastCell
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

