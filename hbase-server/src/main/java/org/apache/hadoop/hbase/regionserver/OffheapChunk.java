begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * An off heap chunk implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|OffheapChunk
extends|extends
name|Chunk
block|{
name|OffheapChunk
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
assert|assert
name|nextFreeOffset
operator|.
name|get
argument_list|()
operator|==
name|UNINITIALIZED
assert|;
try|try
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|this
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|boolean
name|failInit
init|=
name|nextFreeOffset
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED
argument_list|,
name|OOM
argument_list|)
decl_stmt|;
assert|assert
name|failInit
assert|;
comment|// should be true.
throw|throw
name|e
throw|;
block|}
comment|// Mark that it's ready for use
name|boolean
name|initted
init|=
name|nextFreeOffset
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// We should always succeed the above CAS since only one thread
comment|// calls init()!
name|Preconditions
operator|.
name|checkState
argument_list|(
name|initted
argument_list|,
literal|"Multiple threads tried to init same chunk"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

