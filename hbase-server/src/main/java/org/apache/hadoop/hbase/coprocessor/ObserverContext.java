begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_comment
comment|/**  * Carries the execution state for a given invocation of an Observer coprocessor  * ({@link RegionObserver}, {@link MasterObserver}, or {@link WALObserver})  * method.  The same ObserverContext instance is passed sequentially to all loaded  * coprocessors for a given Observer method trigger, with the  *<code>CoprocessorEnvironment</code> reference swapped out for each  * coprocessor.  * @param<E> The {@link CoprocessorEnvironment} subclass applicable to the  *     revelant Observer interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ObserverContext
parameter_list|<
name|E
extends|extends
name|CoprocessorEnvironment
parameter_list|>
block|{
specifier|private
name|E
name|env
decl_stmt|;
specifier|private
name|boolean
name|bypass
decl_stmt|;
specifier|private
name|boolean
name|complete
decl_stmt|;
specifier|public
name|ObserverContext
parameter_list|()
block|{   }
specifier|public
name|E
name|getEnvironment
parameter_list|()
block|{
return|return
name|env
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|E
name|env
parameter_list|)
block|{
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
block|}
comment|/**    * Call to indicate that the current coprocessor's return value should be    * used in place of the normal HBase obtained value.    */
specifier|public
name|void
name|bypass
parameter_list|()
block|{
name|bypass
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Call to indicate that additional coprocessors further down the execution    * chain do not need to be invoked.  Implies that this coprocessor's response    * is definitive.    */
specifier|public
name|void
name|complete
parameter_list|()
block|{
name|complete
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * For use by the coprocessor framework.    * @return<code>true</code> if {@link ObserverContext#bypass()}    *     was called by one of the loaded coprocessors,<code>false</code> otherwise.    */
specifier|public
name|boolean
name|shouldBypass
parameter_list|()
block|{
name|boolean
name|current
init|=
name|bypass
decl_stmt|;
name|bypass
operator|=
literal|false
expr_stmt|;
return|return
name|current
return|;
block|}
comment|/**    * For use by the coprocessor framework.    * @return<code>true</code> if {@link ObserverContext#complete()}    *     was called by one of the loaded coprocessors,<code>false</code> otherwise.    */
specifier|public
name|boolean
name|shouldComplete
parameter_list|()
block|{
name|boolean
name|current
init|=
name|complete
decl_stmt|;
name|complete
operator|=
literal|false
expr_stmt|;
return|return
name|current
return|;
block|}
comment|/**    * Instantiates a new ObserverContext instance if the passed reference is    *<code>null</code> and sets the environment in the new or existing instance.    * This allows deferring the instantiation of a ObserverContext until it is    * actually needed.    *    * @param env The coprocessor environment to set    * @param context An existing ObserverContext instance to use, or<code>null</code>    *     to create a new instance    * @param<T> The environment type for the context    * @return An instance of<code>ObserverContext</code> with the environment set    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|CoprocessorEnvironment
parameter_list|>
name|ObserverContext
argument_list|<
name|T
argument_list|>
name|createAndPrepare
parameter_list|(
name|T
name|env
parameter_list|,
name|ObserverContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ObserverContext
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|prepare
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

