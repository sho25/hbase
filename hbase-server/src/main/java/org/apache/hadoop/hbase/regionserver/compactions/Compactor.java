begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|EARLIEST_PUT_TS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|TIMERANGE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|CellSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ShipperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TimeRangeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_comment
comment|/**  * A compactor is a compaction algorithm associated a given policy. Base class also contains  * reusable parts for implementing compactors (what is common and what isn't is evolving).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|Compactor
parameter_list|<
name|T
extends|extends
name|CellSink
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Compactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|long
name|COMPACTION_PROGRESS_LOG_INTERVAL
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|protected
specifier|volatile
name|CompactionProgress
name|progress
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|HStore
name|store
decl_stmt|;
specifier|protected
specifier|final
name|int
name|compactionKVMax
decl_stmt|;
specifier|protected
specifier|final
name|Compression
operator|.
name|Algorithm
name|compactionCompression
decl_stmt|;
comment|/** specify how many days to keep MVCC values during major compaction **/
specifier|protected
name|int
name|keepSeqIdPeriod
decl_stmt|;
comment|// Configs that drive whether we drop page cache behind compactions
specifier|protected
specifier|static
specifier|final
name|String
name|MAJOR_COMPACTION_DROP_CACHE
init|=
literal|"hbase.regionserver.majorcompaction.pagecache.drop"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MINOR_COMPACTION_DROP_CACHE
init|=
literal|"hbase.regionserver.minorcompaction.pagecache.drop"
decl_stmt|;
specifier|private
name|boolean
name|dropCacheMajor
decl_stmt|;
specifier|private
name|boolean
name|dropCacheMinor
decl_stmt|;
comment|//TODO: depending on Store is not good but, realistically, all compactors currently do.
name|Compactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|compactionKVMax
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|COMPACTION_KV_MAX
argument_list|,
name|HConstants
operator|.
name|COMPACTION_KV_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactionCompression
operator|=
operator|(
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
else|:
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|getCompactionCompressionType
argument_list|()
expr_stmt|;
name|this
operator|.
name|keepSeqIdPeriod
operator|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|KEEP_SEQID_PERIOD
argument_list|,
name|HConstants
operator|.
name|MIN_KEEP_SEQID_PERIOD
argument_list|)
argument_list|,
name|HConstants
operator|.
name|MIN_KEEP_SEQID_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropCacheMajor
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MAJOR_COMPACTION_DROP_CACHE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropCacheMinor
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MINOR_COMPACTION_DROP_CACHE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
interface|interface
name|CellSinkFactory
parameter_list|<
name|S
parameter_list|>
block|{
name|S
name|createWriter
parameter_list|(
name|InternalScanner
name|scanner
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|boolean
name|shouldDropBehind
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
name|CompactionProgress
name|getProgress
parameter_list|()
block|{
return|return
name|this
operator|.
name|progress
return|;
block|}
comment|/** The sole reason this class exists is that java has no ref/out/pointer parameters. */
specifier|protected
specifier|static
class|class
name|FileDetails
block|{
comment|/** Maximum key count after compaction (for blooms) */
specifier|public
name|long
name|maxKeyCount
init|=
literal|0
decl_stmt|;
comment|/** Earliest put timestamp if major compaction */
specifier|public
name|long
name|earliestPutTs
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
comment|/** Latest put timestamp */
specifier|public
name|long
name|latestPutTs
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
comment|/** The last key in the files we're compacting. */
specifier|public
name|long
name|maxSeqId
init|=
literal|0
decl_stmt|;
comment|/** Latest memstore read point found in any of the involved files */
specifier|public
name|long
name|maxMVCCReadpoint
init|=
literal|0
decl_stmt|;
comment|/** Max tags length**/
specifier|public
name|int
name|maxTagsLength
init|=
literal|0
decl_stmt|;
comment|/** Min SeqId to keep during a major compaction **/
specifier|public
name|long
name|minSeqIdToKeep
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Extracts some details about the files to compact that are commonly needed by compactors.    * @param filesToCompact Files.    * @param allFiles Whether all files are included for compaction    * @return The result.    */
specifier|protected
name|FileDetails
name|getFileDetails
parameter_list|(
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|filesToCompact
parameter_list|,
name|boolean
name|allFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|FileDetails
name|fd
init|=
operator|new
name|FileDetails
argument_list|()
decl_stmt|;
name|long
name|oldestHFileTimeStampToKeepMVCC
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
literal|1000L
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
name|this
operator|.
name|keepSeqIdPeriod
operator|)
decl_stmt|;
for|for
control|(
name|HStoreFile
name|file
range|:
name|filesToCompact
control|)
block|{
if|if
condition|(
name|allFiles
operator|&&
operator|(
name|file
operator|.
name|getModificationTimeStamp
argument_list|()
operator|<
name|oldestHFileTimeStampToKeepMVCC
operator|)
condition|)
block|{
comment|// when isAllFiles is true, all files are compacted so we can calculate the smallest
comment|// MVCC value to keep
if|if
condition|(
name|fd
operator|.
name|minSeqIdToKeep
operator|<
name|file
operator|.
name|getMaxMemstoreTS
argument_list|()
condition|)
block|{
name|fd
operator|.
name|minSeqIdToKeep
operator|=
name|file
operator|.
name|getMaxMemstoreTS
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|seqNum
init|=
name|file
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
name|fd
operator|.
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fd
operator|.
name|maxSeqId
argument_list|,
name|seqNum
argument_list|)
expr_stmt|;
name|StoreFileReader
name|r
init|=
name|file
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null reader for "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// NOTE: use getEntries when compacting instead of getFilterEntries, otherwise under-sized
comment|// blooms can cause progress to be miscalculated or if the user switches bloom
comment|// type (e.g. from ROW to ROWCOL)
name|long
name|keyCount
init|=
name|r
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|fd
operator|.
name|maxKeyCount
operator|+=
name|keyCount
expr_stmt|;
comment|// calculate the latest MVCC readpoint in any of the involved store files
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|fileInfo
init|=
name|r
operator|.
name|loadFileInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tmp
init|=
literal|null
decl_stmt|;
comment|// Get and set the real MVCCReadpoint for bulk loaded files, which is the
comment|// SeqId number.
if|if
condition|(
name|r
operator|.
name|isBulkLoaded
argument_list|()
condition|)
block|{
name|fd
operator|.
name|maxMVCCReadpoint
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fd
operator|.
name|maxMVCCReadpoint
argument_list|,
name|r
operator|.
name|getSequenceID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|fileInfo
operator|.
name|get
argument_list|(
name|HFile
operator|.
name|Writer
operator|.
name|MAX_MEMSTORE_TS_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|fd
operator|.
name|maxMVCCReadpoint
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fd
operator|.
name|maxMVCCReadpoint
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|tmp
operator|=
name|fileInfo
operator|.
name|get
argument_list|(
name|FileInfo
operator|.
name|MAX_TAGS_LEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|fd
operator|.
name|maxTagsLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fd
operator|.
name|maxTagsLength
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If required, calculate the earliest put timestamp of all involved storefiles.
comment|// This is used to remove family delete marker during compaction.
name|long
name|earliestPutTs
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|allFiles
condition|)
block|{
name|tmp
operator|=
name|fileInfo
operator|.
name|get
argument_list|(
name|EARLIEST_PUT_TS
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
comment|// There's a file with no information, must be an old one
comment|// assume we have very old puts
name|fd
operator|.
name|earliestPutTs
operator|=
name|earliestPutTs
operator|=
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
expr_stmt|;
block|}
else|else
block|{
name|earliestPutTs
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|fd
operator|.
name|earliestPutTs
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fd
operator|.
name|earliestPutTs
argument_list|,
name|earliestPutTs
argument_list|)
expr_stmt|;
block|}
block|}
name|tmp
operator|=
name|fileInfo
operator|.
name|get
argument_list|(
name|TIMERANGE_KEY
argument_list|)
expr_stmt|;
name|TimeRangeTracker
name|trt
init|=
name|TimeRangeTracker
operator|.
name|getTimeRangeTracker
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|fd
operator|.
name|latestPutTs
operator|=
name|trt
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|LATEST_TIMESTAMP
else|:
name|trt
operator|.
name|getMax
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compacting "
operator|+
name|file
operator|+
literal|", keycount="
operator|+
name|keyCount
operator|+
literal|", bloomtype="
operator|+
name|r
operator|.
name|getBloomFilterType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", size="
operator|+
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|r
operator|.
name|length
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
operator|+
literal|", encoding="
operator|+
name|r
operator|.
name|getHFileReader
argument_list|()
operator|.
name|getDataBlockEncoding
argument_list|()
operator|+
literal|", seqNum="
operator|+
name|seqNum
operator|+
operator|(
name|allFiles
condition|?
literal|", earliestPutTs="
operator|+
name|earliestPutTs
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fd
return|;
block|}
comment|/**    * Creates file scanners for compaction.    * @param filesToCompact Files.    * @return Scanners.    */
specifier|protected
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|createFileScanners
parameter_list|(
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|filesToCompact
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|boolean
name|useDropBehind
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|StoreFileScanner
operator|.
name|getScannersForCompaction
argument_list|(
name|filesToCompact
argument_list|,
name|useDropBehind
argument_list|,
name|smallestReadPoint
argument_list|)
return|;
block|}
specifier|protected
name|long
name|getSmallestReadPoint
parameter_list|()
block|{
return|return
name|store
operator|.
name|getSmallestReadPoint
argument_list|()
return|;
block|}
specifier|protected
interface|interface
name|InternalScannerFactory
block|{
name|ScanType
name|getScanType
parameter_list|(
name|CompactionRequest
name|request
parameter_list|)
function_decl|;
name|InternalScanner
name|createScanner
parameter_list|(
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|protected
specifier|final
name|InternalScannerFactory
name|defaultScannerFactory
init|=
operator|new
name|InternalScannerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScanType
name|getScanType
parameter_list|(
name|CompactionRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|isAllFiles
argument_list|()
condition|?
name|ScanType
operator|.
name|COMPACT_DROP_DELETES
else|:
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
return|;
block|}
annotation|@
name|Override
specifier|public
name|InternalScanner
name|createScanner
parameter_list|(
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Compactor
operator|.
name|this
operator|.
name|createScanner
argument_list|(
name|store
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|fd
operator|.
name|earliestPutTs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates a writer for a new file in a temporary directory.    * @param fd The file details.    * @return Writer for a new StoreFile in the tmp dir.    * @throws IOException if creation failed    */
specifier|protected
name|StoreFileWriter
name|createTmpWriter
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|boolean
name|shouldDropBehind
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When all MVCC readpoints are 0, don't write them.
comment|// See HBASE-8166, HBASE-12600, and HBASE-13389.
return|return
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|this
operator|.
name|compactionCompression
argument_list|,
comment|/* isCompaction = */
literal|true
argument_list|,
comment|/* includeMVCCReadpoint = */
name|fd
operator|.
name|maxMVCCReadpoint
operator|>
literal|0
argument_list|,
comment|/* includesTags = */
name|fd
operator|.
name|maxTagsLength
operator|>
literal|0
argument_list|,
name|shouldDropBehind
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
specifier|final
name|CompactionRequest
name|request
parameter_list|,
name|InternalScannerFactory
name|scannerFactory
parameter_list|,
name|CellSinkFactory
argument_list|<
name|T
argument_list|>
name|sinkFactory
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|FileDetails
name|fd
init|=
name|getFileDetails
argument_list|(
name|request
operator|.
name|getFiles
argument_list|()
argument_list|,
name|request
operator|.
name|isAllFiles
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|progress
operator|=
operator|new
name|CompactionProgress
argument_list|(
name|fd
operator|.
name|maxKeyCount
argument_list|)
expr_stmt|;
comment|// Find the smallest read point across all the Scanners.
name|long
name|smallestReadPoint
init|=
name|getSmallestReadPoint
argument_list|()
decl_stmt|;
name|T
name|writer
init|=
literal|null
decl_stmt|;
name|boolean
name|dropCache
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isMajor
argument_list|()
operator|||
name|request
operator|.
name|isAllFiles
argument_list|()
condition|)
block|{
name|dropCache
operator|=
name|this
operator|.
name|dropCacheMajor
expr_stmt|;
block|}
else|else
block|{
name|dropCache
operator|=
name|this
operator|.
name|dropCacheMinor
expr_stmt|;
block|}
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
init|=
name|createFileScanners
argument_list|(
name|request
operator|.
name|getFiles
argument_list|()
argument_list|,
name|smallestReadPoint
argument_list|,
name|dropCache
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|/* Include deletes, unless we are doing a major compaction */
name|ScanType
name|scanType
init|=
name|scannerFactory
operator|.
name|getScanType
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|preCreateCoprocScanner
argument_list|(
name|request
argument_list|,
name|scanType
argument_list|,
name|fd
operator|.
name|earliestPutTs
argument_list|,
name|scanners
argument_list|,
name|user
argument_list|,
name|smallestReadPoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
name|scannerFactory
operator|.
name|createScanner
argument_list|(
name|scanners
argument_list|,
name|scanType
argument_list|,
name|fd
argument_list|,
name|smallestReadPoint
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|=
name|postCreateCoprocScanner
argument_list|(
name|request
argument_list|,
name|scanType
argument_list|,
name|scanner
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
comment|// NULL scanner returned from coprocessor hooks means skip normal processing.
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
name|boolean
name|cleanSeqId
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fd
operator|.
name|minSeqIdToKeep
operator|>
literal|0
operator|&&
operator|!
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|isNewVersionBehavior
argument_list|()
condition|)
block|{
comment|// For mvcc-sensitive family, we never set mvcc to 0.
name|smallestReadPoint
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fd
operator|.
name|minSeqIdToKeep
argument_list|,
name|smallestReadPoint
argument_list|)
expr_stmt|;
name|cleanSeqId
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|=
name|sinkFactory
operator|.
name|createWriter
argument_list|(
name|scanner
argument_list|,
name|fd
argument_list|,
name|dropCache
argument_list|)
expr_stmt|;
name|finished
operator|=
name|performCompaction
argument_list|(
name|fd
argument_list|,
name|scanner
argument_list|,
name|writer
argument_list|,
name|smallestReadPoint
argument_list|,
name|cleanSeqId
argument_list|,
name|throughputController
argument_list|,
name|request
operator|.
name|isAllFiles
argument_list|()
argument_list|,
name|request
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Aborting compaction of store "
operator|+
name|store
operator|+
literal|" in region "
operator|+
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because it was interrupted."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|scanner
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|&&
name|writer
operator|!=
literal|null
condition|)
block|{
name|abortWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|finished
operator|:
literal|"We should have exited the method on all error paths"
assert|;
assert|assert
name|writer
operator|!=
literal|null
operator|:
literal|"Writer should be non-null if no error"
assert|;
return|return
name|commitWriter
argument_list|(
name|writer
argument_list|,
name|fd
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Path
argument_list|>
name|commitWriter
parameter_list|(
name|T
name|writer
parameter_list|,
name|FileDetails
name|fd
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|abortWriter
parameter_list|(
name|T
name|writer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Calls coprocessor, if any, to create compaction scanner - before normal scanner creation.    * @param request Compaction request.    * @param scanType Scan type.    * @param earliestPutTs Earliest put ts.    * @param scanners File scanners for compaction files.    * @param user the User    * @param readPoint the read point to help create scanner by Coprocessor if required.    * @return Scanner override by coprocessor; null if not overriding.    */
specifier|protected
name|InternalScanner
name|preCreateCoprocScanner
parameter_list|(
name|CompactionRequest
name|request
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|User
name|user
parameter_list|,
name|long
name|readPoint
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|store
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCompactScannerOpen
argument_list|(
name|store
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|earliestPutTs
argument_list|,
name|request
operator|.
name|getTracker
argument_list|()
argument_list|,
name|user
argument_list|,
name|readPoint
argument_list|)
return|;
block|}
comment|/**    * Calls coprocessor, if any, to create scanners - after normal scanner creation.    * @param request Compaction request.    * @param scanType Scan type.    * @param scanner The default scanner created for compaction.    * @return Scanner scanner to use (usually the default); null if compaction should not proceed.    */
specifier|protected
name|InternalScanner
name|postCreateCoprocScanner
parameter_list|(
name|CompactionRequest
name|request
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|scanner
return|;
block|}
return|return
name|store
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCompact
argument_list|(
name|store
argument_list|,
name|scanner
argument_list|,
name|scanType
argument_list|,
name|request
operator|.
name|getTracker
argument_list|()
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Performs the compaction.    * @param fd FileDetails of cell sink writer    * @param scanner Where to read from.    * @param writer Where to write to.    * @param smallestReadPoint Smallest read point.    * @param cleanSeqId When true, remove seqId(used to be mvcc) value which is&lt;=    *          smallestReadPoint    * @param major Is a major compaction.    * @param numofFilesToCompact the number of files to compact    * @return Whether compaction ended; false if it was interrupted for some reason.    */
specifier|protected
name|boolean
name|performCompaction
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|CellSink
name|writer
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|boolean
name|cleanSeqId
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|boolean
name|major
parameter_list|,
name|int
name|numofFilesToCompact
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|writer
operator|instanceof
name|ShipperListener
assert|;
name|long
name|bytesWrittenProgressForCloseCheck
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForLog
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForShippedCall
init|=
literal|0
decl_stmt|;
comment|// Since scanner.next() can return 'false' but still be delivering data,
comment|// we have to use a do/while loop.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|closeCheckSizeLimit
init|=
name|HStore
operator|.
name|getCloseCheckInterval
argument_list|()
decl_stmt|;
name|long
name|lastMillis
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|lastMillis
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
name|String
name|compactionName
init|=
name|ThroughputControlUtil
operator|.
name|getNameForThrottling
argument_list|(
name|store
argument_list|,
literal|"compaction"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
literal|0
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|throughputController
operator|.
name|start
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
name|KeyValueScanner
name|kvs
init|=
operator|(
name|scanner
operator|instanceof
name|KeyValueScanner
operator|)
condition|?
operator|(
name|KeyValueScanner
operator|)
name|scanner
else|:
literal|null
decl_stmt|;
name|long
name|shippedCallSizeLimit
init|=
operator|(
name|long
operator|)
name|numofFilesToCompact
operator|*
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
try|try
block|{
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|now
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
comment|// output to writer:
name|Cell
name|lastCleanCell
init|=
literal|null
decl_stmt|;
name|long
name|lastCleanCellSeqId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
if|if
condition|(
name|cleanSeqId
operator|&&
name|c
operator|.
name|getSequenceId
argument_list|()
operator|<=
name|smallestReadPoint
condition|)
block|{
name|lastCleanCell
operator|=
name|c
expr_stmt|;
name|lastCleanCellSeqId
operator|=
name|c
operator|.
name|getSequenceId
argument_list|()
expr_stmt|;
name|CellUtil
operator|.
name|setSequenceId
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastCleanCell
operator|=
literal|null
expr_stmt|;
name|lastCleanCellSeqId
operator|=
literal|0
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|c
argument_list|)
decl_stmt|;
operator|++
name|progress
operator|.
name|currentCompactedKVs
expr_stmt|;
name|progress
operator|.
name|totalCompactedSize
operator|+=
name|len
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|bytesWrittenProgressForLog
operator|+=
name|len
expr_stmt|;
block|}
name|throughputController
operator|.
name|control
argument_list|(
name|compactionName
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// check periodically to see if a system stop is requested
if|if
condition|(
name|closeCheckSizeLimit
operator|>
literal|0
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|bytesWrittenProgressForCloseCheck
operator|>
name|closeCheckSizeLimit
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|areWritesEnabled
argument_list|()
condition|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|kvs
operator|!=
literal|null
operator|&&
name|bytesWrittenProgressForShippedCall
operator|>
name|shippedCallSizeLimit
condition|)
block|{
if|if
condition|(
name|lastCleanCell
operator|!=
literal|null
condition|)
block|{
comment|// HBASE-16931, set back sequence id to avoid affecting scan order unexpectedly.
comment|// ShipperListener will do a clone of the last cells it refer, so need to set back
comment|// sequence id before ShipperListener.beforeShipped
name|CellUtil
operator|.
name|setSequenceId
argument_list|(
name|lastCleanCell
argument_list|,
name|lastCleanCellSeqId
argument_list|)
expr_stmt|;
block|}
comment|// Clone the cells that are in the writer so that they are freed of references,
comment|// if they are holding any.
operator|(
operator|(
name|ShipperListener
operator|)
name|writer
operator|)
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
comment|// The SHARED block references, being read for compaction, will be kept in prevBlocks
comment|// list(See HFileScannerImpl#prevBlocks). In case of scan flow, after each set of cells
comment|// being returned to client, we will call shipped() which can clear this list. Here by
comment|// we are doing the similar thing. In between the compaction (after every N cells
comment|// written with collective size of 'shippedCallSizeLimit') we will call shipped which
comment|// may clear prevBlocks list.
name|kvs
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastCleanCell
operator|!=
literal|null
condition|)
block|{
comment|// HBASE-16931, set back sequence id to avoid affecting scan order unexpectedly
name|CellUtil
operator|.
name|setSequenceId
argument_list|(
name|lastCleanCell
argument_list|,
name|lastCleanCellSeqId
argument_list|)
expr_stmt|;
block|}
comment|// Log the progress of long running compactions every minute if
comment|// logging at DEBUG level
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|>=
name|COMPACTION_PROGRESS_LOG_INTERVAL
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction progress: "
operator|+
name|compactionName
operator|+
literal|" "
operator|+
name|progress
operator|+
name|String
operator|.
name|format
argument_list|(
literal|", rate=%.2f kB/sec"
argument_list|,
operator|(
name|bytesWrittenProgressForLog
operator|/
literal|1024.0
operator|)
operator|/
operator|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
operator|+
literal|", throughputController is "
operator|+
name|throughputController
argument_list|)
expr_stmt|;
name|lastMillis
operator|=
name|now
expr_stmt|;
name|bytesWrittenProgressForLog
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while control throughput of compacting "
operator|+
name|compactionName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|throughputController
operator|.
name|finish
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|complete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * @param store store    * @param scanners Store file scanners.    * @param scanType Scan type.    * @param smallestReadPoint Smallest MVCC read point.    * @param earliestPutTs Earliest put across all files.    * @return A compaction scanner.    */
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|,
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|)
return|;
block|}
comment|/**    * @param store The store.    * @param scanners Store file scanners.    * @param smallestReadPoint Smallest MVCC read point.    * @param earliestPutTs Earliest put across all files.    * @param dropDeletesFromRow Drop deletes starting with this row, inclusive. Can be null.    * @param dropDeletesToRow Drop deletes ending with this row, exclusive. Can be null.    * @return A compaction scanner.    */
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|,
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|,
name|scanners
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|,
name|dropDeletesFromRow
argument_list|,
name|dropDeletesToRow
argument_list|)
return|;
block|}
block|}
end_class

end_unit

