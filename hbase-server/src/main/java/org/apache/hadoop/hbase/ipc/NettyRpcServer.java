begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|PooledByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOutboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPromise
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|LengthFieldBasedFrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|GlobalEventExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredRPCHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBasePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ServiceAuthorizationManager
import|;
end_import

begin_comment
comment|/**  * An RPC server with Netty4 implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NettyRpcServer
extends|extends
name|RpcServer
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NettyRpcServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|InetSocketAddress
name|bindAddress
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|closed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Channel
name|serverChannel
decl_stmt|;
specifier|private
specifier|final
name|ChannelGroup
name|allChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|(
name|GlobalEventExecutor
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|public
name|NettyRpcServer
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|services
parameter_list|,
specifier|final
name|InetSocketAddress
name|bindAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
argument_list|,
name|name
argument_list|,
name|services
argument_list|,
name|bindAddress
argument_list|,
name|conf
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindAddress
operator|=
name|bindAddress
expr_stmt|;
name|boolean
name|useEpoll
init|=
name|useEpoll
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|workerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.netty.rpc.server.worker.count"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|4
argument_list|)
decl_stmt|;
name|EventLoopGroup
name|bossGroup
init|=
literal|null
decl_stmt|;
name|EventLoopGroup
name|workerGroup
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useEpoll
condition|)
block|{
name|bossGroup
operator|=
operator|new
name|EpollEventLoopGroup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|workerGroup
operator|=
operator|new
name|EpollEventLoopGroup
argument_list|(
name|workerCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bossGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|workerGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
name|workerCount
argument_list|)
expr_stmt|;
block|}
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|()
decl_stmt|;
name|bootstrap
operator|.
name|group
argument_list|(
name|bossGroup
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|useEpoll
condition|)
block|{
name|bootstrap
operator|.
name|channel
argument_list|(
name|EpollServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bootstrap
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|bootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|tcpKeepAlive
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|ALLOCATOR
argument_list|,
name|PooledByteBufAllocator
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|childHandler
argument_list|(
operator|new
name|Initializer
argument_list|(
name|maxRequestSize
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|serverChannel
operator|=
name|bootstrap
operator|.
name|bind
argument_list|(
name|this
operator|.
name|bindAddress
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NettyRpcServer bind to address="
operator|+
name|serverChannel
operator|.
name|localAddress
argument_list|()
operator|+
literal|", hbase.netty.rpc.server.worker.count="
operator|+
name|workerCount
operator|+
literal|", useEpoll="
operator|+
name|useEpoll
argument_list|)
expr_stmt|;
name|allChannels
operator|.
name|add
argument_list|(
name|serverChannel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|initReconfigurable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|init
argument_list|(
operator|new
name|RpcSchedulerContext
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|useEpoll
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Config to enable native transport.
name|boolean
name|epollEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.rpc.server.nativetransport"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Use the faster native epoll transport mechanism on linux if enabled
return|return
name|epollEnabled
operator|&&
name|JVM
operator|.
name|isLinux
argument_list|()
operator|&&
name|JVM
operator|.
name|isAmd64
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|started
condition|)
block|{
return|return;
block|}
name|authTokenSecretMgr
operator|=
name|createSecretManager
argument_list|()
expr_stmt|;
if|if
condition|(
name|authTokenSecretMgr
operator|!=
literal|null
condition|)
block|{
name|setSecretManager
argument_list|(
name|authTokenSecretMgr
argument_list|)
expr_stmt|;
name|authTokenSecretMgr
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|authManager
operator|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
expr_stmt|;
name|HBasePolicyProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|authManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping server on "
operator|+
name|this
operator|.
name|bindAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authTokenSecretMgr
operator|!=
literal|null
condition|)
block|{
name|authTokenSecretMgr
operator|.
name|stop
argument_list|()
expr_stmt|;
name|authTokenSecretMgr
operator|=
literal|null
expr_stmt|;
block|}
name|allChannels
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|serverChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|closed
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|closed
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|InetSocketAddress
name|getListenerAddress
parameter_list|()
block|{
return|return
operator|(
operator|(
name|InetSocketAddress
operator|)
name|serverChannel
operator|.
name|localAddress
argument_list|()
operator|)
return|;
block|}
specifier|private
class|class
name|Initializer
extends|extends
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
block|{
specifier|final
name|int
name|maxRequestSize
decl_stmt|;
name|Initializer
parameter_list|(
name|int
name|maxRequestSize
parameter_list|)
block|{
name|this
operator|.
name|maxRequestSize
operator|=
name|maxRequestSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|channel
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"header"
argument_list|,
operator|new
name|ConnectionHeaderHandler
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"frameDecoder"
argument_list|,
operator|new
name|LengthFieldBasedFrameDecoder
argument_list|(
name|maxRequestSize
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
operator|new
name|MessageDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
operator|new
name|MessageEncoder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ConnectionHeaderHandler
extends|extends
name|ByteToMessageDecoder
block|{
specifier|private
name|NettyServerRpcConnection
name|connection
decl_stmt|;
name|ConnectionHeaderHandler
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|byteBuf
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|byteBuf
operator|.
name|readableBytes
argument_list|()
operator|<
literal|6
condition|)
block|{
return|return;
block|}
name|connection
operator|=
operator|new
name|NettyServerRpcConnection
argument_list|(
name|NettyRpcServer
operator|.
name|this
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|readPreamble
argument_list|(
name|byteBuf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MessageDecoder
operator|)
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|get
argument_list|(
literal|"decoder"
argument_list|)
operator|)
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MessageDecoder
extends|extends
name|ChannelInboundHandlerAdapter
block|{
specifier|private
name|NettyServerRpcConnection
name|connection
decl_stmt|;
name|void
name|setConnection
parameter_list|(
name|NettyServerRpcConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|allChannels
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection from "
operator|+
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|remoteAddress
argument_list|()
operator|+
literal|"; # active connections: "
operator|+
name|getNumOpenConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|channelActive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuf
name|input
init|=
operator|(
name|ByteBuf
operator|)
name|msg
decl_stmt|;
comment|// 4 bytes length field
name|metrics
operator|.
name|receivedBytes
argument_list|(
name|input
operator|.
name|readableBytes
argument_list|()
operator|+
literal|4
argument_list|)
expr_stmt|;
name|connection
operator|.
name|process
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|allChannels
operator|.
name|remove
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disconnecting client: "
operator|+
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|remoteAddress
argument_list|()
operator|+
literal|". Number of active connections: "
operator|+
name|getNumOpenConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|channelInactive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|allChannels
operator|.
name|remove
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection from "
operator|+
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|remoteAddress
argument_list|()
operator|+
literal|" catch unexpected exception from downstream."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MessageEncoder
extends|extends
name|ChannelOutboundHandlerAdapter
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|,
name|ChannelPromise
name|promise
parameter_list|)
block|{
specifier|final
name|NettyServerCall
name|call
init|=
operator|(
name|NettyServerCall
operator|)
name|msg
decl_stmt|;
name|ByteBuf
name|response
init|=
name|Unpooled
operator|.
name|wrappedBuffer
argument_list|(
name|call
operator|.
name|response
operator|.
name|getBuffers
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|response
argument_list|,
name|promise
argument_list|)
operator|.
name|addListener
argument_list|(
operator|new
name|CallWriteListener
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CallWriteListener
implements|implements
name|ChannelFutureListener
block|{
specifier|private
name|NettyServerCall
name|call
decl_stmt|;
name|CallWriteListener
parameter_list|(
name|NettyServerCall
name|call
parameter_list|)
block|{
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|call
operator|.
name|done
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|metrics
operator|.
name|sentBytes
argument_list|(
name|call
operator|.
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSocketSendBufSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|int
name|getNumOpenConnections
parameter_list|()
block|{
comment|// allChannels also contains the server channel, so exclude that from the count.
return|return
name|allChannels
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Message
argument_list|,
name|CellScanner
argument_list|>
name|call
parameter_list|(
name|BlockingService
name|service
parameter_list|,
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|receiveTime
parameter_list|,
name|MonitoredRPCHandler
name|status
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|call
argument_list|(
name|service
argument_list|,
name|md
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
name|receiveTime
argument_list|,
name|status
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Message
argument_list|,
name|CellScanner
argument_list|>
name|call
parameter_list|(
name|BlockingService
name|service
parameter_list|,
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|receiveTime
parameter_list|,
name|MonitoredRPCHandler
name|status
parameter_list|,
name|long
name|startTime
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|NettyServerCall
name|fakeCall
init|=
operator|new
name|NettyServerCall
argument_list|(
operator|-
literal|1
argument_list|,
name|service
argument_list|,
name|md
argument_list|,
literal|null
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|receiveTime
argument_list|,
name|timeout
argument_list|,
name|reservoir
argument_list|,
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|call
argument_list|(
name|fakeCall
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
end_class

end_unit

