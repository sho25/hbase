begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * RegionServerAccounting keeps record of some basic real time information about  * the Region Server. Currently, it only keeps record the global memstore size.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionServerAccounting
block|{
specifier|private
specifier|final
name|AtomicLong
name|globalMemstoreDataSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|globalMemstoreHeapOverhead
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Store the edits size during replaying WAL. Use this to roll back the
comment|// global memstore size once a region opening failed.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MemstoreSize
argument_list|>
name|replayEditsPerRegion
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MemstoreSize
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/**    * @return the global Memstore size in the RegionServer    */
specifier|public
name|long
name|getGlobalMemstoreSize
parameter_list|()
block|{
return|return
name|globalMemstoreDataSize
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getGlobalMemstoreHeapOverhead
parameter_list|()
block|{
return|return
name|this
operator|.
name|globalMemstoreHeapOverhead
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * @param memStoreSize the Memstore size will be added to     *        the global Memstore size     */
specifier|public
name|void
name|incGlobalMemstoreSize
parameter_list|(
name|MemstoreSize
name|memStoreSize
parameter_list|)
block|{
name|globalMemstoreDataSize
operator|.
name|addAndGet
argument_list|(
name|memStoreSize
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|globalMemstoreHeapOverhead
operator|.
name|addAndGet
argument_list|(
name|memStoreSize
operator|.
name|getHeapOverhead
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|decGlobalMemstoreSize
parameter_list|(
name|MemstoreSize
name|memStoreSize
parameter_list|)
block|{
name|globalMemstoreDataSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|memStoreSize
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|globalMemstoreHeapOverhead
operator|.
name|addAndGet
argument_list|(
operator|-
name|memStoreSize
operator|.
name|getHeapOverhead
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/***    * Add memStoreSize to replayEditsPerRegion.    *     * @param regionName region name.    * @param memStoreSize the Memstore size will be added to replayEditsPerRegion.    */
specifier|public
name|void
name|addRegionReplayEditsSize
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|MemstoreSize
name|memStoreSize
parameter_list|)
block|{
name|MemstoreSize
name|replayEdistsSize
init|=
name|replayEditsPerRegion
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
comment|// All ops on the same MemstoreSize object is going to be done by single thread, sequentially
comment|// only. First calls to this method to increment the per region reply edits size and then call
comment|// to either rollbackRegionReplayEditsSize or clearRegionReplayEditsSize as per the result of
comment|// the region open operation. No need to handle multi thread issues on one region's entry in
comment|// this Map.
if|if
condition|(
name|replayEdistsSize
operator|==
literal|null
condition|)
block|{
name|replayEdistsSize
operator|=
operator|new
name|MemstoreSize
argument_list|()
expr_stmt|;
name|replayEditsPerRegion
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|replayEdistsSize
argument_list|)
expr_stmt|;
block|}
name|replayEdistsSize
operator|.
name|incMemstoreSize
argument_list|(
name|memStoreSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Roll back the global MemStore size for a specified region when this region    * can't be opened.    *     * @param regionName the region which could not open.    */
specifier|public
name|void
name|rollbackRegionReplayEditsSize
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|MemstoreSize
name|replayEditsSize
init|=
name|replayEditsPerRegion
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replayEditsSize
operator|!=
literal|null
condition|)
block|{
name|clearRegionReplayEditsSize
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|decGlobalMemstoreSize
argument_list|(
name|replayEditsSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Clear a region from replayEditsPerRegion.    *     * @param regionName region name.    */
specifier|public
name|void
name|clearRegionReplayEditsSize
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|replayEditsPerRegion
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

