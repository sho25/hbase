begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Reader for protobuf-based WAL.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufLogReader
extends|extends
name|ReaderBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProtobufLogReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|PB_WAL_MAGIC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"PWAL"
argument_list|)
decl_stmt|;
specifier|private
name|FSDataInputStream
name|inputStream
decl_stmt|;
specifier|private
name|Codec
operator|.
name|Decoder
name|cellDecoder
decl_stmt|;
specifier|private
name|WALCellCodec
operator|.
name|ByteStringUncompressor
name|byteStringUncompressor
decl_stmt|;
specifier|private
name|boolean
name|hasCompression
init|=
literal|false
decl_stmt|;
specifier|public
name|ProtobufLogReader
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|inputStream
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|initInternal
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initAfterCompression
argument_list|()
expr_stmt|;
comment|// We need a new decoder (at least).
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initReader
parameter_list|(
name|FSDataInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|initInternal
argument_list|(
name|stream
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initInternal
parameter_list|(
name|FSDataInputStream
name|stream
parameter_list|,
name|boolean
name|isFirst
parameter_list|)
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|long
name|expectedPos
init|=
name|PB_WAL_MAGIC
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|expectedPos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|.
name|getPos
argument_list|()
operator|!=
name|expectedPos
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The stream is at invalid position: "
operator|+
name|stream
operator|.
name|getPos
argument_list|()
argument_list|)
throw|;
block|}
comment|// Initialize metadata or, when we reset, just skip the header.
name|WALProtos
operator|.
name|WALHeader
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|WALHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|hasHeader
init|=
name|builder
operator|.
name|mergeDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasHeader
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Couldn't read WAL PB header"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isFirst
condition|)
block|{
name|WALProtos
operator|.
name|WALHeader
name|header
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|hasCompression
operator|=
name|header
operator|.
name|hasHasCompression
argument_list|()
operator|&&
name|header
operator|.
name|getHasCompression
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|inputStream
operator|=
name|stream
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initAfterCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|WALCellCodec
name|codec
init|=
operator|new
name|WALCellCodec
argument_list|(
name|this
operator|.
name|compressionContext
argument_list|)
decl_stmt|;
name|this
operator|.
name|cellDecoder
operator|=
name|codec
operator|.
name|getDecoder
argument_list|(
name|this
operator|.
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hasCompression
condition|)
block|{
name|this
operator|.
name|byteStringUncompressor
operator|=
name|codec
operator|.
name|getByteStringUncompressor
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|hasCompression
parameter_list|()
block|{
return|return
name|this
operator|.
name|hasCompression
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|readNext
parameter_list|(
name|HLog
operator|.
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|WALKey
operator|.
name|Builder
name|builder
init|=
name|WALKey
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
try|try
block|{
name|hasNext
operator|=
name|builder
operator|.
name|mergeDelimitedFrom
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|ipbe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid PB while reading WAL, probably an unexpected EOF, ignoring"
argument_list|,
name|ipbe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasNext
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|builder
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
comment|// TODO: not clear if we should try to recover from corrupt PB that looks semi-legit.
comment|//       If we can get the KV count, we could, theoretically, try to get next record.
name|LOG
operator|.
name|error
argument_list|(
literal|"Partial PB while reading WAL, probably an unexpected EOF, ignoring"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|WALKey
name|walKey
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|readFieldsFromPb
argument_list|(
name|walKey
argument_list|,
name|this
operator|.
name|byteStringUncompressor
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|expectedCells
init|=
name|walKey
operator|.
name|getFollowingKvCount
argument_list|()
decl_stmt|;
name|int
name|actualCells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|readFromCells
argument_list|(
name|cellDecoder
argument_list|,
name|expectedCells
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCells
operator|!=
name|actualCells
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unable to read "
operator|+
name|expectedCells
operator|+
literal|" cells, got "
operator|+
name|actualCells
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"EOF while reading KVs, ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IOException
name|realEofEx
init|=
name|extractHiddenEofOrRethrow
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"EOF while reading KVs, ignoring"
argument_list|,
name|realEofEx
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|IOException
name|extractHiddenEofOrRethrow
parameter_list|(
name|Exception
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// There are two problems we are dealing with here. Hadoop stream throws generic exception
comment|// for EOF, not EOFException; and scanner further hides it inside RuntimeException.
name|IOException
name|ioEx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
name|ioEx
operator|=
operator|(
name|IOException
operator|)
name|ex
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ex
operator|instanceof
name|RuntimeException
operator|&&
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
name|ioEx
operator|=
operator|(
name|IOException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ioEx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ioEx
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"EOF"
argument_list|)
condition|)
return|return
name|ioEx
return|;
throw|throw
name|ioEx
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|seekOnFs
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|inputStream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

