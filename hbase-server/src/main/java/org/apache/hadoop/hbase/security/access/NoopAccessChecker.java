begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * NoopAccessChecker is returned when hbase.security.authorization is not enabled.  * Always allow authorization if any user require any permission.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|NoopAccessChecker
extends|extends
name|AccessChecker
block|{
specifier|public
name|NoopAccessChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|requireAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
name|perm
parameter_list|)
block|{
name|requireGlobalPermission
argument_list|(
name|user
argument_list|,
name|request
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|filterUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|String
name|filterUser
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|requireTablePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|performOnSuperuser
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|caller
parameter_list|,
name|String
name|userToBeChecked
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|checkLockPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
index|[]
name|regionInfos
parameter_list|,
name|String
name|reason
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|boolean
name|hasUserPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|AuthResult
name|permissionGranted
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|Action
name|permRequest
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"All users allowed because authorization is disabled"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
block|}
end_class

end_unit

