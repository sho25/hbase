begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|namespace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * NamespaceTableAndRegionInfo is a helper class that contains information  * about current state of tables and regions in a namespace.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|NamespaceTableAndRegionInfo
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|AtomicInteger
argument_list|>
name|tableAndRegionInfo
decl_stmt|;
specifier|public
name|NamespaceTableAndRegionInfo
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|tableAndRegionInfo
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the name of the namespace.    *    * @return name of the namespace.    */
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Gets the set of table names belonging to namespace.    *    * @return A set of table names.    */
specifier|synchronized
name|Set
argument_list|<
name|TableName
argument_list|>
name|getTables
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableAndRegionInfo
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Gets the total number of regions in namespace.    *    * @return the region count    */
specifier|synchronized
name|int
name|getRegionCount
parameter_list|()
block|{
name|int
name|regionCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|this
operator|.
name|tableAndRegionInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|regionCount
operator|=
name|regionCount
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|regionCount
return|;
block|}
specifier|synchronized
name|int
name|getRegionCountOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableAndRegionInfo
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|tableAndRegionInfo
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|synchronized
name|boolean
name|containsTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
name|tableAndRegionInfo
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|addTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|regionCount
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Table : "
operator|+
name|tableName
operator|+
literal|" does not belong to namespace "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tableAndRegionInfo
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableAndRegionInfo
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
name|regionCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Table already in the cache "
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
specifier|synchronized
name|void
name|removeTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|tableAndRegionInfo
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|int
name|incRegionCountForTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|tableAndRegionInfo
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|addAndGet
argument_list|(
name|count
argument_list|)
return|;
block|}
specifier|synchronized
name|int
name|decrementRegionCountForTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|tableAndRegionInfo
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|decrementAndGet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Joiner
operator|.
name|MapJoiner
name|mapJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
return|return
literal|"NamespaceTableAndRegionInfo [name="
operator|+
name|name
operator|+
literal|", tableAndRegionInfo="
operator|+
name|mapJoiner
operator|.
name|join
argument_list|(
name|tableAndRegionInfo
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

