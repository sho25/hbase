begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
operator|.
name|SANITY_CHECK_FAILURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABEL_QUALIFIER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityUtils
operator|.
name|SYSTEM_LABEL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|GetAuthsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|GetAuthsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|SetAuthsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MiniBatchOperationInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|LeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|NonLeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ZeroCopyLiteralByteString
import|;
end_import

begin_comment
comment|/**  * Coprocessor that has both the MasterObserver and RegionObserver implemented that supports in  * visibility labels  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|VisibilityController
extends|extends
name|BaseRegionObserver
implements|implements
name|MasterObserver
implements|,
name|RegionObserver
implements|,
name|VisibilityLabelsService
operator|.
name|Interface
implements|,
name|CoprocessorService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VisibilityController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// "system" label is having an ordinal value 1.
specifier|private
specifier|static
specifier|final
name|int
name|SYSTEM_LABEL_ORDINAL
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Tag
index|[]
name|LABELS_TABLE_TAGS
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
specifier|private
specifier|final
name|ExpressionParser
name|expressionParser
init|=
operator|new
name|ExpressionParser
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExpressionExpander
name|expressionExpander
init|=
operator|new
name|ExpressionExpander
argument_list|()
decl_stmt|;
specifier|private
name|VisibilityLabelsManager
name|visibilityManager
decl_stmt|;
comment|// defined only for Endpoint implementation, so it can have way to access region services.
specifier|private
name|RegionCoprocessorEnvironment
name|regionEnv
decl_stmt|;
specifier|private
name|ScanLabelGenerator
name|scanLabelGenerator
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|ordinalCounter
init|=
operator|-
literal|1
decl_stmt|;
comment|// flags if we are running on a region of the 'labels' table
specifier|private
name|boolean
name|labelsRegion
init|=
literal|false
decl_stmt|;
comment|// Flag denoting whether AcessController is available or not.
specifier|private
name|boolean
name|acOn
init|=
literal|false
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** Mapping of scanner instances to the user who created them */
specifier|private
name|Map
argument_list|<
name|InternalScanner
argument_list|,
name|String
argument_list|>
name|scannerOwners
init|=
operator|new
name|MapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|makeMap
argument_list|()
decl_stmt|;
static|static
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
try|try
block|{
name|StreamUtils
operator|.
name|writeRawVInt32
argument_list|(
name|dos
argument_list|,
name|SYSTEM_LABEL_ORDINAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We write to a byte array. No Exception can happen.
block|}
name|LABELS_TABLE_TAGS
index|[
literal|0
index|]
operator|=
operator|new
name|Tag
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|env
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|ZooKeeperWatcher
name|zk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|MasterCoprocessorEnvironment
condition|)
block|{
comment|// if running on HMaster
name|MasterCoprocessorEnvironment
name|mEnv
init|=
operator|(
name|MasterCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|zk
operator|=
name|mEnv
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
comment|// if running at region
name|regionEnv
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
name|zk
operator|=
name|regionEnv
operator|.
name|getRegionServerServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
block|}
comment|// If zk is null or IOException while obtaining auth manager,
comment|// throw RuntimeException so that the coprocessor is unloaded.
if|if
condition|(
name|zk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining VisibilityLabelsManager, zk found null."
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|visibilityManager
operator|=
name|VisibilityLabelsManager
operator|.
name|get
argument_list|(
name|zk
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining VisibilityLabelsManager"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
comment|// ScanLabelGenerator to be instantiated only with Region Observer.
name|scanLabelGenerator
operator|=
name|VisibilityUtils
operator|.
name|getScanLabelGenerator
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/********************************* Master related hooks **********************************/
annotation|@
name|Override
specifier|public
name|void
name|postStartMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Need to create the new system table for labels here
name|MasterServices
name|master
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|master
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|LABELS_TABLE_NAME
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|labelsTable
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|LABELS_TABLE_NAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|labelsColumn
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|)
decl_stmt|;
name|labelsColumn
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|labelsColumn
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// We will cache all the labels. No need of normal
comment|// table block cache.
name|labelsTable
operator|.
name|addFamily
argument_list|(
name|labelsColumn
argument_list|)
expr_stmt|;
comment|// Let the "labels" table having only one region always. We are not expecting too many labels in
comment|// the system.
name|labelsTable
operator|.
name|setValue
argument_list|(
name|HTableDescriptor
operator|.
name|SPLIT_POLICY
argument_list|,
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|createTable
argument_list|(
name|labelsTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preRegionOffline
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postRegionOffline
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|boolean
name|preBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|boolean
name|oldValue
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preShutdown
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preStopMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preCloneSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postCloneSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preRestoreSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postRestoreSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|postModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|preMasterInitialization
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/****************************** Region related hooks ******************************/
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
comment|// Read the entire labels table and populate the zk
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|LABELS_TABLE_NAME
argument_list|)
condition|)
block|{
name|this
operator|.
name|labelsRegion
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|acOn
operator|=
name|CoprocessorHost
operator|.
name|getLoadedCoprocessors
argument_list|()
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|labelsAndUserAuths
init|=
name|extractLabelsAndAuths
argument_list|(
name|getExistingLabelsWithAuths
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
init|=
name|labelsAndUserAuths
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
name|labelsAndUserAuths
operator|.
name|getSecond
argument_list|()
decl_stmt|;
comment|// Add the "system" label if it is not added into the system yet
name|addSystemLabel
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
argument_list|,
name|labels
argument_list|,
name|userAuths
argument_list|)
expr_stmt|;
name|int
name|ordinal
init|=
literal|1
decl_stmt|;
comment|// Ordinal 1 is reserved for "system" label.
for|for
control|(
name|Integer
name|i
range|:
name|labels
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>
name|ordinal
condition|)
block|{
name|ordinal
operator|=
name|i
expr_stmt|;
block|}
block|}
name|this
operator|.
name|ordinalCounter
operator|=
name|ordinal
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|labels
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// If there is no data need not write to zk
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getDataToWriteToZooKeeper
argument_list|(
name|labels
argument_list|)
decl_stmt|;
name|this
operator|.
name|visibilityManager
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userAuths
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getUserAuthsDataToWriteToZooKeeper
argument_list|(
name|userAuths
argument_list|)
decl_stmt|;
name|this
operator|.
name|visibilityManager
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while updating the zk with the exisiting labels data"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addSystemLabel
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|labels
operator|.
name|containsKey
argument_list|(
name|SYSTEM_LABEL
argument_list|)
condition|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SYSTEM_LABEL_ORDINAL
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SYSTEM_LABEL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set auth for "system" label for all super users.
name|List
argument_list|<
name|String
argument_list|>
name|superUsers
init|=
name|getSystemAndSuperUsers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|superUser
range|:
name|superUsers
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|superUser
argument_list|)
argument_list|,
name|DUMMY_VALUE
argument_list|,
name|LABELS_TABLE_TAGS
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|SYSTEM_LABEL
argument_list|,
name|SYSTEM_LABEL_ORDINAL
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|superUser
range|:
name|superUsers
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|auths
init|=
name|userAuths
operator|.
name|get
argument_list|(
name|superUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|auths
operator|==
literal|null
condition|)
block|{
name|auths
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|userAuths
operator|.
name|put
argument_list|(
name|superUser
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
name|auths
operator|.
name|add
argument_list|(
name|SYSTEM_LABEL_ORDINAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preBatchMutate
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// TODO this can be made as a global LRU cache at HRS level?
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|labelCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|miniBatchOp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mutation
name|m
init|=
name|miniBatchOp
operator|.
name|getOperation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CellVisibility
name|cellVisibility
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cellVisibility
operator|=
name|m
operator|.
name|getCellVisibility
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|miniBatchOp
operator|.
name|setOperationStatus
argument_list|(
name|i
argument_list|,
operator|new
name|OperationStatus
argument_list|(
name|SANITY_CHECK_FAILURE
argument_list|,
name|de
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|Put
name|p
init|=
operator|(
name|Put
operator|)
name|m
decl_stmt|;
name|boolean
name|sanityFailure
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CellScanner
name|cellScanner
init|=
name|p
operator|.
name|cellScanner
argument_list|()
init|;
name|cellScanner
operator|.
name|advance
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|checkForReservedVisibilityTagPresence
argument_list|(
name|cellScanner
operator|.
name|current
argument_list|()
argument_list|)
condition|)
block|{
name|miniBatchOp
operator|.
name|setOperationStatus
argument_list|(
name|i
argument_list|,
operator|new
name|OperationStatus
argument_list|(
name|SANITY_CHECK_FAILURE
argument_list|,
literal|"Mutation contains cell with reserved type tag"
argument_list|)
argument_list|)
expr_stmt|;
name|sanityFailure
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|sanityFailure
condition|)
block|{
if|if
condition|(
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
name|String
name|labelsExp
init|=
name|cellVisibility
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|visibilityTags
init|=
name|labelCache
operator|.
name|get
argument_list|(
name|labelsExp
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibilityTags
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|visibilityTags
operator|=
name|createVisibilityTags
argument_list|(
name|labelsExp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|miniBatchOp
operator|.
name|setOperationStatus
argument_list|(
name|i
argument_list|,
operator|new
name|OperationStatus
argument_list|(
name|SANITY_CHECK_FAILURE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidLabelException
name|e
parameter_list|)
block|{
name|miniBatchOp
operator|.
name|setOperationStatus
argument_list|(
name|i
argument_list|,
operator|new
name|OperationStatus
argument_list|(
name|SANITY_CHECK_FAILURE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|visibilityTags
operator|!=
literal|null
condition|)
block|{
name|labelCache
operator|.
name|put
argument_list|(
name|labelsExp
argument_list|,
name|visibilityTags
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|updatedCells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CellScanner
name|cellScanner
init|=
name|p
operator|.
name|cellScanner
argument_list|()
init|;
name|cellScanner
operator|.
name|advance
argument_list|()
condition|;
control|)
block|{
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|Tag
operator|.
name|asList
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
name|tags
operator|.
name|addAll
argument_list|(
name|visibilityTags
argument_list|)
expr_stmt|;
name|Cell
name|updatedCell
init|=
operator|new
name|KeyValue
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|Type
operator|.
name|codeToType
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|updatedCells
operator|.
name|add
argument_list|(
name|updatedCell
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Clear and add new Cells to the Mutation.
for|for
control|(
name|Cell
name|cell
range|:
name|updatedCells
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// CellVisibility in a Delete is not legal! Fail the operation
name|miniBatchOp
operator|.
name|setOperationStatus
argument_list|(
name|i
argument_list|,
operator|new
name|OperationStatus
argument_list|(
name|SANITY_CHECK_FAILURE
argument_list|,
literal|"CellVisibility cannot be set on Delete mutation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBatchMutate
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|labelsRegion
condition|)
block|{
comment|// We will add to zookeeper here.
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|labelsAndUserAuths
init|=
name|extractLabelsAndAuths
argument_list|(
name|getExistingLabelsWithAuths
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|existingLabels
init|=
name|labelsAndUserAuths
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
name|labelsAndUserAuths
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|boolean
name|isNewLabels
init|=
literal|false
decl_stmt|;
name|boolean
name|isUserAuthsChange
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|miniBatchOp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mutation
name|m
init|=
name|miniBatchOp
operator|.
name|getOperation
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|miniBatchOp
operator|.
name|getOperationStatus
argument_list|(
name|i
argument_list|)
operator|.
name|getOperationStatusCode
argument_list|()
operator|==
name|SUCCESS
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
range|:
name|m
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|int
name|labelOrdinal
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
literal|0
argument_list|,
name|LABEL_QUALIFIER
operator|.
name|length
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|existingLabels
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|,
name|labelOrdinal
argument_list|)
expr_stmt|;
name|isNewLabels
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|user
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|auths
init|=
name|userAuths
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|auths
operator|==
literal|null
condition|)
block|{
name|auths
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|userAuths
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|instanceof
name|Delete
condition|)
block|{
name|auths
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|labelOrdinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|auths
operator|.
name|add
argument_list|(
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
name|isUserAuthsChange
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|isNewLabels
condition|)
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getDataToWriteToZooKeeper
argument_list|(
name|existingLabels
argument_list|)
decl_stmt|;
name|this
operator|.
name|visibilityManager
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUserAuthsChange
condition|)
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getUserAuthsDataToWriteToZooKeeper
argument_list|(
name|userAuths
argument_list|)
decl_stmt|;
name|this
operator|.
name|visibilityManager
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|extractLabelsAndAuths
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|labelDetails
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
range|:
name|labelDetails
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
literal|0
argument_list|,
name|LABEL_QUALIFIER
operator|.
name|length
argument_list|)
condition|)
block|{
name|labels
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// These are user cells who has authorization for this label
name|String
name|user
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|auths
init|=
name|userAuths
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|auths
operator|==
literal|null
condition|)
block|{
name|auths
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|userAuths
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
name|auths
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|labels
argument_list|,
name|userAuths
argument_list|)
return|;
block|}
comment|// Checks whether cell contains any tag with type as VISIBILITY_TAG_TYPE.
comment|// This tag type is reserved and should not be explicitly set by user.
specifier|private
name|boolean
name|checkForReservedVisibilityTagPresence
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|tagsItr
operator|.
name|next
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|List
argument_list|<
name|Tag
argument_list|>
name|createVisibilityTags
parameter_list|(
name|String
name|visibilityLabelsExp
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|InvalidLabelException
block|{
name|ExpressionNode
name|node
init|=
literal|null
decl_stmt|;
name|node
operator|=
name|this
operator|.
name|expressionParser
operator|.
name|parse
argument_list|(
name|visibilityLabelsExp
argument_list|)
expr_stmt|;
name|node
operator|=
name|this
operator|.
name|expressionExpander
operator|.
name|expand
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|writeLabelOrdinalsToStream
argument_list|(
name|node
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|nlNode
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
for|for
control|(
name|ExpressionNode
name|child
range|:
name|nlNode
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|writeLabelOrdinalsToStream
argument_list|(
name|child
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeLabelOrdinalsToStream
argument_list|(
name|nlNode
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
operator|new
name|Tag
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tags
return|;
block|}
specifier|private
name|void
name|writeLabelOrdinalsToStream
parameter_list|(
name|ExpressionNode
name|node
parameter_list|,
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidLabelException
block|{
if|if
condition|(
name|node
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|String
name|identifier
init|=
literal|null
decl_stmt|;
name|int
name|labelOrdinal
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|LeafExpressionNode
condition|)
block|{
name|identifier
operator|=
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|labelOrdinal
operator|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is a NOT node.
name|LeafExpressionNode
name|lNode
init|=
call|(
name|LeafExpressionNode
call|)
argument_list|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
argument_list|)
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|identifier
operator|=
name|lNode
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|labelOrdinal
operator|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|labelOrdinal
operator|=
operator|-
literal|1
operator|*
name|labelOrdinal
expr_stmt|;
comment|// Store NOT node as -ve ordinal.
block|}
if|if
condition|(
name|labelOrdinal
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidLabelException
argument_list|(
literal|"Invalid visibility label "
operator|+
name|identifier
argument_list|)
throw|;
block|}
name|StreamUtils
operator|.
name|writeRawVInt32
argument_list|(
name|dos
argument_list|,
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|childExps
init|=
operator|(
operator|(
name|NonLeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionNode
name|child
range|:
name|childExps
control|)
block|{
name|writeLabelOrdinalsToStream
argument_list|(
name|child
argument_list|,
name|dos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|preScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|region
init|=
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|Authorizations
name|authorizations
init|=
literal|null
decl_stmt|;
try|try
block|{
name|authorizations
operator|=
name|scan
operator|.
name|getAuthorizations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|de
argument_list|)
throw|;
block|}
name|Filter
name|visibilityLabelFilter
init|=
name|createVisibilityLabelFilter
argument_list|(
name|region
argument_list|,
name|authorizations
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibilityLabelFilter
operator|!=
literal|null
condition|)
block|{
name|Filter
name|filter
init|=
name|scan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
name|filter
argument_list|,
name|visibilityLabelFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setFilter
argument_list|(
name|visibilityLabelFilter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getShortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scannerOwners
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|result
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|boolean
name|hasNext
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|requireScannerOwner
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postScannerClose
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|// clean up any associated owner mapping
name|scannerOwners
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify, when servicing an RPC, that the caller is the scanner owner. If so, we assume that    * access control is correctly enforced based on the checks performed in preScannerOpen()    */
specifier|private
name|void
name|requireScannerOwner
parameter_list|(
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
name|RequestContext
operator|.
name|isInRequestContext
argument_list|()
condition|)
block|{
name|String
name|requestUName
init|=
name|RequestContext
operator|.
name|getRequestUserName
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|scannerOwners
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|requestUName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
name|requestUName
operator|+
literal|"' is not the scanner owner!"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Authorizations
name|authorizations
init|=
literal|null
decl_stmt|;
try|try
block|{
name|authorizations
operator|=
name|get
operator|.
name|getAuthorizations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|de
argument_list|)
throw|;
block|}
name|Filter
name|visibilityLabelFilter
init|=
name|createVisibilityLabelFilter
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
argument_list|,
name|authorizations
argument_list|)
decl_stmt|;
if|if
condition|(
name|visibilityLabelFilter
operator|!=
literal|null
condition|)
block|{
name|Filter
name|filter
init|=
name|get
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
name|filter
argument_list|,
name|visibilityLabelFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|setFilter
argument_list|(
name|visibilityLabelFilter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Filter
name|createVisibilityLabelFilter
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|Authorizations
name|authorizations
parameter_list|)
block|{
if|if
condition|(
name|authorizations
operator|==
literal|null
condition|)
block|{
comment|// No Authorizations present for this scan/Get!
comment|// In case of "labels" table and user tables, create an empty auth set. In other system tables
comment|// just scan with out visibility check and filtering. Checking visibility labels for META and
comment|// NAMESPACE table is not needed.
name|TableName
name|table
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|isSystemTable
argument_list|()
operator|&&
operator|!
name|table
operator|.
name|equals
argument_list|(
name|LABELS_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|VisibilityLabelFilter
argument_list|(
operator|new
name|BitSet
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
name|Filter
name|visibilityLabelFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|scanLabelGenerator
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
literal|null
decl_stmt|;
try|try
block|{
name|labels
operator|=
name|this
operator|.
name|scanLabelGenerator
operator|.
name|getLabels
argument_list|(
name|getActiveUser
argument_list|()
argument_list|,
name|authorizations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|int
name|labelsCount
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelsCount
argument_list|()
decl_stmt|;
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
name|labelsCount
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// ordinal is index 1 based
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelOrdinal
operator|!=
literal|0
condition|)
block|{
name|bs
operator|.
name|set
argument_list|(
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|visibilityLabelFilter
operator|=
operator|new
name|VisibilityLabelFilter
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|visibilityLabelFilter
return|;
block|}
specifier|private
name|User
name|getActiveUser
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|RequestContext
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|RequestContext
operator|.
name|isInRequestContext
argument_list|()
condition|)
block|{
comment|// for non-rpc handling, fallback to system user
name|user
operator|=
name|User
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSystemAndSuperUsers
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|User
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to obtain the current user, "
operator|+
literal|"authorization checks for internal operations will not work correctly!"
argument_list|)
throw|;
block|}
name|String
name|currentUser
init|=
name|user
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|superUsers
init|=
name|Lists
operator|.
name|asList
argument_list|(
name|currentUser
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getStrings
argument_list|(
name|AccessControlLists
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|superUsers
return|;
block|}
specifier|private
name|boolean
name|isSystemOrSuperUser
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|superUsers
init|=
name|getSystemAndSuperUsers
argument_list|()
decl_stmt|;
name|User
name|activeUser
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
return|return
name|superUsers
operator|.
name|contains
argument_list|(
name|activeUser
operator|.
name|getShortName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|postMutationBeforeWAL
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|MutationType
name|opType
parameter_list|,
name|Mutation
name|mutation
parameter_list|,
name|Cell
name|oldCell
parameter_list|,
name|Cell
name|newCell
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|CellVisibility
name|cellVisibility
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cellVisibility
operator|=
name|mutation
operator|.
name|getCellVisibility
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cellVisibility
operator|==
literal|null
condition|)
block|{
return|return
name|newCell
return|;
block|}
comment|// Adding all other tags
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|newCell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|newCell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|newCell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|!=
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|tags
operator|.
name|addAll
argument_list|(
name|createVisibilityTags
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// We need to create another KV, unfortunately, because the current new KV
comment|// has no space for tags
name|KeyValue
name|newKv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|newCell
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|newKv
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|KeyValue
name|rewriteKv
init|=
operator|new
name|KeyValue
argument_list|(
name|bytes
argument_list|,
name|newKv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|newKv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|newKv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|newKv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|newKv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|newKv
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|newKv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|newKv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|newKv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|newKv
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|tags
argument_list|)
decl_stmt|;
comment|// Preserve mvcc data
name|rewriteKv
operator|.
name|setMvccVersion
argument_list|(
name|newKv
operator|.
name|getMvccVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rewriteKv
return|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsService
operator|.
name|newReflectiveService
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/****************************** VisibilityEndpoint service related methods ******************************/
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addLabels
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|VisibilityLabelsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|VisibilityLabelsResponse
operator|.
name|Builder
name|response
init|=
name|VisibilityLabelsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VisibilityLabel
argument_list|>
name|labels
init|=
name|request
operator|.
name|getVisLabelList
argument_list|()
decl_stmt|;
try|try
block|{
name|checkCallingUserAuth
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RegionActionResult
name|successResult
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|VisibilityLabel
name|visLabel
range|:
name|labels
control|)
block|{
name|byte
index|[]
name|label
init|=
name|visLabel
operator|.
name|getLabel
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|labelStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|VisibilityLabelsValidator
operator|.
name|isValidLabel
argument_list|(
name|label
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|labelStr
argument_list|)
operator|>
literal|0
condition|)
block|{
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|LabelAlreadyExistsException
argument_list|(
literal|"Label '"
operator|+
name|labelStr
operator|+
literal|"' already exists"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ordinalCounter
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
name|label
argument_list|,
name|LABELS_TABLE_TAGS
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ordinalCounter
operator|++
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|successResult
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|InvalidLabelException
argument_list|(
literal|"Invalid visibility label '"
operator|+
name|labelStr
operator|+
literal|"'"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|OperationStatus
index|[]
name|opStatus
init|=
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|batchMutate
argument_list|(
name|puts
operator|.
name|toArray
argument_list|(
operator|new
name|Mutation
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OperationStatus
name|status
range|:
name|opStatus
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getOperationStatusCode
argument_list|()
operator|!=
name|SUCCESS
condition|)
block|{
while|while
condition|(
name|response
operator|.
name|getResult
argument_list|(
name|i
argument_list|)
operator|!=
name|successResult
condition|)
name|i
operator|++
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|status
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|RegionActionResult
name|failureResult
init|=
name|failureResultBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|response
operator|.
name|addResult
argument_list|(
name|i
argument_list|,
name|failureResult
argument_list|)
expr_stmt|;
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|performACLCheck
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do ACL check only when the security is enabled.
if|if
condition|(
name|this
operator|.
name|acOn
operator|&&
operator|!
name|isSystemOrSuperUser
argument_list|()
condition|)
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|" is not authorized to perform this action."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|getExistingLabelsWithAuths
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|existingLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|existingLabels
operator|.
name|add
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|existingLabels
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setAuths
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetAuthsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|VisibilityLabelsResponse
operator|.
name|Builder
name|response
init|=
name|VisibilityLabelsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ByteString
argument_list|>
name|auths
init|=
name|request
operator|.
name|getAuthList
argument_list|()
decl_stmt|;
name|byte
index|[]
name|user
init|=
name|request
operator|.
name|getUser
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|checkCallingUserAuth
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|auths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RegionActionResult
name|successResult
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteString
name|authBS
range|:
name|auths
control|)
block|{
name|byte
index|[]
name|auth
init|=
name|authBS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|authStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|authStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelOrdinal
operator|==
literal|0
condition|)
block|{
comment|// This label is not yet added. 1st this should be added to the system
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|InvalidLabelException
argument_list|(
literal|"Label '"
operator|+
name|authStr
operator|+
literal|"' doesn't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|labelOrdinal
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|,
name|DUMMY_VALUE
argument_list|,
name|LABELS_TABLE_TAGS
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|successResult
argument_list|)
expr_stmt|;
block|}
block|}
name|OperationStatus
index|[]
name|opStatus
init|=
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|batchMutate
argument_list|(
name|puts
operator|.
name|toArray
argument_list|(
operator|new
name|Mutation
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OperationStatus
name|status
range|:
name|opStatus
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getOperationStatusCode
argument_list|()
operator|!=
name|SUCCESS
condition|)
block|{
while|while
condition|(
name|response
operator|.
name|getResult
argument_list|(
name|i
argument_list|)
operator|!=
name|successResult
condition|)
name|i
operator|++
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|status
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|RegionActionResult
name|failureResult
init|=
name|failureResultBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|auths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|response
operator|.
name|addResult
argument_list|(
name|i
argument_list|,
name|failureResult
argument_list|)
expr_stmt|;
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|getAuths
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetAuthsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|GetAuthsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|byte
index|[]
name|user
init|=
name|request
operator|.
name|getUser
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|GetAuthsResponse
operator|.
name|Builder
name|response
init|=
name|GetAuthsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setUser
argument_list|(
name|request
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addColumn
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
name|createVisibilityLabelFilter
argument_list|(
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
argument_list|,
operator|new
name|Authorizations
argument_list|(
name|SYSTEM_LABEL
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
block|{
comment|// We do ACL check here as we create scanner directly on region. It will not make calls to
comment|// AccessController CP methods.
name|performACLCheck
argument_list|()
expr_stmt|;
name|RegionScanner
name|scanner
init|=
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|ordinal
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabel
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|addAuth
argument_list|(
name|ZeroCopyLiteralByteString
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|label
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ResponseConverter
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|response
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clearAuths
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetAuthsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|VisibilityLabelsResponse
operator|.
name|Builder
name|response
init|=
name|VisibilityLabelsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ByteString
argument_list|>
name|auths
init|=
name|request
operator|.
name|getAuthList
argument_list|()
decl_stmt|;
name|byte
index|[]
name|user
init|=
name|request
operator|.
name|getUser
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|checkCallingUserAuth
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentAuths
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getAuths
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|auths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RegionActionResult
name|successResult
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteString
name|authBS
range|:
name|auths
control|)
block|{
name|byte
index|[]
name|auth
init|=
name|authBS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|authStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAuths
operator|.
name|contains
argument_list|(
name|authStr
argument_list|)
condition|)
block|{
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getLabelOrdinal
argument_list|(
name|authStr
argument_list|)
decl_stmt|;
assert|assert
name|labelOrdinal
operator|>
literal|0
assert|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|labelOrdinal
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|successResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This label is not set for the user.
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|InvalidLabelException
argument_list|(
literal|"Label '"
operator|+
name|authStr
operator|+
literal|"' is not set for the user "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|OperationStatus
index|[]
name|opStatus
init|=
name|this
operator|.
name|regionEnv
operator|.
name|getRegion
argument_list|()
operator|.
name|batchMutate
argument_list|(
name|deletes
operator|.
name|toArray
argument_list|(
operator|new
name|Mutation
index|[
name|deletes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OperationStatus
name|status
range|:
name|opStatus
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getOperationStatusCode
argument_list|()
operator|!=
name|SUCCESS
condition|)
block|{
while|while
condition|(
name|response
operator|.
name|getResult
argument_list|(
name|i
argument_list|)
operator|!=
name|successResult
condition|)
name|i
operator|++
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|status
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|failureResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|failureResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|failureResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|RegionActionResult
name|failureResult
init|=
name|failureResultBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|auths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|response
operator|.
name|addResult
argument_list|(
name|i
argument_list|,
name|failureResult
argument_list|)
expr_stmt|;
block|}
block|}
name|done
operator|.
name|run
argument_list|(
name|response
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCallingUserAuth
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|acOn
condition|)
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to retrieve calling user"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|auths
init|=
name|this
operator|.
name|visibilityManager
operator|.
name|getAuths
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|auths
operator|.
name|contains
argument_list|(
name|SYSTEM_LABEL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"User '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' is not authorized to perform this action."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

