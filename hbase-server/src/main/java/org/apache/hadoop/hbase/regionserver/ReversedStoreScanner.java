begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_comment
comment|/**  * ReversedStoreScanner extends from StoreScanner, and is used to support  * reversed scanning.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ReversedStoreScanner
extends|extends
name|StoreScanner
implements|implements
name|KeyValueScanner
block|{
comment|/**    * Opens a scanner across memstore, snapshot, and all StoreFiles. Assumes we    * are not in a compaction.    *     * @param store who we scan    * @param scanInfo    * @param scan the spec    * @param columns which columns we are scanning    * @throws IOException    */
name|ReversedStoreScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scan
argument_list|,
name|columns
argument_list|,
name|readPt
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor for testing. */
name|ReversedStoreScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scanType
argument_list|,
name|columns
argument_list|,
name|scanners
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|resetKVHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|KVComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Combine all seeked scanners with a heap
name|heap
operator|=
operator|new
name|ReversedKeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|seekScanners
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|Cell
name|seekKey
parameter_list|,
name|boolean
name|isLazy
parameter_list|,
name|boolean
name|isParallelSeek
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Seek all scanners to the start of the Row (or if the exact matching row
comment|// key does not exist, then to the start of the previous matching Row).
if|if
condition|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|seekKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|seekToLastRow
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|backwardSeek
argument_list|(
name|seekKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|seekToNextRow
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|seekToPreviousRow
argument_list|(
name|kv
argument_list|)
return|;
block|}
comment|/**    * Do a backwardSeek in a reversed StoreScanner(scan backward)    */
annotation|@
name|Override
specifier|protected
name|boolean
name|seekAsDirection
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|backwardSeek
argument_list|(
name|kv
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkScanOrder
parameter_list|(
name|Cell
name|prevKV
parameter_list|,
name|Cell
name|kv
parameter_list|,
name|KeyValue
operator|.
name|KVComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check that the heap gives us KVs in an increasing order for same row and
comment|// decreasing order for different rows.
assert|assert
name|prevKV
operator|==
literal|null
operator|||
name|comparator
operator|==
literal|null
operator|||
name|comparator
operator|.
name|compareRows
argument_list|(
name|kv
argument_list|,
name|prevKV
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|comparator
operator|.
name|matchingRows
argument_list|(
name|kv
argument_list|,
name|prevKV
argument_list|)
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|kv
argument_list|,
name|prevKV
argument_list|)
operator|>=
literal|0
operator|)
operator|:
literal|"Key "
operator|+
name|prevKV
operator|+
literal|" followed by a "
operator|+
literal|"error order key "
operator|+
name|kv
operator|+
literal|" in cf "
operator|+
name|store
operator|+
literal|" in reversed scan"
assert|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"reseek cannot be called on ReversedStoreScanner"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seek
parameter_list|(
name|Cell
name|key
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"seek cannot be called on ReversedStoreScanner"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToPreviousRow
parameter_list|(
name|Cell
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkReseek
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|heap
operator|.
name|seekToPreviousRow
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|backwardSeek
parameter_list|(
name|Cell
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkReseek
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|heap
operator|.
name|backwardSeek
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

