begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|BaseReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Manages and performs all replication admin operations.  *<p>  * Used to add/remove a replication peer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationPeerManager
block|{
specifier|private
specifier|final
name|ReplicationPeerStorage
name|peerStorage
decl_stmt|;
specifier|private
specifier|final
name|ReplicationQueueStorage
name|queueStorage
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerDescription
argument_list|>
name|peers
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|SyncReplicationState
argument_list|,
name|EnumSet
argument_list|<
name|SyncReplicationState
argument_list|>
argument_list|>
name|allowedTransition
init|=
name|Maps
operator|.
name|immutableEnumMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicationPeerManager
parameter_list|(
name|ReplicationPeerStorage
name|peerStorage
parameter_list|,
name|ReplicationQueueStorage
name|queueStorage
parameter_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerDescription
argument_list|>
name|peers
parameter_list|)
block|{
name|this
operator|.
name|peerStorage
operator|=
name|peerStorage
expr_stmt|;
name|this
operator|.
name|queueStorage
operator|=
name|queueStorage
expr_stmt|;
name|this
operator|.
name|peers
operator|=
name|peers
expr_stmt|;
block|}
specifier|private
name|void
name|checkQueuesDeleted
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|DoNotRetryIOException
block|{
for|for
control|(
name|ServerName
name|replicator
range|:
name|queueStorage
operator|.
name|getListOfReplicators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queueIds
init|=
name|queueStorage
operator|.
name|getAllQueues
argument_list|(
name|replicator
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queueId
range|:
name|queueIds
control|)
block|{
name|ReplicationQueueInfo
name|queueInfo
init|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|queueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueInfo
operator|.
name|getPeerId
argument_list|()
operator|.
name|equals
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"undeleted queue for peerId: "
operator|+
name|peerId
operator|+
literal|", replicator: "
operator|+
name|replicator
operator|+
literal|", queueId: "
operator|+
name|queueId
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|queueStorage
operator|.
name|getAllPeersFromHFileRefsQueue
argument_list|()
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Undeleted queue for peer "
operator|+
name|peerId
operator|+
literal|" in hfile-refs"
argument_list|)
throw|;
block|}
block|}
name|void
name|preAddPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|DoNotRetryIOException
throws|,
name|ReplicationException
block|{
if|if
condition|(
name|peerId
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Found invalid peer name: "
operator|+
name|peerId
argument_list|)
throw|;
block|}
name|checkPeerConfig
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|peers
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Replication peer "
operator|+
name|peerId
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// make sure that there is no queues with the same peer id. This may happen when we create a
comment|// peer with the same id with a old deleted peer. If the replication queues for the old peer
comment|// have not been cleaned up yet then we should not create the new peer, otherwise the old wal
comment|// file may also be replicated.
name|checkQueuesDeleted
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ReplicationPeerDescription
name|checkPeerExists
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|peers
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Replication peer "
operator|+
name|peerId
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|desc
return|;
block|}
name|ReplicationPeerConfig
name|preRemovePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
return|return
name|checkPeerExists
argument_list|(
name|peerId
argument_list|)
operator|.
name|getPeerConfig
argument_list|()
return|;
block|}
name|void
name|preEnablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|checkPeerExists
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Replication peer "
operator|+
name|peerId
operator|+
literal|" has already been enabled"
argument_list|)
throw|;
block|}
block|}
name|void
name|preDisablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|checkPeerExists
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Replication peer "
operator|+
name|peerId
operator|+
literal|" has already been disabled"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the old peer description. Can never be null.    */
name|ReplicationPeerDescription
name|preUpdatePeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|checkPeerConfig
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|ReplicationPeerDescription
name|desc
init|=
name|checkPeerExists
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|oldPeerConfig
init|=
name|desc
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isStringEquals
argument_list|(
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|oldPeerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Changing the cluster key on an existing peer is not allowed. Existing key '"
operator|+
name|oldPeerConfig
operator|.
name|getClusterKey
argument_list|()
operator|+
literal|"' for peer "
operator|+
name|peerId
operator|+
literal|" does not match new key '"
operator|+
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isStringEquals
argument_list|(
name|peerConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
argument_list|,
name|oldPeerConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Changing the replication endpoint implementation class "
operator|+
literal|"on an existing peer is not allowed. Existing class '"
operator|+
name|oldPeerConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|+
literal|"' for peer "
operator|+
name|peerId
operator|+
literal|" does not match new class '"
operator|+
name|peerConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isStringEquals
argument_list|(
name|peerConfig
operator|.
name|getRemoteWALDir
argument_list|()
argument_list|,
name|oldPeerConfig
operator|.
name|getRemoteWALDir
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Changing the remote wal dir on an existing peer is not allowed. Existing remote wal "
operator|+
literal|"dir '"
operator|+
name|oldPeerConfig
operator|.
name|getRemoteWALDir
argument_list|()
operator|+
literal|"' for peer "
operator|+
name|peerId
operator|+
literal|" does not match new remote wal dir '"
operator|+
name|peerConfig
operator|.
name|getRemoteWALDir
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldPeerConfig
operator|.
name|isSyncReplication
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ReplicationUtils
operator|.
name|isNamespacesAndTableCFsEqual
argument_list|(
name|oldPeerConfig
argument_list|,
name|peerConfig
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Changing the replicated namespace/table config on a synchronous replication "
operator|+
literal|"peer(peerId: "
operator|+
name|peerId
operator|+
literal|") is not allowed."
argument_list|)
throw|;
block|}
block|}
return|return
name|desc
return|;
block|}
comment|/**    * @return the old state.    */
specifier|public
name|SyncReplicationState
name|preTransitPeerSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|state
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|checkPeerExists
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|SyncReplicationState
name|fromState
init|=
name|desc
operator|.
name|getSyncReplicationState
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|SyncReplicationState
argument_list|>
name|allowedToStates
init|=
name|allowedTransition
operator|.
name|get
argument_list|(
name|fromState
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedToStates
operator|==
literal|null
operator|||
operator|!
name|allowedToStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Can not transit current cluster state from "
operator|+
name|fromState
operator|+
literal|" to "
operator|+
name|state
operator|+
literal|" for peer id="
operator|+
name|peerId
argument_list|)
throw|;
block|}
return|return
name|fromState
return|;
block|}
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|peers
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
comment|// this should be a retry, just return
return|return;
block|}
name|ReplicationPeerConfig
name|copiedPeerConfig
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|(
name|peerConfig
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SyncReplicationState
name|syncReplicationState
init|=
name|copiedPeerConfig
operator|.
name|isSyncReplication
argument_list|()
condition|?
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
else|:
name|SyncReplicationState
operator|.
name|NONE
decl_stmt|;
name|peerStorage
operator|.
name|addPeer
argument_list|(
name|peerId
argument_list|,
name|copiedPeerConfig
argument_list|,
name|enabled
argument_list|,
name|syncReplicationState
argument_list|)
expr_stmt|;
name|peers
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|ReplicationPeerDescription
argument_list|(
name|peerId
argument_list|,
name|enabled
argument_list|,
name|copiedPeerConfig
argument_list|,
name|syncReplicationState
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
operator|!
name|peers
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
comment|// this should be a retry, just return
return|return;
block|}
name|peerStorage
operator|.
name|removePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|peers
operator|.
name|remove
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPeerState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|peers
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEnabled
argument_list|()
operator|==
name|enabled
condition|)
block|{
comment|// this should be a retry, just return
return|return;
block|}
name|peerStorage
operator|.
name|setPeerState
argument_list|(
name|peerId
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|peers
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|ReplicationPeerDescription
argument_list|(
name|peerId
argument_list|,
name|enabled
argument_list|,
name|desc
operator|.
name|getPeerConfig
argument_list|()
argument_list|,
name|desc
operator|.
name|getSyncReplicationState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|setPeerState
argument_list|(
name|peerId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|setPeerState
argument_list|(
name|peerId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updatePeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|ReplicationException
block|{
comment|// the checking rules are too complicated here so we give up checking whether this is a retry.
name|ReplicationPeerDescription
name|desc
init|=
name|peers
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|oldPeerConfig
init|=
name|desc
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
name|ReplicationPeerConfigBuilder
name|newPeerConfigBuilder
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|(
name|peerConfig
argument_list|)
decl_stmt|;
comment|// we need to use the new conf to overwrite the old one.
name|newPeerConfigBuilder
operator|.
name|putAllConfiguration
argument_list|(
name|oldPeerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newPeerConfigBuilder
operator|.
name|putAllConfiguration
argument_list|(
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newPeerConfigBuilder
operator|.
name|putAllConfiguration
argument_list|(
name|oldPeerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newPeerConfigBuilder
operator|.
name|putAllConfiguration
argument_list|(
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|newPeerConfig
init|=
name|newPeerConfigBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|peerStorage
operator|.
name|updatePeerConfig
argument_list|(
name|peerId
argument_list|,
name|newPeerConfig
argument_list|)
expr_stmt|;
name|peers
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|ReplicationPeerDescription
argument_list|(
name|peerId
argument_list|,
name|desc
operator|.
name|isEnabled
argument_list|()
argument_list|,
name|newPeerConfig
argument_list|,
name|desc
operator|.
name|getSyncReplicationState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listPeers
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|peers
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
return|return
name|peers
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|pattern
operator|.
name|matcher
argument_list|(
name|r
operator|.
name|getPeerId
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|ReplicationPeerConfig
argument_list|>
name|getPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationPeerDescription
name|desc
init|=
name|peers
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
return|return
name|desc
operator|!=
literal|null
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|desc
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|void
name|removeAllLastPushedSeqIds
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|queueStorage
operator|.
name|removeLastSequenceIds
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPeerNewSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|state
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|peerStorage
operator|.
name|setPeerNewSyncReplicationState
argument_list|(
name|peerId
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transitPeerSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|newState
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|peerStorage
operator|.
name|getPeerNewSyncReplicationState
argument_list|(
name|peerId
argument_list|)
operator|!=
name|SyncReplicationState
operator|.
name|NONE
condition|)
block|{
comment|// Only transit if this is not a retry
name|peerStorage
operator|.
name|transitPeerSyncReplicationState
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
name|ReplicationPeerDescription
name|desc
init|=
name|peers
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|getSyncReplicationState
argument_list|()
operator|!=
name|newState
condition|)
block|{
comment|// Only recreate the desc if this is not a retry
name|peers
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|ReplicationPeerDescription
argument_list|(
name|peerId
argument_list|,
name|desc
operator|.
name|isEnabled
argument_list|()
argument_list|,
name|desc
operator|.
name|getPeerConfig
argument_list|()
argument_list|,
name|newState
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeAllQueuesAndHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
comment|// Here we need two passes to address the problem of claimQueue. Maybe a claimQueue is still
comment|// on-going when the refresh peer config procedure is done, if a RS which has already been
comment|// scanned claims the queue of a RS which has not been scanned yet, we will miss that queue in
comment|// the scan here, and if the RS who has claimed the queue crashed before creating recovered
comment|// source, then the queue will leave there until the another RS detects the crash and helps
comment|// removing the queue.
comment|// A two pass scan can solve the problem. Anyway, the queue will not disappear during the
comment|// claiming, it will either under the old RS or under the new RS, and a queue can only be
comment|// claimed once after the refresh peer procedure done(as the next claim queue will just delete
comment|// it), so we can make sure that a two pass scan will finally find the queue and remove it,
comment|// unless it has already been removed by others.
name|ReplicationUtils
operator|.
name|removeAllQueues
argument_list|(
name|queueStorage
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|ReplicationUtils
operator|.
name|removeAllQueues
argument_list|(
name|queueStorage
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|queueStorage
operator|.
name|removePeerFromHFileRefs
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPeerConfig
parameter_list|(
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|checkClusterKey
argument_list|(
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
condition|)
block|{
comment|// If replicate_all flag is true, it means all user tables will be replicated to peer cluster.
comment|// Then allow config exclude namespaces or exclude table-cfs which can't be replicated to peer
comment|// cluster.
if|if
condition|(
operator|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Need clean namespaces or table-cfs config firstly "
operator|+
literal|"when you want replicate all cluster"
argument_list|)
throw|;
block|}
name|checkNamespacesAndTableCfsConfigConflict
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|,
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If replicate_all flag is false, it means all user tables can't be replicated to peer
comment|// cluster. Then allow to config namespaces or table-cfs which will be replicated to peer
comment|// cluster.
if|if
condition|(
operator|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Need clean exclude-namespaces or exclude-table-cfs config firstly"
operator|+
literal|" when replicate_all flag is false"
argument_list|)
throw|;
block|}
name|checkNamespacesAndTableCfsConfigConflict
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|peerConfig
operator|.
name|isSyncReplication
argument_list|()
condition|)
block|{
name|checkPeerConfigForSyncReplication
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
block|}
name|checkConfiguredWALEntryFilters
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPeerConfigForSyncReplication
parameter_list|(
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
comment|// This is used to reduce the difficulty for implementing the sync replication state transition
comment|// as we need to reopen all the related regions.
comment|// TODO: Add namespace, replicat_all flag back
if|if
condition|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Only support replicated table config for sync replication peer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Only support replicated table config for sync replication peer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
operator|==
literal|null
operator|||
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Need config replicated tables for sync replication peer"
argument_list|)
throw|;
block|}
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|cfs
range|:
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cfs
operator|!=
literal|null
operator|&&
operator|!
name|cfs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Only support replicated table config for sync replication peer"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Set a namespace in the peer config means that all tables in this namespace will be replicated    * to the peer cluster.    *<ol>    *<li>If peer config already has a namespace, then not allow set any table of this namespace to    * the peer config.</li>    *<li>If peer config already has a table, then not allow set this table's namespace to the peer    * config.</li>    *</ol>    *<p>    * Set a exclude namespace in the peer config means that all tables in this namespace can't be    * replicated to the peer cluster.    *<ol>    *<li>If peer config already has a exclude namespace, then not allow set any exclude table of    * this namespace to the peer config.</li>    *<li>If peer config already has a exclude table, then not allow set this table's namespace as a    * exclude namespace.</li>    *</ol>    */
specifier|private
name|void
name|checkNamespacesAndTableCfsConfigConflict
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
if|if
condition|(
name|namespaces
operator|==
literal|null
operator|||
name|namespaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|tableCfs
operator|==
literal|null
operator|||
name|tableCfs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|tableCfs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|table
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Table-cfs "
operator|+
name|table
operator|+
literal|" is conflict with namespaces "
operator|+
name|table
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|" in peer config"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkConfiguredWALEntryFilters
parameter_list|(
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|String
name|filterCSV
init|=
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|BaseReplicationEndpoint
operator|.
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterCSV
operator|!=
literal|null
operator|&&
operator|!
name|filterCSV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|filters
init|=
name|filterCSV
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|filter
range|:
name|filters
control|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|filter
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Configured WALEntryFilter "
operator|+
name|filter
operator|+
literal|" could not be created. Failing add/update peer operation."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkClusterKey
parameter_list|(
name|String
name|clusterKey
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
try|try
block|{
name|ZKConfig
operator|.
name|validateClusterKey
argument_list|(
name|clusterKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid cluster key: "
operator|+
name|clusterKey
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSerialPeerIdsBelongsTo
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|peers
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|isSerial
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|ReplicationUtils
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getPeerConfig
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPeerId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ReplicationQueueStorage
name|getQueueStorage
parameter_list|()
block|{
return|return
name|queueStorage
return|;
block|}
specifier|public
specifier|static
name|ReplicationPeerManager
name|create
parameter_list|(
name|ZKWatcher
name|zk
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|ReplicationPeerStorage
name|peerStorage
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationPeerStorage
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|peerId
range|:
name|peerStorage
operator|.
name|listPeerIds
argument_list|()
control|)
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|peerStorage
operator|.
name|getPeerConfig
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|boolean
name|enabled
init|=
name|peerStorage
operator|.
name|isPeerEnabled
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|SyncReplicationState
name|state
init|=
name|peerStorage
operator|.
name|getPeerSyncReplicationState
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|peers
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|ReplicationPeerDescription
argument_list|(
name|peerId
argument_list|,
name|enabled
argument_list|,
name|peerConfig
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ReplicationPeerManager
argument_list|(
name|peerStorage
argument_list|,
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|)
argument_list|,
name|peers
argument_list|)
return|;
block|}
comment|/**    * For replication peer cluster key or endpoint class, null and empty string is same. So here    * don't use {@link StringUtils#equals(CharSequence, CharSequence)} directly.    */
specifier|private
name|boolean
name|isStringEquals
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|s1
argument_list|)
condition|)
block|{
return|return
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|s2
argument_list|)
return|;
block|}
return|return
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

