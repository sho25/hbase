begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompactSelection
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the actual list - this is needed to handle methods like "sublist" correctly
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
comment|// was this compaction promoted to an off-peak
name|boolean
name|isOffPeakCompaction
init|=
literal|false
decl_stmt|;
comment|// CompactSelection object creation time.
specifier|private
specifier|final
name|long
name|selectionTime
decl_stmt|;
specifier|public
name|CompactSelection
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
parameter_list|)
block|{
name|this
operator|.
name|selectionTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|filesToCompact
operator|=
name|filesToCompact
expr_stmt|;
name|this
operator|.
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|getFilesToCompact
parameter_list|()
block|{
return|return
name|filesToCompact
return|;
block|}
comment|/**    * Removes all files from the current compaction list, and resets off peak    * compactions is set.    */
specifier|public
name|void
name|emptyFileList
parameter_list|()
block|{
name|filesToCompact
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOffPeakCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|isOffPeakCompaction
return|;
block|}
specifier|public
name|void
name|setOffPeak
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isOffPeakCompaction
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|long
name|getSelectionTime
parameter_list|()
block|{
return|return
name|selectionTime
return|;
block|}
specifier|public
name|CompactSelection
name|getSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|=
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|clearSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

