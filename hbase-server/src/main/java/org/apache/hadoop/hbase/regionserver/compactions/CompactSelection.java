begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompactSelection
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the actual list - this is needed to handle methods like "sublist"
comment|// correctly
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Number of off peak compactions either in the compaction queue or    * happening now. Please lock compactionCountLock before modifying.    */
specifier|static
name|long
name|numOutstandingOffPeakCompactions
init|=
literal|0
decl_stmt|;
comment|/**    * Lock object for numOutstandingOffPeakCompactions    */
specifier|private
specifier|final
specifier|static
name|Object
name|compactionCountLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// was this compaction promoted to an off-peak
name|boolean
name|isOffPeakCompaction
init|=
literal|false
decl_stmt|;
comment|// CompactSelection object creation time.
specifier|private
specifier|final
name|long
name|selectionTime
decl_stmt|;
specifier|public
name|CompactSelection
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
parameter_list|)
block|{
name|this
operator|.
name|selectionTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|filesToCompact
operator|=
name|filesToCompact
expr_stmt|;
name|this
operator|.
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Select the expired store files to compact    *     * @param maxExpiredTimeStamp    *          The store file will be marked as expired if its max time stamp is    *          less than this maxExpiredTimeStamp.    * @return A CompactSelection contains the expired store files as    *         filesToCompact    */
specifier|public
name|CompactSelection
name|selectExpiredStoreFilesToCompact
parameter_list|(
name|long
name|maxExpiredTimeStamp
parameter_list|)
block|{
if|if
condition|(
name|filesToCompact
operator|==
literal|null
operator|||
name|filesToCompact
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|expiredStoreFiles
init|=
literal|null
decl_stmt|;
name|boolean
name|hasExpiredStoreFiles
init|=
literal|false
decl_stmt|;
name|CompactSelection
name|expiredSFSelection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StoreFile
name|storeFile
range|:
name|this
operator|.
name|filesToCompact
control|)
block|{
if|if
condition|(
name|storeFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
operator|<
name|maxExpiredTimeStamp
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting the expired store file by compaction: "
operator|+
name|storeFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" whose maxTimeStamp is "
operator|+
name|storeFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
operator|+
literal|" while the max expired timestamp is "
operator|+
name|maxExpiredTimeStamp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasExpiredStoreFiles
condition|)
block|{
name|expiredStoreFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
expr_stmt|;
name|hasExpiredStoreFiles
operator|=
literal|true
expr_stmt|;
block|}
name|expiredStoreFiles
operator|.
name|add
argument_list|(
name|storeFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasExpiredStoreFiles
condition|)
block|{
name|expiredSFSelection
operator|=
operator|new
name|CompactSelection
argument_list|(
name|expiredStoreFiles
argument_list|)
expr_stmt|;
block|}
return|return
name|expiredSFSelection
return|;
block|}
comment|/**    * The current compaction finished, so reset the off peak compactions count    * if this was an off peak compaction.    */
specifier|public
name|void
name|finishRequest
parameter_list|()
block|{
if|if
condition|(
name|isOffPeakCompaction
condition|)
block|{
name|long
name|newValueToLog
init|=
operator|-
literal|1
decl_stmt|;
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
assert|assert
operator|!
name|isOffPeakCompaction
operator|:
literal|"Double-counting off-peak count for compaction"
assert|;
name|newValueToLog
operator|=
operator|--
name|numOutstandingOffPeakCompactions
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Compaction done, numOutstandingOffPeakCompactions is now "
operator|+
name|newValueToLog
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|getFilesToCompact
parameter_list|()
block|{
return|return
name|filesToCompact
return|;
block|}
comment|/**    * Removes all files from the current compaction list, and resets off peak    * compactions is set.    */
specifier|public
name|void
name|emptyFileList
parameter_list|()
block|{
name|filesToCompact
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isOffPeakCompaction
condition|)
block|{
name|long
name|newValueToLog
init|=
operator|-
literal|1
decl_stmt|;
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
comment|// reset the off peak count
name|newValueToLog
operator|=
operator|--
name|numOutstandingOffPeakCompactions
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Nothing to compact, numOutstandingOffPeakCompactions is now "
operator|+
name|newValueToLog
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isOffPeakCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|isOffPeakCompaction
return|;
block|}
specifier|public
specifier|static
name|long
name|getNumOutStandingOffPeakCompactions
parameter_list|()
block|{
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
return|return
name|numOutstandingOffPeakCompactions
return|;
block|}
block|}
comment|/**    * Tries making the compaction off-peak.    * Only checks internal compaction constraints, not timing.    * @return Eventual value of isOffPeakCompaction.    */
specifier|public
name|boolean
name|trySetOffpeak
parameter_list|()
block|{
assert|assert
operator|!
name|isOffPeakCompaction
operator|:
literal|"Double-setting off-peak for compaction "
operator|+
name|this
assert|;
synchronized|synchronized
init|(
name|compactionCountLock
init|)
block|{
if|if
condition|(
name|numOutstandingOffPeakCompactions
operator|==
literal|0
condition|)
block|{
name|numOutstandingOffPeakCompactions
operator|++
expr_stmt|;
name|isOffPeakCompaction
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isOffPeakCompaction
return|;
block|}
specifier|public
name|long
name|getSelectionTime
parameter_list|()
block|{
return|return
name|selectionTime
return|;
block|}
specifier|public
name|CompactSelection
name|subList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|CompactSelection
name|getSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|=
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|clearSubList
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|filesToCompact
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isValidHour
parameter_list|(
name|int
name|hour
parameter_list|)
block|{
return|return
operator|(
name|hour
operator|>=
literal|0
operator|&&
name|hour
operator|<=
literal|23
operator|)
return|;
block|}
block|}
end_class

end_unit

