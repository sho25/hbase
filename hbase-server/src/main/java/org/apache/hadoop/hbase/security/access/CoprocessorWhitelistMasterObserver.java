begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CoprocessorDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Master observer for restricting coprocessor assignments.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|CoprocessorWhitelistMasterObserver
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CP_COPROCESSOR_WHITELIST_PATHS_KEY
init|=
literal|"hbase.coprocessor.region.whitelist.paths"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoprocessorWhitelistMasterObserver
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptor
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableDescriptor
name|currentDesc
parameter_list|,
name|TableDescriptor
name|newDesc
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCoprocessors
argument_list|(
name|ctx
argument_list|,
name|newDesc
argument_list|)
expr_stmt|;
return|return
name|newDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCoprocessors
argument_list|(
name|ctx
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates a single whitelist path against the coprocessor path    * @param  coprocPath the path to the coprocessor including scheme    * @param  wlPath     can be:    *                      1) a "*" to wildcard all coprocessor paths    *                      2) a specific filesystem (e.g. hdfs://my-cluster/)    *                      3) a wildcard path to be evaluated by    *                         {@link FilenameUtils#wildcardMatch(String, String)}    *                         path can specify scheme or not (e.g.    *                         "file:///usr/hbase/coprocessors" or for all    *                         filesystems "/usr/hbase/coprocessors")    * @return             if the path was found under the wlPath    */
specifier|private
specifier|static
name|boolean
name|validatePath
parameter_list|(
name|Path
name|coprocPath
parameter_list|,
name|Path
name|wlPath
parameter_list|)
block|{
comment|// verify if all are allowed
if|if
condition|(
name|wlPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|// verify we are on the same filesystem if wlPath has a scheme
if|if
condition|(
operator|!
name|wlPath
operator|.
name|isAbsoluteAndSchemeAuthorityNull
argument_list|()
condition|)
block|{
name|String
name|wlPathScheme
init|=
name|wlPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|coprocPathScheme
init|=
name|coprocPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|wlPathHost
init|=
name|wlPath
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|coprocPathHost
init|=
name|coprocPath
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|wlPathScheme
operator|!=
literal|null
condition|)
block|{
name|wlPathScheme
operator|=
name|wlPathScheme
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wlPathScheme
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|wlPathHost
operator|!=
literal|null
condition|)
block|{
name|wlPathHost
operator|=
name|wlPathHost
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wlPathHost
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|coprocPathScheme
operator|!=
literal|null
condition|)
block|{
name|coprocPathScheme
operator|=
name|coprocPathScheme
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|coprocPathScheme
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|coprocPathHost
operator|!=
literal|null
condition|)
block|{
name|coprocPathHost
operator|=
name|coprocPathHost
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|coprocPathHost
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wlPathScheme
operator|.
name|equals
argument_list|(
name|coprocPathScheme
argument_list|)
operator|||
operator|!
name|wlPathHost
operator|.
name|equals
argument_list|(
name|coprocPathHost
argument_list|)
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
comment|// allow any on this file-system (file systems were verified to be the same above)
if|if
condition|(
name|wlPath
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|// allow "loose" matches stripping scheme
if|if
condition|(
name|FilenameUtils
operator|.
name|wildcardMatch
argument_list|(
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|coprocPath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|wlPath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|/**    * Perform the validation checks for a coprocessor to determine if the path    * is white listed or not.    * @throws IOException if path is not included in whitelist or a failure    *                     occurs in processing    * @param  ctx         as passed in from the coprocessor    * @param  htd         as passed in from the coprocessor    */
specifier|private
specifier|static
name|void
name|verifyCoprocessors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStringCollection
argument_list|(
name|CP_COPROCESSOR_WHITELIST_PATHS_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|CoprocessorDescriptor
name|cp
range|:
name|htd
operator|.
name|getCoprocessorDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|getJarPath
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|paths
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
block|{
name|Path
name|wlPath
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|validatePath
argument_list|(
operator|new
name|Path
argument_list|(
name|cp
operator|.
name|getJarPath
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|wlPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Coprocessor %s found in directory %s"
argument_list|,
name|cp
operator|.
name|getClassName
argument_list|()
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|)
block|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Loading %s DENIED in %s"
argument_list|,
name|cp
operator|.
name|getClassName
argument_list|()
argument_list|,
name|CP_COPROCESSOR_WHITELIST_PATHS_KEY
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

unit|}   } }
end_unit

