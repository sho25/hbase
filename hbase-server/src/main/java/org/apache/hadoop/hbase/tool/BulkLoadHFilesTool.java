begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HalfStoreFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|FsDelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * The implementation for {@link BulkLoadHFiles}, and also can be executed from command line as a  * tool.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|BulkLoadHFilesTool
extends|extends
name|Configured
implements|implements
name|BulkLoadHFiles
implements|,
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BulkLoadHFilesTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"completebulkload"
decl_stmt|;
comment|// We use a '.' prefix which is ignored when walking directory trees
comment|// above. It is invalid family name.
specifier|static
specifier|final
name|String
name|TMP_DIR
init|=
literal|".tmp"
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFilesPerRegionPerFamily
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|assignSeqIds
decl_stmt|;
comment|// Source delegation token
specifier|private
specifier|final
name|FsDelegationToken
name|fsDelegationToken
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|int
name|nrThreads
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|numRetries
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|String
name|bulkToken
decl_stmt|;
specifier|public
name|BulkLoadHFilesTool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// make a copy, just to be sure we're not overriding someone else's config
name|super
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// disable blockcache for tool invocation, see HBASE-10500
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|userProvider
operator|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fsDelegationToken
operator|=
operator|new
name|FsDelegationToken
argument_list|(
name|userProvider
argument_list|,
literal|"renewer"
argument_list|)
expr_stmt|;
name|assignSeqIds
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ASSIGN_SEQ_IDS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|maxFilesPerRegionPerFamily
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_FILES_PER_REGION_PER_FAMILY
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|nrThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.loadincremental.threads.max"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Initialize a thread pool
specifier|private
name|ExecutorService
name|createExecutorService
parameter_list|()
block|{
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|nrThreads
argument_list|,
name|nrThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"BulkLoadHFilesTool-%1$d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|pool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
specifier|private
name|boolean
name|isCreateTable
parameter_list|()
block|{
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|CREATE_TABLE_CONF_KEY
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSilence
parameter_list|()
block|{
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|IGNORE_UNMATCHED_CF_CONF_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAlwaysCopyFiles
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|ALWAYS_COPY_FILES
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|shouldCopyHFileMetaKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
comment|// skip encoding to keep hfile meta consistent with data block info, see HBASE-15085
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|HFileDataBlockEncoder
operator|.
name|DATA_BLOCK_ENCODING
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|HFile
operator|.
name|isReservedFileInfoKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Checks whether there is any invalid family name in HFiles to be bulk loaded.    */
specifier|private
specifier|static
name|void
name|validateFamiliesInHFiles
parameter_list|(
name|TableDescriptor
name|tableDesc
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|boolean
name|silence
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|familyNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unmatchedFamilies
init|=
name|queue
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|item
lambda|->
name|Bytes
operator|.
name|toString
argument_list|(
name|item
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|fn
lambda|->
operator|!
name|familyNames
operator|.
name|contains
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|unmatchedFamilies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Unmatched family names found: unmatched family names in HFiles to be bulkloaded: "
operator|+
name|unmatchedFamilies
operator|+
literal|"; valid family names of table "
operator|+
name|tableDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" are: "
operator|+
name|familyNames
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|silence
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Populate the Queue with given HFiles    */
specifier|private
specifier|static
name|void
name|populateLoadQueue
parameter_list|(
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|ret
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|v
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|LoadQueueItem
argument_list|(
name|k
argument_list|,
name|p
argument_list|)
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|ret
operator|::
name|add
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|BulkHFileVisitor
parameter_list|<
name|TFamily
parameter_list|>
block|{
name|TFamily
name|bulkFamily
parameter_list|(
name|byte
index|[]
name|familyName
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|bulkHFile
parameter_list|(
name|TFamily
name|family
parameter_list|,
name|FileStatus
name|hfileStatus
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Iterate over the bulkDir hfiles. Skip reference, HFileLink, files starting with "_". Check and    * skip non-valid hfiles by default, or skip this validation by setting    * 'hbase.loadincremental.validate.hfile' to false.    */
specifier|private
specifier|static
parameter_list|<
name|TFamily
parameter_list|>
name|void
name|visitBulkHFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|bulkDir
parameter_list|,
name|BulkHFileVisitor
argument_list|<
name|TFamily
argument_list|>
name|visitor
parameter_list|,
name|boolean
name|validateHFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|familyDirStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|bulkDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|familyStat
range|:
name|familyDirStatuses
control|)
block|{
if|if
condition|(
operator|!
name|familyStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-directory "
operator|+
name|familyStat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|familyDir
init|=
name|familyStat
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Skip invalid family
try|try
block|{
name|ColumnFamilyDescriptorBuilder
operator|.
name|isLegalColumnFamilyName
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping invalid "
operator|+
name|familyStat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TFamily
name|family
init|=
name|visitor
operator|.
name|bulkFamily
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|hfileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|hfileStatus
range|:
name|hfileStatuses
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|isFile
argument_list|(
name|hfileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-file "
operator|+
name|hfileStatus
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|hfile
init|=
name|hfileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Skip "_", reference, HFileLink
name|String
name|fileName
init|=
name|hfile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping reference "
operator|+
name|fileName
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping HFileLink "
operator|+
name|fileName
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Validate HFile Format if needed
if|if
condition|(
name|validateHFile
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|HFile
operator|.
name|isHFileFormat
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the file "
operator|+
name|hfile
operator|+
literal|" doesn't seems to be an hfile. skipping"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the file "
operator|+
name|hfile
operator|+
literal|" was removed"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|visitor
operator|.
name|bulkHFile
argument_list|(
name|family
argument_list|,
name|hfileStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Walk the given directory for all HFiles, and return a Queue containing all such files.    */
specifier|private
specifier|static
name|void
name|discoverLoadQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|ret
parameter_list|,
name|Path
name|hfofDir
parameter_list|,
name|boolean
name|validateHFile
parameter_list|)
throws|throws
name|IOException
block|{
name|visitBulkHFiles
argument_list|(
name|hfofDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|hfofDir
argument_list|,
operator|new
name|BulkHFileVisitor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|bulkFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|familyName
parameter_list|)
block|{
return|return
name|familyName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bulkHFile
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|FileStatus
name|hfile
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|length
init|=
name|hfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to bulk load hfile "
operator|+
name|hfile
operator|.
name|getPath
argument_list|()
operator|+
literal|" with size: "
operator|+
name|length
operator|+
literal|" bytes can be problematic as it may lead to oversplitting."
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|family
argument_list|,
name|hfile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|validateHFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare a collection of {@code LoadQueueItem} from list of source hfiles contained in the    * passed directory and validates whether the prepared queue has all the valid table column    * families in it.    * @param map map of family to List of hfiles    * @param tableName table to which hfiles should be loaded    * @param queue queue which needs to be loaded into the table    * @param silence true to ignore unmatched column families    * @throws IOException If any I/O or network error occurred    */
specifier|public
specifier|static
name|void
name|prepareHFileQueue
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|boolean
name|silence
parameter_list|)
throws|throws
name|IOException
block|{
name|populateLoadQueue
argument_list|(
name|queue
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|validateFamiliesInHFiles
argument_list|(
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|queue
argument_list|,
name|silence
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare a collection of {@code LoadQueueItem} from list of source hfiles contained in the    * passed directory and validates whether the prepared queue has all the valid table column    * families in it.    * @param hfilesDir directory containing list of hfiles to be loaded into the table    * @param queue queue which needs to be loaded into the table    * @param validateHFile if true hfiles will be validated for its format    * @param silence true to ignore unmatched column families    * @throws IOException If any I/O or network error occurred    */
specifier|public
specifier|static
name|void
name|prepareHFileQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Path
name|hfilesDir
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|boolean
name|validateHFile
parameter_list|,
name|boolean
name|silence
parameter_list|)
throws|throws
name|IOException
block|{
name|discoverLoadQueue
argument_list|(
name|conf
argument_list|,
name|queue
argument_list|,
name|hfilesDir
argument_list|,
name|validateHFile
argument_list|)
expr_stmt|;
name|validateFamiliesInHFiles
argument_list|(
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|queue
argument_list|,
name|silence
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used by the replication sink to load the hfiles from the source cluster. It does the following,    *<ol>    *<li>{@link #groupOrSplitPhase(AsyncClusterConnection, TableName, ExecutorService, Deque, List)}    *</li>    *<li>{@link #bulkLoadPhase(AsyncClusterConnection, TableName, Deque, Multimap, boolean, Map)}    *</li>    *</ol>    * @param conn Connection to use    * @param tableName Table to which these hfiles should be loaded to    * @param queue {@code LoadQueueItem} has hfiles yet to be loaded    */
specifier|public
name|void
name|loadHFileQueue
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|boolean
name|copyFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|createExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
init|=
name|groupOrSplitPhase
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|queue
argument_list|,
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getStartEndKeys
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|bulkLoadPhase
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|regionGroups
argument_list|,
name|copyFiles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This takes the LQI's grouped by likely regions and attempts to bulk load them. Any failures are    * re-queued for another pass with the groupOrSplitPhase.    *<p/>    * protected for testing.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|bulkLoadPhase
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
name|boolean
name|copyFiles
parameter_list|,
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|item2RegionMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// atomically bulk load the groups.
name|List
argument_list|<
name|Future
argument_list|<
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|>
argument_list|>
name|loadingFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|>
name|entry
range|:
name|regionGroups
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|first
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
name|lqis
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
init|=
name|lqis
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|lqi
lambda|->
name|Pair
operator|.
name|newPair
argument_list|(
name|lqi
operator|.
name|getFamily
argument_list|()
argument_list|,
name|lqi
operator|.
name|getFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|conn
operator|.
name|bulkLoad
argument_list|(
name|tableName
argument_list|,
name|familyPaths
argument_list|,
name|first
argument_list|,
name|assignSeqIds
argument_list|,
name|fsDelegationToken
operator|.
name|getUserToken
argument_list|()
argument_list|,
name|bulkToken
argument_list|,
name|copyFiles
argument_list|)
argument_list|,
parameter_list|(
name|loaded
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered unrecoverable error from region server"
argument_list|,
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|RETRY_ON_IO_EXCEPTION
argument_list|,
literal|false
argument_list|)
operator|&&
name|numRetries
operator|.
name|get
argument_list|()
operator|<
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Will attempt to retry loading failed HFiles. Retry #"
operator|+
name|numRetries
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
comment|// return lqi's to retry
name|future
operator|.
name|complete
argument_list|(
name|lqis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|RETRY_ON_IO_EXCEPTION
operator|+
literal|" is disabled or we have reached retry limit. Unable to recover"
argument_list|)
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|loaded
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to bulk load region containing "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" into table "
operator|+
name|tableName
operator|+
literal|" with files "
operator|+
name|lqis
operator|+
literal|" failed.  This is recoverable and they will be retried."
argument_list|)
expr_stmt|;
comment|// return lqi's to retry
name|future
operator|.
name|complete
argument_list|(
name|lqis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|loadingFutures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
if|if
condition|(
name|item2RegionMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoadQueueItem
name|lqi
range|:
name|lqis
control|)
block|{
name|item2RegionMap
operator|.
name|put
argument_list|(
name|lqi
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// get all the results.
for|for
control|(
name|Future
argument_list|<
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|>
name|future
range|:
name|loadingFutures
control|)
block|{
try|try
block|{
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
name|toRetry
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|item2RegionMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoadQueueItem
name|lqi
range|:
name|toRetry
control|)
block|{
name|item2RegionMap
operator|.
name|remove
argument_list|(
name|lqi
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LQIs that are requeued to be regrouped.
name|queue
operator|.
name|addAll
argument_list|(
name|toRetry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e1
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e1
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
comment|// At this point something unrecoverable has happened.
comment|// TODO Implement bulk load recovery
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BulkLoad encountered an unrecoverable problem"
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected execution exception during bulk load"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|t
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected interrupted exception during bulk load"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkHFilesCountPerRegionPerFamily
parameter_list|(
specifier|final
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|>
name|e
range|:
name|regionGroups
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MutableInt
argument_list|>
name|filesMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|LoadQueueItem
name|lqi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|MutableInt
name|count
init|=
name|filesMap
operator|.
name|computeIfAbsent
argument_list|(
name|lqi
operator|.
name|getFamily
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|MutableInt
argument_list|()
argument_list|)
decl_stmt|;
name|count
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|intValue
argument_list|()
operator|>
name|maxFilesPerRegionPerFamily
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Trying to load more than "
operator|+
name|maxFilesPerRegionPerFamily
operator|+
literal|" hfiles to family "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lqi
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|" of region with start key "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @param conn the HBase cluster connection    * @param tableName the table name of the table to load into    * @param pool the ExecutorService    * @param queue the queue for LoadQueueItem    * @param startEndKeys start and end keys    * @return A map that groups LQI by likely bulk load region targets and Set of missing hfiles.    */
specifier|private
name|Pair
argument_list|<
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|groupOrSplitPhase
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|startEndKeys
parameter_list|)
throws|throws
name|IOException
block|{
comment|//<region start key, LQI> need synchronized only within this scope of this
comment|// phase because of the puts that happen in futures.
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|rgs
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
init|=
name|Multimaps
operator|.
name|synchronizedMultimap
argument_list|(
name|rgs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|missingHFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|pair
init|=
operator|new
name|Pair
argument_list|<>
argument_list|(
name|regionGroups
argument_list|,
name|missingHFiles
argument_list|)
decl_stmt|;
comment|// drain LQIs and figure out bulk load groups
name|Set
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|splittingFutures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|LoadQueueItem
name|item
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|call
init|=
operator|new
name|Callable
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|splits
init|=
name|groupOrSplit
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|regionGroups
argument_list|,
name|item
argument_list|,
name|startEndKeys
argument_list|)
decl_stmt|;
return|return
name|splits
return|;
block|}
block|}
decl_stmt|;
name|splittingFutures
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get all the results. All grouping and splitting must finish before
comment|// we can attempt the atomic loads.
for|for
control|(
name|Future
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|lqis
range|:
name|splittingFutures
control|)
block|{
try|try
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|splits
init|=
name|lqis
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|splits
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|splits
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|splits
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missingHFiles
operator|.
name|add
argument_list|(
name|splits
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e1
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e1
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOException during splitting"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
comment|// would have been thrown if not parallelized,
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected execution exception during splitting"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|t
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected interrupted exception during splitting"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
return|return
name|pair
return|;
block|}
comment|// unique file name for the table
specifier|private
name|String
name|getUniqueName
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
name|splitStoreFile
parameter_list|(
name|LoadQueueItem
name|item
parameter_list|,
name|TableDescriptor
name|tableDesc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|splitKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|hfilePath
init|=
name|item
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|item
operator|.
name|getFamily
argument_list|()
decl_stmt|;
name|Path
name|tmpDir
init|=
name|hfilePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|TMP_DIR
argument_list|)
condition|)
block|{
name|tmpDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|TMP_DIR
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HFile at "
operator|+
name|hfilePath
operator|+
literal|" no longer fits inside a single "
operator|+
literal|"region. Splitting..."
argument_list|)
expr_stmt|;
name|String
name|uniqueName
init|=
name|getUniqueName
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|familyDesc
init|=
name|tableDesc
operator|.
name|getColumnFamily
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|Path
name|botOut
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|uniqueName
operator|+
literal|".bottom"
argument_list|)
decl_stmt|;
name|Path
name|topOut
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
name|uniqueName
operator|+
literal|".top"
argument_list|)
decl_stmt|;
name|splitStoreFile
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|hfilePath
argument_list|,
name|familyDesc
argument_list|,
name|splitKey
argument_list|,
name|botOut
argument_list|,
name|topOut
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|tmpDir
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|tmpDir
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|botOut
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|topOut
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add these back at the *front* of the queue, so there's a lower
comment|// chance that the region will just split again before we get there.
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
name|lqis
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|lqis
operator|.
name|add
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|family
argument_list|,
name|botOut
argument_list|)
argument_list|)
expr_stmt|;
name|lqis
operator|.
name|add
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|family
argument_list|,
name|topOut
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the current item is already the result of previous splits,
comment|// we don't need it anymore. Clean up to save space.
comment|// It is not part of the original input files.
try|try
block|{
if|if
condition|(
name|tmpDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|TMP_DIR
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|hfilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete temporary split file "
operator|+
name|hfilePath
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully split into new HFiles "
operator|+
name|botOut
operator|+
literal|" and "
operator|+
name|topOut
argument_list|)
expr_stmt|;
return|return
name|lqis
return|;
block|}
comment|/**    * Attempt to assign the given load queue item into its target region group. If the hfile boundary    * no longer fits into a region, physically splits the hfile such that the new bottom half will    * fit and returns the list of LQI's corresponding to the resultant hfiles.    *<p/>    * protected for testing    * @throws IOException if an IO failure is encountered    */
annotation|@
name|VisibleForTesting
specifier|protected
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|groupOrSplit
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
name|LoadQueueItem
name|item
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|startEndKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|hfilePath
init|=
name|item
operator|.
name|getFilePath
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|first
decl_stmt|,
name|last
decl_stmt|;
try|try
init|(
name|HFile
operator|.
name|Reader
name|hfr
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|hfilePath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|hfilePath
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
argument_list|)
init|)
block|{
name|hfr
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|first
operator|=
name|hfr
operator|.
name|getFirstRowKey
argument_list|()
expr_stmt|;
name|last
operator|=
name|hfr
operator|.
name|getLastRowKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"encountered"
argument_list|,
name|fnfe
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|hfilePath
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to load hfile="
operator|+
name|hfilePath
operator|+
literal|" first="
operator|+
name|first
operator|.
name|map
argument_list|(
name|Bytes
operator|::
name|toStringBinary
argument_list|)
operator|+
literal|" last="
operator|+
name|last
operator|.
name|map
argument_list|(
name|Bytes
operator|::
name|toStringBinary
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
operator|.
name|isPresent
argument_list|()
operator|||
operator|!
name|last
operator|.
name|isPresent
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|first
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|last
operator|.
name|isPresent
argument_list|()
assert|;
comment|// TODO what if this is due to a bad HFile?
name|LOG
operator|.
name|info
argument_list|(
literal|"hfile "
operator|+
name|hfilePath
operator|+
literal|" has no entries, skipping"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|get
argument_list|()
argument_list|,
name|last
operator|.
name|get
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid range: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|"> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|idx
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|startEndKeys
argument_list|,
name|Pair
operator|.
name|newPair
argument_list|(
name|first
operator|.
name|get
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
argument_list|,
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
lambda|->
name|Bytes
operator|.
name|compareTo
argument_list|(
name|p1
operator|.
name|getFirst
argument_list|()
argument_list|,
name|p2
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
comment|// not on boundary, returns -(insertion index). Calculate region it
comment|// would be in.
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|indexForCallable
init|=
name|idx
decl_stmt|;
comment|/**      * we can consider there is a region hole in following conditions. 1) if idx< 0,then first      * region info is lost. 2) if the endkey of a region is not equal to the startkey of the next      * region. 3) if the endkey of the last region is not empty.      */
if|if
condition|(
name|indexForCallable
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The first region info for table "
operator|+
name|tableName
operator|+
literal|" can't be found in hbase:meta.Please use hbck tool to fix it first."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|indexForCallable
operator|==
name|startEndKeys
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|startEndKeys
operator|.
name|get
argument_list|(
name|indexForCallable
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The last region info for table "
operator|+
name|tableName
operator|+
literal|" can't be found in hbase:meta.Please use hbck tool to fix it first."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|indexForCallable
operator|+
literal|1
operator|<
name|startEndKeys
operator|.
name|size
argument_list|()
operator|&&
operator|!
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startEndKeys
operator|.
name|get
argument_list|(
name|indexForCallable
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|,
name|startEndKeys
operator|.
name|get
argument_list|(
name|indexForCallable
operator|+
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The endkey of one region for table "
operator|+
name|tableName
operator|+
literal|" is not equal to the startkey of the next region in hbase:meta."
operator|+
literal|"Please use hbck tool to fix it first."
argument_list|)
throw|;
block|}
name|boolean
name|lastKeyInRange
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|last
operator|.
name|get
argument_list|()
argument_list|,
name|startEndKeys
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|<
literal|0
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|startEndKeys
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lastKeyInRange
condition|)
block|{
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|startEndKey
init|=
name|startEndKeys
operator|.
name|get
argument_list|(
name|indexForCallable
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
name|lqis
init|=
name|splitStoreFile
argument_list|(
name|item
argument_list|,
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|startEndKey
operator|.
name|getFirst
argument_list|()
argument_list|,
name|startEndKey
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|lqis
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// group regions.
name|regionGroups
operator|.
name|put
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startEndKeys
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Split a storefile into a top and bottom half, maintaining the metadata, recreating bloom    * filters, etc.    */
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|splitStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inFile
parameter_list|,
name|ColumnFamilyDescriptor
name|familyDesc
parameter_list|,
name|byte
index|[]
name|splitKey
parameter_list|,
name|Path
name|bottomOut
parameter_list|,
name|Path
name|topOut
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Open reader with no block cache, and not in-memory
name|Reference
name|topReference
init|=
name|Reference
operator|.
name|createTopReference
argument_list|(
name|splitKey
argument_list|)
decl_stmt|;
name|Reference
name|bottomReference
init|=
name|Reference
operator|.
name|createBottomReference
argument_list|(
name|splitKey
argument_list|)
decl_stmt|;
name|copyHFileHalf
argument_list|(
name|conf
argument_list|,
name|inFile
argument_list|,
name|topOut
argument_list|,
name|topReference
argument_list|,
name|familyDesc
argument_list|)
expr_stmt|;
name|copyHFileHalf
argument_list|(
name|conf
argument_list|,
name|inFile
argument_list|,
name|bottomOut
argument_list|,
name|bottomReference
argument_list|,
name|familyDesc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy half of an HFile into a new HFile.    */
specifier|private
specifier|static
name|void
name|copyHFileHalf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inFile
parameter_list|,
name|Path
name|outFile
parameter_list|,
name|Reference
name|reference
parameter_list|,
name|ColumnFamilyDescriptor
name|familyDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|CacheConfig
operator|.
name|DISABLED
decl_stmt|;
name|HalfStoreFileReader
name|halfReader
init|=
literal|null
decl_stmt|;
name|StoreFileWriter
name|halfWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|halfReader
operator|=
operator|new
name|HalfStoreFileReader
argument_list|(
name|fs
argument_list|,
name|inFile
argument_list|,
name|cacheConf
argument_list|,
name|reference
argument_list|,
literal|true
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|fileInfo
init|=
name|halfReader
operator|.
name|loadFileInfo
argument_list|()
decl_stmt|;
name|int
name|blocksize
init|=
name|familyDescriptor
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|Algorithm
name|compression
init|=
name|familyDescriptor
operator|.
name|getCompressionType
argument_list|()
decl_stmt|;
name|BloomType
name|bloomFilterType
init|=
name|familyDescriptor
operator|.
name|getBloomFilterType
argument_list|()
decl_stmt|;
name|HFileContext
name|hFileContext
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|HStore
operator|.
name|getChecksumType
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|HStore
operator|.
name|getBytesPerChecksum
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|blocksize
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|familyDescriptor
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|halfWriter
operator|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|outFile
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomFilterType
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|halfReader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
do|do
block|{
name|halfWriter
operator|.
name|append
argument_list|(
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|fileInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|shouldCopyHFileMetaKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|halfWriter
operator|.
name|appendFileInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|halfReader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|halfReader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to close hfile reader for "
operator|+
name|inFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|halfWriter
operator|!=
literal|null
condition|)
block|{
name|halfWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Infers region boundaries for a new table.    *<p/>    * Parameter:<br/>    * bdryMap is a map between keys to an integer belonging to {+1, -1}    *<ul>    *<li>If a key is a start key of a file, then it maps to +1</li>    *<li>If a key is an end key of a file, then it maps to -1</li>    *</ul>    *<p>    * Algo:<br/>    *<ol>    *<li>Poll on the keys in order:    *<ol type="a">    *<li>Keep adding the mapped values to these keys (runningSum)</li>    *<li>Each time runningSum reaches 0, add the start Key from when the runningSum had started to a    * boundary list.</li>    *</ol>    *</li>    *<li>Return the boundary list.</li>    *</ol>    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|inferBoundaries
parameter_list|(
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|bdryMap
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keysArray
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|runningValue
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|currStartKey
init|=
literal|null
decl_stmt|;
name|boolean
name|firstBoundary
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|item
range|:
name|bdryMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|runningValue
operator|==
literal|0
condition|)
block|{
name|currStartKey
operator|=
name|item
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|runningValue
operator|+=
name|item
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|runningValue
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|firstBoundary
condition|)
block|{
name|keysArray
operator|.
name|add
argument_list|(
name|currStartKey
argument_list|)
expr_stmt|;
block|}
name|firstBoundary
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|keysArray
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
return|;
block|}
comment|/**    * If the table is created for the first time, then "completebulkload" reads the files twice. More    * modifications necessary if we want to avoid doing it.    */
specifier|private
name|void
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Path
name|hfofDir
parameter_list|,
name|AsyncAdmin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|hfofDir
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add column families
comment|// Build a set of keys
name|List
argument_list|<
name|ColumnFamilyDescriptorBuilder
argument_list|>
name|familyBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|visitBulkHFiles
argument_list|(
name|fs
argument_list|,
name|hfofDir
argument_list|,
operator|new
name|BulkHFileVisitor
argument_list|<
name|ColumnFamilyDescriptorBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ColumnFamilyDescriptorBuilder
name|bulkFamily
parameter_list|(
name|byte
index|[]
name|familyName
parameter_list|)
block|{
name|ColumnFamilyDescriptorBuilder
name|builder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|familyBuilders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bulkHFile
parameter_list|(
name|ColumnFamilyDescriptorBuilder
name|builder
parameter_list|,
name|FileStatus
name|hfileStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|hfile
init|=
name|hfileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
init|(
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|builder
operator|.
name|getCompressionType
argument_list|()
operator|!=
name|reader
operator|.
name|getFileContext
argument_list|()
operator|.
name|getCompression
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompressionType
argument_list|(
name|reader
operator|.
name|getFileContext
argument_list|()
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting compression "
operator|+
name|reader
operator|.
name|getFileContext
argument_list|()
operator|.
name|getCompression
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for family "
operator|+
name|builder
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|byte
index|[]
name|first
init|=
name|reader
operator|.
name|getFirstRowKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
index|[]
name|last
init|=
name|reader
operator|.
name|getLastRowKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to figure out region boundaries hfile="
operator|+
name|hfile
operator|+
literal|" first="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" last="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
comment|// To eventually infer start key-end key boundaries
name|Integer
name|value
init|=
name|map
operator|.
name|containsKey
argument_list|(
name|first
argument_list|)
condition|?
name|map
operator|.
name|get
argument_list|(
name|first
argument_list|)
else|:
literal|0
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
name|value
operator|=
name|map
operator|.
name|containsKey
argument_list|(
name|last
argument_list|)
condition|?
name|map
operator|.
name|get
argument_list|(
name|last
argument_list|)
else|:
literal|0
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|last
argument_list|,
name|value
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|keys
init|=
name|inferBoundaries
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
name|tdBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|familyBuilders
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|::
name|build
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|tdBuilder
operator|::
name|setColumnFamily
argument_list|)
expr_stmt|;
name|FutureUtils
operator|.
name|get
argument_list|(
name|admin
operator|.
name|createTable
argument_list|(
name|tdBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is available!!"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|performBulkLoad
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|boolean
name|copyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|fsDelegationToken
operator|.
name|acquireDelegationToken
argument_list|(
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|getFilePath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bulkToken
operator|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|prepareBulkLoad
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|pair
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|item2RegionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Assumes that region splits can happen while this occurs.
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// need to reload split keys each iteration.
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|startEndKeys
init|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getStartEndKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split occurred while grouping HFiles, retry attempt "
operator|+
name|count
operator|+
literal|" with "
operator|+
name|queue
operator|.
name|size
argument_list|()
operator|+
literal|" files remaining to group or split"
argument_list|)
expr_stmt|;
block|}
name|int
name|maxRetries
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|BULKLOAD_MAX_RETRIES_NUMBER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|maxRetries
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRetries
argument_list|,
name|startEndKeys
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxRetries
operator|!=
literal|0
operator|&&
name|count
operator|>=
name|maxRetries
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Retry attempted "
operator|+
name|count
operator|+
literal|" times without completing, bailing out"
argument_list|)
throw|;
block|}
name|count
operator|++
expr_stmt|;
comment|// Using ByteBuffer for byte[] equality semantics
name|pair
operator|=
name|groupOrSplitPhase
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|queue
argument_list|,
name|startEndKeys
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkHFilesCountPerRegionPerFamily
argument_list|(
name|regionGroups
argument_list|)
condition|)
block|{
comment|// Error is logged inside checkHFilesCountPerRegionPerFamily.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to load more than "
operator|+
name|maxFilesPerRegionPerFamily
operator|+
literal|" hfiles to one family of one region"
argument_list|)
throw|;
block|}
name|bulkLoadPhase
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|regionGroups
argument_list|,
name|copyFile
argument_list|,
name|item2RegionMap
argument_list|)
expr_stmt|;
comment|// NOTE: The next iteration's split / group could happen in parallel to
comment|// atomic bulkloads assuming that there are splits and no merges, and
comment|// that we can atomically pull out the groups we want to retry.
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bulk load aborted with some files not yet loaded."
operator|+
literal|"Please check log for more details."
argument_list|)
throw|;
block|}
return|return
name|item2RegionMap
return|;
block|}
specifier|private
name|void
name|cleanup
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|fsDelegationToken
operator|.
name|releaseDelegationToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|bulkToken
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|cleanupBulkLoad
argument_list|(
name|tableName
argument_list|,
name|bulkToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|err
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"-------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"Bulk load aborted with some files not yet loaded:\n"
argument_list|)
expr_stmt|;
name|err
operator|.
name|append
argument_list|(
literal|"-------------------------------------------------\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|LoadQueueItem
name|q
range|:
name|queue
control|)
block|{
name|err
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|q
operator|.
name|getFilePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|err
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform a bulk load of the given directory into the given pre-existing table. This method is    * not threadsafe.    * @param map map of family to List of hfiles    * @param tableName table to load the hfiles    * @param silence true to ignore unmatched column families    * @param copyFile always copy hfiles if true    * @throws TableNotFoundException if table does not yet exist    */
specifier|private
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|doBulkLoad
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
parameter_list|,
name|boolean
name|silence
parameter_list|,
name|boolean
name|copyFile
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is not currently available."
argument_list|)
throw|;
block|}
comment|// LQI queue does not need to be threadsafe -- all operations on this queue
comment|// happen in this thread
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|ExecutorService
name|pool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|prepareHFileQueue
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|map
argument_list|,
name|queue
argument_list|,
name|silence
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bulk load operation did not get any files to load"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|pool
operator|=
name|createExecutorService
argument_list|()
expr_stmt|;
return|return
name|performBulkLoad
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|pool
argument_list|,
name|copyFile
argument_list|)
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform a bulk load of the given directory into the given pre-existing table. This method is    * not threadsafe.    * @param tableName table to load the hfiles    * @param hfofDir the directory that was provided as the output path of a job using    *          HFileOutputFormat    * @param silence true to ignore unmatched column families    * @param copyFile always copy hfiles if true    * @throws TableNotFoundException if table does not yet exist    */
specifier|private
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|doBulkLoad
parameter_list|(
name|AsyncClusterConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Path
name|hfofDir
parameter_list|,
name|boolean
name|silence
parameter_list|,
name|boolean
name|copyFile
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" is not currently available."
argument_list|)
throw|;
block|}
comment|/*      * Checking hfile format is a time-consuming operation, we should have an option to skip this      * step when bulkloading millions of HFiles. See HBASE-13985.      */
name|boolean
name|validateHFile
init|=
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.loadincremental.validate.hfile"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateHFile
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You are skipping HFiles validation, it might cause some data loss if files "
operator|+
literal|"are not correct. If you fail to read data from your table after using this "
operator|+
literal|"option, consider removing the files and bulkload again without this option. "
operator|+
literal|"See HBASE-13985"
argument_list|)
expr_stmt|;
block|}
comment|// LQI queue does not need to be threadsafe -- all operations on this queue
comment|// happen in this thread
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|ExecutorService
name|pool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|prepareHFileQueue
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|conn
argument_list|,
name|tableName
argument_list|,
name|hfofDir
argument_list|,
name|queue
argument_list|,
name|validateHFile
argument_list|,
name|silence
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bulk load operation did not find any files to load in directory {}. "
operator|+
literal|"Does it contain files in subdirectories that correspond to column family names?"
argument_list|,
operator|(
name|hfofDir
operator|!=
literal|null
condition|?
name|hfofDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|pool
operator|=
name|createExecutorService
argument_list|()
expr_stmt|;
return|return
name|performBulkLoad
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|pool
argument_list|,
name|copyFile
argument_list|)
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|queue
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|bulkLoad
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|family2Files
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|AsyncClusterConnection
name|conn
init|=
name|ClusterConnectionFactory
operator|.
name|createAsyncClusterConnection
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|userProvider
operator|.
name|getCurrent
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|errorMsg
init|=
name|format
argument_list|(
literal|"Table '%s' does not exist."
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
return|return
name|doBulkLoad
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|family2Files
argument_list|,
name|isSilence
argument_list|()
argument_list|,
name|isAlwaysCopyFiles
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|bulkLoad
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|AsyncClusterConnection
name|conn
init|=
name|ClusterConnectionFactory
operator|.
name|createAsyncClusterConnection
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|userProvider
operator|.
name|getCurrent
argument_list|()
argument_list|)
init|)
block|{
name|AsyncAdmin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FutureUtils
operator|.
name|get
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|isCreateTable
argument_list|()
condition|)
block|{
name|createTable
argument_list|(
name|tableName
argument_list|,
name|dir
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|errorMsg
init|=
name|format
argument_list|(
literal|"Table '%s' does not exist."
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
return|return
name|doBulkLoad
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|dir
argument_list|,
name|isSilence
argument_list|()
argument_list|,
name|isAlwaysCopyFiles
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setBulkToken
parameter_list|(
name|String
name|bulkToken
parameter_list|)
block|{
name|this
operator|.
name|bulkToken
operator|=
name|bulkToken
expr_stmt|;
block|}
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
literal|"bin/hbase completebulkload<-Dargs> "
operator|+
literal|"</path/to/hfileoutputformat-output><tablename>\n"
operator|+
literal|"\t-D"
operator|+
name|CREATE_TABLE_CONF_KEY
operator|+
literal|"=no can be used to avoid creation "
operator|+
literal|"of a table by this tool.\n"
operator|+
literal|"\t Note: if you set this to 'no', then target table must already exist.\n"
operator|+
literal|"\t-D"
operator|+
name|IGNORE_UNMATCHED_CF_CONF_KEY
operator|+
literal|"=yes can be used to ignore "
operator|+
literal|"unmatched column families.\n"
operator|+
literal|"\t-loadTable switch implies your baseDirectory to store file has a "
operator|+
literal|"depth of 3, table must exist\n"
operator|+
literal|"\t and -loadTable switch is the last option on the command line.\n\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
operator|&&
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|!
name|bulkLoad
argument_list|(
name|tableName
argument_list|,
name|dirPath
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|family2Files
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|regionDir
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dirPath
argument_list|)
control|)
block|{
name|FSVisitor
operator|.
name|visitRegionStoreFiles
argument_list|(
name|fs
argument_list|,
name|regionDir
operator|.
name|getPath
argument_list|()
argument_list|,
parameter_list|(
name|region
parameter_list|,
name|family
parameter_list|,
name|hfileName
parameter_list|)
lambda|->
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|regionDir
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|family
argument_list|,
name|hfileName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|family2Files
operator|.
name|containsKey
argument_list|(
name|familyName
argument_list|)
condition|)
block|{
name|family2Files
operator|.
name|get
argument_list|(
name|familyName
argument_list|)
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|family2Files
operator|.
name|put
argument_list|(
name|familyName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|bulkLoad
argument_list|(
name|tableName
argument_list|,
name|family2Files
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|BulkLoadHFilesTool
argument_list|(
name|conf
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

