begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|histogram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|UniformSample
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|ExponentiallyDecayingSample
import|;
end_import

begin_class
specifier|public
class|class
name|MetricsHistogram
extends|extends
name|MetricsBase
block|{
comment|// 1028 items implies 99.9% CI w/ 5% margin of error
comment|// (assuming a normal distribution on the underlying data)
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SAMPLE_SIZE
init|=
literal|1028
decl_stmt|;
comment|// the bias towards sampling from more recent data.
comment|// Per Cormode et al. an alpha of 0.015 strongly biases to the last 5 minutes
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_ALPHA
init|=
literal|0.015
decl_stmt|;
comment|/**    * Constructor to create a new histogram metric    * @param nam           the name to publish the metric under    * @param registry      where the metrics object will be registered    * @param description   the metric's description    * @param forwardBiased true if you want this histogram to give more     *                      weight to recent data,     *                      false if you want all data to have uniform weight    */
specifier|public
name|MetricsHistogram
parameter_list|(
specifier|final
name|String
name|nam
parameter_list|,
specifier|final
name|MetricsRegistry
name|registry
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
name|boolean
name|forwardBiased
parameter_list|)
block|{
name|super
argument_list|(
name|nam
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|max
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|sum
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|sample
operator|=
name|forwardBiased
condition|?
operator|new
name|ExponentiallyDecayingSample
argument_list|(
name|DEFAULT_SAMPLE_SIZE
argument_list|,
name|DEFAULT_ALPHA
argument_list|)
else|:
operator|new
name|UniformSample
argument_list|(
name|DEFAULT_SAMPLE_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|variance
operator|=
operator|new
name|AtomicReference
argument_list|<
name|double
index|[]
argument_list|>
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|add
argument_list|(
name|nam
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructor create a new (forward biased) histogram metric    * @param nam         the name to publish the metric under    * @param registry    where the metrics object will be registered    * @param description the metric's description    */
specifier|public
name|MetricsHistogram
parameter_list|(
specifier|final
name|String
name|nam
parameter_list|,
name|MetricsRegistry
name|registry
parameter_list|,
specifier|final
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|nam
argument_list|,
name|registry
argument_list|,
name|NO_DESCRIPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor - create a new (forward biased) histogram metric    * @param nam the name of the metrics to be used to publish the metric    * @param registry - where the metrics object will be registered    */
specifier|public
name|MetricsHistogram
parameter_list|(
specifier|final
name|String
name|nam
parameter_list|,
name|MetricsRegistry
name|registry
parameter_list|)
block|{
name|this
argument_list|(
name|nam
argument_list|,
name|registry
argument_list|,
name|NO_DESCRIPTION
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Sample
name|sample
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|min
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|max
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|sum
decl_stmt|;
comment|// these are for computing a running-variance,
comment|// without letting floating point errors accumulate via Welford's algorithm
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|double
index|[]
argument_list|>
name|variance
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|count
decl_stmt|;
comment|/**    * Clears all recorded values.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|sample
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|max
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|sum
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|variance
operator|.
name|set
argument_list|(
operator|new
name|double
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|update
argument_list|(
operator|(
name|long
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sample
operator|.
name|update
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|setMax
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|setMin
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|sum
operator|.
name|getAndAdd
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|updateVariance
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setMax
parameter_list|(
specifier|final
name|long
name|potentialMax
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|long
name|currentMax
init|=
name|max
operator|.
name|get
argument_list|()
decl_stmt|;
name|done
operator|=
name|currentMax
operator|>=
name|potentialMax
operator|||
name|max
operator|.
name|compareAndSet
argument_list|(
name|currentMax
argument_list|,
name|potentialMax
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setMin
parameter_list|(
name|long
name|potentialMin
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|long
name|currentMin
init|=
name|min
operator|.
name|get
argument_list|()
decl_stmt|;
name|done
operator|=
name|currentMin
operator|<=
name|potentialMin
operator|||
name|min
operator|.
name|compareAndSet
argument_list|(
name|currentMin
argument_list|,
name|potentialMin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateVariance
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|double
index|[]
name|oldValues
init|=
name|variance
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|newValues
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|oldValues
index|[
literal|0
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|newValues
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
name|newValues
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|double
name|oldM
init|=
name|oldValues
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|double
name|oldS
init|=
name|oldValues
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|double
name|newM
init|=
name|oldM
operator|+
operator|(
operator|(
name|value
operator|-
name|oldM
operator|)
operator|/
name|getCount
argument_list|()
operator|)
decl_stmt|;
specifier|final
name|double
name|newS
init|=
name|oldS
operator|+
operator|(
operator|(
name|value
operator|-
name|oldM
operator|)
operator|*
operator|(
name|value
operator|-
name|newM
operator|)
operator|)
decl_stmt|;
name|newValues
index|[
literal|0
index|]
operator|=
name|newM
expr_stmt|;
name|newValues
index|[
literal|1
index|]
operator|=
name|newS
expr_stmt|;
block|}
name|done
operator|=
name|variance
operator|.
name|compareAndSet
argument_list|(
name|oldValues
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMax
parameter_list|()
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|max
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|0L
return|;
block|}
specifier|public
name|long
name|getMin
parameter_list|()
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|min
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|0L
return|;
block|}
specifier|public
name|double
name|getMean
parameter_list|()
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|sum
operator|.
name|get
argument_list|()
operator|/
operator|(
name|double
operator|)
name|getCount
argument_list|()
return|;
block|}
return|return
literal|0.0
return|;
block|}
specifier|public
name|double
name|getStdDev
parameter_list|()
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|getVariance
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0.0
return|;
block|}
specifier|public
name|Snapshot
name|getSnapshot
parameter_list|()
block|{
return|return
name|sample
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
specifier|private
name|double
name|getVariance
parameter_list|()
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
literal|0.0
return|;
block|}
return|return
name|variance
operator|.
name|get
argument_list|()
index|[
literal|1
index|]
operator|/
operator|(
name|getCount
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pushMetric
parameter_list|(
name|MetricsRecord
name|mr
parameter_list|)
block|{
specifier|final
name|Snapshot
name|s
init|=
name|this
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_num_ops"
argument_list|,
name|this
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_min"
argument_list|,
name|this
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_max"
argument_list|,
name|this
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_mean"
argument_list|,
operator|(
name|float
operator|)
name|this
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_std_dev"
argument_list|,
operator|(
name|float
operator|)
name|this
operator|.
name|getStdDev
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_median"
argument_list|,
operator|(
name|float
operator|)
name|s
operator|.
name|getMedian
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_75th_percentile"
argument_list|,
operator|(
name|float
operator|)
name|s
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_95th_percentile"
argument_list|,
operator|(
name|float
operator|)
name|s
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|setMetric
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_99th_percentile"
argument_list|,
operator|(
name|float
operator|)
name|s
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

