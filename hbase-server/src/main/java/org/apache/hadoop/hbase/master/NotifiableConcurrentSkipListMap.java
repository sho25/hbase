begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_comment
comment|/**  *<p>Encapsulate a ConcurrentSkipListMap to ensure that notifications are sent when  *  the list is modified. Offers only the functions used by the AssignementManager, hence  *  does not extends ConcurrentSkipListMap.</p>  *  *<p>Used only in master package (main& test), so it's package protected.</p>  *  * @param<K> - class for the keys  * @param<V> - class for the values  */
end_comment

begin_class
class|class
name|NotifiableConcurrentSkipListMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegatee
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|delegatee
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|delegatee
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|V
name|remove
parameter_list|(
name|K
name|k
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|V
name|v
init|=
name|delegatee
operator|.
name|remove
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|delegatee
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
block|}
specifier|public
name|void
name|waitForUpdate
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|delegatee
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|K
name|k
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|?
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|K
name|k
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|get
argument_list|(
name|k
argument_list|)
return|;
block|}
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyMap
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|copyValues
parameter_list|()
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|delegatee
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|copyEntrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
init|=
operator|new
name|TreeSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|it
init|=
name|delegatee
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|entrySet
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entrySet
return|;
block|}
specifier|public
name|void
name|waitForUpdate
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|delegatee
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|delegatee
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|delegatee
init|)
block|{
name|delegatee
operator|.
name|clear
argument_list|()
expr_stmt|;
name|delegatee
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

