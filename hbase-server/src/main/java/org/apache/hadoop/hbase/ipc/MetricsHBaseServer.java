begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CallQueueTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultiActionResultTooLarge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTooBusyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|FailedSanityCheckException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|OutOfOrderScannerNextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsHBaseServer
block|{
specifier|private
name|MetricsHBaseServerSource
name|source
decl_stmt|;
specifier|private
name|MetricsHBaseServerWrapper
name|serverWrapper
decl_stmt|;
specifier|public
name|MetricsHBaseServer
parameter_list|(
name|String
name|serverName
parameter_list|,
name|MetricsHBaseServerWrapper
name|wrapper
parameter_list|)
block|{
name|serverWrapper
operator|=
name|wrapper
expr_stmt|;
name|source
operator|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsHBaseServerSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|create
argument_list|(
name|serverName
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
name|void
name|authorizationSuccess
parameter_list|()
block|{
name|source
operator|.
name|authorizationSuccess
argument_list|()
expr_stmt|;
block|}
name|void
name|authorizationFailure
parameter_list|()
block|{
name|source
operator|.
name|authorizationFailure
argument_list|()
expr_stmt|;
block|}
name|void
name|authenticationFailure
parameter_list|()
block|{
name|source
operator|.
name|authenticationFailure
argument_list|()
expr_stmt|;
block|}
name|void
name|authenticationSuccess
parameter_list|()
block|{
name|source
operator|.
name|authenticationSuccess
argument_list|()
expr_stmt|;
block|}
name|void
name|authenticationFallback
parameter_list|()
block|{
name|source
operator|.
name|authenticationFallback
argument_list|()
expr_stmt|;
block|}
name|void
name|sentBytes
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|source
operator|.
name|sentBytes
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|void
name|receivedBytes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|source
operator|.
name|receivedBytes
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|void
name|sentResponse
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|source
operator|.
name|sentResponse
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|void
name|receivedRequest
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|source
operator|.
name|receivedRequest
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|void
name|dequeuedCall
parameter_list|(
name|int
name|qTime
parameter_list|)
block|{
name|source
operator|.
name|dequeuedCall
argument_list|(
name|qTime
argument_list|)
expr_stmt|;
block|}
name|void
name|processedCall
parameter_list|(
name|int
name|processingTime
parameter_list|)
block|{
name|source
operator|.
name|processedCall
argument_list|(
name|processingTime
argument_list|)
expr_stmt|;
block|}
name|void
name|totalCall
parameter_list|(
name|int
name|totalTime
parameter_list|)
block|{
name|source
operator|.
name|queuedAndProcessedCall
argument_list|(
name|totalTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exception
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|source
operator|.
name|exception
argument_list|()
expr_stmt|;
comment|/**      * Keep some metrics for commonly seen exceptions      *      * Try and  put the most common types first.      * Place child types before the parent type that they extend.      *      * If this gets much larger we might have to go to a hashmap      */
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|throwable
operator|instanceof
name|OutOfOrderScannerNextException
condition|)
block|{
name|source
operator|.
name|outOfOrderException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|RegionTooBusyException
condition|)
block|{
name|source
operator|.
name|tooBusyException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|UnknownScannerException
condition|)
block|{
name|source
operator|.
name|unknownScannerException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|RegionMovedException
condition|)
block|{
name|source
operator|.
name|movedRegionException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|source
operator|.
name|notServingRegionException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|FailedSanityCheckException
condition|)
block|{
name|source
operator|.
name|failedSanityException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|MultiActionResultTooLarge
condition|)
block|{
name|source
operator|.
name|multiActionTooLargeException
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|CallQueueTooBigException
condition|)
block|{
name|source
operator|.
name|callQueueTooBigException
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|MetricsHBaseServerSource
name|getMetricsSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|MetricsHBaseServerWrapper
name|getHBaseServerWrapper
parameter_list|()
block|{
return|return
name|serverWrapper
return|;
block|}
block|}
end_class

end_unit

