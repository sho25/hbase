begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
operator|.
name|BucketEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|UnsafeAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Unsafe
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|UnsafeSharedMemoryBucketEntry
extends|extends
name|BucketEntry
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|707544024564058801L
decl_stmt|;
comment|// We are just doing what AtomicInteger doing for the Atomic incrementAndGet/decrementAndGet.
comment|// We are avoiding the need to have a field of AtomicIneger type and have it as just int type.
comment|// We would like to reduce the head overhead per object of this type as much as possible.
comment|// Doing this direct Unsafe usage save us 16 bytes per Object.
comment|// ie Just using 4 bytes for int type than 20 bytes requirement for an AtomicInteger (16 bytes)
comment|// and 4 bytes reference to it.
specifier|private
specifier|static
specifier|final
name|Unsafe
name|unsafe
init|=
name|UnsafeAccess
operator|.
name|theUnsafe
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|refCountOffset
decl_stmt|;
static|static
block|{
try|try
block|{
name|refCountOffset
operator|=
name|unsafe
operator|.
name|objectFieldOffset
argument_list|(
name|UnsafeSharedMemoryBucketEntry
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"refCount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// Set this when we were not able to forcefully evict the block
specifier|private
specifier|volatile
name|boolean
name|markedForEvict
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|refCount
init|=
literal|0
decl_stmt|;
specifier|public
name|UnsafeSharedMemoryBucketEntry
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|accessCounter
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
name|super
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|accessCounter
argument_list|,
name|inMemory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|refCount
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|incrementRefCountAndGet
parameter_list|()
block|{
return|return
name|unsafe
operator|.
name|getAndAddInt
argument_list|(
name|this
argument_list|,
name|refCountOffset
argument_list|,
literal|1
argument_list|)
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|decrementRefCountAndGet
parameter_list|()
block|{
return|return
name|unsafe
operator|.
name|getAndAddInt
argument_list|(
name|this
argument_list|,
name|refCountOffset
argument_list|,
operator|-
literal|1
argument_list|)
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isMarkedForEvict
parameter_list|()
block|{
return|return
name|this
operator|.
name|markedForEvict
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|markForEvict
parameter_list|()
block|{
name|this
operator|.
name|markedForEvict
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

