begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedurePrepareLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|SwitchRpcThrottleProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|namespace
operator|.
name|NamespaceAuditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchExceedThrottleQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchExceedThrottleQuotaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
operator|.
name|FileWithSize
import|;
end_import

begin_comment
comment|/**  * Master Quota Manager.  * It is responsible for initialize the quota table on the first-run and  * provide the admin operations to interact with the quota table.  *  * TODO: FUTURE: The master will be responsible to notify each RS of quota changes  * and it will do the "quota aggregation" when the QuotaScope is CLUSTER.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MasterQuotaManager
implements|implements
name|RegionStateListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterQuotaManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|EMPTY_MAP
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
name|NamedLock
argument_list|<
name|String
argument_list|>
name|namespaceLocks
decl_stmt|;
specifier|private
name|NamedLock
argument_list|<
name|TableName
argument_list|>
name|tableLocks
decl_stmt|;
specifier|private
name|NamedLock
argument_list|<
name|String
argument_list|>
name|userLocks
decl_stmt|;
specifier|private
name|NamedLock
argument_list|<
name|String
argument_list|>
name|regionServerLocks
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
name|NamespaceAuditor
name|namespaceQuotaManager
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|RegionInfo
argument_list|,
name|SizeSnapshotWithTimestamp
argument_list|>
name|regionSizes
decl_stmt|;
comment|// Storage for quota rpc throttle
specifier|private
name|RpcThrottleStorage
name|rpcThrottleStorage
decl_stmt|;
specifier|public
name|MasterQuotaManager
parameter_list|(
specifier|final
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the user doesn't want the quota support skip all the initializations.
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Quota support disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create the quota table if missing
if|if
condition|(
operator|!
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Quota table not found. Creating..."
argument_list|)
expr_stmt|;
name|createQuotaTable
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing quota support"
argument_list|)
expr_stmt|;
name|namespaceLocks
operator|=
operator|new
name|NamedLock
argument_list|<>
argument_list|()
expr_stmt|;
name|tableLocks
operator|=
operator|new
name|NamedLock
argument_list|<>
argument_list|()
expr_stmt|;
name|userLocks
operator|=
operator|new
name|NamedLock
argument_list|<>
argument_list|()
expr_stmt|;
name|regionServerLocks
operator|=
operator|new
name|NamedLock
argument_list|<>
argument_list|()
expr_stmt|;
name|regionSizes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaceQuotaManager
operator|=
operator|new
name|NamespaceAuditor
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|namespaceQuotaManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|rpcThrottleStorage
operator|=
operator|new
name|RpcThrottleStorage
argument_list|(
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{   }
specifier|public
name|boolean
name|isQuotaInitialized
parameter_list|()
block|{
return|return
name|initialized
operator|&&
name|namespaceQuotaManager
operator|.
name|isInitialized
argument_list|()
return|;
block|}
comment|/* ==========================================================================    *  Admin operations to manage the quota table    */
specifier|public
name|SetQuotaResponse
name|setQuota
parameter_list|(
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|checkQuotaSupport
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|hasUserName
argument_list|()
condition|)
block|{
name|userLocks
operator|.
name|lock
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|req
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
name|setUserQuota
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|setUserQuota
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|,
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUserQuota
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|userLocks
operator|.
name|unlock
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
name|TableName
name|table
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tableLocks
operator|.
name|lock
argument_list|(
name|table
argument_list|)
expr_stmt|;
try|try
block|{
name|setTableQuota
argument_list|(
name|table
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableLocks
operator|.
name|unlock
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|namespaceLocks
operator|.
name|lock
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setNamespaceQuota
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|namespaceLocks
operator|.
name|unlock
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|hasRegionServer
argument_list|()
condition|)
block|{
name|regionServerLocks
operator|.
name|lock
argument_list|(
name|req
operator|.
name|getRegionServer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setRegionServerQuota
argument_list|(
name|req
operator|.
name|getRegionServer
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|regionServerLocks
operator|.
name|unlock
argument_list|(
name|req
operator|.
name|getRegionServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"a user, a table, a namespace or region server must be specified"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|SetQuotaResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUserQuota
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
name|req
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QuotaUtil
operator|.
name|getUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|deleteUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetUserQuota
argument_list|(
name|userName
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetUserQuota
argument_list|(
name|userName
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUserQuota
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
name|userName
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QuotaUtil
operator|.
name|getUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|table
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|deleteUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetUserQuota
argument_list|(
name|userName
argument_list|,
name|table
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetUserQuota
argument_list|(
name|userName
argument_list|,
name|table
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUserQuota
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|QuotaUtil
operator|.
name|getUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|deleteUserQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetUserQuota
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetUserQuota
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTableQuota
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|null
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QuotaUtil
operator|.
name|getTableQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addTableQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|SpaceQuotaSnapshot
name|currSnapshotOfTable
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshotFromQuotaTable
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|QuotaUtil
operator|.
name|deleteTableQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|currSnapshotOfTable
operator|!=
literal|null
condition|)
block|{
name|SpaceQuotaStatus
name|quotaStatus
init|=
name|currSnapshotOfTable
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
operator|==
name|quotaStatus
operator|.
name|getPolicy
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
operator|&&
name|quotaStatus
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
name|QuotaUtil
operator|.
name|enableTableIfNotEnabled
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetTableQuota
argument_list|(
name|table
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetTableQuota
argument_list|(
name|table
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespaceQuota
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|QuotaUtil
operator|.
name|getNamespaceQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|namespace
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addNamespaceQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|namespace
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|deleteNamespaceQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetNamespaceQuota
argument_list|(
name|namespace
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetNamespaceQuota
argument_list|(
name|namespace
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRegionServerQuota
parameter_list|(
specifier|final
name|String
name|regionServer
parameter_list|,
specifier|final
name|SetQuotaRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setQuota
argument_list|(
name|req
argument_list|,
operator|new
name|SetQuotaOperations
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GlobalQuotaSettingsImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|regionServer
argument_list|,
name|QuotaUtil
operator|.
name|getRegionServerQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionServer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|addRegionServerQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionServer
argument_list|,
name|quotaPojo
operator|.
name|toQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|QuotaUtil
operator|.
name|deleteRegionServerQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSetRegionServerQuota
argument_list|(
name|regionServer
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSetRegionServerQuota
argument_list|(
name|regionServer
argument_list|,
name|quotaPojo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespaceQuota
parameter_list|(
name|NamespaceDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|this
operator|.
name|namespaceQuotaManager
operator|.
name|addNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeNamespaceQuota
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|this
operator|.
name|namespaceQuotaManager
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SwitchRpcThrottleResponse
name|switchRpcThrottle
parameter_list|(
name|SwitchRpcThrottleRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|rpcThrottle
init|=
name|request
operator|.
name|getRpcThrottleEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialized
condition|)
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSwitchRpcThrottle
argument_list|(
name|rpcThrottle
argument_list|)
expr_stmt|;
name|boolean
name|oldRpcThrottle
init|=
name|rpcThrottleStorage
operator|.
name|isRpcThrottleEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|rpcThrottle
operator|!=
name|oldRpcThrottle
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} switch rpc throttle from {} to {}"
argument_list|,
name|masterServices
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|oldRpcThrottle
argument_list|,
name|rpcThrottle
argument_list|)
expr_stmt|;
name|ProcedurePrepareLatch
name|latch
init|=
name|ProcedurePrepareLatch
operator|.
name|createBlockingLatch
argument_list|()
decl_stmt|;
name|SwitchRpcThrottleProcedure
name|procedure
init|=
operator|new
name|SwitchRpcThrottleProcedure
argument_list|(
name|rpcThrottleStorage
argument_list|,
name|rpcThrottle
argument_list|,
name|masterServices
operator|.
name|getServerName
argument_list|()
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip switch rpc throttle to {} because it's the same with old value"
argument_list|,
name|rpcThrottle
argument_list|)
expr_stmt|;
block|}
name|SwitchRpcThrottleResponse
name|response
init|=
name|SwitchRpcThrottleResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPreviousRpcThrottleEnabled
argument_list|(
name|oldRpcThrottle
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSwitchRpcThrottle
argument_list|(
name|oldRpcThrottle
argument_list|,
name|rpcThrottle
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip switch rpc throttle to {} because rpc quota is disabled"
argument_list|,
name|rpcThrottle
argument_list|)
expr_stmt|;
return|return
name|SwitchRpcThrottleResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPreviousRpcThrottleEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
name|IsRpcThrottleEnabledResponse
name|isRpcThrottleEnabled
parameter_list|(
name|IsRpcThrottleEnabledRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preIsRpcThrottleEnabled
argument_list|()
expr_stmt|;
name|boolean
name|enabled
init|=
name|isRpcThrottleEnabled
argument_list|()
decl_stmt|;
name|IsRpcThrottleEnabledResponse
name|response
init|=
name|IsRpcThrottleEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRpcThrottleEnabled
argument_list|(
name|enabled
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postIsRpcThrottleEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip get rpc throttle because rpc quota is disabled"
argument_list|)
expr_stmt|;
return|return
name|IsRpcThrottleEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRpcThrottleEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|isRpcThrottleEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|initialized
condition|?
name|rpcThrottleStorage
operator|.
name|isRpcThrottleEnabled
argument_list|()
else|:
literal|false
return|;
block|}
specifier|public
name|SwitchExceedThrottleQuotaResponse
name|switchExceedThrottleQuota
parameter_list|(
name|SwitchExceedThrottleQuotaRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|enabled
init|=
name|request
operator|.
name|getExceedThrottleQuotaEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialized
condition|)
block|{
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preSwitchExceedThrottleQuota
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|boolean
name|previousEnabled
init|=
name|QuotaUtil
operator|.
name|isExceedThrottleQuotaEnabled
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousEnabled
operator|==
name|enabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip switch exceed throttle quota to {} because it's the same with old value"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QuotaUtil
operator|.
name|switchExceedThrottleQuota
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} switch exceed throttle quota from {} to {}"
argument_list|,
name|masterServices
operator|.
name|getClientIdAuditPrefix
argument_list|()
argument_list|,
name|previousEnabled
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
name|SwitchExceedThrottleQuotaResponse
name|response
init|=
name|SwitchExceedThrottleQuotaResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPreviousExceedThrottleQuotaEnabled
argument_list|(
name|previousEnabled
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|masterServices
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postSwitchExceedThrottleQuota
argument_list|(
name|previousEnabled
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip switch exceed throttle quota to {} because quota is disabled"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
return|return
name|SwitchExceedThrottleQuotaResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPreviousExceedThrottleQuotaEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|isExceedThrottleQuotaEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|initialized
condition|?
name|QuotaUtil
operator|.
name|isExceedThrottleQuotaEnabled
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|)
else|:
literal|false
return|;
block|}
specifier|private
name|void
name|setQuota
parameter_list|(
specifier|final
name|SetQuotaRequest
name|req
parameter_list|,
specifier|final
name|SetQuotaOperations
name|quotaOps
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|req
operator|.
name|hasRemoveAll
argument_list|()
operator|&&
name|req
operator|.
name|getRemoveAll
argument_list|()
operator|==
literal|true
condition|)
block|{
name|quotaOps
operator|.
name|preApply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|quotaOps
operator|.
name|delete
argument_list|()
expr_stmt|;
name|quotaOps
operator|.
name|postApply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Apply quota changes
name|GlobalQuotaSettingsImpl
name|currentQuota
init|=
name|quotaOps
operator|.
name|fetch
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Current quota for request("
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|req
argument_list|)
operator|+
literal|"): "
operator|+
name|currentQuota
argument_list|)
expr_stmt|;
block|}
comment|// Call the appropriate "pre" CP hook with the current quota value (may be null)
name|quotaOps
operator|.
name|preApply
argument_list|(
name|currentQuota
argument_list|)
expr_stmt|;
comment|// Translate the protobuf request back into a POJO
name|QuotaSettings
name|newQuota
init|=
name|QuotaSettings
operator|.
name|buildFromProto
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Deserialized quota from request: "
operator|+
name|newQuota
argument_list|)
expr_stmt|;
block|}
comment|// Merge the current quota settings with the new quota settings the user provided.
comment|//
comment|// NB: while SetQuotaRequest technically allows for multi types of quotas to be set in one
comment|// message, the Java API (in Admin/AsyncAdmin) does not. Assume there is only one type.
name|GlobalQuotaSettingsImpl
name|mergedQuota
init|=
name|currentQuota
operator|.
name|merge
argument_list|(
name|newQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Computed merged quota from current quota and user request: "
operator|+
name|mergedQuota
argument_list|)
expr_stmt|;
block|}
comment|// Submit new changes
if|if
condition|(
name|mergedQuota
operator|==
literal|null
condition|)
block|{
name|quotaOps
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|quotaOps
operator|.
name|update
argument_list|(
name|mergedQuota
argument_list|)
expr_stmt|;
block|}
comment|// Advertise the final result via the "post" CP hook
name|quotaOps
operator|.
name|postApply
argument_list|(
name|mergedQuota
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkNamespaceTableAndRegionQuota
parameter_list|(
name|TableName
name|tName
parameter_list|,
name|int
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|namespaceQuotaManager
operator|.
name|checkQuotaToCreateTable
argument_list|(
name|tName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkAndUpdateNamespaceRegionQuota
parameter_list|(
name|TableName
name|tName
parameter_list|,
name|int
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|namespaceQuotaManager
operator|.
name|checkQuotaToUpdateRegion
argument_list|(
name|tName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return cached region count, or -1 if quota manager is disabled or table status not found   */
specifier|public
name|int
name|getRegionCountOfTable
parameter_list|(
name|TableName
name|tName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return
name|namespaceQuotaManager
operator|.
name|getRegionCountOfTable
argument_list|(
name|tName
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRegionMerged
parameter_list|(
name|RegionInfo
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|namespaceQuotaManager
operator|.
name|updateQuotaForRegionMerge
argument_list|(
name|mergedRegion
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRegionSplit
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|namespaceQuotaManager
operator|.
name|checkQuotaToSplitRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove table from namespace quota.    *    * @param tName - The table name to update quota usage.    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
name|void
name|removeTableFromNamespaceQuota
parameter_list|(
name|TableName
name|tName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|namespaceQuotaManager
operator|.
name|removeFromNamespaceUsage
argument_list|(
name|tName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NamespaceAuditor
name|getNamespaceQuotaManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaceQuotaManager
return|;
block|}
comment|/**    * Encapsulates CRUD quota operations for some subject.    */
specifier|private
specifier|static
interface|interface
name|SetQuotaOperations
block|{
comment|/**      * Fetches the current quota settings for the subject.      */
name|GlobalQuotaSettingsImpl
name|fetch
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Deletes the quota for the subject.      */
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Persist the given quota for the subject.      */
name|void
name|update
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Performs some action before {@link #update(GlobalQuotaSettingsImpl)} with the current      * quota for the subject.      */
name|void
name|preApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Performs some action after {@link #update(GlobalQuotaSettingsImpl)} with the resulting      * quota from the request action for the subject.      */
name|void
name|postApply
parameter_list|(
name|GlobalQuotaSettingsImpl
name|quotaPojo
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/* ==========================================================================    *  Helpers    */
specifier|private
name|void
name|checkQuotaSupport
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"quota support disabled"
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|long
name|maxWaitTime
init|=
name|masterServices
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"hbase.master.wait.for.quota.manager.init"
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// default is 30 seconds.
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for Quota Manager to be initialized."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|initialized
operator|&&
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|)
operator|<
name|maxWaitTime
condition|)
do|;
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Quota manager is uninitialized, please retry later."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|createQuotaTable
parameter_list|()
throws|throws
name|IOException
block|{
name|masterServices
operator|.
name|createSystemTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_DESC
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|NamedLock
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|HashSet
argument_list|<
name|T
argument_list|>
name|locks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|lock
parameter_list|(
specifier|final
name|T
name|name
parameter_list|)
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|locks
init|)
block|{
while|while
condition|(
name|locks
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|locks
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|locks
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unlock
parameter_list|(
specifier|final
name|T
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|locks
init|)
block|{
name|locks
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|locks
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRegionSplitReverted
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|this
operator|.
name|namespaceQuotaManager
operator|.
name|removeRegionFromNamespaceUsage
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Holds the size of a region at the given time, millis since the epoch.    */
specifier|private
specifier|static
class|class
name|SizeSnapshotWithTimestamp
block|{
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
specifier|public
name|SizeSnapshotWithTimestamp
parameter_list|(
name|long
name|size
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|SizeSnapshotWithTimestamp
condition|)
block|{
name|SizeSnapshotWithTimestamp
name|other
init|=
operator|(
name|SizeSnapshotWithTimestamp
operator|)
name|o
decl_stmt|;
return|return
name|size
operator|==
name|other
operator|.
name|size
operator|&&
name|time
operator|==
name|other
operator|.
name|time
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|hcb
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
return|return
name|hcb
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"SizeSnapshotWithTimestamp={size="
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
literal|"B, "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"time="
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|initializeRegionSizes
parameter_list|()
block|{
assert|assert
name|regionSizes
operator|==
literal|null
assert|;
name|this
operator|.
name|regionSizes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addRegionSize
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|regionSizes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|regionSizes
operator|.
name|put
argument_list|(
name|hri
argument_list|,
operator|new
name|SizeSnapshotWithTimestamp
argument_list|(
name|size
argument_list|,
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|snapshotRegionSizes
parameter_list|()
block|{
if|if
condition|(
name|regionSizes
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_MAP
return|;
block|}
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|SizeSnapshotWithTimestamp
argument_list|>
name|entry
range|:
name|regionSizes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
name|int
name|pruneEntriesOlderThan
parameter_list|(
name|long
name|timeToPruneBefore
parameter_list|)
block|{
if|if
condition|(
name|regionSizes
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|numEntriesRemoved
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|SizeSnapshotWithTimestamp
argument_list|>
argument_list|>
name|iterator
init|=
name|regionSizes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|currentEntryTime
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEntryTime
operator|<
name|timeToPruneBefore
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|numEntriesRemoved
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numEntriesRemoved
return|;
block|}
specifier|public
name|void
name|processFileArchivals
parameter_list|(
name|FileArchiveNotificationRequest
name|request
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HashMultimap
argument_list|<
name|TableName
argument_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|archivedFilesByTable
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Group the archived files by table
for|for
control|(
name|FileWithSize
name|fileWithSize
range|:
name|request
operator|.
name|getArchivedFilesList
argument_list|()
control|)
block|{
name|TableName
name|tn
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|fileWithSize
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|archivedFilesByTable
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|fileWithSize
operator|.
name|getName
argument_list|()
argument_list|,
name|fileWithSize
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Grouped archived files by table: "
operator|+
name|archivedFilesByTable
argument_list|)
expr_stmt|;
block|}
comment|// Report each set of files to the appropriate object
for|for
control|(
name|TableName
name|tn
range|:
name|archivedFilesByTable
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|filesWithSize
init|=
name|archivedFilesByTable
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
specifier|final
name|FileArchiverNotifier
name|notifier
init|=
name|FileArchiverNotifierFactoryImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|conn
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|addArchivedFiles
argument_list|(
name|filesWithSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes each region size entry where the RegionInfo references the provided TableName.    *    * @param tableName tableName.    */
specifier|public
name|void
name|removeRegionSizesForTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|regionSizes
operator|.
name|keySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|regionInfo
lambda|->
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

