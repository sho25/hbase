begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollServerSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DefaultThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Event loop group related config.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NettyEventLoopGroupConfig
block|{
specifier|private
specifier|final
name|EventLoopGroup
name|group
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ServerChannel
argument_list|>
name|serverChannelClass
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Channel
argument_list|>
name|clientChannelClass
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useEpoll
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Config to enable native transport.
name|boolean
name|epollEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.netty.nativetransport"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Use the faster native epoll transport mechanism on linux if enabled
return|return
name|epollEnabled
operator|&&
name|JVM
operator|.
name|isLinux
argument_list|()
operator|&&
name|JVM
operator|.
name|isAmd64
argument_list|()
return|;
block|}
specifier|public
name|NettyEventLoopGroupConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|threadPoolName
parameter_list|)
block|{
name|boolean
name|useEpoll
init|=
name|useEpoll
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|workerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.netty.worker.count"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ThreadFactory
name|eventLoopThreadFactory
init|=
operator|new
name|DefaultThreadFactory
argument_list|(
name|threadPoolName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|useEpoll
condition|)
block|{
name|group
operator|=
operator|new
name|EpollEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|eventLoopThreadFactory
argument_list|)
expr_stmt|;
name|serverChannelClass
operator|=
name|EpollServerSocketChannel
operator|.
name|class
expr_stmt|;
name|clientChannelClass
operator|=
name|EpollSocketChannel
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|group
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
name|workerCount
argument_list|,
name|eventLoopThreadFactory
argument_list|)
expr_stmt|;
name|serverChannelClass
operator|=
name|NioServerSocketChannel
operator|.
name|class
expr_stmt|;
name|clientChannelClass
operator|=
name|NioSocketChannel
operator|.
name|class
expr_stmt|;
block|}
block|}
specifier|public
name|EventLoopGroup
name|group
parameter_list|()
block|{
return|return
name|group
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|ServerChannel
argument_list|>
name|serverChannelClass
parameter_list|()
block|{
return|return
name|serverChannelClass
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Channel
argument_list|>
name|clientChannelClass
parameter_list|()
block|{
return|return
name|clientChannelClass
return|;
block|}
block|}
end_class

end_unit

