begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
operator|.
name|Visitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A tool to migrate the data stored in hbase:meta table to pbuf serialization.  * Supports migrating from 0.92.x and 0.94.x to 0.96.x for the catalog table.  * @deprecated will be removed for the major release after 0.96.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|MetaMigrationConvertingToPB
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaMigrationConvertingToPB
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
class|class
name|ConvertToPBMetaVisitor
implements|implements
name|Visitor
block|{
specifier|private
specifier|final
name|MasterServices
name|services
decl_stmt|;
specifier|private
name|long
name|numMigratedRows
decl_stmt|;
specifier|public
name|ConvertToPBMetaVisitor
parameter_list|(
name|MasterServices
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
name|numMigratedRows
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Check info:regioninfo, info:splitA, and info:splitB.  Make sure all
comment|// have migrated HRegionInfos.
name|byte
index|[]
name|hriBytes
init|=
name|getBytes
argument_list|(
name|r
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
comment|// Presumes that an edit updating all three cells either succeeds or
comment|// doesn't -- that we don't have case of info:regioninfo migrated but not
comment|// info:splitA.
if|if
condition|(
name|isMigrated
argument_list|(
name|hriBytes
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// OK. Need to migrate this row in meta.
comment|//This will 'migrate' the HRI from 092.x and 0.94.x to 0.96+ by reading the
comment|//writable serialization
name|HRegionInfo
name|hri
init|=
name|parseFrom
argument_list|(
name|hriBytes
argument_list|)
decl_stmt|;
comment|// Now make a put to write back to meta.
name|Put
name|p
init|=
name|MetaTableAccessor
operator|.
name|makePutFromRegionInfo
argument_list|(
name|hri
argument_list|)
decl_stmt|;
comment|// Now migrate info:splitA and info:splitB if they are not null
name|migrateSplitIfNecessary
argument_list|(
name|r
argument_list|,
name|p
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
expr_stmt|;
name|migrateSplitIfNecessary
argument_list|(
name|r
argument_list|,
name|p
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|putToMetaTable
argument_list|(
name|this
operator|.
name|services
operator|.
name|getShortCircuitConnection
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Migrated "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numMigratedRows
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|static
name|void
name|migrateSplitIfNecessary
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|Put
name|p
parameter_list|,
specifier|final
name|byte
index|[]
name|which
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|hriSplitBytes
init|=
name|getBytes
argument_list|(
name|r
argument_list|,
name|which
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMigrated
argument_list|(
name|hriSplitBytes
argument_list|)
condition|)
block|{
comment|//This will 'migrate' the HRI from 092.x and 0.94.x to 0.96+ by reading the
comment|//writable serialization
name|HRegionInfo
name|hri
init|=
name|parseFrom
argument_list|(
name|hriSplitBytes
argument_list|)
decl_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|which
argument_list|,
name|hri
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|HRegionInfo
name|parseFrom
parameter_list|(
name|byte
index|[]
name|hriBytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|HRegionInfo
operator|.
name|parseFrom
argument_list|(
name|hriBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param r Result to dig in.    * @param qualifier Qualifier to look at in the passed<code>r</code>.    * @return Bytes for an HRegionInfo or null if no bytes or empty bytes found.    */
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|byte
index|[]
name|hriBytes
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|hriBytes
operator|==
literal|null
operator|||
name|hriBytes
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|hriBytes
return|;
block|}
specifier|static
name|boolean
name|isMigrated
parameter_list|(
specifier|final
name|byte
index|[]
name|hriBytes
parameter_list|)
block|{
if|if
condition|(
name|hriBytes
operator|==
literal|null
operator|||
name|hriBytes
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|true
return|;
return|return
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|hriBytes
argument_list|)
return|;
block|}
comment|/**    * Converting writable serialization to PB, if it is needed.    * @param services MasterServices to get a handle on master    * @return num migrated rows    * @throws IOException or RuntimeException if something goes wrong    */
specifier|public
specifier|static
name|long
name|updateMetaIfNecessary
parameter_list|(
specifier|final
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isMetaTableUpdated
argument_list|(
name|services
operator|.
name|getShortCircuitConnection
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"META already up-to date with PB serialization"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"META has Writable serializations, migrating hbase:meta to PB serialization"
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|rows
init|=
name|updateMeta
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"META updated with PB serialization. Total rows updated: "
operator|+
name|rows
argument_list|)
expr_stmt|;
return|return
name|rows
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Update hbase:meta with PB serialization failed."
operator|+
literal|"Master startup aborted."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Update hbase:meta rows, converting writable serialization to PB    * @return num migrated rows    */
specifier|static
name|long
name|updateMeta
parameter_list|(
specifier|final
name|MasterServices
name|masterServices
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting update of META"
argument_list|)
expr_stmt|;
name|ConvertToPBMetaVisitor
name|v
init|=
operator|new
name|ConvertToPBMetaVisitor
argument_list|(
name|masterServices
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScan
argument_list|(
name|masterServices
operator|.
name|getShortCircuitConnection
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished update of META. Total rows updated:"
operator|+
name|v
operator|.
name|numMigratedRows
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|numMigratedRows
return|;
block|}
comment|/**    * @param hConnection connection to be used    * @return True if the meta table has been migrated.    * @throws IOException    */
specifier|static
name|boolean
name|isMetaTableUpdated
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|MetaTableAccessor
operator|.
name|fullScanOfMeta
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase:meta doesn't have any entries to update."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
name|byte
index|[]
name|value
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMigrated
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

