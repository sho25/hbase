begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodeAssignmentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodesPlan
import|;
end_import

begin_comment
comment|/**  * Helper class that is used by {@link RegionPlacementMaintainer} to print  * information for favored nodes  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AssignmentVerificationReport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AssignmentVerificationReport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|enforceLocality
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isFilledUp
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|totalRegions
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|totalRegionServers
init|=
literal|0
decl_stmt|;
comment|// for unassigned regions
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|unAssignedRegionsList
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// For regions without valid favored nodes
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsWithoutValidFavoredNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// For regions not running on the favored nodes
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|nonFavoredAssignedRegionList
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// For regions running on the favored nodes
specifier|private
name|int
name|totalFavoredAssignments
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|favoredNodes
init|=
operator|new
name|int
index|[
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
index|]
decl_stmt|;
specifier|private
name|float
index|[]
name|favoredNodesLocalitySummary
init|=
operator|new
name|float
index|[
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
index|]
decl_stmt|;
specifier|private
name|float
name|actualLocalitySummary
init|=
literal|0
decl_stmt|;
comment|// For region balancing information
specifier|private
name|float
name|avgRegionsOnRS
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|maxRegionsOnRS
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|minRegionsOnRS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|mostLoadedRSSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|leastLoadedRSSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|float
name|avgDispersionScore
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|maxDispersionScore
init|=
literal|0
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|maxDispersionScoreServerSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|float
name|minDispersionScore
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|minDispersionScoreServerSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|float
name|avgDispersionNum
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|maxDispersionNum
init|=
literal|0
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|maxDispersionNumServerSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|float
name|minDispersionNum
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|minDispersionNumServerSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|fillUp
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SnapshotOfRegionAssignmentFromMeta
name|snapshot
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|regionLocalityMap
parameter_list|)
block|{
comment|// Set the table name
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
comment|// Get all the regions for this table
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfoList
init|=
name|snapshot
operator|.
name|getTableToRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Get the total region num for the current table
name|this
operator|.
name|totalRegions
operator|=
name|regionInfoList
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Get the existing assignment plan
name|FavoredNodesPlan
name|favoredNodesAssignment
init|=
name|snapshot
operator|.
name|getExistingAssignmentPlan
argument_list|()
decl_stmt|;
comment|// Get the region to region server mapping
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|currentAssignment
init|=
name|snapshot
operator|.
name|getRegionToRegionServerMap
argument_list|()
decl_stmt|;
comment|// Initialize the server to its hosing region counter map
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|serverToHostingRegionCounterMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|primaryRSToRegionCounterMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|primaryToSecTerRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Check the favored nodes and its locality information
comment|// Also keep tracker of the most loaded and least loaded region servers
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regionInfoList
control|)
block|{
try|try
block|{
name|ServerName
name|currentRS
init|=
name|currentAssignment
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// Handle unassigned regions
if|if
condition|(
name|currentRS
operator|==
literal|null
condition|)
block|{
name|unAssignedRegionsList
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Keep updating the server to is hosting region counter map
name|Integer
name|hostRegionCounter
init|=
name|serverToHostingRegionCounterMap
operator|.
name|get
argument_list|(
name|currentRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostRegionCounter
operator|==
literal|null
condition|)
block|{
name|hostRegionCounter
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hostRegionCounter
operator|=
name|hostRegionCounter
operator|.
name|intValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|serverToHostingRegionCounterMap
operator|.
name|put
argument_list|(
name|currentRS
argument_list|,
name|hostRegionCounter
argument_list|)
expr_stmt|;
comment|// Get the favored nodes from the assignment plan and verify it.
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|favoredNodesAssignment
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|==
literal|null
operator|||
name|favoredNodes
operator|.
name|size
argument_list|()
operator|!=
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
condition|)
block|{
name|regionsWithoutValidFavoredNodes
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Get the primary, secondary and tertiary region server
name|ServerName
name|primaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|secondaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|tertiaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update the primary rs to its region set map
name|Integer
name|regionCounter
init|=
name|primaryRSToRegionCounterMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionCounter
operator|==
literal|null
condition|)
block|{
name|regionCounter
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|regionCounter
operator|=
name|regionCounter
operator|.
name|intValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|primaryRSToRegionCounterMap
operator|.
name|put
argument_list|(
name|primaryRS
argument_list|,
name|regionCounter
argument_list|)
expr_stmt|;
comment|// Update the primary rs to secondary and tertiary rs map
name|Set
argument_list|<
name|ServerName
argument_list|>
name|secAndTerSet
init|=
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|secAndTerSet
operator|==
literal|null
condition|)
block|{
name|secAndTerSet
operator|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|secAndTerSet
operator|.
name|add
argument_list|(
name|secondaryRS
argument_list|)
expr_stmt|;
name|secAndTerSet
operator|.
name|add
argument_list|(
name|tertiaryRS
argument_list|)
expr_stmt|;
name|primaryToSecTerRSMap
operator|.
name|put
argument_list|(
name|primaryRS
argument_list|,
name|secAndTerSet
argument_list|)
expr_stmt|;
comment|// Get the position of the current region server in the favored nodes list
name|FavoredNodesPlan
operator|.
name|Position
name|favoredNodePosition
init|=
name|FavoredNodesPlan
operator|.
name|getFavoredServerPosition
argument_list|(
name|favoredNodes
argument_list|,
name|currentRS
argument_list|)
decl_stmt|;
comment|// Handle the non favored assignment.
if|if
condition|(
name|favoredNodePosition
operator|==
literal|null
condition|)
block|{
name|nonFavoredAssignedRegionList
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Increase the favored nodes assignment.
name|this
operator|.
name|favoredNodes
index|[
name|favoredNodePosition
operator|.
name|ordinal
argument_list|()
index|]
operator|++
expr_stmt|;
name|totalFavoredAssignments
operator|++
expr_stmt|;
comment|// Summary the locality information for each favored nodes
if|if
condition|(
name|regionLocalityMap
operator|!=
literal|null
condition|)
block|{
comment|// Set the enforce locality as true;
name|this
operator|.
name|enforceLocality
operator|=
literal|true
expr_stmt|;
comment|// Get the region degree locality map
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|regionDegreeLocalityMap
init|=
name|regionLocalityMap
operator|.
name|get
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionDegreeLocalityMap
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// ignore the region which doesn't have any store files.
block|}
comment|// Get the locality summary for each favored nodes
for|for
control|(
name|FavoredNodesPlan
operator|.
name|Position
name|p
range|:
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|values
argument_list|()
control|)
block|{
name|ServerName
name|favoredNode
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|p
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the locality for the current favored nodes
name|Float
name|locality
init|=
name|regionDegreeLocalityMap
operator|.
name|get
argument_list|(
name|favoredNode
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|locality
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|favoredNodesLocalitySummary
index|[
name|p
operator|.
name|ordinal
argument_list|()
index|]
operator|+=
name|locality
expr_stmt|;
block|}
block|}
comment|// Get the locality summary for the current region server
name|Float
name|actualLocality
init|=
name|regionDegreeLocalityMap
operator|.
name|get
argument_list|(
name|currentRS
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualLocality
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|actualLocalitySummary
operator|+=
name|actualLocality
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot verify the region assignment for region "
operator|+
operator|(
operator|(
name|region
operator|==
literal|null
operator|)
condition|?
literal|" null "
else|:
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|)
operator|+
literal|"because of "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|dispersionScoreSummary
init|=
literal|0
decl_stmt|;
name|float
name|dispersionNumSummary
init|=
literal|0
decl_stmt|;
comment|// Calculate the secondary score for each primary region server
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|primaryRSToRegionCounterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|primaryRS
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|regionsOnPrimary
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Process the dispersion number and score
name|float
name|dispersionScore
init|=
literal|0
decl_stmt|;
name|int
name|dispersionNum
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
operator|!=
literal|null
operator|&&
name|regionsOnPrimary
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|dispersionNum
operator|=
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|dispersionScore
operator|=
name|dispersionNum
operator|/
operator|(
operator|(
name|float
operator|)
name|regionsOnPrimary
operator|.
name|intValue
argument_list|()
operator|*
literal|2
operator|)
expr_stmt|;
block|}
comment|// Update the max dispersion score
if|if
condition|(
name|dispersionScore
operator|>
name|this
operator|.
name|maxDispersionScore
condition|)
block|{
name|this
operator|.
name|maxDispersionScoreServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDispersionScore
operator|=
name|dispersionScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionScore
operator|==
name|this
operator|.
name|maxDispersionScore
condition|)
block|{
name|this
operator|.
name|maxDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the max dispersion num
if|if
condition|(
name|dispersionNum
operator|>
name|this
operator|.
name|maxDispersionNum
condition|)
block|{
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDispersionNum
operator|=
name|dispersionNum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionNum
operator|==
name|this
operator|.
name|maxDispersionNum
condition|)
block|{
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the min dispersion score
if|if
condition|(
name|dispersionScore
operator|<
name|this
operator|.
name|minDispersionScore
condition|)
block|{
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minDispersionScore
operator|=
name|dispersionScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionScore
operator|==
name|this
operator|.
name|minDispersionScore
condition|)
block|{
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the min dispersion num
if|if
condition|(
name|dispersionNum
operator|<
name|this
operator|.
name|minDispersionNum
condition|)
block|{
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minDispersionNum
operator|=
name|dispersionNum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionNum
operator|==
name|this
operator|.
name|minDispersionNum
condition|)
block|{
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
name|dispersionScoreSummary
operator|+=
name|dispersionScore
expr_stmt|;
name|dispersionNumSummary
operator|+=
name|dispersionNum
expr_stmt|;
block|}
comment|// Update the avg dispersion score
if|if
condition|(
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|avgDispersionScore
operator|=
name|dispersionScoreSummary
operator|/
operator|(
name|float
operator|)
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|avgDispersionNum
operator|=
name|dispersionNumSummary
operator|/
operator|(
name|float
operator|)
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Fill up the most loaded and least loaded region server information
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|serverToHostingRegionCounterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|currentRS
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|hostRegionCounter
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Update the most loaded region server list and maxRegionsOnRS
if|if
condition|(
name|hostRegionCounter
operator|>
name|this
operator|.
name|maxRegionsOnRS
condition|)
block|{
name|maxRegionsOnRS
operator|=
name|hostRegionCounter
expr_stmt|;
name|this
operator|.
name|mostLoadedRSSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|mostLoadedRSSet
operator|.
name|add
argument_list|(
name|currentRS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hostRegionCounter
operator|==
name|this
operator|.
name|maxRegionsOnRS
condition|)
block|{
name|this
operator|.
name|mostLoadedRSSet
operator|.
name|add
argument_list|(
name|currentRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the least loaded region server list and minRegionsOnRS
if|if
condition|(
name|hostRegionCounter
operator|<
name|this
operator|.
name|minRegionsOnRS
condition|)
block|{
name|this
operator|.
name|minRegionsOnRS
operator|=
name|hostRegionCounter
expr_stmt|;
name|this
operator|.
name|leastLoadedRSSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|leastLoadedRSSet
operator|.
name|add
argument_list|(
name|currentRS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hostRegionCounter
operator|==
name|this
operator|.
name|minRegionsOnRS
condition|)
block|{
name|this
operator|.
name|leastLoadedRSSet
operator|.
name|add
argument_list|(
name|currentRS
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and total region servers
name|this
operator|.
name|totalRegionServers
operator|=
name|serverToHostingRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|avgRegionsOnRS
operator|=
operator|(
name|totalRegionServers
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
name|totalRegions
operator|/
operator|(
name|float
operator|)
name|totalRegionServers
operator|)
expr_stmt|;
comment|// Set the isFilledUp as true
name|isFilledUp
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Use this to project the dispersion scores    * @param tableName    * @param snapshot    * @param newPlan    */
specifier|public
name|void
name|fillUpDispersion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SnapshotOfRegionAssignmentFromMeta
name|snapshot
parameter_list|,
name|FavoredNodesPlan
name|newPlan
parameter_list|)
block|{
comment|// Set the table name
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
comment|// Get all the regions for this table
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfoList
init|=
name|snapshot
operator|.
name|getTableToRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Get the total region num for the current table
name|this
operator|.
name|totalRegions
operator|=
name|regionInfoList
operator|.
name|size
argument_list|()
expr_stmt|;
name|FavoredNodesPlan
name|plan
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newPlan
operator|==
literal|null
condition|)
block|{
name|plan
operator|=
name|snapshot
operator|.
name|getExistingAssignmentPlan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|plan
operator|=
name|newPlan
expr_stmt|;
block|}
comment|// Get the region to region server mapping
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|primaryRSToRegionCounterMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|primaryToSecTerRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|Set
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Check the favored nodes and its locality information
comment|// Also keep tracker of the most loaded and least loaded region servers
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regionInfoList
control|)
block|{
try|try
block|{
comment|// Get the favored nodes from the assignment plan and verify it.
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|plan
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|==
literal|null
operator|||
name|favoredNodes
operator|.
name|size
argument_list|()
operator|!=
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
condition|)
block|{
name|regionsWithoutValidFavoredNodes
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Get the primary, secondary and tertiary region server
name|ServerName
name|primaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|secondaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|tertiaryRS
init|=
name|favoredNodes
operator|.
name|get
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update the primary rs to its region set map
name|Integer
name|regionCounter
init|=
name|primaryRSToRegionCounterMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionCounter
operator|==
literal|null
condition|)
block|{
name|regionCounter
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|regionCounter
operator|=
name|regionCounter
operator|.
name|intValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|primaryRSToRegionCounterMap
operator|.
name|put
argument_list|(
name|primaryRS
argument_list|,
name|regionCounter
argument_list|)
expr_stmt|;
comment|// Update the primary rs to secondary and tertiary rs map
name|Set
argument_list|<
name|ServerName
argument_list|>
name|secAndTerSet
init|=
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|secAndTerSet
operator|==
literal|null
condition|)
block|{
name|secAndTerSet
operator|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|secAndTerSet
operator|.
name|add
argument_list|(
name|secondaryRS
argument_list|)
expr_stmt|;
name|secAndTerSet
operator|.
name|add
argument_list|(
name|tertiaryRS
argument_list|)
expr_stmt|;
name|primaryToSecTerRSMap
operator|.
name|put
argument_list|(
name|primaryRS
argument_list|,
name|secAndTerSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot verify the region assignment for region "
operator|+
operator|(
operator|(
name|region
operator|==
literal|null
operator|)
condition|?
literal|" null "
else|:
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|)
operator|+
literal|"because of "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|dispersionScoreSummary
init|=
literal|0
decl_stmt|;
name|float
name|dispersionNumSummary
init|=
literal|0
decl_stmt|;
comment|// Calculate the secondary score for each primary region server
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|primaryRSToRegionCounterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|primaryRS
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|regionsOnPrimary
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Process the dispersion number and score
name|float
name|dispersionScore
init|=
literal|0
decl_stmt|;
name|int
name|dispersionNum
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
operator|!=
literal|null
operator|&&
name|regionsOnPrimary
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|dispersionNum
operator|=
name|primaryToSecTerRSMap
operator|.
name|get
argument_list|(
name|primaryRS
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|dispersionScore
operator|=
name|dispersionNum
operator|/
operator|(
operator|(
name|float
operator|)
name|regionsOnPrimary
operator|.
name|intValue
argument_list|()
operator|*
literal|2
operator|)
expr_stmt|;
block|}
comment|// Update the max dispersion num
if|if
condition|(
name|dispersionNum
operator|>
name|this
operator|.
name|maxDispersionNum
condition|)
block|{
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDispersionNum
operator|=
name|dispersionNum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionNum
operator|==
name|this
operator|.
name|maxDispersionNum
condition|)
block|{
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the min dispersion score
if|if
condition|(
name|dispersionScore
operator|<
name|this
operator|.
name|minDispersionScore
condition|)
block|{
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minDispersionScore
operator|=
name|dispersionScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionScore
operator|==
name|this
operator|.
name|minDispersionScore
condition|)
block|{
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
comment|// Update the min dispersion num
if|if
condition|(
name|dispersionNum
operator|<
name|this
operator|.
name|minDispersionNum
condition|)
block|{
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minDispersionNum
operator|=
name|dispersionNum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dispersionNum
operator|==
name|this
operator|.
name|minDispersionNum
condition|)
block|{
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|add
argument_list|(
name|primaryRS
argument_list|)
expr_stmt|;
block|}
name|dispersionScoreSummary
operator|+=
name|dispersionScore
expr_stmt|;
name|dispersionNumSummary
operator|+=
name|dispersionNum
expr_stmt|;
block|}
comment|// Update the avg dispersion score
if|if
condition|(
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|avgDispersionScore
operator|=
name|dispersionScoreSummary
operator|/
operator|(
name|float
operator|)
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|avgDispersionNum
operator|=
name|dispersionNumSummary
operator|/
operator|(
name|float
operator|)
name|primaryRSToRegionCounterMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return list which contains just 3 elements: average dispersion score, max    * dispersion score and min dispersion score as first, second and third element    * respectively.    *    */
specifier|public
name|List
argument_list|<
name|Float
argument_list|>
name|getDispersionInformation
parameter_list|()
block|{
name|List
argument_list|<
name|Float
argument_list|>
name|dispersion
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|dispersion
operator|.
name|add
argument_list|(
name|avgDispersionScore
argument_list|)
expr_stmt|;
name|dispersion
operator|.
name|add
argument_list|(
name|maxDispersionScore
argument_list|)
expr_stmt|;
name|dispersion
operator|.
name|add
argument_list|(
name|minDispersionScore
argument_list|)
expr_stmt|;
return|return
name|dispersion
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|boolean
name|isDetailMode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isFilledUp
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"[Error] Region assignment verfication report"
operator|+
literal|"hasn't been filled up"
argument_list|)
expr_stmt|;
block|}
name|DecimalFormat
name|df
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"#.##"
argument_list|)
decl_stmt|;
comment|// Print some basic information
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Region Assignment Verification for Table: "
operator|+
name|tableName
operator|+
literal|"\n\tTotal regions : "
operator|+
name|totalRegions
argument_list|)
expr_stmt|;
comment|// Print the number of regions on each kinds of the favored nodes
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tTotal regions on favored nodes "
operator|+
name|totalFavoredAssignments
argument_list|)
expr_stmt|;
for|for
control|(
name|FavoredNodesPlan
operator|.
name|Position
name|p
range|:
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tTotal regions on "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" region servers: "
operator|+
name|favoredNodes
index|[
name|p
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Print the number of regions in each kinds of invalid assignment
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tTotal unassigned regions: "
operator|+
name|unAssignedRegionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|unAssignedRegionsList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tTotal regions NOT on favored nodes: "
operator|+
name|nonFavoredAssignedRegionList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|nonFavoredAssignedRegionList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tTotal regions without favored nodes: "
operator|+
name|regionsWithoutValidFavoredNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regionsWithoutValidFavoredNodes
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print the locality information if enabled
if|if
condition|(
name|this
operator|.
name|enforceLocality
operator|&&
name|totalRegions
operator|!=
literal|0
condition|)
block|{
comment|// Print the actual locality for this table
name|float
name|actualLocality
init|=
literal|100
operator|*
name|this
operator|.
name|actualLocalitySummary
operator|/
operator|(
name|float
operator|)
name|totalRegions
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\tThe actual avg locality is "
operator|+
name|df
operator|.
name|format
argument_list|(
name|actualLocality
argument_list|)
operator|+
literal|" %"
argument_list|)
expr_stmt|;
comment|// Print the expected locality if regions are placed on the each kinds of
comment|// favored nodes
for|for
control|(
name|FavoredNodesPlan
operator|.
name|Position
name|p
range|:
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|values
argument_list|()
control|)
block|{
name|float
name|avgLocality
init|=
literal|100
operator|*
operator|(
name|favoredNodesLocalitySummary
index|[
name|p
operator|.
name|ordinal
argument_list|()
index|]
operator|/
operator|(
name|float
operator|)
name|totalRegions
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe expected avg locality if all regions"
operator|+
literal|" on the "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" region servers: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|avgLocality
argument_list|)
operator|+
literal|" %"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print the region balancing information
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\tTotal hosting region servers: "
operator|+
name|totalRegionServers
argument_list|)
expr_stmt|;
comment|// Print the region balance information
if|if
condition|(
name|totalRegionServers
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tAvg dispersion num: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|avgDispersionNum
argument_list|)
operator|+
literal|" hosts;\tMax dispersion num: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|maxDispersionNum
argument_list|)
operator|+
literal|" hosts;\tMin dispersion num: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|minDispersionNum
argument_list|)
operator|+
literal|" hosts;"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the region servers with the max"
operator|+
literal|" dispersion num: "
operator|+
name|this
operator|.
name|maxDispersionNumServerSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|maxDispersionNumServerSet
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the region servers with the min"
operator|+
literal|" dispersion num: "
operator|+
name|this
operator|.
name|minDispersionNumServerSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|maxDispersionNumServerSet
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tAvg dispersion score: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|avgDispersionScore
argument_list|)
operator|+
literal|";\tMax dispersion score: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|maxDispersionScore
argument_list|)
operator|+
literal|";\tMin dispersion score: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|minDispersionScore
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the region servers with the max"
operator|+
literal|" dispersion score: "
operator|+
name|this
operator|.
name|maxDispersionScoreServerSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|maxDispersionScoreServerSet
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the region servers with the min"
operator|+
literal|" dispersion score: "
operator|+
name|this
operator|.
name|minDispersionScoreServerSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|minDispersionScoreServerSet
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tAvg regions/region server: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|avgRegionsOnRS
argument_list|)
operator|+
literal|";\tMax regions/region server: "
operator|+
name|maxRegionsOnRS
operator|+
literal|";\tMin regions/region server: "
operator|+
name|minRegionsOnRS
operator|+
literal|";"
argument_list|)
expr_stmt|;
comment|// Print the details about the most loaded region servers
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the most loaded region servers: "
operator|+
name|mostLoadedRSSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|mostLoadedRSSet
argument_list|)
expr_stmt|;
block|}
comment|// Print the details about the least loaded region servers
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\tThe number of the least loaded region servers: "
operator|+
name|leastLoadedRSSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDetailMode
condition|)
block|{
name|printHServerAddressSet
argument_list|(
name|leastLoadedRSSet
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=============================="
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the unassigned regions    * @return unassigned regions    */
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getUnassignedRegions
parameter_list|()
block|{
return|return
name|unAssignedRegionsList
return|;
block|}
comment|/**    * Return the regions without favored nodes    * @return regions without favored nodes    */
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionsWithoutValidFavoredNodes
parameter_list|()
block|{
return|return
name|regionsWithoutValidFavoredNodes
return|;
block|}
comment|/**    * Return the regions not assigned to its favored nodes    * @return regions not assigned to its favored nodes    */
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getNonFavoredAssignedRegions
parameter_list|()
block|{
return|return
name|nonFavoredAssignedRegionList
return|;
block|}
comment|/**    * Return the number of regions assigned to their favored nodes    * @return number of regions assigned to their favored nodes    */
name|int
name|getTotalFavoredAssignments
parameter_list|()
block|{
return|return
name|totalFavoredAssignments
return|;
block|}
comment|/**    * Return the number of regions based on the position (primary/secondary/    * tertiary) assigned to their favored nodes    * @param position    * @return the number of regions    */
name|int
name|getNumRegionsOnFavoredNodeByPosition
parameter_list|(
name|FavoredNodesPlan
operator|.
name|Position
name|position
parameter_list|)
block|{
return|return
name|favoredNodes
index|[
name|position
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|private
name|void
name|printHServerAddressSet
parameter_list|(
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverSet
parameter_list|)
block|{
if|if
condition|(
name|serverSet
operator|==
literal|null
condition|)
block|{
return|return ;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerName
name|addr
range|:
name|serverSet
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|++
operator|)
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n\t\t\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|addr
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|" ; "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

