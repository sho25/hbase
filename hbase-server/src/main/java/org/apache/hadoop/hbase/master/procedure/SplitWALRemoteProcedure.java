begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitWALCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_comment
comment|/**  * A remote procedure which is used to send split WAL request to region server.  * it will return null if the task is succeed or return a DoNotRetryIOException  * {@link SplitWALProcedure} will help handle the situation that encounter  * DoNotRetryIOException. Otherwise it will retry until succeed.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitWALRemoteProcedure
extends|extends
name|ServerRemoteProcedure
implements|implements
name|ServerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitWALRemoteProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|walPath
decl_stmt|;
specifier|private
name|ServerName
name|crashedServer
decl_stmt|;
specifier|public
name|SplitWALRemoteProcedure
parameter_list|()
block|{   }
specifier|public
name|SplitWALRemoteProcedure
parameter_list|(
name|ServerName
name|worker
parameter_list|,
name|ServerName
name|crashedServer
parameter_list|,
name|String
name|wal
parameter_list|)
block|{
name|this
operator|.
name|targetServer
operator|=
name|worker
expr_stmt|;
name|this
operator|.
name|crashedServer
operator|=
name|crashedServer
expr_stmt|;
name|this
operator|.
name|walPath
operator|=
name|wal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterProcedureProtos
operator|.
name|SplitWALRemoteData
operator|.
name|Builder
name|builder
init|=
name|MasterProcedureProtos
operator|.
name|SplitWALRemoteData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setWalPath
argument_list|(
name|walPath
argument_list|)
operator|.
name|setWorker
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetServer
argument_list|)
argument_list|)
operator|.
name|setCrashedServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|crashedServer
argument_list|)
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterProcedureProtos
operator|.
name|SplitWALRemoteData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitWALRemoteData
operator|.
name|class
argument_list|)
decl_stmt|;
name|walPath
operator|=
name|data
operator|.
name|getWalPath
argument_list|()
expr_stmt|;
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getWorker
argument_list|()
argument_list|)
expr_stmt|;
name|crashedServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getCrashedServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RemoteProcedureDispatcher
operator|.
name|RemoteOperation
argument_list|>
name|remoteCallBuild
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|RSProcedureDispatcher
operator|.
name|ServerOperation
argument_list|(
name|this
argument_list|,
name|getProcId
argument_list|()
argument_list|,
name|SplitWALCallable
operator|.
name|class
argument_list|,
name|MasterProcedureProtos
operator|.
name|SplitWALParameter
operator|.
name|newBuilder
argument_list|()
operator|.
name|setWalPath
argument_list|(
name|walPath
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|complete
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"split WAL {} on {} succeeded"
argument_list|,
name|walPath
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
try|try
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getSplitWALManager
argument_list|()
operator|.
name|deleteSplitWAL
argument_list|(
name|walPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"remove WAL {} failed, ignore..."
argument_list|,
name|walPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|succ
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|error
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WAL split task of {} send to a wrong server {}, will retry on another server"
argument_list|,
name|walPath
argument_list|,
name|targetServer
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"split WAL {} failed, retry..."
argument_list|,
name|walPath
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getWAL
parameter_list|()
block|{
return|return
name|this
operator|.
name|walPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
comment|// return the crashed server is to use the queue of root ServerCrashProcedure
return|return
name|this
operator|.
name|crashedServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMetaTableRegion
parameter_list|()
block|{
return|return
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
operator|new
name|Path
argument_list|(
name|walPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerOperationType
name|getServerOperationType
parameter_list|()
block|{
return|return
name|ServerOperationType
operator|.
name|SPLIT_WAL_REMOTE
return|;
block|}
block|}
end_class

end_unit

