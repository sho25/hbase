begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|CompactionRequestor
block|{
comment|/**    * @param r Region to compact    * @param why Why compaction was requested -- used in debug messages    * @return The created {@link CompactionRequest CompactionRequests} or an empty list if no    *         compactions were started    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|CompactionRequest
argument_list|>
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|why
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param r Region to compact    * @param why Why compaction was requested -- used in debug messages    * @param requests custom compaction requests. Each compaction must specify the store on which it    *          is acting. Can be<tt>null</tt> in which case a compaction will be attempted on all    *          stores for the region.    * @return The created {@link CompactionRequest CompactionRequests} or an empty list if no    *         compactions were started    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|CompactionRequest
argument_list|>
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|List
argument_list|<
name|CompactionRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param r Region to compact    * @param s Store within region to compact    * @param why Why compaction was requested -- used in debug messages    * @param request custom compaction request for the {@link HRegion} and {@link Store}. Custom    *          request must be<tt>null</tt> or be constructed with matching region and store.    * @return The created {@link CompactionRequest} or<tt>null</tt> if no compaction was started.    * @throws IOException    */
specifier|public
name|CompactionRequest
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|Store
name|s
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param r Region to compact    * @param why Why compaction was requested -- used in debug messages    * @param pri Priority of this compaction. minHeap.<=0 is critical    * @param requests custom compaction requests. Each compaction must specify the store on which it    *          is acting. Can be<tt>null</tt> in which case a compaction will be attempted on all    *          stores for the region.    * @return The created {@link CompactionRequest CompactionRequests} or an empty list if no    *         compactions were started.    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|CompactionRequest
argument_list|>
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|int
name|pri
parameter_list|,
name|List
argument_list|<
name|CompactionRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param r Region to compact    * @param s Store within region to compact    * @param why Why compaction was requested -- used in debug messages    * @param pri Priority of this compaction. minHeap.<=0 is critical    * @param request custom compaction request to run. {@link Store} and {@link HRegion} for the    *          request must match the region and store specified here.    * @return The created {@link CompactionRequest} or<tt>null</tt> if no compaction was started    * @throws IOException    */
specifier|public
name|CompactionRequest
name|requestCompaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|Store
name|s
parameter_list|,
specifier|final
name|String
name|why
parameter_list|,
name|int
name|pri
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

