begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionCheckable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionVisitor
import|;
end_import

begin_comment
comment|/**  * The dispatcher acts as a central point of control of error handling. Any exceptions from the  * dispatcher get passed directly to the listeners. Likewise, any errors from the listeners get  * passed to the dispatcher and then back to any listeners.  *<p>  * This is useful, for instance, for informing multiple process in conjunction with an  * {@link Abortable}  *<p>  * This is different than an {@link ExceptionOrchestrator} as it will only propagate an error  *<i>once</i> to all listeners; its single use, just like an {@link ExceptionSnare}. For example,  * if an error is passed to<tt>this</tt> then that error will be passed to all listeners, but a  * second error passed to {@link #receiveError(String, Exception, Object...)} will be ignored. This  * is particularly useful to help avoid accidentally having infinite loops when passing errors.  *<p>  * @param<T> generic exception listener type to update  * @param<E> Type of {@link Exception} to throw when calling {@link #failOnError()}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ExceptionDispatcher
parameter_list|<
name|T
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ExceptionOrchestrator
argument_list|<
name|E
argument_list|>
implements|implements
name|ExceptionListener
argument_list|<
name|E
argument_list|>
implements|,
name|ExceptionCheckable
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExceptionDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
decl_stmt|;
specifier|private
specifier|final
name|ExceptionSnare
argument_list|<
name|E
argument_list|>
name|snare
init|=
operator|new
name|ExceptionSnare
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ExceptionDispatcher
parameter_list|(
name|String
name|name
parameter_list|,
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
block|}
specifier|public
name|ExceptionDispatcher
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
name|this
argument_list|(
literal|"single-error-dispatcher"
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExceptionDispatcher
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|receiveError
parameter_list|(
name|String
name|message
parameter_list|,
name|E
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
comment|// if we already have an error, then ignore it
if|if
condition|(
name|snare
operator|.
name|checkForError
argument_list|()
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|.
name|getNamePrefixForLog
argument_list|()
operator|+
literal|"Accepting received error:"
operator|+
name|message
argument_list|)
expr_stmt|;
comment|// mark that we got the error
name|snare
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// notify all the listeners
name|super
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failOnError
parameter_list|()
throws|throws
name|E
block|{
name|snare
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkForError
parameter_list|()
block|{
return|return
name|snare
operator|.
name|checkForError
argument_list|()
return|;
block|}
specifier|public
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|getDefaultVisitor
parameter_list|()
block|{
return|return
name|this
operator|.
name|visitor
return|;
block|}
comment|/**    * Add a typed error listener that will be visited by the {@link ExceptionVisitor}, passed in the    * constructor, when receiving errors.    * @param errorable listener for error notifications    */
specifier|public
name|void
name|addErrorListener
parameter_list|(
name|T
name|errorable
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|visitor
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No error visitor for "
operator|+
name|errorable
operator|+
literal|", can't add it to the listeners"
argument_list|)
throw|;
name|addErrorListener
argument_list|(
name|this
operator|.
name|visitor
argument_list|,
name|errorable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

