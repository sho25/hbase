begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|zksyncer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Tracks the target znode(s) on server ZK cluster and synchronize them to client ZK cluster if  * changed  *<p/>  * The target znode(s) is given through {@link #getNodesToWatch()} method  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ClientZKSyncer
extends|extends
name|ZKListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientZKSyncer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|ZKWatcher
name|clientZkWatcher
decl_stmt|;
comment|// We use queues and daemon threads to synchronize the data to client ZK cluster
comment|// to avoid blocking the single event thread for watchers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|queues
decl_stmt|;
specifier|public
name|ClientZKSyncer
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|ZKWatcher
name|clientZkWatcher
parameter_list|,
name|Server
name|server
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|clientZkWatcher
operator|=
name|clientZkWatcher
expr_stmt|;
name|this
operator|.
name|queues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Starts the syncer    * @throws KeeperException if error occurs when trying to create base nodes on client ZK    */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|KeeperException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// create base znode on remote ZK
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|clientZkWatcher
argument_list|,
name|watcher
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
comment|// set meta znodes for client ZK
name|Collection
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|getNodesToWatch
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Znodes to watch: "
operator|+
name|nodes
argument_list|)
expr_stmt|;
comment|// initialize queues and threads
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|Thread
name|updater
init|=
operator|new
name|ClientZkUpdater
argument_list|(
name|node
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|updater
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updater
operator|.
name|start
argument_list|()
expr_stmt|;
name|watchAndCheckExists
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|watchAndCheckExists
parameter_list|(
name|String
name|node
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getDataAndWatch
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
comment|// put the data into queue
name|upsertQueue
argument_list|(
name|node
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It existed but now does not, should has been tracked by our watcher, ignore
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found no data from "
operator|+
name|node
argument_list|)
expr_stmt|;
name|watchAndCheckExists
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// cleanup stale ZNodes on client ZK to avoid invalid requests to server
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|clientZkWatcher
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"Unexpected exception during initialization, aborting"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the value of the single element in queue if any, or else insert.    *<p/>    * We only need to synchronize the latest znode value to client ZK rather than synchronize each    * time    * @param data the data to write to queue    */
specifier|private
name|void
name|upsertQueue
parameter_list|(
name|String
name|node
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set data for client ZK and retry until succeed. Be very careful to prevent dead loop when    * modifying this method    * @param node the znode to set on client ZK    * @param data the data to set to client ZK    * @throws InterruptedException if the thread is interrupted during process    */
specifier|private
specifier|final
name|void
name|setDataForClientZkUntilSuccess
parameter_list|(
name|String
name|node
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set data for remote "
operator|+
name|node
operator|+
literal|", client zk wather: "
operator|+
name|clientZkWatcher
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|clientZkWatcher
argument_list|,
name|node
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// Node doesn't exist, create it and set value
try|try
block|{
name|ZKUtil
operator|.
name|createNodeIfNotExistsNoWatch
argument_list|(
name|clientZkWatcher
argument_list|,
name|node
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|ConnectionLossException
decl||
name|KeeperException
operator|.
name|SessionExpiredException
name|ee
parameter_list|)
block|{
name|reconnectAfterExpiration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create znode "
operator|+
name|node
operator|+
literal|" due to: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|", will retry later"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|ConnectionLossException
decl||
name|KeeperException
operator|.
name|SessionExpiredException
name|ee
parameter_list|)
block|{
name|reconnectAfterExpiration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to set data to client ZK, will retry later"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
name|HConstants
operator|.
name|SOCKET_RETRY_WAIT_MS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|reconnectAfterExpiration
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ZK session expired or lost. Retry a new connection..."
argument_list|)
expr_stmt|;
try|try
block|{
name|clientZkWatcher
operator|.
name|reconnectAfterExpiration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to reconnect to client zk after session expiration, will retry later"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validate
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getDataAndWatch
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|upsertQueue
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception handling nodeCreated event"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|validate
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|nodeCreated
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|validate
argument_list|(
name|path
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|watchAndCheckExists
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|nodeCreated
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception handling nodeDeleted event for path: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validate whether a znode path is watched by us    * @param path the path to validate    * @return true if the znode is watched by us    */
specifier|abstract
name|boolean
name|validate
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
comment|/**    * @return the znode(s) to watch    */
specifier|abstract
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodesToWatch
parameter_list|()
function_decl|;
comment|/**    * Thread to synchronize znode data to client ZK cluster    */
class|class
name|ClientZkUpdater
extends|extends
name|Thread
block|{
specifier|final
name|String
name|znode
decl_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|queue
decl_stmt|;
specifier|public
name|ClientZkUpdater
parameter_list|(
name|String
name|znode
parameter_list|,
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|queue
parameter_list|)
block|{
name|this
operator|.
name|znode
operator|=
name|znode
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|setName
argument_list|(
literal|"ClientZKUpdater-"
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
name|setDataForClientZkUntilSuccess
argument_list|(
name|znode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while checking whether need to update meta location to client zk"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

