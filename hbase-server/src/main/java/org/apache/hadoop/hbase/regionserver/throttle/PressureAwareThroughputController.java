begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|OffPeakHours
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
specifier|abstract
class|class
name|PressureAwareThroughputController
extends|extends
name|Configured
implements|implements
name|ThroughputController
implements|,
name|Stoppable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PressureAwareThroughputController
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Stores the information of one controlled compaction.    */
specifier|private
specifier|static
specifier|final
class|class
name|ActiveOperation
block|{
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|private
name|long
name|lastControlTime
decl_stmt|;
specifier|private
name|long
name|lastControlSize
decl_stmt|;
specifier|private
name|long
name|totalSize
decl_stmt|;
specifier|private
name|long
name|numberOfSleeps
decl_stmt|;
specifier|private
name|long
name|totalSleepTime
decl_stmt|;
comment|// prevent too many debug log
specifier|private
name|long
name|lastLogTime
decl_stmt|;
name|ActiveOperation
parameter_list|()
block|{
name|long
name|currentTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|this
operator|.
name|startTime
operator|=
name|currentTime
expr_stmt|;
name|this
operator|.
name|lastControlTime
operator|=
name|currentTime
expr_stmt|;
name|this
operator|.
name|lastLogTime
operator|=
name|currentTime
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|maxThroughputUpperBound
decl_stmt|;
specifier|protected
name|long
name|maxThroughputLowerBound
decl_stmt|;
specifier|protected
name|OffPeakHours
name|offPeakHours
decl_stmt|;
specifier|protected
name|long
name|controlPerSize
decl_stmt|;
specifier|protected
name|int
name|tuningPeriod
decl_stmt|;
specifier|private
specifier|volatile
name|double
name|maxThroughput
decl_stmt|;
specifier|private
specifier|volatile
name|double
name|maxThroughputPerOperation
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ActiveOperation
argument_list|>
name|activeOperations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|(
specifier|final
name|RegionServerServices
name|server
parameter_list|)
function_decl|;
specifier|protected
name|String
name|throughputDesc
parameter_list|(
name|long
name|deltaSize
parameter_list|,
name|long
name|elapsedTime
parameter_list|)
block|{
return|return
name|throughputDesc
argument_list|(
operator|(
name|double
operator|)
name|deltaSize
operator|/
name|elapsedTime
operator|*
literal|1000
argument_list|)
return|;
block|}
specifier|protected
name|String
name|throughputDesc
parameter_list|(
name|double
name|speed
parameter_list|)
block|{
if|if
condition|(
name|speed
operator|>=
literal|1E15
condition|)
block|{
comment|// large enough to say it is unlimited
return|return
literal|"unlimited"
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.2f MB/sec"
argument_list|,
name|speed
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
name|activeOperations
operator|.
name|put
argument_list|(
name|opName
argument_list|,
operator|new
name|ActiveOperation
argument_list|()
argument_list|)
expr_stmt|;
name|maxThroughputPerOperation
operator|=
name|getMaxThroughput
argument_list|()
operator|/
name|activeOperations
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|control
parameter_list|(
name|String
name|opName
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ActiveOperation
name|operation
init|=
name|activeOperations
operator|.
name|get
argument_list|(
name|opName
argument_list|)
decl_stmt|;
name|operation
operator|.
name|totalSize
operator|+=
name|size
expr_stmt|;
name|long
name|deltaSize
init|=
name|operation
operator|.
name|totalSize
operator|-
name|operation
operator|.
name|lastControlSize
decl_stmt|;
if|if
condition|(
name|deltaSize
operator|<
name|controlPerSize
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|minTimeAllowed
init|=
call|(
name|long
call|)
argument_list|(
name|deltaSize
operator|/
name|maxThroughputPerOperation
operator|*
literal|1000
argument_list|)
decl_stmt|;
comment|// ms
name|long
name|elapsedTime
init|=
name|now
operator|-
name|operation
operator|.
name|lastControlTime
decl_stmt|;
name|operation
operator|.
name|lastControlSize
operator|=
name|operation
operator|.
name|totalSize
expr_stmt|;
if|if
condition|(
name|elapsedTime
operator|>=
name|minTimeAllowed
condition|)
block|{
name|operation
operator|.
name|lastControlTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// too fast
name|long
name|sleepTime
init|=
name|minTimeAllowed
operator|-
name|elapsedTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// do not log too much
if|if
condition|(
name|now
operator|-
name|operation
operator|.
name|lastLogTime
operator|>
literal|5L
operator|*
literal|1000
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deltaSize: "
operator|+
name|deltaSize
operator|+
literal|" bytes; elapseTime: "
operator|+
name|elapsedTime
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|opName
operator|+
literal|" sleep "
operator|+
name|sleepTime
operator|+
literal|" ms because current throughput is "
operator|+
name|throughputDesc
argument_list|(
name|deltaSize
argument_list|,
name|elapsedTime
argument_list|)
operator|+
literal|", max allowed is "
operator|+
name|throughputDesc
argument_list|(
name|maxThroughputPerOperation
argument_list|)
operator|+
literal|", already slept "
operator|+
name|operation
operator|.
name|numberOfSleeps
operator|+
literal|" time(s) and total slept time is "
operator|+
name|operation
operator|.
name|totalSleepTime
operator|+
literal|" ms till now."
argument_list|)
expr_stmt|;
name|operation
operator|.
name|lastLogTime
operator|=
name|now
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|operation
operator|.
name|numberOfSleeps
operator|++
expr_stmt|;
name|operation
operator|.
name|totalSleepTime
operator|+=
name|sleepTime
expr_stmt|;
name|operation
operator|.
name|lastControlTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
name|sleepTime
return|;
block|}
comment|/**    * Check whether to skip control given delta size and control size    * @param deltaSize Delta size since last control    * @param controlSize Size limit to perform control    * @return a boolean indicates whether to skip this control    */
specifier|protected
specifier|abstract
name|boolean
name|skipControl
parameter_list|(
name|long
name|deltaSize
parameter_list|,
name|long
name|controlSize
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|finish
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
name|ActiveOperation
name|operation
init|=
name|activeOperations
operator|.
name|remove
argument_list|(
name|opName
argument_list|)
decl_stmt|;
name|maxThroughputPerOperation
operator|=
name|getMaxThroughput
argument_list|()
operator|/
name|activeOperations
operator|.
name|size
argument_list|()
expr_stmt|;
name|long
name|elapsedTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|operation
operator|.
name|startTime
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|opName
operator|+
literal|" average throughput is "
operator|+
name|throughputDesc
argument_list|(
name|operation
operator|.
name|totalSize
argument_list|,
name|elapsedTime
argument_list|)
operator|+
literal|", slept "
operator|+
name|operation
operator|.
name|numberOfSleeps
operator|+
literal|" time(s) and total slept time is "
operator|+
name|operation
operator|.
name|totalSleepTime
operator|+
literal|" ms. "
operator|+
name|activeOperations
operator|.
name|size
argument_list|()
operator|+
literal|" active operations remaining, total limit is "
operator|+
name|throughputDesc
argument_list|(
name|getMaxThroughput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
specifier|public
name|double
name|getMaxThroughput
parameter_list|()
block|{
return|return
name|maxThroughput
return|;
block|}
specifier|public
name|void
name|setMaxThroughput
parameter_list|(
name|double
name|maxThroughput
parameter_list|)
block|{
name|this
operator|.
name|maxThroughput
operator|=
name|maxThroughput
expr_stmt|;
name|maxThroughputPerOperation
operator|=
name|getMaxThroughput
argument_list|()
operator|/
name|activeOperations
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

