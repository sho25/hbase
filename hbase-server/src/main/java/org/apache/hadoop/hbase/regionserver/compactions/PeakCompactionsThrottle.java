begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * The class used to track peak hours and compactions. peak compaction speed  * should be limit.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PeakCompactionsThrottle
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PeakCompactionsThrottle
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PEAK_START_HOUR
init|=
literal|"hbase.peak.start.hour"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PEAK_END_HOUR
init|=
literal|"hbase.peak.end.hour"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PEAK_COMPACTION_SPEED_ALLOWED
init|=
literal|"hbase.regionserver.compaction.peak.maxspeed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PEAK_COMPACTION_SPEED_CHECK_INTERVAL
init|=
literal|"hbase.regionserver.compaction.speed.check.interval"
decl_stmt|;
name|OffPeakHours
name|offPeakHours
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|private
name|long
name|end
decl_stmt|;
specifier|private
name|long
name|maxSpeedInPeak
decl_stmt|;
specifier|private
name|int
name|sleepNumber
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|sleepTimeTotal
init|=
literal|0
decl_stmt|;
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
name|int
name|checkInterval
init|=
literal|0
decl_stmt|;
specifier|public
name|PeakCompactionsThrottle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|offPeakHours
operator|=
name|OffPeakHours
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|PEAK_START_HOUR
argument_list|,
name|PEAK_END_HOUR
argument_list|)
expr_stmt|;
name|maxSpeedInPeak
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PEAK_COMPACTION_SPEED_ALLOWED
argument_list|,
literal|30
operator|*
literal|1024
operator|*
literal|1024
comment|/* 30 MB/s */
argument_list|)
expr_stmt|;
name|checkInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PEAK_COMPACTION_SPEED_CHECK_INTERVAL
argument_list|,
literal|30
operator|*
literal|1024
operator|*
literal|1024
comment|/* 30 MB */
argument_list|)
expr_stmt|;
block|}
comment|/**    * start compaction    */
specifier|public
name|void
name|startCompaction
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**    * finish compaction    */
specifier|public
name|void
name|finishCompaction
parameter_list|(
name|String
name|region
parameter_list|,
name|String
name|family
parameter_list|)
block|{
if|if
condition|(
name|sleepNumber
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region '"
operator|+
name|region
operator|+
literal|"' family '"
operator|+
name|family
operator|+
literal|"' 's maxSpeedInPeak is "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|maxSpeedInPeak
argument_list|)
operator|+
literal|"/s compaction throttle: sleep number  "
operator|+
name|sleepNumber
operator|+
literal|" sleep time "
operator|+
name|sleepTimeTotal
operator|+
literal|"(ms)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * reset start time    */
name|void
name|resetStartTime
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**    * Peak compaction throttle, if it is peak time and the compaction speed is too fast, sleep for a    * while to slow down.    */
specifier|public
name|void
name|throttle
parameter_list|(
name|long
name|numOfBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|bytesWritten
operator|+=
name|numOfBytes
expr_stmt|;
if|if
condition|(
name|bytesWritten
operator|>=
name|checkInterval
condition|)
block|{
name|checkAndSlowFastCompact
argument_list|(
name|bytesWritten
argument_list|)
expr_stmt|;
name|bytesWritten
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkAndSlowFastCompact
parameter_list|(
name|long
name|numOfBytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isPeakHour
argument_list|()
condition|)
block|{
comment|// not peak hour, just return.
return|return;
block|}
if|if
condition|(
name|maxSpeedInPeak
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|end
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|long
name|minTimeAllowed
init|=
name|numOfBytes
operator|*
literal|1000
operator|/
name|maxSpeedInPeak
decl_stmt|;
comment|// ms
name|long
name|elapsed
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|elapsed
operator|<
name|minTimeAllowed
condition|)
block|{
comment|// too fast
try|try
block|{
comment|// sleep for a while to slow down.
name|Thread
operator|.
name|sleep
argument_list|(
name|minTimeAllowed
operator|-
name|elapsed
argument_list|)
expr_stmt|;
name|sleepNumber
operator|++
expr_stmt|;
name|sleepTimeTotal
operator|+=
operator|(
name|minTimeAllowed
operator|-
name|elapsed
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
name|resetStartTime
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return whether this is peak hour    */
specifier|private
name|boolean
name|isPeakHour
parameter_list|()
block|{
return|return
name|offPeakHours
operator|.
name|isOffPeakHour
argument_list|()
return|;
block|}
comment|/**    * For test    */
specifier|public
name|int
name|getSleepNumber
parameter_list|()
block|{
return|return
name|sleepNumber
return|;
block|}
block|}
end_class

end_unit

