begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|LongMath
import|;
end_import

begin_comment
comment|/**  * Exponential compaction window implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|ExponentialCompactionWindowFactory
extends|extends
name|CompactionWindowFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExponentialCompactionWindowFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BASE_WINDOW_MILLIS_KEY
init|=
literal|"hbase.hstore.compaction.date.tiered.base.window.millis"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WINDOWS_PER_TIER_KEY
init|=
literal|"hbase.hstore.compaction.date.tiered.windows.per.tier"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_TIER_AGE_MILLIS_KEY
init|=
literal|"hbase.hstore.compaction.date.tiered.max.tier.age.millis"
decl_stmt|;
specifier|private
specifier|final
class|class
name|Window
extends|extends
name|CompactionWindow
block|{
comment|/**      * Will not promote to next tier for window before it.      */
specifier|private
specifier|final
name|long
name|maxTierAgeCutoff
decl_stmt|;
comment|/**      * How big a range of timestamps fit inside the window in milliseconds.      */
specifier|private
specifier|final
name|long
name|windowMillis
decl_stmt|;
comment|/**      * A timestamp t is within the window iff t / size == divPosition.      */
specifier|private
specifier|final
name|long
name|divPosition
decl_stmt|;
specifier|public
name|Window
parameter_list|(
name|long
name|baseWindowMillis
parameter_list|,
name|long
name|divPosition
parameter_list|,
name|long
name|maxTierAgeCutoff
parameter_list|)
block|{
name|this
operator|.
name|windowMillis
operator|=
name|baseWindowMillis
expr_stmt|;
name|this
operator|.
name|divPosition
operator|=
name|divPosition
expr_stmt|;
name|this
operator|.
name|maxTierAgeCutoff
operator|=
name|maxTierAgeCutoff
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareToTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|<
literal|0
condition|)
block|{
try|try
block|{
name|timestamp
operator|=
name|LongMath
operator|.
name|checkedSubtract
argument_list|(
name|timestamp
argument_list|,
name|windowMillis
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ae
parameter_list|)
block|{
name|timestamp
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
block|}
name|long
name|pos
init|=
name|timestamp
operator|/
name|windowMillis
decl_stmt|;
return|return
name|divPosition
operator|==
name|pos
condition|?
literal|0
else|:
name|divPosition
operator|<
name|pos
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Window
name|nextEarlierWindow
parameter_list|()
block|{
comment|// Don't promote to the next tier if there is not even 1 window at current tier
comment|// or if the next window crosses the max age.
if|if
condition|(
name|divPosition
operator|%
name|windowsPerTier
operator|>
literal|0
operator|||
name|startMillis
argument_list|()
operator|-
name|windowMillis
operator|*
name|windowsPerTier
operator|<
name|maxTierAgeCutoff
condition|)
block|{
return|return
operator|new
name|Window
argument_list|(
name|windowMillis
argument_list|,
name|divPosition
operator|-
literal|1
argument_list|,
name|maxTierAgeCutoff
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Window
argument_list|(
name|windowMillis
operator|*
name|windowsPerTier
argument_list|,
name|divPosition
operator|/
name|windowsPerTier
operator|-
literal|1
argument_list|,
name|maxTierAgeCutoff
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|startMillis
parameter_list|()
block|{
try|try
block|{
return|return
name|LongMath
operator|.
name|checkedMultiply
argument_list|(
name|windowMillis
argument_list|,
name|divPosition
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ae
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|endMillis
parameter_list|()
block|{
try|try
block|{
return|return
name|LongMath
operator|.
name|checkedMultiply
argument_list|(
name|windowMillis
argument_list|,
operator|(
name|divPosition
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ae
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
block|}
specifier|private
specifier|final
name|long
name|baseWindowMillis
decl_stmt|;
specifier|private
specifier|final
name|int
name|windowsPerTier
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxTierAgeMillis
decl_stmt|;
specifier|private
name|long
name|getMaxTierAgeCutoff
parameter_list|(
name|long
name|now
parameter_list|)
block|{
try|try
block|{
return|return
name|LongMath
operator|.
name|checkedSubtract
argument_list|(
name|now
argument_list|,
name|maxTierAgeMillis
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Value for "
operator|+
name|MAX_TIER_AGE_MILLIS_KEY
operator|+
literal|": "
operator|+
name|maxTierAgeMillis
operator|+
literal|". Will always promote to next tier."
argument_list|)
expr_stmt|;
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
block|}
specifier|public
name|ExponentialCompactionWindowFactory
parameter_list|(
name|CompactionConfiguration
name|comConf
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|comConf
operator|.
name|conf
decl_stmt|;
name|baseWindowMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|BASE_WINDOW_MILLIS_KEY
argument_list|,
literal|3600000
operator|*
literal|6
argument_list|)
expr_stmt|;
name|windowsPerTier
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WINDOWS_PER_TIER_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|maxTierAgeMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MAX_TIER_AGE_MILLIS_KEY
argument_list|,
name|comConf
operator|.
name|getDateTieredMaxStoreFileAgeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionWindow
name|newIncomingWindow
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
operator|new
name|Window
argument_list|(
name|baseWindowMillis
argument_list|,
name|now
operator|/
name|baseWindowMillis
argument_list|,
name|getMaxTierAgeCutoff
argument_list|(
name|now
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s [base window in milliseconds %d, windows per tier %d, max tier age in milliseconds %d]"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|baseWindowMillis
argument_list|,
name|windowsPerTier
argument_list|,
name|maxTierAgeMillis
argument_list|)
return|;
block|}
block|}
end_class

end_unit

