begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * View to an on-disk Region.  * Provides the set of methods necessary to interact with the on-disk region data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HRegionFileSystem
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HRegionFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Name of the region info file that resides just under the region directory. */
specifier|public
specifier|final
specifier|static
name|String
name|REGION_INFO_FILE
init|=
literal|".regioninfo"
decl_stmt|;
comment|/** Temporary subdirectory of the region directory used for merges. */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_MERGES_DIR
init|=
literal|".merges"
decl_stmt|;
comment|/** Temporary subdirectory of the region directory used for splits. */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SPLITS_DIR
init|=
literal|".splits"
decl_stmt|;
comment|/** Temporary subdirectory of the region directory used for compaction output. */
specifier|private
specifier|static
specifier|final
name|String
name|REGION_TEMP_DIR
init|=
literal|".tmp"
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tableDir
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * Create a view to the on-disk region    * @param conf the {@link Configuration} to use    * @param fs {@link FileSystem} that contains the region    * @param tableDir {@link Path} to where the table is being stored    * @param regionInfo {@link HRegionInfo} for region    */
name|HRegionFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tableDir
operator|=
name|tableDir
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
comment|/** @return the underlying {@link FileSystem} */
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fs
return|;
block|}
comment|/** @return the {@link HRegionInfo} that describe this on-disk region view */
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
return|;
block|}
comment|/** @return {@link Path} to the region's root directory. */
specifier|public
name|Path
name|getTableDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDir
return|;
block|}
comment|/** @return {@link Path} to the region directory. */
specifier|public
name|Path
name|getRegionDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|this
operator|.
name|tableDir
argument_list|,
name|this
operator|.
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|// ===========================================================================
comment|//  Temp Helpers
comment|// ===========================================================================
comment|/** @return {@link Path} to the region's temp directory, used for file creations */
specifier|public
name|Path
name|getTempDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
name|REGION_TEMP_DIR
argument_list|)
return|;
block|}
comment|/**    * Clean up any temp detritus that may have been left around from previous operation attempts.    */
specifier|public
name|void
name|cleanupTempDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|fs
argument_list|,
name|getTempDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ===========================================================================
comment|//  Splits Helpers
comment|// ===========================================================================
comment|/** @return {@link Path} to the temp directory used during split operations */
specifier|public
name|Path
name|getSplitsDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
name|REGION_SPLITS_DIR
argument_list|)
return|;
block|}
comment|/**    * Clean up any split detritus that may have been left around from previous split attempts.    */
specifier|public
name|void
name|cleanupSplitsDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|fs
argument_list|,
name|getSplitsDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ===========================================================================
comment|//  Merge Helpers
comment|// ===========================================================================
comment|/** @return {@link Path} to the temp directory used during merge operations */
specifier|public
name|Path
name|getMergesDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
name|REGION_MERGES_DIR
argument_list|)
return|;
block|}
comment|/**    * Clean up any merge detritus that may have been left around from previous merge attempts.    */
specifier|public
name|void
name|cleanupMergesDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|fs
argument_list|,
name|getMergesDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ===========================================================================
comment|//  Create/Open/Delete Helpers
comment|// ===========================================================================
comment|/**    * @param hri    * @return Content of the file we write out to the filesystem under a region    * @throws IOException    */
specifier|private
specifier|static
name|byte
index|[]
name|getRegionInfoFileContent
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hri
operator|.
name|toDelimitedByteArray
argument_list|()
return|;
block|}
comment|/**    * Create a {@link HRegionInfo} from the serialized version on-disk.    * @param fs {@link FileSystem} that contains the Region Info file    * @param regionDir {@link Path} to the Region Directory that contains the Info file    * @return An {@link HRegionInfo} instance gotten from the Region Info file.    * @throws IOException if an error occurred during file open/read operation.    */
specifier|public
specifier|static
name|HRegionInfo
name|loadRegionInfoFileContent
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|REGION_INFO_FILE
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|HRegionInfo
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write the .regioninfo file on-disk.    */
specifier|private
specifier|static
name|void
name|writeRegionInfoFileContent
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionInfoFile
parameter_list|,
specifier|final
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First check to get the permissions
name|FsPermission
name|perms
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// Write the RegionInfo file content
name|FSDataOutputStream
name|out
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|regionInfoFile
argument_list|,
name|perms
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write out an info file under the stored region directory. Useful recovering mangled regions.    * If the regionInfo already exists on-disk, then we fast exit.    */
name|void
name|checkRegionInfoOnFilesystem
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Compose the content of the file so we can compare to length in filesystem. If not same,
comment|// rewrite it (it may have been written in the old format using Writables instead of pb). The
comment|// pb version is much shorter -- we write now w/o the toString version -- so checking length
comment|// only should be sufficient. I don't want to read the file every time to check if it pb
comment|// serialized.
name|byte
index|[]
name|content
init|=
name|getRegionInfoFileContent
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|regionInfoFile
init|=
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regionInfoFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getLen
argument_list|()
operator|==
name|content
operator|.
name|length
condition|)
block|{
comment|// Then assume the content good and move on.
comment|// NOTE: that the length is not sufficient to define the the content matches.
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Rewriting .regioninfo file at: "
operator|+
name|regionInfoFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regionInfoFile
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to remove existing "
operator|+
name|regionInfoFile
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|REGION_INFO_FILE
operator|+
literal|" file not found for region: "
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Write HRI to a file in case we need to recover .META.
name|writeRegionInfoOnFilesystem
argument_list|(
name|content
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write out an info file under the region directory. Useful recovering mangled regions.    * @param useTempDir indicate whether or not using the region .tmp dir for a safer file creation.    */
specifier|private
name|void
name|writeRegionInfoOnFilesystem
parameter_list|(
name|boolean
name|useTempDir
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|content
init|=
name|getRegionInfoFileContent
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|writeRegionInfoOnFilesystem
argument_list|(
name|content
argument_list|,
name|useTempDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write out an info file under the region directory. Useful recovering mangled regions.    * @param regionInfoContent serialized version of the {@link HRegionInfo}    * @param useTempDir indicate whether or not using the region .tmp dir for a safer file creation.    */
specifier|private
name|void
name|writeRegionInfoOnFilesystem
parameter_list|(
specifier|final
name|byte
index|[]
name|regionInfoContent
parameter_list|,
specifier|final
name|boolean
name|useTempDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|regionInfoFile
init|=
operator|new
name|Path
argument_list|(
name|getRegionDir
argument_list|()
argument_list|,
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|useTempDir
condition|)
block|{
comment|// Create in tmpDir and then move into place in case we crash after
comment|// create but before close. If we don't successfully close the file,
comment|// subsequent region reopens will fail the below because create is
comment|// registered in NN.
comment|// And then create the file
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|getTempDir
argument_list|()
argument_list|,
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
comment|// If datanode crashes or if the RS goes down just before the close is called while trying to
comment|// close the created regioninfo file in the .tmp directory then on next
comment|// creation we will be getting AlreadyCreatedException.
comment|// Hence delete and create the file if exists.
if|if
condition|(
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|tmpPath
argument_list|)
condition|)
block|{
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|tmpPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Write HRI to a file in case we need to recover .META.
name|writeRegionInfoFileContent
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tmpPath
argument_list|,
name|regionInfoContent
argument_list|)
expr_stmt|;
comment|// Move the created file to the original path
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|regionInfoFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|regionInfoFile
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Write HRI to a file in case we need to recover .META.
name|writeRegionInfoFileContent
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|regionInfoFile
argument_list|,
name|regionInfoContent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a new Region on file-system.    * @param conf the {@link Configuration} to use    * @param fs {@link FileSystem} from which to add the region    * @param tableDir {@link Path} to where the table is being stored    * @param regionInfo {@link HRegionInfo} for region to be added    * @throws IOException if the region creation fails due to a FileSystem exception.    */
specifier|public
specifier|static
name|HRegionFileSystem
name|createRegionOnFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionFileSystem
name|regionFs
init|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|regionFs
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|regionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to create a region that already exists on disk: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The specified region already exists on disk: "
operator|+
name|regionDir
argument_list|)
throw|;
block|}
comment|// Create the region directory
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|regionFs
operator|.
name|getRegionDir
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create the region directory: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create region directory: "
operator|+
name|regionDir
argument_list|)
throw|;
block|}
comment|// Write HRI to a file in case we need to recover .META.
name|regionFs
operator|.
name|writeRegionInfoOnFilesystem
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|regionFs
return|;
block|}
comment|/**    * Open Region from file-system.    * @param conf the {@link Configuration} to use    * @param fs {@link FileSystem} from which to add the region    * @param tableDir {@link Path} to where the table is being stored    * @param regionInfo {@link HRegionInfo} for region to be added    * @throws IOException if the region creation fails due to a FileSystem exception.    */
specifier|public
specifier|static
name|HRegionFileSystem
name|openRegionFromFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionFileSystem
name|regionFs
init|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|regionFs
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to open a region that do not exists on disk: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The specified region do not exists on disk: "
operator|+
name|regionDir
argument_list|)
throw|;
block|}
comment|// Cleanup temporary directories
name|regionFs
operator|.
name|cleanupTempDir
argument_list|()
expr_stmt|;
name|regionFs
operator|.
name|cleanupSplitsDir
argument_list|()
expr_stmt|;
name|regionFs
operator|.
name|cleanupMergesDir
argument_list|()
expr_stmt|;
comment|// if it doesn't exists, Write HRI to a file, in case we need to recover .META.
name|regionFs
operator|.
name|checkRegionInfoOnFilesystem
argument_list|()
expr_stmt|;
return|return
name|regionFs
return|;
block|}
comment|/**    * Remove the region from the table directory, archiving the region's hfiles.    * @param conf the {@link Configuration} to use    * @param fs {@link FileSystem} from which to remove the region    * @param tableDir {@link Path} to where the table is being stored    * @param regionInfo {@link HRegionInfo} for region to be deleted    * @throws IOException if the request cannot be completed    */
specifier|public
specifier|static
name|void
name|deleteRegionFromFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionFileSystem
name|regionFs
init|=
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|regionFs
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to delete a region that do not exists on disk: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETING region "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
block|}
comment|// Archive region
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HFileArchiver
operator|.
name|archiveRegion
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|tableDir
argument_list|,
name|regionDir
argument_list|)
expr_stmt|;
comment|// Delete empty region dir
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regionDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

