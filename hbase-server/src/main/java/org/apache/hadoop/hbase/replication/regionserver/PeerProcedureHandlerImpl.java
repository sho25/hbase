begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|LogRoller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
operator|.
name|PeerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|KeyLocker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PeerProcedureHandlerImpl
implements|implements
name|PeerProcedureHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PeerProcedureHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSourceManager
name|replicationSourceManager
decl_stmt|;
specifier|private
specifier|final
name|PeerActionListener
name|peerActionListener
decl_stmt|;
specifier|private
specifier|final
name|KeyLocker
argument_list|<
name|String
argument_list|>
name|peersLock
init|=
operator|new
name|KeyLocker
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|PeerProcedureHandlerImpl
parameter_list|(
name|ReplicationSourceManager
name|replicationSourceManager
parameter_list|,
name|PeerActionListener
name|peerActionListener
parameter_list|)
block|{
name|this
operator|.
name|replicationSourceManager
operator|=
name|replicationSourceManager
expr_stmt|;
name|this
operator|.
name|peerActionListener
operator|=
name|peerActionListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
try|try
block|{
name|replicationSourceManager
operator|.
name|addPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|replicationSourceManager
operator|.
name|getReplicationPeers
argument_list|()
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|replicationSourceManager
operator|.
name|removePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|refreshPeerState
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|ReplicationPeerImpl
name|peer
init|=
literal|null
decl_stmt|;
name|PeerState
name|oldState
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|replicationSourceManager
operator|.
name|getReplicationPeers
argument_list|()
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer with id="
operator|+
name|peerId
operator|+
literal|" is not cached."
argument_list|)
throw|;
block|}
name|oldState
operator|=
name|peer
operator|.
name|getPeerState
argument_list|()
expr_stmt|;
name|PeerState
name|newState
init|=
name|replicationSourceManager
operator|.
name|getReplicationPeers
argument_list|()
operator|.
name|refreshPeerState
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
comment|// RS need to start work with the new replication state change
if|if
condition|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
operator|&&
name|newState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|replicationSourceManager
operator|.
name|refreshSources
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|peer
operator|!=
literal|null
condition|)
block|{
comment|// Reset peer state if refresh source failed
name|peer
operator|.
name|setPeerState
argument_list|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
name|refreshPeerState
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
name|refreshPeerState
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updatePeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|ReplicationPeers
name|peers
init|=
name|replicationSourceManager
operator|.
name|getReplicationPeers
argument_list|()
decl_stmt|;
name|ReplicationPeerImpl
name|peer
init|=
literal|null
decl_stmt|;
name|ReplicationPeerConfig
name|oldConfig
init|=
literal|null
decl_stmt|;
name|PeerState
name|oldState
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|peers
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer with id="
operator|+
name|peerId
operator|+
literal|" is not cached."
argument_list|)
throw|;
block|}
name|oldConfig
operator|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
expr_stmt|;
name|oldState
operator|=
name|peer
operator|.
name|getPeerState
argument_list|()
expr_stmt|;
name|ReplicationPeerConfig
name|newConfig
init|=
name|peers
operator|.
name|refreshPeerConfig
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
comment|// also need to refresh peer state here. When updating a serial replication peer we may
comment|// disable it first and then enable it.
name|PeerState
name|newState
init|=
name|peers
operator|.
name|refreshPeerState
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
comment|// RS need to start work with the new replication config change
if|if
condition|(
operator|!
name|ReplicationUtils
operator|.
name|isNamespacesAndTableCFsEqual
argument_list|(
name|oldConfig
argument_list|,
name|newConfig
argument_list|)
operator|||
name|oldConfig
operator|.
name|isSerial
argument_list|()
operator|!=
name|newConfig
operator|.
name|isSerial
argument_list|()
operator|||
operator|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
operator|&&
name|newState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|DISABLED
argument_list|)
operator|)
condition|)
block|{
name|replicationSourceManager
operator|.
name|refreshSources
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|peer
operator|!=
literal|null
condition|)
block|{
comment|// Reset peer config if refresh source failed
name|peer
operator|.
name|setPeerConfig
argument_list|(
name|oldConfig
argument_list|)
expr_stmt|;
name|peer
operator|.
name|setPeerState
argument_list|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|transitSyncReplicationPeerState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|int
name|stage
parameter_list|,
name|HRegionServer
name|rs
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
name|ReplicationPeers
name|replicationPeers
init|=
name|replicationSourceManager
operator|.
name|getReplicationPeers
argument_list|()
decl_stmt|;
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
try|try
block|{
name|ReplicationPeerImpl
name|peer
init|=
name|replicationPeers
operator|.
name|getPeer
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer with id="
operator|+
name|peerId
operator|+
literal|" is not cached."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|isSyncReplication
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer with id="
operator|+
name|peerId
operator|+
literal|" is not synchronous."
argument_list|)
throw|;
block|}
name|SyncReplicationState
name|newSyncReplicationState
init|=
name|peer
operator|.
name|getNewSyncReplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|stage
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|newSyncReplicationState
operator|!=
name|SyncReplicationState
operator|.
name|NONE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The new sync replication state for peer {} has already been set to {}, "
operator|+
literal|"this should be a retry, give up"
argument_list|,
name|peerId
argument_list|,
name|newSyncReplicationState
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// refresh the peer state first, as when we transit to STANDBY, we may need to disable the
comment|// peer before processing the sync replication state.
name|PeerState
name|oldState
init|=
name|peer
operator|.
name|getPeerState
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|PeerState
name|newState
init|=
name|replicationPeers
operator|.
name|refreshPeerState
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
operator|&&
name|newState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|replicationSourceManager
operator|.
name|refreshSources
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|peer
operator|.
name|setPeerState
argument_list|(
name|oldState
operator|.
name|equals
argument_list|(
name|PeerState
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|newSyncReplicationState
operator|=
name|replicationPeers
operator|.
name|refreshPeerNewSyncReplicationState
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|SyncReplicationState
name|oldSyncReplicationState
init|=
name|peer
operator|.
name|getSyncReplicationState
argument_list|()
decl_stmt|;
name|peerActionListener
operator|.
name|peerSyncReplicationStateChange
argument_list|(
name|peerId
argument_list|,
name|oldSyncReplicationState
argument_list|,
name|newSyncReplicationState
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newSyncReplicationState
operator|==
name|SyncReplicationState
operator|.
name|NONE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The new sync replication state for peer {} has already been clear, and the "
operator|+
literal|"current state is {}, this should be a retry, give up"
argument_list|,
name|peerId
argument_list|,
name|newSyncReplicationState
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|newSyncReplicationState
operator|==
name|SyncReplicationState
operator|.
name|STANDBY
condition|)
block|{
name|replicationSourceManager
operator|.
name|drainSources
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
comment|// Need to roll the wals and make the ReplicationSource for this peer track the new file.
comment|// If we do not do this, there will be two problems that can not be addressed at the same
comment|// time. First, if we just throw away the current wal file, and later when we transit the
comment|// peer to DA, and the wal has not been rolled yet, then the new data written to the wal
comment|// file will not be replicated and cause data inconsistency. But if we just track the
comment|// current wal file without rolling, it may contains some data before we transit the peer
comment|// to S, later if we transit the peer to DA, the data will also be replicated and cause
comment|// data inconsistency. So here we need to roll the wal, and let the ReplicationSource
comment|// track the new wal file, and throw the old wal files away.
name|LogRoller
name|roller
init|=
name|rs
operator|.
name|getWalRoller
argument_list|()
decl_stmt|;
name|roller
operator|.
name|requestRollAll
argument_list|()
expr_stmt|;
try|try
block|{
name|roller
operator|.
name|waitUntilWalRollFinished
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// reset the interrupted flag
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while waiting for wal roll finish"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|SyncReplicationState
name|oldState
init|=
name|peer
operator|.
name|getSyncReplicationState
argument_list|()
decl_stmt|;
name|peerActionListener
operator|.
name|peerSyncReplicationStateChange
argument_list|(
name|peerId
argument_list|,
name|oldState
argument_list|,
name|newSyncReplicationState
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|peer
operator|.
name|transitSyncReplicationState
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

