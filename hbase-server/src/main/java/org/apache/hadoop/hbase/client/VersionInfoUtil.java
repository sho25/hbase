begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCallContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * Class to help with parsing the version info.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|VersionInfoUtil
block|{
specifier|private
name|VersionInfoUtil
parameter_list|()
block|{
comment|/* UTIL CLASS ONLY */
block|}
specifier|public
specifier|static
name|boolean
name|currentClientHasMinimumVersion
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
return|return
name|hasMinimumVersion
argument_list|(
name|getCurrentClientVersionInfo
argument_list|()
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasMinimumVersion
parameter_list|(
name|HBaseProtos
operator|.
name|VersionInfo
name|versionInfo
parameter_list|,
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
if|if
condition|(
name|versionInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|versionInfo
operator|.
name|hasVersionMajor
argument_list|()
operator|&&
name|versionInfo
operator|.
name|hasVersionMinor
argument_list|()
condition|)
block|{
name|int
name|clientMajor
init|=
name|versionInfo
operator|.
name|getVersionMajor
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientMajor
operator|!=
name|major
condition|)
block|{
return|return
name|clientMajor
operator|>
name|major
return|;
block|}
name|int
name|clientMinor
init|=
name|versionInfo
operator|.
name|getVersionMinor
argument_list|()
decl_stmt|;
return|return
name|clientMinor
operator|>=
name|minor
return|;
block|}
try|try
block|{
specifier|final
name|String
index|[]
name|components
init|=
name|getVersionComponents
argument_list|(
name|versionInfo
argument_list|)
decl_stmt|;
name|int
name|clientMajor
init|=
name|components
operator|.
name|length
operator|>
literal|0
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|clientMajor
operator|!=
name|major
condition|)
block|{
return|return
name|clientMajor
operator|>
name|major
return|;
block|}
name|int
name|clientMinor
init|=
name|components
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
name|clientMinor
operator|>=
name|minor
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @return the versionInfo extracted from the current RpcCallContext    */
specifier|private
specifier|static
name|HBaseProtos
operator|.
name|VersionInfo
name|getCurrentClientVersionInfo
parameter_list|()
block|{
return|return
name|RpcServer
operator|.
name|getCurrentCall
argument_list|()
operator|.
name|map
argument_list|(
name|RpcCallContext
operator|::
name|getClientVersionInfo
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @return the version number extracted from the current RpcCallContext as int.    *         (e.g. 0x0103004 is 1.3.4)    */
specifier|public
specifier|static
name|int
name|getCurrentClientVersionNumber
parameter_list|()
block|{
return|return
name|getVersionNumber
argument_list|(
name|getCurrentClientVersionInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param version    * @return the passed-in<code>version</code> int as a version String    *         (e.g. 0x0103004 is 1.3.4)    */
specifier|public
specifier|static
name|String
name|versionNumberToString
parameter_list|(
specifier|final
name|int
name|version
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d.%d.%d"
argument_list|,
operator|(
operator|(
name|version
operator|>>
literal|20
operator|)
operator|&
literal|0xff
operator|)
argument_list|,
operator|(
operator|(
name|version
operator|>>
literal|12
operator|)
operator|&
literal|0xff
operator|)
argument_list|,
operator|(
name|version
operator|&
literal|0xfff
operator|)
argument_list|)
return|;
block|}
comment|/**    * Pack the full number version in a int. by shifting each component by 8bit,    * except the dot release which has 12bit.    * Examples: (1.3.4 is 0x0103004, 2.1.0 is 0x0201000)    * @param versionInfo the VersionInfo object to pack    * @return the version number as int. (e.g. 0x0103004 is 1.3.4)    */
specifier|public
specifier|static
name|int
name|getVersionNumber
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|VersionInfo
name|versionInfo
parameter_list|)
block|{
if|if
condition|(
name|versionInfo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|String
index|[]
name|components
init|=
name|getVersionComponents
argument_list|(
name|versionInfo
argument_list|)
decl_stmt|;
name|int
name|clientMajor
init|=
name|components
operator|.
name|length
operator|>
literal|0
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|clientMinor
init|=
name|components
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|clientPatch
init|=
name|components
operator|.
name|length
operator|>
literal|2
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|2
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
name|buildVersionNumber
argument_list|(
name|clientMajor
argument_list|,
name|clientMinor
argument_list|,
name|clientPatch
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|int
name|clientMajor
init|=
name|versionInfo
operator|.
name|hasVersionMajor
argument_list|()
condition|?
name|versionInfo
operator|.
name|getVersionMajor
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|clientMinor
init|=
name|versionInfo
operator|.
name|hasVersionMinor
argument_list|()
condition|?
name|versionInfo
operator|.
name|getVersionMinor
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
name|buildVersionNumber
argument_list|(
name|clientMajor
argument_list|,
name|clientMinor
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
return|return
operator|(
literal|0
operator|)
return|;
comment|// no version
block|}
comment|/**    * Pack the full number version in a int. by shifting each component by 8bit,    * except the dot release which has 12bit.    * Examples: (1.3.4 is 0x0103004, 2.1.0 is 0x0201000)    * @param major version major number    * @param minor version minor number    * @param patch version patch number    * @return the version number as int. (e.g. 0x0103004 is 1.3.4)    */
specifier|private
specifier|static
name|int
name|buildVersionNumber
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|patch
parameter_list|)
block|{
return|return
operator|(
name|major
operator|<<
literal|20
operator|)
operator||
operator|(
name|minor
operator|<<
literal|12
operator|)
operator||
name|patch
return|;
block|}
comment|/**    * Returns the version components    * Examples: "1.2.3" returns [1, 2, 3], "4.5.6-SNAPSHOT" returns [4, 5, 6, "SNAPSHOT"]    * @returns the components of the version string    */
specifier|private
specifier|static
name|String
index|[]
name|getVersionComponents
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|VersionInfo
name|versionInfo
parameter_list|)
block|{
return|return
name|versionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|split
argument_list|(
literal|"[\\.-]"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

