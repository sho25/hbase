begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_comment
comment|// imports for things that haven't moved from regionserver.wal yet.
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|CompressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALCellCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FamilyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|ScopeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Default implementation of Key for an Entry in the WAL.  * For internal use only though Replication needs to have access.  *  * The log intermingles edits to many tables and rows, so each log entry  * identifies the appropriate table and row.  Within a table and row, they're  * also sorted.  *  *<p>Some Transactional edits (START, COMMIT, ABORT) will not have an associated row.  *  */
end_comment

begin_comment
comment|// TODO: Key and WALEdit are never used separately, or in one-to-many relation, for practical
end_comment

begin_comment
comment|//       purposes. They need to be merged into WALEntry.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
block|}
argument_list|)
specifier|public
class|class
name|WALKeyImpl
implements|implements
name|WALKey
block|{
specifier|public
specifier|static
specifier|final
name|WALKeyImpl
name|EMPTY_WALKEYIMPL
init|=
operator|new
name|WALKeyImpl
argument_list|()
decl_stmt|;
specifier|public
name|MultiVersionConcurrencyControl
name|getMvcc
parameter_list|()
block|{
return|return
name|mvcc
return|;
block|}
comment|/**    * Use it to complete mvcc transaction. This WALKeyImpl was part of    * (the transaction is started when you call append; see the comment on FSHLog#append). To    * complete call    * {@link MultiVersionConcurrencyControl#complete(MultiVersionConcurrencyControl.WriteEntry)}    * or {@link MultiVersionConcurrencyControl#complete(MultiVersionConcurrencyControl.WriteEntry)}    * @return A WriteEntry gotten from local WAL subsystem.    * @see #setWriteEntry(MultiVersionConcurrencyControl.WriteEntry)    */
specifier|public
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|getWriteEntry
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
assert|assert
name|this
operator|.
name|writeEntry
operator|!=
literal|null
assert|;
return|return
name|this
operator|.
name|writeEntry
return|;
block|}
specifier|public
name|void
name|setWriteEntry
parameter_list|(
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|writeEntry
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|writeEntry
operator|==
literal|null
assert|;
name|this
operator|.
name|writeEntry
operator|=
name|writeEntry
expr_stmt|;
comment|// Set our sequenceid now using WriteEntry.
name|this
operator|.
name|sequenceId
operator|=
name|writeEntry
operator|.
name|getWriteNumber
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
specifier|private
name|TableName
name|tablename
decl_stmt|;
comment|/**    * SequenceId for this edit. Set post-construction at write-to-WAL time. Until then it is    * NO_SEQUENCE_ID. Change it so multiple threads can read it -- e.g. access is synchronized.    */
specifier|private
name|long
name|sequenceId
decl_stmt|;
comment|/**    * Used during WAL replay; the sequenceId of the edit when it came into the system.    */
specifier|private
name|long
name|origLogSeqNum
init|=
literal|0
decl_stmt|;
comment|/** Time at which this edit was written. */
specifier|private
name|long
name|writeTime
decl_stmt|;
comment|/** The first element in the list is the cluster id on which the change has originated */
specifier|private
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
decl_stmt|;
specifier|private
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
decl_stmt|;
specifier|private
name|long
name|nonceGroup
init|=
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
specifier|private
name|long
name|nonce
init|=
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
specifier|private
name|MultiVersionConcurrencyControl
name|mvcc
decl_stmt|;
comment|/**    * Set in a way visible to multiple threads; e.g. synchronized getter/setters.    */
specifier|private
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|writeEntry
decl_stmt|;
specifier|private
name|CompressionContext
name|compressionContext
decl_stmt|;
specifier|public
name|WALKeyImpl
parameter_list|()
block|{
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
literal|null
argument_list|,
name|replicationScope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|UUID
name|clusterId
parameter_list|)
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|clusterIds
operator|.
name|add
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Fix being able to pass in sequenceid.
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|EMPTY_UUIDS
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Fix being able to pass in sequenceid.
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|EMPTY_UUIDS
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
literal|null
argument_list|,
name|replicationScope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|EMPTY_UUIDS
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|mvcc
argument_list|,
name|replicationScope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|EMPTY_UUIDS
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|mvcc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *<p>Used by log splitting and snapshots.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename         - name of table    * @param logSeqNum         - log sequence number    * @param now               Time at which this edit was written.    * @param clusterIds        the clusters that have consumed the change(used in Replication)    * @param nonceGroup        the nonceGroup    * @param nonce             the nonce    * @param mvcc              the mvcc associate the WALKeyImpl    * @param replicationScope  the non-default replication scope    *                          associated with the region's column families    */
comment|// TODO: Fix being able to pass in sequenceid.
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|mvcc
argument_list|,
name|replicationScope
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *<p>Used by log splitting and snapshots.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename         - name of table    * @param logSeqNum         - log sequence number    * @param now               Time at which this edit was written.    * @param clusterIds        the clusters that have consumed the change(used in Replication)    */
comment|// TODO: Fix being able to pass in sequenceid.
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|mvcc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename         the tablename    * @param now               Time at which this edit was written.    * @param clusterIds        the clusters that have consumed the change(used in Replication)    * @param nonceGroup    * @param nonce    * @param mvcc mvcc control used to generate sequence numbers and control read/write points    */
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|,
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|mvcc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename    * @param now               Time at which this edit was written.    * @param clusterIds        the clusters that have consumed the change(used in Replication)    * @param nonceGroup        the nonceGroup    * @param nonce             the nonce    * @param mvcc mvcc control used to generate sequence numbers and control read/write points    * @param replicationScope  the non-default replication scope of the column families    */
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|,
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|NO_SEQUENCE_ID
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|mvcc
argument_list|,
name|replicationScope
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename    * @param logSeqNum    * @param nonceGroup    * @param nonce    */
comment|// TODO: Fix being able to pass in sequenceid.
specifier|public
name|WALKeyImpl
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|,
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
name|EMPTY_UUIDS
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|mvcc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|this
operator|.
name|sequenceId
operator|=
name|logSeqNum
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|now
expr_stmt|;
name|this
operator|.
name|clusterIds
operator|=
name|clusterIds
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
name|this
operator|.
name|nonceGroup
operator|=
name|nonceGroup
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
name|this
operator|.
name|mvcc
operator|=
name|mvcc
expr_stmt|;
if|if
condition|(
name|logSeqNum
operator|!=
name|NO_SEQUENCE_ID
condition|)
block|{
name|setSequenceId
argument_list|(
name|logSeqNum
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|replicationScope
operator|=
name|replicationScope
expr_stmt|;
block|}
comment|// For deserialization. DO NOT USE. See setWriteEntry below.
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
name|void
name|setSequenceId
parameter_list|(
name|long
name|sequenceId
parameter_list|)
block|{
name|this
operator|.
name|sequenceId
operator|=
name|sequenceId
expr_stmt|;
block|}
comment|/**    * @param compressionContext Compression context to use    */
specifier|public
name|void
name|setCompressionContext
parameter_list|(
name|CompressionContext
name|compressionContext
parameter_list|)
block|{
name|this
operator|.
name|compressionContext
operator|=
name|compressionContext
expr_stmt|;
block|}
comment|/** @return encoded region name */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
comment|/** @return table name */
annotation|@
name|Override
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
return|return
name|tablename
return|;
block|}
comment|/** @return log sequence number    * @deprecated Use {@link #getSequenceId()}    */
annotation|@
name|Deprecated
specifier|public
name|long
name|getLogSeqNum
parameter_list|()
block|{
return|return
name|getSequenceId
argument_list|()
return|;
block|}
comment|/**    * Used to set original sequenceId for WALKeyImpl during WAL replay    */
specifier|public
name|void
name|setOrigLogSeqNum
parameter_list|(
specifier|final
name|long
name|sequenceId
parameter_list|)
block|{
name|this
operator|.
name|origLogSeqNum
operator|=
name|sequenceId
expr_stmt|;
block|}
comment|/**    * Return a positive long if current WALKeyImpl is created from a replay edit; a replay edit is an    * edit that came in when replaying WALs of a crashed server.    * @return original sequence number of the WALEdit    */
annotation|@
name|Override
specifier|public
name|long
name|getOrigLogSeqNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|origLogSeqNum
return|;
block|}
comment|/**    * SequenceId is only available post WAL-assign. Calls before this will get you a    * {@link SequenceId#NO_SEQUENCE_ID}. See the comment on FSHLog#append and #getWriteNumber in this    * method for more on when this sequenceId comes available.    * @return long the new assigned sequence number    */
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|sequenceId
return|;
block|}
comment|/**    * @return the write time    */
annotation|@
name|Override
specifier|public
name|long
name|getWriteTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeTime
return|;
block|}
specifier|public
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|getReplicationScopes
parameter_list|()
block|{
return|return
name|replicationScope
return|;
block|}
comment|/** @return The nonce group */
annotation|@
name|Override
specifier|public
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|nonceGroup
return|;
block|}
comment|/** @return The nonce */
annotation|@
name|Override
specifier|public
name|long
name|getNonce
parameter_list|()
block|{
return|return
name|nonce
return|;
block|}
specifier|private
name|void
name|setReplicationScope
parameter_list|(
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|replicationScope
parameter_list|)
block|{
name|this
operator|.
name|replicationScope
operator|=
name|replicationScope
expr_stmt|;
block|}
specifier|public
name|void
name|serializeReplicationScope
parameter_list|(
name|boolean
name|serialize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|serialize
condition|)
block|{
name|setReplicationScope
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Marks that the cluster with the given clusterId has consumed the change    */
specifier|public
name|void
name|addClusterId
parameter_list|(
name|UUID
name|clusterId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clusterIds
operator|.
name|contains
argument_list|(
name|clusterId
argument_list|)
condition|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the set of cluster Ids that have consumed the change    */
specifier|public
name|List
argument_list|<
name|UUID
argument_list|>
name|getClusterIds
parameter_list|()
block|{
return|return
name|clusterIds
return|;
block|}
comment|/**    * @return the cluster id on which the change has originated. It there is no such cluster, it    *         returns DEFAULT_CLUSTER_ID (cases where replication is not enabled)    */
annotation|@
name|Override
specifier|public
name|UUID
name|getOriginatingClusterId
parameter_list|()
block|{
return|return
name|clusterIds
operator|.
name|isEmpty
argument_list|()
condition|?
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
else|:
name|clusterIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|tablename
operator|+
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
operator|+
literal|"/"
operator|+
name|sequenceId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|WALKey
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
name|result
operator|^=
name|getSequenceId
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|writeTime
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|WALKey
name|o
parameter_list|)
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|o
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|long
name|sid
init|=
name|getSequenceId
argument_list|()
decl_stmt|;
name|long
name|otherSid
init|=
name|o
operator|.
name|getSequenceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sid
operator|<
name|otherSid
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sid
operator|>
name|otherSid
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|writeTime
operator|<
name|o
operator|.
name|getWriteTime
argument_list|()
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|writeTime
operator|>
name|o
operator|.
name|getWriteTime
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
comment|// why isn't cluster id accounted for?
return|return
name|result
return|;
block|}
comment|/**    * Drop this instance's tablename byte array and instead    * hold a reference to the provided tablename. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internTableName
parameter_list|(
name|TableName
name|tablename
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|tablename
operator|.
name|equals
argument_list|(
name|this
operator|.
name|tablename
argument_list|)
assert|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
block|}
comment|/**    * Drop this instance's region name byte array and instead    * hold a reference to the provided region name. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internEncodedRegionName
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|encodedRegionName
argument_list|)
assert|;
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
block|}
specifier|public
name|WALProtos
operator|.
name|WALKey
operator|.
name|Builder
name|getBuilder
parameter_list|(
name|WALCellCodec
operator|.
name|ByteStringCompressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
name|WALProtos
operator|.
name|WALKey
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|WALKey
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressionContext
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setEncodedRegionName
argument_list|(
name|compressor
operator|.
name|compress
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|compressor
operator|.
name|compress
argument_list|(
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLogSequenceNumber
argument_list|(
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setWriteTime
argument_list|(
name|writeTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|origLogSeqNum
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setOrigSequenceNumber
argument_list|(
name|this
operator|.
name|origLogSeqNum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|nonceGroup
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonceGroup
argument_list|(
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
name|HBaseProtos
operator|.
name|UUID
operator|.
name|Builder
name|uuidBuilder
init|=
name|HBaseProtos
operator|.
name|UUID
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|clusterId
range|:
name|clusterIds
control|)
block|{
name|uuidBuilder
operator|.
name|setLeastSigBits
argument_list|(
name|clusterId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|uuidBuilder
operator|.
name|setMostSigBits
argument_list|(
name|clusterId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addClusterIds
argument_list|(
name|uuidBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replicationScope
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|replicationScope
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteString
name|family
init|=
operator|(
name|compressionContext
operator|==
literal|null
operator|)
condition|?
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
name|compressor
operator|.
name|compress
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|familyDict
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addScopes
argument_list|(
name|FamilyScope
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setScopeType
argument_list|(
name|ScopeType
operator|.
name|forNumber
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
specifier|public
name|void
name|readFieldsFromPb
parameter_list|(
name|WALProtos
operator|.
name|WALKey
name|walKey
parameter_list|,
name|WALCellCodec
operator|.
name|ByteStringUncompressor
name|uncompressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|compressionContext
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|walKey
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tablenameBytes
init|=
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|walKey
operator|.
name|getTableName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
decl_stmt|;
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablenameBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|walKey
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|walKey
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clusterIds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|UUID
name|clusterId
range|:
name|walKey
operator|.
name|getClusterIdsList
argument_list|()
control|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|clusterId
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|clusterId
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|walKey
operator|.
name|hasNonceGroup
argument_list|()
condition|)
block|{
name|this
operator|.
name|nonceGroup
operator|=
name|walKey
operator|.
name|getNonceGroup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|walKey
operator|.
name|hasNonce
argument_list|()
condition|)
block|{
name|this
operator|.
name|nonce
operator|=
name|walKey
operator|.
name|getNonce
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|replicationScope
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|walKey
operator|.
name|getScopesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|replicationScope
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|FamilyScope
name|scope
range|:
name|walKey
operator|.
name|getScopesList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
operator|(
name|compressionContext
operator|==
literal|null
operator|)
condition|?
name|scope
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|scope
operator|.
name|getFamily
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|familyDict
argument_list|)
decl_stmt|;
name|this
operator|.
name|replicationScope
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|scope
operator|.
name|getScopeType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setSequenceId
argument_list|(
name|walKey
operator|.
name|getLogSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|walKey
operator|.
name|getWriteTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|walKey
operator|.
name|hasOrigSequenceNumber
argument_list|()
condition|)
block|{
name|this
operator|.
name|origLogSeqNum
operator|=
name|walKey
operator|.
name|getOrigSequenceNumber
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimatedSerializedSizeOf
parameter_list|()
block|{
name|long
name|size
init|=
name|encodedRegionName
operator|!=
literal|null
condition|?
name|encodedRegionName
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|size
operator|+=
name|tablename
operator|!=
literal|null
condition|?
name|tablename
operator|.
name|toBytes
argument_list|()
operator|.
name|length
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|clusterIds
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
literal|16
operator|*
name|clusterIds
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nonceGroup
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
comment|// nonce group
block|}
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
comment|// nonce
block|}
if|if
condition|(
name|replicationScope
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scope
range|:
name|replicationScope
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|size
operator|+=
name|scope
operator|.
name|getKey
argument_list|()
operator|.
name|length
expr_stmt|;
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
block|}
block|}
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
comment|// sequence number
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
comment|// write time
if|if
condition|(
name|origLogSeqNum
operator|>
literal|0
condition|)
block|{
name|size
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
comment|// original sequence number
block|}
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

