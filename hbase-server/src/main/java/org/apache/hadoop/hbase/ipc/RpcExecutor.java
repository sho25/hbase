begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredRPCHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BoundedPriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Runs the CallRunners passed here via {@link #dispatch(CallRunner)}. Subclass and add particular  * scheduling behavior.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RpcExecutor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_CALL_QUEUE_SIZE_HARD_LIMIT
init|=
literal|250
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_HANDLER_FACTOR_CONF_KEY
init|=
literal|"hbase.ipc.server.callqueue.handler.factor"
decl_stmt|;
comment|/** max delay in msec used to bound the deprioritized requests */
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_MAX_CALL_DELAY_CONF_KEY
init|=
literal|"hbase.ipc.server.queue.max.call.delay"
decl_stmt|;
comment|/**    * The default, 'fifo', has the least friction but is dumb. If set to 'deadline', uses a priority    * queue and deprioritizes long-running scans. Sorting by priority comes at a cost, reduced    * throughput.    */
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_TYPE_CODEL_CONF_VALUE
init|=
literal|"codel"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE
init|=
literal|"deadline"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_TYPE_FIFO_CONF_VALUE
init|=
literal|"fifo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_TYPE_CONF_KEY
init|=
literal|"hbase.ipc.server.callqueue.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_TYPE_CONF_DEFAULT
init|=
name|CALL_QUEUE_TYPE_FIFO_CONF_VALUE
decl_stmt|;
comment|// These 3 are only used by Codel executor
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_CODEL_TARGET_DELAY
init|=
literal|"hbase.ipc.server.callqueue.codel.target.delay"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_CODEL_INTERVAL
init|=
literal|"hbase.ipc.server.callqueue.codel.interval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALL_QUEUE_CODEL_LIFO_THRESHOLD
init|=
literal|"hbase.ipc.server.callqueue.codel.lifo.threshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CALL_QUEUE_CODEL_DEFAULT_TARGET_DELAY
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CALL_QUEUE_CODEL_DEFAULT_INTERVAL
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|CALL_QUEUE_CODEL_DEFAULT_LIFO_THRESHOLD
init|=
literal|0.8
decl_stmt|;
specifier|private
name|AtomicLong
name|numGeneralCallsDropped
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|numLifoModeSwitches
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numCallQueues
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
argument_list|>
name|queues
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|BlockingQueue
argument_list|>
name|queueClass
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|queueInitArgs
decl_stmt|;
specifier|private
specifier|final
name|PriorityFunction
name|priority
decl_stmt|;
specifier|protected
specifier|volatile
name|int
name|currentQueueLimit
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|activeHandlerCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
decl_stmt|;
specifier|private
specifier|final
name|int
name|handlerCount
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|failedHandlerCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|Abortable
name|abortable
init|=
literal|null
decl_stmt|;
specifier|public
name|RpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|handlerCount
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CALL_QUEUE_TYPE_CONF_KEY
argument_list|,
name|CALL_QUEUE_TYPE_CONF_DEFAULT
argument_list|)
argument_list|,
name|maxQueueLength
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|String
name|callQueueType
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|abortable
operator|=
name|abortable
expr_stmt|;
name|float
name|callQueuesHandlersFactor
init|=
name|this
operator|.
name|conf
operator|.
name|getFloat
argument_list|(
name|CALL_QUEUE_HANDLER_FACTOR_CONF_KEY
argument_list|,
literal|0.1f
argument_list|)
decl_stmt|;
name|this
operator|.
name|numCallQueues
operator|=
name|computeNumCallQueues
argument_list|(
name|handlerCount
argument_list|,
name|callQueuesHandlersFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|queues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|numCallQueues
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlerCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|handlerCount
argument_list|,
name|this
operator|.
name|numCallQueues
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|handlerCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
if|if
condition|(
name|isDeadlineQueueType
argument_list|(
name|callQueueType
argument_list|)
condition|)
block|{
name|this
operator|.
name|name
operator|+=
literal|".Deadline"
expr_stmt|;
name|this
operator|.
name|queueInitArgs
operator|=
operator|new
name|Object
index|[]
block|{
name|maxQueueLength
block|,
operator|new
name|CallPriorityComparator
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|priority
argument_list|)
block|}
expr_stmt|;
name|this
operator|.
name|queueClass
operator|=
name|BoundedPriorityBlockingQueue
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCodelQueueType
argument_list|(
name|callQueueType
argument_list|)
condition|)
block|{
name|this
operator|.
name|name
operator|+=
literal|".Codel"
expr_stmt|;
name|int
name|codelTargetDelay
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CALL_QUEUE_CODEL_TARGET_DELAY
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_TARGET_DELAY
argument_list|)
decl_stmt|;
name|int
name|codelInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CALL_QUEUE_CODEL_INTERVAL
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_INTERVAL
argument_list|)
decl_stmt|;
name|double
name|codelLifoThreshold
init|=
name|conf
operator|.
name|getDouble
argument_list|(
name|CALL_QUEUE_CODEL_LIFO_THRESHOLD
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_LIFO_THRESHOLD
argument_list|)
decl_stmt|;
name|queueInitArgs
operator|=
operator|new
name|Object
index|[]
block|{
name|maxQueueLength
block|,
name|codelTargetDelay
block|,
name|codelInterval
block|,
name|codelLifoThreshold
block|,
name|numGeneralCallsDropped
block|,
name|numLifoModeSwitches
block|}
expr_stmt|;
name|queueClass
operator|=
name|AdaptiveLifoCoDelCallQueue
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|name
operator|+=
literal|".Fifo"
expr_stmt|;
name|queueInitArgs
operator|=
operator|new
name|Object
index|[]
block|{
name|maxQueueLength
block|}
expr_stmt|;
name|queueClass
operator|=
name|LinkedBlockingQueue
operator|.
name|class
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RpcExecutor "
operator|+
name|name
operator|+
literal|" using "
operator|+
name|callQueueType
operator|+
literal|" as call queue; numCallQueues="
operator|+
name|numCallQueues
operator|+
literal|"; maxQueueLength="
operator|+
name|maxQueueLength
operator|+
literal|"; handlerCount="
operator|+
name|handlerCount
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|computeNumCallQueues
parameter_list|(
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|float
name|callQueuesHandlersFactor
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|handlerCount
operator|*
name|callQueuesHandlersFactor
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|initializeQueues
parameter_list|(
specifier|final
name|int
name|numQueues
parameter_list|)
block|{
if|if
condition|(
name|queueInitArgs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|currentQueueLimit
operator|=
operator|(
name|int
operator|)
name|queueInitArgs
index|[
literal|0
index|]
expr_stmt|;
name|queueInitArgs
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|queueInitArgs
index|[
literal|0
index|]
argument_list|,
name|DEFAULT_CALL_QUEUE_SIZE_HARD_LIMIT
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
operator|++
name|i
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
operator|(
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|queueClass
argument_list|,
name|queueInitArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|int
name|port
parameter_list|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|startHandlers
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Thread
name|handler
range|:
name|handlers
control|)
block|{
name|handler
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Add the request to the executor queue */
specifier|public
specifier|abstract
name|boolean
name|dispatch
parameter_list|(
specifier|final
name|CallRunner
name|callTask
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
comment|/** Returns the list of request queues */
specifier|protected
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
argument_list|>
name|getQueues
parameter_list|()
block|{
return|return
name|queues
return|;
block|}
specifier|protected
name|void
name|startHandlers
parameter_list|(
specifier|final
name|int
name|port
parameter_list|)
block|{
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
argument_list|>
name|callQueues
init|=
name|getQueues
argument_list|()
decl_stmt|;
name|startHandlers
argument_list|(
literal|null
argument_list|,
name|handlerCount
argument_list|,
name|callQueues
argument_list|,
literal|0
argument_list|,
name|callQueues
operator|.
name|size
argument_list|()
argument_list|,
name|port
argument_list|,
name|activeHandlerCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Override if providing alternate Handler implementation.    */
specifier|protected
name|Handler
name|getHandler
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|double
name|handlerFailureThreshhold
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|q
parameter_list|,
specifier|final
name|AtomicInteger
name|activeHandlerCount
parameter_list|)
block|{
return|return
operator|new
name|Handler
argument_list|(
name|name
argument_list|,
name|handlerFailureThreshhold
argument_list|,
name|q
argument_list|,
name|activeHandlerCount
argument_list|)
return|;
block|}
comment|/**    * Start up our handlers.    */
specifier|protected
name|void
name|startHandlers
parameter_list|(
specifier|final
name|String
name|nameSuffix
parameter_list|,
specifier|final
name|int
name|numHandlers
parameter_list|,
specifier|final
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
argument_list|>
name|callQueues
parameter_list|,
specifier|final
name|int
name|qindex
parameter_list|,
specifier|final
name|int
name|qsize
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|AtomicInteger
name|activeHandlerCount
parameter_list|)
block|{
specifier|final
name|String
name|threadPrefix
init|=
name|name
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|nameSuffix
argument_list|)
decl_stmt|;
name|double
name|handlerFailureThreshhold
init|=
name|conf
operator|==
literal|null
condition|?
literal|1.0
else|:
name|conf
operator|.
name|getDouble
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_ABORT_ON_ERROR_PERCENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGION_SERVER_HANDLER_ABORT_ON_ERROR_PERCENT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started "
operator|+
name|handlers
operator|.
name|size
argument_list|()
operator|+
literal|" "
operator|+
name|threadPrefix
operator|+
literal|" handlers, qsize="
operator|+
name|qsize
operator|+
literal|" on port="
operator|+
name|port
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHandlers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|qindex
operator|+
operator|(
name|i
operator|%
name|qsize
operator|)
decl_stmt|;
name|String
name|name
init|=
literal|"RpcServer."
operator|+
name|threadPrefix
operator|+
literal|".handler="
operator|+
name|handlers
operator|.
name|size
argument_list|()
operator|+
literal|",queue="
operator|+
name|index
operator|+
literal|",port="
operator|+
name|port
decl_stmt|;
name|Handler
name|handler
init|=
name|getHandler
argument_list|(
name|name
argument_list|,
name|handlerFailureThreshhold
argument_list|,
name|callQueues
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|activeHandlerCount
argument_list|)
decl_stmt|;
name|handler
operator|.
name|start
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handler thread run the {@link CallRunner#run()} in.    */
specifier|protected
class|class
name|Handler
extends|extends
name|Thread
block|{
comment|/**      * Q to find CallRunners to run in.      */
specifier|final
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|q
decl_stmt|;
specifier|final
name|double
name|handlerFailureThreshhold
decl_stmt|;
comment|// metrics (shared with other handlers)
specifier|final
name|AtomicInteger
name|activeHandlerCount
decl_stmt|;
name|Handler
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|double
name|handlerFailureThreshhold
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|q
parameter_list|,
specifier|final
name|AtomicInteger
name|activeHandlerCount
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
name|this
operator|.
name|handlerFailureThreshhold
operator|=
name|handlerFailureThreshhold
expr_stmt|;
name|this
operator|.
name|activeHandlerCount
operator|=
name|activeHandlerCount
expr_stmt|;
block|}
comment|/**      * @return A {@link CallRunner}      * @throws InterruptedException      */
specifier|protected
name|CallRunner
name|getCallRunner
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|this
operator|.
name|q
operator|.
name|take
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|run
argument_list|(
name|getCallRunner
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|interrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|run
parameter_list|(
name|CallRunner
name|cr
parameter_list|)
block|{
name|MonitoredRPCHandler
name|status
init|=
name|RpcServer
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|activeHandlerCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|cr
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|Error
condition|)
block|{
name|int
name|failedCount
init|=
name|failedHandlerCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|handlerFailureThreshhold
operator|>=
literal|0
operator|&&
name|failedCount
operator|>
name|handlerCount
operator|*
name|this
operator|.
name|handlerFailureThreshhold
condition|)
block|{
name|String
name|message
init|=
literal|"Number of failed RpcServer handler runs exceeded threshhold "
operator|+
name|this
operator|.
name|handlerFailureThreshhold
operator|+
literal|"; reason: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|abortable
operator|!=
literal|null
condition|)
block|{
name|abortable
operator|.
name|abort
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error but can't abort because abortable is null: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Handler errors "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Handler  exception "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|activeHandlerCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|QueueBalancer
block|{
comment|/**      * @return the index of the next queue to which a request should be inserted      */
specifier|public
specifier|abstract
name|int
name|getNextQueue
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
name|QueueBalancer
name|getBalancer
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|queueSize
operator|>
literal|0
argument_list|,
literal|"Queue size is<= 0, must be at least 1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueSize
operator|==
literal|1
condition|)
block|{
return|return
name|ONE_QUEUE
return|;
block|}
else|else
block|{
return|return
operator|new
name|RandomQueueBalancer
argument_list|(
name|queueSize
argument_list|)
return|;
block|}
block|}
comment|/**    * All requests go to the first queue, at index 0    */
specifier|private
specifier|static
name|QueueBalancer
name|ONE_QUEUE
init|=
operator|new
name|QueueBalancer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getNextQueue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Queue balancer that just randomly selects a queue in the range [0, num queues).    */
specifier|private
specifier|static
class|class
name|RandomQueueBalancer
extends|extends
name|QueueBalancer
block|{
specifier|private
specifier|final
name|int
name|queueSize
decl_stmt|;
specifier|public
name|RandomQueueBalancer
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
specifier|public
name|int
name|getNextQueue
parameter_list|()
block|{
return|return
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|queueSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Comparator used by the "normal callQueue" if DEADLINE_CALL_QUEUE_CONF_KEY is set to true. It    * uses the calculated "deadline" e.g. to deprioritize long-running job If multiple requests have    * the same deadline BoundedPriorityBlockingQueue will order them in FIFO (first-in-first-out)    * manner.    */
specifier|private
specifier|static
class|class
name|CallPriorityComparator
implements|implements
name|Comparator
argument_list|<
name|CallRunner
argument_list|>
block|{
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_CALL_DELAY
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|final
name|PriorityFunction
name|priority
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxDelay
decl_stmt|;
specifier|public
name|CallPriorityComparator
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|maxDelay
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|QUEUE_MAX_CALL_DELAY_CONF_KEY
argument_list|,
name|DEFAULT_MAX_CALL_DELAY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CallRunner
name|a
parameter_list|,
name|CallRunner
name|b
parameter_list|)
block|{
name|RpcCall
name|callA
init|=
name|a
operator|.
name|getRpcCall
argument_list|()
decl_stmt|;
name|RpcCall
name|callB
init|=
name|b
operator|.
name|getRpcCall
argument_list|()
decl_stmt|;
name|long
name|deadlineA
init|=
name|priority
operator|.
name|getDeadline
argument_list|(
name|callA
operator|.
name|getHeader
argument_list|()
argument_list|,
name|callA
operator|.
name|getParam
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|deadlineB
init|=
name|priority
operator|.
name|getDeadline
argument_list|(
name|callB
operator|.
name|getHeader
argument_list|()
argument_list|,
name|callB
operator|.
name|getParam
argument_list|()
argument_list|)
decl_stmt|;
name|deadlineA
operator|=
name|callA
operator|.
name|getReceiveTime
argument_list|()
operator|+
name|Math
operator|.
name|min
argument_list|(
name|deadlineA
argument_list|,
name|maxDelay
argument_list|)
expr_stmt|;
name|deadlineB
operator|=
name|callB
operator|.
name|getReceiveTime
argument_list|()
operator|+
name|Math
operator|.
name|min
argument_list|(
name|deadlineB
argument_list|,
name|maxDelay
argument_list|)
expr_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|deadlineA
argument_list|,
name|deadlineB
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isDeadlineQueueType
parameter_list|(
specifier|final
name|String
name|callQueueType
parameter_list|)
block|{
return|return
name|callQueueType
operator|.
name|equals
argument_list|(
name|CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCodelQueueType
parameter_list|(
specifier|final
name|String
name|callQueueType
parameter_list|)
block|{
return|return
name|callQueueType
operator|.
name|equals
argument_list|(
name|CALL_QUEUE_TYPE_CODEL_CONF_VALUE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFifoQueueType
parameter_list|(
specifier|final
name|String
name|callQueueType
parameter_list|)
block|{
return|return
name|callQueueType
operator|.
name|equals
argument_list|(
name|CALL_QUEUE_TYPE_FIFO_CONF_VALUE
argument_list|)
return|;
block|}
specifier|public
name|long
name|getNumGeneralCallsDropped
parameter_list|()
block|{
return|return
name|numGeneralCallsDropped
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getNumLifoModeSwitches
parameter_list|()
block|{
return|return
name|numLifoModeSwitches
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getActiveHandlerCount
parameter_list|()
block|{
return|return
name|activeHandlerCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getActiveWriteHandlerCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getActiveReadHandlerCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getActiveScanHandlerCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/** Returns the length of the pending queue */
specifier|public
name|int
name|getQueueLength
parameter_list|()
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|queue
range|:
name|queues
control|)
block|{
name|length
operator|+=
name|queue
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
specifier|public
name|int
name|getReadQueueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getScanQueueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getWriteQueueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
comment|/**    * Update current soft limit for executor's call queues    * @param conf updated configuration    */
specifier|public
name|void
name|resizeQueues
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|configKey
init|=
name|RpcScheduler
operator|.
name|IPC_SERVER_MAX_CALLQUEUE_LENGTH
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"priority"
argument_list|)
condition|)
block|{
name|configKey
operator|=
name|RpcScheduler
operator|.
name|IPC_SERVER_PRIORITY_MAX_CALLQUEUE_LENGTH
expr_stmt|;
block|}
name|currentQueueLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|configKey
argument_list|,
name|currentQueueLimit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// update CoDel Scheduler tunables
name|int
name|codelTargetDelay
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CALL_QUEUE_CODEL_TARGET_DELAY
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_TARGET_DELAY
argument_list|)
decl_stmt|;
name|int
name|codelInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CALL_QUEUE_CODEL_INTERVAL
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_INTERVAL
argument_list|)
decl_stmt|;
name|double
name|codelLifoThreshold
init|=
name|conf
operator|.
name|getDouble
argument_list|(
name|CALL_QUEUE_CODEL_LIFO_THRESHOLD
argument_list|,
name|CALL_QUEUE_CODEL_DEFAULT_LIFO_THRESHOLD
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|queue
range|:
name|queues
control|)
block|{
if|if
condition|(
name|queue
operator|instanceof
name|AdaptiveLifoCoDelCallQueue
condition|)
block|{
operator|(
operator|(
name|AdaptiveLifoCoDelCallQueue
operator|)
name|queue
operator|)
operator|.
name|updateTunables
argument_list|(
name|codelTargetDelay
argument_list|,
name|codelInterval
argument_list|,
name|codelLifoThreshold
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

