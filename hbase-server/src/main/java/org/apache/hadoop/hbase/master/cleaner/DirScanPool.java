begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DaemonThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|ConfigurationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The thread pool used for scan directories  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DirScanPool
implements|implements
name|ConfigurationObserver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DirScanPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|size
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|pool
decl_stmt|;
specifier|private
name|int
name|cleanerLatch
decl_stmt|;
specifier|private
name|boolean
name|reconfigNotification
decl_stmt|;
specifier|public
name|DirScanPool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|poolSize
init|=
name|conf
operator|.
name|get
argument_list|(
name|CleanerChore
operator|.
name|CHORE_POOL_SIZE
argument_list|,
name|CleanerChore
operator|.
name|DEFAULT_CHORE_POOL_SIZE
argument_list|)
decl_stmt|;
name|size
operator|=
name|CleanerChore
operator|.
name|calculatePoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
comment|// poolSize may be 0 or 0.0 from a careless configuration,
comment|// double check to make sure.
name|size
operator|=
name|size
operator|==
literal|0
condition|?
name|CleanerChore
operator|.
name|calculatePoolSize
argument_list|(
name|CleanerChore
operator|.
name|DEFAULT_CHORE_POOL_SIZE
argument_list|)
else|:
name|size
expr_stmt|;
name|pool
operator|=
name|initializePool
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaner pool size is {}"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|cleanerLatch
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
specifier|static
name|ThreadPoolExecutor
name|initializePool
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
literal|"dir-scan-pool"
argument_list|)
argument_list|)
decl_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
comment|/**    * Checks if pool can be updated. If so, mark for update later.    * @param conf configuration    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|newSize
init|=
name|CleanerChore
operator|.
name|calculatePoolSize
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CleanerChore
operator|.
name|CHORE_POOL_SIZE
argument_list|,
name|CleanerChore
operator|.
name|DEFAULT_CHORE_POOL_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|==
name|size
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Size from configuration is same as previous={}, no need to update."
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|size
operator|=
name|newSize
expr_stmt|;
comment|// Chore is working, update it later.
name|reconfigNotification
operator|=
literal|true
expr_stmt|;
block|}
specifier|synchronized
name|void
name|latchCountUp
parameter_list|()
block|{
name|cleanerLatch
operator|++
expr_stmt|;
block|}
specifier|synchronized
name|void
name|latchCountDown
parameter_list|()
block|{
name|cleanerLatch
operator|--
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|void
name|execute
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|pool
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|shutdownNow
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|==
literal|null
operator|||
name|pool
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return;
block|}
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|void
name|tryUpdatePoolSize
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
if|if
condition|(
operator|!
name|reconfigNotification
condition|)
block|{
return|return;
block|}
name|reconfigNotification
operator|=
literal|false
expr_stmt|;
name|long
name|stopTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
name|cleanerLatch
operator|!=
literal|0
operator|&&
name|timeout
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|stopTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Update chore's pool size from {} to {}"
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setCorePoolSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

