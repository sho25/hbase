begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * Helper class to obtain a filesystem delegation token.  * Mainly used by Map-Reduce jobs that requires to read/write data to   * a remote file-system (e.g. BulkLoad, ExportSnapshot).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|FsDelegationToken
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FsDelegationToken
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|String
name|renewer
decl_stmt|;
specifier|private
name|boolean
name|hasForwardedToken
init|=
literal|false
decl_stmt|;
specifier|private
name|Token
argument_list|<
name|?
argument_list|>
name|userToken
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
comment|/*    * @param renewer the account name that is allowed to renew the token.    */
specifier|public
name|FsDelegationToken
parameter_list|(
specifier|final
name|UserProvider
name|userProvider
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|)
block|{
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|renewer
operator|=
name|renewer
expr_stmt|;
block|}
comment|/**    * Acquire the delegation token for the specified filesytem.    * Before requesting a new delegation token, tries to find one already available.    *    * @param fs the filesystem that requires the delegation token    * @throws IOException on fs.getDelegationToken() failure    */
specifier|public
name|void
name|acquireDelegationToken
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|userToken
operator|=
name|userProvider
operator|.
name|getCurrent
argument_list|()
operator|.
name|getToken
argument_list|(
literal|"HDFS_DELEGATION_TOKEN"
argument_list|,
name|fs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|userToken
operator|==
literal|null
condition|)
block|{
name|hasForwardedToken
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|userToken
operator|=
name|fs
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// we need to handle NullPointerException in case HADOOP-10009 is missing
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get token for "
operator|+
name|renewer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hasForwardedToken
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use the existing token: "
operator|+
name|userToken
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Releases a previously acquired delegation token.    */
specifier|public
name|void
name|releaseDelegationToken
parameter_list|()
block|{
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|userToken
operator|!=
literal|null
operator|&&
operator|!
name|hasForwardedToken
condition|)
block|{
try|try
block|{
name|userToken
operator|.
name|cancel
argument_list|(
name|this
operator|.
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel HDFS delegation token: "
operator|+
name|userToken
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|userToken
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|UserProvider
name|getUserProvider
parameter_list|()
block|{
return|return
name|userProvider
return|;
block|}
comment|/**    * @return the account name that is allowed to renew the token.    */
specifier|public
name|String
name|getRenewer
parameter_list|()
block|{
return|return
name|renewer
return|;
block|}
comment|/**    * @return the delegation token acquired, or null in case it was not acquired    */
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getUserToken
parameter_list|()
block|{
return|return
name|userToken
return|;
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
block|}
end_class

end_unit

