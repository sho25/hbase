begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Class that manages the output streams from the log splitting process.  * Every region only has one recovered edits.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RecoveredEditsOutputSink
extends|extends
name|AbstractRecoveredEditsOutputSink
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecoveredEditsOutputSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|RecoveredEditsWriter
argument_list|>
name|writers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|RecoveredEditsOutputSink
parameter_list|(
name|WALSplitter
name|walSplitter
parameter_list|,
name|WALSplitter
operator|.
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
name|super
argument_list|(
name|walSplitter
argument_list|,
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|EntryBuffers
operator|.
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|WAL
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RecoveredEditsWriter
name|writer
init|=
name|getRecoveredEditsWriter
argument_list|(
name|buffer
operator|.
name|tableName
argument_list|,
name|buffer
operator|.
name|encodedRegionName
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeRegionEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a writer and path for a log starting at the given entry. This function is threadsafe so    * long as multiple threads are always acting on different regions.    * @return null if this region shouldn't output any logs    */
specifier|private
name|RecoveredEditsWriter
name|getRecoveredEditsWriter
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredEditsWriter
name|ret
init|=
name|writers
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|createRecoveredEditsWriter
argument_list|(
name|tableName
argument_list|,
name|region
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|writers
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
init|=
literal|true
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|&=
name|finishWriterThreads
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|isSuccessful
operator|&=
name|closeWriters
argument_list|()
expr_stmt|;
block|}
return|return
name|isSuccessful
condition|?
name|splits
else|:
literal|null
return|;
block|}
comment|/**    * Close all of the output streams.    *    * @return true when there is no error.    */
specifier|private
name|boolean
name|closeWriters
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RecoveredEditsWriter
name|writer
range|:
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
name|closeCompletionService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|Path
name|dst
init|=
name|closeRecoveredEditsWriter
argument_list|(
name|writer
argument_list|,
name|thrown
argument_list|)
decl_stmt|;
name|splits
operator|.
name|add
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progressFailed
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|closeCompletionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progressFailed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progressFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
return|return
operator|!
name|progressFailed
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredEditsWriter
argument_list|>
name|entry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
name|int
name|getNumOpenWriters
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

