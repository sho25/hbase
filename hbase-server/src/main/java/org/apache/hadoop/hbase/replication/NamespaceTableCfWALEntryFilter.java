begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Filter a WAL Entry by the peer config: replicate_all flag, namespaces config, table-cfs config,  * exclude namespaces config, and exclude table-cfs config.  *  * If replicate_all flag is true, it means all user tables will be replicated to peer cluster. But  * you can set exclude namespaces or exclude table-cfs which can't be replicated to peer cluster.  * Note: set a exclude namespace means that all tables in this namespace can't be replicated.  *  * If replicate_all flag is false, it means all user tables can't be replicated to peer cluster.  * But you can set namespaces or table-cfs which will be replicated to peer cluster.  * Note: set a namespace means that all tables in this namespace will be replicated.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NamespaceTableCfWALEntryFilter
implements|implements
name|WALEntryFilter
implements|,
name|WALCellFilter
block|{
specifier|private
specifier|final
name|ReplicationPeer
name|peer
decl_stmt|;
specifier|private
name|BulkLoadCellFilter
name|bulkLoadFilter
init|=
operator|new
name|BulkLoadCellFilter
argument_list|()
decl_stmt|;
specifier|public
name|NamespaceTableCfWALEntryFilter
parameter_list|(
name|ReplicationPeer
name|peer
parameter_list|)
block|{
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|ReplicationUtils
operator|.
name|contains
argument_list|(
name|this
operator|.
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|filterCell
parameter_list|(
specifier|final
name|Entry
name|entry
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|this
operator|.
name|peer
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
condition|)
block|{
comment|// replicate all user tables, but filter by exclude table-cfs config
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|excludeTableCfs
init|=
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeTableCfs
operator|==
literal|null
condition|)
block|{
return|return
name|cell
return|;
block|}
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
name|cell
operator|=
name|bulkLoadFilter
operator|.
name|filterCell
argument_list|(
name|cell
argument_list|,
name|fam
lambda|->
name|filterByExcludeTableCfs
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam
argument_list|)
argument_list|,
name|excludeTableCfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|filterByExcludeTableCfs
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|,
name|excludeTableCfs
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|cell
return|;
block|}
else|else
block|{
comment|// not replicate all user tables, so filter by table-cfs config
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
return|return
name|cell
return|;
block|}
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
name|cell
operator|=
name|bulkLoadFilter
operator|.
name|filterCell
argument_list|(
name|cell
argument_list|,
name|fam
lambda|->
name|filterByTableCfs
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam
argument_list|)
argument_list|,
name|tableCfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|filterByTableCfs
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|,
name|tableCfs
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|cell
return|;
block|}
block|}
specifier|private
name|boolean
name|filterByExcludeTableCfs
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|family
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|excludeTableCfs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludeCfs
init|=
name|excludeTableCfs
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeCfs
operator|!=
literal|null
condition|)
block|{
comment|// empty cfs means all cfs of this table are excluded
if|if
condition|(
name|excludeCfs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// ignore(remove) kv if its cf is in the exclude cfs list
if|if
condition|(
name|excludeCfs
operator|.
name|contains
argument_list|(
name|family
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|filterByTableCfs
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|family
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cfs
init|=
name|tableCfs
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// ignore(remove) kv if its cf isn't in the replicable cf list
comment|// (empty cfs means all cfs of this table are replicable)
if|if
condition|(
name|cfs
operator|!=
literal|null
operator|&&
operator|!
name|cfs
operator|.
name|contains
argument_list|(
name|family
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

