begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_comment
comment|/**  * Combine Puts. Merges Put instances grouped by<code>K</code> into a single  * instance.  * @see TableMapReduceUtil  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|PutCombiner
parameter_list|<
name|K
parameter_list|>
extends|extends
name|Reducer
argument_list|<
name|K
argument_list|,
name|Put
argument_list|,
name|K
argument_list|,
name|Put
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PutCombiner
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|reduce
parameter_list|(
name|K
name|row
parameter_list|,
name|Iterable
argument_list|<
name|Put
argument_list|>
name|vals
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
comment|// There's nothing to say<code>K row</code> is the same as the rowkey
comment|// used to construct Puts (value) instances. Thus the map of put.getRow()
comment|// to combined Put is necessary.
comment|// TODO: would be better if we knew<code>K row</code> and Put rowkey were
comment|// identical. Then this whole Put buffering business goes away.
comment|// TODO: Could use HeapSize to create an upper bound on the memory size of
comment|// the puts map and flush some portion of the content while looping. This
comment|// flush could result in multiple Puts for a single rowkey. That is
comment|// acceptable because Combiner is run as an optimization and it's not
comment|// critical that all Puts are grouped perfectly.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Put
argument_list|>
name|puts
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Put
name|p
range|:
name|vals
control|)
block|{
name|cnt
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|puts
operator|.
name|containsKey
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|puts
operator|.
name|put
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|puts
operator|.
name|get
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|p
operator|.
name|getFamilyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Put
name|p
range|:
name|puts
operator|.
name|values
argument_list|()
control|)
block|{
name|context
operator|.
name|write
argument_list|(
name|row
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Combined %d Put(s) into %d."
argument_list|,
name|cnt
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

