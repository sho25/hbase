begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_comment
comment|/**  * Used by a {@link RecoveredReplicationSourceShipper}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RecoveredReplicationSourceWALReader
extends|extends
name|ReplicationSourceWALReader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RecoveredReplicationSourceWALReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RecoveredReplicationSourceWALReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|logQueue
parameter_list|,
name|long
name|startPosition
parameter_list|,
name|WALEntryFilter
name|filter
parameter_list|,
name|ReplicationSource
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|logQueue
argument_list|,
name|startPosition
argument_list|,
name|filter
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleEmptyWALEntryBatch
parameter_list|(
name|WALEntryBatch
name|batch
parameter_list|,
name|Path
name|currentPath
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Didn't read any new entries from WAL"
argument_list|)
expr_stmt|;
comment|// we're done with queue recovery, shut ourself down
name|setReaderRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// shuts down shipper thread immediately
name|entryBatchQueue
operator|.
name|put
argument_list|(
name|batch
operator|!=
literal|null
condition|?
name|batch
else|:
operator|new
name|WALEntryBatch
argument_list|(
name|replicationBatchCountCapacity
argument_list|,
name|currentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

