begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABEL_QUALIFIER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|SORTED_ORDINAL_SERIALIZATION_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityUtils
operator|.
name|SYSTEM_LABEL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|OperationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultVisibilityLabelServiceImpl
implements|implements
name|VisibilityLabelService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultVisibilityLabelServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// "system" label is having an ordinal value 1.
specifier|private
specifier|static
specifier|final
name|int
name|SYSTEM_LABEL_ORDINAL
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Tag
index|[]
name|LABELS_TABLE_TAGS
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|AtomicInteger
name|ordinalCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Region
name|labelsRegion
decl_stmt|;
specifier|private
name|VisibilityLabelsCache
name|labelsCache
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ScanLabelGenerator
argument_list|>
name|scanLabelGenerators
decl_stmt|;
static|static
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
try|try
block|{
name|StreamUtils
operator|.
name|writeRawVInt32
argument_list|(
name|dos
argument_list|,
name|SYSTEM_LABEL_ORDINAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We write to a byte array. No Exception can happen.
block|}
name|LABELS_TABLE_TAGS
index|[
literal|0
index|]
operator|=
operator|new
name|ArrayBackedTag
argument_list|(
name|VISIBILITY_TAG_TYPE
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultVisibilityLabelServiceImpl
parameter_list|()
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|RegionCoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|e
operator|.
name|getCoprocessorRegionServerServices
argument_list|()
operator|instanceof
name|RegionServerServices
assert|;
name|ZooKeeperWatcher
name|zk
init|=
operator|(
operator|(
name|RegionServerServices
operator|)
name|e
operator|.
name|getCoprocessorRegionServerServices
argument_list|()
operator|)
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
try|try
block|{
name|labelsCache
operator|=
name|VisibilityLabelsCache
operator|.
name|createAndGet
argument_list|(
name|zk
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating VisibilityLabelsCache"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|this
operator|.
name|scanLabelGenerators
operator|=
name|VisibilityUtils
operator|.
name|getScanLabelGenerators
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|LABELS_TABLE_NAME
argument_list|)
condition|)
block|{
name|this
operator|.
name|labelsRegion
operator|=
name|e
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|labelsAndUserAuths
init|=
name|extractLabelsAndAuths
argument_list|(
name|getExistingLabelsWithAuths
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
init|=
name|labelsAndUserAuths
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
name|labelsAndUserAuths
operator|.
name|getSecond
argument_list|()
decl_stmt|;
comment|// Add the "system" label if it is not added into the system yet
name|addSystemLabel
argument_list|(
name|this
operator|.
name|labelsRegion
argument_list|,
name|labels
argument_list|,
name|userAuths
argument_list|)
expr_stmt|;
name|int
name|ordinal
init|=
name|SYSTEM_LABEL_ORDINAL
decl_stmt|;
comment|// Ordinal 1 is reserved for "system" label.
for|for
control|(
name|Integer
name|i
range|:
name|labels
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>
name|ordinal
condition|)
block|{
name|ordinal
operator|=
name|i
expr_stmt|;
block|}
block|}
name|this
operator|.
name|ordinalCounter
operator|.
name|set
argument_list|(
name|ordinal
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|labels
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// If there is no data need not write to zk
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getDataToWriteToZooKeeper
argument_list|(
name|labels
argument_list|)
decl_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|refreshLabelsCache
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userAuths
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getUserAuthsDataToWriteToZooKeeper
argument_list|(
name|userAuths
argument_list|)
decl_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|refreshUserAuthsCache
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|getExistingLabelsWithAuths
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|labelsRegion
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|existingLabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|existingLabels
operator|.
name|add
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|existingLabels
return|;
block|}
specifier|protected
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|extractLabelsAndAuths
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|labelDetails
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
range|:
name|labelDetails
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cell
argument_list|,
name|LABEL_QUALIFIER
argument_list|)
condition|)
block|{
name|labels
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|getRowAsInt
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// These are user cells who has authorization for this label
name|String
name|user
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|auths
init|=
name|userAuths
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|auths
operator|==
literal|null
condition|)
block|{
name|auths
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|userAuths
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
name|auths
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|getRowAsInt
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|labels
argument_list|,
name|userAuths
argument_list|)
return|;
block|}
specifier|protected
name|void
name|addSystemLabel
parameter_list|(
name|Region
name|region
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|labels
operator|.
name|containsKey
argument_list|(
name|SYSTEM_LABEL
argument_list|)
condition|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SYSTEM_LABEL_ORDINAL
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SYSTEM_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|SYSTEM_LABEL
argument_list|,
name|SYSTEM_LABEL_ORDINAL
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|addLabels
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|labelsRegion
operator|!=
literal|null
assert|;
name|OperationStatus
index|[]
name|finalOpStatus
init|=
operator|new
name|OperationStatus
index|[
name|labels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|label
range|:
name|labels
control|)
block|{
name|String
name|labelStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|labelsCache
operator|.
name|getLabelOrdinal
argument_list|(
name|labelStr
argument_list|)
operator|>
literal|0
condition|)
block|{
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|FAILURE
argument_list|,
operator|new
name|LabelAlreadyExistsException
argument_list|(
literal|"Label '"
operator|+
name|labelStr
operator|+
literal|"' already exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ordinalCounter
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|LABEL_QUALIFIER
argument_list|,
name|label
argument_list|,
name|LABELS_TABLE_TAGS
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding the label "
operator|+
name|labelStr
argument_list|)
expr_stmt|;
block|}
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ordinalCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mutateLabelsRegion
argument_list|(
name|puts
argument_list|,
name|finalOpStatus
argument_list|)
condition|)
block|{
name|updateZk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|finalOpStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|setAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|authLabels
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|labelsRegion
operator|!=
literal|null
assert|;
name|OperationStatus
index|[]
name|finalOpStatus
init|=
operator|new
name|OperationStatus
index|[
name|authLabels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|authLabels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|auth
range|:
name|authLabels
control|)
block|{
name|String
name|authStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabelOrdinal
argument_list|(
name|authStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelOrdinal
operator|==
literal|0
condition|)
block|{
comment|// This label is not yet added. 1st this should be added to the system
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|FAILURE
argument_list|,
operator|new
name|InvalidLabelException
argument_list|(
literal|"Label '"
operator|+
name|authStr
operator|+
literal|"' doesn't exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|labelOrdinal
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|,
name|DUMMY_VALUE
argument_list|,
name|LABELS_TABLE_TAGS
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mutateLabelsRegion
argument_list|(
name|puts
argument_list|,
name|finalOpStatus
argument_list|)
condition|)
block|{
name|updateZk
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|finalOpStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationStatus
index|[]
name|clearAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|authLabels
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|labelsRegion
operator|!=
literal|null
assert|;
name|OperationStatus
index|[]
name|finalOpStatus
init|=
operator|new
name|OperationStatus
index|[
name|authLabels
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentAuths
decl_stmt|;
if|if
condition|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|group
init|=
name|AuthUtil
operator|.
name|getGroupName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|currentAuths
operator|=
name|this
operator|.
name|getGroupAuths
argument_list|(
operator|new
name|String
index|[]
block|{
name|group
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentAuths
operator|=
name|this
operator|.
name|getUserAuths
argument_list|(
name|user
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Mutation
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|authLabels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|authLabel
range|:
name|authLabels
control|)
block|{
name|String
name|authLabelStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|authLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAuths
operator|.
name|contains
argument_list|(
name|authLabelStr
argument_list|)
condition|)
block|{
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabelOrdinal
argument_list|(
name|authLabelStr
argument_list|)
decl_stmt|;
assert|assert
name|labelOrdinal
operator|>
literal|0
assert|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|labelOrdinal
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This label is not set for the user.
name|finalOpStatus
index|[
name|i
index|]
operator|=
operator|new
name|OperationStatus
argument_list|(
name|OperationStatusCode
operator|.
name|FAILURE
argument_list|,
operator|new
name|InvalidLabelException
argument_list|(
literal|"Label '"
operator|+
name|authLabelStr
operator|+
literal|"' is not set for the user "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mutateLabelsRegion
argument_list|(
name|deletes
argument_list|,
name|finalOpStatus
argument_list|)
condition|)
block|{
name|updateZk
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|finalOpStatus
return|;
block|}
comment|/**    * Adds the mutations to labels region and set the results to the finalOpStatus. finalOpStatus    * might have some entries in it where the OpStatus is FAILURE. We will leave those and set in    * others in the order.    * @param mutations    * @param finalOpStatus    * @return whether we need a ZK update or not.    */
specifier|private
name|boolean
name|mutateLabelsRegion
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|OperationStatus
index|[]
name|finalOpStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|OperationStatus
index|[]
name|opStatus
init|=
name|this
operator|.
name|labelsRegion
operator|.
name|batchMutate
argument_list|(
name|mutations
operator|.
name|toArray
argument_list|(
operator|new
name|Mutation
index|[
name|mutations
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|updateZk
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OperationStatus
name|status
range|:
name|opStatus
control|)
block|{
comment|// Update the zk when atleast one of the mutation was added successfully.
name|updateZk
operator|=
name|updateZk
operator|||
operator|(
name|status
operator|.
name|getOperationStatusCode
argument_list|()
operator|==
name|OperationStatusCode
operator|.
name|SUCCESS
operator|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|finalOpStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|finalOpStatus
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|finalOpStatus
index|[
name|i
index|]
operator|=
name|status
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|updateZk
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUserAuths
parameter_list|(
name|byte
index|[]
name|user
parameter_list|,
name|boolean
name|systemCall
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|labelsRegion
operator|!=
literal|null
operator|||
name|systemCall
operator|)
assert|;
if|if
condition|(
name|systemCall
operator|||
name|labelsRegion
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|labelsCache
operator|.
name|getUserAuths
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|addColumn
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|Filter
name|filter
init|=
name|VisibilityUtils
operator|.
name|createVisibilityLabelFilter
argument_list|(
name|this
operator|.
name|labelsRegion
argument_list|,
operator|new
name|Authorizations
argument_list|(
name|SYSTEM_LABEL
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|auths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|this
operator|.
name|labelsRegion
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|ordinal
init|=
name|CellUtil
operator|.
name|getRowAsInt
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabel
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|auths
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|auths
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroupAuths
parameter_list|(
name|String
index|[]
name|groups
parameter_list|,
name|boolean
name|systemCall
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|labelsRegion
operator|!=
literal|null
operator|||
name|systemCall
operator|)
assert|;
if|if
condition|(
name|systemCall
operator|||
name|labelsRegion
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|labelsCache
operator|.
name|getGroupAuths
argument_list|(
name|groups
argument_list|)
return|;
block|}
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
name|groups
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|s
operator|.
name|addColumn
argument_list|(
name|LABELS_TABLE_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Filter
name|filter
init|=
name|VisibilityUtils
operator|.
name|createVisibilityLabelFilter
argument_list|(
name|this
operator|.
name|labelsRegion
argument_list|,
operator|new
name|Authorizations
argument_list|(
name|SYSTEM_LABEL
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|auths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|this
operator|.
name|labelsRegion
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|ordinal
init|=
name|CellUtil
operator|.
name|getRowAsInt
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabel
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|auths
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|auths
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listLabels
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|labelsRegion
operator|!=
literal|null
operator|)
assert|;
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|labelsAndUserAuths
init|=
name|extractLabelsAndAuths
argument_list|(
name|getExistingLabelsWithAuths
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labels
init|=
name|labelsAndUserAuths
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|labels
operator|.
name|remove
argument_list|(
name|SYSTEM_LABEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|regex
operator|!=
literal|null
condition|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|matchedLabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|label
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|matchedLabels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchedLabels
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Tag
argument_list|>
name|createVisibilityExpTags
parameter_list|(
name|String
name|visExpression
parameter_list|,
name|boolean
name|withSerializationFormat
parameter_list|,
name|boolean
name|checkAuths
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|auths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkAuths
condition|)
block|{
name|User
name|user
init|=
name|VisibilityUtils
operator|.
name|getActiveUser
argument_list|()
decl_stmt|;
name|auths
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|labelsCache
operator|.
name|getUserAuthsAsOrdinals
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|auths
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|labelsCache
operator|.
name|getGroupAuthsAsOrdinals
argument_list|(
name|user
operator|.
name|getGroupNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|VisibilityUtils
operator|.
name|createVisibilityExpTags
argument_list|(
name|visExpression
argument_list|,
name|withSerializationFormat
argument_list|,
name|checkAuths
argument_list|,
name|auths
argument_list|,
name|labelsCache
argument_list|)
return|;
block|}
specifier|protected
name|void
name|updateZk
parameter_list|(
name|boolean
name|labelAddition
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We will add to zookeeper here.
comment|// TODO we should add the delta only to zk. Else this will be a very heavy op and when there are
comment|// so many labels and auth in the system, we will end up adding lots of data to zk. Most
comment|// possibly we will exceed zk node data limit!
name|Pair
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|labelsAndUserAuths
init|=
name|extractLabelsAndAuths
argument_list|(
name|getExistingLabelsWithAuths
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|existingLabels
init|=
name|labelsAndUserAuths
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
init|=
name|labelsAndUserAuths
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|labelAddition
condition|)
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getDataToWriteToZooKeeper
argument_list|(
name|existingLabels
argument_list|)
decl_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|serialized
init|=
name|VisibilityUtils
operator|.
name|getUserAuthsDataToWriteToZooKeeper
argument_list|(
name|userAuths
argument_list|)
decl_stmt|;
name|this
operator|.
name|labelsCache
operator|.
name|writeToZookeeper
argument_list|(
name|serialized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|VisibilityExpEvaluator
name|getVisibilityExpEvaluator
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If a super user issues a get/scan, he should be able to scan the cells
comment|// irrespective of the Visibility labels
if|if
condition|(
name|isReadFromSystemAuthUser
argument_list|()
condition|)
block|{
return|return
operator|new
name|VisibilityExpEvaluator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|authLabels
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ScanLabelGenerator
name|scanLabelGenerator
range|:
name|scanLabelGenerators
control|)
block|{
try|try
block|{
comment|// null authorizations to be handled inside SLG impl.
name|authLabels
operator|=
name|scanLabelGenerator
operator|.
name|getLabels
argument_list|(
name|VisibilityUtils
operator|.
name|getActiveUser
argument_list|()
argument_list|,
name|authorizations
argument_list|)
expr_stmt|;
name|authLabels
operator|=
operator|(
name|authLabels
operator|==
literal|null
operator|)
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
name|authLabels
expr_stmt|;
name|authorizations
operator|=
operator|new
name|Authorizations
argument_list|(
name|authLabels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
name|int
name|labelsCount
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabelsCount
argument_list|()
decl_stmt|;
specifier|final
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
name|labelsCount
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// ordinal is index 1 based
if|if
condition|(
name|authLabels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|authLabel
range|:
name|authLabels
control|)
block|{
name|int
name|labelOrdinal
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabelOrdinal
argument_list|(
name|authLabel
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelOrdinal
operator|!=
literal|0
condition|)
block|{
name|bs
operator|.
name|set
argument_list|(
name|labelOrdinal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|VisibilityExpEvaluator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|visibilityTagPresent
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
name|includeKV
init|=
literal|true
decl_stmt|;
name|Tag
name|tag
init|=
name|tagsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|visibilityTagPresent
operator|=
literal|true
expr_stmt|;
name|int
name|offset
init|=
name|tag
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|result
init|=
name|TagUtil
operator|.
name|readVIntValuePart
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|currLabelOrdinal
init|=
name|result
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|currLabelOrdinal
operator|<
literal|0
condition|)
block|{
comment|// check for the absence of this label in the Scan Auth labels
comment|// ie. to check BitSet corresponding bit is 0
name|int
name|temp
init|=
operator|-
name|currLabelOrdinal
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|get
argument_list|(
name|temp
argument_list|)
condition|)
block|{
name|includeKV
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|bs
operator|.
name|get
argument_list|(
name|currLabelOrdinal
argument_list|)
condition|)
block|{
name|includeKV
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|offset
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|includeKV
condition|)
block|{
comment|// We got one visibility expression getting evaluated to true. Good to include this
comment|// KV in the result then.
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
operator|!
operator|(
name|visibilityTagPresent
operator|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|boolean
name|isReadFromSystemAuthUser
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|VisibilityUtils
operator|.
name|getActiveUser
argument_list|()
decl_stmt|;
return|return
name|havingSystemAuth
argument_list|(
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|havingSystemAuth
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// A super user has 'system' auth.
if|if
condition|(
name|Superusers
operator|.
name|isSuperUser
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// A user can also be explicitly granted 'system' auth.
name|List
argument_list|<
name|String
argument_list|>
name|auths
init|=
name|this
operator|.
name|getUserAuths
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The auths for user "
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" are "
operator|+
name|auths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|auths
operator|.
name|contains
argument_list|(
name|SYSTEM_LABEL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|auths
operator|=
name|this
operator|.
name|getGroupAuths
argument_list|(
name|user
operator|.
name|getGroupNames
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The auths for groups of user "
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" are "
operator|+
name|auths
argument_list|)
expr_stmt|;
block|}
return|return
name|auths
operator|.
name|contains
argument_list|(
name|SYSTEM_LABEL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchVisibility
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|putVisTags
parameter_list|,
name|Byte
name|putTagsFormat
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|deleteVisTags
parameter_list|,
name|Byte
name|deleteTagsFormat
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Early out if there are no tags in both of cell and delete
if|if
condition|(
name|putVisTags
operator|.
name|isEmpty
argument_list|()
operator|&&
name|deleteVisTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Early out if one of the tags is empty
if|if
condition|(
name|putVisTags
operator|.
name|isEmpty
argument_list|()
operator|^
name|deleteVisTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|deleteTagsFormat
operator|!=
literal|null
operator|&&
name|deleteTagsFormat
operator|==
name|SORTED_ORDINAL_SERIALIZATION_FORMAT
operator|)
operator|&&
operator|(
name|putTagsFormat
operator|==
literal|null
operator|||
name|putTagsFormat
operator|==
name|SORTED_ORDINAL_SERIALIZATION_FORMAT
operator|)
condition|)
block|{
if|if
condition|(
name|putTagsFormat
operator|==
literal|null
condition|)
block|{
return|return
name|matchUnSortedVisibilityTags
argument_list|(
name|putVisTags
argument_list|,
name|deleteVisTags
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|matchOrdinalSortedVisibilityTags
argument_list|(
name|putVisTags
argument_list|,
name|deleteVisTags
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected tag format passed for comparison, deleteTagsFormat : "
operator|+
name|deleteTagsFormat
operator|+
literal|", putTagsFormat : "
operator|+
name|putTagsFormat
argument_list|)
throw|;
block|}
comment|/**    * @param putVisTags Visibility tags in Put Mutation    * @param deleteVisTags Visibility tags in Delete Mutation    * @return true when all the visibility tags in Put matches with visibility tags in Delete.    * This is used when, at least one set of tags are not sorted based on the label ordinal.    */
specifier|private
specifier|static
name|boolean
name|matchUnSortedVisibilityTags
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|putVisTags
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|deleteVisTags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|compareTagsOrdinals
argument_list|(
name|sortTagsBasedOnOrdinal
argument_list|(
name|putVisTags
argument_list|)
argument_list|,
name|sortTagsBasedOnOrdinal
argument_list|(
name|deleteVisTags
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param putVisTags Visibility tags in Put Mutation    * @param deleteVisTags Visibility tags in Delete Mutation    * @return true when all the visibility tags in Put matches with visibility tags in Delete.    * This is used when both the set of tags are sorted based on the label ordinal.    */
specifier|private
specifier|static
name|boolean
name|matchOrdinalSortedVisibilityTags
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|putVisTags
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|deleteVisTags
parameter_list|)
block|{
name|boolean
name|matchFound
init|=
literal|false
decl_stmt|;
comment|// If the size does not match. Definitely we are not comparing the equal tags.
if|if
condition|(
operator|(
name|deleteVisTags
operator|.
name|size
argument_list|()
operator|)
operator|==
name|putVisTags
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|deleteVisTags
control|)
block|{
name|matchFound
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Tag
name|givenTag
range|:
name|putVisTags
control|)
block|{
if|if
condition|(
name|TagUtil
operator|.
name|matchingValue
argument_list|(
name|tag
argument_list|,
name|givenTag
argument_list|)
condition|)
block|{
name|matchFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matchFound
condition|)
break|break;
block|}
block|}
return|return
name|matchFound
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortTagsBasedOnOrdinal
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|fullTagsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|getSortedTagOrdinals
argument_list|(
name|fullTagsList
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fullTagsList
return|;
block|}
specifier|private
specifier|static
name|void
name|getSortedTagOrdinals
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|fullTagsList
parameter_list|,
name|Tag
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|tagsOrdinalInSortedOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|tag
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|result
init|=
name|TagUtil
operator|.
name|readVIntValuePart
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|tagsOrdinalInSortedOrder
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tagsOrdinalInSortedOrder
argument_list|)
expr_stmt|;
name|fullTagsList
operator|.
name|add
argument_list|(
name|tagsOrdinalInSortedOrder
argument_list|)
expr_stmt|;
block|}
comment|/*    * @return true when all the visibility tags in Put matches with visibility tags in Delete.    */
specifier|private
specifier|static
name|boolean
name|compareTagsOrdinals
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|putVisTags
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|deleteVisTags
parameter_list|)
block|{
name|boolean
name|matchFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|deleteVisTags
operator|.
name|size
argument_list|()
operator|==
name|putVisTags
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|deleteTagOrdinals
range|:
name|deleteVisTags
control|)
block|{
name|matchFound
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|tagOrdinals
range|:
name|putVisTags
control|)
block|{
if|if
condition|(
name|deleteTagOrdinals
operator|.
name|equals
argument_list|(
name|tagOrdinals
argument_list|)
condition|)
block|{
name|matchFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matchFound
condition|)
break|break;
block|}
block|}
return|return
name|matchFound
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|encodeVisibilityForReplication
parameter_list|(
specifier|final
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|,
specifier|final
name|Byte
name|serializationFormat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tags
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|serializationFormat
operator|==
literal|null
operator|||
name|serializationFormat
operator|==
name|SORTED_ORDINAL_SERIALIZATION_FORMAT
operator|)
condition|)
block|{
return|return
name|createModifiedVisExpression
argument_list|(
name|tags
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param tags    *          - all the visibility tags associated with the current Cell    * @return - the modified visibility expression as byte[]    */
specifier|private
name|byte
index|[]
name|createModifiedVisExpression
parameter_list|(
specifier|final
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|visibilityString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
if|if
condition|(
name|visibilityString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|CLOSED_PARAN
argument_list|)
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|tag
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|boolean
name|expressionStart
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|result
init|=
name|TagUtil
operator|.
name|readVIntValuePart
argument_list|(
name|tag
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|currLabelOrdinal
init|=
name|result
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|currLabelOrdinal
operator|<
literal|0
condition|)
block|{
name|int
name|temp
init|=
operator|-
name|currLabelOrdinal
decl_stmt|;
name|String
name|label
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabel
argument_list|(
name|temp
argument_list|)
decl_stmt|;
if|if
condition|(
name|expressionStart
condition|)
block|{
comment|// Quote every label in case of unicode characters if present
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|OPEN_PARAN
argument_list|)
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|NOT_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|NOT_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|label
init|=
name|this
operator|.
name|labelsCache
operator|.
name|getLabel
argument_list|(
name|currLabelOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|expressionStart
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|OPEN_PARAN
argument_list|)
operator|.
name|append
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|AND_OPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|expressionStart
operator|=
literal|false
expr_stmt|;
name|offset
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|visibilityString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|visibilityString
operator|.
name|append
argument_list|(
name|VisibilityConstants
operator|.
name|CLOSED_PARAN
argument_list|)
expr_stmt|;
comment|// Return the string formed as byte[]
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|visibilityString
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

