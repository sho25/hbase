begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStates
operator|.
name|RegionStateNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|normalizer
operator|.
name|NormalizationPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|AbstractStateMachineRegionProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|SplitTableRegionState
import|;
end_import

begin_comment
comment|/**  * The procedure to split a region in a table.  * Takes lock on the parent region.  * It holds the lock for the life of the procedure.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitTableRegionProcedure
extends|extends
name|AbstractStateMachineRegionProcedure
argument_list|<
name|SplitTableRegionState
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitTableRegionProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Boolean
name|traceEnabled
init|=
literal|null
decl_stmt|;
specifier|private
name|RegionInfo
name|daughter_1_RI
decl_stmt|;
specifier|private
name|RegionInfo
name|daughter_2_RI
decl_stmt|;
specifier|private
name|byte
index|[]
name|bestSplitRow
decl_stmt|;
specifier|private
name|RegionSplitPolicy
name|splitPolicy
decl_stmt|;
specifier|public
name|SplitTableRegionProcedure
parameter_list|()
block|{
comment|// Required by the Procedure framework to create the procedure on replay
block|}
specifier|public
name|SplitTableRegionProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|RegionInfo
name|regionToSplit
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|env
argument_list|,
name|regionToSplit
argument_list|)
expr_stmt|;
name|this
operator|.
name|bestSplitRow
operator|=
name|splitRow
expr_stmt|;
name|checkSplittable
argument_list|(
name|env
argument_list|,
name|regionToSplit
argument_list|,
name|bestSplitRow
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|table
init|=
name|regionToSplit
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|long
name|rid
init|=
name|getDaughterRegionIdTimestamp
argument_list|(
name|regionToSplit
argument_list|)
decl_stmt|;
name|this
operator|.
name|daughter_1_RI
operator|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|regionToSplit
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|bestSplitRow
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|rid
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|daughter_2_RI
operator|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|bestSplitRow
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|regionToSplit
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|rid
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|TableDescriptor
name|htd
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|.
name|getRegionSplitPolicyClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Since we don't have region reference here, creating the split policy instance without it.
comment|// This can be used to invoke methods which don't require Region reference. This instantiation
comment|// of a class on Master-side though it only makes sense on the RegionServer-side is
comment|// for Phoenix Local Indexing. Refer HBASE-12583 for more information.
name|Class
argument_list|<
name|?
extends|extends
name|RegionSplitPolicy
argument_list|>
name|clazz
init|=
name|RegionSplitPolicy
operator|.
name|getSplitPolicyClass
argument_list|(
name|htd
argument_list|,
name|env
operator|.
name|getMasterConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|splitPolicy
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|env
operator|.
name|getMasterConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check whether the region is splittable    * @param env MasterProcedureEnv    * @param regionToSplit parent Region to be split    * @param splitRow if splitRow is not specified, will first try to get bestSplitRow from RS    * @throws IOException    */
specifier|private
name|void
name|checkSplittable
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|RegionInfo
name|regionToSplit
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ask the remote RS if this region is splittable.
comment|// If we get an IOE, report it along w/ the failure so can see why we are not splittable at this time.
if|if
condition|(
name|regionToSplit
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't invoke split on non-default regions directly"
argument_list|)
throw|;
block|}
name|RegionStateNode
name|node
init|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|getParentRegion
argument_list|()
argument_list|)
decl_stmt|;
name|IOException
name|splittableCheckIOE
init|=
literal|null
decl_stmt|;
name|boolean
name|splittable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|bestSplitRow
operator|==
literal|null
operator|||
name|bestSplitRow
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"splitKey isn't explicitly specified, "
operator|+
literal|" will try to find a best split key from RS"
argument_list|)
expr_stmt|;
block|}
comment|// Always set bestSplitRow request as true here,
comment|// need to call Region#checkSplit to check it splittable or not
name|GetRegionInfoResponse
name|response
init|=
name|Util
operator|.
name|getRegionInfoResponse
argument_list|(
name|env
argument_list|,
name|node
operator|.
name|getRegionLocation
argument_list|()
argument_list|,
name|node
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestSplitRow
operator|==
literal|null
operator|||
name|bestSplitRow
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|bestSplitRow
operator|=
name|response
operator|.
name|hasBestSplitRow
argument_list|()
condition|?
name|response
operator|.
name|getBestSplitRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|splittable
operator|=
name|response
operator|.
name|hasSplittable
argument_list|()
operator|&&
name|response
operator|.
name|getSplittable
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splittable="
operator|+
name|splittable
operator|+
literal|" "
operator|+
name|node
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|splittableCheckIOE
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|splittable
condition|)
block|{
name|IOException
name|e
init|=
operator|new
name|IOException
argument_list|(
name|regionToSplit
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" NOT splittable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splittableCheckIOE
operator|!=
literal|null
condition|)
name|e
operator|.
name|initCause
argument_list|(
name|splittableCheckIOE
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|bestSplitRow
operator|==
literal|null
operator|||
name|bestSplitRow
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Region not splittable because bestSplitPoint = null, "
operator|+
literal|"maybe table is too small for auto split. For force split, try specifying split row"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionToSplit
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|bestSplitRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Split row is equal to startkey: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitRow
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionToSplit
operator|.
name|containsRow
argument_list|(
name|bestSplitRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Split row is not inside region key range splitKey:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitRow
argument_list|)
operator|+
literal|" region: "
operator|+
name|regionToSplit
argument_list|)
throw|;
block|}
block|}
comment|/**    * Calculate daughter regionid to use.    * @param hri Parent {@link RegionInfo}    * @return Daughter region id (timestamp) to use.    */
specifier|private
specifier|static
name|long
name|getDaughterRegionIdTimestamp
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|)
block|{
name|long
name|rid
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Regionid is timestamp.  Can't be less than that of parent else will insert
comment|// at wrong location in hbase:meta (See HBASE-710).
if|if
condition|(
name|rid
operator|<
name|hri
operator|.
name|getRegionId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clock skew; parent regions id is "
operator|+
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|" but current time here is "
operator|+
name|rid
argument_list|)
expr_stmt|;
name|rid
operator|=
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|rid
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" execute state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_PREPARE
case|:
if|if
condition|(
name|prepareSplitRegion
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
block|}
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION
case|:
name|preSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
case|:
name|addChildProcedure
argument_list|(
name|createUnassignProcedures
argument_list|(
name|env
argument_list|,
name|getRegionReplication
argument_list|(
name|env
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
case|:
name|createDaughterRegions
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META
case|:
name|preSplitRegionBeforeMETA
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_UPDATE_META
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
name|updateMetaForDaughterRegions
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META
case|:
name|preSplitRegionAfterMETA
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
name|addChildProcedure
argument_list|(
name|createAssignProcedures
argument_list|(
name|env
argument_list|,
name|getRegionReplication
argument_list|(
name|env
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_POST_OPERATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
name|postSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error trying to split region "
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in the table "
operator|+
name|getTableName
argument_list|()
operator|+
literal|" (in state="
operator|+
name|state
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
operator|!
name|isRollbackSupported
argument_list|(
name|state
argument_list|)
condition|)
block|{
comment|// We reach a state that cannot be rolled back. We just need to keep retry.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setFailure
argument_list|(
literal|"master-split-regions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if split fails,  need to call ((HRegion)parent).clearSplit() when it is a force split
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
comment|/**    * To rollback {@link SplitTableRegionProcedure}, an AssignProcedure is asynchronously    * submitted for parent region to be split (rollback doesn't wait on the completion of the    * AssignProcedure) . This can be improved by changing rollback() to support sub-procedures.    * See HBASE-19851 for details.    */
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" rollback state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META
case|:
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
comment|// PONR
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META
case|:
break|break;
case|case
name|SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS
case|:
comment|// Doing nothing, as re-open parent region would clean up daughter region directories.
break|break;
case|case
name|SPLIT_TABLE_REGION_CLOSE_PARENT_REGION
case|:
name|openParentRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION
case|:
name|postRollBackSplitRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPLIT_TABLE_REGION_PREPARE
case|:
break|break;
comment|// nothing to do
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// This will be retried. Unless there is a bug in the code,
comment|// this should be just a "temporary error" (e.g. network down)
name|LOG
operator|.
name|warn
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" failed rollback attempt step "
operator|+
name|state
operator|+
literal|" for splitting the region "
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in table "
operator|+
name|getTableName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/*    * Check whether we are in the state that can be rollback    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isRollbackSupported
parameter_list|(
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SPLIT_TABLE_REGION_POST_OPERATION
case|:
case|case
name|SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS
case|:
case|case
name|SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META
case|:
case|case
name|SPLIT_TABLE_REGION_UPDATE_META
case|:
comment|// It is not safe to rollback if we reach to these states.
return|return
literal|false
return|;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SplitTableRegionState
name|getState
parameter_list|(
specifier|final
name|int
name|stateId
parameter_list|)
block|{
return|return
name|SplitTableRegionState
operator|.
name|forNumber
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
specifier|final
name|SplitTableRegionState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SplitTableRegionState
name|getInitialState
parameter_list|()
block|{
return|return
name|SplitTableRegionState
operator|.
name|SPLIT_TABLE_REGION_PREPARE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
specifier|final
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|Builder
name|splitTableRegionMsg
init|=
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|MasterProcedureUtil
operator|.
name|toProtoUserInfo
argument_list|(
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setParentRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|getRegion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addChildRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|daughter_1_RI
argument_list|)
argument_list|)
operator|.
name|addChildRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|daughter_2_RI
argument_list|)
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|splitTableRegionMsg
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
specifier|final
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
name|splitTableRegionsMsg
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|MasterProcedureProtos
operator|.
name|SplitTableRegionStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUser
argument_list|(
name|MasterProcedureUtil
operator|.
name|toUserInfo
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setRegion
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getParentRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfoCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|daughter_1_RI
operator|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|daughter_2_RI
operator|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|splitTableRegionsMsg
operator|.
name|getChildRegionInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" table="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", parent="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getParentRegion
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", daughterA="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|daughter_1_RI
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", daughterB="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|daughter_2_RI
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RegionInfo
name|getParentRegion
parameter_list|()
block|{
return|return
name|getRegion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|REGION_SPLIT
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProcedureMetrics
name|getProcedureMetrics
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getSplitProcMetrics
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|getSplitRow
parameter_list|()
block|{
return|return
name|daughter_2_RI
operator|.
name|getStartKey
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|State
index|[]
name|EXPECTED_SPLIT_STATES
init|=
operator|new
name|State
index|[]
block|{
name|State
operator|.
name|OPEN
block|,
name|State
operator|.
name|CLOSED
block|}
decl_stmt|;
comment|/**    * Prepare to Split region.    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|boolean
name|prepareSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether the region is splittable
name|RegionStateNode
name|node
init|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|getParentRegion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|getParentRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|RegionInfo
name|parentHRI
init|=
name|node
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentHRI
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unsplittable; parent region is null; node={}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Lookup the parent HRI state from the AM, which has the latest updated info.
comment|// Protect against the case where concurrent SPLIT requests came in and succeeded
comment|// just before us.
if|if
condition|(
name|node
operator|.
name|isInState
argument_list|(
name|State
operator|.
name|SPLIT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split of "
operator|+
name|parentHRI
operator|+
literal|" skipped; state is already SPLIT"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parentHRI
operator|.
name|isSplit
argument_list|()
operator|||
name|parentHRI
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split of "
operator|+
name|parentHRI
operator|+
literal|" skipped because offline/split."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// expected parent to be online or closed
if|if
condition|(
operator|!
name|node
operator|.
name|isInState
argument_list|(
name|EXPECTED_SPLIT_STATES
argument_list|)
condition|)
block|{
comment|// We may have SPLIT already?
name|setFailure
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Split "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" FAILED because state="
operator|+
name|node
operator|.
name|getState
argument_list|()
operator|+
literal|"; expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|EXPECTED_SPLIT_STATES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Since we have the lock and the master is coordinating the operation
comment|// we are always able to split the region
if|if
condition|(
operator|!
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" split switch is off! skip split of "
operator|+
name|parentHRI
argument_list|)
expr_stmt|;
name|setFailure
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Split region "
operator|+
name|parentHRI
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" failed due to split switch off"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// set node state as SPLITTING
name|node
operator|.
name|setState
argument_list|(
name|State
operator|.
name|SPLITTING
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Action before splitting region in a table.    * @param env MasterProcedureEnv    * @throws IOException    * @throws InterruptedException    */
specifier|private
name|void
name|preSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSplitRegionAction
argument_list|(
name|getTableName
argument_list|()
argument_list|,
name|getSplitRow
argument_list|()
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Clean up split and merge. Currently all over the place.
comment|// Notify QuotaManager and RegionNormalizer
try|try
block|{
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|onRegionSplit
argument_list|(
name|this
operator|.
name|getParentRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionNormalizer
argument_list|()
operator|.
name|planSkipped
argument_list|(
name|this
operator|.
name|getParentRegion
argument_list|()
argument_list|,
name|NormalizationPlan
operator|.
name|PlanType
operator|.
name|SPLIT
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Action after rollback a split table region action.    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|postRollBackSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postRollBackSplitRegionAction
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rollback close parent region    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|openParentRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether the region is closed; if so, open it in the same server
specifier|final
name|int
name|regionReplication
init|=
name|getRegionReplication
argument_list|(
name|env
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|serverName
init|=
name|getParentRegionServerName
argument_list|(
name|env
argument_list|)
decl_stmt|;
specifier|final
name|AssignProcedure
index|[]
name|procs
init|=
operator|new
name|AssignProcedure
index|[
name|regionReplication
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionReplication
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|RegionInfo
name|hri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|getParentRegion
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|procs
index|[
name|i
index|]
operator|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createAssignProcedure
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedures
argument_list|(
name|procs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create daughter regions    * @param env MasterProcedureEnv    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|createDaughterRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterFileSystem
name|mfs
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|mfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|env
operator|.
name|getMasterConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tabledir
argument_list|,
name|getParentRegion
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|regionFs
operator|.
name|createSplitsDir
argument_list|()
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|expectedReferences
init|=
name|splitStoreFiles
argument_list|(
name|env
argument_list|,
name|regionFs
argument_list|)
decl_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regionFs
operator|.
name|getSplitsDir
argument_list|(
name|daughter_1_RI
argument_list|)
argument_list|)
expr_stmt|;
comment|//Move the files from the temporary .splits to the final /table/region directory
name|regionFs
operator|.
name|commitDaughterRegion
argument_list|(
name|daughter_1_RI
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getFirst
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|daughter_1_RI
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getSecond
argument_list|()
argument_list|,
name|regionFs
operator|.
name|getSplitsDir
argument_list|(
name|daughter_2_RI
argument_list|)
argument_list|)
expr_stmt|;
name|regionFs
operator|.
name|commitDaughterRegion
argument_list|(
name|daughter_2_RI
argument_list|)
expr_stmt|;
name|assertReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|expectedReferences
operator|.
name|getSecond
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|daughter_2_RI
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create Split directory    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|splitStoreFiles
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterFileSystem
name|mfs
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
decl_stmt|;
comment|// The following code sets up a thread pool executor with as many slots as
comment|// there's files to split. It then fires up everything, waits for
comment|// completion and finally checks for any exception
comment|//
comment|// Note: splitStoreFiles creates daughter region dirs under the parent splits dir
comment|// Nothing to unroll here if failure -- re-run createSplitsDir will
comment|// clean this up.
name|int
name|nbFiles
init|=
literal|0
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
argument_list|>
name|files
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
argument_list|>
argument_list|(
name|regionFs
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|regionFs
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|sfis
init|=
name|regionFs
operator|.
name|getStoreFiles
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|sfis
operator|==
literal|null
condition|)
continue|continue;
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|filteredSfis
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StoreFileInfo
name|sfi
range|:
name|sfis
control|)
block|{
comment|// Filter. There is a lag cleaning up compacted reference files. They get cleared
comment|// after a delay in case outstanding Scanners still have references. Because of this,
comment|// the listing of the Store content may have straggler reference files. Skip these.
comment|// It should be safe to skip references at this point because we checked above with
comment|// the region if it thinks it is splittable and if we are here, it thinks it is
comment|// splitable.
if|if
condition|(
name|sfi
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping split of "
operator|+
name|sfi
operator|+
literal|"; presuming ready for archiving."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|filteredSfis
operator|==
literal|null
condition|)
block|{
name|filteredSfis
operator|=
operator|new
name|ArrayList
argument_list|<
name|StoreFileInfo
argument_list|>
argument_list|(
name|sfis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|filteredSfis
argument_list|)
expr_stmt|;
block|}
name|filteredSfis
operator|.
name|add
argument_list|(
name|sfi
argument_list|)
expr_stmt|;
name|nbFiles
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nbFiles
operator|==
literal|0
condition|)
block|{
comment|// no file needs to be splitted.
return|return
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// Max #threads is the smaller of the number of storefiles or the default max determined above.
name|int
name|maxThreads
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGION_SPLIT_THREADS_MAX
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|,
name|HStore
operator|.
name|DEFAULT_BLOCKING_STOREFILE_COUNT
argument_list|)
argument_list|)
argument_list|,
name|nbFiles
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" splitting "
operator|+
name|nbFiles
operator|+
literal|" storefiles, region="
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|", threads="
operator|+
name|maxThreads
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|maxThreads
argument_list|,
name|Threads
operator|.
name|getNamedThreadFactory
argument_list|(
literal|"StoreFileSplitter-%1$d"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|nbFiles
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Split each store file.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
argument_list|>
name|e
range|:
name|files
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ColumnFamilyDescriptor
name|hcd
init|=
name|htd
operator|.
name|getColumnFamily
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeFiles
operator|!=
literal|null
operator|&&
name|storeFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|hcd
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFileInfo
name|storeFileInfo
range|:
name|storeFiles
control|)
block|{
name|StoreFileSplitter
name|sfs
init|=
operator|new
name|StoreFileSplitter
argument_list|(
name|regionFs
argument_list|,
name|familyName
argument_list|,
operator|new
name|HStoreFile
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|storeFileInfo
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|hcd
operator|.
name|getBloomFilterType
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|threadPool
operator|.
name|submit
argument_list|(
name|sfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Shutdown the pool
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait for all the tasks to finish.
comment|// When splits ran on the RegionServer, how-long-to-wait-configuration was named
comment|// hbase.regionserver.fileSplitTimeout. If set, use its value.
name|long
name|fileSplitTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.fileSplitTimeout"
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.fileSplitTimeout"
argument_list|,
literal|600000
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|stillRunning
init|=
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
name|fileSplitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|stillRunning
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// wait for the thread to shutdown completely.
while|while
condition|(
operator|!
name|threadPool
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Took too long to split the"
operator|+
literal|" files and create the references, aborting split"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|daughterA
init|=
literal|0
decl_stmt|;
name|int
name|daughterB
init|=
literal|0
decl_stmt|;
comment|// Look for any exception
for|for
control|(
name|Future
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|p
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|daughterA
operator|+=
name|p
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|daughterB
operator|+=
name|p
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" split storefiles for region "
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" Daughter A: "
operator|+
name|daughterA
operator|+
literal|" storefiles, Daughter B: "
operator|+
name|daughterB
operator|+
literal|" storefiles."
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|daughterA
argument_list|,
name|daughterB
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertReferenceFileCount
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|int
name|expectedReferenceFileCount
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expectedReferenceFileCount
operator|!=
literal|0
operator|&&
name|expectedReferenceFileCount
operator|!=
name|FSUtils
operator|.
name|getRegionReferenceFileCount
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failing split. Expected reference file count isn't equal."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|splitStoreFile
parameter_list|(
name|HRegionFileSystem
name|regionFs
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|HStoreFile
name|sf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" splitting started for store file: "
operator|+
name|sf
operator|.
name|getPath
argument_list|()
operator|+
literal|" for region: "
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|splitRow
init|=
name|getSplitRow
argument_list|()
decl_stmt|;
specifier|final
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path_first
init|=
name|regionFs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|daughter_1_RI
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|splitRow
argument_list|,
literal|false
argument_list|,
name|splitPolicy
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path_second
init|=
name|regionFs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|daughter_2_RI
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|splitRow
argument_list|,
literal|true
argument_list|,
name|splitPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" splitting complete for store file: "
operator|+
name|sf
operator|.
name|getPath
argument_list|()
operator|+
literal|" for region: "
operator|+
name|getParentRegion
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|(
name|path_first
argument_list|,
name|path_second
argument_list|)
return|;
block|}
comment|/**    * Utility class used to do the file splitting / reference writing    * in parallel instead of sequentially.    */
specifier|private
class|class
name|StoreFileSplitter
implements|implements
name|Callable
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|HRegionFileSystem
name|regionFs
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
specifier|final
name|HStoreFile
name|sf
decl_stmt|;
comment|/**      * Constructor that takes what it needs to split      * @param regionFs the file system      * @param family Family that contains the store file      * @param sf which file      */
specifier|public
name|StoreFileSplitter
parameter_list|(
name|HRegionFileSystem
name|regionFs
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|HStoreFile
name|sf
parameter_list|)
block|{
name|this
operator|.
name|regionFs
operator|=
name|regionFs
expr_stmt|;
name|this
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|family
argument_list|,
name|sf
argument_list|)
return|;
block|}
block|}
comment|/**    * Post split region actions before the Point-of-No-Return step    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|preSplitRegionBeforeMETA
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSplitBeforeMETAAction
argument_list|(
name|getSplitRow
argument_list|()
argument_list|,
name|metaEntries
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Mutation
name|p
range|:
name|metaEntries
control|)
block|{
name|RegionInfo
operator|.
name|parseRegionName
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"pid="
operator|+
name|getProcId
argument_list|()
operator|+
literal|" row key of mutation from coprocessor not parsable as "
operator|+
literal|"region name."
operator|+
literal|"Mutations from coprocessor should only for hbase:meta table."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Add daughter regions to META    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|updateMetaForDaughterRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|markRegionAsSplit
argument_list|(
name|getParentRegion
argument_list|()
argument_list|,
name|getParentRegionServerName
argument_list|(
name|env
argument_list|)
argument_list|,
name|daughter_1_RI
argument_list|,
name|daughter_2_RI
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pre split region actions after the Point-of-No-Return step    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|preSplitRegionAfterMETA
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSplitAfterMETAAction
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Post split region actions    * @param env MasterProcedureEnv    **/
specifier|private
name|void
name|postSplitRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCompletedSplitRegionAction
argument_list|(
name|daughter_1_RI
argument_list|,
name|daughter_2_RI
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ServerName
name|getParentRegionServerName
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|getParentRegion
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|UnassignProcedure
index|[]
name|createUnassignProcedures
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|int
name|regionReplication
parameter_list|)
block|{
specifier|final
name|UnassignProcedure
index|[]
name|procs
init|=
operator|new
name|UnassignProcedure
index|[
name|regionReplication
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|RegionInfo
name|hri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|getParentRegion
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|procs
index|[
name|i
index|]
operator|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createUnassignProcedure
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
operator|!
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|procs
return|;
block|}
specifier|private
name|AssignProcedure
index|[]
name|createAssignProcedures
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|int
name|regionReplication
parameter_list|)
block|{
specifier|final
name|ServerName
name|targetServer
init|=
name|getParentRegionServerName
argument_list|(
name|env
argument_list|)
decl_stmt|;
specifier|final
name|AssignProcedure
index|[]
name|procs
init|=
operator|new
name|AssignProcedure
index|[
name|regionReplication
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|procsIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionReplication
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|RegionInfo
name|hri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|daughter_1_RI
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|procs
index|[
name|procsIdx
operator|++
index|]
operator|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createAssignProcedure
argument_list|(
name|hri
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionReplication
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|RegionInfo
name|hri
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|daughter_2_RI
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|procs
index|[
name|procsIdx
operator|++
index|]
operator|=
name|env
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|createAssignProcedure
argument_list|(
name|hri
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
block|}
return|return
name|procs
return|;
block|}
specifier|private
name|int
name|getRegionReplication
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TableDescriptor
name|htd
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|htd
operator|.
name|getRegionReplication
argument_list|()
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @return traceEnabled    */
specifier|private
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
if|if
condition|(
name|traceEnabled
operator|==
literal|null
condition|)
block|{
name|traceEnabled
operator|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
expr_stmt|;
block|}
return|return
name|traceEnabled
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
comment|// Abort means rollback. We can't rollback all steps. HBASE-18018 added abort to all
comment|// Procedures. Here is a Procedure that has a PONR and cannot be aborted wants it enters this
comment|// range of steps; what do we do for these should an operator want to cancel them? HBASE-20022.
return|return
name|isRollbackSupported
argument_list|(
name|getCurrentState
argument_list|()
argument_list|)
condition|?
name|super
operator|.
name|abort
argument_list|(
name|env
argument_list|)
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

