begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Simple rate limiter.  *  * Usage Example:  *   RateLimiter limiter = new RateLimiter(); // At this point you have a unlimited resource limiter  *   limiter.set(10, TimeUnit.SECONDS);       // set 10 resources/sec  *  *   long lastTs = 0;             // You need to keep track of the last update timestamp  *   while (true) {  *     long now = System.currentTimeMillis();  *  *     // call canExecute before performing resource consuming operation  *     bool canExecute = limiter.canExecute(now, lastTs);  *     // If there are no available resources, wait until one is available  *     if (!canExecute) Thread.sleep(limiter.waitInterval());  *     // ...execute the work and consume the resource...  *     limiter.consume();  *   }  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RateLimiter
block|{
specifier|private
name|long
name|tunit
init|=
literal|1000
decl_stmt|;
comment|// Timeunit factor for translating to ms.
specifier|private
name|long
name|limit
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// The max value available resource units can be refilled to.
specifier|private
name|long
name|avail
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Currently available resource units
specifier|public
name|RateLimiter
parameter_list|()
block|{   }
comment|/**    * Set the RateLimiter max available resources and refill period.    * @param limit The max value available resource units can be refilled to.    * @param timeUnit Timeunit factor for translating to ms.    */
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|long
name|limit
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
switch|switch
condition|(
name|timeUnit
condition|)
block|{
case|case
name|NANOSECONDS
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported NANOSECONDS TimeUnit"
argument_list|)
throw|;
case|case
name|MICROSECONDS
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported MICROSECONDS TimeUnit"
argument_list|)
throw|;
case|case
name|MILLISECONDS
case|:
name|tunit
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SECONDS
case|:
name|tunit
operator|=
literal|1000
expr_stmt|;
break|break;
case|case
name|MINUTES
case|:
name|tunit
operator|=
literal|60
operator|*
literal|1000
expr_stmt|;
break|break;
case|case
name|HOURS
case|:
name|tunit
operator|=
literal|60
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
break|break;
case|case
name|DAYS
case|:
name|tunit
operator|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
break|break;
block|}
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|avail
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|limit
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|"RateLimiter(Bypass)"
return|;
block|}
return|return
literal|"RateLimiter(avail="
operator|+
name|avail
operator|+
literal|" limit="
operator|+
name|limit
operator|+
literal|" tunit="
operator|+
name|tunit
operator|+
literal|")"
return|;
block|}
comment|/**    * Sets the current instance of RateLimiter to a new values.    *    * if current limit is smaller than the new limit, bump up the available resources.    * Otherwise allow clients to use up the previously available resources.    */
specifier|public
specifier|synchronized
name|void
name|update
parameter_list|(
specifier|final
name|RateLimiter
name|other
parameter_list|)
block|{
name|this
operator|.
name|tunit
operator|=
name|other
operator|.
name|tunit
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|limit
operator|<
name|other
operator|.
name|limit
condition|)
block|{
name|this
operator|.
name|avail
operator|+=
operator|(
name|other
operator|.
name|limit
operator|-
name|this
operator|.
name|limit
operator|)
expr_stmt|;
block|}
name|this
operator|.
name|limit
operator|=
name|other
operator|.
name|limit
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isBypass
parameter_list|()
block|{
return|return
name|limit
operator|==
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|getAvailable
parameter_list|()
block|{
return|return
name|avail
return|;
block|}
comment|/**    * given the time interval, is there at least one resource available to allow execution?    * @param now the current timestamp    * @param lastTs the timestamp of the last update    * @return true if there is at least one resource available, otherwise false    */
specifier|public
name|boolean
name|canExecute
parameter_list|(
specifier|final
name|long
name|now
parameter_list|,
specifier|final
name|long
name|lastTs
parameter_list|)
block|{
return|return
name|canExecute
argument_list|(
name|now
argument_list|,
name|lastTs
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * given the time interval, are there enough available resources to allow execution?    * @param now the current timestamp    * @param lastTs the timestamp of the last update    * @param amount the number of required resources    * @return true if there are enough available resources, otherwise false    */
specifier|public
specifier|synchronized
name|boolean
name|canExecute
parameter_list|(
specifier|final
name|long
name|now
parameter_list|,
specifier|final
name|long
name|lastTs
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|)
block|{
return|return
name|avail
operator|>=
name|amount
condition|?
literal|true
else|:
name|refill
argument_list|(
name|now
argument_list|,
name|lastTs
argument_list|)
operator|>=
name|amount
return|;
block|}
comment|/**    * consume one available unit.    */
specifier|public
name|void
name|consume
parameter_list|()
block|{
name|consume
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * consume amount available units.    * @param amount the number of units to consume    */
specifier|public
specifier|synchronized
name|void
name|consume
parameter_list|(
specifier|final
name|long
name|amount
parameter_list|)
block|{
name|this
operator|.
name|avail
operator|-=
name|amount
expr_stmt|;
block|}
comment|/**    * @return estimate of the ms required to wait before being able to provide 1 resource.    */
specifier|public
name|long
name|waitInterval
parameter_list|()
block|{
return|return
name|waitInterval
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * @return estimate of the ms required to wait before being able to provide "amount" resources.    */
specifier|public
specifier|synchronized
name|long
name|waitInterval
parameter_list|(
specifier|final
name|long
name|amount
parameter_list|)
block|{
comment|// TODO Handle over quota?
return|return
operator|(
name|amount
operator|<=
name|avail
operator|)
condition|?
literal|0
else|:
operator|(
operator|(
name|amount
operator|*
name|tunit
operator|)
operator|/
name|limit
operator|)
operator|-
operator|(
operator|(
name|avail
operator|*
name|tunit
operator|)
operator|/
name|limit
operator|)
return|;
block|}
comment|/**    * given the specified time interval, refill the avilable units to the proportionate    * to elapsed time or to the prespecified limit.    */
specifier|private
name|long
name|refill
parameter_list|(
specifier|final
name|long
name|now
parameter_list|,
specifier|final
name|long
name|lastTs
parameter_list|)
block|{
name|long
name|delta
init|=
operator|(
name|limit
operator|*
operator|(
name|now
operator|-
name|lastTs
operator|)
operator|)
operator|/
name|tunit
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|avail
operator|=
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|avail
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
return|return
name|avail
return|;
block|}
block|}
end_class

end_unit

