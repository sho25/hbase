begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * Reference all the hfiles in a region for a snapshot.  *<p>  * Doesn't take into acccount if the hfiles are valid or not, just keeps track of what's in the  * region's directory.  */
end_comment

begin_class
specifier|public
class|class
name|ReferenceRegionHFilesTask
extends|extends
name|SnapshotTask
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReferenceRegionHFilesTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|regiondir
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|PathFilter
name|fileFilter
decl_stmt|;
specifier|private
specifier|final
name|Path
name|snapshotDir
decl_stmt|;
comment|/**    * Reference all the files in the given region directory    * @param snapshot snapshot for which to add references    * @param monitor to check/send error    * @param regionDir region directory to look for errors    * @param fs {@link FileSystem} where the snapshot/region live    * @param regionSnapshotDir directory in the snapshot to store region files    */
specifier|public
name|ReferenceRegionHFilesTask
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
name|ForeignExceptionDispatcher
name|monitor
parameter_list|,
name|Path
name|regionDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|Path
name|regionSnapshotDir
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|regiondir
operator|=
name|regionDir
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|fileFilter
operator|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|isFile
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reach fs to check file:"
operator|+
name|path
operator|+
literal|", marking as not file"
argument_list|)
expr_stmt|;
name|ReferenceRegionHFilesTask
operator|.
name|this
operator|.
name|snapshotFailure
argument_list|(
literal|"Failed to reach fs to check file status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
expr_stmt|;
name|this
operator|.
name|snapshotDir
operator|=
name|regionSnapshotDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|families
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|regiondir
argument_list|,
operator|new
name|FSUtils
operator|.
name|FamilyDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// if no families, then we are done again
if|if
condition|(
name|families
operator|==
literal|null
operator|||
name|families
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No families under region directory:"
operator|+
name|regiondir
operator|+
literal|", not attempting to add references."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// snapshot directories to store the hfile reference
name|List
argument_list|<
name|Path
argument_list|>
name|snapshotFamilyDirs
init|=
name|TakeSnapshotUtils
operator|.
name|getFamilySnapshotDirectories
argument_list|(
name|snapshot
argument_list|,
name|snapshotDir
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add hfile references to snapshot directories:"
operator|+
name|snapshotFamilyDirs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
name|family
init|=
name|families
index|[
name|i
index|]
decl_stmt|;
name|Path
name|familyDir
init|=
name|family
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// get all the hfiles in the family
name|FileStatus
index|[]
name|hfiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|familyDir
argument_list|,
name|fileFilter
argument_list|)
decl_stmt|;
comment|// if no hfiles, then we are done with this family
if|if
condition|(
name|hfiles
operator|==
literal|null
operator|||
name|hfiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not hfiles found for family: "
operator|+
name|familyDir
operator|+
literal|", skipping."
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// make the snapshot's family directory
name|Path
name|snapshotFamilyDir
init|=
name|snapshotFamilyDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|snapshotFamilyDir
argument_list|)
expr_stmt|;
comment|// create a reference for each hfile
for|for
control|(
name|FileStatus
name|hfile
range|:
name|hfiles
control|)
block|{
comment|// references are 0-length files, relying on file name.
name|Path
name|referenceFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotFamilyDir
argument_list|,
name|hfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating reference for:"
operator|+
name|hfile
operator|.
name|getPath
argument_list|()
operator|+
literal|" at "
operator|+
name|referenceFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|createNewFile
argument_list|(
name|referenceFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create reference file:"
operator|+
name|referenceFile
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished referencing hfiles, current region state:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|regiondir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"and the snapshot directory:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

