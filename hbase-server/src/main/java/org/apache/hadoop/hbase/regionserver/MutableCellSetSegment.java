begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This mutable store segment encapsulates a mutable cell set and its respective memory allocation  * buffers (MSLAB).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|final
class|class
name|MutableCellSetSegment
extends|extends
name|MutableSegment
block|{
specifier|private
specifier|volatile
name|CellSet
name|cellSet
decl_stmt|;
specifier|private
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
comment|// Instantiate objects only using factory
name|MutableCellSetSegment
parameter_list|(
name|CellSet
name|cellSet
parameter_list|,
name|MemStoreLAB
name|memStoreLAB
parameter_list|,
name|long
name|size
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
block|{
name|super
argument_list|(
name|memStoreLAB
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|cellSet
operator|=
name|cellSet
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentScanner
name|getSegmentScanner
parameter_list|(
name|long
name|readPoint
parameter_list|)
block|{
return|return
operator|new
name|MutableCellSetSegmentScanner
argument_list|(
name|this
argument_list|,
name|readPoint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCellsCount
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|boolean
name|succ
init|=
name|getCellSet
argument_list|()
operator|.
name|add
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|long
name|s
init|=
name|AbstractMemStore
operator|.
name|heapSizeChange
argument_list|(
name|cell
argument_list|,
name|succ
argument_list|)
decl_stmt|;
name|updateMetaInfo
argument_list|(
name|cell
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// In no tags case this NoTagsKeyValue.getTagsLength() is a cheap call.
comment|// When we use ACL CP or Visibility CP which deals with Tags during
comment|// mutation, the TagRewriteCell.getTagsLength() is a cheaper call. We do not
comment|// parse the byte[] to identify the tags length.
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tagsPresent
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|rollback
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|Cell
name|found
init|=
name|get
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
operator|&&
name|found
operator|.
name|getSequenceId
argument_list|()
operator|==
name|cell
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|long
name|sz
init|=
name|AbstractMemStore
operator|.
name|heapSizeChange
argument_list|(
name|cell
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|incSize
argument_list|(
operator|-
name|sz
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getFirstAfter
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|snTailSet
init|=
name|tailSet
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|snTailSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|snTailSet
operator|.
name|first
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|getCellSet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|tailSet
parameter_list|(
name|Cell
name|firstCell
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|tailSet
argument_list|(
name|firstCell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CellSet
name|getCellSet
parameter_list|()
block|{
return|return
name|cellSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|CellComparator
name|getComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
comment|//*** Methods for MemStoreSegmentsScanner
specifier|public
name|Cell
name|last
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|last
argument_list|()
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|headSet
parameter_list|(
name|Cell
name|firstKeyOnRow
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|headSet
argument_list|(
name|firstKeyOnRow
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Cell
name|left
parameter_list|,
name|Cell
name|right
parameter_list|)
block|{
return|return
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareRows
parameter_list|(
name|Cell
name|left
parameter_list|,
name|Cell
name|right
parameter_list|)
block|{
return|return
name|getComparator
argument_list|()
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|private
name|Cell
name|get
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|get
argument_list|(
name|cell
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|remove
parameter_list|(
name|Cell
name|e
parameter_list|)
block|{
return|return
name|getCellSet
argument_list|()
operator|.
name|remove
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|// methods for tests
annotation|@
name|Override
name|Cell
name|first
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCellSet
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
block|}
end_class

end_unit

