begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of nonce manager that stores nonces in a hash map and cleans them up after  * some time; if nonce group/client ID is supplied, nonces are stored by client ID.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ServerNonceManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HASH_NONCE_GRACE_PERIOD_KEY
init|=
literal|"hbase.server.hashNonce.gracePeriod"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerNonceManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The time to wait in an extremely unlikely case of a conflict with a running op.    * Only here so that tests could override it and not wait. */
specifier|private
name|int
name|conflictWaitIterationMs
init|=
literal|30000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|tsFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
comment|// This object is used to synchronize on in case of collisions, and for cleanup.
specifier|private
specifier|static
class|class
name|OperationContext
block|{
specifier|static
specifier|final
name|int
name|DONT_PROCEED
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|PROCEED
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|WAIT
init|=
literal|2
decl_stmt|;
comment|// 0..1 - state, 2..2 - whether anyone is waiting, 3.. - ts of last activity
specifier|private
name|long
name|data
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|STATE_BITS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|WAITING_BIT
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ALL_FLAG_BITS
init|=
name|WAITING_BIT
operator||
name|STATE_BITS
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mvcc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[state "
operator|+
name|getState
argument_list|()
operator|+
literal|", hasWait "
operator|+
name|hasWait
argument_list|()
operator|+
literal|", activity "
operator|+
name|tsFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getActivityTime
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
specifier|public
name|OperationContext
parameter_list|()
block|{
name|setState
argument_list|(
name|WAIT
argument_list|)
expr_stmt|;
name|reportActivity
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
operator|(
name|this
operator|.
name|data
operator|&
operator|~
name|STATE_BITS
operator|)
operator||
name|state
expr_stmt|;
block|}
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|data
operator|&
name|STATE_BITS
argument_list|)
return|;
block|}
specifier|public
name|void
name|setHasWait
parameter_list|()
block|{
name|this
operator|.
name|data
operator|=
name|this
operator|.
name|data
operator||
name|WAITING_BIT
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWait
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|data
operator|&
name|WAITING_BIT
operator|)
operator|==
name|WAITING_BIT
return|;
block|}
specifier|public
name|void
name|reportActivity
parameter_list|()
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|this
operator|.
name|data
operator|=
operator|(
name|this
operator|.
name|data
operator|&
name|ALL_FLAG_BITS
operator|)
operator||
operator|(
name|now
operator|<<
literal|3
operator|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExpired
parameter_list|(
name|long
name|minRelevantTime
parameter_list|)
block|{
return|return
name|getActivityTime
argument_list|()
operator|<
operator|(
name|minRelevantTime
operator|&
operator|(
operator|~
literal|0l
operator|>>>
literal|3
operator|)
operator|)
return|;
block|}
specifier|public
name|void
name|setMvcc
parameter_list|(
name|long
name|mvcc
parameter_list|)
block|{
name|this
operator|.
name|mvcc
operator|=
name|mvcc
expr_stmt|;
block|}
specifier|public
name|long
name|getMvcc
parameter_list|()
block|{
return|return
name|this
operator|.
name|mvcc
return|;
block|}
specifier|private
name|long
name|getActivityTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|data
operator|>>>
literal|3
return|;
block|}
block|}
comment|/**    * Nonces.    * Approximate overhead per nonce: 64 bytes from hashmap, 32 from two objects (k/v),    * NK: 16 bytes (2 longs), OC: 8 bytes (1 long) - so, 120 bytes.    * With 30min expiration time, 5k increments/appends per sec., we'd use approximately 1Gb,    * which is a realistic worst case. If it's much worse, we could use some sort of memory    * limit and cleanup.    */
specifier|private
name|ConcurrentHashMap
argument_list|<
name|NonceKey
argument_list|,
name|OperationContext
argument_list|>
name|nonces
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|deleteNonceGracePeriod
decl_stmt|;
specifier|public
name|ServerNonceManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Default - 30 minutes.
name|deleteNonceGracePeriod
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HASH_NONCE_GRACE_PERIOD_KEY
argument_list|,
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteNonceGracePeriod
operator|<
literal|60
operator|*
literal|1000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nonce grace period "
operator|+
name|deleteNonceGracePeriod
operator|+
literal|" is less than a minute; might be too small to be useful"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setConflictWaitIterationMs
parameter_list|(
name|int
name|conflictWaitIterationMs
parameter_list|)
block|{
name|this
operator|.
name|conflictWaitIterationMs
operator|=
name|conflictWaitIterationMs
expr_stmt|;
block|}
comment|/**    * Starts the operation if operation with such nonce has not already succeeded. If the    * operation is in progress, waits for it to end and checks whether it has succeeded.    * @param group Nonce group.    * @param nonce Nonce.    * @param stoppable Stoppable that terminates waiting (if any) when the server is stopped.    * @return true if the operation has not already succeeded and can proceed; false otherwise.    */
specifier|public
name|boolean
name|startOperation
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|,
name|Stoppable
name|stoppable
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
condition|)
return|return
literal|true
return|;
name|NonceKey
name|nk
init|=
operator|new
name|NonceKey
argument_list|(
name|group
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|OperationContext
name|ctx
init|=
operator|new
name|OperationContext
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|OperationContext
name|oldResult
init|=
name|nonces
operator|.
name|putIfAbsent
argument_list|(
name|nk
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldResult
operator|==
literal|null
condition|)
return|return
literal|true
return|;
comment|// Collision with some operation - should be extremely rare.
synchronized|synchronized
init|(
name|oldResult
init|)
block|{
name|int
name|oldState
init|=
name|oldResult
operator|.
name|getState
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Conflict detected by nonce: "
operator|+
name|nk
operator|+
literal|", "
operator|+
name|oldResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldState
operator|!=
name|OperationContext
operator|.
name|WAIT
condition|)
block|{
return|return
name|oldState
operator|==
name|OperationContext
operator|.
name|PROCEED
return|;
comment|// operation ended
block|}
name|oldResult
operator|.
name|setHasWait
argument_list|()
expr_stmt|;
name|oldResult
operator|.
name|wait
argument_list|(
name|this
operator|.
name|conflictWaitIterationMs
argument_list|)
expr_stmt|;
comment|// operation is still active... wait and loop
if|if
condition|(
name|stoppable
operator|.
name|isStopped
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Server stopped"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Ends the operation started by startOperation.    * @param group Nonce group.    * @param nonce Nonce.    * @param success Whether the operation has succeeded.    */
specifier|public
name|void
name|endOperation
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
if|if
condition|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
condition|)
return|return;
name|NonceKey
name|nk
init|=
operator|new
name|NonceKey
argument_list|(
name|group
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|OperationContext
name|newResult
init|=
name|nonces
operator|.
name|get
argument_list|(
name|nk
argument_list|)
decl_stmt|;
assert|assert
name|newResult
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|newResult
init|)
block|{
assert|assert
name|newResult
operator|.
name|getState
argument_list|()
operator|==
name|OperationContext
operator|.
name|WAIT
assert|;
comment|// If we failed, other retries can proceed.
name|newResult
operator|.
name|setState
argument_list|(
name|success
condition|?
name|OperationContext
operator|.
name|DONT_PROCEED
else|:
name|OperationContext
operator|.
name|PROCEED
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|newResult
operator|.
name|reportActivity
argument_list|()
expr_stmt|;
comment|// Set time to use for cleanup.
block|}
else|else
block|{
name|OperationContext
name|val
init|=
name|nonces
operator|.
name|remove
argument_list|(
name|nk
argument_list|)
decl_stmt|;
assert|assert
name|val
operator|==
name|newResult
assert|;
block|}
if|if
condition|(
name|newResult
operator|.
name|hasWait
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Conflict with running op ended: "
operator|+
name|nk
operator|+
literal|", "
operator|+
name|newResult
argument_list|)
expr_stmt|;
name|newResult
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Store the write point in OperationContext when the operation succeed.    * @param group Nonce group.    * @param nonce Nonce.    * @param mvcc Write point of the succeed operation.    */
specifier|public
name|void
name|addMvccToOperationContext
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|,
name|long
name|mvcc
parameter_list|)
block|{
if|if
condition|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
return|return;
block|}
name|NonceKey
name|nk
init|=
operator|new
name|NonceKey
argument_list|(
name|group
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|OperationContext
name|result
init|=
name|nonces
operator|.
name|get
argument_list|(
name|nk
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|result
init|)
block|{
name|result
operator|.
name|setMvcc
argument_list|(
name|mvcc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return the write point of the previous succeed operation.    * @param group Nonce group.    * @param nonce Nonce.    * @return write point of the previous succeed operation.    */
specifier|public
name|long
name|getMvccFromOperationContext
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
if|if
condition|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
name|NonceKey
name|nk
init|=
operator|new
name|NonceKey
argument_list|(
name|group
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|OperationContext
name|result
init|=
name|nonces
operator|.
name|get
argument_list|(
name|nk
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|result
operator|.
name|getMvcc
argument_list|()
return|;
block|}
comment|/**    * Reports the operation from WAL during replay.    * @param group Nonce group.    * @param nonce Nonce.    * @param writeTime Entry write time, used to ignore entries that are too old.    */
specifier|public
name|void
name|reportOperationFromWal
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|,
name|long
name|writeTime
parameter_list|)
block|{
if|if
condition|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
condition|)
return|return;
comment|// Give the write time some slack in case the clocks are not synchronized.
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|writeTime
operator|+
operator|(
name|deleteNonceGracePeriod
operator|*
literal|1.5
operator|)
condition|)
return|return;
name|OperationContext
name|newResult
init|=
operator|new
name|OperationContext
argument_list|()
decl_stmt|;
name|newResult
operator|.
name|setState
argument_list|(
name|OperationContext
operator|.
name|DONT_PROCEED
argument_list|)
expr_stmt|;
name|NonceKey
name|nk
init|=
operator|new
name|NonceKey
argument_list|(
name|group
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|OperationContext
name|oldResult
init|=
name|nonces
operator|.
name|putIfAbsent
argument_list|(
name|nk
argument_list|,
name|newResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldResult
operator|!=
literal|null
condition|)
block|{
comment|// Some schemes can have collisions (for example, expiring hashes), so just log it.
comment|// We have no idea about the semantics here, so this is the least of many evils.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nonce collision during WAL recovery: "
operator|+
name|nk
operator|+
literal|", "
operator|+
name|oldResult
operator|+
literal|" with "
operator|+
name|newResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a scheduled chore that is used to clean up old nonces.    * @param stoppable Stoppable for the chore.    * @return ScheduledChore; the scheduled chore is not started.    */
specifier|public
name|ScheduledChore
name|createCleanupScheduledChore
parameter_list|(
name|Stoppable
name|stoppable
parameter_list|)
block|{
comment|// By default, it will run every 6 minutes (30 / 5).
return|return
operator|new
name|ScheduledChore
argument_list|(
literal|"nonceCleaner"
argument_list|,
name|stoppable
argument_list|,
name|deleteNonceGracePeriod
operator|/
literal|5
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|cleanUpOldNonces
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|cleanUpOldNonces
parameter_list|()
block|{
name|long
name|cutoff
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|deleteNonceGracePeriod
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NonceKey
argument_list|,
name|OperationContext
argument_list|>
name|entry
range|:
name|nonces
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OperationContext
name|oc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oc
operator|.
name|isExpired
argument_list|(
name|cutoff
argument_list|)
condition|)
continue|continue;
synchronized|synchronized
init|(
name|oc
init|)
block|{
if|if
condition|(
name|oc
operator|.
name|getState
argument_list|()
operator|==
name|OperationContext
operator|.
name|WAIT
operator|||
operator|!
name|oc
operator|.
name|isExpired
argument_list|(
name|cutoff
argument_list|)
condition|)
continue|continue;
name|nonces
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

