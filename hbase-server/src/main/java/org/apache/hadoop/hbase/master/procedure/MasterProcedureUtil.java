begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|UserInformation
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|MasterProcedureUtil
block|{
specifier|private
name|MasterProcedureUtil
parameter_list|()
block|{}
specifier|public
specifier|static
name|UserInformation
name|toProtoUserInfo
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|UserInformation
operator|.
name|Builder
name|userInfoPB
init|=
name|UserInformation
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userInfoPB
operator|.
name|setRealUser
argument_list|(
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|userInfoPB
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|User
name|toUserInfo
parameter_list|(
name|UserInformation
name|userInfoProto
parameter_list|)
block|{
if|if
condition|(
name|userInfoProto
operator|.
name|hasEffectiveUser
argument_list|()
condition|)
block|{
name|String
name|effectiveUser
init|=
name|userInfoProto
operator|.
name|getEffectiveUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|userInfoProto
operator|.
name|hasRealUser
argument_list|()
condition|)
block|{
name|String
name|realUser
init|=
name|userInfoProto
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|realUser
argument_list|)
decl_stmt|;
return|return
name|User
operator|.
name|create
argument_list|(
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|effectiveUser
argument_list|,
name|realUserUgi
argument_list|)
argument_list|)
return|;
block|}
return|return
name|User
operator|.
name|create
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|effectiveUser
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Helper Runnable used in conjunction with submitProcedure() to deal with    * submitting procs with nonce.    * See submitProcedure() for an example.    */
specifier|public
specifier|static
specifier|abstract
class|class
name|NonceProcedureRunnable
block|{
specifier|private
specifier|final
name|MasterServices
name|master
decl_stmt|;
specifier|private
specifier|final
name|NonceKey
name|nonceKey
decl_stmt|;
specifier|private
name|Long
name|procId
decl_stmt|;
specifier|public
name|NonceProcedureRunnable
parameter_list|(
specifier|final
name|MasterServices
name|master
parameter_list|,
specifier|final
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|nonceKey
operator|=
name|getProcedureExecutor
argument_list|()
operator|.
name|createNonceKey
argument_list|(
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NonceKey
name|getNonceKey
parameter_list|()
block|{
return|return
name|nonceKey
return|;
block|}
specifier|protected
name|MasterServices
name|getMaster
parameter_list|()
block|{
return|return
name|master
return|;
block|}
specifier|protected
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|getProcedureExecutor
parameter_list|()
block|{
return|return
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
return|;
block|}
specifier|protected
name|long
name|getProcId
parameter_list|()
block|{
return|return
name|procId
operator|!=
literal|null
condition|?
name|procId
operator|.
name|longValue
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
specifier|protected
name|long
name|setProcId
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|this
operator|.
name|procId
operator|=
name|procId
expr_stmt|;
return|return
name|procId
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getDescription
parameter_list|()
function_decl|;
specifier|protected
name|long
name|submitProcedure
parameter_list|(
specifier|final
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|proc
parameter_list|)
block|{
assert|assert
name|procId
operator|==
literal|null
operator|:
literal|"submitProcedure() was already called, running procId="
operator|+
name|procId
assert|;
name|procId
operator|=
name|getProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
name|proc
argument_list|,
name|nonceKey
argument_list|)
expr_stmt|;
return|return
name|procId
return|;
block|}
block|}
comment|/**    * Helper used to deal with submitting procs with nonce.    * Internally the NonceProcedureRunnable.run() will be called only if no one else    * registered the nonce. any Exception thrown by the run() method will be    * collected/handled and rethrown.    *<code>    * long procId = MasterProcedureUtil.submitProcedure(    *      new NonceProcedureRunnable(procExec, nonceGroup, nonce) {    *   {@literal @}Override    *   public void run() {    *     cpHost.preOperation();    *     submitProcedure(new MyProc());    *     cpHost.postOperation();    *   }    * });    *</code>    */
specifier|public
specifier|static
name|long
name|submitProcedure
parameter_list|(
specifier|final
name|NonceProcedureRunnable
name|runnable
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|runnable
operator|.
name|getProcedureExecutor
argument_list|()
decl_stmt|;
specifier|final
name|long
name|procId
init|=
name|procExec
operator|.
name|registerNonce
argument_list|(
name|runnable
operator|.
name|getNonceKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|>=
literal|0
condition|)
return|return
name|procId
return|;
comment|// someone already registered the nonce
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|procExec
operator|.
name|setFailureResultForNonce
argument_list|(
name|runnable
operator|.
name|getNonceKey
argument_list|()
argument_list|,
name|runnable
operator|.
name|getDescription
argument_list|()
argument_list|,
name|procExec
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRequestUser
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|procExec
operator|.
name|unregisterNonceIfProcedureWasNotSubmitted
argument_list|(
name|runnable
operator|.
name|getNonceKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|runnable
operator|.
name|getProcId
argument_list|()
return|;
block|}
comment|/**    * Pattern used to validate a Procedure WAL file name see    * {@link #validateProcedureWALFilename(String)} for description.    */
specifier|private
specifier|static
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*pv2-\\d{20}.log"
argument_list|)
decl_stmt|;
comment|/**    * A Procedure WAL file name is of the format: pv-&lt;wal-id&gt;.log where wal-id is 20 digits.    * @param filename name of the file to validate    * @return<tt>true</tt> if the filename matches a Procedure WAL,<tt>false</tt> otherwise    */
specifier|public
specifier|static
name|boolean
name|validateProcedureWALFilename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|filename
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**    * Return the priority for the given table. Now meta table is 3, other system tables are 2, and    * user tables are 1.    */
specifier|public
specifier|static
name|int
name|getTablePriority
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|3
return|;
block|}
elseif|else
if|if
condition|(
name|tableName
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
return|return
literal|2
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
comment|/**    * Return the priority for the given procedure. For now we only have two priorities, 100 for    * server carrying meta, and 1 for others.    */
specifier|public
specifier|static
name|int
name|getServerPriority
parameter_list|(
name|ServerProcedureInterface
name|proc
parameter_list|)
block|{
return|return
name|proc
operator|.
name|hasMetaTableRegion
argument_list|()
condition|?
literal|100
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

