begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Maintain information about a particular region.  It gathers information  * from three places -- HDFS, META, and region servers.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HbckRegionInfo
implements|implements
name|KeyRange
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HbckRegionInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|MetaEntry
name|metaEntry
init|=
literal|null
decl_stmt|;
comment|// info in META
specifier|private
name|HdfsEntry
name|hdfsEntry
init|=
literal|null
decl_stmt|;
comment|// info in HDFS
specifier|private
name|List
argument_list|<
name|OnlineEntry
argument_list|>
name|deployedEntries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// on Region Server
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|deployedOn
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// info on RS's
specifier|private
name|boolean
name|skipChecks
init|=
literal|false
decl_stmt|;
comment|// whether to skip further checks to this region info.
specifier|private
name|boolean
name|isMerged
init|=
literal|false
decl_stmt|;
comment|// whether this region has already been merged into another one
specifier|private
name|int
name|deployedReplicaId
init|=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
decl_stmt|;
specifier|private
name|RegionInfo
name|primaryHRIForDeployedReplica
init|=
literal|null
decl_stmt|;
specifier|public
name|HbckRegionInfo
parameter_list|(
name|MetaEntry
name|metaEntry
parameter_list|)
block|{
name|this
operator|.
name|metaEntry
operator|=
name|metaEntry
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|int
name|getReplicaId
parameter_list|()
block|{
return|return
name|metaEntry
operator|!=
literal|null
condition|?
name|metaEntry
operator|.
name|getReplicaId
argument_list|()
else|:
name|deployedReplicaId
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addServer
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
name|OnlineEntry
name|rse
init|=
operator|new
name|OnlineEntry
argument_list|(
name|regionInfo
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|this
operator|.
name|deployedEntries
operator|.
name|add
argument_list|(
name|rse
argument_list|)
expr_stmt|;
name|this
operator|.
name|deployedOn
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
comment|// save the replicaId that we see deployed in the cluster
name|this
operator|.
name|deployedReplicaId
operator|=
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
expr_stmt|;
name|this
operator|.
name|primaryHRIForDeployedReplica
operator|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ meta => "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|metaEntry
operator|!=
literal|null
operator|)
condition|?
name|metaEntry
operator|.
name|getRegionNameAsString
argument_list|()
else|:
literal|"null"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", hdfs => "
operator|+
name|getHdfsRegionDir
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", deployed => "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|deployedEntries
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", replicaId => "
operator|+
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|metaEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|metaEntry
operator|.
name|getStartKey
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|hdfsEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|hdfsEntry
operator|.
name|hri
operator|.
name|getStartKey
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Entry "
operator|+
name|this
operator|+
literal|" has no meta or hdfs region start key."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|metaEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|metaEntry
operator|.
name|getEndKey
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|hdfsEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|hdfsEntry
operator|.
name|hri
operator|.
name|getEndKey
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Entry "
operator|+
name|this
operator|+
literal|" has no meta or hdfs region start key."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|MetaEntry
name|getMetaEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|metaEntry
return|;
block|}
specifier|public
name|void
name|setMetaEntry
parameter_list|(
name|MetaEntry
name|metaEntry
parameter_list|)
block|{
name|this
operator|.
name|metaEntry
operator|=
name|metaEntry
expr_stmt|;
block|}
specifier|public
name|HdfsEntry
name|getHdfsEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|hdfsEntry
return|;
block|}
specifier|public
name|void
name|setHdfsEntry
parameter_list|(
name|HdfsEntry
name|hdfsEntry
parameter_list|)
block|{
name|this
operator|.
name|hdfsEntry
operator|=
name|hdfsEntry
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|OnlineEntry
argument_list|>
name|getOnlineEntries
parameter_list|()
block|{
return|return
name|this
operator|.
name|deployedEntries
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getDeployedOn
parameter_list|()
block|{
return|return
name|this
operator|.
name|deployedOn
return|;
block|}
comment|/**    * Read the .regioninfo file from the file system.  If there is no    * .regioninfo, add it to the orphan hdfs region list.    */
specifier|public
name|void
name|loadHdfsRegioninfo
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|regionDir
init|=
name|getHdfsRegionDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionDir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getReplicaId
argument_list|()
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
comment|// Log warning only for default/ primary replica with no region dir
name|LOG
operator|.
name|warn
argument_list|(
literal|"No HDFS region dir found: "
operator|+
name|this
operator|+
literal|" meta="
operator|+
name|metaEntry
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|hdfsEntry
operator|.
name|hri
operator|!=
literal|null
condition|)
block|{
comment|// already loaded data
return|return;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"RegionInfo read: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfsEntry
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|metaEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|metaEntry
operator|.
name|getTable
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|hdfsEntry
operator|!=
literal|null
condition|)
block|{
comment|// we are only guaranteed to have a path and not an HRI for hdfsEntry,
comment|// so we get the name from the Path
name|Path
name|tableDir
init|=
name|this
operator|.
name|hdfsEntry
operator|.
name|regionDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|FSUtils
operator|.
name|getTableName
argument_list|(
name|tableDir
argument_list|)
return|;
block|}
else|else
block|{
comment|// return the info from the first online/deployed hri
for|for
control|(
name|OnlineEntry
name|e
range|:
name|deployedEntries
control|)
block|{
return|return
name|e
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getRegionNameAsString
parameter_list|()
block|{
if|if
condition|(
name|metaEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|metaEntry
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|hdfsEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hdfsEntry
operator|.
name|hri
operator|!=
literal|null
condition|)
block|{
return|return
name|hdfsEntry
operator|.
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// return the info from the first online/deployed hri
for|for
control|(
name|OnlineEntry
name|e
range|:
name|deployedEntries
control|)
block|{
return|return
name|e
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
if|if
condition|(
name|metaEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|metaEntry
operator|.
name|getRegionName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|hdfsEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|hdfsEntry
operator|.
name|hri
operator|.
name|getRegionName
argument_list|()
return|;
block|}
else|else
block|{
comment|// return the info from the first online/deployed hri
for|for
control|(
name|OnlineEntry
name|e
range|:
name|deployedEntries
control|)
block|{
return|return
name|e
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|RegionInfo
name|getPrimaryHRIForDeployedReplica
parameter_list|()
block|{
return|return
name|primaryHRIForDeployedReplica
return|;
block|}
specifier|public
name|Path
name|getHdfsRegionDir
parameter_list|()
block|{
if|if
condition|(
name|hdfsEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|hdfsEntry
operator|.
name|regionDir
return|;
block|}
specifier|public
name|boolean
name|containsOnlyHdfsEdits
parameter_list|()
block|{
if|if
condition|(
name|hdfsEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|hdfsEntry
operator|.
name|hdfsOnlyEdits
return|;
block|}
specifier|public
name|boolean
name|isHdfsRegioninfoPresent
parameter_list|()
block|{
if|if
condition|(
name|hdfsEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|hdfsEntry
operator|.
name|hdfsRegioninfoFilePresent
return|;
block|}
specifier|public
name|long
name|getModTime
parameter_list|()
block|{
if|if
condition|(
name|hdfsEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|hdfsEntry
operator|.
name|regionDirModTime
return|;
block|}
specifier|public
name|RegionInfo
name|getHdfsHRI
parameter_list|()
block|{
if|if
condition|(
name|hdfsEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|hdfsEntry
operator|.
name|hri
return|;
block|}
specifier|public
name|void
name|setSkipChecks
parameter_list|(
name|boolean
name|skipChecks
parameter_list|)
block|{
name|this
operator|.
name|skipChecks
operator|=
name|skipChecks
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSkipChecks
parameter_list|()
block|{
return|return
name|skipChecks
return|;
block|}
specifier|public
name|void
name|setMerged
parameter_list|(
name|boolean
name|isMerged
parameter_list|)
block|{
name|this
operator|.
name|isMerged
operator|=
name|isMerged
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMerged
parameter_list|()
block|{
return|return
name|this
operator|.
name|isMerged
return|;
block|}
comment|/**    * Stores the regioninfo entries scanned from META    */
specifier|public
specifier|static
class|class
name|MetaEntry
extends|extends
name|HRegionInfo
block|{
name|ServerName
name|regionServer
decl_stmt|;
comment|// server hosting this region
name|long
name|modTime
decl_stmt|;
comment|// timestamp of most recent modification metadata
name|RegionInfo
name|splitA
decl_stmt|,
name|splitB
decl_stmt|;
comment|//split daughters
specifier|public
name|MetaEntry
parameter_list|(
name|RegionInfo
name|rinfo
parameter_list|,
name|ServerName
name|regionServer
parameter_list|,
name|long
name|modTime
parameter_list|)
block|{
name|this
argument_list|(
name|rinfo
argument_list|,
name|regionServer
argument_list|,
name|modTime
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetaEntry
parameter_list|(
name|RegionInfo
name|rinfo
parameter_list|,
name|ServerName
name|regionServer
parameter_list|,
name|long
name|modTime
parameter_list|,
name|RegionInfo
name|splitA
parameter_list|,
name|RegionInfo
name|splitB
parameter_list|)
block|{
name|super
argument_list|(
name|rinfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|regionServer
expr_stmt|;
name|this
operator|.
name|modTime
operator|=
name|modTime
expr_stmt|;
name|this
operator|.
name|splitA
operator|=
name|splitA
expr_stmt|;
name|this
operator|.
name|splitB
operator|=
name|splitB
expr_stmt|;
block|}
specifier|public
name|ServerName
name|getRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|superEq
init|=
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|superEq
condition|)
block|{
return|return
name|superEq
return|;
block|}
name|MetaEntry
name|me
init|=
operator|(
name|MetaEntry
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|regionServer
operator|.
name|equals
argument_list|(
name|me
operator|.
name|regionServer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|modTime
operator|==
name|me
operator|.
name|modTime
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|hash
operator|=
call|(
name|int
call|)
argument_list|(
name|hash
operator|^
name|getRegionId
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|^=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|^=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isOffline
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|^=
name|getTable
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|regionServer
operator|!=
literal|null
condition|)
block|{
name|hash
operator|^=
name|regionServer
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
call|(
name|int
call|)
argument_list|(
name|hash
operator|^
name|modTime
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
block|}
comment|/**    * Stores the regioninfo entries from HDFS    */
specifier|public
specifier|static
class|class
name|HdfsEntry
block|{
name|RegionInfo
name|hri
decl_stmt|;
name|Path
name|regionDir
init|=
literal|null
decl_stmt|;
name|long
name|regionDirModTime
init|=
literal|0
decl_stmt|;
name|boolean
name|hdfsRegioninfoFilePresent
init|=
literal|false
decl_stmt|;
name|boolean
name|hdfsOnlyEdits
init|=
literal|false
decl_stmt|;
name|HdfsEntry
parameter_list|()
block|{     }
specifier|public
name|HdfsEntry
parameter_list|(
name|Path
name|regionDir
parameter_list|)
block|{
name|this
operator|.
name|regionDir
operator|=
name|regionDir
expr_stmt|;
block|}
block|}
comment|/**    * Stores the regioninfo retrieved from Online region servers.    */
specifier|static
class|class
name|OnlineEntry
block|{
specifier|private
name|RegionInfo
name|regionInfo
decl_stmt|;
specifier|private
name|ServerName
name|serverName
decl_stmt|;
name|OnlineEntry
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|serverName
operator|.
name|toString
argument_list|()
operator|+
literal|";"
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
return|;
block|}
block|}
specifier|final
specifier|static
name|Comparator
argument_list|<
name|HbckRegionInfo
argument_list|>
name|COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|HbckRegionInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HbckRegionInfo
name|l
parameter_list|,
name|HbckRegionInfo
name|r
parameter_list|)
block|{
if|if
condition|(
name|l
operator|==
name|r
condition|)
block|{
comment|// same instance
return|return
literal|0
return|;
block|}
name|int
name|tableCompare
init|=
name|l
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCompare
operator|!=
literal|0
condition|)
block|{
return|return
name|tableCompare
return|;
block|}
name|int
name|startComparison
init|=
name|RegionSplitCalculator
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|r
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|startComparison
return|;
block|}
comment|// Special case for absolute endkey
name|byte
index|[]
name|endKey
init|=
name|r
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
name|endKey
operator|=
operator|(
name|endKey
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|endKey
expr_stmt|;
name|byte
index|[]
name|endKey2
init|=
name|l
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
name|endKey2
operator|=
operator|(
name|endKey2
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|endKey2
expr_stmt|;
name|int
name|endComparison
init|=
name|RegionSplitCalculator
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|endKey2
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|endComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|endComparison
return|;
block|}
comment|// use regionId as tiebreaker.
comment|// Null is considered after all possible values so make it bigger.
if|if
condition|(
name|l
operator|.
name|getHdfsEntry
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getHdfsEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|l
operator|.
name|getHdfsEntry
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getHdfsEntry
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// l.hdfsEntry must not be null
if|if
condition|(
name|r
operator|.
name|getHdfsEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// both l.hdfsEntry and r.hdfsEntry must not be null.
return|return
name|Long
operator|.
name|compare
argument_list|(
name|l
operator|.
name|getHdfsEntry
argument_list|()
operator|.
name|hri
operator|.
name|getRegionId
argument_list|()
argument_list|,
name|r
operator|.
name|getHdfsEntry
argument_list|()
operator|.
name|hri
operator|.
name|getRegionId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

