begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_comment
comment|/**  * A class to migrate table descriptor files to a dedicated subdir.  * Invoked by HMaster.finishInitialization before accessing table descriptors.  * Migrates snapshots, user tables, and system tables.  *   * @deprecated will be removed for the major release after 0.96.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|FSTableDescriptorMigrationToSubdir
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSTableDescriptorMigrationToSubdir
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|migrateFSTableDescriptorsIfNecessary
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsMigration
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
condition|)
block|{
name|migrateFsTableDescriptors
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Migration complete."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Determines if migration is required by checking to see whether the hbase:meta table has been    * migrated.    */
specifier|private
specifier|static
name|boolean
name|needsMigration
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|metaTableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|FileStatus
name|metaTableInfoStatus
init|=
name|FSTableDescriptors
operator|.
name|getTableInfoPath
argument_list|(
name|fs
argument_list|,
name|metaTableDir
argument_list|)
decl_stmt|;
return|return
name|metaTableInfoStatus
operator|==
literal|null
return|;
block|}
comment|/**    * Migrates all snapshots, user tables and system tables that require migration.    * First migrates snapshots.    * Then migrates each user table in order,    * then attempts ROOT (should be gone)    * Migrates hbase:meta last to indicate migration is complete.    */
specifier|private
specifier|static
name|void
name|migrateFsTableDescriptors
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First migrate snapshots - will migrate any snapshot dir that contains a table info file
name|Path
name|snapshotsDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotsDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating snapshots"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotsDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|migrateTable
argument_list|(
name|fs
argument_list|,
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating user tables"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|userTableDirs
init|=
name|FSUtils
operator|.
name|getTableDirs
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|userTableDir
range|:
name|userTableDirs
control|)
block|{
name|migrateTable
argument_list|(
name|fs
argument_list|,
name|userTableDir
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating system tables"
argument_list|)
expr_stmt|;
comment|// migrate meta last because that's what we check to see if migration is complete
name|migrateTableIfExists
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|migrateTableIfExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tableDir
argument_list|)
condition|)
block|{
name|migrateTable
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Migrates table info files.    * Moves the latest table info file (is present) from the table dir to the table info subdir.    * Removes any older table info files from the table dir and any existing table info subdir.    */
specifier|private
specifier|static
name|void
name|migrateTable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|tableDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|oldTableStatus
init|=
name|FSTableDescriptors
operator|.
name|getCurrentTableInfoStatus
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTableStatus
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No table info file to migrate for "
operator|+
name|tableDir
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|tableInfoDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|FSTableDescriptors
operator|.
name|TABLEINFO_DIR
argument_list|)
decl_stmt|;
comment|// remove table info subdir if it already exists
name|boolean
name|removedExistingSubdir
init|=
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|fs
argument_list|,
name|tableInfoDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedExistingSubdir
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed existing subdir at: "
operator|+
name|tableInfoDir
argument_list|)
expr_stmt|;
block|}
name|boolean
name|createdSubdir
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|tableInfoDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createdSubdir
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create new table info directory: "
operator|+
name|tableInfoDir
argument_list|)
throw|;
block|}
name|Path
name|oldTableInfoPath
init|=
name|oldTableStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|newTableInfoPath
init|=
operator|new
name|Path
argument_list|(
name|tableInfoDir
argument_list|,
name|oldTableInfoPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|renamedInfoFile
init|=
name|fs
operator|.
name|rename
argument_list|(
name|oldTableInfoPath
argument_list|,
name|newTableInfoPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renamedInfoFile
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to move table info file from old location: "
operator|+
name|oldTableInfoPath
operator|+
literal|" to new location: "
operator|+
name|newTableInfoPath
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrated table info from: "
operator|+
name|oldTableInfoPath
operator|+
literal|" to new location: "
operator|+
name|newTableInfoPath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

