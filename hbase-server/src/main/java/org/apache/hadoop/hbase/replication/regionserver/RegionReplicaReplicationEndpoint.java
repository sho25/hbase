begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|HBaseReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AtomicUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RetryCounterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.hbase.replication.ReplicationEndpoint} endpoint which receives the WAL  * edits from the WAL, and sends the edits to replicas of regions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionReplicaReplicationEndpoint
extends|extends
name|HBaseReplicationEndpoint
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionReplicaReplicationEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Can be configured differently than hbase.client.retries.number
specifier|private
specifier|static
name|String
name|CLIENT_RETRIES_NUMBER
init|=
literal|"hbase.region.replica.replication.client.retries.number"
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|AsyncClusterConnection
name|connection
decl_stmt|;
specifier|private
name|TableDescriptors
name|tableDescriptors
decl_stmt|;
specifier|private
name|int
name|numRetries
decl_stmt|;
specifier|private
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|private
name|LoadingCache
argument_list|<
name|TableName
argument_list|,
name|Optional
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|tableDescriptorCache
decl_stmt|;
specifier|private
name|Cache
argument_list|<
name|TableName
argument_list|,
name|TableName
argument_list|>
name|disabledTableCache
decl_stmt|;
specifier|private
specifier|final
name|RetryCounterFactory
name|retryCounterFactory
init|=
operator|new
name|RetryCounterFactory
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDescriptors
operator|=
name|context
operator|.
name|getTableDescriptors
argument_list|()
expr_stmt|;
name|int
name|memstoreReplicationEnabledCacheExpiryMs
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.region.replica.replication.cache.memstoreReplicationEnabled.expiryMs"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
comment|// A cache for the table "memstore replication enabled" flag.
comment|// It has a default expiry of 5 sec. This means that if the table is altered
comment|// with a different flag value, we might miss to replicate for that amount of
comment|// time. But this cache avoid the slow lookup and parsing of the TableDescriptor.
name|tableDescriptorCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|memstoreReplicationEnabledCacheExpiryMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|TableName
argument_list|,
name|Optional
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|TableDescriptor
argument_list|>
name|load
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check if the table requires memstore replication
comment|// some unit-test drop the table, so we should do a bypass check and always replicate.
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|tableDescriptors
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|nonExistentTableCacheExpiryMs
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.region.replica.replication.cache.disabledAndDroppedTables.expiryMs"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
comment|// A cache for non existing tables that have a default expiry of 5 sec. This means that if the
comment|// table is created again with the same name, we might miss to replicate for that amount of
comment|// time. But this cache prevents overloading meta requests for every edit from a deleted file.
name|disabledTableCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|nonExistentTableCacheExpiryMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// HRS multiplies client retries by 10 globally for meta operations, but we do not want this.
comment|// We are resetting it here because we want default number of retries (35) rather than 10 times
comment|// that which makes very long retries for disabled tables etc.
name|int
name|defaultNumRetries
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultNumRetries
operator|>
literal|10
condition|)
block|{
name|int
name|mult
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER
argument_list|)
decl_stmt|;
name|defaultNumRetries
operator|=
name|defaultNumRetries
operator|/
name|mult
expr_stmt|;
comment|// reset if HRS has multiplied this already
block|}
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CLIENT_RETRIES_NUMBER
argument_list|,
name|defaultNumRetries
argument_list|)
expr_stmt|;
comment|// use the regular RPC timeout for replica replication RPC's
name|this
operator|.
name|operationTimeoutNs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|context
operator|.
name|getServer
argument_list|()
operator|.
name|getAsyncClusterConnection
argument_list|()
expr_stmt|;
block|}
comment|/**    * returns true if the specified entry must be replicated. We should always replicate meta    * operations (e.g. flush) and use the user HTD flag to decide whether or not replicate the    * memstore.    */
specifier|private
name|boolean
name|requiresReplication
parameter_list|(
name|Optional
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDesc
parameter_list|,
name|Entry
name|entry
parameter_list|)
block|{
comment|// empty edit does not need to be replicated
if|if
condition|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|tableDesc
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// meta edits (e.g. flush) must be always replicated
return|return
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|isMetaEdit
argument_list|()
operator|||
name|tableDesc
operator|.
name|get
argument_list|()
operator|.
name|hasRegionMemStoreReplication
argument_list|()
return|;
block|}
specifier|private
name|void
name|getRegionLocations
parameter_list|(
name|CompletableFuture
argument_list|<
name|RegionLocations
argument_list|>
name|future
parameter_list|,
name|TableDescriptor
name|tableDesc
parameter_list|,
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|reload
parameter_list|)
block|{
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|connection
operator|.
name|getRegionLocations
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|reload
argument_list|)
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if we are not loading from cache, just return
if|if
condition|(
name|reload
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// check if the number of region replicas is correct, and also the primary region name
comment|// matches
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
name|tableDesc
operator|.
name|getRegionReplication
argument_list|()
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|encodedRegionName
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reload again as the information in cache maybe stale
name|getRegionLocations
argument_list|(
name|future
argument_list|,
name|tableDesc
argument_list|,
name|encodedRegionName
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replicate
parameter_list|(
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|future
parameter_list|,
name|RegionLocations
name|locs
parameter_list|,
name|TableDescriptor
name|tableDesc
parameter_list|,
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|locs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Could this happen?
name|future
operator|.
name|complete
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|encodedRegionName
argument_list|)
condition|)
block|{
comment|// the region name is not equal, this usually means the region has been split or merged, so
comment|// give up replicating as the new region(s) should already have all the data of the parent
comment|// region(s).
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping {} entries in table {} because located region {} is different than"
operator|+
literal|" the original region {} from WALEdit"
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|complete
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicInteger
name|remainingTasks
init|=
operator|new
name|AtomicInteger
argument_list|(
name|locs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AtomicLong
name|skippedEdits
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|n
init|=
name|locs
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|replicaId
init|=
name|i
decl_stmt|;
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|connection
operator|.
name|replay
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|row
argument_list|,
name|entries
argument_list|,
name|replicaId
argument_list|,
name|numRetries
argument_list|,
name|operationTimeoutNs
argument_list|)
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to replicate to {}"
argument_list|,
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AtomicUtils
operator|.
name|updateMax
argument_list|(
name|skippedEdits
argument_list|,
name|r
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remainingTasks
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|skippedEdits
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|logSkipped
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping {} entries because table {} is {}"
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|reason
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping : {}"
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|replicate
parameter_list|(
name|TableDescriptor
name|tableDesc
parameter_list|,
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|disabledTableCache
operator|.
name|getIfPresent
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|logSkipped
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|entries
argument_list|,
literal|"cached as a disabled table"
argument_list|)
expr_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|RegionLocations
argument_list|>
name|locateFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|getRegionLocations
argument_list|(
name|locateFuture
argument_list|,
name|tableDesc
argument_list|,
name|encodedRegionName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|locateFuture
argument_list|,
parameter_list|(
name|locs
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replicate
argument_list|(
name|future
argument_list|,
name|locs
argument_list|,
name|tableDesc
argument_list|,
name|encodedRegionName
argument_list|,
name|row
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|TableDescriptor
argument_list|,
name|List
argument_list|<
name|Entry
argument_list|>
argument_list|>
argument_list|>
name|encodedRegionName2Entries
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|long
name|skippedEdits
init|=
literal|0
decl_stmt|;
name|RetryCounter
name|retryCounter
init|=
name|retryCounterFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|outer
label|:
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|encodedRegionName2Entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|skippedEdits
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|replicateContext
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDesc
decl_stmt|;
try|try
block|{
name|tableDesc
operator|=
name|tableDescriptorCache
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to load table descriptor for {}, attempts={}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|retryCounter
operator|.
name|getAttemptTimes
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|retryCounter
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|retryCounter
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
comment|// restore the interrupted state
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
continue|continue
name|outer
continue|;
block|}
if|if
condition|(
operator|!
name|requiresReplication
argument_list|(
name|tableDesc
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|skippedEdits
operator|++
expr_stmt|;
continue|continue;
block|}
name|byte
index|[]
name|encodedRegionName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|encodedRegionName2Entries
operator|.
name|computeIfAbsent
argument_list|(
name|encodedRegionName
argument_list|,
name|k
lambda|->
name|Pair
operator|.
name|newPair
argument_list|(
name|tableDesc
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getSecond
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// send the request to regions
name|retryCounter
operator|=
name|retryCounterFactory
operator|.
name|create
argument_list|()
expr_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|futureAndEncodedRegionNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|TableDescriptor
argument_list|,
name|List
argument_list|<
name|Entry
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|encodedRegionName2Entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|future
init|=
name|replicate
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|futureAndEncodedRegionNameList
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|future
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
argument_list|,
name|byte
index|[]
argument_list|>
name|pair
range|:
name|futureAndEncodedRegionNameList
control|)
block|{
name|byte
index|[]
name|encodedRegionName
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
try|try
block|{
name|skippedEdits
operator|+=
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|encodedRegionName2Entries
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// restore the interrupted state
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Pair
argument_list|<
name|TableDescriptor
argument_list|,
name|List
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|tableAndEntries
init|=
name|encodedRegionName2Entries
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|tableAndEntries
operator|.
name|getFirst
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|tableAndEntries
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
comment|// The table can be disabled or dropped at this time. For disabled tables, we have no
comment|// cheap mechanism to detect this case because meta does not contain this information.
comment|// ClusterConnection.isTableDisabled() is a zk call which we cannot do for every replay
comment|// RPC. So instead we start the replay RPC with retries and check whether the table is
comment|// dropped or disabled which might cause SocketTimeoutException, or
comment|// RetriesExhaustedException or similar if we get IOE.
if|if
condition|(
name|cause
operator|instanceof
name|TableNotFoundException
condition|)
block|{
comment|// add to cache that the table does not exist
name|tableDescriptorCache
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|logSkipped
argument_list|(
name|tableName
argument_list|,
name|entries
argument_list|,
literal|"dropped"
argument_list|)
expr_stmt|;
name|skippedEdits
operator|+=
name|entries
operator|.
name|size
argument_list|()
expr_stmt|;
name|encodedRegionName2Entries
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|disabled
init|=
literal|false
decl_stmt|;
try|try
block|{
name|disabled
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
comment|// restore the interrupted state
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to test whether {} is disabled, assume it is not disabled"
argument_list|,
name|tableName
argument_list|,
name|e1
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|disabled
condition|)
block|{
name|disabledTableCache
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|logSkipped
argument_list|(
name|tableName
argument_list|,
name|entries
argument_list|,
literal|"disabled"
argument_list|)
expr_stmt|;
name|skippedEdits
operator|+=
name|entries
operator|.
name|size
argument_list|()
expr_stmt|;
name|encodedRegionName2Entries
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to replicate {} entries for region {} of table {}"
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we have done
if|if
condition|(
name|encodedRegionName2Entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrLogEditsFiltered
argument_list|(
name|skippedEdits
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to replicate all entris, retry={}"
argument_list|,
name|retryCounter
operator|.
name|getAttemptTimes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|retryCounter
operator|.
name|shouldRetry
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|retryCounter
operator|.
name|sleepUntilNextRetry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// restore the interrupted state
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReplicateToSameCluster
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|WALEntryFilter
name|getScopeWALEntryFilter
parameter_list|()
block|{
comment|// we do not care about scope. We replicate everything.
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

