begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_comment
comment|/**  * Performs bulk reopen of the list of regions provided to it.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BulkReOpen
extends|extends
name|BulkAssigner
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|rsToRegions
decl_stmt|;
specifier|private
specifier|final
name|AssignmentManager
name|assignmentManager
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BulkReOpen
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|BulkReOpen
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverToRegions
parameter_list|,
specifier|final
name|AssignmentManager
name|am
parameter_list|)
block|{
name|super
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
name|am
expr_stmt|;
name|this
operator|.
name|rsToRegions
operator|=
name|serverToRegions
expr_stmt|;
block|}
comment|/**    * Unassign all regions, so that they go through the regular region    * assignment flow (in assignment manager) and are re-opened.    */
annotation|@
name|Override
specifier|protected
name|void
name|populatePool
parameter_list|(
name|ExecutorService
name|pool
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating threads for each region server "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|rsToRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// add plans for the regions that need to be reopened
name|Map
argument_list|<
name|String
argument_list|,
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|hris
control|)
block|{
name|RegionPlan
name|reOpenPlan
init|=
name|assignmentManager
operator|.
name|getRegionReopenPlan
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|plans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|reOpenPlan
argument_list|)
expr_stmt|;
block|}
name|assignmentManager
operator|.
name|addPlans
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|pool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|unassign
argument_list|(
name|hris
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed bulking re-open "
operator|+
name|hris
operator|.
name|size
argument_list|()
operator|+
literal|" region(s)"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**   * Reopen the regions asynchronously, so always returns true immediately.   * @return true   */
annotation|@
name|Override
specifier|protected
name|boolean
name|waitUntilDone
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Configuration knobs "hbase.bulk.reopen.threadpool.size" number of regions    * that can be reopened concurrently. The maximum number of threads the master    * creates is never more than the number of region servers.    * If configuration is not defined it defaults to 20    */
specifier|protected
name|int
name|getThreadCount
parameter_list|()
block|{
name|int
name|defaultThreadCount
init|=
name|super
operator|.
name|getThreadCount
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.bulk.reopen.threadpool.size"
argument_list|,
name|defaultThreadCount
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|bulkReOpen
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|bulkAssign
argument_list|()
return|;
block|}
comment|/**    * Unassign the list of regions. Configuration knobs:    * hbase.bulk.waitbetween.reopen indicates the number of milliseconds to    * wait before unassigning another region from this region server    *    * @param regions    * @throws InterruptedException    */
specifier|private
name|void
name|unassign
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitTime
init|=
name|this
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.bulk.waitbetween.reopen"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|region
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assignmentManager
operator|.
name|unassign
argument_list|(
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|region
argument_list|)
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|regionStates
operator|.
name|waitForUpdate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitTime
operator|>
literal|0
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

