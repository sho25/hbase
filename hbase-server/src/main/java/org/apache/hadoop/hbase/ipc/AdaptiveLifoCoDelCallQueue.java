begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Adaptive LIFO blocking queue utilizing CoDel algorithm to prevent queue overloading.  *  * Implementing {@link BlockingQueue} interface to be compatible with {@link RpcExecutor}.  *  * Currently uses milliseconds internally, need to look into whether we should use  * nanoseconds for timeInterval and minDelay.  *  * @see<a href="http://queue.acm.org/detail.cfm?id=2839461">Fail at Scale paper</a>  *  * @see<a href="https://github.com/facebook/wangle/blob/master/wangle/concurrent/Codel.cpp">  *   CoDel version for generic job queues in Wangle library</a>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AdaptiveLifoCoDelCallQueue
implements|implements
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
block|{
comment|// backing queue
specifier|private
name|LinkedBlockingDeque
argument_list|<
name|CallRunner
argument_list|>
name|queue
decl_stmt|;
comment|// so we can calculate actual threshold to switch to LIFO under load
specifier|private
name|int
name|maxCapacity
decl_stmt|;
comment|// metrics (shared across all queues)
specifier|private
name|LongAdder
name|numGeneralCallsDropped
decl_stmt|;
specifier|private
name|LongAdder
name|numLifoModeSwitches
decl_stmt|;
comment|// Both are in milliseconds
specifier|private
specifier|volatile
name|int
name|codelTargetDelay
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|codelInterval
decl_stmt|;
comment|// if queue if full more than that percent, we switch to LIFO mode.
comment|// Values are in the range of 0.7, 0.8 etc (0-1.0).
specifier|private
specifier|volatile
name|double
name|lifoThreshold
decl_stmt|;
comment|// minimal delay observed during the interval
specifier|private
specifier|volatile
name|long
name|minDelay
decl_stmt|;
comment|// the moment when current interval ends
specifier|private
specifier|volatile
name|long
name|intervalTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// switch to ensure only one threads does interval cutoffs
specifier|private
name|AtomicBoolean
name|resetDelay
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// if we're in this mode, "long" calls are getting dropped
specifier|private
name|AtomicBoolean
name|isOverloaded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|AdaptiveLifoCoDelCallQueue
parameter_list|(
name|int
name|capacity
parameter_list|,
name|int
name|targetDelay
parameter_list|,
name|int
name|interval
parameter_list|,
name|double
name|lifoThreshold
parameter_list|,
name|LongAdder
name|numGeneralCallsDropped
parameter_list|,
name|LongAdder
name|numLifoModeSwitches
parameter_list|)
block|{
name|this
operator|.
name|maxCapacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|LinkedBlockingDeque
argument_list|<>
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|codelTargetDelay
operator|=
name|targetDelay
expr_stmt|;
name|this
operator|.
name|codelInterval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|lifoThreshold
operator|=
name|lifoThreshold
expr_stmt|;
name|this
operator|.
name|numGeneralCallsDropped
operator|=
name|numGeneralCallsDropped
expr_stmt|;
name|this
operator|.
name|numLifoModeSwitches
operator|=
name|numLifoModeSwitches
expr_stmt|;
block|}
comment|/**    * Update tunables.    *    * @param newCodelTargetDelay new CoDel target delay    * @param newCodelInterval new CoDel interval    * @param newLifoThreshold new Adaptive Lifo threshold    */
specifier|public
name|void
name|updateTunables
parameter_list|(
name|int
name|newCodelTargetDelay
parameter_list|,
name|int
name|newCodelInterval
parameter_list|,
name|double
name|newLifoThreshold
parameter_list|)
block|{
name|this
operator|.
name|codelTargetDelay
operator|=
name|newCodelTargetDelay
expr_stmt|;
name|this
operator|.
name|codelInterval
operator|=
name|newCodelInterval
expr_stmt|;
name|this
operator|.
name|lifoThreshold
operator|=
name|newLifoThreshold
expr_stmt|;
block|}
comment|/**    * Behaves as {@link LinkedBlockingQueue#take()}, except it will silently    * skip all calls which it thinks should be dropped.    *    * @return the head of this queue    * @throws InterruptedException if interrupted while waiting    */
annotation|@
name|Override
specifier|public
name|CallRunner
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|CallRunner
name|cr
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|double
operator|)
name|queue
operator|.
name|size
argument_list|()
operator|/
name|this
operator|.
name|maxCapacity
operator|)
operator|>
name|lifoThreshold
condition|)
block|{
name|numLifoModeSwitches
operator|.
name|increment
argument_list|()
expr_stmt|;
name|cr
operator|=
name|queue
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cr
operator|=
name|queue
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|needToDrop
argument_list|(
name|cr
argument_list|)
condition|)
block|{
name|numGeneralCallsDropped
operator|.
name|increment
argument_list|()
expr_stmt|;
name|cr
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|cr
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|CallRunner
name|poll
parameter_list|()
block|{
name|CallRunner
name|cr
decl_stmt|;
name|boolean
name|switched
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|double
operator|)
name|queue
operator|.
name|size
argument_list|()
operator|/
name|this
operator|.
name|maxCapacity
operator|)
operator|>
name|lifoThreshold
condition|)
block|{
comment|// Only count once per switch.
if|if
condition|(
operator|!
name|switched
condition|)
block|{
name|switched
operator|=
literal|true
expr_stmt|;
name|numLifoModeSwitches
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|cr
operator|=
name|queue
operator|.
name|pollLast
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|switched
operator|=
literal|false
expr_stmt|;
name|cr
operator|=
name|queue
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
return|return
name|cr
return|;
block|}
if|if
condition|(
name|needToDrop
argument_list|(
name|cr
argument_list|)
condition|)
block|{
name|numGeneralCallsDropped
operator|.
name|increment
argument_list|()
expr_stmt|;
name|cr
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|cr
return|;
block|}
block|}
block|}
comment|/**    * @param callRunner to validate    * @return true if this call needs to be skipped based on call timestamp    *   and internal queue state (deemed overloaded).    */
specifier|private
name|boolean
name|needToDrop
parameter_list|(
name|CallRunner
name|callRunner
parameter_list|)
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|callDelay
init|=
name|now
operator|-
name|callRunner
operator|.
name|getRpcCall
argument_list|()
operator|.
name|getReceiveTime
argument_list|()
decl_stmt|;
name|long
name|localMinDelay
init|=
name|this
operator|.
name|minDelay
decl_stmt|;
comment|// Try and determine if we should reset
comment|// the delay time and determine overload
if|if
condition|(
name|now
operator|>
name|intervalTime
operator|&&
operator|!
name|resetDelay
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|resetDelay
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|intervalTime
operator|=
name|now
operator|+
name|codelInterval
expr_stmt|;
name|isOverloaded
operator|.
name|set
argument_list|(
name|localMinDelay
operator|>
name|codelTargetDelay
argument_list|)
expr_stmt|;
block|}
comment|// If it looks like we should reset the delay
comment|// time do it only once on one thread
if|if
condition|(
name|resetDelay
operator|.
name|get
argument_list|()
operator|&&
name|resetDelay
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|minDelay
operator|=
name|callDelay
expr_stmt|;
comment|// we just reset the delay dunno about how this will work
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|callDelay
operator|<
name|localMinDelay
condition|)
block|{
name|minDelay
operator|=
name|callDelay
expr_stmt|;
block|}
return|return
name|isOverloaded
operator|.
name|get
argument_list|()
operator|&&
name|callDelay
operator|>
literal|2
operator|*
name|codelTargetDelay
return|;
block|}
comment|// Generic BlockingQueue methods we support
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|CallRunner
name|callRunner
parameter_list|)
block|{
return|return
name|queue
operator|.
name|offer
argument_list|(
name|callRunner
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|queue
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// This class does NOT provide generic purpose BlockingQueue implementation,
comment|// so to prevent misuse all other methods throw UnsupportedOperationException.
annotation|@
name|Override
specifier|public
name|CallRunner
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CallRunner
name|peek
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|CallRunner
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|CallRunner
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|CallRunner
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|CallRunner
name|callRunner
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CallRunner
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CallRunner
name|element
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|CallRunner
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|CallRunner
name|callRunner
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|CallRunner
name|callRunner
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class doesn't support anything,"
operator|+
literal|" but take() and offer() methods"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

