begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REGION_MERGED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REQUEST_REGION_MERGE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_class
specifier|public
class|class
name|ZkRegionMergeCoordination
implements|implements
name|RegionMergeCoordination
block|{
specifier|private
name|CoordinatedStateManager
name|manager
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZkRegionMergeCoordination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ZkRegionMergeCoordination
parameter_list|(
name|CoordinatedStateManager
name|manager
parameter_list|,
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
block|}
comment|/**    * ZK-based implementation. Has details about whether the state transition should be reflected in    * ZK, as well as expected version of znode.    */
specifier|public
specifier|static
class|class
name|ZkRegionMergeDetails
implements|implements
name|RegionMergeCoordination
operator|.
name|RegionMergeDetails
block|{
specifier|private
name|int
name|znodeVersion
decl_stmt|;
specifier|public
name|ZkRegionMergeDetails
parameter_list|()
block|{     }
specifier|public
name|int
name|getZnodeVersion
parameter_list|()
block|{
return|return
name|znodeVersion
return|;
block|}
specifier|public
name|void
name|setZnodeVersion
parameter_list|(
name|int
name|znodeVersion
parameter_list|)
block|{
name|this
operator|.
name|znodeVersion
operator|=
name|znodeVersion
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionMergeDetails
name|getDefaultDetails
parameter_list|()
block|{
name|ZkRegionMergeDetails
name|zstd
init|=
operator|new
name|ZkRegionMergeDetails
argument_list|()
decl_stmt|;
name|zstd
operator|.
name|setZnodeVersion
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|zstd
return|;
block|}
comment|/**    * Wait for the merging node to be transitioned from pending_merge    * to merging by master. That's how we are sure master has processed    * the event and is good with us to move on. If we don't get any update,    * we periodically transition the node so that master gets the callback.    * If the node is removed or is not in pending_merge state any more,    * we abort the merge.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|waitForRegionMergeTransaction
parameter_list|(
name|RegionServerServices
name|services
parameter_list|,
name|HRegionInfo
name|mergedRegionInfo
parameter_list|,
name|HRegion
name|region_a
parameter_list|,
name|HRegion
name|region_b
parameter_list|,
name|RegionMergeDetails
name|details
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|spins
init|=
literal|0
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ServerName
name|expectedServer
init|=
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|node
init|=
name|mergedRegionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|ZkRegionMergeDetails
name|zdetails
init|=
operator|(
name|ZkRegionMergeDetails
operator|)
name|details
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|isStopped
argument_list|()
operator|||
name|services
operator|.
name|isStopping
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|spins
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Still waiting for master to process "
operator|+
literal|"the pending_merge for "
operator|+
name|node
argument_list|)
expr_stmt|;
name|ZkRegionMergeDetails
name|zrmd
init|=
operator|(
name|ZkRegionMergeDetails
operator|)
name|getDefaultDetails
argument_list|()
decl_stmt|;
name|transitionMergingNode
argument_list|(
name|mergedRegionInfo
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|expectedServer
argument_list|,
name|zrmd
argument_list|,
name|RS_ZK_REQUEST_REGION_MERGE
argument_list|,
name|RS_ZK_REQUEST_REGION_MERGE
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|spins
operator|++
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKAssign
operator|.
name|getDataNoWatch
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data is null, merging node "
operator|+
name|node
operator|+
literal|" no longer exists"
argument_list|)
throw|;
block|}
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|EventType
name|et
init|=
name|rt
operator|.
name|getEventType
argument_list|()
decl_stmt|;
if|if
condition|(
name|et
operator|==
name|RS_ZK_REGION_MERGING
condition|)
block|{
name|ServerName
name|serverName
init|=
name|rt
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|expectedServer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Merging node "
operator|+
name|node
operator|+
literal|" is for "
operator|+
name|serverName
operator|+
literal|", not us "
operator|+
name|expectedServer
argument_list|)
throw|;
block|}
name|byte
index|[]
name|payloadOfMerging
init|=
name|rt
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|mergingRegions
init|=
name|HRegionInfo
operator|.
name|parseDelimitedFrom
argument_list|(
name|payloadOfMerging
argument_list|,
literal|0
argument_list|,
name|payloadOfMerging
operator|.
name|length
argument_list|)
decl_stmt|;
assert|assert
name|mergingRegions
operator|.
name|size
argument_list|()
operator|==
literal|3
assert|;
name|HRegionInfo
name|a
init|=
name|mergingRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|b
init|=
name|mergingRegions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri_a
init|=
name|region_a
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri_b
init|=
name|region_b
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|hri_a
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
name|hri_b
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Merging node "
operator|+
name|node
operator|+
literal|" is for "
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
operator|+
literal|", not expected regions: "
operator|+
name|hri_a
operator|+
literal|", "
operator|+
name|hri_b
argument_list|)
throw|;
block|}
comment|// Master has processed it.
name|zdetails
operator|.
name|setZnodeVersion
argument_list|(
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|et
operator|!=
name|RS_ZK_REQUEST_REGION_MERGE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Merging node "
operator|+
name|node
operator|+
literal|" moved out of merging to "
operator|+
name|et
argument_list|)
throw|;
block|}
block|}
comment|// Server is stopping/stopped
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server is "
operator|+
operator|(
name|services
operator|.
name|isStopping
argument_list|()
condition|?
literal|"stopping"
else|:
literal|"stopped"
operator|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed getting MERGING znode on "
operator|+
name|mergedRegionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a new ephemeral node in the PENDING_MERGE state for the merged region.    * Create it ephemeral in case regionserver dies mid-merge.    *    *<p>    * Does not transition nodes from other states. If a node already exists for    * this region, a {@link NodeExistsException} will be thrown.    *    * @param region region to be created as offline    * @param serverName server event originates from    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|startRegionMergeTransaction
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|watcher
operator|.
name|prefix
argument_list|(
literal|"Creating ephemeral node for "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in PENDING_MERGE state"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|region
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|RS_ZK_REQUEST_REGION_MERGE
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|watcher
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
name|rt
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    * @see    * org.apache.hadoop.hbase.regionserver.coordination.RegionMergeCoordination#clean(org.apache.hadoop    * .hbase.Server, org.apache.hadoop.hbase.HRegionInfo)    */
annotation|@
name|Override
specifier|public
name|void
name|clean
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
try|try
block|{
comment|// Only delete if its in expected state; could have been hijacked.
if|if
condition|(
operator|!
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|RS_ZK_REQUEST_REGION_MERGE
argument_list|,
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|watcher
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|RS_ZK_REGION_MERGING
argument_list|,
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed cleanup zk node of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Failed cleanup zk node of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * ZooKeeper implementation of finishRegionMergeTransaction    */
annotation|@
name|Override
specifier|public
name|void
name|completeRegionMergeTransaction
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|HRegionInfo
name|mergedRegionInfo
parameter_list|,
name|HRegion
name|region_a
parameter_list|,
name|HRegion
name|region_b
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|,
name|HRegion
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkRegionMergeDetails
name|zrmd
init|=
operator|(
name|ZkRegionMergeDetails
operator|)
name|rmd
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|getServer
argument_list|()
operator|==
literal|null
operator|||
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Tell master about merge by updating zk. If we fail, abort.
try|try
block|{
name|transitionMergingNode
argument_list|(
name|mergedRegionInfo
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rmd
argument_list|,
name|RS_ZK_REGION_MERGING
argument_list|,
name|RS_ZK_REGION_MERGED
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|spins
init|=
literal|0
decl_stmt|;
comment|// Now wait for the master to process the merge. We know it's done
comment|// when the znode is deleted. The reason we keep tickling the znode is
comment|// that it's possible for the master to miss an event.
do|do
block|{
if|if
condition|(
name|spins
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Still waiting on the master to process the merge for "
operator|+
name|mergedRegionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", waited "
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// When this returns -1 it means the znode doesn't exist
name|transitionMergingNode
argument_list|(
name|mergedRegionInfo
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rmd
argument_list|,
name|RS_ZK_REGION_MERGED
argument_list|,
name|RS_ZK_REGION_MERGED
argument_list|)
expr_stmt|;
name|spins
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|zrmd
operator|.
name|getZnodeVersion
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|manager
operator|.
name|getServer
argument_list|()
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|services
operator|.
name|isStopping
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed telling master about merge "
operator|+
name|mergedRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Leaving here, the mergedir with its dross will be in place but since the
comment|// merge was successful, just leave it; it'll be cleaned when region_a is
comment|// cleaned up by CatalogJanitor on master
block|}
comment|/*    * Zookeeper implementation of region merge confirmation    */
annotation|@
name|Override
specifier|public
name|void
name|confirmRegionMergeTransaction
parameter_list|(
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|)
throws|throws
name|IOException
block|{
name|transitionMergingNode
argument_list|(
name|merged
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|serverName
argument_list|,
name|rmd
argument_list|,
name|RS_ZK_REGION_MERGING
argument_list|,
name|RS_ZK_REGION_MERGING
argument_list|)
expr_stmt|;
block|}
comment|/*    * Zookeeper implementation of region merge processing    */
annotation|@
name|Override
specifier|public
name|void
name|processRegionMergeRequest
parameter_list|(
name|HRegionInfo
name|p
parameter_list|,
name|HRegionInfo
name|hri_a
parameter_list|,
name|HRegionInfo
name|hri_b
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|)
throws|throws
name|IOException
block|{
name|transitionMergingNode
argument_list|(
name|p
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|,
name|sn
argument_list|,
name|rmd
argument_list|,
name|EventType
operator|.
name|RS_ZK_REQUEST_REGION_MERGE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transitions an existing ephemeral node for the specified region which is    * currently in the begin state to be in the end state. Master cleans up the    * final MERGE znode when it reads it (or if we crash, zk will clean it up).    *    *<p>    * Does not transition nodes from other states. If for some reason the node    * could not be transitioned, the method returns -1. If the transition is    * successful, the version of the node after transition is updated in details.    *    *<p>    * This method can fail and return false for three different reasons:    *<ul>    *<li>Node for this region does not exist</li>    *<li>Node for this region is not in the begin state</li>    *<li>After verifying the begin state, update fails because of wrong version    * (this should never actually happen since an RS only does this transition    * following a transition to the begin state. If two RS are conflicting, one would    * fail the original transition to the begin state and not this transition)</li>    *</ul>    *    *<p>    * Does not set any watches.    *    *<p>    * This method should only be used by a RegionServer when merging two regions.    *    * @param merged region to be transitioned to opened    * @param a merging region A    * @param b merging region B    * @param serverName server event originates from    * @param rmd region merge details    * @param beginState the expected current state the node should be    * @param endState the state to be transition to    * @throws IOException    */
specifier|private
name|void
name|transitionMergingNode
parameter_list|(
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|RegionMergeDetails
name|rmd
parameter_list|,
specifier|final
name|EventType
name|beginState
parameter_list|,
specifier|final
name|EventType
name|endState
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkRegionMergeDetails
name|zrmd
init|=
operator|(
name|ZkRegionMergeDetails
operator|)
name|rmd
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|merged
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
try|try
block|{
name|zrmd
operator|.
name|setZnodeVersion
argument_list|(
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|watcher
argument_list|,
name|merged
argument_list|,
name|serverName
argument_list|,
name|beginState
argument_list|,
name|endState
argument_list|,
name|zrmd
operator|.
name|getZnodeVersion
argument_list|()
argument_list|,
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

