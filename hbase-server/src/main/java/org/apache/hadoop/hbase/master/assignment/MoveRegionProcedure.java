begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|AbstractStateMachineRegionProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|MoveRegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|MoveRegionStateData
import|;
end_import

begin_comment
comment|/**  * Procedure that implements a RegionPlan.  * It first runs an unassign subprocedure followed  * by an assign subprocedure. It takes a lock on the region being moved.  * It holds the lock for the life of the procedure.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MoveRegionProcedure
extends|extends
name|AbstractStateMachineRegionProcedure
argument_list|<
name|MoveRegionState
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MoveRegionProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegionPlan
name|plan
decl_stmt|;
specifier|public
name|MoveRegionProcedure
parameter_list|()
block|{
comment|// Required by the Procedure framework to create the procedure on replay
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MoveRegionProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|RegionPlan
name|plan
parameter_list|)
block|{
name|super
argument_list|(
name|env
argument_list|,
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|plan
operator|=
name|plan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|MoveRegionState
name|state
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" execute state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|MOVE_REGION_UNASSIGN
case|:
name|addChildProcedure
argument_list|(
operator|new
name|UnassignProcedure
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|plan
operator|.
name|getSource
argument_list|()
argument_list|,
name|plan
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|MoveRegionState
operator|.
name|MOVE_REGION_ASSIGN
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE_REGION_ASSIGN
case|:
name|AssignProcedure
name|assignProcedure
init|=
name|plan
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|AssignProcedure
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
else|:
operator|new
name|AssignProcedure
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|plan
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|addChildProcedure
argument_list|(
name|assignProcedure
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|MoveRegionState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MoveRegionState
name|getInitialState
parameter_list|()
block|{
return|return
name|MoveRegionState
operator|.
name|MOVE_REGION_UNASSIGN
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
specifier|final
name|MoveRegionState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MoveRegionState
name|getState
parameter_list|(
specifier|final
name|int
name|stateId
parameter_list|)
block|{
return|return
name|MoveRegionState
operator|.
name|valueOf
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|plan
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|REGION_EDIT
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
specifier|final
name|MoveRegionStateData
operator|.
name|Builder
name|state
init|=
name|MoveRegionStateData
operator|.
name|newBuilder
argument_list|()
comment|// No need to serialize the RegionInfo. The super class has the region.
operator|.
name|setSourceServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|plan
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|plan
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|setDestinationServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|plan
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|serialize
argument_list|(
name|state
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
specifier|final
name|MoveRegionStateData
name|state
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|MoveRegionStateData
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|regionInfo
init|=
name|getRegion
argument_list|()
decl_stmt|;
comment|// Get it from super class deserialization.
specifier|final
name|ServerName
name|sourceServer
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|state
operator|.
name|getSourceServer
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|destinationServer
init|=
name|state
operator|.
name|hasDestinationServer
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|state
operator|.
name|getDestinationServer
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|this
operator|.
name|plan
operator|=
operator|new
name|RegionPlan
argument_list|(
name|regionInfo
argument_list|,
name|sourceServer
argument_list|,
name|destinationServer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

