begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|MultiUserAuthorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|UserAuthorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|HBaseZeroCopyByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Utility method to support visibility  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|VisibilityUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VISIBILITY_LABEL_GENERATOR_CLASS
init|=
literal|"hbase.regionserver.scan.visibility.label.generator.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|VISIBILITY_TAG_TYPE
init|=
name|TagType
operator|.
name|VISIBILITY_TAG_TYPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|VISIBILITY_EXP_SERIALIZATION_TAG_TYPE
init|=
name|TagType
operator|.
name|VISIBILITY_EXP_SERIALIZATION_TAG_TYPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_LABEL
init|=
literal|"system"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Tag
name|VIS_SERIALIZATION_TAG
init|=
operator|new
name|Tag
argument_list|(
name|VISIBILITY_EXP_SERIALIZATION_TAG_TYPE
argument_list|,
name|VisibilityConstants
operator|.
name|SORTED_ORDINAL_SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMA
init|=
literal|","
decl_stmt|;
comment|/**    * Creates the labels data to be written to zookeeper.    * @param existingLabels    * @return Bytes form of labels and their ordinal details to be written to zookeeper.    */
specifier|public
specifier|static
name|byte
index|[]
name|getDataToWriteToZooKeeper
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|existingLabels
parameter_list|)
block|{
name|VisibilityLabelsRequest
operator|.
name|Builder
name|visReqBuilder
init|=
name|VisibilityLabelsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|existingLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|VisibilityLabel
operator|.
name|Builder
name|visLabBuilder
init|=
name|VisibilityLabel
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|visLabBuilder
operator|.
name|setLabel
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|visLabBuilder
operator|.
name|setOrdinal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|visReqBuilder
operator|.
name|addVisLabel
argument_list|(
name|visLabBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|visReqBuilder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates the user auth data to be written to zookeeper.    * @param userAuths    * @return Bytes form of user auths details to be written to zookeeper.    */
specifier|public
specifier|static
name|byte
index|[]
name|getUserAuthsDataToWriteToZooKeeper
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|userAuths
parameter_list|)
block|{
name|MultiUserAuthorizations
operator|.
name|Builder
name|builder
init|=
name|MultiUserAuthorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|userAuths
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UserAuthorizations
operator|.
name|Builder
name|userAuthsBuilder
init|=
name|UserAuthorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userAuthsBuilder
operator|.
name|setUser
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|label
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userAuthsBuilder
operator|.
name|addAuth
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserAuths
argument_list|(
name|userAuthsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reads back from the zookeeper. The data read here is of the form written by    * writeToZooKeeper(Map<byte[], Integer> entries).    *     * @param data    * @return Labels and their ordinal details    * @throws DeserializationException    */
specifier|public
specifier|static
name|List
argument_list|<
name|VisibilityLabel
argument_list|>
name|readLabelsFromZKData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|VisibilityLabelsRequest
name|request
init|=
name|VisibilityLabelsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|pblen
argument_list|,
name|data
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|request
operator|.
name|getVisLabelList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Reads back User auth data written to zookeeper.    * @param data    * @return User auth details    * @throws DeserializationException    */
specifier|public
specifier|static
name|MultiUserAuthorizations
name|readUserAuthsFromZKData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|MultiUserAuthorizations
name|multiUserAuths
init|=
name|MultiUserAuthorizations
operator|.
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|pblen
argument_list|,
name|data
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|multiUserAuths
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ScanLabelGenerator
argument_list|>
name|getScanLabelGenerators
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// There can be n SLG specified as comma separated in conf
name|String
name|slgClassesCommaSeparated
init|=
name|conf
operator|.
name|get
argument_list|(
name|VISIBILITY_LABEL_GENERATOR_CLASS
argument_list|)
decl_stmt|;
comment|// We have only System level SLGs now. The order of execution will be same as the order in the
comment|// comma separated config value
name|List
argument_list|<
name|ScanLabelGenerator
argument_list|>
name|slgs
init|=
operator|new
name|ArrayList
argument_list|<
name|ScanLabelGenerator
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|slgClassesCommaSeparated
argument_list|)
condition|)
block|{
name|String
index|[]
name|slgClasses
init|=
name|slgClassesCommaSeparated
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|slgClass
range|:
name|slgClasses
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ScanLabelGenerator
argument_list|>
name|slgKlass
decl_stmt|;
try|try
block|{
name|slgKlass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ScanLabelGenerator
argument_list|>
operator|)
name|conf
operator|.
name|getClassByName
argument_list|(
name|slgClass
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|slgs
operator|.
name|add
argument_list|(
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|slgKlass
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// If the conf is not configured by default we need to have one SLG to be used
comment|// ie. DefaultScanLabelGenerator
if|if
condition|(
name|slgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|slgs
operator|.
name|add
argument_list|(
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|DefaultScanLabelGenerator
operator|.
name|class
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|slgs
return|;
block|}
comment|/**    * Get the list of visibility tags in the given cell    * @param cell - the cell    * @param tags - the tags array that will be populated if    * visibility tags are present    * @return true if the tags are in sorted order.    */
specifier|public
specifier|static
name|boolean
name|getVisibilityTags
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|boolean
name|sortedOrder
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_EXP_SERIALIZATION_TAG_TYPE
condition|)
block|{
name|int
name|serializationVersion
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|tag
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializationVersion
operator|==
name|VisibilityConstants
operator|.
name|VISIBILITY_SERIALIZATION_VERSION
condition|)
block|{
name|sortedOrder
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sortedOrder
return|;
block|}
comment|/**    * Checks if the cell has a visibility tag    * @param cell    * @return true if found, false if not found    */
specifier|public
specifier|static
name|boolean
name|isVisibilityTagsPresent
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Checks for the matching visibility labels in the delete mutation and    * the cell in consideration    * @param cell - the cell    * @param visibilityTagsInDeleteCell - that list of tags in the delete mutation    * (the specified Cell Visibility)    * @return true if matching tags are found    */
specifier|public
specifier|static
name|boolean
name|checkForMatchingVisibilityTags
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|visibilityTagsInDeleteCell
parameter_list|)
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|sortedTags
init|=
name|getVisibilityTags
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|tags
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Early out if there are no tags in the cell
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sortedTags
condition|)
block|{
return|return
name|checkForMatchingVisibilityTagsWithSortedOrder
argument_list|(
name|visibilityTagsInDeleteCell
argument_list|,
name|tags
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|checkForMatchingVisibilityTagsWithOutSortedOrder
argument_list|(
name|cell
argument_list|,
name|visibilityTagsInDeleteCell
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should not happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception while sorting the tags from the cell"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkForMatchingVisibilityTagsWithOutSortedOrder
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|visibilityTagsInDeleteCell
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortedDeleteTags
init|=
name|sortTagsBasedOnOrdinal
argument_list|(
name|visibilityTagsInDeleteCell
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortedTags
init|=
name|sortTagsBasedOnOrdinal
argument_list|(
name|cell
argument_list|)
decl_stmt|;
return|return
name|compareTagsOrdinals
argument_list|(
name|sortedDeleteTags
argument_list|,
name|sortedTags
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkForMatchingVisibilityTagsWithSortedOrder
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|visibilityTagsInDeleteCell
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|boolean
name|matchFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|visibilityTagsInDeleteCell
operator|.
name|size
argument_list|()
operator|)
operator|!=
name|tags
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// If the size does not match. Definitely we are not comparing the
comment|// equal tags.
comment|// Return false in that case.
return|return
name|matchFound
return|;
block|}
for|for
control|(
name|Tag
name|tag
range|:
name|visibilityTagsInDeleteCell
control|)
block|{
name|matchFound
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Tag
name|givenTag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|tag
operator|.
name|getTagOffset
argument_list|()
argument_list|,
name|tag
operator|.
name|getTagLength
argument_list|()
argument_list|,
name|givenTag
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|givenTag
operator|.
name|getTagOffset
argument_list|()
argument_list|,
name|givenTag
operator|.
name|getTagLength
argument_list|()
argument_list|)
condition|)
block|{
name|matchFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matchFound
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortTagsBasedOnOrdinal
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|fullTagsList
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|getSortedTagOrdinals
argument_list|(
name|fullTagsList
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fullTagsList
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortTagsBasedOnOrdinal
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|fullTagsList
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|VisibilityUtils
operator|.
name|VISIBILITY_TAG_TYPE
condition|)
block|{
name|getSortedTagOrdinals
argument_list|(
name|fullTagsList
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fullTagsList
return|;
block|}
specifier|private
specifier|static
name|void
name|getSortedTagOrdinals
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|fullTagsList
parameter_list|,
name|Tag
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|tagsOrdinalInSortedOrder
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|tag
operator|.
name|getTagOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|+
name|tag
operator|.
name|getTagLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|endOffset
condition|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|result
init|=
name|StreamUtils
operator|.
name|readRawVarint32
argument_list|(
name|tag
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|tagsOrdinalInSortedOrder
operator|.
name|add
argument_list|(
name|result
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tagsOrdinalInSortedOrder
argument_list|)
expr_stmt|;
name|fullTagsList
operator|.
name|add
argument_list|(
name|tagsOrdinalInSortedOrder
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|compareTagsOrdinals
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tagsInDeletes
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tags
parameter_list|)
block|{
name|boolean
name|matchFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tagsInDeletes
operator|.
name|size
argument_list|()
operator|!=
name|tags
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|matchFound
return|;
block|}
else|else
block|{
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|deleteTagOrdinals
range|:
name|tagsInDeletes
control|)
block|{
name|matchFound
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|tagOrdinals
range|:
name|tags
control|)
block|{
if|if
condition|(
name|deleteTagOrdinals
operator|.
name|equals
argument_list|(
name|tagOrdinals
argument_list|)
condition|)
block|{
name|matchFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matchFound
return|;
block|}
block|}
block|}
end_class

end_unit

