begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoop
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CompletionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|asyncfs
operator|.
name|AsyncFSOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|asyncfs
operator|.
name|AsyncFSOutputHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALTrailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AsyncFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * AsyncWriter for protobuf-based WAL.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AsyncProtobufLogWriter
extends|extends
name|AbstractProtobufLogWriter
implements|implements
name|AsyncFSWALProvider
operator|.
name|AsyncWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncProtobufLogWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|BlockingCompletionHandler
implements|implements
name|CompletionHandler
argument_list|<
name|Long
argument_list|,
name|Void
argument_list|>
block|{
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
specifier|private
name|boolean
name|finished
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|Long
name|result
parameter_list|,
name|Void
name|attachment
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|size
operator|=
name|result
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|exc
parameter_list|,
name|Void
name|attachment
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|error
operator|=
name|exc
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|get
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|finished
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|error
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|error
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
block|}
block|}
specifier|private
specifier|final
name|EventLoop
name|eventLoop
decl_stmt|;
specifier|private
name|AsyncFSOutput
name|output
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|buf
decl_stmt|;
specifier|public
name|AsyncProtobufLogWriter
parameter_list|(
name|EventLoop
name|eventLoop
parameter_list|)
block|{
name|this
operator|.
name|eventLoop
operator|=
name|eventLoop
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setCompressionContext
argument_list|(
name|compressionContext
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|compressor
argument_list|)
operator|.
name|setFollowingKvCount
argument_list|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not happen"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|length
operator|.
name|addAndGet
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|buf
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cellEncoder
operator|.
name|write
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|length
operator|.
name|addAndGet
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|buf
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not happen"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|A
parameter_list|>
name|void
name|sync
parameter_list|(
name|CompletionHandler
argument_list|<
name|Long
argument_list|,
name|A
argument_list|>
name|handler
parameter_list|,
name|A
name|attachment
parameter_list|)
block|{
name|output
operator|.
name|flush
argument_list|(
name|attachment
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|output
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|writeWALTrailer
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"normal close failed, try recover"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|output
operator|.
name|recoverAndClose
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|AsyncFSOutput
name|getOutput
parameter_list|()
block|{
return|return
name|this
operator|.
name|output
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initOutput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|overwritable
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|output
operator|=
name|AsyncFSOutputHelper
operator|.
name|createOutput
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|overwritable
argument_list|,
literal|false
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|eventLoop
argument_list|)
expr_stmt|;
name|this
operator|.
name|buf
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|writeMagicAndWALHeader
parameter_list|(
name|byte
index|[]
name|magic
parameter_list|,
name|WALHeader
name|header
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|header
operator|.
name|writeDelimitedTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
specifier|final
name|BlockingCompletionHandler
name|handler
init|=
operator|new
name|BlockingCompletionHandler
argument_list|()
decl_stmt|;
name|eventLoop
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|output
operator|.
name|write
argument_list|(
name|ProtobufLogReader
operator|.
name|PB_WAL_MAGIC
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|buf
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|writeWALTrailerAndMagic
parameter_list|(
name|WALTrailer
name|trailer
parameter_list|,
specifier|final
name|byte
index|[]
name|magic
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|trailer
operator|.
name|writeTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
specifier|final
name|BlockingCompletionHandler
name|handler
init|=
operator|new
name|BlockingCompletionHandler
argument_list|()
decl_stmt|;
name|eventLoop
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|output
operator|.
name|write
argument_list|(
name|buf
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|magic
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|OutputStream
name|getOutputStreamForCellEncoder
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
block|}
end_class

end_unit

