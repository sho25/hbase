begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsTableWrapperAggregateImpl
implements|implements
name|MetricsTableWrapperAggregate
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|HRegionServer
name|regionServer
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
name|Runnable
name|runnable
decl_stmt|;
specifier|private
name|long
name|period
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|tableMetricsUpdateTask
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|TableName
argument_list|,
name|MetricsTableValues
argument_list|>
name|metricsTableMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|MetricsTableWrapperAggregateImpl
parameter_list|(
specifier|final
name|HRegionServer
name|regionServer
parameter_list|)
block|{
name|this
operator|.
name|regionServer
operator|=
name|regionServer
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|regionServer
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_METRICS_PERIOD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_METRICS_PERIOD
argument_list|)
operator|+
literal|1000
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsExecutor
operator|.
name|class
argument_list|)
operator|.
name|getExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|runnable
operator|=
operator|new
name|TableMetricsWrapperRunnable
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableMetricsUpdateTask
operator|=
name|this
operator|.
name|executor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|this
operator|.
name|runnable
argument_list|,
name|period
argument_list|,
name|this
operator|.
name|period
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TableMetricsWrapperRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|MetricsTableValues
argument_list|>
name|localMetricsTableMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|r
range|:
name|regionServer
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
name|TableName
name|tbl
init|=
name|r
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|MetricsTableValues
name|metricsTable
init|=
name|localMetricsTableMap
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
block|{
name|metricsTable
operator|=
operator|new
name|MetricsTableValues
argument_list|()
expr_stmt|;
name|localMetricsTableMap
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
name|metricsTable
argument_list|)
expr_stmt|;
block|}
name|long
name|tempStorefilesSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|r
operator|.
name|getStores
argument_list|()
control|)
block|{
name|tempStorefilesSize
operator|+=
name|store
operator|.
name|getStorefilesSize
argument_list|()
expr_stmt|;
block|}
name|metricsTable
operator|.
name|setMemStoresSize
argument_list|(
name|metricsTable
operator|.
name|getMemStoresSize
argument_list|()
operator|+
name|r
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|metricsTable
operator|.
name|setStoreFilesSize
argument_list|(
name|metricsTable
operator|.
name|getStoreFilesSize
argument_list|()
operator|+
name|tempStorefilesSize
argument_list|)
expr_stmt|;
name|metricsTable
operator|.
name|setTableSize
argument_list|(
name|metricsTable
operator|.
name|getMemStoresSize
argument_list|()
operator|+
name|metricsTable
operator|.
name|getStoreFilesSize
argument_list|()
argument_list|)
expr_stmt|;
name|metricsTable
operator|.
name|setReadRequestsCount
argument_list|(
name|metricsTable
operator|.
name|getReadRequestsCount
argument_list|()
operator|+
name|r
operator|.
name|getReadRequestsCount
argument_list|()
argument_list|)
expr_stmt|;
name|metricsTable
operator|.
name|setWriteRequestsCount
argument_list|(
name|metricsTable
operator|.
name|getWriteRequestsCount
argument_list|()
operator|+
name|r
operator|.
name|getWriteRequestsCount
argument_list|()
argument_list|)
expr_stmt|;
name|metricsTable
operator|.
name|setTotalRequestsCount
argument_list|(
name|metricsTable
operator|.
name|getReadRequestsCount
argument_list|()
operator|+
name|metricsTable
operator|.
name|getWriteRequestsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|MetricsTableValues
argument_list|>
name|entry
range|:
name|localMetricsTableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|tbl
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|metricsTableMap
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
operator|==
literal|null
condition|)
block|{
name|MetricsTableSource
name|tableSource
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsRegionServerSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|createTable
argument_list|(
name|tbl
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|MetricsTableWrapperAggregateImpl
operator|.
name|this
argument_list|)
decl_stmt|;
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsRegionServerSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|getTableAggregate
argument_list|()
operator|.
name|register
argument_list|(
name|tbl
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|tableSource
argument_list|)
expr_stmt|;
block|}
name|metricsTableMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|TableName
argument_list|>
name|existingTableNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|metricsTableMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|existingTableNames
operator|.
name|removeAll
argument_list|(
name|localMetricsTableMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|MetricsTableAggregateSource
name|agg
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsRegionServerSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|getTableAggregate
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|existingTableNames
control|)
block|{
name|agg
operator|.
name|deregister
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metricsTableMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|metricsTableMap
operator|.
name|remove
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadRequestsCount
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getReadRequestsCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteRequestsCount
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTotalRequestsCount
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getTotalRequestsCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemStoresSize
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getMemStoresSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStoreFilesSize
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getStoreFilesSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTableSize
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|MetricsTableValues
name|metricsTable
init|=
name|metricsTableMap
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsTable
operator|==
literal|null
condition|)
return|return
literal|0
return|;
else|else
return|return
name|metricsTable
operator|.
name|getTableSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tableMetricsUpdateTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MetricsTableValues
block|{
specifier|private
name|long
name|totalRequestsCount
decl_stmt|;
specifier|private
name|long
name|readRequestsCount
decl_stmt|;
specifier|private
name|long
name|writeRequestsCount
decl_stmt|;
specifier|private
name|long
name|memstoresSize
decl_stmt|;
specifier|private
name|long
name|storeFilesSize
decl_stmt|;
specifier|private
name|long
name|tableSize
decl_stmt|;
specifier|public
name|long
name|getTotalRequestsCount
parameter_list|()
block|{
return|return
name|totalRequestsCount
return|;
block|}
specifier|public
name|void
name|setTotalRequestsCount
parameter_list|(
name|long
name|totalRequestsCount
parameter_list|)
block|{
name|this
operator|.
name|totalRequestsCount
operator|=
name|totalRequestsCount
expr_stmt|;
block|}
specifier|public
name|long
name|getReadRequestsCount
parameter_list|()
block|{
return|return
name|readRequestsCount
return|;
block|}
specifier|public
name|void
name|setReadRequestsCount
parameter_list|(
name|long
name|readRequestsCount
parameter_list|)
block|{
name|this
operator|.
name|readRequestsCount
operator|=
name|readRequestsCount
expr_stmt|;
block|}
specifier|public
name|long
name|getWriteRequestsCount
parameter_list|()
block|{
return|return
name|writeRequestsCount
return|;
block|}
specifier|public
name|void
name|setWriteRequestsCount
parameter_list|(
name|long
name|writeRequestsCount
parameter_list|)
block|{
name|this
operator|.
name|writeRequestsCount
operator|=
name|writeRequestsCount
expr_stmt|;
block|}
specifier|public
name|long
name|getMemStoresSize
parameter_list|()
block|{
return|return
name|memstoresSize
return|;
block|}
specifier|public
name|void
name|setMemStoresSize
parameter_list|(
name|long
name|memstoresSize
parameter_list|)
block|{
name|this
operator|.
name|memstoresSize
operator|=
name|memstoresSize
expr_stmt|;
block|}
specifier|public
name|long
name|getStoreFilesSize
parameter_list|()
block|{
return|return
name|storeFilesSize
return|;
block|}
specifier|public
name|void
name|setStoreFilesSize
parameter_list|(
name|long
name|storeFilesSize
parameter_list|)
block|{
name|this
operator|.
name|storeFilesSize
operator|=
name|storeFilesSize
expr_stmt|;
block|}
specifier|public
name|long
name|getTableSize
parameter_list|()
block|{
return|return
name|tableSize
return|;
block|}
specifier|public
name|void
name|setTableSize
parameter_list|(
name|long
name|tableSize
parameter_list|)
block|{
name|this
operator|.
name|tableSize
operator|=
name|tableSize
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

