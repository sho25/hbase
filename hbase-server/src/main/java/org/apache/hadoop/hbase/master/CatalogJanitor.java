begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|GCMultipleMergedRegionsProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|GCRegionProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A janitor for the catalog tables. Scans the<code>hbase:meta</code> catalog  * table on a period. Makes a lastReport on state of hbase:meta. Looks for unused  * regions to garbage collect. Scan of hbase:meta runs if we are NOT in maintenance  * mode, if we are NOT shutting down, AND if the assignmentmanager is loaded.  * Playing it safe, we will garbage collect no-longer needed region references  * only if there are no regions-in-transition (RIT).  */
end_comment

begin_comment
comment|// TODO: Only works with single hbase:meta region currently.  Fix.
end_comment

begin_comment
comment|// TODO: Should it start over every time? Could it continue if runs into problem? Only if
end_comment

begin_comment
comment|// problem does not mess up 'results'.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CatalogJanitor
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CatalogJanitor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|alreadyRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|enabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|services
decl_stmt|;
comment|/**    * Saved report from last hbase:meta scan to completion. May be stale if having trouble    * completing scan. Check its date.    */
specifier|private
specifier|volatile
name|Report
name|lastReport
decl_stmt|;
name|CatalogJanitor
parameter_list|(
specifier|final
name|MasterServices
name|services
parameter_list|)
block|{
name|super
argument_list|(
literal|"CatalogJanitor-"
operator|+
name|services
operator|.
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
argument_list|,
name|services
argument_list|,
name|services
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.catalogjanitor.interval"
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getEnabled
argument_list|()
condition|)
block|{
name|scan
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed initial janitorial scan of hbase:meta table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|setEnabled
parameter_list|(
specifier|final
name|boolean
name|enabled
parameter_list|)
block|{
name|boolean
name|alreadyEnabled
init|=
name|this
operator|.
name|enabled
operator|.
name|getAndSet
argument_list|(
name|enabled
argument_list|)
decl_stmt|;
comment|// If disabling is requested on an already enabled chore, we could have an active
comment|// scan still going on, callers might not be aware of that and do further action thinkng
comment|// that no action would be from this chore.  In this case, the right action is to wait for
comment|// the active scan to complete before exiting this function.
if|if
condition|(
operator|!
name|enabled
operator|&&
name|alreadyEnabled
condition|)
block|{
while|while
condition|(
name|alreadyRunning
operator|.
name|get
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|alreadyEnabled
return|;
block|}
name|boolean
name|getEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|enabled
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|AssignmentManager
name|am
init|=
name|this
operator|.
name|services
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|getEnabled
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|services
operator|.
name|isInMaintenanceMode
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|isClusterShutdown
argument_list|()
operator|&&
name|isMetaLoaded
argument_list|(
name|am
argument_list|)
condition|)
block|{
name|scan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"CatalogJanitor is disabled! Enabled="
operator|+
name|getEnabled
argument_list|()
operator|+
literal|", maintenanceMode="
operator|+
name|this
operator|.
name|services
operator|.
name|isInMaintenanceMode
argument_list|()
operator|+
literal|", am="
operator|+
name|am
operator|+
literal|", metaLoaded="
operator|+
name|isMetaLoaded
argument_list|(
name|am
argument_list|)
operator|+
literal|", hasRIT="
operator|+
name|isRIT
argument_list|(
name|am
argument_list|)
operator|+
literal|" clusterShutDown="
operator|+
name|this
operator|.
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|isClusterShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed janitorial scan of hbase:meta table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMetaLoaded
parameter_list|(
name|AssignmentManager
name|am
parameter_list|)
block|{
return|return
name|am
operator|!=
literal|null
operator|&&
name|am
operator|.
name|isMetaLoaded
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isRIT
parameter_list|(
name|AssignmentManager
name|am
parameter_list|)
block|{
return|return
name|isMetaLoaded
argument_list|(
name|am
argument_list|)
operator|&&
name|am
operator|.
name|hasRegionsInTransition
argument_list|()
return|;
block|}
comment|/**    * Run janitorial scan of catalog<code>hbase:meta</code> table looking for    * garbage to collect.    * @return How many items gc'd whether for merge or split.    */
name|int
name|scan
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|gcs
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|alreadyRunning
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CatalogJanitor already running"
argument_list|)
expr_stmt|;
return|return
name|gcs
return|;
block|}
name|Report
name|report
init|=
name|scanForReport
argument_list|()
decl_stmt|;
name|this
operator|.
name|lastReport
operator|=
name|report
expr_stmt|;
if|if
condition|(
operator|!
name|report
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRIT
argument_list|(
name|this
operator|.
name|services
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Playing-it-safe skipping merge/split gc'ing of regions from hbase:meta while "
operator|+
literal|"regions-in-transition (RIT)"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|mergedRegions
init|=
name|report
operator|.
name|mergedRegions
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|e
range|:
name|mergedRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|.
name|services
operator|.
name|isInMaintenanceMode
argument_list|()
condition|)
block|{
comment|// Stop cleaning if the master is in maintenance mode
break|break;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
init|=
name|MetaTableAccessor
operator|.
name|getMergeRegions
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|rawCells
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
operator|&&
name|cleanMergeRegion
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|parents
argument_list|)
condition|)
block|{
name|gcs
operator|++
expr_stmt|;
block|}
block|}
comment|// Clean split parents
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|splitParents
init|=
name|report
operator|.
name|splitParents
decl_stmt|;
comment|// Now work on our list of found parents. See if any we can clean up.
name|HashSet
argument_list|<
name|String
argument_list|>
name|parentNotCleaned
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|e
range|:
name|splitParents
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|.
name|services
operator|.
name|isInMaintenanceMode
argument_list|()
condition|)
block|{
comment|// Stop cleaning if the master is in maintenance mode
break|break;
block|}
if|if
condition|(
operator|!
name|parentNotCleaned
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|&&
name|cleanParent
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|gcs
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// We could not clean the parent, so it's daughters should not be
comment|// cleaned either (HBASE-6160)
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|daughters
init|=
name|MetaTableAccessor
operator|.
name|getDaughterRegions
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|parentNotCleaned
operator|.
name|add
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|parentNotCleaned
operator|.
name|add
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|gcs
return|;
block|}
finally|finally
block|{
name|alreadyRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Scan hbase:meta.    * @return Return generated {@link Report}    */
name|Report
name|scanForReport
parameter_list|()
throws|throws
name|IOException
block|{
name|ReportMakingVisitor
name|visitor
init|=
operator|new
name|ReportMakingVisitor
argument_list|(
name|this
operator|.
name|services
argument_list|)
decl_stmt|;
comment|// Null tablename means scan all of meta.
name|MetaTableAccessor
operator|.
name|scanMetaForTableRegions
argument_list|(
name|this
operator|.
name|services
operator|.
name|getConnection
argument_list|()
argument_list|,
name|visitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getReport
argument_list|()
return|;
block|}
comment|/**    * @return Returns last published Report that comes of last successful scan    *   of hbase:meta.    */
specifier|public
name|Report
name|getLastReport
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastReport
return|;
block|}
comment|/**    * If merged region no longer holds reference to the merge regions, archive    * merge region on hdfs and perform deleting references in hbase:meta    * @return true if we delete references in merged region on hbase:meta and archive    *   the files on the file system    */
specifier|private
name|boolean
name|cleanMergeRegion
parameter_list|(
specifier|final
name|RegionInfo
name|mergedRegion
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootdir
init|=
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|mergedRegion
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|getDescriptor
argument_list|(
name|mergedRegion
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regionFs
operator|=
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|this
operator|.
name|services
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tabledir
argument_list|,
name|mergedRegion
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Merged region does not exist: "
operator|+
name|mergedRegion
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionFs
operator|==
literal|null
operator|||
operator|!
name|regionFs
operator|.
name|hasReferences
argument_list|(
name|htd
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting parents ({}) from fs; merged child {} no longer holds references"
argument_list|,
name|parents
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|RegionInfo
operator|.
name|getShortNameToLog
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
name|mergedRegion
argument_list|)
expr_stmt|;
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|pe
init|=
name|this
operator|.
name|services
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|pe
operator|.
name|submitProcedure
argument_list|(
operator|new
name|GCMultipleMergedRegionsProcedure
argument_list|(
name|pe
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|mergedRegion
argument_list|,
name|parents
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|ri
range|:
name|parents
control|)
block|{
comment|// The above scheduled GCMultipleMergedRegionsProcedure does the below.
comment|// Do we need this?
name|this
operator|.
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|deleteRegion
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|removeRegion
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Compare HRegionInfos in a way that has split parents sort BEFORE their daughters.    */
specifier|static
class|class
name|SplitParentFirstComparator
implements|implements
name|Comparator
argument_list|<
name|RegionInfo
argument_list|>
block|{
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|rowEndKeyComparator
init|=
operator|new
name|Bytes
operator|.
name|RowEndKeyComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RegionInfo
name|left
parameter_list|,
name|RegionInfo
name|right
parameter_list|)
block|{
comment|// This comparator differs from the one RegionInfo in that it sorts
comment|// parent before daughters.
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Same table name.
name|int
name|result
init|=
name|left
operator|.
name|getTable
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare start keys.
name|result
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|right
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare end keys, but flip the operands so parent comes first
name|result
operator|=
name|rowEndKeyComparator
operator|.
name|compare
argument_list|(
name|right
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|left
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * If daughters no longer hold reference to the parents, delete the parent.    * @param parent RegionInfo of split offlined parent    * @param rowContent Content of<code>parent</code> row in    *<code>metaRegionName</code>    * @return True if we removed<code>parent</code> from meta table and from    * the filesystem.    */
name|boolean
name|cleanParent
parameter_list|(
specifier|final
name|RegionInfo
name|parent
parameter_list|,
name|Result
name|rowContent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether it is a merged region and if it is clean of references.
if|if
condition|(
name|MetaTableAccessor
operator|.
name|hasMergeRegions
argument_list|(
name|rowContent
operator|.
name|rawCells
argument_list|()
argument_list|)
condition|)
block|{
comment|// Wait until clean of merge parent regions first
return|return
literal|false
return|;
block|}
comment|// Run checks on each daughter split.
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|daughters
init|=
name|MetaTableAccessor
operator|.
name|getDaughterRegions
argument_list|(
name|rowContent
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|a
init|=
name|checkDaughterInFs
argument_list|(
name|parent
argument_list|,
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|b
init|=
name|checkDaughterInFs
argument_list|(
name|parent
argument_list|,
name|daughters
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasNoReferences
argument_list|(
name|a
argument_list|)
operator|&&
name|hasNoReferences
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|String
name|daughterA
init|=
name|daughters
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|?
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|String
name|daughterB
init|=
name|daughters
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|?
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting region "
operator|+
name|parent
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" because daughters -- "
operator|+
name|daughterA
operator|+
literal|", "
operator|+
name|daughterB
operator|+
literal|" -- no longer hold references"
argument_list|)
expr_stmt|;
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|pe
init|=
name|this
operator|.
name|services
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|pe
operator|.
name|submitProcedure
argument_list|(
operator|new
name|GCRegionProcedure
argument_list|(
name|pe
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove from in-memory states
name|this
operator|.
name|services
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|deleteRegion
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|removeRegion
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param p A pair where the first boolean says whether or not the daughter    * region directory exists in the filesystem and then the second boolean says    * whether the daughter has references to the parent.    * @return True the passed<code>p</code> signifies no references.    */
specifier|private
name|boolean
name|hasNoReferences
parameter_list|(
specifier|final
name|Pair
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|p
parameter_list|)
block|{
return|return
operator|!
name|p
operator|.
name|getFirst
argument_list|()
operator|||
operator|!
name|p
operator|.
name|getSecond
argument_list|()
return|;
block|}
comment|/**    * Checks if a daughter region -- either splitA or splitB -- still holds    * references to parent.    * @param parent Parent region    * @param daughter Daughter region    * @return A pair where the first boolean says whether or not the daughter    *   region directory exists in the filesystem and then the second boolean says    *   whether the daughter has references to the parent.    */
specifier|private
name|Pair
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checkDaughterInFs
parameter_list|(
specifier|final
name|RegionInfo
name|parent
parameter_list|,
specifier|final
name|RegionInfo
name|daughter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|daughter
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
name|FileSystem
name|fs
init|=
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootdir
init|=
name|this
operator|.
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|daughter
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|daughterRegionDir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|daughter
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|isExists
argument_list|(
name|fs
argument_list|,
name|daughterRegionDir
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to determine if daughter region exists, "
operator|+
literal|"assuming exists and has references"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
name|boolean
name|references
init|=
literal|false
decl_stmt|;
name|TableDescriptor
name|parentDescriptor
init|=
name|getDescriptor
argument_list|(
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|regionFs
operator|=
name|HRegionFileSystem
operator|.
name|openRegionFromFileSystem
argument_list|(
name|this
operator|.
name|services
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tabledir
argument_list|,
name|daughter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|family
range|:
name|parentDescriptor
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|references
operator|=
name|regionFs
operator|.
name|hasReferences
argument_list|(
name|family
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to determine referenced files from : "
operator|+
name|daughter
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", to: "
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" assuming has references"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|references
argument_list|)
return|;
block|}
specifier|private
name|TableDescriptor
name|getDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|services
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Checks if the specified region has merge qualifiers, if so, try to clean them.    * @return true if no info:merge* columns; i.e. the specified region doesn't have    *   any merge qualifiers.    */
specifier|public
name|boolean
name|cleanMergeQualifier
parameter_list|(
specifier|final
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get merge regions if it is a merged region and already has merge qualifier
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
init|=
name|MetaTableAccessor
operator|.
name|getMergeRegions
argument_list|(
name|this
operator|.
name|services
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// It doesn't have merge qualifier, no need to clean
return|return
literal|true
return|;
block|}
return|return
name|cleanMergeRegion
argument_list|(
name|region
argument_list|,
name|parents
argument_list|)
return|;
block|}
comment|/**    * Report made by ReportMakingVisitor    */
specifier|public
specifier|static
class|class
name|Report
block|{
specifier|private
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Keep Map of found split parents. These are candidates for cleanup.
comment|// Use a comparator that has split parents come before its daughters.
specifier|final
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|splitParents
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|SplitParentFirstComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Result
argument_list|>
name|mergedRegions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|holes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|unknownServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyRegionInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
name|Report
parameter_list|()
block|{}
specifier|public
name|long
name|getCreateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|now
return|;
block|}
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|getHoles
parameter_list|()
block|{
return|return
name|this
operator|.
name|holes
return|;
block|}
comment|/**      * @return Overlap pairs found as we scanned hbase:meta; ordered by hbase:meta      *   table sort. Pairs of overlaps may have overlap with subsequent pairs.      * @see MetaFixer#calculateMerges(int, List) where we aggregate overlaps      *   for a single 'merge' call.      */
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|getOverlaps
parameter_list|()
block|{
return|return
name|this
operator|.
name|overlaps
return|;
block|}
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getUnknownServers
parameter_list|()
block|{
return|return
name|unknownServers
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getEmptyRegionInfo
parameter_list|()
block|{
return|return
name|emptyRegionInfo
return|;
block|}
comment|/**      * @return True if an 'empty' lastReport -- no problems found.      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|holes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|overlaps
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|unknownServers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|emptyRegionInfo
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
name|p
range|:
name|this
operator|.
name|holes
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"hole="
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
name|p
range|:
name|this
operator|.
name|overlaps
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"overlap="
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|r
range|:
name|this
operator|.
name|emptyRegionInfo
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"empty="
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
range|:
name|this
operator|.
name|unknownServers
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"unknown_server="
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Visitor we use in here in CatalogJanitor to go against hbase:meta table.    * Generates a Report made of a collection of split parents and counts of rows    * in the hbase:meta table. Also runs hbase:meta consistency checks to    * generate more report. Report is NOT ready until after this visitor has been    * {@link #close()}'d.    */
specifier|static
class|class
name|ReportMakingVisitor
implements|implements
name|MetaTableAccessor
operator|.
name|CloseableVisitor
block|{
specifier|private
specifier|final
name|MasterServices
name|services
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
comment|/**      * Report is not done until after the close has been called.      * @see #close()      * @see #getReport()      */
specifier|private
name|Report
name|report
init|=
operator|new
name|Report
argument_list|()
decl_stmt|;
comment|/**      * RegionInfo from previous row.      */
specifier|private
name|RegionInfo
name|previous
init|=
literal|null
decl_stmt|;
comment|/**      * Keep account of the highest end key seen as we move through hbase:meta.      * Usually, the current RegionInfo has the highest end key but if an overlap,      * this may no longer hold. An overlap may be a region with startkey 'd' and      * endkey 'g'. The next region in meta may be 'e' to 'f' and then 'f' to 'g'.      * Looking at previous and current meta row, we won't know about the 'd' to 'g'      * overlap unless we keep a running 'highest-endpoint-seen'.      */
specifier|private
name|RegionInfo
name|highestEndKeyRegionInfo
init|=
literal|null
decl_stmt|;
name|ReportMakingVisitor
parameter_list|(
name|MasterServices
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
block|}
comment|/**      * Do not call until after {@link #close()}.      * Will throw a {@link RuntimeException} if you do.      */
name|Report
name|getReport
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Report not ready until after close()"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|this
operator|.
name|report
operator|.
name|count
operator|++
expr_stmt|;
name|RegionInfo
name|regionInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regionInfo
operator|=
name|metaTableConsistencyCheck
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed consistency check on {}"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|regionInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|isSplitParent
argument_list|()
condition|)
block|{
comment|// splitParent means split and offline.
name|this
operator|.
name|report
operator|.
name|splitParents
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MetaTableAccessor
operator|.
name|hasMergeRegions
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|report
operator|.
name|mergedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Returning true means "keep scanning"
return|return
literal|true
return|;
block|}
comment|/**      * Check row.      * @param metaTableRow Row from hbase:meta table.      * @return Returns default regioninfo found in row parse as a convenience to save      *   on having to do a double-parse of Result.      */
specifier|private
name|RegionInfo
name|metaTableConsistencyCheck
parameter_list|(
name|Result
name|metaTableRow
parameter_list|)
block|{
name|RegionInfo
name|ri
decl_stmt|;
comment|// Locations comes back null if the RegionInfo field is empty.
comment|// If locations is null, ensure the regioninfo is for sure empty before progressing.
comment|// If really empty, report as missing regioninfo!  Otherwise, can run server check
comment|// and get RegionInfo from locations.
name|RegionLocations
name|locations
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|metaTableRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|ri
operator|=
name|MetaTableAccessor
operator|.
name|getRegionInfo
argument_list|(
name|metaTableRow
argument_list|,
name|MetaTableAccessor
operator|.
name|getRegionInfoColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ri
operator|=
name|locations
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|checkServer
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ri
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|report
operator|.
name|emptyRegionInfo
operator|.
name|add
argument_list|(
name|metaTableRow
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ri
return|;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|metaTableRow
operator|.
name|getRow
argument_list|()
argument_list|,
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"INCONSISTENCY: Row name is not equal to serialized info:regioninfo content; "
operator|+
literal|"row={} {}; See if RegionInfo is referenced in another hbase:meta row? Delete?"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|metaTableRow
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|ri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Skip split parent region
if|if
condition|(
name|ri
operator|.
name|isSplitParent
argument_list|()
condition|)
block|{
return|return
name|ri
return|;
block|}
comment|// If table is disabled, skip integrity check.
if|if
condition|(
operator|!
name|isTableDisabled
argument_list|(
name|ri
argument_list|)
condition|)
block|{
if|if
condition|(
name|isTableTransition
argument_list|(
name|ri
argument_list|)
condition|)
block|{
comment|// On table transition, look to see if last region was last in table
comment|// and if this is the first. Report 'hole' if neither is true.
comment|// HBCK1 used to have a special category for missing start or end keys.
comment|// We'll just lump them in as 'holes'.
if|if
condition|(
operator|(
name|this
operator|.
name|previous
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|previous
operator|.
name|isLast
argument_list|()
operator|)
operator|||
operator|!
name|ri
operator|.
name|isFirst
argument_list|()
condition|)
block|{
name|addHole
argument_list|(
name|this
operator|.
name|previous
operator|==
literal|null
condition|?
name|RegionInfo
operator|.
name|UNDEFINED
else|:
name|this
operator|.
name|previous
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|previous
operator|.
name|isNext
argument_list|(
name|ri
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|previous
operator|.
name|isOverlap
argument_list|(
name|ri
argument_list|)
condition|)
block|{
name|addOverlap
argument_list|(
name|this
operator|.
name|previous
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ri
operator|.
name|isOverlap
argument_list|(
name|this
operator|.
name|highestEndKeyRegionInfo
argument_list|)
condition|)
block|{
comment|// We may have seen a region a few rows back that overlaps this one.
name|addOverlap
argument_list|(
name|this
operator|.
name|highestEndKeyRegionInfo
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addHole
argument_list|(
name|this
operator|.
name|previous
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ri
operator|.
name|isOverlap
argument_list|(
name|this
operator|.
name|highestEndKeyRegionInfo
argument_list|)
condition|)
block|{
comment|// We may have seen a region a few rows back that overlaps this one
comment|// even though it properly 'follows' the region just before.
name|addOverlap
argument_list|(
name|this
operator|.
name|highestEndKeyRegionInfo
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|previous
operator|=
name|ri
expr_stmt|;
name|this
operator|.
name|highestEndKeyRegionInfo
operator|=
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
name|this
operator|.
name|highestEndKeyRegionInfo
argument_list|,
name|ri
argument_list|)
expr_stmt|;
return|return
name|ri
return|;
block|}
specifier|private
name|void
name|addOverlap
parameter_list|(
name|RegionInfo
name|a
parameter_list|,
name|RegionInfo
name|b
parameter_list|)
block|{
name|this
operator|.
name|report
operator|.
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addHole
parameter_list|(
name|RegionInfo
name|a
parameter_list|,
name|RegionInfo
name|b
parameter_list|)
block|{
name|this
operator|.
name|report
operator|.
name|holes
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return True if table is disabled or disabling; defaults false!      */
name|boolean
name|isTableDisabled
parameter_list|(
name|RegionInfo
name|ri
parameter_list|)
block|{
if|if
condition|(
name|ri
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|services
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|services
operator|.
name|getTableStateManager
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TableState
name|state
init|=
literal|null
decl_stmt|;
try|try
block|{
name|state
operator|=
name|this
operator|.
name|services
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|getTableState
argument_list|(
name|ri
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed getting table state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|isDisabledOrDisabling
argument_list|()
return|;
block|}
comment|/**      * Run through referenced servers and save off unknown and the dead.      */
specifier|private
name|void
name|checkServer
parameter_list|(
name|RegionLocations
name|locations
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|services
operator|==
literal|null
condition|)
block|{
comment|// Can't do this test if no services.
return|return;
block|}
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|locations
operator|.
name|getRegionLocations
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Check referenced servers are known/online.
for|for
control|(
name|HRegionLocation
name|location
range|:
name|locations
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ServerName
name|sn
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|location
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Empty RegionInfo in {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|// This should never happen but if it does, will mess up below.
continue|continue;
block|}
comment|// Skip split parent region
if|if
condition|(
name|location
operator|.
name|getRegion
argument_list|()
operator|.
name|isSplitParent
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// skip the offline regions which belong to disabled table.
if|if
condition|(
name|isTableDisabled
argument_list|(
name|location
operator|.
name|getRegion
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ServerManager
operator|.
name|ServerLiveState
name|state
init|=
name|this
operator|.
name|services
operator|.
name|getServerManager
argument_list|()
operator|.
name|isServerKnownAndOnline
argument_list|(
name|sn
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|UNKNOWN
case|:
name|this
operator|.
name|report
operator|.
name|unknownServers
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|location
operator|.
name|getRegion
argument_list|()
argument_list|,
name|sn
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
comment|/**      * @return True iff first row in hbase:meta or if we've broached a new table in hbase:meta      */
specifier|private
name|boolean
name|isTableTransition
parameter_list|(
name|RegionInfo
name|ri
parameter_list|)
block|{
return|return
name|this
operator|.
name|previous
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|previous
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|ri
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This is a table transition... after the last region. Check previous.
comment|// Should be last region. If not, its a hole on end of laster table.
if|if
condition|(
name|this
operator|.
name|previous
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|previous
operator|.
name|isLast
argument_list|()
condition|)
block|{
name|addHole
argument_list|(
name|this
operator|.
name|previous
argument_list|,
name|RegionInfo
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkLog4jProperties
parameter_list|()
block|{
name|String
name|filename
init|=
literal|"log4j.properties"
decl_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|inStream
init|=
name|CatalogJanitor
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|inStream
operator|!=
literal|null
condition|)
block|{
operator|new
name|Properties
argument_list|()
operator|.
name|load
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No "
operator|+
name|filename
operator|+
literal|" on classpath; Add one else no logging output!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log4j check failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For testing against a cluster.    * Doesn't have a MasterServices context so does not report on good vs bad servers.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|checkLog4jProperties
argument_list|()
expr_stmt|;
name|ReportMakingVisitor
name|visitor
init|=
operator|new
name|ReportMakingVisitor
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
literal|"hbase.defaults.for.version.skip"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
init|)
block|{
comment|/* Used to generate an overlap.       */
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t2,40,1564119846424.1db8c57d64e0733e0f027aaeae7a0bf0."
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|g
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|row
index|[
name|row
operator|.
name|length
operator|-
literal|2
index|]
operator|<<=
name|row
index|[
name|row
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|g
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|MetaTableAccessor
operator|.
name|scanMetaForTableRegions
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Report
name|report
init|=
name|visitor
operator|.
name|getReport
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|!=
literal|null
condition|?
name|report
operator|.
name|toString
argument_list|()
else|:
literal|"empty"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

