begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Utility class for tracking metrics for various types of coprocessors. Each coprocessor instance  * creates its own MetricRegistry which is exported as an individual MetricSource. MetricRegistries  * are ref counted using the hbase-metric module interfaces.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsCoprocessor
block|{
comment|// Master coprocessor metrics
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_COPROC_METRICS_NAME
init|=
literal|"Coprocessor.Master"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_COPROC_METRICS_CONTEXT
init|=
literal|"master"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_COPROC_METRICS_DESCRIPTION
init|=
literal|"Metrics about HBase MasterObservers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_COPROC_METRICS_JMX_CONTEXT
init|=
literal|"Master,sub="
operator|+
name|MASTER_COPROC_METRICS_NAME
decl_stmt|;
comment|// RegionServer coprocessor metrics
specifier|private
specifier|static
specifier|final
name|String
name|RS_COPROC_METRICS_NAME
init|=
literal|"Coprocessor.RegionServer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RS_COPROC_METRICS_CONTEXT
init|=
literal|"regionserver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RS_COPROC_METRICS_DESCRIPTION
init|=
literal|"Metrics about HBase RegionServerObservers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RS_COPROC_METRICS_JMX_CONTEXT
init|=
literal|"RegionServer,sub="
operator|+
name|RS_COPROC_METRICS_NAME
decl_stmt|;
comment|// Region coprocessor metrics
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COPROC_METRICS_NAME
init|=
literal|"Coprocessor.Region"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COPROC_METRICS_CONTEXT
init|=
literal|"regionserver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COPROC_METRICS_DESCRIPTION
init|=
literal|"Metrics about HBase RegionObservers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_COPROC_METRICS_JMX_CONTEXT
init|=
literal|"RegionServer,sub="
operator|+
name|REGION_COPROC_METRICS_NAME
decl_stmt|;
comment|// WAL coprocessor metrics
specifier|private
specifier|static
specifier|final
name|String
name|WAL_COPROC_METRICS_NAME
init|=
literal|"Coprocessor.WAL"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAL_COPROC_METRICS_CONTEXT
init|=
literal|"regionserver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAL_COPROC_METRICS_DESCRIPTION
init|=
literal|"Metrics about HBase WALObservers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAL_COPROC_METRICS_JMX_CONTEXT
init|=
literal|"RegionServer,sub="
operator|+
name|WAL_COPROC_METRICS_NAME
decl_stmt|;
specifier|private
specifier|static
name|String
name|suffix
parameter_list|(
name|String
name|metricName
parameter_list|,
name|String
name|cpName
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|metricName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
literal|"CP_"
argument_list|)
operator|.
name|append
argument_list|(
name|cpName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|MetricRegistryInfo
name|createRegistryInfoForMasterCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|MetricRegistryInfo
argument_list|(
name|suffix
argument_list|(
name|MASTER_COPROC_METRICS_NAME
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|MASTER_COPROC_METRICS_DESCRIPTION
argument_list|,
name|suffix
argument_list|(
name|MASTER_COPROC_METRICS_JMX_CONTEXT
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|MASTER_COPROC_METRICS_CONTEXT
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetricRegistry
name|createRegistryForMasterCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|create
argument_list|(
name|createRegistryInfoForMasterCoprocessor
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|MetricRegistryInfo
name|createRegistryInfoForRSCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|MetricRegistryInfo
argument_list|(
name|suffix
argument_list|(
name|RS_COPROC_METRICS_NAME
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|RS_COPROC_METRICS_DESCRIPTION
argument_list|,
name|suffix
argument_list|(
name|RS_COPROC_METRICS_JMX_CONTEXT
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|RS_COPROC_METRICS_CONTEXT
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetricRegistry
name|createRegistryForRSCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|create
argument_list|(
name|createRegistryInfoForRSCoprocessor
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|MetricRegistryInfo
name|createRegistryInfoForRegionCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|MetricRegistryInfo
argument_list|(
name|suffix
argument_list|(
name|REGION_COPROC_METRICS_NAME
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|REGION_COPROC_METRICS_DESCRIPTION
argument_list|,
name|suffix
argument_list|(
name|REGION_COPROC_METRICS_JMX_CONTEXT
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|REGION_COPROC_METRICS_CONTEXT
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetricRegistry
name|createRegistryForRegionCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|create
argument_list|(
name|createRegistryInfoForRegionCoprocessor
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|MetricRegistryInfo
name|createRegistryInfoForWALCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|MetricRegistryInfo
argument_list|(
name|suffix
argument_list|(
name|WAL_COPROC_METRICS_NAME
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|WAL_COPROC_METRICS_DESCRIPTION
argument_list|,
name|suffix
argument_list|(
name|WAL_COPROC_METRICS_JMX_CONTEXT
argument_list|,
name|clazz
argument_list|)
argument_list|,
name|WAL_COPROC_METRICS_CONTEXT
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetricRegistry
name|createRegistryForWALCoprocessor
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|create
argument_list|(
name|createRegistryInfoForWALCoprocessor
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|removeRegistry
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|remove
argument_list|(
name|registry
operator|.
name|getMetricRegistryInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

