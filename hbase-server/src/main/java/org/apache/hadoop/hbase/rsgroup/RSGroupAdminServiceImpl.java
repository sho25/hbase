begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedureSyncWait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|AddRSGroupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|AddRSGroupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|BalanceRSGroupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|BalanceRSGroupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoOfServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoOfServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoOfTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoOfTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|GetRSGroupInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|ListRSGroupInfosRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|ListRSGroupInfosResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveServersAndTablesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveServersAndTablesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveTablesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|MoveTablesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|RemoveRSGroupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|RemoveRSGroupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|RemoveServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupAdminProtos
operator|.
name|RemoveServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Implementation of RSGroupAdminService defined in RSGroupAdmin.proto. This class calls  * {@link RSGroupAdminServer} for actual work, converts result to protocol buffer response, handles  * exceptions if any occurred and then calls the {@code RpcCallback} with the response.  */
end_comment

begin_class
class|class
name|RSGroupAdminServiceImpl
extends|extends
name|RSGroupAdminProtos
operator|.
name|RSGroupAdminService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RSGroupAdminServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|private
name|RSGroupAdminServer
name|groupAdminServer
decl_stmt|;
specifier|private
name|AccessChecker
name|accessChecker
decl_stmt|;
comment|/** Provider for mapping principal names to Users */
specifier|private
name|UserProvider
name|userProvider
decl_stmt|;
name|RSGroupAdminServiceImpl
parameter_list|()
block|{   }
name|void
name|initialize
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|RSGroupAdminServer
name|groupAdminServer
parameter_list|,
name|AccessChecker
name|accessChecker
parameter_list|,
name|UserProvider
name|userProvider
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|groupAdminServer
operator|=
name|groupAdminServer
expr_stmt|;
name|this
operator|.
name|accessChecker
operator|=
name|accessChecker
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|checkPermission
parameter_list|(
name|String
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|accessChecker
operator|.
name|requirePermission
argument_list|(
name|getActiveUser
argument_list|()
argument_list|,
name|request
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the active user to which authorization checks should be applied. If we are in the    * context of an RPC call, the remote user is used, otherwise the currently logged in user is    * used.    */
specifier|private
name|User
name|getActiveUser
parameter_list|()
throws|throws
name|IOException
block|{
comment|// for non-rpc handling, fallback to system user
name|Optional
argument_list|<
name|User
argument_list|>
name|optionalUser
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionalUser
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|optionalUser
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|userProvider
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|// for backward compatible
specifier|private
name|RSGroupInfo
name|fillTables
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RSGroupUtil
operator|.
name|fillTables
argument_list|(
name|rsGroupInfo
argument_list|,
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getRSGroupInfo
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetRSGroupInfoRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|GetRSGroupInfoResponse
argument_list|>
name|done
parameter_list|)
block|{
name|GetRSGroupInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRSGroupInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|request
operator|.
name|getRSGroupName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" initiates rsgroup info retrieval, group="
operator|+
name|groupName
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preGetRSGroupInfo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"getRSGroupInfo"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|rsGroupInfo
init|=
name|groupAdminServer
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRSGroupInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|fillTables
argument_list|(
name|rsGroupInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postGetRSGroupInfo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getRSGroupInfoOfTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetRSGroupInfoOfTableRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|GetRSGroupInfoOfTableResponse
argument_list|>
name|done
parameter_list|)
block|{
name|GetRSGroupInfoOfTableResponse
operator|.
name|Builder
name|builder
init|=
name|GetRSGroupInfoOfTableResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" initiates rsgroup info retrieval, table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preGetRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"getRSGroupInfoOfTable"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|RSGroupInfo
argument_list|>
name|optGroup
init|=
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|master
argument_list|,
name|groupAdminServer
operator|.
name|rsGroupInfoManager
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|optGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setRSGroupInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|fillTables
argument_list|(
name|optGroup
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|master
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTablePresent
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|groupAdminServer
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setRSGroupInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|fillTables
argument_list|(
name|rsGroupInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postGetRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveServersRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|MoveServersResponse
argument_list|>
name|done
parameter_list|)
block|{
name|MoveServersResponse
operator|.
name|Builder
name|builder
init|=
name|MoveServersResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|hostPorts
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|el
range|:
name|request
operator|.
name|getServersList
argument_list|()
control|)
block|{
name|hostPorts
operator|.
name|add
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
name|el
operator|.
name|getHostName
argument_list|()
argument_list|,
name|el
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" move servers "
operator|+
name|hostPorts
operator|+
literal|" to rsgroup "
operator|+
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preMoveServers
argument_list|(
name|hostPorts
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"moveServers"
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|.
name|moveServers
argument_list|(
name|hostPorts
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postMoveServers
argument_list|(
name|hostPorts
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moveTablesAndWait
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|procIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tables
control|)
block|{
name|TableDescriptor
name|oldTd
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTd
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TableDescriptor
name|newTd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|oldTd
argument_list|)
operator|.
name|setRegionServerGroup
argument_list|(
name|targetGroup
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|master
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|newTd
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|procId
range|:
name|procIds
control|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getProcedure
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ProcedureSyncWait
operator|.
name|waitForProcedureToCompleteIOE
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
name|proc
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveTables
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveTablesRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|MoveTablesResponse
argument_list|>
name|done
parameter_list|)
block|{
name|MoveTablesResponse
operator|.
name|Builder
name|builder
init|=
name|MoveTablesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|request
operator|.
name|getTableNameList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tableName
range|:
name|request
operator|.
name|getTableNameList
argument_list|()
control|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" move tables "
operator|+
name|tables
operator|+
literal|" to rsgroup "
operator|+
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preMoveTables
argument_list|(
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"moveTables"
argument_list|)
expr_stmt|;
name|moveTablesAndWait
argument_list|(
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postMoveTables
argument_list|(
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRSGroup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddRSGroupRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|AddRSGroupResponse
argument_list|>
name|done
parameter_list|)
block|{
name|AddRSGroupResponse
operator|.
name|Builder
name|builder
init|=
name|AddRSGroupResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" add rsgroup "
operator|+
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preAddRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"addRSGroup"
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|.
name|addRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postAddRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRSGroup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveRSGroupRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|RemoveRSGroupResponse
argument_list|>
name|done
parameter_list|)
block|{
name|RemoveRSGroupResponse
operator|.
name|Builder
name|builder
init|=
name|RemoveRSGroupResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" remove rsgroup "
operator|+
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preRemoveRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"removeRSGroup"
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|.
name|removeRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postRemoveRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|balanceRSGroup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|BalanceRSGroupRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|BalanceRSGroupResponse
argument_list|>
name|done
parameter_list|)
block|{
name|BalanceRSGroupResponse
operator|.
name|Builder
name|builder
init|=
name|BalanceRSGroupResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" balance rsgroup, group="
operator|+
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preBalanceRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"balanceRSGroup"
argument_list|)
expr_stmt|;
name|boolean
name|balancerRan
init|=
name|groupAdminServer
operator|.
name|balanceRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setBalanceRan
argument_list|(
name|balancerRan
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postBalanceRSGroup
argument_list|(
name|request
operator|.
name|getRSGroupName
argument_list|()
argument_list|,
name|balancerRan
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBalanceRan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|listRSGroupInfos
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListRSGroupInfosRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|ListRSGroupInfosResponse
argument_list|>
name|done
parameter_list|)
block|{
name|ListRSGroupInfosResponse
operator|.
name|Builder
name|builder
init|=
name|ListRSGroupInfosResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" list rsgroup"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preListRSGroups
argument_list|()
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"listRSGroup"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|rsGroupInfos
init|=
name|groupAdminServer
operator|.
name|listRSGroups
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RSGroupInfo
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|name2Info
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|rsGroupInfo
range|:
name|rsGroupInfos
control|)
block|{
name|name2Info
operator|.
name|put
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableDescriptor
name|td
range|:
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|groupName
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|rsGroupInfo
init|=
name|name2Info
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|!=
literal|null
condition|)
block|{
name|rsGroupInfo
operator|.
name|addTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RSGroupInfo
name|rsGroupInfo
range|:
name|rsGroupInfos
control|)
block|{
comment|// TODO: this can be done at once outside this loop, do not need to scan all every time.
name|builder
operator|.
name|addRSGroupInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|rsGroupInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postListRSGroups
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getRSGroupInfoOfServer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetRSGroupInfoOfServerRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|GetRSGroupInfoOfServerResponse
argument_list|>
name|done
parameter_list|)
block|{
name|GetRSGroupInfoOfServerResponse
operator|.
name|Builder
name|builder
init|=
name|GetRSGroupInfoOfServerResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Address
name|hp
init|=
name|Address
operator|.
name|fromParts
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|request
operator|.
name|getServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" initiates rsgroup info retrieval, server="
operator|+
name|hp
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preGetRSGroupInfoOfServer
argument_list|(
name|hp
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"getRSGroupInfoOfServer"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|info
init|=
name|groupAdminServer
operator|.
name|getRSGroupOfServer
argument_list|(
name|hp
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRSGroupInfo
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|fillTables
argument_list|(
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postGetRSGroupInfoOfServer
argument_list|(
name|hp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveServersAndTables
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveServersAndTablesRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|MoveServersAndTablesResponse
argument_list|>
name|done
parameter_list|)
block|{
name|MoveServersAndTablesResponse
operator|.
name|Builder
name|builder
init|=
name|MoveServersAndTablesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|hostPorts
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|el
range|:
name|request
operator|.
name|getServersList
argument_list|()
control|)
block|{
name|hostPorts
operator|.
name|add
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
name|el
operator|.
name|getHostName
argument_list|()
argument_list|,
name|el
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|request
operator|.
name|getTableNameList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tableName
range|:
name|request
operator|.
name|getTableNameList
argument_list|()
control|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" move servers "
operator|+
name|hostPorts
operator|+
literal|" and tables "
operator|+
name|tables
operator|+
literal|" to rsgroup"
operator|+
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preMoveServersAndTables
argument_list|(
name|hostPorts
argument_list|,
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"moveServersAndTables"
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|.
name|moveServers
argument_list|(
name|hostPorts
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
name|moveTablesAndWait
argument_list|(
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postMoveServersAndTables
argument_list|(
name|hostPorts
argument_list|,
name|tables
argument_list|,
name|request
operator|.
name|getTargetGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveServersRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|RemoveServersResponse
argument_list|>
name|done
parameter_list|)
block|{
name|RemoveServersResponse
operator|.
name|Builder
name|builder
init|=
name|RemoveServersResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|el
range|:
name|request
operator|.
name|getServersList
argument_list|()
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
name|el
operator|.
name|getHostName
argument_list|()
argument_list|,
name|el
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|master
operator|.
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" remove decommissioned servers from rsgroup: "
operator|+
name|servers
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preRemoveServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
name|checkPermission
argument_list|(
literal|"removeServers"
argument_list|)
expr_stmt|;
name|groupAdminServer
operator|.
name|removeServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postRemoveServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

