begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
operator|.
name|MobCompactionRequest
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
operator|.
name|PartitionedMobCompactionRequest
operator|.
name|CompactionPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
operator|.
name|PartitionedMobCompactionRequest
operator|.
name|CompactionPartitionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link MobCompactor} that compacts the mob files in partitions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PartitionedMobCompactor
extends|extends
name|MobCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PartitionedMobCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|mergeableSize
decl_stmt|;
specifier|protected
name|int
name|delFileMaxCount
decl_stmt|;
comment|/** The number of files compacted in a batch */
specifier|protected
name|int
name|compactionBatchSize
decl_stmt|;
specifier|protected
name|int
name|compactionKVMax
decl_stmt|;
specifier|private
name|Path
name|tempPath
decl_stmt|;
specifier|private
name|Path
name|bulkloadPath
decl_stmt|;
specifier|private
name|CacheConfig
name|compactionCacheConfig
decl_stmt|;
specifier|private
name|Tag
name|tableNameTag
decl_stmt|;
specifier|private
name|Encryption
operator|.
name|Context
name|cryptoContext
init|=
name|Encryption
operator|.
name|Context
operator|.
name|NONE
decl_stmt|;
specifier|public
name|PartitionedMobCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|column
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|mergeableSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|)
expr_stmt|;
name|delFileMaxCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_DELFILE_MAX_COUNT
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_DELFILE_MAX_COUNT
argument_list|)
expr_stmt|;
comment|// default is 100
name|compactionBatchSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_BATCH_SIZE
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_BATCH_SIZE
argument_list|)
expr_stmt|;
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|MobConstants
operator|.
name|TEMP_DIR_NAME
argument_list|)
expr_stmt|;
name|bulkloadPath
operator|=
operator|new
name|Path
argument_list|(
name|tempPath
argument_list|,
operator|new
name|Path
argument_list|(
name|MobConstants
operator|.
name|BULKLOAD_DIR_NAME
argument_list|,
operator|new
name|Path
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|compactionKVMax
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|COMPACTION_KV_MAX
argument_list|,
name|HConstants
operator|.
name|COMPACTION_KV_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|Configuration
name|copyOfConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|copyOfConf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|compactionCacheConfig
operator|=
operator|new
name|CacheConfig
argument_list|(
name|copyOfConf
argument_list|)
expr_stmt|;
name|tableNameTag
operator|=
operator|new
name|Tag
argument_list|(
name|TagType
operator|.
name|MOB_TABLE_NAME_TAG_TYPE
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cryptoContext
operator|=
name|EncryptionUtil
operator|.
name|createEncryptionContext
argument_list|(
name|copyOfConf
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|,
name|boolean
name|allFiles
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No candidate mob files"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"is allFiles: "
operator|+
name|allFiles
argument_list|)
expr_stmt|;
comment|// find the files to compact.
name|PartitionedMobCompactionRequest
name|request
init|=
name|select
argument_list|(
name|files
argument_list|,
name|allFiles
argument_list|)
decl_stmt|;
comment|// compact the files.
return|return
name|performCompaction
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Selects the compacted mob/del files.    * Iterates the candidates to find out all the del files and small mob files.    * @param candidates All the candidates.    * @param allFiles Whether add all mob files into the compaction.    * @return A compaction request.    * @throws IOException    */
specifier|protected
name|PartitionedMobCompactionRequest
name|select
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|allFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|allDelFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CompactionPartitionId
argument_list|,
name|CompactionPartition
argument_list|>
name|filesToCompact
init|=
operator|new
name|HashMap
argument_list|<
name|CompactionPartitionId
argument_list|,
name|CompactionPartition
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|selectedFileCount
init|=
literal|0
decl_stmt|;
name|int
name|irrelevantFileCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|candidates
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|irrelevantFileCount
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// group the del files and small files.
name|FileStatus
name|linkedFile
init|=
name|file
decl_stmt|;
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|HFileLink
name|link
init|=
name|HFileLink
operator|.
name|buildFromHFileLinkPattern
argument_list|(
name|conf
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|linkedFile
operator|=
name|getLinkedFileStatus
argument_list|(
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|linkedFile
operator|==
literal|null
condition|)
block|{
comment|// If the linked file cannot be found, regard it as an irrelevantFileCount file
name|irrelevantFileCount
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|linkedFile
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|allDelFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allFiles
operator|||
name|linkedFile
operator|.
name|getLen
argument_list|()
operator|<
name|mergeableSize
condition|)
block|{
comment|// add all files if allFiles is true,
comment|// otherwise add the small files to the merge pool
name|MobFileName
name|fileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|linkedFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|CompactionPartitionId
name|id
init|=
operator|new
name|CompactionPartitionId
argument_list|(
name|fileName
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|fileName
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
name|CompactionPartition
name|compactionPartition
init|=
name|filesToCompact
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactionPartition
operator|==
literal|null
condition|)
block|{
name|compactionPartition
operator|=
operator|new
name|CompactionPartition
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|compactionPartition
operator|.
name|addFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filesToCompact
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|compactionPartition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compactionPartition
operator|.
name|addFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|selectedFileCount
operator|++
expr_stmt|;
block|}
block|}
name|PartitionedMobCompactionRequest
name|request
init|=
operator|new
name|PartitionedMobCompactionRequest
argument_list|(
name|filesToCompact
operator|.
name|values
argument_list|()
argument_list|,
name|allDelFiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
operator|(
name|allDelFiles
operator|.
name|size
argument_list|()
operator|+
name|selectedFileCount
operator|+
name|irrelevantFileCount
operator|)
condition|)
block|{
comment|// all the files are selected
name|request
operator|.
name|setCompactionType
argument_list|(
name|CompactionType
operator|.
name|ALL_FILES
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"The compaction type is "
operator|+
name|request
operator|.
name|getCompactionType
argument_list|()
operator|+
literal|", the request has "
operator|+
name|allDelFiles
operator|.
name|size
argument_list|()
operator|+
literal|" del files, "
operator|+
name|selectedFileCount
operator|+
literal|" selected files, and "
operator|+
name|irrelevantFileCount
operator|+
literal|" irrelevant files"
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Performs the compaction on the selected files.    *<ol>    *<li>Compacts the del files.</li>    *<li>Compacts the selected small mob files and all the del files.</li>    *<li>If all the candidates are selected, delete the del files.</li>    *</ol>    * @param request The compaction request.    * @return The paths of new mob files generated in the compaction.    * @throws IOException    */
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|performCompaction
parameter_list|(
name|PartitionedMobCompactionRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
comment|// merge the del files
name|List
argument_list|<
name|Path
argument_list|>
name|delFilePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|delFile
range|:
name|request
operator|.
name|delFiles
control|)
block|{
name|delFilePaths
operator|.
name|add
argument_list|(
name|delFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|newDelPaths
init|=
name|compactDelFiles
argument_list|(
name|request
argument_list|,
name|delFilePaths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|newDelFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Path
name|newDelPath
range|:
name|newDelPaths
control|)
block|{
name|StoreFile
name|sf
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|newDelPath
argument_list|,
name|conf
argument_list|,
name|compactionCacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
comment|// pre-create reader of a del file to avoid race condition when opening the reader in each
comment|// partition.
name|sf
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|newDelFiles
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After merging, there are "
operator|+
name|newDelFiles
operator|.
name|size
argument_list|()
operator|+
literal|" del files"
argument_list|)
expr_stmt|;
comment|// compact the mob files by partitions.
name|paths
operator|=
name|compactMobFiles
argument_list|(
name|request
argument_list|,
name|newDelFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After compaction, there are "
operator|+
name|paths
operator|.
name|size
argument_list|()
operator|+
literal|" mob files"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeStoreFileReaders
argument_list|(
name|newDelFiles
argument_list|)
expr_stmt|;
block|}
comment|// archive the del files if all the mob files are selected.
if|if
condition|(
name|request
operator|.
name|type
operator|==
name|CompactionType
operator|.
name|ALL_FILES
operator|&&
operator|!
name|newDelPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"After a mob compaction with all files selected, archiving the del files "
operator|+
name|newDelPaths
argument_list|)
expr_stmt|;
try|try
block|{
name|MobUtils
operator|.
name|removeMobFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|mobTableDir
argument_list|,
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|newDelFiles
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to archive the del files "
operator|+
name|newDelPaths
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|paths
return|;
block|}
comment|/**    * Compacts the selected small mob files and all the del files.    * @param request The compaction request.    * @param delFiles The del files.    * @return The paths of new mob files after compactions.    * @throws IOException    */
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|compactMobFiles
parameter_list|(
specifier|final
name|PartitionedMobCompactionRequest
name|request
parameter_list|,
specifier|final
name|List
argument_list|<
name|StoreFile
argument_list|>
name|delFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|CompactionPartition
argument_list|>
name|partitions
init|=
name|request
operator|.
name|compactionPartitions
decl_stmt|;
if|if
condition|(
name|partitions
operator|==
literal|null
operator|||
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No partitions of mob files"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|c
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|c
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|CompactionPartitionId
argument_list|,
name|Future
argument_list|<
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|CompactionPartitionId
argument_list|,
name|Future
argument_list|<
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// compact the mob files by partitions in parallel.
for|for
control|(
specifier|final
name|CompactionPartition
name|partition
range|:
name|partitions
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|partition
operator|.
name|getPartitionId
argument_list|()
argument_list|,
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Compacting mob files for partition "
operator|+
name|partition
operator|.
name|getPartitionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compactMobFilePartition
argument_list|(
name|request
argument_list|,
name|partition
argument_list|,
name|delFiles
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// compact the partitions in parallel.
name|List
argument_list|<
name|CompactionPartitionId
argument_list|>
name|failedPartitions
init|=
operator|new
name|ArrayList
argument_list|<
name|CompactionPartitionId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|CompactionPartitionId
argument_list|,
name|Future
argument_list|<
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|>
name|result
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|paths
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// just log the error
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to compact the partition "
operator|+
name|result
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failedPartitions
operator|.
name|add
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|failedPartitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if any partition fails in the compaction, directly throw an exception.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to compact the partitions "
operator|+
name|failedPartitions
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the HTable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|paths
return|;
block|}
comment|/**    * Compacts a partition of selected small mob files and all the del files.    * @param request The compaction request.    * @param partition A compaction partition.    * @param delFiles The del files.    * @param table The current table.    * @return The paths of new mob files after compactions.    * @throws IOException    */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|compactMobFilePartition
parameter_list|(
name|PartitionedMobCompactionRequest
name|request
parameter_list|,
name|CompactionPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|delFiles
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|newFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
name|partition
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|Path
name|bulkloadPathOfPartition
init|=
operator|new
name|Path
argument_list|(
name|bulkloadPath
argument_list|,
name|partition
operator|.
name|getPartitionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|bulkloadColumnPath
init|=
operator|new
name|Path
argument_list|(
name|bulkloadPathOfPartition
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|files
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|batch
init|=
name|compactionBatchSize
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|-
name|offset
operator|<
name|compactionBatchSize
condition|)
block|{
name|batch
operator|=
name|files
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
if|if
condition|(
name|batch
operator|==
literal|1
operator|&&
name|delFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only one file left and no del files, do not compact it,
comment|// and directly add it to the new files.
name|newFiles
operator|.
name|add
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// clean the bulkload directory to avoid loading old files.
name|fs
operator|.
name|delete
argument_list|(
name|bulkloadPathOfPartition
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add the selected mob files and del files into filesToCompact
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|batch
operator|+
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|StoreFile
name|sf
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|compactionCacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|filesToCompact
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
name|filesToCompact
operator|.
name|addAll
argument_list|(
name|delFiles
argument_list|)
expr_stmt|;
comment|// compact the mob files in a batch.
name|compactMobFilesInBatch
argument_list|(
name|request
argument_list|,
name|partition
argument_list|,
name|table
argument_list|,
name|filesToCompact
argument_list|,
name|batch
argument_list|,
name|bulkloadPathOfPartition
argument_list|,
name|bulkloadColumnPath
argument_list|,
name|newFiles
argument_list|)
expr_stmt|;
comment|// move to the next batch.
name|offset
operator|+=
name|batch
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Compaction is finished. The number of mob files is changed from "
operator|+
name|files
operator|.
name|size
argument_list|()
operator|+
literal|" to "
operator|+
name|newFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newFiles
return|;
block|}
comment|/**    * Closes the readers of store files.    * @param storeFiles The store files to be closed.    */
specifier|private
name|void
name|closeStoreFileReaders
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
parameter_list|)
block|{
for|for
control|(
name|StoreFile
name|storeFile
range|:
name|storeFiles
control|)
block|{
try|try
block|{
name|storeFile
operator|.
name|closeReader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close the reader on store file "
operator|+
name|storeFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compacts a partition of selected small mob files and all the del files in a batch.    * @param request The compaction request.    * @param partition A compaction partition.    * @param table The current table.    * @param filesToCompact The files to be compacted.    * @param batch The number of mob files to be compacted in a batch.    * @param bulkloadPathOfPartition The directory where the bulkload column of the current    *        partition is saved.    * @param bulkloadColumnPath The directory where the bulkload files of current partition    *        are saved.    * @param newFiles The paths of new mob files after compactions.    * @throws IOException    */
specifier|private
name|void
name|compactMobFilesInBatch
parameter_list|(
name|PartitionedMobCompactionRequest
name|request
parameter_list|,
name|CompactionPartition
name|partition
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
parameter_list|,
name|int
name|batch
parameter_list|,
name|Path
name|bulkloadPathOfPartition
parameter_list|,
name|Path
name|bulkloadColumnPath
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|newFiles
parameter_list|)
throws|throws
name|IOException
block|{
comment|// open scanner to the selected mob files and del files.
name|StoreScanner
name|scanner
init|=
name|createScanner
argument_list|(
name|filesToCompact
argument_list|,
name|ScanType
operator|.
name|COMPACT_DROP_DELETES
argument_list|)
decl_stmt|;
comment|// the mob files to be compacted, not include the del files.
name|List
argument_list|<
name|StoreFile
argument_list|>
name|mobFilesToCompact
init|=
name|filesToCompact
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|batch
argument_list|)
decl_stmt|;
comment|// Pair(maxSeqId, cellsCount)
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|fileInfo
init|=
name|getFileInfo
argument_list|(
name|mobFilesToCompact
argument_list|)
decl_stmt|;
comment|// open writers for the mob files and new ref store files.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|Writer
name|refFileWriter
init|=
literal|null
decl_stmt|;
name|Path
name|filePath
init|=
literal|null
decl_stmt|;
name|Path
name|refFilePath
init|=
literal|null
decl_stmt|;
name|long
name|mobCells
init|=
literal|0
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|MobUtils
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|column
argument_list|,
name|partition
operator|.
name|getPartitionId
argument_list|()
operator|.
name|getDate
argument_list|()
argument_list|,
name|tempPath
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|column
operator|.
name|getCompactionCompression
argument_list|()
argument_list|,
name|partition
operator|.
name|getPartitionId
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|compactionCacheConfig
argument_list|,
name|cryptoContext
argument_list|)
expr_stmt|;
name|filePath
operator|=
name|writer
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|byte
index|[]
name|fileName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a temp file and open a writer for it in the bulkloadPath
name|refFileWriter
operator|=
name|MobUtils
operator|.
name|createRefFileWriter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|column
argument_list|,
name|bulkloadColumnPath
argument_list|,
name|fileInfo
operator|.
name|getSecond
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|compactionCacheConfig
argument_list|,
name|cryptoContext
argument_list|)
expr_stmt|;
name|refFilePath
operator|=
name|refFileWriter
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
init|=
literal|false
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
comment|// write the mob cell to the mob file.
name|writer
operator|.
name|append
argument_list|(
name|cell
argument_list|)
expr_stmt|;
comment|// write the new reference cell to the store file.
name|KeyValue
name|reference
init|=
name|MobUtils
operator|.
name|createMobRefKeyValue
argument_list|(
name|cell
argument_list|,
name|fileName
argument_list|,
name|tableNameTag
argument_list|)
decl_stmt|;
name|refFileWriter
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|mobCells
operator|++
expr_stmt|;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
block|}
finally|finally
block|{
comment|// close the scanner.
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// append metadata to the mob file, and close the mob file writer.
name|closeMobFileWriter
argument_list|(
name|writer
argument_list|,
name|fileInfo
operator|.
name|getFirst
argument_list|()
argument_list|,
name|mobCells
argument_list|)
expr_stmt|;
comment|// append metadata and bulkload info to the ref mob file, and close the writer.
name|closeRefFileWriter
argument_list|(
name|refFileWriter
argument_list|,
name|fileInfo
operator|.
name|getFirst
argument_list|()
argument_list|,
name|request
operator|.
name|selectionTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mobCells
operator|>
literal|0
condition|)
block|{
comment|// commit mob file
name|MobUtils
operator|.
name|commitFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|filePath
argument_list|,
name|mobFamilyDir
argument_list|,
name|compactionCacheConfig
argument_list|)
expr_stmt|;
comment|// bulkload the ref file
name|bulkloadRefFile
argument_list|(
name|table
argument_list|,
name|bulkloadPathOfPartition
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newFiles
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|mobFamilyDir
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remove the new files
comment|// the mob file is empty, delete it instead of committing.
name|deletePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
comment|// the ref file is empty, delete it instead of committing.
name|deletePath
argument_list|(
name|refFilePath
argument_list|)
expr_stmt|;
block|}
comment|// archive the old mob files, do not archive the del files.
try|try
block|{
name|closeStoreFileReaders
argument_list|(
name|mobFilesToCompact
argument_list|)
expr_stmt|;
name|MobUtils
operator|.
name|removeMobFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|mobTableDir
argument_list|,
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|mobFilesToCompact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to archive the files "
operator|+
name|mobFilesToCompact
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compacts the del files in batches which avoids opening too many files.    * @param request The compaction request.    * @param delFilePaths    * @return The paths of new del files after merging or the original files if no merging    *         is necessary.    * @throws IOException    */
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|compactDelFiles
parameter_list|(
name|PartitionedMobCompactionRequest
name|request
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|delFilePaths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|delFilePaths
operator|.
name|size
argument_list|()
operator|<=
name|delFileMaxCount
condition|)
block|{
return|return
name|delFilePaths
return|;
block|}
comment|// when there are more del files than the number that is allowed, merge it firstly.
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|delFilePaths
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// get the batch
name|int
name|batch
init|=
name|compactionBatchSize
decl_stmt|;
if|if
condition|(
name|delFilePaths
operator|.
name|size
argument_list|()
operator|-
name|offset
operator|<
name|compactionBatchSize
condition|)
block|{
name|batch
operator|=
name|delFilePaths
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|batchedDelFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|batch
operator|==
literal|1
condition|)
block|{
comment|// only one file left, do not compact it, directly add it to the new files.
name|paths
operator|.
name|add
argument_list|(
name|delFilePaths
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|batch
operator|+
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|batchedDelFiles
operator|.
name|add
argument_list|(
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|delFilePaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|conf
argument_list|,
name|compactionCacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// compact the del files in a batch.
name|paths
operator|.
name|add
argument_list|(
name|compactDelFilesInBatch
argument_list|(
name|request
argument_list|,
name|batchedDelFiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// move to the next batch.
name|offset
operator|+=
name|batch
expr_stmt|;
block|}
return|return
name|compactDelFiles
argument_list|(
name|request
argument_list|,
name|paths
argument_list|)
return|;
block|}
comment|/**    * Compacts the del file in a batch.    * @param request The compaction request.    * @param delFiles The del files.    * @return The path of new del file after merging.    * @throws IOException    */
specifier|private
name|Path
name|compactDelFilesInBatch
parameter_list|(
name|PartitionedMobCompactionRequest
name|request
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|delFiles
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a scanner for the del files.
name|StoreScanner
name|scanner
init|=
name|createScanner
argument_list|(
name|delFiles
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|Path
name|filePath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|MobUtils
operator|.
name|createDelFileWriter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|column
argument_list|,
name|MobUtils
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|request
operator|.
name|selectionTime
argument_list|)
argument_list|)
argument_list|,
name|tempPath
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|column
operator|.
name|getCompactionCompression
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|compactionCacheConfig
argument_list|,
name|cryptoContext
argument_list|)
expr_stmt|;
name|filePath
operator|=
name|writer
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
init|=
literal|false
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the writer of the file "
operator|+
name|filePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// commit the new del file
name|Path
name|path
init|=
name|MobUtils
operator|.
name|commitFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|filePath
argument_list|,
name|mobFamilyDir
argument_list|,
name|compactionCacheConfig
argument_list|)
decl_stmt|;
comment|// archive the old del files
try|try
block|{
name|MobUtils
operator|.
name|removeMobFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|mobTableDir
argument_list|,
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|delFiles
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to archive the old del files "
operator|+
name|delFiles
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**    * Creates a store scanner.    * @param filesToCompact The files to be compacted.    * @param scanType The scan type.    * @return The store scanner.    * @throws IOException    */
specifier|private
name|StoreScanner
name|createScanner
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
parameter_list|,
name|ScanType
name|scanType
parameter_list|)
throws|throws
name|IOException
block|{
name|List
name|scanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|filesToCompact
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|column
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|HStore
operator|.
name|determineTTLFromFamily
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|conf
argument_list|,
name|column
argument_list|,
name|ttl
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|StoreScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scanType
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|,
literal|0L
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
return|return
name|scanner
return|;
block|}
comment|/**    * Bulkloads the current file.    * @param table The current table.    * @param bulkloadDirectory The path of bulkload directory.    * @param fileName The current file name.    * @throws IOException    */
specifier|private
name|void
name|bulkloadRefFile
parameter_list|(
name|Table
name|table
parameter_list|,
name|Path
name|bulkloadDirectory
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// bulkload the ref file
try|try
block|{
name|LoadIncrementalHFiles
name|bulkload
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|bulkload
operator|.
name|doBulkLoad
argument_list|(
name|bulkloadDirectory
argument_list|,
operator|(
name|HTable
operator|)
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// delete the committed mob file
name|deletePath
argument_list|(
operator|new
name|Path
argument_list|(
name|mobFamilyDir
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// delete the bulkload files in bulkloadPath
name|deletePath
argument_list|(
name|bulkloadDirectory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Closes the mob file writer.    * @param writer The mob file writer.    * @param maxSeqId Maximum sequence id.    * @param mobCellsCount The number of mob cells.    * @throws IOException    */
specifier|private
name|void
name|closeMobFileWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|long
name|maxSeqId
parameter_list|,
name|long
name|mobCellsCount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|appendMetadata
argument_list|(
name|maxSeqId
argument_list|,
literal|false
argument_list|,
name|mobCellsCount
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the writer of the file "
operator|+
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Closes the ref file writer.    * @param writer The ref file writer.    * @param maxSeqId Maximum sequence id.    * @param bulkloadTime The timestamp at which the bulk load file is created.    * @throws IOException    */
specifier|private
name|void
name|closeRefFileWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|long
name|maxSeqId
parameter_list|,
name|long
name|bulkloadTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|appendMetadata
argument_list|(
name|maxSeqId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|appendFileInfo
argument_list|(
name|StoreFile
operator|.
name|BULKLOAD_TIME_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bulkloadTime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|appendFileInfo
argument_list|(
name|StoreFile
operator|.
name|SKIP_RESET_SEQ_ID
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the writer of the ref file "
operator|+
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the max seqId and number of cells of the store files.    * @param storeFiles The store files.    * @return The pair of the max seqId and number of cells of the store files.    * @throws IOException    */
specifier|private
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|getFileInfo
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|maxSeqId
init|=
literal|0
decl_stmt|;
name|long
name|maxKeyCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|sf
range|:
name|storeFiles
control|)
block|{
comment|// the readers will be closed later after the merge.
name|maxSeqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeqId
argument_list|,
name|sf
operator|.
name|getMaxSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|count
init|=
name|sf
operator|.
name|createReader
argument_list|()
operator|.
name|loadFileInfo
argument_list|()
operator|.
name|get
argument_list|(
name|StoreFile
operator|.
name|MOB_CELLS_COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|maxKeyCount
operator|+=
name|Bytes
operator|.
name|toLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|maxSeqId
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|maxKeyCount
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Deletes a file.    * @param path The path of the file to be deleted.    */
specifier|private
name|void
name|deletePath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete the file "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FileStatus
name|getLinkedFileStatus
parameter_list|(
name|HFileLink
name|link
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|locations
init|=
name|link
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|location
range|:
name|locations
control|)
block|{
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|file
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|file
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The file "
operator|+
name|path
operator|+
literal|" can not be found"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

