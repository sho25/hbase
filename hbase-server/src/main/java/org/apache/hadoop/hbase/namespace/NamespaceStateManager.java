begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|namespace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableNamespaceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * NamespaceStateManager manages state (in terms of quota) of all the namespaces. It contains  * a cache which is updated based on the hooks in the NamespaceAuditor class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|NamespaceStateManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NamespaceStateManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|NamespaceTableAndRegionInfo
argument_list|>
name|nsStateCache
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|public
name|NamespaceStateManager
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|nsStateCache
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|master
operator|=
name|masterServices
expr_stmt|;
block|}
comment|/**    * Starts the NamespaceStateManager. The boot strap of cache    * is done in the post master start hook of the NamespaceAuditor    * class.    *    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namespace State Manager started."
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets an instance of NamespaceTableAndRegionInfo associated with namespace.    * @param name The name of the namespace    * @return An instance of NamespaceTableAndRegionInfo.    */
specifier|public
name|NamespaceTableAndRegionInfo
name|getState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nsStateCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Check if adding a region violates namespace quota, if not update namespace cache.    *    * @param name    * @param regionName    * @param incr    * @return true, if region can be added to table.    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|synchronized
name|boolean
name|checkAndUpdateNamespaceRegionCount
parameter_list|(
name|TableName
name|name
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|int
name|incr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|name
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nspdesc
init|=
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nspdesc
operator|!=
literal|null
condition|)
block|{
name|NamespaceTableAndRegionInfo
name|currentStatus
decl_stmt|;
name|currentStatus
operator|=
name|getState
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|currentStatus
operator|.
name|getRegionCount
argument_list|()
decl_stmt|;
name|long
name|maxRegionCount
init|=
name|TableNamespaceManager
operator|.
name|getMaxRegions
argument_list|(
name|nspdesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|incr
operator|>
literal|0
operator|&&
name|regionCount
operator|>=
name|maxRegionCount
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
operator|+
literal|" cannot be created. The region count  will exceed quota on the namespace. "
operator|+
literal|"This may be transient, please retry later if there are any ongoing split"
operator|+
literal|" operations in the namespace."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|NamespaceTableAndRegionInfo
name|nsInfo
init|=
name|nsStateCache
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsInfo
operator|!=
literal|null
condition|)
block|{
name|nsInfo
operator|.
name|incRegionCountForTable
argument_list|(
name|name
argument_list|,
name|incr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Namespace state found null for namespace : "
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check and update region count for an existing table. To handle scenarios like restore snapshot    * @param name name of the table for region count needs to be checked and updated    * @param incr count of regions    * @throws QuotaExceededException if quota exceeds for the number of regions allowed in a    *           namespace    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|synchronized
name|void
name|checkAndUpdateNamespaceRegionCount
parameter_list|(
name|TableName
name|name
parameter_list|,
name|int
name|incr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|name
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nspdesc
init|=
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nspdesc
operator|!=
literal|null
condition|)
block|{
name|NamespaceTableAndRegionInfo
name|currentStatus
init|=
name|getState
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|int
name|regionCountOfTable
init|=
name|currentStatus
operator|.
name|getRegionCountOfTable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|currentStatus
operator|.
name|getRegionCount
argument_list|()
operator|-
name|regionCountOfTable
operator|+
name|incr
operator|)
operator|>
name|TableNamespaceManager
operator|.
name|getMaxRegions
argument_list|(
name|nspdesc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|QuotaExceededException
argument_list|(
literal|"The table "
operator|+
name|name
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" region count cannot be updated as it would exceed maximum number "
operator|+
literal|"of regions allowed in the namespace.  The total number of regions permitted is "
operator|+
name|TableNamespaceManager
operator|.
name|getMaxRegions
argument_list|(
name|nspdesc
argument_list|)
argument_list|)
throw|;
block|}
name|currentStatus
operator|.
name|removeTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|currentStatus
operator|.
name|addTable
argument_list|(
name|name
argument_list|,
name|incr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NamespaceDescriptor
name|getNamespaceDescriptor
parameter_list|(
name|String
name|namespaceAsString
parameter_list|)
block|{
try|try
block|{
return|return
name|this
operator|.
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|namespaceAsString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while fetching namespace descriptor for namespace : "
operator|+
name|namespaceAsString
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|synchronized
name|void
name|checkAndUpdateNamespaceTableCount
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|table
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nspdesc
init|=
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nspdesc
operator|!=
literal|null
condition|)
block|{
name|NamespaceTableAndRegionInfo
name|currentStatus
decl_stmt|;
name|currentStatus
operator|=
name|getState
argument_list|(
name|nspdesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|currentStatus
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|>=
name|TableNamespaceManager
operator|.
name|getMaxTables
argument_list|(
name|nspdesc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|QuotaExceededException
argument_list|(
literal|"The table "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" cannot be created as it would exceed maximum number of tables allowed "
operator|+
literal|" in the namespace.  The total number of tables permitted is "
operator|+
name|TableNamespaceManager
operator|.
name|getMaxTables
argument_list|(
name|nspdesc
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|currentStatus
operator|.
name|getRegionCount
argument_list|()
operator|+
name|numRegions
operator|)
operator|>
name|TableNamespaceManager
operator|.
name|getMaxRegions
argument_list|(
name|nspdesc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|QuotaExceededException
argument_list|(
literal|"The table "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is not allowed to have "
operator|+
name|numRegions
operator|+
literal|" regions. The total number of regions permitted is only "
operator|+
name|TableNamespaceManager
operator|.
name|getMaxRegions
argument_list|(
name|nspdesc
argument_list|)
operator|+
literal|", while current region count is "
operator|+
name|currentStatus
operator|.
name|getRegionCount
argument_list|()
operator|+
literal|". This may be transient, please retry later if there are any"
operator|+
literal|" ongoing split operations in the namespace."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namespace Descriptor found null for "
operator|+
name|namespace
operator|+
literal|" This is unexpected."
argument_list|)
throw|;
block|}
name|addTable
argument_list|(
name|table
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
block|}
name|NamespaceTableAndRegionInfo
name|addNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nsStateCache
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|NamespaceTableAndRegionInfo
name|a1
init|=
operator|new
name|NamespaceTableAndRegionInfo
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|nsStateCache
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|a1
argument_list|)
expr_stmt|;
block|}
return|return
name|nsStateCache
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/**    * Delete the namespace state.    *    * @param An instance of NamespaceTableAndRegionInfo    */
name|void
name|deleteNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|nsStateCache
operator|.
name|remove
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|regionCount
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceTableAndRegionInfo
name|info
init|=
name|nsStateCache
operator|.
name|get
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|addTable
argument_list|(
name|tableName
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad state : Namespace quota information not found for namespace : "
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|synchronized
name|void
name|removeTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|NamespaceTableAndRegionInfo
name|info
init|=
name|nsStateCache
operator|.
name|get
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|removeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize namespace state cache by scanning meta table.    */
specifier|private
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|namespaces
init|=
name|this
operator|.
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|namespace
range|:
name|namespaces
control|)
block|{
name|addNamespace
argument_list|(
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|this
operator|.
name|master
operator|.
name|listTableNamesByNamespace
argument_list|(
name|namespace
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
if|if
condition|(
name|table
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|this
operator|.
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addTable
argument_list|(
name|table
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished updating state of "
operator|+
name|nsStateCache
operator|.
name|size
argument_list|()
operator|+
literal|" namespaces. "
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeRegionFromTable
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
name|NamespaceTableAndRegionInfo
name|nsInfo
init|=
name|nsStateCache
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsInfo
operator|!=
literal|null
condition|)
block|{
name|nsInfo
operator|.
name|decrementRegionCountForTable
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namespace state found null for namespace : "
operator|+
name|namespace
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

