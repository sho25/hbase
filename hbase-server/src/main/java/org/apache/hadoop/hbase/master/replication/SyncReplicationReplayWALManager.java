begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
operator|.
name|getPeerRemoteWALDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
operator|.
name|getPeerReplayWALDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
operator|.
name|getPeerSnapshotWALDir
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The manager for replaying remote wal.  *<p/>  * First, it will be used to balance the replay work across all the region servers. We will record  * the region servers which have already been used for replaying wal, and prevent sending new replay  * work to it, until the previous replay work has been done, where we will remove the region server  * from the used worker set. See the comment for {@code UsedReplayWorkersForPeer} for more details.  *<p/>  * Second, the logic for managing the remote wal directory is kept here. Before replaying the wals,  * we will rename the remote wal directory, the new name is called 'replay' directory, see  * {@link #renameToPeerReplayWALDir(String)}. This is used to prevent further writing of remote  * wals, which is very important for keeping consistency. And then we will start replaying all the  * wals, once a wal has been replayed, we will truncate the file, so that if there are crashes  * happen, we do not need to replay all the wals again, see {@link #finishReplayWAL(String)} and  * {@link #isReplayWALFinished(String)}. After replaying all the wals, we will rename the 'replay'  * directory, the new name is called 'snapshot' directory. In the directory, we will keep all the  * names for the wals being replayed, since all the files should have been truncated. When we  * transitting original the ACTIVE cluster to STANDBY later, and there are region server crashes, we  * will see the wals in this directory to determine whether a wal should be split and replayed or  * not. You can see the code in {@link org.apache.hadoop.hbase.regionserver.SplitLogWorker} for more  * details.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SyncReplicationReplayWALManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SyncReplicationReplayWALManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|walRootDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|remoteWALDir
decl_stmt|;
comment|/**    * This class is used to record the used workers(region servers) for a replication peer. For    * balancing the replaying remote wal job, we will only schedule one remote replay procedure each    * time. So when acquiring a worker, we will first get all the region servers for this cluster,    * and then filter out the used ones.    *<p/>    * The {@link ProcedureEvent} is used for notifying procedures that there are available workers    * now. We used to use sleeping and retrying before, but if the interval is too large, for    * example, exponential backoff, then it is not effective, but if the interval is too small, then    * we will flood the procedure wal.    *<p/>    * The states are only kept in memory, so when restarting, we need to reconstruct these    * information, using the information stored in related procedures. See the {@code afterReplay}    * method in {@link RecoverStandbyProcedure} and {@link SyncReplicationReplayWALProcedure} for    * more details.    */
specifier|private
specifier|static
specifier|final
class|class
name|UsedReplayWorkersForPeer
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|usedWorkers
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
decl_stmt|;
specifier|public
name|UsedReplayWorkersForPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|<>
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|used
parameter_list|(
name|ServerName
name|worker
parameter_list|)
block|{
name|usedWorkers
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|acquire
parameter_list|(
name|ServerManager
name|serverManager
parameter_list|)
block|{
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|worker
init|=
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|server
lambda|->
operator|!
name|usedWorkers
operator|.
name|contains
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
name|worker
operator|.
name|ifPresent
argument_list|(
name|usedWorkers
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|worker
return|;
block|}
specifier|public
name|void
name|release
parameter_list|(
name|ServerName
name|worker
parameter_list|)
block|{
name|usedWorkers
operator|.
name|remove
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|suspend
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
block|{
name|event
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|wake
parameter_list|(
name|MasterProcedureScheduler
name|scheduler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|event
operator|.
name|wake
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|UsedReplayWorkersForPeer
argument_list|>
name|usedWorkersByPeer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|SyncReplicationReplayWALManager
parameter_list|(
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|this
operator|.
name|serverManager
operator|=
name|services
operator|.
name|getServerManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getWALFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|walRootDir
operator|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getWALRootDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteWALDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|walRootDir
argument_list|,
name|ReplicationUtils
operator|.
name|REMOTE_WAL_DIR_NAME
argument_list|)
expr_stmt|;
name|serverManager
operator|.
name|registerListener
argument_list|(
operator|new
name|ServerListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|serverAdded
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|MasterProcedureScheduler
name|scheduler
init|=
name|services
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getProcedureScheduler
argument_list|()
decl_stmt|;
for|for
control|(
name|UsedReplayWorkersForPeer
name|usedWorkers
range|:
name|usedWorkersByPeer
operator|.
name|values
argument_list|()
control|)
block|{
synchronized|synchronized
init|(
name|usedWorkers
init|)
block|{
name|usedWorkers
operator|.
name|wake
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|usedWorkersByPeer
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
operator|new
name|UsedReplayWorkersForPeer
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unregisterPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|usedWorkersByPeer
operator|.
name|remove
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a worker for replaying remote wal for a give peer. If no worker available, i.e, all the    * region servers have been used by others, a {@link ProcedureSuspendedException} will be thrown    * to suspend the procedure. And it will be woken up later when there are available workers,    * either by others release a worker, or there is a new region server joins the cluster.    */
specifier|public
name|ServerName
name|acquirePeerWorker
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
name|UsedReplayWorkersForPeer
name|usedWorkers
init|=
name|usedWorkersByPeer
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|usedWorkers
init|)
block|{
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|worker
init|=
name|usedWorkers
operator|.
name|acquire
argument_list|(
name|serverManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|worker
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|worker
operator|.
name|get
argument_list|()
return|;
block|}
comment|// no worker available right now, suspend the procedure
name|usedWorkers
operator|.
name|suspend
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|releasePeerWorker
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ServerName
name|worker
parameter_list|,
name|MasterProcedureScheduler
name|scheduler
parameter_list|)
block|{
name|UsedReplayWorkersForPeer
name|usedWorkers
init|=
name|usedWorkersByPeer
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|usedWorkers
init|)
block|{
name|usedWorkers
operator|.
name|release
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|usedWorkers
operator|.
name|wake
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Will only be called when loading procedures, where we need to construct the used worker set for    * each peer.    */
specifier|public
name|void
name|addUsedPeerWorker
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ServerName
name|worker
parameter_list|)
block|{
name|usedWorkersByPeer
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
operator|.
name|used
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createPeerRemoteWALDir
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|peerRemoteWALDir
init|=
name|getPeerRemoteWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|peerRemoteWALDir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|peerRemoteWALDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to mkdir "
operator|+
name|peerRemoteWALDir
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|deleteDir
argument_list|(
name|dst
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename dir from "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" for peer id="
operator|+
name|peerId
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed dir from {} to {} for peer id={}"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Want to rename from "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|", but they both do not exist"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|renameToPeerReplayWALDir
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|rename
argument_list|(
name|getPeerRemoteWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|getPeerReplayWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|renameToPeerSnapshotWALDir
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|rename
argument_list|(
name|getPeerReplayWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|getPeerSnapshotWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|getReplayWALsAndCleanUpUnusedFiles
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|peerReplayWALDir
init|=
name|getPeerReplayWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|peerReplayWALDir
argument_list|,
name|p
lambda|->
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|ReplicationUtils
operator|.
name|RENAME_WAL_SUFFIX
argument_list|)
argument_list|)
control|)
block|{
name|Path
name|src
operator|=
name|status
operator|.
name|getPath
argument_list|()
block|;
name|String
name|srcName
operator|=
name|src
operator|.
name|getName
argument_list|()
block|;
name|String
name|dstName
operator|=
name|srcName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|srcName
operator|.
name|length
argument_list|()
operator|-
name|ReplicationUtils
operator|.
name|RENAME_WAL_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
block|;
name|FSUtils
operator|.
name|renameFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
operator|new
name|Path
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
argument_list|,
name|dstName
argument_list|)
argument_list|)
block|;     }
name|List
argument_list|<
name|Path
argument_list|>
name|wals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|peerReplayWALDir
argument_list|)
control|)
block|{
name|Path
name|path
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|ReplicationUtils
operator|.
name|SYNC_WAL_SUFFIX
argument_list|)
condition|)
block|{
name|wals
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not delete unused file: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|wals
return|;
block|}
specifier|private
name|void
name|deleteDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to remove dir "
operator|+
name|dir
operator|+
literal|" for peer id="
operator|+
name|peerId
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removePeerRemoteWALs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteDir
argument_list|(
name|getPeerRemoteWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|deleteDir
argument_list|(
name|getPeerReplayWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|deleteDir
argument_list|(
name|getPeerSnapshotWALDir
argument_list|(
name|remoteWALDir
argument_list|,
name|peerId
argument_list|)
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|removeWALRootPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|pathStr
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// remove the "/" too.
return|return
name|pathStr
operator|.
name|substring
argument_list|(
name|walRootDir
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
name|void
name|finishReplayWAL
parameter_list|(
name|String
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|walPath
init|=
operator|new
name|Path
argument_list|(
name|walRootDir
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|fs
operator|.
name|truncate
argument_list|(
name|walPath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReplayWALFinished
parameter_list|(
name|String
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|walPath
init|=
operator|new
name|Path
argument_list|(
name|walRootDir
argument_list|,
name|wal
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|walPath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Path
name|getRemoteWALDir
parameter_list|()
block|{
return|return
name|remoteWALDir
return|;
block|}
block|}
end_class

end_unit

