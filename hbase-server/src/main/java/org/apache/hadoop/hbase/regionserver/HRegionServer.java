begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClockOutOfSyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|FailedSanityCheckException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|OutOfOrderScannerNextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionServerStatusProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRowLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|YouAreDeadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZNodeClearer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AdminProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|ExecResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPCErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerNotRunningYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
operator|.
name|RegionOpenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
operator|.
name|FamilyPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ExecCoprocessorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ExecCoprocessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|LockRowRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|LockRowResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Mutate
operator|.
name|MutateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|UnlockRowRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|UnlockRowResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RpcRequestBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Leases
operator|.
name|LeaseStillHeldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseMetaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|CloseRootHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenMetaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenRootHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CompressionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ClusterStatusTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RootRegionTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperNodeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MBeanUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cliffc
operator|.
name|high_scale_lib
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_comment
comment|/**  * HRegionServer makes a set of HRegions available to clients. It checks in with  * the HMaster. There are many HRegionServers in a single HBase deployment.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|HRegionServer
implements|implements
name|ClientProtocol
implements|,
name|AdminProtocol
implements|,
name|Runnable
implements|,
name|RegionServerServices
implements|,
name|HBaseRPCErrorHandler
implements|,
name|LastSequenceId
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/*    * Strings to be used in forming the exception message for    * RegionsAlreadyInTransitionException.    */
specifier|protected
specifier|static
specifier|final
name|String
name|OPEN
init|=
literal|"OPEN"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CLOSE
init|=
literal|"CLOSE"
decl_stmt|;
comment|//RegionName vs current action in progress
comment|//true - if open region action in progress
comment|//false - if close region action in progress
specifier|protected
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Boolean
argument_list|>
name|regionsInTransitionInRS
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|maxScannerResultSize
decl_stmt|;
comment|// Cache flushing
specifier|protected
name|MemStoreFlusher
name|cacheFlusher
decl_stmt|;
comment|// catalog tracker
specifier|protected
name|CatalogTracker
name|catalogTracker
decl_stmt|;
comment|/**    * Go here to get table descriptors.    */
specifier|protected
name|TableDescriptors
name|tableDescriptors
decl_stmt|;
comment|// Replication services. If no replication, this handler will be null.
specifier|protected
name|ReplicationSourceService
name|replicationSourceHandler
decl_stmt|;
specifier|protected
name|ReplicationSinkService
name|replicationSinkHandler
decl_stmt|;
comment|// Compactions
specifier|public
name|CompactSplitThread
name|compactSplitThread
decl_stmt|;
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
name|scanners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map of regions currently being served by this region server. Key is the    * encoded region name.  All access should be synchronized.    */
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|onlineRegions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Leases
specifier|protected
name|Leases
name|leases
decl_stmt|;
comment|// Instance of the hbase executor service.
specifier|protected
name|ExecutorService
name|service
decl_stmt|;
comment|// Request counter. (Includes requests that are not serviced by regions.)
specifier|final
name|Counter
name|requestCount
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
comment|// If false, the file system has become unavailable
specifier|protected
specifier|volatile
name|boolean
name|fsOk
decl_stmt|;
specifier|protected
name|HFileSystem
name|fs
decl_stmt|;
comment|// Set when a report to the master comes back with a message asking us to
comment|// shutdown. Also set by call to stop when debugging or running unit tests
comment|// of HRegionServer in isolation.
specifier|protected
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
comment|// Go down hard. Used if file system becomes unavailable and also in
comment|// debugging and unit tests.
specifier|protected
specifier|volatile
name|boolean
name|abortRequested
decl_stmt|;
comment|// Port we put up the webui on.
specifier|protected
name|int
name|webuiport
init|=
operator|-
literal|1
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rowlocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// A state before we go into stopped state.  At this stage we're closing user
comment|// space regions.
specifier|private
name|boolean
name|stopping
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|haveRootRegion
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|useHBaseChecksum
decl_stmt|;
comment|// verify hbase checksums?
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|protected
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|protected
specifier|final
name|int
name|threadWakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|int
name|msgInterval
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numRegionsToReport
decl_stmt|;
comment|// Remote HMaster
specifier|private
name|RegionServerStatusProtocol
name|hbaseMaster
decl_stmt|;
comment|// Server to handle client requests. Default access so can be accessed by
comment|// unit tests.
name|RpcServer
name|rpcServer
decl_stmt|;
specifier|private
specifier|final
name|InetSocketAddress
name|isa
decl_stmt|;
comment|// Info server. Default access so can be used by unit tests. REGIONSERVER
comment|// is name of the webapp and the attribute name used stuffing this instance
comment|// into web context.
name|InfoServer
name|infoServer
decl_stmt|;
comment|/** region server process name */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER
init|=
literal|"regionserver"
decl_stmt|;
comment|/** region server configuration name */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_CONF
init|=
literal|"regionserver_conf"
decl_stmt|;
comment|/*    * Space is reserved in HRS constructor and then released when aborting to    * recover from an OOME. See HBASE-706. TODO: Make this percentage of the heap    * or a minimum.    */
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
name|reservedSpace
init|=
operator|new
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MetricsRegionServer
name|metricsRegionServer
decl_stmt|;
comment|/*    * Check for compactions requests.    */
name|Chore
name|compactionChecker
decl_stmt|;
comment|// HLog and HLog roller. log is protected rather than private to avoid
comment|// eclipse warning when accessed by inner classes
specifier|protected
specifier|volatile
name|HLog
name|hlog
decl_stmt|;
name|LogRoller
name|hlogRoller
decl_stmt|;
comment|// flag set after we're done setting up server threads (used for testing)
specifier|protected
specifier|volatile
name|boolean
name|isOnline
decl_stmt|;
comment|// zookeeper connection and watcher
specifier|private
name|ZooKeeperWatcher
name|zooKeeper
decl_stmt|;
comment|// master address manager and watcher
specifier|private
name|MasterAddressTracker
name|masterAddressManager
decl_stmt|;
comment|// Cluster Status Tracker
specifier|private
name|ClusterStatusTracker
name|clusterStatusTracker
decl_stmt|;
comment|// Log Splitting Worker
specifier|private
name|SplitLogWorker
name|splitLogWorker
decl_stmt|;
comment|// A sleeper that sleeps for msgInterval.
specifier|private
specifier|final
name|Sleeper
name|sleeper
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|RegionServerAccounting
name|regionServerAccounting
decl_stmt|;
comment|// Cache configuration and block cache reference
specifier|final
name|CacheConfig
name|cacheConfig
decl_stmt|;
comment|// reference to the Thrift Server.
specifier|volatile
specifier|private
name|HRegionThriftServer
name|thriftServer
decl_stmt|;
comment|/**    * The server name the Master sees us as.  Its made from the hostname the    * master passes us, port, and server startcode. Gets set after registration    * against  Master.  The hostname can differ from the hostname in {@link #isa}    * but usually doesn't if both servers resolve .    */
specifier|private
name|ServerName
name|serverNameFromMasterPOV
decl_stmt|;
comment|/**    * This servers startcode.    */
specifier|private
specifier|final
name|long
name|startcode
decl_stmt|;
comment|/**    * MX Bean for RegionServerInfo    */
specifier|private
name|ObjectName
name|mxBean
init|=
literal|null
decl_stmt|;
comment|/**    * Chore to clean periodically the moved region list    */
specifier|private
name|MovedRegionsCleaner
name|movedRegionsCleaner
decl_stmt|;
comment|/**    * The lease timeout period for row locks (milliseconds).    */
specifier|private
specifier|final
name|int
name|rowLockLeaseTimeoutPeriod
decl_stmt|;
comment|/**    * The lease timeout period for client scanners (milliseconds).    */
specifier|private
specifier|final
name|int
name|scannerLeaseTimeoutPeriod
decl_stmt|;
comment|/**    * The reference to the QosFunction    */
specifier|private
specifier|final
name|QosFunction
name|qosFunction
decl_stmt|;
comment|/**    * Starts a HRegionServer at the default location    *    * @param conf    * @throws IOException    * @throws InterruptedException    */
specifier|public
name|HRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|fsOk
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// Set how many times to retry talking to another server over HConnection.
name|HConnectionManager
operator|.
name|setServerSideHConnectionRetries
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|isOnline
operator|=
literal|false
expr_stmt|;
name|checkCodecs
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// do we use checksum verfication in the hbase? If hbase checksum verification
comment|// is enabled, then we automatically switch off hdfs checksum verification.
name|this
operator|.
name|useHBaseChecksum
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CHECKSUM_VERIFICATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Config'ed params
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|msgInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
name|this
operator|.
name|msgInterval
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxScannerResultSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRegionsToReport
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.numregionstoreport"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|abortRequested
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|rowLockLeaseTimeoutPeriod
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_REGIONSERVER_ROWLOCK_TIMEOUT_PERIOD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_REGIONSERVER_ROWLOCK_TIMEOUT_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerLeaseTimeoutPeriod
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|)
expr_stmt|;
comment|// Server to handle client requests.
name|String
name|hostname
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_PORT
argument_list|)
decl_stmt|;
comment|// Creation of a HSA will force a resolve.
name|InetSocketAddress
name|initialIsa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
name|this
operator|.
name|rpcServer
operator|=
name|HBaseRPC
operator|.
name|getServer
argument_list|(
name|AdminProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ClientProtocol
operator|.
name|class
operator|,
name|AdminProtocol
operator|.
name|class
operator|,
name|HBaseRPCErrorHandler
operator|.
name|class
operator|,
name|OnlineRegions
operator|.
name|class
block|}
operator|,
name|initialIsa
operator|.
name|getHostName
argument_list|()
operator|,
comment|// BindAddress is IP we got for this server.
name|initialIsa
operator|.
name|getPort
argument_list|()
operator|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|10
argument_list|)
operator|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.metahandler.count"
argument_list|,
literal|10
argument_list|)
operator|,
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.rpc.verbose"
argument_list|,
literal|false
argument_list|)
operator|,
name|conf
operator|,
name|HConstants
operator|.
name|QOS_THRESHOLD
block|)
empty_stmt|;
comment|// Set our address.
name|this
operator|.
name|isa
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|setErrorHandler
parameter_list|(
name|this
parameter_list|)
constructor_decl|;
name|this
operator|.
name|rpcServer
operator|.
name|setQosFunction
argument_list|(
operator|(
name|qosFunction
operator|=
operator|new
name|QosFunction
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|startcode
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// login the server principal (if using secure Hadoop)
name|User
operator|.
name|login
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|"hbase.regionserver.keytab.file"
argument_list|,
literal|"hbase.regionserver.kerberos.principal"
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|regionServerAccounting
operator|=
operator|new
name|RegionServerAccounting
argument_list|()
expr_stmt|;
name|cacheConfig
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_class

begin_comment
comment|/**    * Run test on configured codecs to make sure supporting libs are in place.    * @param c    * @throws IOException    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|checkCodecs
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check to see if the codec list is available:
name|String
index|[]
name|codecs
init|=
name|c
operator|.
name|getStrings
argument_list|(
literal|"hbase.regionserver.codecs"
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|codecs
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|String
name|codec
range|:
name|codecs
control|)
block|{
if|if
condition|(
operator|!
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|codec
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Compression codec "
operator|+
name|codec
operator|+
literal|" not supported, aborting RS construction"
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CLUSTER_ID
argument_list|)
return|;
block|}
end_function

begin_annotation_defn
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
specifier|protected
annotation_defn|@interface
name|QosPriority
block|{
name|int
name|priority
parameter_list|()
default|default
literal|0
function_decl|;
block|}
end_annotation_defn

begin_function
name|QosFunction
name|getQosFunction
parameter_list|()
block|{
return|return
name|qosFunction
return|;
block|}
end_function

begin_function
name|RegionScanner
name|getScanner
parameter_list|(
name|long
name|scannerId
parameter_list|)
block|{
name|String
name|scannerIdString
init|=
name|Long
operator|.
name|toString
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
name|RegionScannerHolder
name|scannerHolder
init|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|scannerHolder
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerHolder
operator|.
name|s
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Utility used ensuring higher quality of service for priority rpcs; e.g.    * rpcs to .META. and -ROOT-, etc.    */
end_comment

begin_class
class|class
name|QosFunction
implements|implements
name|Function
argument_list|<
name|RpcRequestBody
argument_list|,
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|annotatedQos
decl_stmt|;
comment|//We need to mock the regionserver instance for some unit tests (set via
comment|//setRegionServer method.
comment|//The field value is initially set to the enclosing instance of HRegionServer.
specifier|private
name|HRegionServer
name|hRegionServer
init|=
name|HRegionServer
operator|.
name|this
decl_stmt|;
comment|//The logic for figuring out high priority RPCs is as follows:
comment|//1. if the method is annotated with a QosPriority of QOS_HIGH,
comment|//   that is honored
comment|//2. parse out the protobuf message and see if the request is for meta
comment|//   region, and if so, treat it as a high priority RPC
comment|//Some optimizations for (2) are done here -
comment|//Clients send the argument classname as part of making the RPC. The server
comment|//decides whether to deserialize the proto argument message based on the
comment|//pre-established set of argument classes (knownArgumentClasses below).
comment|//This prevents the server from having to deserialize all proto argument
comment|//messages prematurely.
comment|//All the argument classes declare a 'getRegion' method that returns a
comment|//RegionSpecifier object. Methods can be invoked on the returned object
comment|//to figure out whether it is a meta region or not.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
index|[]
name|knownArgumentClasses
init|=
operator|new
name|Class
index|[]
block|{
name|GetRegionInfoRequest
operator|.
name|class
block|,
name|GetStoreFileRequest
operator|.
name|class
block|,
name|CloseRegionRequest
operator|.
name|class
block|,
name|FlushRegionRequest
operator|.
name|class
block|,
name|SplitRegionRequest
operator|.
name|class
block|,
name|CompactRegionRequest
operator|.
name|class
block|,
name|GetRequest
operator|.
name|class
block|,
name|MutateRequest
operator|.
name|class
block|,
name|ScanRequest
operator|.
name|class
block|,
name|LockRowRequest
operator|.
name|class
block|,
name|UnlockRowRequest
operator|.
name|class
block|,
name|MultiRequest
operator|.
name|class
block|}
decl_stmt|;
comment|//Some caches for helping performance
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|argumentToClassMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|,
name|Method
argument_list|>
argument_list|>
name|methodMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|,
name|Method
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|QosFunction
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|qosMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|HRegionServer
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|QosPriority
name|p
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|QosPriority
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|qosMap
operator|.
name|put
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|priority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|annotatedQos
operator|=
name|qosMap
expr_stmt|;
if|if
condition|(
name|methodMap
operator|.
name|get
argument_list|(
literal|"parseFrom"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|methodMap
operator|.
name|put
argument_list|(
literal|"parseFrom"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|,
name|Method
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methodMap
operator|.
name|get
argument_list|(
literal|"getRegion"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|methodMap
operator|.
name|put
argument_list|(
literal|"getRegion"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|,
name|Method
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|cls
range|:
name|knownArgumentClasses
control|)
block|{
name|argumentToClassMap
operator|.
name|put
argument_list|(
name|cls
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
try|try
block|{
name|methodMap
operator|.
name|get
argument_list|(
literal|"parseFrom"
argument_list|)
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|cls
operator|.
name|getDeclaredMethod
argument_list|(
literal|"parseFrom"
argument_list|,
name|ByteString
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|methodMap
operator|.
name|get
argument_list|(
literal|"getRegion"
argument_list|)
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|cls
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getRegion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|void
name|setRegionServer
parameter_list|(
name|HRegionServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|hRegionServer
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMetaRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|HRegion
name|region
decl_stmt|;
try|try
block|{
name|region
operator|=
name|hRegionServer
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|ignored
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|RpcRequestBody
name|from
parameter_list|)
block|{
name|String
name|methodName
init|=
name|from
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|rpcArgClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|hasRequestClassName
argument_list|()
condition|)
block|{
name|String
name|cls
init|=
name|from
operator|.
name|getRequestClassName
argument_list|()
decl_stmt|;
name|rpcArgClass
operator|=
name|argumentToClassMap
operator|.
name|get
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
name|Integer
name|priorityByAnnotation
init|=
name|annotatedQos
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorityByAnnotation
operator|!=
literal|null
condition|)
block|{
return|return
name|priorityByAnnotation
return|;
block|}
if|if
condition|(
name|rpcArgClass
operator|==
literal|null
operator|||
name|from
operator|.
name|getRequest
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|HConstants
operator|.
name|NORMAL_QOS
return|;
block|}
name|Object
name|deserializedRequestObj
init|=
literal|null
decl_stmt|;
comment|//check whether the request has reference to Meta region
try|try
block|{
name|Method
name|parseFrom
init|=
name|methodMap
operator|.
name|get
argument_list|(
literal|"parseFrom"
argument_list|)
operator|.
name|get
argument_list|(
name|rpcArgClass
argument_list|)
decl_stmt|;
name|deserializedRequestObj
operator|=
name|parseFrom
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|from
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Method
name|getRegion
init|=
name|methodMap
operator|.
name|get
argument_list|(
literal|"getRegion"
argument_list|)
operator|.
name|get
argument_list|(
name|rpcArgClass
argument_list|)
decl_stmt|;
name|RegionSpecifier
name|regionSpecifier
init|=
operator|(
name|RegionSpecifier
operator|)
name|getRegion
operator|.
name|invoke
argument_list|(
name|deserializedRequestObj
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|hRegionServer
operator|.
name|getRegion
argument_list|(
name|regionSpecifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"High priority: "
operator|+
name|from
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HConstants
operator|.
name|HIGH_QOS
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"scan"
argument_list|)
condition|)
block|{
comment|// scanner methods...
name|ScanRequest
name|request
init|=
operator|(
name|ScanRequest
operator|)
name|deserializedRequestObj
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
return|return
name|HConstants
operator|.
name|NORMAL_QOS
return|;
block|}
name|RegionScanner
name|scanner
init|=
name|hRegionServer
operator|.
name|getScanner
argument_list|(
name|request
operator|.
name|getScannerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|!=
literal|null
operator|&&
name|scanner
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"High priority scanner request: "
operator|+
name|request
operator|.
name|getScannerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HConstants
operator|.
name|HIGH_QOS
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Low priority: "
operator|+
name|from
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HConstants
operator|.
name|NORMAL_QOS
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * All initialization needed before we go register with Master.    *    * @throws IOException    * @throws InterruptedException    */
end_comment

begin_function
specifier|private
name|void
name|preRegistrationInitialization
parameter_list|()
block|{
try|try
block|{
name|initializeZooKeeper
argument_list|()
expr_stmt|;
name|initializeThreads
argument_list|()
expr_stmt|;
name|int
name|nbBlocks
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.nbreservationblocks"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbBlocks
condition|;
name|i
operator|++
control|)
block|{
name|reservedSpace
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
name|HConstants
operator|.
name|DEFAULT_SIZE_RESERVATION_BLOCK
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Call stop if error or process will stick around for ever since server
comment|// puts up non-daemon threads.
name|this
operator|.
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|abort
argument_list|(
literal|"Initialization of RS failed.  Hence aborting RS."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Bring up connection to zk ensemble and then wait until a master for this    * cluster and then after that, wait until cluster 'up' flag has been set.    * This is the order in which master does things.    * Finally put up a catalog tracker.    * @throws IOException    * @throws InterruptedException    */
end_comment

begin_function
specifier|private
name|void
name|initializeZooKeeper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Open connection to zookeeper and set primary watcher
name|this
operator|.
name|zooKeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|REGIONSERVER
operator|+
literal|":"
operator|+
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Create the master address manager, register with zk, and start it.  Then
comment|// block until a master is available.  No point in starting up if no master
comment|// running.
name|this
operator|.
name|masterAddressManager
operator|=
operator|new
name|MasterAddressTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterAddressManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|blockAndCheckIfStopped
argument_list|(
name|this
operator|.
name|masterAddressManager
argument_list|)
expr_stmt|;
comment|// Wait on cluster being up.  Master will set this flag up in zookeeper
comment|// when ready.
name|this
operator|.
name|clusterStatusTracker
operator|=
operator|new
name|ClusterStatusTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterStatusTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|blockAndCheckIfStopped
argument_list|(
name|this
operator|.
name|clusterStatusTracker
argument_list|)
expr_stmt|;
comment|// Create the catalog tracker and start it;
name|this
operator|.
name|catalogTracker
operator|=
operator|new
name|CatalogTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.catalog.timeout"
argument_list|,
literal|600000
argument_list|)
argument_list|)
expr_stmt|;
name|catalogTracker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Retrieve clusterId
comment|// Since cluster status is now up
comment|// ID should have already been set by HMaster
try|try
block|{
name|String
name|clusterId
init|=
name|ZKClusterId
operator|.
name|readClusterIdZNode
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|abort
argument_list|(
literal|"Cluster ID has not been set"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CLUSTER_ID
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ClusterId : "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abort
argument_list|(
literal|"Failed to retrieve Cluster ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Utilty method to wait indefinitely on a znode availability while checking    * if the region server is shut down    * @param tracker znode tracker to use    * @throws IOException any IO exception, plus if the RS is stopped    * @throws InterruptedException    */
end_comment

begin_function
specifier|private
name|void
name|blockAndCheckIfStopped
parameter_list|(
name|ZooKeeperNodeTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
while|while
condition|(
name|tracker
operator|.
name|blockUntilAvailable
argument_list|(
name|this
operator|.
name|msgInterval
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Received the shutdown message while waiting."
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * @return False if cluster shutdown in progress    */
end_comment

begin_function
specifier|private
name|boolean
name|isClusterUp
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterStatusTracker
operator|.
name|isClusterUp
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|initializeThreads
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Cache flushing thread.
name|this
operator|.
name|cacheFlusher
operator|=
operator|new
name|MemStoreFlusher
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Compaction thread
name|this
operator|.
name|compactSplitThread
operator|=
operator|new
name|CompactSplitThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Background thread to check for compactions; needed if region
comment|// has not gotten updates in a while. Make it run at a lesser frequency.
name|int
name|multiplier
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
operator|+
literal|".multiplier"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|this
operator|.
name|compactionChecker
operator|=
operator|new
name|CompactionChecker
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|threadWakeFrequency
operator|*
name|multiplier
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|=
operator|new
name|Leases
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
comment|// Create the thread for the ThriftServer.
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.regionserver.export.thrift"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|thriftServer
operator|=
operator|new
name|HRegionThriftServer
argument_list|(
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|thriftServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started Thrift API from Region Server."
argument_list|)
expr_stmt|;
block|}
comment|// Create the thread to clean the moved regions list
name|movedRegionsCleaner
operator|=
name|MovedRegionsCleaner
operator|.
name|createAndStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * The HRegionServer sticks in this loop until closed.    */
end_comment

begin_function
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Do pre-registration initializations; zookeeper, lease threads, etc.
name|preRegistrationInitialization
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Fatal exception during initialization"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Try and register with the Master; tell it we are here.  Break if
comment|// server is stopped or the clusterup flag is down or hdfs went wacky.
while|while
condition|(
name|keepLooping
argument_list|()
condition|)
block|{
name|RegionServerStartupResponse
name|w
init|=
name|reportForDuty
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"reportForDuty failed; sleeping and then retrying."
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|handleReportForDutyResponse
argument_list|(
name|w
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// We registered with the Master.  Go into run mode.
name|long
name|lastMsg
init|=
literal|0
decl_stmt|;
name|long
name|oldRequestCount
init|=
operator|-
literal|1
decl_stmt|;
comment|// The main run loop.
while|while
condition|(
operator|!
name|this
operator|.
name|stopped
operator|&&
name|isHealthy
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isClusterUp
argument_list|()
condition|)
block|{
if|if
condition|(
name|isOnlineRegionsEmpty
argument_list|()
condition|)
block|{
name|stop
argument_list|(
literal|"Exiting; cluster shutdown set and not carrying any regions"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|stopping
condition|)
block|{
name|this
operator|.
name|stopping
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing user regions"
argument_list|)
expr_stmt|;
name|closeUserRegions
argument_list|(
name|this
operator|.
name|abortRequested
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|stopping
condition|)
block|{
name|boolean
name|allUserRegionsOffline
init|=
name|areAllUserRegionsOffline
argument_list|()
decl_stmt|;
if|if
condition|(
name|allUserRegionsOffline
condition|)
block|{
comment|// Set stopped if no requests since last time we went around the loop.
comment|// The remaining meta regions will be closed on our way out.
if|if
condition|(
name|oldRequestCount
operator|==
name|this
operator|.
name|requestCount
operator|.
name|get
argument_list|()
condition|)
block|{
name|stop
argument_list|(
literal|"Stopped; only catalog regions remaining online"
argument_list|)
expr_stmt|;
break|break;
block|}
name|oldRequestCount
operator|=
name|this
operator|.
name|requestCount
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Make sure all regions have been closed -- some regions may
comment|// have not got it because we were splitting at the time of
comment|// the call to closeUserRegions.
name|closeUserRegions
argument_list|(
name|this
operator|.
name|abortRequested
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on "
operator|+
name|getOnlineRegionsAsPrintableString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|now
operator|-
name|lastMsg
operator|)
operator|>=
name|msgInterval
condition|)
block|{
name|tryRegionServerReport
argument_list|(
name|lastMsg
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|lastMsg
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|stopped
condition|)
name|this
operator|.
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
comment|// for
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkOOME
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|abort
argument_list|(
literal|"Unhandled exception: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Run shutdown.
if|if
condition|(
name|mxBean
operator|!=
literal|null
condition|)
block|{
name|MBeanUtil
operator|.
name|unregisterMBean
argument_list|(
name|mxBean
argument_list|)
expr_stmt|;
name|mxBean
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|thriftServer
operator|!=
literal|null
condition|)
name|this
operator|.
name|thriftServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|closeAfterLeasesExpire
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|splitLogWorker
operator|!=
literal|null
condition|)
block|{
name|splitLogWorker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Send cache a shutdown.
if|if
condition|(
name|cacheConfig
operator|.
name|isBlockCacheEnabled
argument_list|()
condition|)
block|{
name|cacheConfig
operator|.
name|getBlockCache
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|movedRegionsCleaner
operator|.
name|stop
argument_list|(
literal|"Region Server stopping"
argument_list|)
expr_stmt|;
comment|// Send interrupts to wake up threads if sleeping so they notice shutdown.
comment|// TODO: Should we check they are alive? If OOME could have exited already
if|if
condition|(
name|this
operator|.
name|cacheFlusher
operator|!=
literal|null
condition|)
name|this
operator|.
name|cacheFlusher
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compactSplitThread
operator|!=
literal|null
condition|)
name|this
operator|.
name|compactSplitThread
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hlogRoller
operator|!=
literal|null
condition|)
name|this
operator|.
name|hlogRoller
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compactionChecker
operator|!=
literal|null
condition|)
name|this
operator|.
name|compactionChecker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|killed
condition|)
block|{
comment|// Just skip out w/o closing regions.  Used when testing.
block|}
elseif|else
if|if
condition|(
name|abortRequested
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|fsOk
condition|)
block|{
name|closeUserRegions
argument_list|(
name|abortRequested
argument_list|)
expr_stmt|;
comment|// Don't leave any open file handles
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"aborting server "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeUserRegions
argument_list|(
name|abortRequested
argument_list|)
expr_stmt|;
name|closeAllScanners
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping server "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
comment|// Interrupt catalog tracker here in case any regions being opened out in
comment|// handlers are stuck waiting on meta or root.
if|if
condition|(
name|this
operator|.
name|catalogTracker
operator|!=
literal|null
condition|)
name|this
operator|.
name|catalogTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Closing the compactSplit thread before closing meta regions
if|if
condition|(
operator|!
name|this
operator|.
name|killed
operator|&&
name|containsMetaTableRegions
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|abortRequested
operator|||
name|this
operator|.
name|fsOk
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|compactSplitThread
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|compactSplitThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|this
operator|.
name|compactSplitThread
operator|=
literal|null
expr_stmt|;
block|}
name|closeMetaTableRegions
argument_list|(
name|abortRequested
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|killed
operator|&&
name|this
operator|.
name|fsOk
condition|)
block|{
name|waitOnAllRegionsToClose
argument_list|(
name|abortRequested
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping server "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|+
literal|"; all regions closed."
argument_list|)
expr_stmt|;
block|}
comment|//fsOk flag may be changed when closing regions throws exception.
if|if
condition|(
operator|!
name|this
operator|.
name|killed
operator|&&
name|this
operator|.
name|fsOk
condition|)
block|{
name|closeWAL
argument_list|(
name|abortRequested
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the proxy is down.
if|if
condition|(
name|this
operator|.
name|hbaseMaster
operator|!=
literal|null
condition|)
block|{
name|HBaseRPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|hbaseMaster
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseMaster
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|leases
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|killed
condition|)
block|{
name|join
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|deleteMyEphemeralNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting my ephemeral node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// We may have failed to delete the znode at the previous step, but
comment|//  we delete the file anyway: a second attempt to delete the znode is likely to fail again.
name|ZNodeClearer
operator|.
name|deleteMyEphemeralNodeOnDisk
argument_list|()
expr_stmt|;
name|this
operator|.
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping server "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|+
literal|"; zookeeper connection closed."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|containsMetaTableRegions
parameter_list|()
block|{
return|return
name|onlineRegions
operator|.
name|containsKey
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|||
name|onlineRegions
operator|.
name|containsKey
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|areAllUserRegionsOffline
parameter_list|()
block|{
if|if
condition|(
name|getNumberOfOnlineRegions
argument_list|()
operator|>
literal|2
condition|)
return|return
literal|false
return|;
name|boolean
name|allUserRegionsOffline
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|e
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|allUserRegionsOffline
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allUserRegionsOffline
return|;
block|}
end_function

begin_function
name|void
name|tryRegionServerReport
parameter_list|(
name|long
name|reportStartTime
parameter_list|,
name|long
name|reportEndTime
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseProtos
operator|.
name|ServerLoad
name|sl
init|=
name|buildServerLoad
argument_list|(
name|reportStartTime
argument_list|,
name|reportEndTime
argument_list|)
decl_stmt|;
try|try
block|{
name|RegionServerReportRequest
operator|.
name|Builder
name|request
init|=
name|RegionServerReportRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|getVersionedBytes
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLoad
argument_list|(
name|sl
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseMaster
operator|.
name|regionServerReport
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|IOException
name|ioe
init|=
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|YouAreDeadException
condition|)
block|{
comment|// This will be caught and handled as a fatal error in run()
throw|throw
name|ioe
throw|;
block|}
comment|// Couldn't connect to the master, get location from zk and reconnect
comment|// Method blocks until new master is found or we are stopped
name|getMaster
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
name|HBaseProtos
operator|.
name|ServerLoad
name|buildServerLoad
parameter_list|(
name|long
name|reportStartTime
parameter_list|,
name|long
name|reportEndTime
parameter_list|)
block|{
comment|// We're getting the MetricsRegionServerWrapper here because the wrapper computes requests
comment|// per second, and other metrics  As long as metrics are part of ServerLoad it's best to use
comment|// the wrapper to compute those numbers in one place.
comment|// In the long term most of these should be moved off of ServerLoad and the heart beat.
comment|// Instead they should be stored in an HBase table so that external visibility into HBase is
comment|// improved; Additionally the load balancer will be able to take advantage of a more complete
comment|// history.
name|MetricsRegionServerWrapper
name|regionServerWrapper
init|=
name|this
operator|.
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|getOnlineRegionsLocalContext
argument_list|()
decl_stmt|;
name|MemoryUsage
name|memory
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|ServerLoad
operator|.
name|Builder
name|serverLoad
init|=
name|HBaseProtos
operator|.
name|ServerLoad
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|serverLoad
operator|.
name|setNumberOfRequests
argument_list|(
operator|(
name|int
operator|)
name|regionServerWrapper
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|)
expr_stmt|;
name|serverLoad
operator|.
name|setTotalNumberOfRequests
argument_list|(
operator|(
name|int
operator|)
name|regionServerWrapper
operator|.
name|getTotalRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|serverLoad
operator|.
name|setUsedHeapMB
argument_list|(
call|(
name|int
call|)
argument_list|(
name|memory
operator|.
name|getUsed
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|serverLoad
operator|.
name|setMaxHeapMB
argument_list|(
call|(
name|int
call|)
argument_list|(
name|memory
operator|.
name|getMax
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
init|=
name|this
operator|.
name|hlog
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|getCoprocessors
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|coprocessor
range|:
name|coprocessors
control|)
block|{
name|serverLoad
operator|.
name|addCoprocessors
argument_list|(
name|Coprocessor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|coprocessor
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|serverLoad
operator|.
name|addRegionLoads
argument_list|(
name|createRegionLoad
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverLoad
operator|.
name|setReportStartTime
argument_list|(
name|reportStartTime
argument_list|)
expr_stmt|;
name|serverLoad
operator|.
name|setReportEndTime
argument_list|(
name|reportEndTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|serverLoad
operator|.
name|setInfoServerPort
argument_list|(
name|this
operator|.
name|infoServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverLoad
operator|.
name|setInfoServerPort
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|serverLoad
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
name|String
name|getOnlineRegionsAsPrintableString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Wait on regions close.    */
end_comment

begin_function
specifier|private
name|void
name|waitOnAllRegionsToClose
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
comment|// Wait till all regions are closed before going out.
name|int
name|lastCount
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|previousLogTime
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|closedRegions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|isOnlineRegionsEmpty
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|getNumberOfOnlineRegions
argument_list|()
decl_stmt|;
comment|// Only print a message if the count of regions has changed.
if|if
condition|(
name|count
operator|!=
name|lastCount
condition|)
block|{
comment|// Log every second at most
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
operator|(
name|previousLogTime
operator|+
literal|1000
operator|)
condition|)
block|{
name|previousLogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|lastCount
operator|=
name|count
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on "
operator|+
name|count
operator|+
literal|" regions to close"
argument_list|)
expr_stmt|;
comment|// Only print out regions still closing if a small number else will
comment|// swamp the log.
if|if
condition|(
name|count
operator|<
literal|10
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|onlineRegions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Ensure all user regions have been sent a close. Use this to
comment|// protect against the case where an open comes in after we start the
comment|// iterator of onlineRegions to close all user regions.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|e
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
operator|&&
operator|!
name|closedRegions
operator|.
name|contains
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
name|closedRegions
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't update zk with this close transition; pass false.
name|closeRegion
argument_list|(
name|hri
argument_list|,
name|abort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// No regions in RIT, we could stop waiting now.
if|if
condition|(
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isOnlineRegionsEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We were exiting though online regions are not empty,"
operator|+
literal|" because some regions failed closing"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|closeWAL
parameter_list|(
specifier|final
name|boolean
name|delete
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|hlog
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|delete
condition|)
block|{
name|hlog
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hlog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close and delete failed"
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkThrowable
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|closeAllScanners
parameter_list|()
block|{
comment|// Close any outstanding scanners. Means they'll get an UnknownScanner
comment|// exception next time they come in.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
name|e
range|:
name|this
operator|.
name|scanners
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing scanner "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/*    * Run init. Sets up hlog and starts up all server threads.    *    * @param c Extra configuration.    */
end_comment

begin_function
specifier|protected
name|void
name|handleReportForDutyResponse
parameter_list|(
specifier|final
name|RegionServerStartupResponse
name|c
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|NameStringPair
name|e
range|:
name|c
operator|.
name|getMapEntriesList
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// The hostname the master sees us as.
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|KEY_FOR_HOSTNAME_SEEN_BY_MASTER
argument_list|)
condition|)
block|{
name|String
name|hostnameFromMasterPOV
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|this
operator|.
name|serverNameFromMasterPOV
operator|=
operator|new
name|ServerName
argument_list|(
name|hostnameFromMasterPOV
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|this
operator|.
name|startcode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Master passed us hostname to use. Was="
operator|+
name|this
operator|.
name|isa
operator|.
name|getHostName
argument_list|()
operator|+
literal|", Now="
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Config from master: "
operator|+
name|key
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// hack! Maps DFSClient => RegionServer for logs.  HDFS made this
comment|// config param for task trackers, but we can piggyback off of it.
if|if
condition|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.task.id"
argument_list|,
literal|"hb_rs_"
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set our ephemeral znode up in zookeeper now we have a name.
name|createMyEphemeralNode
argument_list|()
expr_stmt|;
comment|// Save it in a file, this will allow to see if we crash
name|ZNodeClearer
operator|.
name|writeMyEphemeralNodeOnDisk
argument_list|(
name|getMyEphemeralNodePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Master sent us hbase.rootdir to use. Should be fully qualified
comment|// path with file system specification included. Set 'fs.defaultFS'
comment|// to match the filesystem on hbase.rootdir else underlying hadoop hdfs
comment|// accessors will be going against wrong filesystem (unless all is set
comment|// to defaults).
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rootdir"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get fs instance used by this RS
name|this
operator|.
name|fs
operator|=
operator|new
name|HFileSystem
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|useHBaseChecksum
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableDescriptors
operator|=
operator|new
name|FSTableDescriptors
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|=
name|setupWALAndReplication
argument_list|()
expr_stmt|;
comment|// Init in here rather than in constructor after thread name has been set
name|this
operator|.
name|metricsRegionServer
operator|=
operator|new
name|MetricsRegionServer
argument_list|(
operator|new
name|MetricsRegionServerWrapperImpl
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|startServiceThreads
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Serving as "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|+
literal|", RPC listening on "
operator|+
name|this
operator|.
name|isa
operator|+
literal|", sessionid=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|isOnline
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|isOnline
operator|=
literal|false
expr_stmt|;
name|stop
argument_list|(
literal|"Failed initialization"
argument_list|)
expr_stmt|;
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|e
argument_list|,
literal|"Failed init"
argument_list|)
argument_list|,
literal|"Region server startup failed"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sleeper
operator|.
name|skipSleepCycle
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|createMyEphemeralNode
parameter_list|()
throws|throws
name|KeeperException
block|{
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|getMyEphemeralNodePath
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|deleteMyEphemeralNode
parameter_list|()
throws|throws
name|KeeperException
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|getMyEphemeralNodePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|RegionServerAccounting
name|getRegionServerAccounting
parameter_list|()
block|{
return|return
name|regionServerAccounting
return|;
block|}
end_function

begin_comment
comment|/*    * @param r Region to get RegionLoad for.    *    * @return RegionLoad instance.    *    * @throws IOException    */
end_comment

begin_function
specifier|private
name|RegionLoad
name|createRegionLoad
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
block|{
name|byte
index|[]
name|name
init|=
name|r
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|int
name|stores
init|=
literal|0
decl_stmt|;
name|int
name|storefiles
init|=
literal|0
decl_stmt|;
name|int
name|storeUncompressedSizeMB
init|=
literal|0
decl_stmt|;
name|int
name|storefileSizeMB
init|=
literal|0
decl_stmt|;
name|int
name|memstoreSizeMB
init|=
call|(
name|int
call|)
argument_list|(
name|r
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
decl_stmt|;
name|int
name|storefileIndexSizeMB
init|=
literal|0
decl_stmt|;
name|int
name|rootIndexSizeKB
init|=
literal|0
decl_stmt|;
name|int
name|totalStaticIndexSizeKB
init|=
literal|0
decl_stmt|;
name|int
name|totalStaticBloomSizeKB
init|=
literal|0
decl_stmt|;
name|long
name|totalCompactingKVs
init|=
literal|0
decl_stmt|;
name|long
name|currentCompactedKVs
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|r
operator|.
name|stores
init|)
block|{
name|stores
operator|+=
name|r
operator|.
name|stores
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|storefiles
operator|+=
name|store
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
name|storeUncompressedSizeMB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getStoreSizeUncompressed
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|storefileSizeMB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getStorefilesSize
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|storefileIndexSizeMB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getStorefilesIndexSize
argument_list|()
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|CompactionProgress
name|progress
init|=
name|store
operator|.
name|getCompactionProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
name|totalCompactingKVs
operator|+=
name|progress
operator|.
name|totalCompactingKVs
expr_stmt|;
name|currentCompactedKVs
operator|+=
name|progress
operator|.
name|currentCompactedKVs
expr_stmt|;
block|}
name|rootIndexSizeKB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getStorefilesIndexSize
argument_list|()
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|totalStaticIndexSizeKB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getTotalStaticIndexSize
argument_list|()
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|totalStaticBloomSizeKB
operator|+=
call|(
name|int
call|)
argument_list|(
name|store
operator|.
name|getTotalStaticBloomSize
argument_list|()
operator|/
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
name|RegionLoad
operator|.
name|Builder
name|regionLoad
init|=
name|RegionLoad
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|RegionSpecifier
operator|.
name|Builder
name|regionSpecifier
init|=
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|regionSpecifier
operator|.
name|setType
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|)
expr_stmt|;
name|regionSpecifier
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|regionLoad
operator|.
name|setRegionSpecifier
argument_list|(
name|regionSpecifier
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setStores
argument_list|(
name|stores
argument_list|)
operator|.
name|setStorefiles
argument_list|(
name|storefiles
argument_list|)
operator|.
name|setStoreUncompressedSizeMB
argument_list|(
name|storeUncompressedSizeMB
argument_list|)
operator|.
name|setStorefileSizeMB
argument_list|(
name|storefileSizeMB
argument_list|)
operator|.
name|setMemstoreSizeMB
argument_list|(
name|memstoreSizeMB
argument_list|)
operator|.
name|setStorefileIndexSizeMB
argument_list|(
name|storefileIndexSizeMB
argument_list|)
operator|.
name|setRootIndexSizeKB
argument_list|(
name|rootIndexSizeKB
argument_list|)
operator|.
name|setTotalStaticIndexSizeKB
argument_list|(
name|totalStaticIndexSizeKB
argument_list|)
operator|.
name|setTotalStaticBloomSizeKB
argument_list|(
name|totalStaticBloomSizeKB
argument_list|)
operator|.
name|setReadRequestsCount
argument_list|(
operator|(
name|int
operator|)
name|r
operator|.
name|readRequestsCount
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setWriteRequestsCount
argument_list|(
operator|(
name|int
operator|)
name|r
operator|.
name|writeRequestsCount
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setTotalCompactingKVs
argument_list|(
name|totalCompactingKVs
argument_list|)
operator|.
name|setCurrentCompactedKVs
argument_list|(
name|currentCompactedKVs
argument_list|)
operator|.
name|setCompleteSequenceId
argument_list|(
name|r
operator|.
name|completeSequenceId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessors
init|=
name|r
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|getCoprocessors
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|coprocessor
range|:
name|coprocessors
control|)
block|{
name|regionLoad
operator|.
name|addCoprocessors
argument_list|(
name|Coprocessor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|coprocessor
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regionLoad
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * @param encodedRegionName    * @return An instance of RegionLoad.    */
end_comment

begin_function
specifier|public
name|RegionLoad
name|createRegionLoad
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
name|r
operator|=
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
return|return
name|r
operator|!=
literal|null
condition|?
name|createRegionLoad
argument_list|(
name|r
argument_list|)
else|:
literal|null
return|;
block|}
end_function

begin_comment
comment|/*    * Inner class that runs on a long period checking if regions need compaction.    */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|CompactionChecker
extends|extends
name|Chore
block|{
specifier|private
specifier|final
name|HRegionServer
name|instance
decl_stmt|;
specifier|private
specifier|final
name|int
name|majorCompactPriority
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_PRIORITY
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|CompactionChecker
parameter_list|(
specifier|final
name|HRegionServer
name|h
parameter_list|,
specifier|final
name|int
name|sleepTime
parameter_list|,
specifier|final
name|Stoppable
name|stopper
parameter_list|)
block|{
name|super
argument_list|(
literal|"CompactionChecker"
argument_list|,
name|sleepTime
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|h
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Runs every "
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|sleepTime
argument_list|)
argument_list|)
expr_stmt|;
comment|/* MajorCompactPriority is configurable.        * If not set, the compaction will use default priority.        */
name|this
operator|.
name|majorCompactPriority
operator|=
name|this
operator|.
name|instance
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.compactionChecker.majorCompactPriority"
argument_list|,
name|DEFAULT_PRIORITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|this
operator|.
name|instance
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Store
name|s
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|s
operator|.
name|needsCompaction
argument_list|()
condition|)
block|{
comment|// Queue a compaction. Will recognize if major is needed.
name|this
operator|.
name|instance
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|getName
argument_list|()
operator|+
literal|" requests compaction"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|isMajorCompaction
argument_list|()
condition|)
block|{
if|if
condition|(
name|majorCompactPriority
operator|==
name|DEFAULT_PRIORITY
operator|||
name|majorCompactPriority
operator|>
name|r
operator|.
name|getCompactPriority
argument_list|()
condition|)
block|{
name|this
operator|.
name|instance
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|getName
argument_list|()
operator|+
literal|" requests major compaction; use default priority"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|instance
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|getName
argument_list|()
operator|+
literal|" requests major compaction; use configured priority"
argument_list|,
name|this
operator|.
name|majorCompactPriority
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed major compaction check on "
operator|+
name|r
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Report the status of the server. A server is online once all the startup is    * completed (setting up filesystem, starting service threads, etc.). This    * method is designed mostly to be useful in tests.    *    * @return true if online, false if not.    */
end_comment

begin_function
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|isOnline
return|;
block|}
end_function

begin_comment
comment|/**    * Setup WAL log and replication if enabled.    * Replication setup is done in here because it wants to be hooked up to WAL.    * @return A WAL instance.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|HLog
name|setupWALAndReplication
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|logName
init|=
name|HLogUtil
operator|.
name|getHLogDirectoryName
argument_list|(
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"logdir="
operator|+
name|logdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|logdir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegionServerRunningException
argument_list|(
literal|"Region server has already "
operator|+
literal|"created directory at "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Instantiate replication manager if replication enabled.  Pass it the
comment|// log directories.
name|createNewReplicationInstance
argument_list|(
name|conf
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|logdir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
return|return
name|instantiateHLog
argument_list|(
name|rootDir
argument_list|,
name|logName
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Called by {@link #setupWALAndReplication()} creating WAL instance.    * @param logdir    * @param oldLogDir    * @return WAL instance.    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|HLog
name|instantiateHLog
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|logName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|this
operator|.
name|fs
operator|.
name|getBackingFs
argument_list|()
argument_list|,
name|rootdir
argument_list|,
name|logName
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|getWALActionListeners
argument_list|()
argument_list|,
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Called by {@link #instantiateHLog(Path, Path)} setting up WAL instance.    * Add any {@link WALActionsListener}s you want inserted before WAL startup.    * @return List of WALActionsListener that will be passed in to    * {@link FSHLog} on construction.    */
end_comment

begin_function
specifier|protected
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|getWALActionListeners
parameter_list|()
block|{
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|WALActionsListener
argument_list|>
argument_list|()
decl_stmt|;
comment|// Log roller.
name|this
operator|.
name|hlogRoller
operator|=
operator|new
name|LogRoller
argument_list|(
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|listeners
operator|.
name|add
argument_list|(
name|this
operator|.
name|hlogRoller
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|replicationSourceHandler
operator|!=
literal|null
operator|&&
name|this
operator|.
name|replicationSourceHandler
operator|.
name|getWALActionsListener
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Replication handler is an implementation of WALActionsListener.
name|listeners
operator|.
name|add
argument_list|(
name|this
operator|.
name|replicationSourceHandler
operator|.
name|getWALActionsListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|listeners
return|;
block|}
end_function

begin_function
specifier|protected
name|LogRoller
name|getLogRoller
parameter_list|()
block|{
return|return
name|hlogRoller
return|;
block|}
end_function

begin_function
specifier|public
name|MetricsRegionServer
name|getMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metricsRegionServer
return|;
block|}
end_function

begin_comment
comment|/**    * @return Master address tracker instance.    */
end_comment

begin_function
specifier|public
name|MasterAddressTracker
name|getMasterAddressManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterAddressManager
return|;
block|}
end_function

begin_comment
comment|/*    * Start maintanence Threads, Server, Worker and lease checker threads.    * Install an UncaughtExceptionHandler that calls abort of RegionServer if we    * get an unhandled exception. We cannot set the handler on all threads.    * Server's internal Listener thread is off limits. For Server, if an OOME, it    * waits a while then retries. Meantime, a flush or a compaction that tries to    * run should trigger same critical condition and the shutdown will run. On    * its way out, this server will shut down Server. Leases are sort of    * inbetween. It has an internal thread that while it inherits from Chore, it    * keeps its own internal stop mechanism so needs to be stopped by this    * hosting server. Worker logs the exception and exits.    */
end_comment

begin_function
specifier|private
name|void
name|startServiceThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Uncaught exception in service thread "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// Start executor services
name|this
operator|.
name|service
operator|=
operator|new
name|ExecutorService
argument_list|(
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_OPEN_REGION
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.openregion.threads"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_OPEN_ROOT
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.openroot.threads"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_OPEN_META
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.openmeta.threads"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_CLOSE_REGION
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.closeregion.threads"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_CLOSE_ROOT
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.closeroot.threads"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_CLOSE_META
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.executor.closemeta.threads"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|hlogRoller
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".logRoller"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|cacheFlusher
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".cacheFlusher"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|compactionChecker
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".compactionChecker"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Leases is not a Thread. Internally it runs a daemon thread. If it gets
comment|// an unhandled exception, it will just exit.
name|this
operator|.
name|leases
operator|.
name|setName
argument_list|(
name|n
operator|+
literal|".leaseChecker"
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Put up the webui.  Webui may come up on port other than configured if
comment|// that port is occupied. Adjust serverInfo if this is the case.
name|this
operator|.
name|webuiport
operator|=
name|putUpWebUI
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|replicationSourceHandler
operator|==
name|this
operator|.
name|replicationSinkHandler
operator|&&
name|this
operator|.
name|replicationSourceHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSourceHandler
operator|.
name|startReplicationService
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|replicationSourceHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSourceHandler
operator|.
name|startReplicationService
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|replicationSinkHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSinkHandler
operator|.
name|startReplicationService
argument_list|()
expr_stmt|;
block|}
comment|// Start Server.  This service is like leases in that it internally runs
comment|// a thread.
name|this
operator|.
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create the log splitting worker and start it
name|this
operator|.
name|splitLogWorker
operator|=
operator|new
name|SplitLogWorker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|this
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|splitLogWorker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Puts up the webui.    * @return Returns final port -- maybe different from what we started with.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|int
name|putUpWebUI
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|port
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT
argument_list|,
literal|60030
argument_list|)
decl_stmt|;
comment|// -1 is for disabling info server
if|if
condition|(
name|port
operator|<
literal|0
condition|)
return|return
name|port
return|;
name|String
name|addr
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
comment|// check if auto port bind enabled
name|boolean
name|auto
init|=
name|this
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT_AUTO
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|this
operator|.
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
literal|"regionserver"
argument_list|,
name|addr
argument_list|,
name|port
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|addServlet
argument_list|(
literal|"status"
argument_list|,
literal|"/rs-status"
argument_list|,
name|RSStatusServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|addServlet
argument_list|(
literal|"dump"
argument_list|,
literal|"/dump"
argument_list|,
name|RSDumpServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|REGIONSERVER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|REGIONSERVER_CONF
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|auto
condition|)
block|{
comment|// auto bind disabled throw BindException
throw|throw
name|e
throw|;
block|}
comment|// auto bind enabled, try to use another port
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed binding http info server to port: "
operator|+
name|port
argument_list|)
expr_stmt|;
name|port
operator|++
expr_stmt|;
block|}
block|}
return|return
name|port
return|;
block|}
end_function

begin_comment
comment|/*    * Verify that server is healthy    */
end_comment

begin_function
specifier|private
name|boolean
name|isHealthy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fsOk
condition|)
block|{
comment|// File system problem
return|return
literal|false
return|;
block|}
comment|// Verify that all threads are alive
if|if
condition|(
operator|!
operator|(
name|leases
operator|.
name|isAlive
argument_list|()
operator|&&
name|cacheFlusher
operator|.
name|isAlive
argument_list|()
operator|&&
name|hlogRoller
operator|.
name|isAlive
argument_list|()
operator|&&
name|this
operator|.
name|compactionChecker
operator|.
name|isAlive
argument_list|()
operator|)
condition|)
block|{
name|stop
argument_list|(
literal|"One or more threads are no longer alive -- stop"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|HLog
name|getWAL
parameter_list|()
block|{
return|return
name|this
operator|.
name|hlog
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|catalogTracker
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPED: "
operator|+
name|msg
argument_list|)
expr_stmt|;
comment|// Wakes run() if it is sleeping
name|sleeper
operator|.
name|skipSleepCycle
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|waitForServerOnline
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isOnline
argument_list|()
operator|&&
operator|!
name|isStopped
argument_list|()
condition|)
block|{
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|postOpenDeployTasks
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|CatalogTracker
name|ct
parameter_list|,
specifier|final
name|boolean
name|daughter
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Post open deploy tasks for region="
operator|+
name|r
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", daughter="
operator|+
name|daughter
argument_list|)
expr_stmt|;
comment|// Do checks to see if we need to compact (references or too many files)
for|for
control|(
name|Store
name|s
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|hasReferences
argument_list|()
operator|||
name|s
operator|.
name|needsCompaction
argument_list|()
condition|)
block|{
name|getCompactionRequester
argument_list|()
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
literal|"Opening Region"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update ZK, ROOT or META
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|RootRegionTracker
operator|.
name|setRootLocation
argument_list|(
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|MetaEditor
operator|.
name|updateMetaLocation
argument_list|(
name|ct
argument_list|,
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|daughter
condition|)
block|{
comment|// If daughter of a split, update whole row, not just location.
name|MetaEditor
operator|.
name|addDaughter
argument_list|(
name|ct
argument_list|,
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetaEditor
operator|.
name|updateRegionLocation
argument_list|(
name|ct
argument_list|,
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Done with post open deploy task for region="
operator|+
name|r
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", daughter="
operator|+
name|daughter
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Return a reference to the metrics instance used for counting RPC calls.    * @return Metrics instance.    */
end_comment

begin_function
specifier|public
name|HBaseRpcMetrics
name|getRpcMetrics
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRpcMetrics
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|RpcServer
name|getRpcServer
parameter_list|()
block|{
return|return
name|rpcServer
return|;
block|}
end_function

begin_comment
comment|/**    * Cause the server to exit without closing the regions it is serving, the log    * it is using and without notifying the master. Used unit testing and on    * catastrophic events such as HDFS is yanked out from under hbase or we OOME.    *    * @param reason    *          the reason we are aborting    * @param cause    *          the exception that caused the abort, or null    */
end_comment

begin_function
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"ABORTING region server "
operator|+
name|this
operator|+
literal|": "
operator|+
name|reason
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|abortRequested
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|reservedSpace
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// HBASE-4014: show list of coprocessors that were loaded to help debug
comment|// regionserver crashes.Note that we're implicitly using
comment|// java.util.HashSet's toString() method to print the coprocessor names.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"RegionServer abort: loaded coprocessors are: "
operator|+
name|CoprocessorHost
operator|.
name|getLoadedCoprocessors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do our best to report our abort to the master, but this may not work
try|try
block|{
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|msg
operator|+=
literal|"\nCause:\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hbaseMaster
operator|!=
literal|null
condition|)
block|{
name|ReportRSFatalErrorRequest
operator|.
name|Builder
name|builder
init|=
name|ReportRSFatalErrorRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|this
operator|.
name|serverNameFromMasterPOV
operator|.
name|getVersionedBytes
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setErrorMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|hbaseMaster
operator|.
name|reportRSFatalError
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to report fatal error to master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|stop
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * @see HRegionServer#abort(String, Throwable)    */
end_comment

begin_function
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|abort
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|abortRequested
return|;
block|}
end_function

begin_comment
comment|/*    * Simulate a kill -9 of this server. Exits w/o closing regions or cleaninup    * logs but it does close socket in case want to bring up server on old    * hostname+port immediately.    */
end_comment

begin_function
specifier|protected
name|void
name|kill
parameter_list|()
block|{
name|this
operator|.
name|killed
operator|=
literal|true
expr_stmt|;
name|abort
argument_list|(
literal|"Simulated kill"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Wait on all threads to finish. Presumption is that all closes and stops    * have already been called.    */
end_comment

begin_function
specifier|protected
name|void
name|join
parameter_list|()
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|compactionChecker
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|cacheFlusher
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hlogRoller
operator|!=
literal|null
condition|)
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|hlogRoller
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|compactSplitThread
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|compactSplitThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|service
operator|!=
literal|null
condition|)
name|this
operator|.
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|replicationSourceHandler
operator|!=
literal|null
operator|&&
name|this
operator|.
name|replicationSourceHandler
operator|==
name|this
operator|.
name|replicationSinkHandler
condition|)
block|{
name|this
operator|.
name|replicationSourceHandler
operator|.
name|stopReplicationService
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|replicationSourceHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSourceHandler
operator|.
name|stopReplicationService
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|replicationSinkHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSinkHandler
operator|.
name|stopReplicationService
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * @return Return the object that implements the replication    * source service.    */
end_comment

begin_function
name|ReplicationSourceService
name|getReplicationSourceService
parameter_list|()
block|{
return|return
name|replicationSourceHandler
return|;
block|}
end_function

begin_comment
comment|/**    * @return Return the object that implements the replication    * sink service.    */
end_comment

begin_function
name|ReplicationSinkService
name|getReplicationSinkService
parameter_list|()
block|{
return|return
name|replicationSinkHandler
return|;
block|}
end_function

begin_comment
comment|/**    * Get the current master from ZooKeeper and open the RPC connection to it.    *    * Method will block until a master is available. You can break from this    * block by requesting the server stop.    *    * @return master + port, or null if server has been stopped    */
end_comment

begin_function
specifier|private
name|ServerName
name|getMaster
parameter_list|()
block|{
name|ServerName
name|masterServerName
init|=
literal|null
decl_stmt|;
name|long
name|previousLogTime
init|=
literal|0
decl_stmt|;
name|RegionServerStatusProtocol
name|master
init|=
literal|null
decl_stmt|;
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
comment|// for the first time, use cached data
while|while
condition|(
name|keepLooping
argument_list|()
operator|&&
name|master
operator|==
literal|null
condition|)
block|{
name|masterServerName
operator|=
name|this
operator|.
name|masterAddressManager
operator|.
name|getMasterAddress
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
if|if
condition|(
name|masterServerName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|keepLooping
argument_list|()
condition|)
block|{
comment|// give up with no connection.
name|LOG
operator|.
name|debug
argument_list|(
literal|"No master found and cluster is stopped; bailing out"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"No master found; retry"
argument_list|)
expr_stmt|;
name|previousLogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|refresh
operator|=
literal|true
expr_stmt|;
comment|// let's try pull it from ZK directly
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|InetSocketAddress
name|isa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|masterServerName
operator|.
name|getHostname
argument_list|()
argument_list|,
name|masterServerName
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting connect to Master server at "
operator|+
name|this
operator|.
name|masterAddressManager
operator|.
name|getMasterAddress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Do initial RPC setup. The final argument indicates that the RPC
comment|// should retry indefinitely.
name|master
operator|=
operator|(
name|RegionServerStatusProtocol
operator|)
name|HBaseRPC
operator|.
name|waitForProxy
argument_list|(
name|RegionServerStatusProtocol
operator|.
name|class
argument_list|,
name|RegionServerStatusProtocol
operator|.
name|VERSION
argument_list|,
name|isa
argument_list|,
name|this
operator|.
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
name|this
operator|.
name|rpcTimeout
argument_list|,
name|this
operator|.
name|rpcTimeout
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to master at "
operator|+
name|isa
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ServerNotRunningYetException
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
operator|(
name|previousLogTime
operator|+
literal|1000
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Master isn't available yet, retrying"
argument_list|)
expr_stmt|;
name|previousLogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
operator|(
name|previousLogTime
operator|+
literal|1000
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to connect to master. Retrying. Error was:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|previousLogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
block|}
name|this
operator|.
name|hbaseMaster
operator|=
name|master
expr_stmt|;
return|return
name|masterServerName
return|;
block|}
end_function

begin_comment
comment|/**    * @return True if we should break loop because cluster is going down or    * this server has been stopped or hdfs has gone bad.    */
end_comment

begin_function
specifier|private
name|boolean
name|keepLooping
parameter_list|()
block|{
return|return
operator|!
name|this
operator|.
name|stopped
operator|&&
name|isClusterUp
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/*    * Let the master know we're here Run initialization using parameters passed    * us by the master.    * @return A Map of key/value configurations we got from the Master else    * null if we failed to register.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|RegionServerStartupResponse
name|reportForDuty
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionServerStartupResponse
name|result
init|=
literal|null
decl_stmt|;
name|ServerName
name|masterServerName
init|=
name|getMaster
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterServerName
operator|==
literal|null
condition|)
return|return
name|result
return|;
try|try
block|{
name|this
operator|.
name|requestCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Telling master at "
operator|+
name|masterServerName
operator|+
literal|" that we are up "
operator|+
literal|"with port="
operator|+
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
operator|+
literal|", startcode="
operator|+
name|this
operator|.
name|startcode
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|RegionServerStartupRequest
operator|.
name|Builder
name|request
init|=
name|RegionServerStartupRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|request
operator|.
name|setServerStartCode
argument_list|(
name|this
operator|.
name|startcode
argument_list|)
expr_stmt|;
name|request
operator|.
name|setServerCurrentTime
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|result
operator|=
name|this
operator|.
name|hbaseMaster
operator|.
name|regionServerStartup
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|IOException
name|ioe
init|=
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|ClockOutOfSyncException
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Master rejected startup because clock is out of sync"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// Re-throw IOE will cause RS to abort
throw|throw
name|ioe
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error telling master we are up"
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getLastSequenceId
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
name|Long
name|lastFlushedSequenceId
init|=
operator|-
literal|1l
decl_stmt|;
try|try
block|{
name|GetLastFlushedSequenceIdRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetLastFlushedSequenceIdRequest
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|lastFlushedSequenceId
operator|=
name|hbaseMaster
operator|.
name|getLastFlushedSequenceId
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getLastFlushedSequenceId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|lastFlushedSequenceId
operator|=
operator|-
literal|1l
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to connect to the master to check "
operator|+
literal|"the last flushed sequence id"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|lastFlushedSequenceId
return|;
block|}
end_function

begin_comment
comment|/**    * Closes all regions.  Called on our way out.    * Assumes that its not possible for new regions to be added to onlineRegions    * while this method runs.    */
end_comment

begin_function
specifier|protected
name|void
name|closeAllRegions
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
name|closeUserRegions
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|closeMetaTableRegions
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Close root and meta regions if we carry them    * @param abort Whether we're running an abort.    */
end_comment

begin_function
name|void
name|closeMetaTableRegions
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
name|HRegion
name|meta
init|=
literal|null
decl_stmt|;
name|HRegion
name|root
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|e
range|:
name|onlineRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|hri
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|root
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|meta
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|meta
operator|!=
literal|null
operator|&&
name|root
operator|!=
literal|null
condition|)
break|break;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
name|closeRegion
argument_list|(
name|meta
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|abort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
name|closeRegion
argument_list|(
name|root
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|abort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Schedule closes on all user regions.    * Should be safe calling multiple times because it wont' close regions    * that are already closed or that are closing.    * @param abort Whether we're running an abort.    */
end_comment

begin_function
name|void
name|closeUserRegions
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|e
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegion
name|r
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
operator|&&
name|r
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
comment|// Don't update zk with this close transition; pass false.
name|closeRegion
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|abort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** @return the info server */
end_comment

begin_function
specifier|public
name|InfoServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|infoServer
return|;
block|}
end_function

begin_comment
comment|/**    * @return true if a stop has been requested.    */
end_comment

begin_function
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopping
return|;
block|}
end_function

begin_comment
comment|/**    *    * @return the configuration    */
end_comment

begin_function
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
end_function

begin_comment
comment|/** @return the write lock for the server */
end_comment

begin_function
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|getWriteLock
parameter_list|()
block|{
return|return
name|lock
operator|.
name|writeLock
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|getNumberOfOnlineRegions
parameter_list|()
block|{
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
name|boolean
name|isOnlineRegionsEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * For tests, web ui and metrics.    * This method will only work if HRegionServer is in the same JVM as client;    * HRegion cannot be serialized to cross an rpc.    * @see #getOnlineRegions()    */
end_comment

begin_function
specifier|public
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|getOnlineRegionsLocalContext
parameter_list|()
block|{
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|this
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|regions
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addToOnlineRegions
parameter_list|(
name|HRegion
name|region
parameter_list|)
block|{
name|this
operator|.
name|onlineRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * @return A new Map of online regions sorted by region size with the first    *         entry being the biggest.    */
end_comment

begin_function
specifier|public
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|getCopyOfOnlineRegionsSortedBySize
parameter_list|()
block|{
comment|// we'll sort the regions in reverse
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|sortedRegions
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|a
parameter_list|,
name|Long
name|b
parameter_list|)
block|{
return|return
operator|-
literal|1
operator|*
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Copy over all regions. Regions are sorted by size with biggest first.
for|for
control|(
name|HRegion
name|region
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|sortedRegions
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|region
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedRegions
return|;
block|}
end_function

begin_comment
comment|/**    * @return time stamp in millis of when this region server was started    */
end_comment

begin_function
specifier|public
name|long
name|getStartcode
parameter_list|()
block|{
return|return
name|this
operator|.
name|startcode
return|;
block|}
end_function

begin_comment
comment|/** @return reference to FlushRequester */
end_comment

begin_function
specifier|public
name|FlushRequester
name|getFlushRequester
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheFlusher
return|;
block|}
end_function

begin_comment
comment|/**    * Get the top N most loaded regions this server is serving so we can tell the    * master which regions it can reallocate if we're overloaded. TODO: actually    * calculate which regions are most loaded. (Right now, we're just grabbing    * the first N regions being served regardless of load.)    */
end_comment

begin_function
specifier|protected
name|HRegionInfo
index|[]
name|getMostLoadedRegions
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|<
name|numRegionsToReport
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|regions
operator|.
name|toArray
argument_list|(
operator|new
name|HRegionInfo
index|[
name|regions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|version
parameter_list|,
name|int
name|clientMethodsHashCode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|ClientProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|ClientProtocol
operator|.
name|VERSION
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|AdminProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|AdminProtocol
operator|.
name|VERSION
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
specifier|final
name|String
name|protocol
parameter_list|,
specifier|final
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|ClientProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ClientProtocol
operator|.
name|VERSION
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|AdminProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|AdminProtocol
operator|.
name|VERSION
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Leases
name|getLeases
parameter_list|()
block|{
return|return
name|leases
return|;
block|}
end_function

begin_comment
comment|/**    * @return Return the rootDir.    */
end_comment

begin_function
specifier|protected
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|rootDir
return|;
block|}
end_function

begin_comment
comment|/**    * @return Return the fs.    */
end_comment

begin_function
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Interval at which threads should run    *    * @return the interval    */
end_comment

begin_function
specifier|public
name|int
name|getThreadWakeFrequency
parameter_list|()
block|{
return|return
name|threadWakeFrequency
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zooKeeper
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
comment|// Our servername could change after we talk to the master.
return|return
name|this
operator|.
name|serverNameFromMasterPOV
operator|==
literal|null
condition|?
operator|new
name|ServerName
argument_list|(
name|this
operator|.
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|this
operator|.
name|startcode
argument_list|)
else|:
name|this
operator|.
name|serverNameFromMasterPOV
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompactionRequestor
name|getCompactionRequester
parameter_list|()
block|{
return|return
name|this
operator|.
name|compactSplitThread
return|;
block|}
end_function

begin_function
specifier|public
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|zooKeeper
return|;
block|}
end_function

begin_function
specifier|public
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Boolean
argument_list|>
name|getRegionsInTransitionInRS
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionsInTransitionInRS
return|;
block|}
end_function

begin_function
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
end_function

begin_comment
comment|//
end_comment

begin_comment
comment|// Main program and support routines
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/**    * Load the replication service objects, if any    */
end_comment

begin_function
specifier|static
specifier|private
name|void
name|createNewReplicationInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HRegionServer
name|server
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If replication is not enabled, then return immediately.
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// read in the name of the source replication class from the config file.
name|String
name|sourceClassname
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SOURCE_SERVICE_CLASSNAME
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SERVICE_CLASSNAME_DEFAULT
argument_list|)
decl_stmt|;
comment|// read in the name of the sink replication class from the config file.
name|String
name|sinkClassname
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SINK_SERVICE_CLASSNAME
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SERVICE_CLASSNAME_DEFAULT
argument_list|)
decl_stmt|;
comment|// If both the sink and the source class names are the same, then instantiate
comment|// only one object.
if|if
condition|(
name|sourceClassname
operator|.
name|equals
argument_list|(
name|sinkClassname
argument_list|)
condition|)
block|{
name|server
operator|.
name|replicationSourceHandler
operator|=
operator|(
name|ReplicationSourceService
operator|)
name|newReplicationInstance
argument_list|(
name|sourceClassname
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
name|server
operator|.
name|replicationSinkHandler
operator|=
operator|(
name|ReplicationSinkService
operator|)
name|server
operator|.
name|replicationSourceHandler
expr_stmt|;
block|}
else|else
block|{
name|server
operator|.
name|replicationSourceHandler
operator|=
operator|(
name|ReplicationSourceService
operator|)
name|newReplicationInstance
argument_list|(
name|sourceClassname
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
name|server
operator|.
name|replicationSinkHandler
operator|=
operator|(
name|ReplicationSinkService
operator|)
name|newReplicationInstance
argument_list|(
name|sinkClassname
argument_list|,
name|conf
argument_list|,
name|server
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|private
name|ReplicationService
name|newReplicationInstance
parameter_list|(
name|String
name|classname
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HRegionServer
name|server
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|classname
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cound not find class for "
operator|+
name|classname
argument_list|)
throw|;
block|}
comment|// create an instance of the replication object.
name|ReplicationService
name|service
init|=
operator|(
name|ReplicationService
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|service
operator|.
name|initialize
argument_list|(
name|server
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
end_function

begin_comment
comment|/**    * @param hrs    * @return Thread the RegionServer is running in correctly named.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|Thread
name|startRegionServer
parameter_list|(
specifier|final
name|HRegionServer
name|hrs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|startRegionServer
argument_list|(
name|hrs
argument_list|,
literal|"regionserver"
operator|+
name|hrs
operator|.
name|isa
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @param hrs    * @param name    * @return Thread the RegionServer is running in correctly named.    * @throws IOException    */
end_comment

begin_function
specifier|public
specifier|static
name|Thread
name|startRegionServer
parameter_list|(
specifier|final
name|HRegionServer
name|hrs
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|hrs
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Install shutdown hook that will catch signals and run an orderly shutdown
comment|// of the hrs.
name|ShutdownHook
operator|.
name|install
argument_list|(
name|hrs
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|hrs
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|hrs
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function

begin_comment
comment|/**    * Utility for constructing an instance of the passed HRegionServer class.    *    * @param regionServerClass    * @param conf2    * @return HRegionServer instance.    */
end_comment

begin_function
specifier|public
specifier|static
name|HRegionServer
name|constructRegionServer
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|regionServerClass
parameter_list|,
specifier|final
name|Configuration
name|conf2
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|c
init|=
name|regionServerClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
name|conf2
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed construction of "
operator|+
literal|"Regionserver: "
operator|+
name|regionServerClass
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * @see org.apache.hadoop.hbase.regionserver.HRegionServerCommandLine    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|VersionInfo
operator|.
name|logVersion
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|regionServerClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|HRegionServerCommandLine
argument_list|(
name|regionServerClass
argument_list|)
operator|.
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Gets the online regions of the specified table.    * This method looks at the in-memory onlineRegions.  It does not go to<code>.META.</code>.    * Only returns<em>online</em> regions.  If a region on this table has been    * closed during a disable, etc., it will not be included in the returned list.    * So, the returned list may not necessarily be ALL regions in this table, its    * all the ONLINE regions in the table.    * @param tableName    * @return Online regions from<code>tableName</code>    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|HRegion
argument_list|>
name|getOnlineRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|tableRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|onlineRegions
init|)
block|{
for|for
control|(
name|HRegion
name|region
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|tableRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tableRegions
return|;
block|}
end_function

begin_comment
comment|// used by org/apache/hbase/tmpl/regionserver/RSStatusTmpl.jamon (HBASE-4070).
end_comment

begin_function
specifier|public
name|String
index|[]
name|getCoprocessors
parameter_list|()
block|{
comment|// passing fake times to buildServerLoad is okay, because we only care about the coprocessor part.
name|HBaseProtos
operator|.
name|ServerLoad
name|sl
init|=
name|buildServerLoad
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|sl
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ServerLoad
argument_list|(
name|sl
argument_list|)
operator|.
name|getRegionServerCoprocessors
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Instantiated as a row lock lease. If the lease times out, the row lock is    * released    */
end_comment

begin_class
specifier|private
class|class
name|RowLockListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|lockName
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
name|RowLockListener
parameter_list|(
specifier|final
name|String
name|lockName
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|)
block|{
name|this
operator|.
name|lockName
operator|=
name|lockName
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row Lock "
operator|+
name|this
operator|.
name|lockName
operator|+
literal|" lease expired"
argument_list|)
expr_stmt|;
name|Integer
name|r
init|=
name|rowlocks
operator|.
name|remove
argument_list|(
name|this
operator|.
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|releaseRowLock
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Instantiated as a scanner lease. If the lease times out, the scanner is    * closed    */
end_comment

begin_class
specifier|private
class|class
name|ScannerListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|scannerName
decl_stmt|;
name|ScannerListener
parameter_list|(
specifier|final
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|scannerName
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|RegionScannerHolder
name|rsh
init|=
name|scanners
operator|.
name|remove
argument_list|(
name|this
operator|.
name|scannerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
name|RegionScanner
name|s
init|=
name|rsh
operator|.
name|s
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired on region "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing scanner for "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Method to get the Integer lock identifier used internally from the long    * lock identifier used by the client.    *    * @param lockId    *          long row lock identifier from client    * @return intId Integer row lock used internally in HRegion    * @throws IOException    *           Thrown if this is not a valid client lock id.    */
end_comment

begin_function
name|Integer
name|getLockFromId
parameter_list|(
name|long
name|lockId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|lockId
operator|==
operator|-
literal|1L
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|lockName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
name|Integer
name|rl
init|=
name|rowlocks
operator|.
name|get
argument_list|(
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRowLockException
argument_list|(
literal|"Invalid row lock"
argument_list|)
throw|;
block|}
name|this
operator|.
name|leases
operator|.
name|renewLease
argument_list|(
name|lockName
argument_list|)
expr_stmt|;
return|return
name|rl
return|;
block|}
end_function

begin_comment
comment|/**    * Called to verify that this server is up and running.    *    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|stopped
operator|||
name|this
operator|.
name|abortRequested
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|getServerName
argument_list|()
operator|+
literal|" not running"
operator|+
operator|(
name|this
operator|.
name|abortRequested
condition|?
literal|", aborting"
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fsOk
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"File system not available"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|protected
name|void
name|checkIfRegionInTransition
parameter_list|(
name|byte
index|[]
name|regionEncodedName
parameter_list|,
name|String
name|currentAction
parameter_list|)
throws|throws
name|RegionAlreadyInTransitionException
block|{
if|if
condition|(
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|containsKey
argument_list|(
name|regionEncodedName
argument_list|)
condition|)
block|{
name|boolean
name|openAction
init|=
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|get
argument_list|(
name|regionEncodedName
argument_list|)
decl_stmt|;
comment|// The below exception message will be used in master.
throw|throw
operator|new
name|RegionAlreadyInTransitionException
argument_list|(
literal|"Received:"
operator|+
name|currentAction
operator|+
literal|" for the region:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionEncodedName
argument_list|)
operator|+
literal|" ,which we are already trying to "
operator|+
operator|(
name|openAction
condition|?
name|OPEN
else|:
name|CLOSE
operator|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * @param region Region to close    * @param abort True if we are aborting    * @param zk True if we are to update zk about the region close; if the close    * was orchestrated by master, then update zk.  If the close is being run by    * the regionserver because its going down, don't update zk.    * @return True if closed a region.    */
end_comment

begin_function
specifier|protected
name|boolean
name|closeRegion
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|)
block|{
return|return
name|closeRegion
argument_list|(
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @param region Region to close    * @param abort True if we are aborting    * @param zk True if we are to update zk about the region close; if the close    * was orchestrated by master, then update zk.  If the close is being run by    * the regionserver because its going down, don't update zk.    * @param versionOfClosingNode    *   the version of znode to compare when RS transitions the znode from    *   CLOSING state.    * @return True if closed a region.    */
end_comment

begin_function
specifier|protected
name|boolean
name|closeRegion
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|boolean
name|abort
parameter_list|,
specifier|final
name|boolean
name|zk
parameter_list|,
specifier|final
name|int
name|versionOfClosingNode
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|containsKey
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received close for region we are already opening or closing; "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|putIfAbsent
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CloseRegionHandler
name|crh
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|crh
operator|=
operator|new
name|CloseRootHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|crh
operator|=
operator|new
name|CloseMetaHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|crh
operator|=
operator|new
name|CloseRegionHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|abort
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
name|crh
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**    * @param regionName    * @return HRegion for the passed binary<code>regionName</code> or null if    *         named region is not member of the online regions.    */
end_comment

begin_function
specifier|public
name|HRegion
name|getOnlineRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|String
name|encodedRegionName
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|HRegion
name|getFromOnlineRegions
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
return|return
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|removeFromOnlineRegions
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|,
name|ServerName
name|destination
parameter_list|)
block|{
name|HRegion
name|toReturn
init|=
name|this
operator|.
name|onlineRegions
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|addToMovedRegions
argument_list|(
name|encodedRegionName
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
operator|!=
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Protected utility method for safely obtaining an HRegion handle.    *    * @param regionName    *          Name of online {@link HRegion} to return    * @return {@link HRegion} for<code>regionName</code>    * @throws NotServingRegionException    */
end_comment

begin_function
specifier|protected
name|HRegion
name|getRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|NotServingRegionException
block|{
name|String
name|encodedRegionName
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
return|return
name|getRegionByEncodedName
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|HRegion
name|getRegionByEncodedName
parameter_list|(
name|String
name|encodedRegionName
parameter_list|)
throws|throws
name|NotServingRegionException
block|{
name|HRegion
name|region
init|=
name|this
operator|.
name|onlineRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|ServerName
name|sn
init|=
name|getMovedRegion
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RegionMovedException
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Region is not online: "
operator|+
name|encodedRegionName
argument_list|)
throw|;
block|}
block|}
return|return
name|region
return|;
block|}
end_function

begin_comment
comment|/*    * Cleanup after Throwable caught invoking method. Converts<code>t</code> to    * IOE if it isn't already.    *    * @param t Throwable    *    * @return Throwable converted to an IOE; methods can only let out IOEs.    */
end_comment

begin_function
specifier|protected
name|Throwable
name|cleanup
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|cleanup
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * Cleanup after Throwable caught invoking method. Converts<code>t</code> to    * IOE if it isn't already.    *    * @param t Throwable    *    * @param msg Message to log in error. Can be null.    *    * @return Throwable converted to an IOE; methods can only let out IOEs.    */
end_comment

begin_function
specifier|protected
name|Throwable
name|cleanup
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
comment|// Don't log as error if NSRE; NSRE is 'normal' operation.
if|if
condition|(
name|t
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NotServingRegionException; "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkThrowable
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkThrowable
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkOOME
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
end_function

begin_comment
comment|/*    * @param t    *    * @return Make<code>t</code> an IOE if it isn't already.    */
end_comment

begin_function
specifier|protected
name|IOException
name|convertThrowableToIOE
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|convertThrowableToIOE
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * @param t    *    * @param msg Message to put in new IOE if passed<code>t</code> is not an IOE    *    * @return Make<code>t</code> an IOE if it isn't already.    */
end_comment

begin_function
specifier|protected
name|IOException
name|convertThrowableToIOE
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
return|return
operator|(
name|t
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
name|msg
operator|==
literal|null
operator|||
name|msg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
else|:
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*    * Check if an OOME and, if so, abort immediately to avoid creating more objects.    *    * @param e    *    * @return True if we OOME'd and are aborting.    */
end_comment

begin_function
specifier|public
name|boolean
name|checkOOME
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
operator|||
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|OutOfMemoryError
operator|)
operator|||
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.lang.OutOfMemoryError"
argument_list|)
operator|)
condition|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Run out of memory; HRegionServer will abort itself immediately"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stop
return|;
block|}
end_function

begin_comment
comment|/**    * Checks to see if the file system is still accessible. If not, sets    * abortRequested and stopRequested    *    * @return false if file system is not available    */
end_comment

begin_function
specifier|public
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|fsOk
operator|&&
name|this
operator|.
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FSUtils
operator|.
name|checkFileSystemAvailable
argument_list|(
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"File System not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|fsOk
return|;
block|}
end_function

begin_function
specifier|protected
name|long
name|addRowLock
parameter_list|(
name|Integer
name|r
parameter_list|,
name|HRegion
name|region
parameter_list|)
throws|throws
name|LeaseStillHeldException
block|{
name|String
name|lockName
init|=
literal|null
decl_stmt|;
name|long
name|lockId
decl_stmt|;
do|do
block|{
name|lockId
operator|=
name|nextLong
argument_list|()
expr_stmt|;
name|lockName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|rowlocks
operator|.
name|putIfAbsent
argument_list|(
name|lockName
argument_list|,
name|r
argument_list|)
operator|!=
literal|null
condition|)
do|;
name|this
operator|.
name|leases
operator|.
name|createLease
argument_list|(
name|lockName
argument_list|,
name|this
operator|.
name|rowLockLeaseTimeoutPeriod
argument_list|,
operator|new
name|RowLockListener
argument_list|(
name|lockName
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lockId
return|;
block|}
end_function

begin_function
specifier|protected
name|long
name|addScanner
parameter_list|(
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|LeaseStillHeldException
block|{
name|long
name|scannerId
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scannerId
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|scannerId
operator|==
operator|-
literal|1
condition|)
continue|continue;
name|String
name|scannerName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
name|RegionScannerHolder
name|existing
init|=
name|scanners
operator|.
name|putIfAbsent
argument_list|(
name|scannerName
argument_list|,
operator|new
name|RegionScannerHolder
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|leases
operator|.
name|createLease
argument_list|(
name|scannerName
argument_list|,
name|this
operator|.
name|scannerLeaseTimeoutPeriod
argument_list|,
operator|new
name|ScannerListener
argument_list|(
name|scannerName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|scannerId
return|;
block|}
end_function

begin_comment
comment|/**    * Generate a random positive long number    *    * @return a random positive long number    */
end_comment

begin_function
specifier|protected
name|long
name|nextLong
parameter_list|()
block|{
name|long
name|n
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|nextLong
argument_list|()
return|;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|n
operator|=
operator|-
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
end_function

begin_comment
comment|// Start Client methods
end_comment

begin_comment
comment|/**    * Get data from a table.    *    * @param controller the RPC controller    * @param request the get request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|GetResponse
operator|.
name|Builder
name|builder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Get
name|get
init|=
name|request
operator|.
name|getGet
argument_list|()
decl_stmt|;
name|Boolean
name|existence
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getClosestRowBefore
argument_list|()
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|getColumnCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"get ClosestRowBefore supports one and only one family now, not "
operator|+
name|get
operator|.
name|getColumnCount
argument_list|()
operator|+
literal|" families"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|row
init|=
name|get
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|get
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|getClosestRowBefore
argument_list|(
name|row
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Get
name|clientGet
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getExistenceOnly
argument_list|()
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existence
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preExists
argument_list|(
name|clientGet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existence
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|clientGet
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|clientGet
argument_list|,
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|boolean
name|exists
init|=
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exists
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postExists
argument_list|(
name|clientGet
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
name|existence
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|existence
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExists
argument_list|(
name|existence
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metricsRegionServer
operator|.
name|updateGet
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Mutate data in a table.    *    * @param controller the RPC controller    * @param request the mutate request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|MutateResponse
name|mutate
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MutateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
operator|.
name|Builder
name|builder
init|=
name|MutateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Mutate
name|mutate
init|=
name|request
operator|.
name|getMutate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|Integer
name|lock
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|Boolean
name|processed
init|=
literal|null
decl_stmt|;
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|Put
name|put
init|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|lock
operator|=
name|getLockFromId
argument_list|(
name|put
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayComparable
name|comparator
init|=
name|ProtobufUtil
operator|.
name|toComparator
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|lock
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
name|Delete
name|delete
init|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|lock
operator|=
name|getLockFromId
argument_list|(
name|delete
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayComparable
name|comparator
init|=
name|ProtobufUtil
operator|.
name|toComparator
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|lock
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
name|lock
argument_list|,
name|delete
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProcessed
argument_list|(
name|processed
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|//
end_comment

begin_comment
comment|// remote scanner interface
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/**    * Scan data in a table.    *    * @param controller the RPC controller    * @param request the scan request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|ScanResponse
name|scan
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Leases
operator|.
name|Lease
name|lease
init|=
literal|null
decl_stmt|;
name|String
name|scannerName
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasScannerId
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasScan
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required input: scannerId or scan"
argument_list|)
throw|;
block|}
name|long
name|scannerId
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|scannerId
operator|=
name|request
operator|.
name|getScannerId
argument_list|()
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If checkOpen failed, server not running or filesystem gone,
comment|// cancel this lease; filesystem is gone or we're closing or something.
if|if
condition|(
name|scannerName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|le
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server shutting down and client tried to access missing scanner "
operator|+
name|scannerName
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|ttl
init|=
literal|0
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
name|RegionScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|RegionScannerHolder
name|rsh
init|=
literal|null
decl_stmt|;
name|boolean
name|moreResults
init|=
literal|true
decl_stmt|;
name|boolean
name|closeScanner
init|=
literal|false
decl_stmt|;
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCloseScanner
argument_list|()
condition|)
block|{
name|closeScanner
operator|=
name|request
operator|.
name|getCloseScanner
argument_list|()
expr_stmt|;
block|}
name|int
name|rows
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasNumberOfRows
argument_list|()
condition|)
block|{
name|rows
operator|=
name|request
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|rsh
operator|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsh
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownScannerException
argument_list|(
literal|"Name: "
operator|+
name|scannerName
operator|+
literal|", already closed?"
argument_list|)
throw|;
block|}
name|scanner
operator|=
name|rsh
operator|.
name|s
expr_stmt|;
name|region
operator|=
name|getRegion
argument_list|(
name|scanner
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|region
operator|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|ClientProtos
operator|.
name|Scan
name|protoScan
init|=
name|request
operator|.
name|getScan
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|protoScan
argument_list|)
decl_stmt|;
name|region
operator|.
name|prepareScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerOpen
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerOpen
argument_list|(
name|scan
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
block|}
name|scannerId
operator|=
name|addScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|this
operator|.
name|scannerLeaseTimeoutPeriod
expr_stmt|;
block|}
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
block|{
comment|// if nextCallSeq does not match throw Exception straight away. This needs to be
comment|// performed even before checking of Lease.
comment|// See HBASE-5974
if|if
condition|(
name|request
operator|.
name|hasNextCallSeq
argument_list|()
condition|)
block|{
if|if
condition|(
name|rsh
operator|==
literal|null
condition|)
block|{
name|rsh
operator|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getNextCallSeq
argument_list|()
operator|!=
name|rsh
operator|.
name|nextCallSeq
condition|)
block|{
throw|throw
operator|new
name|OutOfOrderScannerNextException
argument_list|(
literal|"Expected nextCallSeq: "
operator|+
name|rsh
operator|.
name|nextCallSeq
operator|+
literal|" But the nextCallSeq got from client: "
operator|+
name|request
operator|.
name|getNextCallSeq
argument_list|()
argument_list|)
throw|;
block|}
comment|// Increment the nextCallSeq value which is the next expected from client.
name|rsh
operator|.
name|nextCallSeq
operator|++
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Remove lease while its being processed in server; protects against case
comment|// where processing of request takes> lease expiration time.
name|lease
operator|=
name|leases
operator|.
name|removeLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|rows
argument_list|)
decl_stmt|;
name|long
name|currentScanResultSize
init|=
literal|0
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// Call coprocessor. Get region info from scanner.
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|bypass
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bypass
operator|!=
literal|null
operator|&&
name|bypass
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|long
name|maxResultSize
init|=
name|scanner
operator|.
name|getMaxResultSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxResultSize
operator|<=
literal|0
condition|)
block|{
name|maxResultSize
operator|=
name|maxScannerResultSize
expr_stmt|;
block|}
name|List
argument_list|<
name|KeyValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|&&
name|currentScanResultSize
operator|<
name|maxResultSize
condition|;
name|i
operator|++
control|)
block|{
comment|// Collect values to be returned here
name|boolean
name|moreRows
init|=
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|values
control|)
block|{
name|currentScanResultSize
operator|+=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|Result
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|moreRows
condition|)
block|{
break|break;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// coprocessor postNext hook
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the scanner's filter - if any - is done with the scan
comment|// and wants to tell the client to stop the scan. This is done by passing
comment|// a null result, and setting moreResults to false.
if|if
condition|(
name|scanner
operator|.
name|isFilterDone
argument_list|()
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moreResults
operator|=
literal|false
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// We're done. On way out re-add the above removed lease.
comment|// Adding resets expiration time on lease.
if|if
condition|(
name|scanners
operator|.
name|containsKey
argument_list|(
name|scannerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
name|leases
operator|.
name|addLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|this
operator|.
name|scannerLeaseTimeoutPeriod
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|moreResults
operator|||
name|closeScanner
condition|)
block|{
name|ttl
operator|=
literal|0
expr_stmt|;
name|moreResults
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|scanner
argument_list|)
condition|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
comment|// bypass
block|}
block|}
name|rsh
operator|=
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|rsh
operator|.
name|s
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ttl
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setTtl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setScannerId
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMoreResults
argument_list|(
name|moreResults
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|scannerName
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Lock a row in a table.    *    * @param controller the RPC controller    * @param request the lock row request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|LockRowResponse
name|lockRow
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|LockRowRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getRowCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"lockRow supports only one row now, not "
operator|+
name|request
operator|.
name|getRowCount
argument_list|()
operator|+
literal|" rows"
argument_list|)
throw|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|request
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Integer
name|r
init|=
name|region
operator|.
name|obtainRowLock
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|long
name|lockId
init|=
name|addRowLock
argument_list|(
name|r
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row lock "
operator|+
name|lockId
operator|+
literal|" explicitly acquired by client"
argument_list|)
expr_stmt|;
name|LockRowResponse
operator|.
name|Builder
name|builder
init|=
name|LockRowResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLockId
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|,
literal|"Error obtaining row lock (fsOk: "
operator|+
name|this
operator|.
name|fsOk
operator|+
literal|")"
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Unlock a locked row in a table.    *    * @param controller the RPC controller    * @param request the unlock row request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|UnlockRowResponse
name|unlockRow
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|UnlockRowRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasLockId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid unlock rowrequest, missing lock id"
argument_list|)
throw|;
block|}
name|long
name|lockId
init|=
name|request
operator|.
name|getLockId
argument_list|()
decl_stmt|;
name|String
name|lockName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lockId
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
name|r
init|=
name|rowlocks
operator|.
name|remove
argument_list|(
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRowLockException
argument_list|(
name|lockName
argument_list|)
throw|;
block|}
name|region
operator|.
name|releaseRowLock
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|leases
operator|.
name|cancelLease
argument_list|(
name|lockName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row lock "
operator|+
name|lockId
operator|+
literal|" has been explicitly released by client"
argument_list|)
expr_stmt|;
return|return
name|UnlockRowResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|convertThrowableToIOE
argument_list|(
name|cleanup
argument_list|(
name|t
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Atomically bulk load several HFiles into an open region    * @return true if successful, false is failed but recoverably (no action)    * @throws IOException if failed unrecoverably    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|BulkLoadHFileResponse
name|bulkLoadHFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|BulkLoadHFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyPath
name|familyPath
range|:
name|request
operator|.
name|getFamilyPathList
argument_list|()
control|)
block|{
name|familyPaths
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|familyPath
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|familyPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bypass
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preBulkLoadHFile
argument_list|(
name|familyPaths
argument_list|)
expr_stmt|;
block|}
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|bypass
condition|)
block|{
name|loaded
operator|=
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|familyPaths
argument_list|,
name|request
operator|.
name|getAssignSeqNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postBulkLoadHFile
argument_list|(
name|familyPaths
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
block|}
name|BulkLoadHFileResponse
operator|.
name|Builder
name|builder
init|=
name|BulkLoadHFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLoaded
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Executes a single {@link org.apache.hadoop.hbase.ipc.CoprocessorProtocol}    * method using the registered protocol handlers.    * {@link CoprocessorProtocol} implementations must be registered per-region    * via the    * {@link org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)}    * method before they are available.    *    * @param regionName name of the region against which the invocation is executed    * @param call an {@code Exec} instance identifying the protocol, method name,    *     and parameters for the method invocation    * @return an {@code ExecResult} instance containing the region name of the    *     invocation and the return value    * @throws IOException if no registered protocol handler is found or an error    *     occurs during the invocation    * @see org.apache.hadoop.hbase.regionserver.HRegion#registerProtocol(Class, org.apache.hadoop.hbase.ipc.CoprocessorProtocol)    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|ExecCoprocessorResponse
name|execCoprocessor
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ExecCoprocessorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|ExecCoprocessorResponse
operator|.
name|Builder
name|builder
init|=
name|ExecCoprocessorResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Exec
name|call
init|=
name|request
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|Exec
name|clientCall
init|=
name|ProtobufUtil
operator|.
name|toExec
argument_list|(
name|call
argument_list|)
decl_stmt|;
name|ExecResult
name|result
init|=
name|region
operator|.
name|exec
argument_list|(
name|clientCall
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
comment|// ignore the passed in controller (from the serialized call)
name|ServerRpcController
name|execController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|Message
name|result
init|=
name|region
operator|.
name|execService
argument_list|(
name|execController
argument_list|,
name|request
operator|.
name|getCall
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|execController
operator|.
name|getFailedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|execController
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
name|CoprocessorServiceResponse
operator|.
name|Builder
name|builder
init|=
name|CoprocessorServiceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|builder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|result
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Execute multiple actions on a table: get, mutate, and/or execCoprocessor    *    * @param controller the RPC controller    * @param request the multi request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|MultiResponse
name|multi
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MultiRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|MultiResponse
operator|.
name|Builder
name|builder
init|=
name|MultiResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasAtomic
argument_list|()
operator|&&
name|request
operator|.
name|getAtomic
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MultiAction
name|actionUnion
range|:
name|request
operator|.
name|getActionList
argument_list|()
control|)
block|{
if|if
condition|(
name|actionUnion
operator|.
name|hasMutate
argument_list|()
condition|)
block|{
name|mutates
operator|.
name|add
argument_list|(
name|actionUnion
operator|.
name|getMutate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported atomic action type: "
operator|+
name|actionUnion
argument_list|)
throw|;
block|}
block|}
name|mutateRows
argument_list|(
name|region
argument_list|,
name|mutates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionResult
operator|.
name|Builder
name|resultBuilder
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MultiAction
name|actionUnion
range|:
name|request
operator|.
name|getActionList
argument_list|()
control|)
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|actionUnion
operator|.
name|hasGet
argument_list|()
condition|)
block|{
name|Get
name|get
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|actionUnion
operator|.
name|getGet
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|get
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|actionUnion
operator|.
name|hasMutate
argument_list|()
condition|)
block|{
name|Mutate
name|mutate
init|=
name|actionUnion
operator|.
name|getMutate
argument_list|()
decl_stmt|;
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|MutateType
operator|.
name|PUT
operator|&&
name|type
operator|!=
name|MutateType
operator|.
name|DELETE
condition|)
block|{
if|if
condition|(
operator|!
name|mutates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doBatchOp
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|mutates
argument_list|)
expr_stmt|;
name|mutates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
block|}
name|Result
name|r
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|mutates
operator|.
name|add
argument_list|(
name|mutate
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|mutates
operator|.
name|add
argument_list|(
name|mutate
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|actionUnion
operator|.
name|hasExec
argument_list|()
condition|)
block|{
name|Exec
name|call
init|=
name|ProtobufUtil
operator|.
name|toExec
argument_list|(
name|actionUnion
operator|.
name|getExec
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|region
operator|.
name|exec
argument_list|(
name|call
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error: invalid action: "
operator|+
name|actionUnion
operator|+
literal|". "
operator|+
literal|"it must be a Get, Mutate, or Exec."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid action, "
operator|+
literal|"it must be a Get, Mutate, or Exec."
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resultBuilder
operator|==
literal|null
condition|)
block|{
name|resultBuilder
operator|=
name|ActionResult
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|NameBytesPair
name|value
init|=
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|resultBuilder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResult
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|builder
operator|.
name|addResult
argument_list|(
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mutates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doBatchOp
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|mutates
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|// End Client methods
end_comment

begin_comment
comment|// Start Admin methods
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|GetRegionInfoResponse
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRegionInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|GetRegionInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRegionInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCompactionState
argument_list|()
operator|&&
name|request
operator|.
name|getCompactionState
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompactionState
argument_list|(
name|CompactionRequest
operator|.
name|getCompactionState
argument_list|(
name|info
operator|.
name|getRegionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|GetStoreFileResponse
name|getStoreFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetStoreFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamilies
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getFamilyCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnFamilies
operator|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnFamilies
operator|=
operator|new
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ByteString
name|cf
range|:
name|request
operator|.
name|getFamilyList
argument_list|()
control|)
block|{
name|columnFamilies
operator|.
name|add
argument_list|(
name|cf
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nCF
init|=
name|columnFamilies
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
name|region
operator|.
name|getStoreFileList
argument_list|(
name|columnFamilies
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|nCF
index|]
index|[]
argument_list|)
argument_list|)
decl_stmt|;
name|GetStoreFileResponse
operator|.
name|Builder
name|builder
init|=
name|GetStoreFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllStoreFile
argument_list|(
name|fileList
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|GetOnlineRegionResponse
name|getOnlineRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetOnlineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|onlineRegions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|this
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetOnlineRegionResponse
argument_list|(
name|list
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|// Region open/close direct RPCs
end_comment

begin_comment
comment|/**    * Open a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|OpenRegionResponse
name|openRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|OpenRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|OpenRegionResponse
operator|.
name|Builder
name|builder
init|=
name|OpenRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|regionCount
init|=
name|request
operator|.
name|getOpenInfoCount
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|htds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
argument_list|(
name|regionCount
argument_list|)
decl_stmt|;
name|boolean
name|isBulkAssign
init|=
name|regionCount
operator|>
literal|1
decl_stmt|;
for|for
control|(
name|RegionOpenInfo
name|regionOpenInfo
range|:
name|request
operator|.
name|getOpenInfoList
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionOpenInfo
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|versionOfOfflineNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|regionOpenInfo
operator|.
name|hasVersionOfOfflineNode
argument_list|()
condition|)
block|{
name|versionOfOfflineNode
operator|=
name|regionOpenInfo
operator|.
name|getVersionOfOfflineNode
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|checkIfRegionInTransition
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|OPEN
argument_list|)
expr_stmt|;
name|HRegion
name|onlineRegion
init|=
name|getFromOnlineRegions
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|onlineRegion
condition|)
block|{
comment|// See HBASE-5094. Cross check with META if still this RS is owning
comment|// the region.
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|this
operator|.
name|catalogTracker
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempted open of "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" but already online on this server"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|ALREADY_OPENED
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The region "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" is online on this server but META does not have this server."
argument_list|)
expr_stmt|;
name|removeFromOnlineRegions
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Received request to open region: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" on "
operator|+
name|this
operator|.
name|serverNameFromMasterPOV
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|htds
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|==
literal|null
condition|)
block|{
name|htd
operator|=
name|this
operator|.
name|tableDescriptors
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|htds
operator|.
name|put
argument_list|(
name|region
operator|.
name|getTableNameAsString
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|regionsInTransitionInRS
operator|.
name|putIfAbsent
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Need to pass the expected version in the constructor.
if|if
condition|(
name|region
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenRootHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenMetaHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenRegionHandler
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|versionOfOfflineNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegionAlreadyInTransitionException
name|rie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region is already in transition"
argument_list|,
name|rie
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBulkAssign
condition|)
block|{
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|rie
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed opening region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBulkAssign
condition|)
block|{
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|FAILED_OPENING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Close a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|CloseRegionResponse
name|closeRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CloseRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|int
name|versionOfClosingNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasVersionOfClosingNode
argument_list|()
condition|)
block|{
name|versionOfClosingNode
operator|=
name|request
operator|.
name|getVersionOfClosingNode
argument_list|()
expr_stmt|;
block|}
name|boolean
name|zk
init|=
name|request
operator|.
name|getTransitionInZK
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|sn
init|=
operator|(
name|request
operator|.
name|hasDestinationServer
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getDestinationServer
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|String
name|encodedRegionName
init|=
name|ProtobufUtil
operator|.
name|getRegionEncodedName
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encodedName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|Boolean
name|openAction
init|=
name|regionsInTransitionInRS
operator|.
name|get
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|openAction
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|openAction
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|regionsInTransitionInRS
operator|.
name|replace
argument_list|(
name|encodedName
argument_list|,
name|openAction
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|checkIfRegionInTransition
argument_list|(
name|encodedName
argument_list|,
name|CLOSE
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|region
init|=
name|getRegionByEncodedName
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received close region: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|". Version of ZK closing node:"
operator|+
name|versionOfClosingNode
operator|+
literal|". Destination server:"
operator|+
name|sn
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|checkIfRegionInTransition
argument_list|(
name|encodedName
argument_list|,
name|CLOSE
argument_list|)
expr_stmt|;
name|boolean
name|closed
init|=
name|closeRegion
argument_list|(
name|regionInfo
argument_list|,
literal|false
argument_list|,
name|zk
argument_list|,
name|versionOfClosingNode
argument_list|,
name|sn
argument_list|)
decl_stmt|;
name|CloseRegionResponse
operator|.
name|Builder
name|builder
init|=
name|CloseRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClosed
argument_list|(
name|closed
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Flush a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|FlushRegionResponse
name|flushRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|FlushRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|shouldFlush
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasIfOlderThanTs
argument_list|()
condition|)
block|{
name|shouldFlush
operator|=
name|region
operator|.
name|getLastFlushTime
argument_list|()
operator|<
name|request
operator|.
name|getIfOlderThanTs
argument_list|()
expr_stmt|;
block|}
name|FlushRegionResponse
operator|.
name|Builder
name|builder
init|=
name|FlushRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldFlush
condition|)
block|{
name|builder
operator|.
name|setFlushed
argument_list|(
name|region
operator|.
name|flushcache
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLastFlushTime
argument_list|(
name|region
operator|.
name|getLastFlushTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Split a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|SplitRegionResponse
name|splitRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|SplitRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitPoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasSplitPoint
argument_list|()
condition|)
block|{
name|splitPoint
operator|=
name|request
operator|.
name|getSplitPoint
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|region
operator|.
name|forceSplit
argument_list|(
name|splitPoint
argument_list|)
expr_stmt|;
name|compactSplitThread
operator|.
name|requestSplit
argument_list|(
name|region
argument_list|,
name|region
operator|.
name|checkSplit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SplitRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Compact a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
specifier|public
name|CompactRegionResponse
name|compactRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CompactRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HRegion
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compacting "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|major
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
name|Store
name|store
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|request
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|store
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"column family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" does not exist in region "
operator|+
operator|new
name|String
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasMajor
argument_list|()
condition|)
block|{
name|major
operator|=
name|request
operator|.
name|getMajor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|major
condition|)
block|{
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|region
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|log
init|=
literal|"User-triggered "
operator|+
operator|(
name|major
condition|?
literal|"major "
else|:
literal|""
operator|)
operator|+
literal|"compaction"
decl_stmt|;
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|log
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|log
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
block|}
return|return
name|CompactRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Replicate WAL entries on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|REPLICATION_QOS
argument_list|)
specifier|public
name|ReplicateWALEntryResponse
name|replicateWALEntry
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ReplicateWALEntryRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
if|if
condition|(
name|replicationSinkHandler
operator|!=
literal|null
condition|)
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
name|ProtobufUtil
operator|.
name|toHLogEntries
argument_list|(
name|request
operator|.
name|getEntryList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
operator|&&
name|entries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|replicationSinkHandler
operator|.
name|replicateLogEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ReplicateWALEntryResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Roll the WAL writer of the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|RollWALWriterResponse
name|rollWALWriter
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|RollWALWriterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|HLog
name|wal
init|=
name|this
operator|.
name|getWAL
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RollWALWriterResponse
operator|.
name|Builder
name|builder
init|=
name|RollWALWriterResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsToFlush
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|region
range|:
name|regionsToFlush
control|)
block|{
name|builder
operator|.
name|addRegionToFlush
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Stop the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|StopServerResponse
name|stopServer
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|StopServerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|String
name|reason
init|=
name|request
operator|.
name|getReason
argument_list|()
decl_stmt|;
name|stop
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return
name|StopServerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Get some information of the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|GetServerInfoResponse
name|getServerInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetServerInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ServerName
name|serverName
init|=
name|getServerName
argument_list|()
decl_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetServerInfoResponse
argument_list|(
name|serverName
argument_list|,
name|webuiport
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// End Admin methods
end_comment

begin_comment
comment|/**    * Find the HRegion based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region    * @throws IOException if the specifier is not null,    *    but failed to find the region    */
end_comment

begin_function
specifier|protected
name|HRegion
name|getRegion
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRegionByEncodedName
argument_list|(
name|ProtobufUtil
operator|.
name|getRegionEncodedName
argument_list|(
name|regionSpecifier
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Execute an append mutation.    *    * @param region    * @param mutate    * @return    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|Result
name|append
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|Mutate
name|mutate
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Append
name|append
init|=
name|ProtobufUtil
operator|.
name|toAppend
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preAppend
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|append
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|append
argument_list|(
name|append
argument_list|,
name|lock
argument_list|,
name|append
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postAppend
argument_list|(
name|append
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|metricsRegionServer
operator|.
name|updateAppend
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_comment
comment|/**    * Execute an increment mutation.    *    * @param region    * @param mutate    * @return    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|Result
name|increment
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|Mutate
name|mutate
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Increment
name|increment
init|=
name|ProtobufUtil
operator|.
name|toIncrement
argument_list|(
name|mutate
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preIncrement
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|increment
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|region
operator|.
name|increment
argument_list|(
name|increment
argument_list|,
name|lock
argument_list|,
name|increment
operator|.
name|getWriteToWAL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postIncrement
argument_list|(
name|increment
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|metricsRegionServer
operator|.
name|updateIncrement
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_comment
comment|/**    * Execute a list of Put/Delete mutations.    *    * @param builder    * @param region    * @param mutates    */
end_comment

begin_function
specifier|protected
name|void
name|doBatchOp
parameter_list|(
specifier|final
name|MultiResponse
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Integer
argument_list|>
index|[]
name|mutationsWithLocks
init|=
operator|new
name|Pair
index|[
name|mutates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|batchContainsPuts
init|=
literal|false
decl_stmt|,
name|batchContainsDelete
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ActionResult
operator|.
name|Builder
name|resultBuilder
init|=
name|ActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|NameBytesPair
name|value
init|=
name|ProtobufUtil
operator|.
name|toParameter
argument_list|(
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|resultBuilder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ActionResult
name|result
init|=
name|resultBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Mutate
name|m
range|:
name|mutates
control|)
block|{
name|Mutation
name|mutation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getMutateType
argument_list|()
operator|==
name|MutateType
operator|.
name|PUT
condition|)
block|{
name|mutation
operator|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|batchContainsPuts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mutation
operator|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|batchContainsDelete
operator|=
literal|true
expr_stmt|;
block|}
name|Integer
name|lock
init|=
name|getLockFromId
argument_list|(
name|mutation
operator|.
name|getLockId
argument_list|()
argument_list|)
decl_stmt|;
name|mutationsWithLocks
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|mutation
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|requestCount
operator|.
name|add
argument_list|(
name|mutates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|OperationStatus
name|codes
index|[]
init|=
name|region
operator|.
name|batchMutate
argument_list|(
name|mutationsWithLocks
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|codes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
condition|)
block|{
case|case
name|BAD_FAMILY
case|:
name|result
operator|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
operator|new
name|NoSuchColumnFamilyException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANITY_CHECK_FAILURE
case|:
name|result
operator|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
operator|new
name|FailedSanityCheckException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUCCESS
case|:
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|ActionResult
name|result
init|=
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|ie
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|mutates
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|after
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|batchContainsPuts
condition|)
block|{
name|metricsRegionServer
operator|.
name|updatePut
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|batchContainsDelete
condition|)
block|{
name|metricsRegionServer
operator|.
name|updateDelete
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Mutate a list of rows atomically.    *    * @param region    * @param mutates    * @throws IOException    */
end_comment

begin_function
specifier|protected
name|void
name|mutateRows
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutate
argument_list|>
name|mutates
parameter_list|)
throws|throws
name|IOException
block|{
name|Mutate
name|firstMutate
init|=
name|mutates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|row
init|=
name|firstMutate
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutate
name|mutate
range|:
name|mutates
control|)
block|{
name|MutateType
name|type
init|=
name|mutate
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mutate
operator|.
name|getMutateType
argument_list|()
condition|)
block|{
case|case
name|PUT
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|mutate
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutate
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"mutate supports atomic put and/or delete, not "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|region
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// This map will containsall the regions that we closed for a move.
end_comment

begin_comment
comment|//  We add the time it was moved as we don't want to keep too old information
end_comment

begin_decl_stmt
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|movedRegions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// We need a timeout. If not there is a risk of giving a wrong information: this would double
end_comment

begin_comment
comment|//  the number of network calls instead of reducing them.
end_comment

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT_REGION_MOVED
init|=
operator|(
literal|2
operator|*
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|protected
name|void
name|addToMovedRegions
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|,
name|ServerName
name|destination
parameter_list|)
block|{
name|addToMovedRegions
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|addToMovedRegions
parameter_list|(
name|String
name|encodedName
parameter_list|,
name|ServerName
name|destination
parameter_list|)
block|{
specifier|final
name|Long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|movedRegions
operator|.
name|put
argument_list|(
name|encodedName
argument_list|,
operator|new
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|time
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|ServerName
name|getMovedRegion
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|)
block|{
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
name|dest
init|=
name|movedRegions
operator|.
name|get
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|getFirst
argument_list|()
operator|>
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TIMEOUT_REGION_MOVED
operator|)
condition|)
block|{
return|return
name|dest
operator|.
name|getSecond
argument_list|()
return|;
block|}
else|else
block|{
name|movedRegions
operator|.
name|remove
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Remove the expired entries from the moved regions list.    */
end_comment

begin_function
specifier|protected
name|void
name|cleanMovedRegions
parameter_list|()
block|{
specifier|final
name|long
name|cutOff
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TIMEOUT_REGION_MOVED
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|movedRegions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
operator|<
name|cutOff
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Creates a Chore thread to clean the moved region cache.    */
end_comment

begin_class
specifier|protected
specifier|static
class|class
name|MovedRegionsCleaner
extends|extends
name|Chore
implements|implements
name|Stoppable
block|{
specifier|private
name|HRegionServer
name|regionServer
decl_stmt|;
name|Stoppable
name|stoppable
decl_stmt|;
specifier|private
name|MovedRegionsCleaner
parameter_list|(
name|HRegionServer
name|regionServer
parameter_list|,
name|Stoppable
name|stoppable
parameter_list|)
block|{
name|super
argument_list|(
literal|"MovedRegionsCleaner for region "
operator|+
name|regionServer
argument_list|,
name|TIMEOUT_REGION_MOVED
argument_list|,
name|stoppable
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|regionServer
expr_stmt|;
name|this
operator|.
name|stoppable
operator|=
name|stoppable
expr_stmt|;
block|}
specifier|static
name|MovedRegionsCleaner
name|createAndStart
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
block|{
name|Stoppable
name|stoppable
init|=
operator|new
name|Stoppable
argument_list|()
block|{
specifier|private
specifier|volatile
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|isStopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|isStopped
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|MovedRegionsCleaner
argument_list|(
name|rs
argument_list|,
name|stoppable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|regionServer
operator|.
name|cleanMovedRegions
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|stoppable
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stoppable
operator|.
name|isStopped
argument_list|()
return|;
block|}
block|}
end_class

begin_function
specifier|private
name|String
name|getMyEphemeralNodePath
parameter_list|()
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|rsZNode
argument_list|,
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Holder class which holds the RegionScanner and nextCallSeq together.    */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|RegionScannerHolder
block|{
specifier|private
name|RegionScanner
name|s
decl_stmt|;
specifier|private
name|long
name|nextCallSeq
init|=
literal|0L
decl_stmt|;
specifier|public
name|RegionScannerHolder
parameter_list|(
name|RegionScanner
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

