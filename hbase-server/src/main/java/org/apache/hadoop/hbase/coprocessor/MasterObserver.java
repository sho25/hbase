begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaMutationAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|locking
operator|.
name|LockProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Defines coprocessor hooks for interacting with operations on the  * {@link org.apache.hadoop.hbase.master.HMaster} process.  *<br><br>  *  * Since most implementations will be interested in only a subset of hooks, this class uses  * 'default' functions to avoid having to add unnecessary overrides. When the functions are  * non-empty, it's simply to satisfy the compiler by returning value of expected (non-void) type.  * It is done in a way that these default definitions act as no-op. So our suggestion to  * implementation would be to not call these 'default' methods from overrides.  *<br><br>  *  *<h3>Exception Handling</h3>  * For all functions, exception handling is done as follows:  *<ul>  *<li>Exceptions of type {@link IOException} are reported back to client.</li>  *<li>For any other kind of exception:  *<ul>  *<li>If the configuration {@link CoprocessorHost#ABORT_ON_ERROR_KEY} is set to true, then  *         the server aborts.</li>  *<li>Otherwise, coprocessor is removed from the server and  *         {@link org.apache.hadoop.hbase.DoNotRetryIOException} is returned to the client.</li>  *</ul>  *</li>  *</ul>  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
interface|interface
name|MasterObserver
extends|extends
name|Coprocessor
block|{
comment|/**    * Called before a new table is created by    * {@link org.apache.hadoop.hbase.master.HMaster}.  Called as part of create    * table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param desc the TableDescriptor for the table    * @param regions the initial regions created for the table    */
specifier|default
name|void
name|preCreateTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the createTable operation has been requested.  Called as part    * of create table RPC call.    * @param ctx the environment to interact with the framework and master    * @param desc the TableDescriptor for the table    * @param regions the initial regions created for the table    */
specifier|default
name|void
name|postCreateTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a new table is created by    * {@link org.apache.hadoop.hbase.master.HMaster}.  Called as part of create    * table procedure and it is async to the create RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param desc the TableDescriptor for the table    * @param regions the initial regions created for the table    */
specifier|default
name|void
name|preCreateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableDescriptor
name|desc
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the createTable operation has been requested.  Called as part    * of create table RPC call.  Called as part of create table procedure and    * it is async to the create RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param desc the TableDescriptor for the table    * @param regions the initial regions created for the table    */
specifier|default
name|void
name|postCompletedCreateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableDescriptor
name|desc
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a    * table.  Called as part of delete table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preDeleteTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the deleteTable operation has been requested.  Called as part    * of delete table RPC call.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postDeleteTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a    * table.  Called as part of delete table procedure and    * it is async to the delete RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preDeleteTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after {@link org.apache.hadoop.hbase.master.HMaster} deletes a    * table.  Called as part of delete table procedure and it is async to the    * delete RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postCompletedDeleteTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a    * table.  Called as part of truncate table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preTruncateTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the truncateTable operation has been requested.  Called as part    * of truncate table RPC call.    * The truncate is synchronous, so this method will be called when the    * truncate operation is terminated.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postTruncateTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before {@link org.apache.hadoop.hbase.master.HMaster} truncates a    * table.  Called as part of truncate table procedure and it is async    * to the truncate RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preTruncateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after {@link org.apache.hadoop.hbase.master.HMaster} truncates a    * table.  Called as part of truncate table procedure and it is async to the    * truncate RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postCompletedTruncateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying a table's properties.  Called as part of modify    * table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param htd the TableDescriptor    */
specifier|default
name|void
name|preModifyTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the modifyTable operation has been requested.  Called as part    * of modify table RPC call.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param htd the TableDescriptor    */
specifier|default
name|void
name|postModifyTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying a table's properties.  Called as part of modify    * table procedure and it is async to the modify table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param htd the TableDescriptor    */
specifier|default
name|void
name|preModifyTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after to modifying a table's properties.  Called as part of modify    * table procedure and it is async to the modify table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param htd the TableDescriptor    */
specifier|default
name|void
name|postCompletedModifyTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to adding a new column family to the table.  Called as part of    * add column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|preAddColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the new column family has been created.  Called as part of    * add column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|postAddColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to adding a new column family to the table.  Called as part of    * add column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|preAddColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the new column family has been created.  Called as part of    * add column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|postCompletedAddColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying a column family's attributes.  Called as part of    * modify column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|preModifyColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the column family has been updated.  Called as part of modify    * column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|postModifyColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying a column family's attributes.  Called as part of    * modify column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|preModifyColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the column family has been updated.  Called as part of modify    * column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the ColumnFamilyDescriptor    */
specifier|default
name|void
name|postCompletedModifyColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to deleting the entire column family.  Called as part of    * delete column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the column    */
specifier|default
name|void
name|preDeleteColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the column family has been deleted.  Called as part of delete    * column RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the column family    */
specifier|default
name|void
name|postDeleteColumnFamily
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to deleting the entire column family.  Called as part of    * delete column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the column family    */
specifier|default
name|void
name|preDeleteColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the column family has been deleted.  Called as part of    * delete column procedure.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param columnFamily the column family    */
specifier|default
name|void
name|postCompletedDeleteColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to enabling a table.  Called as part of enable table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preEnableTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the enableTable operation has been requested.  Called as part    * of enable table RPC call.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postEnableTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to enabling a table.  Called as part of enable table procedure    * and it is async to the enable table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preEnableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the enableTable operation has been requested.  Called as part    * of enable table procedure and it is async to the enable table RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postCompletedEnableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to disabling a table.  Called as part of disable table RPC    * call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preDisableTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the disableTable operation has been requested.  Called as part    * of disable table RPC call.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postDisableTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to disabling a table.  Called as part of disable table procedure    * and it is asyn to the disable table RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preDisableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the disableTable operation has been requested.  Called as part    * of disable table procedure and it is asyn to the disable table RPC call.    *    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postCompletedDisableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a abortProcedure request has been processed.    * @param ctx the environment to interact with the framework and master    * @param procEnv procedure executor    * @param procId the Id of the procedure    */
specifier|default
name|void
name|preAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procEnv
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a abortProcedure request has been processed.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a getProcedures request has been processed.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|preGetProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a getProcedures request has been processed.    * @param ctx the environment to interact with the framework and master    * @param procList the list of procedures about to be returned    */
specifier|default
name|void
name|postGetProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|Procedure
argument_list|<
name|?
argument_list|>
argument_list|>
name|procList
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a getLocks request has been processed.    * @param ctx the environment to interact with the framework and master    * @throws IOException if something went wrong    */
specifier|default
name|void
name|preGetLocks
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a getLocks request has been processed.    * @param ctx the environment to interact with the framework and master    * @param lockedResources the list of locks about to be returned    * @throws IOException if something went wrong    */
specifier|default
name|void
name|postGetLocks
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|LockedResource
argument_list|>
name|lockedResources
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to moving a given region from one region server to another.    * @param ctx the environment to interact with the framework and master    * @param region the RegionInfo    * @param srcServer the source ServerName    * @param destServer the destination ServerName    */
specifier|default
name|void
name|preMove
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|srcServer
parameter_list|,
specifier|final
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region move has been requested.    * @param ctx the environment to interact with the framework and master    * @param region the RegionInfo    * @param srcServer the source ServerName    * @param destServer the destination ServerName    */
specifier|default
name|void
name|postMove
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|srcServer
parameter_list|,
specifier|final
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to assigning a specific region.    * @param ctx the environment to interact with the framework and master    * @param regionInfo the regionInfo of the region    */
specifier|default
name|void
name|preAssign
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region assignment has been requested.    * @param ctx the environment to interact with the framework and master    * @param regionInfo the regionInfo of the region    */
specifier|default
name|void
name|postAssign
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to unassigning a given region.    * @param ctx the environment to interact with the framework and master    * @param regionInfo    * @param force whether to force unassignment or not    */
specifier|default
name|void
name|preUnassign
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region unassignment has been requested.    * @param ctx the environment to interact with the framework and master    * @param regionInfo    * @param force whether to force unassignment or not    */
specifier|default
name|void
name|postUnassign
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to marking a given region as offline.<code>ctx.bypass()</code> will not have any    * impact on this hook.    * @param ctx the environment to interact with the framework and master    * @param regionInfo    */
specifier|default
name|void
name|preRegionOffline
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region has been marked offline.    * @param ctx the environment to interact with the framework and master    * @param regionInfo    */
specifier|default
name|void
name|postRegionOffline
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to requesting rebalancing of the cluster regions, though after    * the initial checks for regions in transition and the balance switch flag.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|preBalance
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the balancing plan has been submitted.    * @param ctx the environment to interact with the framework and master    * @param plans the RegionPlans which master has executed. RegionPlan serves as hint    * as for the final destination for the underlying region but may not represent the    * final state of assignment    */
specifier|default
name|void
name|postBalance
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to setting split / merge switch    * @param ctx the coprocessor instance's environment    * @param newValue the new value submitted in the call    * @param switchType type of switch    */
specifier|default
name|boolean
name|preSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Called after setting split / merge switch    * @param ctx the coprocessor instance's environment    * @param newValue the new value submitted in the call    * @param switchType type of switch    */
specifier|default
name|void
name|postSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the split region procedure is called.    * @param c the environment to interact with the framework and master    * @param tableName the table where the region belongs to    * @param splitRow split point    */
specifier|default
name|void
name|preSplitRegion
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the region is split.    * @param c the environment to interact with the framework and master    * @param tableName the table where the region belongs to    * @param splitRow split point    */
specifier|default
name|void
name|preSplitRegionAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|splitRow
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the region is split.    * @param c the environment to interact with the framework and master    * @param regionInfoA the left daughter region    * @param regionInfoB the right daughter region    */
specifier|default
name|void
name|postCompletedSplitRegionAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfoA
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfoB
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called before PONR step as part of split transaction. Calling    * {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} rollback the split    * @param ctx the environment to interact with the framework and master    * @param splitKey    * @param metaEntries    */
specifier|default
name|void
name|preSplitRegionBeforePONRAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|byte
index|[]
name|splitKey
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called after PONR step as part of split transaction    * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no    * effect in this hook.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|preSplitRegionAfterPONRAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called after the roll back of the split region is completed    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postRollBackSplitRegionAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the regions merge.    * Call {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} to skip the merge.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|preMergeRegionsAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * called after the regions merge.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postCompletedMergeRegionsAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|,
specifier|final
name|RegionInfo
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called before PONR step as part of regions merge transaction. Calling    * {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} rollback the merge    * @param ctx the environment to interact with the framework and master    * @param metaEntries mutations to execute on hbase:meta atomically with regions merge updates.    *        Any puts or deletes to execute on hbase:meta can be added to the mutations.    */
specifier|default
name|void
name|preMergeRegionsCommitAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|,
annotation|@
name|MetaMutationAnnotation
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called after PONR step as part of regions merge transaction.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postMergeRegionsCommitAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|,
specifier|final
name|RegionInfo
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * This will be called after the roll back of the regions merge.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postRollBackMergeRegionsAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying the flag used to enable/disable region balancing.    * @param ctx the coprocessor instance's environment    * @param newValue the new flag value submitted in the call    */
specifier|default
name|boolean
name|preBalanceSwitch
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newValue
return|;
block|}
comment|/**    * Called after the flag to enable/disable balancing has changed.    * @param ctx the coprocessor instance's environment    * @param oldValue the previously set balanceSwitch value    * @param newValue the newly set balanceSwitch value    */
specifier|default
name|void
name|postBalanceSwitch
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|oldValue
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to shutting down the full HBase cluster, including this    * {@link org.apache.hadoop.hbase.master.HMaster} process.    */
specifier|default
name|void
name|preShutdown
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called immediately prior to stopping this    * {@link org.apache.hadoop.hbase.master.HMaster} process.    */
specifier|default
name|void
name|preStopMaster
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called immediately after an active master instance has completed    * initialization.  Will not be called on standby master instances unless    * they take over the active role.    */
specifier|default
name|void
name|postStartMaster
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Call before the master initialization is set to true.    * {@link org.apache.hadoop.hbase.master.HMaster} process.    */
specifier|default
name|void
name|preMasterInitialization
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a new snapshot is taken.    * Called as part of snapshot RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the TableDescriptor of the table to snapshot    */
specifier|default
name|void
name|preSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the snapshot operation has been requested.    * Called as part of snapshot RPC call.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the TableDescriptor of the table to snapshot    */
specifier|default
name|void
name|postSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before listSnapshots request has been processed.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor of the snapshot to list    */
specifier|default
name|void
name|preListSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after listSnapshots request has been processed.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor of the snapshot to list    */
specifier|default
name|void
name|postListSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a snapshot is cloned.    * Called as part of restoreSnapshot RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the TableDescriptor of the table to create    */
specifier|default
name|void
name|preCloneSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a snapshot clone operation has been requested.    * Called as part of restoreSnapshot RPC call.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the v of the table to create    */
specifier|default
name|void
name|postCloneSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a snapshot is restored.    * Called as part of restoreSnapshot RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the TableDescriptor of the table to restore    */
specifier|default
name|void
name|preRestoreSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a snapshot restore operation has been requested.    * Called as part of restoreSnapshot RPC call.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor for the snapshot    * @param tableDescriptor the TableDescriptor of the table to restore    */
specifier|default
name|void
name|postRestoreSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a snapshot is deleted.    * Called as part of deleteSnapshot RPC call.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor of the snapshot to delete    */
specifier|default
name|void
name|preDeleteSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the delete snapshot operation has been requested.    * Called as part of deleteSnapshot RPC call.    * @param ctx the environment to interact with the framework and master    * @param snapshot the SnapshotDescriptor of the snapshot to delete    */
specifier|default
name|void
name|postDeleteSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a getTableDescriptors request has been processed.    * @param ctx the environment to interact with the framework and master    * @param tableNamesList the list of table names, or null if querying for all    * @param descriptors an empty list, can be filled with what to return if bypassing    * @param regex regular expression used for filtering the table names    */
specifier|default
name|void
name|preGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a getTableDescriptors request has been processed.    * @param ctx the environment to interact with the framework and master    * @param tableNamesList the list of table names, or null if querying for all    * @param descriptors the list of descriptors about to be returned    * @param regex regular expression used for filtering the table names    */
specifier|default
name|void
name|postGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a getTableNames request has been processed.    * @param ctx the environment to interact with the framework and master    * @param descriptors an empty list, can be filled with what to return if bypassing    * @param regex regular expression used for filtering the table names    */
specifier|default
name|void
name|preGetTableNames
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a getTableNames request has been processed.    * @param ctx the environment to interact with the framework and master    * @param descriptors the list of descriptors about to be returned    * @param regex regular expression used for filtering the table names    */
specifier|default
name|void
name|postGetTableNames
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a new namespace is created by    * {@link org.apache.hadoop.hbase.master.HMaster}.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param ns the NamespaceDescriptor for the table    */
specifier|default
name|void
name|preCreateNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the createNamespace operation has been requested.    * @param ctx the environment to interact with the framework and master    * @param ns the NamespaceDescriptor for the table    */
specifier|default
name|void
name|postCreateNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before {@link org.apache.hadoop.hbase.master.HMaster} deletes a    * namespace    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param namespace the name of the namespace    */
specifier|default
name|void
name|preDeleteNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the deleteNamespace operation has been requested.    * @param ctx the environment to interact with the framework and master    * @param namespace the name of the namespace    */
specifier|default
name|void
name|postDeleteNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called prior to modifying a namespace's properties.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx the environment to interact with the framework and master    * @param ns the NamespaceDescriptor    */
specifier|default
name|void
name|preModifyNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the modifyNamespace operation has been requested.    * @param ctx the environment to interact with the framework and master    * @param ns the NamespaceDescriptor    */
specifier|default
name|void
name|postModifyNamespace
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a getNamespaceDescriptor request has been processed.    * @param ctx the environment to interact with the framework and master    * @param namespace the name of the namespace    */
specifier|default
name|void
name|preGetNamespaceDescriptor
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a getNamespaceDescriptor request has been processed.    * @param ctx the environment to interact with the framework and master    * @param ns the NamespaceDescriptor    */
specifier|default
name|void
name|postGetNamespaceDescriptor
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a listNamespaceDescriptors request has been processed.    * @param ctx the environment to interact with the framework and master    * @param descriptors an empty list, can be filled with what to return if bypassing    */
specifier|default
name|void
name|preListNamespaceDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a listNamespaceDescriptors request has been processed.    * @param ctx the environment to interact with the framework and master    * @param descriptors the list of descriptors about to be returned    */
specifier|default
name|void
name|postListNamespaceDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the table memstore is flushed to disk.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|preTableFlush
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the table memstore is flushed to disk.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    */
specifier|default
name|void
name|postTableFlush
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the quota for the user is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param quotas the quota settings    */
specifier|default
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the quota for the user is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param quotas the quota settings    */
specifier|default
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the quota for the user on the specified table is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param tableName the name of the table    * @param quotas the quota settings    */
specifier|default
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the quota for the user on the specified table is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param tableName the name of the table    * @param quotas the quota settings    */
specifier|default
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the quota for the user on the specified namespace is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param namespace the name of the namespace    * @param quotas the quota settings    */
specifier|default
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the quota for the user on the specified namespace is stored.    * @param ctx the environment to interact with the framework and master    * @param userName the name of user    * @param namespace the name of the namespace    * @param quotas the quota settings    */
specifier|default
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the quota for the table is stored.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param quotas the quota settings    */
specifier|default
name|void
name|preSetTableQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the quota for the table is stored.    * @param ctx the environment to interact with the framework and master    * @param tableName the name of the table    * @param quotas the quota settings    */
specifier|default
name|void
name|postSetTableQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before the quota for the namespace is stored.    * @param ctx the environment to interact with the framework and master    * @param namespace the name of the namespace    * @param quotas the quota settings    */
specifier|default
name|void
name|preSetNamespaceQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after the quota for the namespace is stored.    * @param ctx the environment to interact with the framework and master    * @param namespace the name of the namespace    * @param quotas the quota settings    */
specifier|default
name|void
name|postSetNamespaceQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before merge regions request.    * It can't bypass the default action, e.g., ctx.bypass() won't have effect.    * @param ctx coprocessor environment    * @param regionsToMerge regions to be merged    */
specifier|default
name|void
name|preMergeRegions
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * called after merge regions request.    * @param c coprocessor environment    * @param regionsToMerge regions to be merged    */
specifier|default
name|void
name|postMergeRegions
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|RegionInfo
index|[]
name|regionsToMerge
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before servers are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param servers set of servers to move    * @param targetGroup destination group    */
specifier|default
name|void
name|preMoveServersAndTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after servers are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param servers set of servers to move    * @param targetGroup name of group    */
specifier|default
name|void
name|postMoveServersAndTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before servers are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param servers set of servers to move    * @param targetGroup destination group    */
specifier|default
name|void
name|preMoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after servers are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param servers set of servers to move    * @param targetGroup name of group    */
specifier|default
name|void
name|postMoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before tables are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param tables set of tables to move    * @param targetGroup name of group    */
specifier|default
name|void
name|preMoveTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after servers are moved to target region server group    * @param ctx the environment to interact with the framework and master    * @param tables set of tables to move    * @param targetGroup name of group    */
specifier|default
name|void
name|postMoveTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a new region server group is added    * @param ctx the environment to interact with the framework and master    * @param name group name    */
specifier|default
name|void
name|preAddRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a new region server group is added    * @param ctx the environment to interact with the framework and master    * @param name group name    */
specifier|default
name|void
name|postAddRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a region server group is removed    * @param ctx the environment to interact with the framework and master    * @param name group name    */
specifier|default
name|void
name|preRemoveRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a region server group is removed    * @param ctx the environment to interact with the framework and master    * @param name group name    */
specifier|default
name|void
name|postRemoveRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before a region server group is removed    * @param ctx the environment to interact with the framework and master    * @param groupName group name    */
specifier|default
name|void
name|preBalanceRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after a region server group is removed    * @param ctx the environment to interact with the framework and master    * @param groupName group name    */
specifier|default
name|void
name|postBalanceRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|,
name|boolean
name|balancerRan
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before add a replication peer    * @param ctx the environment to interact with the framework and master    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    */
specifier|default
name|void
name|preAddReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after add a replication peer    * @param ctx the environment to interact with the framework and master    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    */
specifier|default
name|void
name|postAddReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before remove a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|preRemoveReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after remove a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|postRemoveReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before enable a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|preEnableReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after enable a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|postEnableReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before disable a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|preDisableReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after disable a replication peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|postDisableReplicationPeer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before get the configured ReplicationPeerConfig for the specified peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|preGetReplicationPeerConfig
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after get the configured ReplicationPeerConfig for the specified peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|postGetReplicationPeerConfig
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before update peerConfig for the specified peer    * @param ctx    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|preUpdateReplicationPeerConfig
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after update peerConfig for the specified peer    * @param ctx the environment to interact with the framework and master    * @param peerId a short name that identifies the peer    */
specifier|default
name|void
name|postUpdateReplicationPeerConfig
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before list replication peers.    * @param ctx the environment to interact with the framework and master    * @param regex The regular expression to match peer id    */
specifier|default
name|void
name|preListReplicationPeers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after list replication peers.    * @param ctx the environment to interact with the framework and master    * @param regex The regular expression to match peer id    */
specifier|default
name|void
name|postListReplicationPeers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before new LockProcedure is queued.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|preRequestLock
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
index|[]
name|regionInfos
parameter_list|,
name|LockType
name|type
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after new LockProcedure is queued.    * @param ctx the environment to interact with the framework and master    */
specifier|default
name|void
name|postRequestLock
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
index|[]
name|regionInfos
parameter_list|,
name|LockType
name|type
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before heartbeat to a lock.    * @param ctx the environment to interact with the framework and master    * @param keepAlive if lock should be kept alive; lock will be released if set to false.    */
specifier|default
name|void
name|preLockHeartbeat
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|LockProcedure
name|proc
parameter_list|,
name|boolean
name|keepAlive
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after heartbeat to a lock.    * @param ctx the environment to interact with the framework and master    * @param keepAlive if lock was kept alive; lock was released if set to false.    */
specifier|default
name|void
name|postLockHeartbeat
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|LockProcedure
name|proc
parameter_list|,
name|boolean
name|keepAlive
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before list dead region servers.    */
specifier|default
name|void
name|preListDeadServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after list dead region servers.    */
specifier|default
name|void
name|postListDeadServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called before clear dead region servers.    */
specifier|default
name|void
name|preClearDeadServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**    * Called after clear dead region servers.    */
specifier|default
name|void
name|postClearDeadServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
end_interface

end_unit

