begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * An interface to describe a store data file.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
interface|interface
name|StoreFile
block|{
specifier|static
specifier|final
name|String
name|STORE_FILE_READER_NO_READAHEAD
init|=
literal|"hbase.store.reader.no-readahead"
decl_stmt|;
comment|// Keys for fileinfo values in HFile
comment|/** Max Sequence ID in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|MAX_SEQ_ID_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MAX_SEQ_ID_KEY"
argument_list|)
decl_stmt|;
comment|/** Major compaction flag in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|MAJOR_COMPACTION_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MAJOR_COMPACTION_KEY"
argument_list|)
decl_stmt|;
comment|/** Minor compaction flag in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|EXCLUDE_FROM_MINOR_COMPACTION_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EXCLUDE_FROM_MINOR_COMPACTION"
argument_list|)
decl_stmt|;
comment|/** Bloom filter Type in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|BLOOM_FILTER_TYPE_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BLOOM_FILTER_TYPE"
argument_list|)
decl_stmt|;
comment|/** Delete Family Count in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|DELETE_FAMILY_COUNT
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DELETE_FAMILY_COUNT"
argument_list|)
decl_stmt|;
comment|/** Last Bloom filter key in FileInfo */
specifier|static
specifier|final
name|byte
index|[]
name|LAST_BLOOM_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"LAST_BLOOM_KEY"
argument_list|)
decl_stmt|;
comment|/** Key for Timerange information in metadata */
specifier|static
specifier|final
name|byte
index|[]
name|TIMERANGE_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TIMERANGE"
argument_list|)
decl_stmt|;
comment|/** Key for timestamp of earliest-put in metadata */
specifier|static
specifier|final
name|byte
index|[]
name|EARLIEST_PUT_TS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EARLIEST_PUT_TS"
argument_list|)
decl_stmt|;
comment|/** Key for the number of mob cells in metadata */
specifier|static
specifier|final
name|byte
index|[]
name|MOB_CELLS_COUNT
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MOB_CELLS_COUNT"
argument_list|)
decl_stmt|;
comment|/** Meta key set when store file is a result of a bulk load */
specifier|static
specifier|final
name|byte
index|[]
name|BULKLOAD_TASK_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BULKLOAD_SOURCE_TASK"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|BULKLOAD_TIME_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BULKLOAD_TIMESTAMP"
argument_list|)
decl_stmt|;
comment|/**    * Key for skipping resetting sequence id in metadata. For bulk loaded hfiles, the scanner resets    * the cell seqId with the latest one, if this metadata is set as true, the reset is skipped.    */
specifier|static
specifier|final
name|byte
index|[]
name|SKIP_RESET_SEQ_ID
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"SKIP_RESET_SEQ_ID"
argument_list|)
decl_stmt|;
name|CacheConfig
name|getCacheConf
parameter_list|()
function_decl|;
name|Cell
name|getFirstKey
parameter_list|()
function_decl|;
name|Cell
name|getLastKey
parameter_list|()
function_decl|;
name|Comparator
argument_list|<
name|Cell
argument_list|>
name|getComparator
parameter_list|()
function_decl|;
name|long
name|getMaxMemstoreTS
parameter_list|()
function_decl|;
comment|/**    * @return the StoreFile object associated to this StoreFile. null if the StoreFile is not a    *         reference.    */
name|StoreFileInfo
name|getFileInfo
parameter_list|()
function_decl|;
comment|/**    * @return Path or null if this StoreFile was made with a Stream.    */
name|Path
name|getPath
parameter_list|()
function_decl|;
comment|/**    * @return Returns the qualified path of this StoreFile    */
name|Path
name|getQualifiedPath
parameter_list|()
function_decl|;
comment|/**    * @return True if this is a StoreFile Reference.    */
name|boolean
name|isReference
parameter_list|()
function_decl|;
comment|/**    * @return True if this is HFile.    */
name|boolean
name|isHFile
parameter_list|()
function_decl|;
comment|/**    * @return True if this file was made by a major compaction.    */
name|boolean
name|isMajorCompactionResult
parameter_list|()
function_decl|;
comment|/**    * @return True if this file should not be part of a minor compaction.    */
name|boolean
name|excludeFromMinorCompaction
parameter_list|()
function_decl|;
comment|/**    * @return This files maximum edit sequence id.    */
name|long
name|getMaxSequenceId
parameter_list|()
function_decl|;
name|long
name|getModificationTimeStamp
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Only used by the Striped Compaction Policy    * @param key    * @return value associated with the metadata key    */
name|byte
index|[]
name|getMetadataValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
function_decl|;
comment|/**    * Check if this storefile was created by bulk load. When a hfile is bulk loaded into HBase, we    * append {@code '_SeqId_<id-when-loaded>'} to the hfile name, unless    * "hbase.mapreduce.bulkload.assign.sequenceNumbers" is explicitly turned off. If    * "hbase.mapreduce.bulkload.assign.sequenceNumbers" is turned off, fall back to    * BULKLOAD_TIME_KEY.    * @return true if this storefile was created by bulk load.    */
name|boolean
name|isBulkLoadResult
parameter_list|()
function_decl|;
name|boolean
name|isCompactedAway
parameter_list|()
function_decl|;
comment|/**    * @return true if the file is still used in reads    */
name|boolean
name|isReferencedInReads
parameter_list|()
function_decl|;
comment|/**    * Return the timestamp at which this bulk load file was generated.    */
name|OptionalLong
name|getBulkLoadTimestamp
parameter_list|()
function_decl|;
comment|/**    * @return the cached value of HDFS blocks distribution. The cached value is calculated when store    *         file is opened.    */
name|HDFSBlocksDistribution
name|getHDFSBlockDistribution
parameter_list|()
function_decl|;
comment|/**    * Initialize the reader used for pread.    */
name|void
name|initReader
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Must be called after initReader.    */
name|StoreFileScanner
name|getPreadScanner
parameter_list|(
name|boolean
name|cacheBlocks
parameter_list|,
name|long
name|readPt
parameter_list|,
name|long
name|scannerOrder
parameter_list|,
name|boolean
name|canOptimizeForNonNullColumn
parameter_list|)
function_decl|;
name|StoreFileScanner
name|getStreamScanner
parameter_list|(
name|boolean
name|canUseDropBehind
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|long
name|readPt
parameter_list|,
name|long
name|scannerOrder
parameter_list|,
name|boolean
name|canOptimizeForNonNullColumn
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return Current reader. Must call initReader first else returns null.    * @see #initReader()    */
name|StoreFileReader
name|getReader
parameter_list|()
function_decl|;
comment|/**    * @param evictOnClose whether to evict blocks belonging to this file    * @throws IOException    */
name|void
name|closeReader
parameter_list|(
name|boolean
name|evictOnClose
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Marks the status of the file as compactedAway.    */
name|void
name|markCompactedAway
parameter_list|()
function_decl|;
comment|/**    * Delete this file    * @throws IOException    */
name|void
name|deleteReader
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * @return a length description of this StoreFile, suitable for debug output    */
name|String
name|toStringDetailed
parameter_list|()
function_decl|;
name|OptionalLong
name|getMinimumTimestamp
parameter_list|()
function_decl|;
name|OptionalLong
name|getMaximumTimestamp
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

