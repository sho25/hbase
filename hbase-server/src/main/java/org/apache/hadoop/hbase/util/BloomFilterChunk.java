begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_comment
comment|/**  * The basic building block for the {@link org.apache.hadoop.hbase.io.hfile.CompoundBloomFilter}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BloomFilterChunk
implements|implements
name|BloomFilterBase
block|{
comment|/** Bytes (B) in the array. This actually has to fit into an int. */
specifier|protected
name|long
name|byteSize
decl_stmt|;
comment|/** Number of hash functions */
specifier|protected
name|int
name|hashCount
decl_stmt|;
comment|/** Hash type */
specifier|protected
specifier|final
name|int
name|hashType
decl_stmt|;
comment|/** Hash Function */
specifier|protected
specifier|final
name|Hash
name|hash
decl_stmt|;
comment|/** Keys currently in the bloom */
specifier|protected
name|int
name|keyCount
decl_stmt|;
comment|/** Max Keys expected for the bloom */
specifier|protected
name|int
name|maxKeys
decl_stmt|;
comment|/** Bloom bits */
specifier|protected
name|ByteBuffer
name|bloom
decl_stmt|;
comment|/** The type of bloom */
specifier|protected
name|BloomType
name|bloomType
decl_stmt|;
comment|/**    * Loads bloom filter meta data from file input.    * @param meta stored bloom meta data    * @throws IllegalArgumentException meta data is invalid    */
specifier|public
name|BloomFilterChunk
parameter_list|(
name|DataInput
name|meta
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|this
operator|.
name|byteSize
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashCount
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashType
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyCount
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|this
operator|.
name|keyCount
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|this
operator|.
name|hashType
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid hash type: "
operator|+
name|hashType
argument_list|)
throw|;
block|}
name|sanityCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Computes the error rate for this Bloom filter, taking into account the    * actual number of hash functions and keys inserted. The return value of    * this function changes as a Bloom filter is being populated. Used for    * reporting the actual error rate of compound Bloom filters when writing    * them out.    *    * @return error rate for this particular Bloom filter    */
specifier|public
name|double
name|actualErrorRate
parameter_list|()
block|{
return|return
name|BloomFilterUtil
operator|.
name|actualErrorRate
argument_list|(
name|keyCount
argument_list|,
name|byteSize
operator|*
literal|8
argument_list|,
name|hashCount
argument_list|)
return|;
block|}
specifier|public
name|BloomFilterChunk
parameter_list|(
name|int
name|hashType
parameter_list|,
name|BloomType
name|bloomType
parameter_list|)
block|{
name|this
operator|.
name|hashType
operator|=
name|hashType
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|hashType
argument_list|)
expr_stmt|;
name|this
operator|.
name|bloomType
operator|=
name|bloomType
expr_stmt|;
block|}
comment|/**    * Determines&amp; initializes bloom filter meta data from user config. Call    * {@link #allocBloom()} to allocate bloom filter data.    *    * @param maxKeys Maximum expected number of keys that will be stored in this    *          bloom    * @param errorRate Desired false positive error rate. Lower rate = more    *          storage required    * @param hashType Type of hash function to use    * @param foldFactor When finished adding entries, you may be able to 'fold'    *          this bloom to save space. Tradeoff potentially excess bytes in    *          bloom for ability to fold if keyCount is exponentially greater    *          than maxKeys.    * @throws IllegalArgumentException    */
comment|// Used only in testcases
specifier|public
name|BloomFilterChunk
parameter_list|(
name|int
name|maxKeys
parameter_list|,
name|double
name|errorRate
parameter_list|,
name|int
name|hashType
parameter_list|,
name|int
name|foldFactor
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|hashType
argument_list|,
name|BloomType
operator|.
name|ROW
argument_list|)
expr_stmt|;
name|long
name|bitSize
init|=
name|BloomFilterUtil
operator|.
name|computeBitSize
argument_list|(
name|maxKeys
argument_list|,
name|errorRate
argument_list|)
decl_stmt|;
name|hashCount
operator|=
name|BloomFilterUtil
operator|.
name|optimalFunctionCount
argument_list|(
name|maxKeys
argument_list|,
name|bitSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|maxKeys
expr_stmt|;
comment|// increase byteSize so folding is possible
name|byteSize
operator|=
name|BloomFilterUtil
operator|.
name|computeFoldableByteSize
argument_list|(
name|bitSize
argument_list|,
name|foldFactor
argument_list|)
expr_stmt|;
name|sanityCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates another similar Bloom filter. Does not copy the actual bits, and    * sets the new filter's key count to zero.    *    * @return a Bloom filter with the same configuration as this    */
specifier|public
name|BloomFilterChunk
name|createAnother
parameter_list|()
block|{
name|BloomFilterChunk
name|bbf
init|=
operator|new
name|BloomFilterChunk
argument_list|(
name|hashType
argument_list|,
name|this
operator|.
name|bloomType
argument_list|)
decl_stmt|;
name|bbf
operator|.
name|byteSize
operator|=
name|byteSize
expr_stmt|;
name|bbf
operator|.
name|hashCount
operator|=
name|hashCount
expr_stmt|;
name|bbf
operator|.
name|maxKeys
operator|=
name|maxKeys
expr_stmt|;
return|return
name|bbf
return|;
block|}
specifier|public
name|void
name|allocBloom
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|bloom
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can only create bloom once."
argument_list|)
throw|;
block|}
name|this
operator|.
name|bloom
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|this
operator|.
name|byteSize
argument_list|)
expr_stmt|;
assert|assert
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
assert|;
block|}
name|void
name|sanityCheck
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
literal|0
operator|>=
name|this
operator|.
name|byteSize
operator|||
name|this
operator|.
name|byteSize
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid byteSize: "
operator|+
name|this
operator|.
name|byteSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|hashCount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Hash function count must be> 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|hash
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hashType must be known"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|keyCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must have positive keyCount"
argument_list|)
throw|;
block|}
block|}
name|void
name|bloomCheck
parameter_list|(
name|ByteBuffer
name|bloom
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|byteSize
operator|!=
name|bloom
operator|.
name|limit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured bloom length should match actual length"
argument_list|)
throw|;
block|}
block|}
comment|// Used only by tests
name|void
name|add
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|/*      * For faster hashing, use combinatorial generation      * http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf      */
name|HashKey
argument_list|<
name|byte
index|[]
argument_list|>
name|hashKey
init|=
operator|new
name|ByteArrayHashKey
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|hash1
init|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash2
init|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
name|hash1
argument_list|)
decl_stmt|;
name|setHashLoc
argument_list|(
name|hash1
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
comment|/*      * For faster hashing, use combinatorial generation      * http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf      */
name|int
name|hash1
decl_stmt|;
name|int
name|hash2
decl_stmt|;
name|HashKey
argument_list|<
name|Cell
argument_list|>
name|hashKey
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|bloomType
operator|==
name|BloomType
operator|.
name|ROW
condition|)
block|{
name|hashKey
operator|=
operator|new
name|RowBloomHashKey
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|hash1
operator|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hash2
operator|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
name|hash1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashKey
operator|=
operator|new
name|RowColBloomHashKey
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|hash1
operator|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hash2
operator|=
name|this
operator|.
name|hash
operator|.
name|hash
argument_list|(
name|hashKey
argument_list|,
name|hash1
argument_list|)
expr_stmt|;
block|}
name|setHashLoc
argument_list|(
name|hash1
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHashLoc
parameter_list|(
name|int
name|hash1
parameter_list|,
name|int
name|hash2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|hashCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|hashLoc
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|hash1
operator|+
name|i
operator|*
name|hash2
operator|)
operator|%
operator|(
name|this
operator|.
name|byteSize
operator|*
literal|8
operator|)
argument_list|)
decl_stmt|;
name|set
argument_list|(
name|hashLoc
argument_list|)
expr_stmt|;
block|}
operator|++
name|this
operator|.
name|keyCount
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
comment|/** Private helpers */
comment|/**    * Set the bit at the specified index to 1.    *    * @param pos index of bit    */
name|void
name|set
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
name|int
name|bytePos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|/
literal|8
argument_list|)
decl_stmt|;
name|int
name|bitPos
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|%
literal|8
argument_list|)
decl_stmt|;
name|byte
name|curByte
init|=
name|bloom
operator|.
name|get
argument_list|(
name|bytePos
argument_list|)
decl_stmt|;
name|curByte
operator||=
name|BloomFilterUtil
operator|.
name|bitvals
index|[
name|bitPos
index|]
expr_stmt|;
name|bloom
operator|.
name|put
argument_list|(
name|bytePos
argument_list|,
name|curByte
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if bit at specified index is 1.    *    * @param pos index of bit    * @return true if bit at specified index is 1, false if 0.    */
specifier|static
name|boolean
name|get
parameter_list|(
name|int
name|pos
parameter_list|,
name|ByteBuffer
name|bloomBuf
parameter_list|,
name|int
name|bloomOffset
parameter_list|)
block|{
name|int
name|bytePos
init|=
name|pos
operator|>>
literal|3
decl_stmt|;
comment|//pos / 8
name|int
name|bitPos
init|=
name|pos
operator|&
literal|0x7
decl_stmt|;
comment|//pos % 8
comment|// TODO access this via Util API which can do Unsafe access if possible(?)
name|byte
name|curByte
init|=
name|bloomBuf
operator|.
name|get
argument_list|(
name|bloomOffset
operator|+
name|bytePos
argument_list|)
decl_stmt|;
name|curByte
operator|&=
name|BloomFilterUtil
operator|.
name|bitvals
index|[
name|bitPos
index|]
expr_stmt|;
return|return
operator|(
name|curByte
operator|!=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getKeyCount
parameter_list|()
block|{
return|return
name|keyCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxKeys
parameter_list|()
block|{
return|return
name|maxKeys
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getByteSize
parameter_list|()
block|{
return|return
name|byteSize
return|;
block|}
specifier|public
name|int
name|getHashType
parameter_list|()
block|{
return|return
name|hashType
return|;
block|}
specifier|public
name|void
name|compactBloom
parameter_list|()
block|{
comment|// see if the actual size is exponentially smaller than expected.
if|if
condition|(
name|this
operator|.
name|keyCount
operator|>
literal|0
operator|&&
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|int
name|pieces
init|=
literal|1
decl_stmt|;
name|int
name|newByteSize
init|=
operator|(
name|int
operator|)
name|this
operator|.
name|byteSize
decl_stmt|;
name|int
name|newMaxKeys
init|=
name|this
operator|.
name|maxKeys
decl_stmt|;
comment|// while exponentially smaller& folding is lossless
while|while
condition|(
operator|(
name|newByteSize
operator|&
literal|1
operator|)
operator|==
literal|0
operator|&&
name|newMaxKeys
operator|>
operator|(
name|this
operator|.
name|keyCount
operator|<<
literal|1
operator|)
condition|)
block|{
name|pieces
operator|<<=
literal|1
expr_stmt|;
name|newByteSize
operator|>>=
literal|1
expr_stmt|;
name|newMaxKeys
operator|>>=
literal|1
expr_stmt|;
block|}
comment|// if we should fold these into pieces
if|if
condition|(
name|pieces
operator|>
literal|1
condition|)
block|{
name|byte
index|[]
name|array
init|=
name|this
operator|.
name|bloom
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|this
operator|.
name|bloom
operator|.
name|arrayOffset
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|newByteSize
decl_stmt|;
name|int
name|off
init|=
name|end
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|1
init|;
name|p
operator|<
name|pieces
condition|;
operator|++
name|p
control|)
block|{
for|for
control|(
name|int
name|pos
init|=
name|start
init|;
name|pos
operator|<
name|end
condition|;
operator|++
name|pos
control|)
block|{
name|array
index|[
name|pos
index|]
operator||=
name|array
index|[
name|off
operator|++
index|]
expr_stmt|;
block|}
block|}
comment|// folding done, only use a subset of this array
name|this
operator|.
name|bloom
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|this
operator|.
name|bloom
operator|.
name|limit
argument_list|(
name|newByteSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|bloom
operator|=
name|this
operator|.
name|bloom
operator|.
name|slice
argument_list|()
expr_stmt|;
name|this
operator|.
name|byteSize
operator|=
name|newByteSize
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|newMaxKeys
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes just the bloom filter to the output array    * @param out OutputStream to place bloom    * @throws IOException Error writing bloom array    */
specifier|public
name|void
name|writeBloom
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|bloom
operator|.
name|hasArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only writes ByteBuffer with underlying array."
argument_list|)
throw|;
block|}
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|bloom
operator|.
name|array
argument_list|()
argument_list|,
name|this
operator|.
name|bloom
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|this
operator|.
name|bloom
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getHashCount
parameter_list|()
block|{
return|return
name|hashCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|BloomFilterUtil
operator|.
name|toString
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

