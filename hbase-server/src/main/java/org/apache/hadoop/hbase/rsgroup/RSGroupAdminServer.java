begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStateNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Service to support Region Server Grouping (HBase-6721).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RSGroupAdminServer
implements|implements
name|RSGroupAdmin
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RSGroupAdminServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
init|=
literal|"should keep at least "
operator|+
literal|"one server in 'default' RSGroup."
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|private
specifier|final
name|RSGroupInfoManager
name|rsGroupInfoManager
decl_stmt|;
comment|/** Define the config key of retries threshold when movements failed */
comment|//made package private for testing
specifier|static
specifier|final
name|String
name|FAILED_MOVE_MAX_RETRY
init|=
literal|"hbase.rsgroup.move.max.retry"
decl_stmt|;
comment|/** Define the default number of retries */
comment|//made package private for testing
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RETRY_VALUE
init|=
literal|50
decl_stmt|;
specifier|private
name|int
name|moveMaxRetry
decl_stmt|;
specifier|public
name|RSGroupAdminServer
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|RSGroupInfoManager
name|rsGroupInfoManager
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|rsGroupInfoManager
operator|=
name|rsGroupInfoManager
expr_stmt|;
name|this
operator|.
name|moveMaxRetry
operator|=
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|FAILED_MOVE_MAX_RETRY
argument_list|,
name|DEFAULT_MAX_RETRY_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rsGroupInfoManager
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkOnlineServersOnly
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|ConstraintException
block|{
comment|// This uglyness is because we only have Address, not ServerName.
comment|// Online servers are keyed by ServerName.
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|onlineServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Address
name|address
range|:
name|servers
control|)
block|{
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is not an online server in 'default' RSGroup."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Check passed name. Fail if nulls or if corresponding RSGroupInfo not found.    * @return The RSGroupInfo named<code>name</code>    */
specifier|private
name|RSGroupInfo
name|getAndCheckRSGroupInfo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup cannot be null."
argument_list|)
throw|;
block|}
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup does not exist: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|rsGroupInfo
return|;
block|}
comment|/**    * @return List of Regions associated with this<code>server</code>.    */
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegions
parameter_list|(
specifier|final
name|Address
name|server
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|el
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|addRegion
argument_list|(
name|regions
argument_list|,
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RegionStateNode
name|state
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
if|if
condition|(
name|state
operator|.
name|getRegionLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|state
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|addRegion
argument_list|(
name|regions
argument_list|,
name|state
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|void
name|addRegion
parameter_list|(
specifier|final
name|LinkedList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|RegionInfo
name|hri
parameter_list|)
block|{
comment|// If meta, move it last otherwise other unassigns fail because meta is not
comment|// online for them to update state in. This is dodgy. Needs to be made more
comment|// robust. See TODO below.
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|regions
operator|.
name|addLast
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regions
operator|.
name|addFirst
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Move every region from servers which are currently located on these servers, but should not be    * located there.    * @param servers the servers that will move to new group    * @param targetGroupName the target group name    * @throws IOException if moving the server and tables fail    */
specifier|private
name|void
name|moveServerRegionsFromGroup
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroupName
parameter_list|)
throws|throws
name|IOException
block|{
name|moveRegionsBetweenGroups
argument_list|(
name|servers
argument_list|,
name|targetGroupName
argument_list|,
name|rs
lambda|->
name|getRegions
argument_list|(
name|rs
argument_list|)
argument_list|,
name|info
lambda|->
block|{
lambda|try
block|{
name|String
name|groupName
init|=
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|master
argument_list|,
name|rsGroupInfoManager
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|RSGroupInfo
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
return|return
name|groupName
operator|.
name|equals
argument_list|(
name|targetGroupName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to test group for region {} and target group {}"
argument_list|,
name|info
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
operator|,
name|rs
lambda|->
name|rs
operator|.
name|getHostname
argument_list|()
block|)
class|;
end_class

begin_function
unit|}    private
parameter_list|<
name|T
parameter_list|>
name|void
name|moveRegionsBetweenGroups
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|regionsOwners
parameter_list|,
name|String
name|targetGroupName
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegionsInfo
parameter_list|,
name|Function
argument_list|<
name|RegionInfo
argument_list|,
name|Boolean
argument_list|>
name|validation
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|getOwnerName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasRegionsToMove
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|allOwners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|regionsOwners
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedRegions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|IOException
name|toThrow
init|=
literal|null
decl_stmt|;
do|do
block|{
name|hasRegionsToMove
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iter
init|=
name|allOwners
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|T
name|owner
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Get regions that are associated with this server and filter regions by group tables.
for|for
control|(
name|RegionInfo
name|region
range|:
name|getRegionsInfo
operator|.
name|apply
argument_list|(
name|owner
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|validation
operator|.
name|apply
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving region {}, which do not belong to RSGroup {}"
argument_list|,
name|region
operator|.
name|getShortNameToLog
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|move
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|failedRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Move region {} from group failed, will retry, current retry time is {}"
argument_list|,
name|region
operator|.
name|getShortNameToLog
argument_list|()
argument_list|,
name|retry
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|toThrow
operator|=
name|ioe
expr_stmt|;
name|failedRegions
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|region
argument_list|)
operator|.
name|isFailedOpen
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|hasRegionsToMove
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasRegionsToMove
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No more regions to move from {} to RSGroup {}"
argument_list|,
name|getOwnerName
operator|.
name|apply
argument_list|(
name|owner
argument_list|)
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|retry
operator|++
expr_stmt|;
try|try
block|{
name|rsGroupInfoManager
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|hasRegionsToMove
operator|&&
name|retry
operator|<=
name|moveMaxRetry
condition|)
do|;
comment|//has up to max retry time or there are no more regions to move
if|if
condition|(
name|hasRegionsToMove
condition|)
block|{
comment|// print failed moved regions, for later process conveniently
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"move regions for group %s failed, failed regions: %s"
argument_list|,
name|targetGroupName
argument_list|,
name|failedRegions
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|msg
operator|+
literal|", just record the last failed region's cause, more details in server log"
argument_list|,
name|toThrow
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The list of servers to move cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// For some reason this difference between null servers and isEmpty is important distinction.
comment|// TODO. Why? Stuff breaks if I equate them.
return|return;
block|}
comment|//check target group
name|getAndCheckRSGroupInfo
argument_list|(
name|targetGroupName
argument_list|)
expr_stmt|;
comment|// Hold a lock on the manager instance while moving servers to prevent
comment|// another writer changing our state while we are working.
synchronized|synchronized
init|(
name|rsGroupInfoManager
init|)
block|{
comment|// Presume first server's source group. Later ensure all servers are from this group.
name|Address
name|firstServer
init|=
name|servers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|srcGrp
init|=
name|rsGroupInfoManager
operator|.
name|getRSGroupOfServer
argument_list|(
name|firstServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcGrp
operator|==
literal|null
condition|)
block|{
comment|// Be careful. This exception message is tested for in TestRSGroupsBase...
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Source RSGroup for server "
operator|+
name|firstServer
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
comment|// Only move online servers (when moving from 'default') or servers from other
comment|// groups. This prevents bogus servers from entering groups
if|if
condition|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|servers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
argument_list|)
throw|;
block|}
name|checkOnlineServersOnly
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all servers are of same rsgroup.
for|for
control|(
name|Address
name|server
range|:
name|servers
control|)
block|{
name|String
name|tmpGroup
init|=
name|rsGroupInfoManager
operator|.
name|getRSGroupOfServer
argument_list|(
name|server
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tmpGroup
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Move server request should only come from one source "
operator|+
literal|"RSGroup. Expecting only "
operator|+
name|srcGrp
operator|.
name|getName
argument_list|()
operator|+
literal|" but contains "
operator|+
name|tmpGroup
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|servers
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// check if there are still tables reference this group
for|for
control|(
name|TableDescriptor
name|td
range|:
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|optGroupName
operator|.
name|isPresent
argument_list|()
operator|&&
name|optGroupName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Cannot leave a RSGroup "
operator|+
name|srcGrp
operator|.
name|getName
argument_list|()
operator|+
literal|" that contains tables('"
operator|+
name|td
operator|.
name|getTableName
argument_list|()
operator|+
literal|"' at least) without servers to host them."
argument_list|)
throw|;
block|}
block|}
block|}
comment|// MovedServers may be< passed in 'servers'.
name|Set
argument_list|<
name|Address
argument_list|>
name|movedServers
init|=
name|rsGroupInfoManager
operator|.
name|moveServers
argument_list|(
name|servers
argument_list|,
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
decl_stmt|;
name|moveServerRegionsFromGroup
argument_list|(
name|movedServers
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Move servers done: {} => {}"
argument_list|,
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addRSGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|rsGroupInfoManager
operator|.
name|addRSGroup
argument_list|(
operator|new
name|RSGroupInfo
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeRSGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Hold a lock on the manager instance while moving servers to prevent
comment|// another writer changing our state while we are working.
synchronized|synchronized
init|(
name|rsGroupInfoManager
init|)
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|rsGroupInfoManager
operator|.
name|getRSGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|int
name|serverCount
init|=
name|rsGroupInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" has "
operator|+
name|serverCount
operator|+
literal|" servers; you must remove these servers from the RSGroup before"
operator|+
literal|" the RSGroup can be removed."
argument_list|)
throw|;
block|}
for|for
control|(
name|TableDescriptor
name|td
range|:
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|td
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|map
argument_list|(
name|name
operator|::
name|equals
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" is already referenced by "
operator|+
name|td
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; you must remove all the tables from the rsgroup before "
operator|+
literal|"the rsgroup can be removed."
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
name|String
name|nsGroup
init|=
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsGroup
operator|!=
literal|null
operator|&&
name|nsGroup
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" is referenced by namespace: "
operator|+
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|rsGroupInfoManager
operator|.
name|removeRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|balanceRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerManager
name|serverManager
init|=
name|master
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|master
operator|.
name|getLoadBalancer
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|balancer
init|)
block|{
comment|// If balance not true, don't run balancer.
if|if
condition|(
operator|!
operator|(
operator|(
name|HMaster
operator|)
name|master
operator|)
operator|.
name|isBalancerOn
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup does not exist: "
operator|+
name|groupName
argument_list|)
throw|;
block|}
comment|// Only allow one balance run at at time.
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|groupRIT
init|=
name|rsGroupGetRegionsInTransition
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupRIT
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because {} region(s) in transition: {}"
argument_list|,
name|groupRIT
operator|.
name|size
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because processing dead regionserver(s): {}"
argument_list|,
name|serverManager
operator|.
name|getDeadServers
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// We balance per group instead of per table
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|assignmentsByTable
init|=
name|getRSGroupAssignmentsByTable
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|tableMap
range|:
name|assignmentsByTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating partial plan for table {} : {}"
argument_list|,
name|tableMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialPlans
init|=
name|balancer
operator|.
name|balanceCluster
argument_list|(
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partial plan for table {} : {}"
argument_list|,
name|tableMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|partialPlans
argument_list|)
expr_stmt|;
if|if
condition|(
name|partialPlans
operator|!=
literal|null
condition|)
block|{
name|plans
operator|.
name|addAll
argument_list|(
name|partialPlans
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|balancerRan
init|=
operator|!
name|plans
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|balancerRan
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance {} starting with plan count: {}"
argument_list|,
name|groupName
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|executeRegionPlansWithThrottling
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance "
operator|+
name|groupName
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
return|return
name|balancerRan
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|listRSGroups
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rsGroupInfoManager
operator|.
name|listRSGroups
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupOfServer
parameter_list|(
name|Address
name|hostPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rsGroupInfoManager
operator|.
name|getRSGroupOfServer
argument_list|(
name|hostPort
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The set of servers to remove cannot be null or empty."
argument_list|)
throw|;
block|}
comment|// Hold a lock on the manager instance while moving servers to prevent
comment|// another writer changing our state while we are working.
synchronized|synchronized
init|(
name|rsGroupInfoManager
init|)
block|{
comment|// check the set of servers
name|checkForDeadOrOnlineServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|rsGroupInfoManager
operator|.
name|removeServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove decommissioned servers {} from RSGroup done"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|isTableInGroup
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tablesInGroupCache
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|master
argument_list|,
name|rsGroupInfoManager
argument_list|,
name|tableName
argument_list|)
operator|.
name|map
argument_list|(
name|RSGroupInfo
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|tablesInGroupCache
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rsGroupGetRegionsInTransition
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rit
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|regionNode
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
name|TableName
name|tn
init|=
name|regionNode
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTableInGroup
argument_list|(
name|tn
argument_list|,
name|groupName
argument_list|,
name|tablesInGroupCache
argument_list|)
condition|)
block|{
name|rit
operator|.
name|put
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|regionNode
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rit
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getRSGroupAssignmentsByTable
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|region
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|ServerName
name|server
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTableInGroup
argument_list|(
name|tn
argument_list|,
name|groupName
argument_list|,
name|tablesInGroupCache
argument_list|)
condition|)
block|{
name|result
operator|.
name|computeIfAbsent
argument_list|(
name|tn
argument_list|,
name|k
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|computeIfAbsent
argument_list|(
name|server
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rsGroupInfo
operator|.
name|containsServer
argument_list|(
name|serverName
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|map
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|serverName
argument_list|,
name|k
lambda|->
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Check if the set of servers are belong to dead servers list or online servers list.    * @param servers servers to remove    */
end_comment

begin_function
specifier|private
name|void
name|checkForDeadOrOnlineServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|ConstraintException
block|{
comment|// This uglyness is because we only have Address, not ServerName.
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|drainingServers
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDrainingServersList
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Only online but not decommissioned servers are really online
if|if
condition|(
operator|!
name|drainingServers
operator|.
name|contains
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|onlineServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Address
argument_list|>
name|deadServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|copyServerNames
argument_list|()
control|)
block|{
name|deadServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Address
name|address
range|:
name|servers
control|)
block|{
if|if
condition|(
name|onlineServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is an online server, not allowed to remove."
argument_list|)
throw|;
block|}
if|if
condition|(
name|deadServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is on the dead servers list,"
operator|+
literal|" Maybe it will come back again, not allowed to remove."
argument_list|)
throw|;
block|}
block|}
block|}
end_function

unit|}
end_unit

