begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureFairRunQueues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureRunnableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
operator|.
name|TableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|TableProcedureInterface
operator|.
name|TableOperationType
import|;
end_import

begin_comment
comment|/**  * ProcedureRunnableSet for the Master Procedures.  * This RunnableSet tries to provide to the ProcedureExecutor procedures  * that can be executed without having to wait on a lock.  * Most of the master operations can be executed concurrently, if the they  * are operating on different tables (e.g. two create table can be performed  * at the same, time assuming table A and table B).  *  * Each procedure should implement an interface providing information for this queue.  * for example table related procedures should implement TableProcedureInterface.  * each procedure will be pushed in its own queue, and based on the operation type  * we may take smarter decision. e.g. we can abort all the operations preceding  * a delete table, or similar.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MasterProcedureQueue
implements|implements
name|ProcedureRunnableSet
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterProcedureQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProcedureFairRunQueues
argument_list|<
name|TableName
argument_list|,
name|RunQueue
argument_list|>
name|fairq
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|waitCond
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TableLockManager
name|lockManager
decl_stmt|;
specifier|private
specifier|final
name|int
name|metaTablePriority
decl_stmt|;
specifier|private
specifier|final
name|int
name|userTablePriority
decl_stmt|;
specifier|private
specifier|final
name|int
name|sysTablePriority
decl_stmt|;
specifier|private
name|int
name|queueSize
decl_stmt|;
specifier|public
name|MasterProcedureQueue
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TableLockManager
name|lockManager
parameter_list|)
block|{
name|this
operator|.
name|fairq
operator|=
operator|new
name|ProcedureFairRunQueues
argument_list|<
name|TableName
argument_list|,
name|RunQueue
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockManager
operator|=
name|lockManager
expr_stmt|;
comment|// TODO: should this be part of the HTD?
name|metaTablePriority
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.procedure.queue.meta.table.priority"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sysTablePriority
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.procedure.queue.system.table.priority"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|userTablePriority
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.procedure.queue.user.table.priority"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFront
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRunQueueOrCreate
argument_list|(
name|proc
argument_list|)
operator|.
name|addFront
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|queueSize
operator|++
expr_stmt|;
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addBack
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRunQueueOrCreate
argument_list|(
name|proc
argument_list|)
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|queueSize
operator|++
expr_stmt|;
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|yield
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|addFront
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
literal|"WA_AWAIT_NOT_IN_LOOP"
argument_list|)
specifier|public
name|Long
name|poll
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|queueSize
operator|==
literal|0
condition|)
block|{
name|waitCond
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|queueSize
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|RunQueue
name|queue
init|=
name|fairq
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
operator|&&
name|queue
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|queueSize
operator|--
expr_stmt|;
return|return
name|queue
operator|.
name|poll
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|waitCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|fairq
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueSize
operator|=
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|queueSize
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
literal|"MasterProcedureQueue size="
operator|+
name|queueSize
operator|+
literal|": "
operator|+
name|fairq
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|completionCleanup
parameter_list|(
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|instanceof
name|TableProcedureInterface
condition|)
block|{
name|TableProcedureInterface
name|iProcTable
init|=
operator|(
name|TableProcedureInterface
operator|)
name|proc
decl_stmt|;
name|boolean
name|tableDeleted
decl_stmt|;
if|if
condition|(
name|proc
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|IOException
name|procEx
init|=
name|proc
operator|.
name|getException
argument_list|()
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
name|iProcTable
operator|.
name|getTableOperationType
argument_list|()
operator|==
name|TableOperationType
operator|.
name|CREATE
condition|)
block|{
comment|// create failed because the table already exist
name|tableDeleted
operator|=
operator|!
operator|(
name|procEx
operator|instanceof
name|TableExistsException
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// the operation failed because the table does not exist
name|tableDeleted
operator|=
operator|(
name|procEx
operator|instanceof
name|TableNotFoundException
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// the table was deleted
name|tableDeleted
operator|=
operator|(
name|iProcTable
operator|.
name|getTableOperationType
argument_list|()
operator|==
name|TableOperationType
operator|.
name|DELETE
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|tableDeleted
condition|)
block|{
name|markTableAsDeleted
argument_list|(
name|iProcTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|RunQueue
name|getRunQueueOrCreate
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|instanceof
name|TableProcedureInterface
condition|)
block|{
specifier|final
name|TableName
name|table
init|=
operator|(
operator|(
name|TableProcedureInterface
operator|)
name|proc
operator|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
return|return
name|getRunQueueOrCreate
argument_list|(
name|table
argument_list|)
return|;
block|}
comment|// TODO: at the moment we only have Table procedures
comment|// if you are implementing a non-table procedure, you have two option create
comment|// a group for all the non-table procedures or try to find a key for your
comment|// non-table procedure and implement something similar to the TableRunQueue.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RQs for non-table procedures are not implemented yet"
argument_list|)
throw|;
block|}
specifier|private
name|TableRunQueue
name|getRunQueueOrCreate
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
specifier|final
name|TableRunQueue
name|queue
init|=
name|getRunQueue
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
return|return
name|queue
return|;
return|return
operator|(
name|TableRunQueue
operator|)
name|fairq
operator|.
name|add
argument_list|(
name|table
argument_list|,
name|createTableRunQueue
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|TableRunQueue
name|createTableRunQueue
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
name|int
name|priority
init|=
name|userTablePriority
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
name|priority
operator|=
name|metaTablePriority
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|priority
operator|=
name|sysTablePriority
expr_stmt|;
block|}
return|return
operator|new
name|TableRunQueue
argument_list|(
name|priority
argument_list|)
return|;
block|}
specifier|private
name|TableRunQueue
name|getRunQueue
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
return|return
operator|(
name|TableRunQueue
operator|)
name|fairq
operator|.
name|get
argument_list|(
name|table
argument_list|)
return|;
block|}
comment|/**    * Try to acquire the read lock on the specified table.    * other read operations in the table-queue may be executed concurrently,    * otherwise they have to wait until all the read-locks are released.    * @param table Table to lock    * @param purpose Human readable reason for locking the table    * @return true if we were able to acquire the lock on the table, otherwise false.    */
specifier|public
name|boolean
name|tryAcquireTableRead
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|String
name|purpose
parameter_list|)
block|{
return|return
name|getRunQueueOrCreate
argument_list|(
name|table
argument_list|)
operator|.
name|tryRead
argument_list|(
name|lockManager
argument_list|,
name|table
argument_list|,
name|purpose
argument_list|)
return|;
block|}
comment|/**    * Release the read lock taken with tryAcquireTableRead()    * @param table the name of the table that has the read lock    */
specifier|public
name|void
name|releaseTableRead
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
name|getRunQueue
argument_list|(
name|table
argument_list|)
operator|.
name|releaseRead
argument_list|(
name|lockManager
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to acquire the write lock on the specified table.    * other operations in the table-queue will be executed after the lock is released.    * @param table Table to lock    * @param purpose Human readable reason for locking the table    * @return true if we were able to acquire the lock on the table, otherwise false.    */
specifier|public
name|boolean
name|tryAcquireTableWrite
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|String
name|purpose
parameter_list|)
block|{
return|return
name|getRunQueueOrCreate
argument_list|(
name|table
argument_list|)
operator|.
name|tryWrite
argument_list|(
name|lockManager
argument_list|,
name|table
argument_list|,
name|purpose
argument_list|)
return|;
block|}
comment|/**    * Release the write lock taken with tryAcquireTableWrite()    * @param table the name of the table that has the write lock    */
specifier|public
name|void
name|releaseTableWrite
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
name|getRunQueue
argument_list|(
name|table
argument_list|)
operator|.
name|releaseWrite
argument_list|(
name|lockManager
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to remove the queue and the table-lock of the specified table.    * If there are new operations pending (e.g. a new create),    * the remove will not be performed.    * @param table the name of the table that should be marked as deleted    * @return true if deletion succeeded, false otherwise meaning that there are    *    other new operations pending for that table (e.g. a new create).    */
specifier|protected
name|boolean
name|markTableAsDeleted
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
name|TableRunQueue
name|queue
init|=
name|getRunQueue
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|queue
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|fairq
operator|.
name|remove
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Remove the table lock
try|try
block|{
name|lockManager
operator|.
name|tableDeleted
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received exception from TableLockManager.tableDeleted:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//not critical
block|}
block|}
else|else
block|{
comment|// TODO: If there are no create, we can drop all the other ops
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
interface|interface
name|RunQueue
extends|extends
name|ProcedureFairRunQueues
operator|.
name|FairObject
block|{
name|void
name|addFront
parameter_list|(
name|Procedure
name|proc
parameter_list|)
function_decl|;
name|void
name|addBack
parameter_list|(
name|Procedure
name|proc
parameter_list|)
function_decl|;
name|Long
name|poll
parameter_list|()
function_decl|;
name|boolean
name|isLocked
parameter_list|()
function_decl|;
block|}
comment|/**    * Run Queue for a Table. It contains a read-write lock that is used by the    * MasterProcedureQueue to decide if we should fetch an item from this queue    * or skip to another one which will be able to run without waiting for locks.    */
specifier|private
specifier|static
class|class
name|TableRunQueue
implements|implements
name|RunQueue
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|Long
argument_list|>
name|runnables
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|private
name|TableLock
name|tableLock
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|wlock
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|rlock
init|=
literal|0
decl_stmt|;
specifier|public
name|TableRunQueue
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFront
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|runnables
operator|.
name|addFirst
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Improve run-queue push with TableProcedureInterface.getType()
comment|//       we can take smart decisions based on the type of the operation (e.g. create/delete)
annotation|@
name|Override
specifier|public
name|void
name|addBack
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|runnables
operator|.
name|addLast
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|poll
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|poll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
operator|!
name|wlock
operator|&&
operator|!
name|runnables
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|wlock
operator|||
name|rlock
operator|>
literal|0
return|;
block|}
block|}
specifier|public
name|boolean
name|tryRead
parameter_list|(
specifier|final
name|TableLockManager
name|lockManager
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|String
name|purpose
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|wlock
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Take zk-read-lock
name|tableLock
operator|=
name|lockManager
operator|.
name|readLock
argument_list|(
name|tableName
argument_list|,
name|purpose
argument_list|)
expr_stmt|;
try|try
block|{
name|tableLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed acquire read lock on "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tableLock
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
name|rlock
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|releaseRead
parameter_list|(
specifier|final
name|TableLockManager
name|lockManager
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|releaseTableLock
argument_list|(
name|lockManager
argument_list|,
name|rlock
operator|==
literal|1
argument_list|)
expr_stmt|;
name|rlock
operator|--
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|tryWrite
parameter_list|(
specifier|final
name|TableLockManager
name|lockManager
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|String
name|purpose
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|wlock
operator|||
name|rlock
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Take zk-write-lock
name|tableLock
operator|=
name|lockManager
operator|.
name|writeLock
argument_list|(
name|tableName
argument_list|,
name|purpose
argument_list|)
expr_stmt|;
try|try
block|{
name|tableLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed acquire write lock on "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tableLock
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
name|wlock
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|releaseWrite
parameter_list|(
specifier|final
name|TableLockManager
name|lockManager
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|releaseTableLock
argument_list|(
name|lockManager
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|wlock
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|releaseTableLock
parameter_list|(
specifier|final
name|TableLockManager
name|lockManager
parameter_list|,
name|boolean
name|reset
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|tableLock
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|reset
condition|)
block|{
name|tableLock
operator|=
literal|null
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not release the table write-lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

