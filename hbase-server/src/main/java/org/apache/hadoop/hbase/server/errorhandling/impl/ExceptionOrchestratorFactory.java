begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionCheckable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|FaultInjector
import|;
end_import

begin_comment
comment|/**  * Error factory that produces an {@link ExceptionOrchestrator}, potentially wrapped with a  * {@link FaultInjector}.  * @param<D> type for {@link ExceptionOrchestrator} that should be used  * @param<T> Type of error listener that the dispatcher from this factory can communicate  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
specifier|abstract
class|class
name|ExceptionOrchestratorFactory
parameter_list|<
name|D
extends|extends
name|ExceptionOrchestrator
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|FaultInjector
argument_list|<
name|?
argument_list|>
argument_list|>
name|faults
init|=
operator|new
name|ArrayList
argument_list|<
name|FaultInjector
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Add a fault injector that will run on checks of the {@link ExceptionCheckable} generated by    * this factory. To ensure that faults are injected, this must be called before the the handler is    * created via {@link #createErrorHandler()}.    *<p>    * Exposed for TESTING.    * @param injector fault injector to add    * @param<E> type of exception that will be thrown on checks of    *          {@link ExceptionCheckable#failOnError()} from created exception monitors    */
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|addFaultInjector
parameter_list|(
name|FaultInjector
argument_list|<
name|E
argument_list|>
name|injector
parameter_list|)
block|{
name|faults
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Complement to {@link #addFaultInjector(FaultInjector)} - removes any existing fault injectors    * set for the factory.    *<p>    * Exposed for TESTING.    */
specifier|public
specifier|static
name|void
name|clearFaults
parameter_list|()
block|{
name|faults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|final
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
decl_stmt|;
comment|/**    * @param visitor to use when building an error handler via {@link #createErrorHandler()}.    */
specifier|public
name|ExceptionOrchestratorFactory
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
block|}
comment|/**    * Create a dispatcher with a specific visitor    * @param visitor visitor to pass on error notifications to bound error listeners    * @return an error dispatcher that is passes on errors to all listening objects    */
specifier|public
specifier|final
name|D
name|createErrorHandler
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
name|D
name|handler
init|=
name|buildErrorHandler
argument_list|(
name|visitor
argument_list|)
decl_stmt|;
comment|// wrap with a fault injector, if we need to
if|if
condition|(
name|faults
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|wrapWithInjector
argument_list|(
name|handler
argument_list|,
name|faults
argument_list|)
return|;
block|}
return|return
name|handler
return|;
block|}
comment|/**    * Create a dispatcher with a specific visitor. Uses the default visitor passed in the constructor    * @return an error dispatcher that is passes on errors to all listening objects    */
specifier|public
specifier|final
name|D
name|createErrorHandler
parameter_list|()
block|{
return|return
name|createErrorHandler
argument_list|(
name|this
operator|.
name|visitor
argument_list|)
return|;
block|}
comment|/**    * Build an error handler. This will be wrapped via    * {@link #wrapWithInjector(ErrorMonitorable, List)} if there are fault injectors present.    * @return an error handler    */
specifier|protected
specifier|abstract
name|D
name|buildErrorHandler
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
function_decl|;
comment|/**    * Wrap the built error handler with an error injector. Subclasses should override if they need    * custom error injection. Generally, this will just wrap calls to&ltD&gt by first checking the    * {@link #faults} that were dynamically injected and then, if the {@link FaultInjector} didn't    * inject a fault, that actual methods are called.    *<p>    * This method will only be called if there are fault injectors present. Otherwise, the handler    * will just be built via {@link #buildErrorHandler(ExceptionVisitor)}.    * @param delegate built delegate to wrap with injector checking    * @param injectors injectors that should be checked    * @return a&ltD&gt that also does {@link FaultInjector} checking    */
specifier|protected
specifier|abstract
name|D
name|wrapWithInjector
parameter_list|(
name|D
name|delegate
parameter_list|,
name|List
argument_list|<
name|FaultInjector
argument_list|<
name|?
argument_list|>
argument_list|>
name|injectors
parameter_list|)
function_decl|;
block|}
end_class

end_unit

