begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A singleton store segment factory.  * Generate concrete store segments.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|SegmentFactory
block|{
specifier|static
specifier|final
name|String
name|MSLAB_CLASS_NAME
init|=
literal|"hbase.regionserver.mslab.class"
decl_stmt|;
specifier|private
name|SegmentFactory
parameter_list|()
block|{}
specifier|private
specifier|static
name|SegmentFactory
name|instance
init|=
operator|new
name|SegmentFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|SegmentFactory
name|instance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|// create skip-list-based (non-flat) immutable segment from compacting old immutable segments
specifier|public
name|ImmutableSegment
name|createImmutableSegment
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreSegmentsIterator
name|iterator
parameter_list|)
block|{
return|return
operator|new
name|ImmutableSegment
argument_list|(
name|comparator
argument_list|,
name|iterator
argument_list|,
name|getMemStoreLAB
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|// create new flat immutable segment from compacting old immutable segments
specifier|public
name|ImmutableSegment
name|createImmutableSegmentByCompaction
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreSegmentsIterator
name|iterator
parameter_list|,
name|int
name|numOfCells
parameter_list|,
name|ImmutableSegment
operator|.
name|Type
name|segmentType
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|segmentType
operator|==
name|ImmutableSegment
operator|.
name|Type
operator|.
name|ARRAY_MAP_BASED
argument_list|,
literal|"wrong immutable segment type"
argument_list|)
expr_stmt|;
name|MemStoreLAB
name|memStoreLAB
init|=
name|getMemStoreLAB
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
comment|// the last parameter "false" means not to merge, but to compact the pipeline
comment|// in order to create the new segment
operator|new
name|ImmutableSegment
argument_list|(
name|comparator
argument_list|,
name|iterator
argument_list|,
name|memStoreLAB
argument_list|,
name|numOfCells
argument_list|,
name|segmentType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// create empty immutable segment
specifier|public
name|ImmutableSegment
name|createImmutableSegment
parameter_list|(
name|CellComparator
name|comparator
parameter_list|)
block|{
name|MutableSegment
name|segment
init|=
name|generateMutableSegment
argument_list|(
literal|null
argument_list|,
name|comparator
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|createImmutableSegment
argument_list|(
name|segment
argument_list|)
return|;
block|}
comment|// create immutable segment from mutable segment
specifier|public
name|ImmutableSegment
name|createImmutableSegment
parameter_list|(
name|MutableSegment
name|segment
parameter_list|)
block|{
return|return
operator|new
name|ImmutableSegment
argument_list|(
name|segment
argument_list|)
return|;
block|}
comment|// create mutable segment
specifier|public
name|MutableSegment
name|createMutableSegment
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
block|{
name|MemStoreLAB
name|memStoreLAB
init|=
name|getMemStoreLAB
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|generateMutableSegment
argument_list|(
name|conf
argument_list|,
name|comparator
argument_list|,
name|memStoreLAB
argument_list|)
return|;
block|}
comment|// create new flat immutable segment from merging old immutable segments
specifier|public
name|ImmutableSegment
name|createImmutableSegmentByMerge
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreSegmentsIterator
name|iterator
parameter_list|,
name|int
name|numOfCells
parameter_list|,
name|ImmutableSegment
operator|.
name|Type
name|segmentType
parameter_list|,
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|segments
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|segmentType
operator|==
name|ImmutableSegment
operator|.
name|Type
operator|.
name|ARRAY_MAP_BASED
argument_list|,
literal|"wrong immutable segment type"
argument_list|)
expr_stmt|;
name|MemStoreLAB
name|memStoreLAB
init|=
name|getMergedMemStoreLAB
argument_list|(
name|conf
argument_list|,
name|segments
argument_list|)
decl_stmt|;
return|return
comment|// the last parameter "true" means to merge the compaction pipeline
comment|// in order to create the new segment
operator|new
name|ImmutableSegment
argument_list|(
name|comparator
argument_list|,
name|iterator
argument_list|,
name|memStoreLAB
argument_list|,
name|numOfCells
argument_list|,
name|segmentType
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|//****** private methods to instantiate concrete store segments **********//
specifier|private
name|MutableSegment
name|generateMutableSegment
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreLAB
name|memStoreLAB
parameter_list|)
block|{
comment|// TBD use configuration to set type of segment
name|CellSet
name|set
init|=
operator|new
name|CellSet
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
return|return
operator|new
name|MutableSegment
argument_list|(
name|set
argument_list|,
name|comparator
argument_list|,
name|memStoreLAB
argument_list|)
return|;
block|}
specifier|private
name|MemStoreLAB
name|getMemStoreLAB
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MemStoreLAB
name|memStoreLAB
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|MemStoreLAB
operator|.
name|USEMSLAB_KEY
argument_list|,
name|MemStoreLAB
operator|.
name|USEMSLAB_DEFAULT
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|MSLAB_CLASS_NAME
argument_list|,
name|HeapMemStoreLAB
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|memStoreLAB
operator|=
name|ReflectionUtils
operator|.
name|instantiateWithCustomCtor
argument_list|(
name|className
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Configuration
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|conf
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|memStoreLAB
return|;
block|}
specifier|private
name|MemStoreLAB
name|getMergedMemStoreLAB
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|segments
parameter_list|)
block|{
name|List
argument_list|<
name|MemStoreLAB
argument_list|>
name|mslabs
init|=
operator|new
name|ArrayList
argument_list|<
name|MemStoreLAB
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableSegment
name|segment
range|:
name|segments
control|)
block|{
name|mslabs
operator|.
name|add
argument_list|(
name|segment
operator|.
name|getMemStoreLAB
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ImmutableMemStoreLAB
argument_list|(
name|mslabs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

