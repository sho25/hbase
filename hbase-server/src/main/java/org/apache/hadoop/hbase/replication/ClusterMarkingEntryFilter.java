begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Filters out entries with our peerClusterId (i.e. already replicated)  * and marks all other entries with our clusterID  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ClusterMarkingEntryFilter
implements|implements
name|WALEntryFilter
block|{
specifier|private
name|UUID
name|clusterId
decl_stmt|;
specifier|private
name|UUID
name|peerClusterId
decl_stmt|;
specifier|private
name|ReplicationEndpoint
name|replicationEndpoint
decl_stmt|;
comment|/**    * @param clusterId id of this cluster    * @param peerClusterId of the other cluster    * @param replicationEndpoint ReplicationEndpoint which will handle the actual replication    */
specifier|public
name|ClusterMarkingEntryFilter
parameter_list|(
name|UUID
name|clusterId
parameter_list|,
name|UUID
name|peerClusterId
parameter_list|,
name|ReplicationEndpoint
name|replicationEndpoint
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|peerClusterId
operator|=
name|peerClusterId
expr_stmt|;
name|this
operator|.
name|replicationEndpoint
operator|=
name|replicationEndpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
comment|// don't replicate if the log entries have already been consumed by the cluster
if|if
condition|(
name|replicationEndpoint
operator|.
name|canReplicateToSameCluster
argument_list|()
operator|||
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterIds
argument_list|()
operator|.
name|contains
argument_list|(
name|peerClusterId
argument_list|)
condition|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|WALKeyImpl
name|logKey
init|=
operator|(
name|WALKeyImpl
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|edit
operator|!=
literal|null
operator|&&
operator|!
name|edit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Mark that the current cluster has the change
name|logKey
operator|.
name|addClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

