begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|DefaultWALProvider
import|;
end_import

begin_comment
comment|/**  * A collection for methods used by multiple classes to backup HBase tables.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|BackupUtil
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_SEPARATOR
init|=
literal|"\001"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RECORD_SEPARATOR
init|=
literal|"\002"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOGNAME_SEPARATOR
init|=
literal|"."
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HDFS
init|=
literal|"hdfs://"
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|BackupUtil
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
comment|/**    * Set the configuration from a given one.    * @param newConf A new given configuration    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|setConf
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
name|conf
operator|=
name|newConf
expr_stmt|;
block|}
comment|/**    * Get and merge Hadoop and HBase configuration.    * @throws IOException exception    */
specifier|protected
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Loop through the RS log timestamp map for the tables, for each RS, find the min timestamp value    * for the RS among the tables.    * @param rsLogTimestampMap timestamp map    * @return the min timestamp of each RS    */
specifier|protected
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRSLogTimestampMins
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rsLogTimestampMap
parameter_list|)
block|{
if|if
condition|(
name|rsLogTimestampMap
operator|==
literal|null
operator|||
name|rsLogTimestampMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsLogTimestamptMins
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rsLogTimestampMapByRS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tableEntry
range|:
name|rsLogTimestampMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|table
init|=
name|tableEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsLogTimestamp
init|=
name|tableEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsEntry
range|:
name|rsLogTimestamp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|rs
init|=
name|rsEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|ts
init|=
name|rsEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rsLogTimestampMapByRS
operator|.
name|containsKey
argument_list|(
name|rs
argument_list|)
condition|)
block|{
name|rsLogTimestampMapByRS
operator|.
name|put
argument_list|(
name|rs
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|rsLogTimestampMapByRS
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsLogTimestampMapByRS
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|rs
range|:
name|rsLogTimestampMapByRS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|rsLogTimestamptMins
operator|.
name|put
argument_list|(
name|rs
argument_list|,
name|getMinValue
argument_list|(
name|rsLogTimestampMapByRS
operator|.
name|get
argument_list|(
name|rs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rsLogTimestamptMins
return|;
block|}
comment|/**    * Get the min value for all the Values a map.    * @param map map    * @return the min value    */
specifier|protected
specifier|static
name|String
name|getMinValue
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|String
name|minTimestamp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|timestampList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|timestampList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
name|long
name|l1
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|long
name|l2
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s2
argument_list|)
decl_stmt|;
if|if
condition|(
name|l1
operator|>
name|l2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|l1
operator|<
name|l2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The min among all the RS log timestamps will be kept in ZK.
name|minTimestamp
operator|=
name|timestampList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|minTimestamp
return|;
block|}
comment|/**    * copy out Table RegionInfo into incremental backup image need to consider move this logic into    * HBackupFileSystem    * @param backupContext backup context    * @param conf configuration    * @throws IOException exception    * @throws InterruptedException exception    */
specifier|protected
specifier|static
name|void
name|copyTableRegionInfo
parameter_list|(
name|BackupContext
name|backupContext
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// for each table in the table set, copy out the table info and region info files in the correct
comment|// directory structure
for|for
control|(
name|String
name|table
range|:
name|backupContext
operator|.
name|getTables
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to copy table info for:"
operator|+
name|table
argument_list|)
expr_stmt|;
name|TableDescriptor
name|orig
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptorFromFs
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
comment|// write a copy of descriptor to the target directory
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|backupContext
operator|.
name|getBackupStatus
argument_list|(
name|table
argument_list|)
operator|.
name|getTargetDir
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFs
init|=
name|target
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSTableDescriptors
name|descriptors
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|,
name|targetFs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|descriptors
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|target
argument_list|,
name|orig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished copying tableinfo."
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
comment|// TODO: optimize
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|regions
operator|=
name|hbadmin
operator|.
name|getTableRegions
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BackupException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// For each region, write the region info to disk
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting to write region info for table "
operator|+
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
operator|new
name|Path
argument_list|(
name|backupContext
operator|.
name|getBackupStatus
argument_list|(
name|table
argument_list|)
operator|.
name|getTargetDir
argument_list|()
argument_list|)
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|regionDir
operator|=
operator|new
name|Path
argument_list|(
name|backupContext
operator|.
name|getBackupStatus
argument_list|(
name|table
argument_list|)
operator|.
name|getTargetDir
argument_list|()
argument_list|,
name|regionDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeRegioninfoOnFilesystem
argument_list|(
name|conf
argument_list|,
name|targetFs
argument_list|,
name|regionDir
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished writing region info for table "
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write the .regioninfo file on-disk.    */
specifier|public
specifier|static
name|void
name|writeRegioninfoOnFilesystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionInfoDir
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|content
init|=
name|regionInfo
operator|.
name|toDelimitedByteArray
argument_list|()
decl_stmt|;
name|Path
name|regionInfoFile
init|=
operator|new
name|Path
argument_list|(
name|regionInfoDir
argument_list|,
literal|".regioninfo"
argument_list|)
decl_stmt|;
comment|// First check to get the permissions
name|FsPermission
name|perms
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// Write the RegionInfo file content
name|FSDataOutputStream
name|out
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|regionInfoFile
argument_list|,
name|perms
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * TODO: verify the code    * @param p path    * @return host name    * @throws IOException exception    */
specifier|protected
specifier|static
name|String
name|parseHostFromOldLog
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|n
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|n
operator|.
name|lastIndexOf
argument_list|(
name|LOGNAME_SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|n
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
return|return
name|ServerName
operator|.
name|parseHostname
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|parseHostNameFromLogFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isArchivedLogFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
name|parseHostFromOldLog
argument_list|(
name|p
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DefaultWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|p
argument_list|)
operator|.
name|getHostname
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isArchivedLogFile
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|oldLog
init|=
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
return|return
name|p
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|oldLog
argument_list|)
return|;
block|}
comment|/**    * Return WAL file name    * @param walFileName WAL file name    * @return WAL file name    * @throws IOException exception    * @throws IllegalArgumentException exception    */
specifier|public
specifier|static
name|String
name|getUniqueWALFileNamePart
parameter_list|(
name|String
name|walFileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|walFileName
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Return WAL file name    * @param p - WAL file path    * @return WAL file name    * @throws IOException exception    */
specifier|public
specifier|static
name|String
name|getUniqueWALFileNamePart
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|p
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Given the log file, parse the timestamp from the file name. The timestamp is the last number.    * @param p a path to the log file    * @return the timestamp    * @throws IOException exception    */
specifier|protected
specifier|static
name|String
name|getCreationTime
parameter_list|(
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|LOGNAME_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot parse timestamp from path "
operator|+
name|p
argument_list|)
throw|;
block|}
name|String
name|ts
init|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|ts
return|;
block|}
comment|/**    * Get the total length of files under the given directory recursively.    * @param fs The hadoop file system    * @param dir The target directory    * @return the total length of files    * @throws IOException exception    */
specifier|public
specifier|static
name|long
name|getFilesLength
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalLength
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|files
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|totalLength
operator|+=
name|getFilesLength
argument_list|(
name|fs
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalLength
operator|+=
name|fileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|totalLength
return|;
block|}
comment|/**    * Keep the record for dependency for incremental backup and history info p.s, we may be able to    * merge this class into backupImage class later    */
specifier|public
specifier|static
class|class
name|BackupCompleteData
implements|implements
name|Comparable
argument_list|<
name|BackupCompleteData
argument_list|>
block|{
specifier|private
name|String
name|startTime
decl_stmt|;
specifier|private
name|String
name|endTime
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|backupRootPath
decl_stmt|;
specifier|private
name|String
name|tableList
decl_stmt|;
specifier|private
name|String
name|backupToken
decl_stmt|;
specifier|private
name|String
name|bytesCopied
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ancestors
decl_stmt|;
specifier|private
name|boolean
name|fromExistingSnapshot
init|=
literal|false
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAncestors
parameter_list|()
block|{
if|if
condition|(
name|fromExistingSnapshot
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|this
operator|.
name|ancestors
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|ancestors
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|ancestors
return|;
block|}
specifier|public
name|void
name|addAncestor
parameter_list|(
name|String
name|backupToken
parameter_list|)
block|{
name|this
operator|.
name|getAncestors
argument_list|()
operator|.
name|add
argument_list|(
name|backupToken
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getBytesCopied
parameter_list|()
block|{
return|return
name|bytesCopied
return|;
block|}
specifier|public
name|void
name|setBytesCopied
parameter_list|(
name|String
name|bytesCopied
parameter_list|)
block|{
name|this
operator|.
name|bytesCopied
operator|=
name|bytesCopied
expr_stmt|;
block|}
specifier|public
name|String
name|getBackupToken
parameter_list|()
block|{
return|return
name|backupToken
return|;
block|}
specifier|public
name|void
name|setBackupToken
parameter_list|(
name|String
name|backupToken
parameter_list|)
block|{
name|this
operator|.
name|backupToken
operator|=
name|backupToken
expr_stmt|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
name|String
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
specifier|public
name|void
name|setEndTime
parameter_list|(
name|String
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getBackupRootPath
parameter_list|()
block|{
return|return
name|backupRootPath
return|;
block|}
specifier|public
name|void
name|setBackupRootPath
parameter_list|(
name|String
name|backupRootPath
parameter_list|)
block|{
name|this
operator|.
name|backupRootPath
operator|=
name|backupRootPath
expr_stmt|;
block|}
specifier|public
name|String
name|getTableList
parameter_list|()
block|{
return|return
name|tableList
return|;
block|}
specifier|public
name|void
name|setTableList
parameter_list|(
name|String
name|tableList
parameter_list|)
block|{
name|this
operator|.
name|tableList
operator|=
name|tableList
expr_stmt|;
block|}
specifier|public
name|boolean
name|fromExistingSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|fromExistingSnapshot
return|;
block|}
specifier|public
name|void
name|markFromExistingSnapshot
parameter_list|()
block|{
name|this
operator|.
name|fromExistingSnapshot
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|BackupCompleteData
name|o
parameter_list|)
block|{
name|Long
name|thisTS
init|=
operator|new
name|Long
argument_list|(
name|this
operator|.
name|getBackupToken
argument_list|()
operator|.
name|substring
argument_list|(
name|this
operator|.
name|getBackupToken
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|otherTS
init|=
operator|new
name|Long
argument_list|(
name|o
operator|.
name|getBackupToken
argument_list|()
operator|.
name|substring
argument_list|(
name|o
operator|.
name|getBackupToken
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|thisTS
operator|.
name|compareTo
argument_list|(
name|otherTS
argument_list|)
return|;
block|}
block|}
comment|/**    * Sort history list by start time in descending order.    * @param historyList history list    * @return sorted list of BackupCompleteData    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|sortHistoryListDesc
parameter_list|(
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|historyList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BackupCompleteData
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BackupCompleteData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupCompleteData
name|h
range|:
name|historyList
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|h
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|map
operator|.
name|descendingKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Get list of all WAL files (WALs and archive)    * @param c - configuration    * @return list of WAL files    * @throws IOException exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getListOfWALFiles
parameter_list|(
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
name|logFiles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|oldLogDir
argument_list|,
name|logFiles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|logFiles
return|;
block|}
comment|/**    * Get list of all WAL files (WALs and archive)    * @param c - configuration    * @return list of WAL files    * @throws IOException exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getListOfWALFiles
parameter_list|(
name|Configuration
name|c
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|oldLogDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
return|return
name|logFiles
return|;
block|}
comment|/**    * Get list of all old WAL files (WALs and archive)    * @param c - configuration    * @return list of WAL files    * @throws IOException exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getWALFilesOlderThan
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostTimestampMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PathFilter
name|filter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|DefaultWALProvider
operator|.
name|isMetaFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|host
init|=
name|BackupUtil
operator|.
name|parseHostNameFromLogFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|oldTimestamp
init|=
name|hostTimestampMap
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|currentLogTS
init|=
name|getCreationTime
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"path="
operator|+
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"oldTimestamp="
operator|+
name|oldTimestamp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"currentLogTS="
operator|+
name|currentLogTS
argument_list|)
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|currentLogTS
argument_list|)
operator|<=
name|Long
operator|.
name|parseLong
argument_list|(
name|oldTimestamp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|logFiles
operator|=
name|getFiles
argument_list|(
name|fs
argument_list|,
name|oldLogDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
return|return
name|logFiles
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// apply filter
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|files
return|;
block|}
specifier|public
specifier|static
name|String
name|concat
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|col
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|col
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|col
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
operator|+
name|separator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|lastIndexOf
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

