begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NoTagsKeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
operator|.
name|TableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|JavaSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|WritableSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * The sweep job.  * Run map reduce to merge the smaller mob files into bigger ones and cleans the unused ones.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SweepJob
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SweepJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|SWEEP_JOB_ID
init|=
literal|"hbase.mob.sweep.job.id"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SWEEP_JOB_SERVERNAME
init|=
literal|"hbase.mob.sweep.job.servername"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SWEEP_JOB_TABLE_NODE
init|=
literal|"hbase.mob.sweep.job.table.node"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WORKING_DIR_KEY
init|=
literal|"hbase.mob.sweep.job.dir"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WORKING_ALLNAMES_FILE_KEY
init|=
literal|"hbase.mob.sweep.job.all.file"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WORKING_VISITED_DIR_KEY
init|=
literal|"hbase.mob.sweep.job.visited.dir"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WORKING_ALLNAMES_DIR
init|=
literal|"all"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WORKING_VISITED_DIR
init|=
literal|"visited"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WORKING_FILES_DIR_KEY
init|=
literal|"mob.sweep.job.files.dir"
decl_stmt|;
comment|//the MOB_SWEEP_JOB_DELAY is ONE_DAY by default. Its value is only changed when testing.
specifier|public
specifier|static
specifier|final
name|String
name|MOB_SWEEP_JOB_DELAY
init|=
literal|"hbase.mob.sweep.job.delay"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|long
name|ONE_DAY
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
name|long
name|compactionStartTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CREDENTIALS_LOCATION
init|=
literal|"credentials_location"
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConfig
decl_stmt|;
specifier|static
specifier|final
name|int
name|SCAN_CACHING
init|=
literal|10000
decl_stmt|;
specifier|private
name|TableLockManager
name|tableLockManager
decl_stmt|;
specifier|public
name|SweepJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
comment|// disable the block cache.
name|Configuration
name|copyOfConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|copyOfConf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|cacheConfig
operator|=
operator|new
name|CacheConfig
argument_list|(
name|copyOfConf
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ServerName
name|getCurrentServerName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostname
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.ipc.address"
argument_list|,
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_PORT
argument_list|)
decl_stmt|;
comment|// Creation of a HSA will force a resolve.
name|InetSocketAddress
name|initialIsa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|initialIsa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|initialIsa
operator|.
name|getPort
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Runs MapReduce to do the sweeping on the mob files.    * There's a MobReferenceOnlyFilter so that the mappers only get the cells that have mob    * references from 'normal' regions' rows.    * The running of the sweep tool on the same column family are mutually exclusive.    * The HBase major compaction and running of the sweep tool on the same column family    * are mutually exclusive.    * The synchronization is done by the Zookeeper.    * So in the beginning of the running, we need to make sure only this sweep tool is the only one    * that is currently running in this column family, and in this column family there're no major    * compaction in progress.    * @param tn The current table name.    * @param family The descriptor of the current column family.    * @return 0 upon success, 3 if bailing out because another compaction is currently happening,    *   or 4 the mr job was unsuccessful    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    * @throws KeeperException    */
specifier|public
name|int
name|sweep
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|HColumnDescriptor
name|family
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// check whether the current user is the same one with the owner of hbase root
name|String
name|currentUserName
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|hbaseRootFileStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hbaseRootFileStat
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|owner
init|=
name|hbaseRootFileStat
index|[
literal|0
index|]
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|currentUserName
argument_list|)
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"The current user["
operator|+
name|currentUserName
operator|+
literal|"] doesn't have hbase root credentials."
operator|+
literal|" Please make sure the user is the root of the target HBase"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The target HBase doesn't exist"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The target HBase doesn't exist"
argument_list|)
throw|;
block|}
name|String
name|familyName
init|=
name|family
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"SweepJob"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|id
argument_list|,
operator|new
name|DummyMobAbortable
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ServerName
name|serverName
init|=
name|getCurrentServerName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tableLockManager
operator|=
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|conf
argument_list|,
name|zkw
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|TableName
name|lockName
init|=
name|MobUtils
operator|.
name|getTableLockName
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|TableLock
name|lock
init|=
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|lockName
argument_list|,
literal|"Run sweep tool"
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|tn
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// Try to obtain the lock. Use this lock to synchronize all the query
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not lock the table "
operator|+
name|tableName
operator|+
literal|". The major compaction in HBase may be in-progress or another sweep job is running."
operator|+
literal|" Please re-run the job."
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
name|Job
name|job
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do not retrieve the mob data when scanning
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_REF_ONLY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|SCAN_CACHING
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|family
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|,
name|JavaSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|WritableSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SWEEP_JOB_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SWEEP_JOB_SERVERNAME
argument_list|,
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLockNode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|tableLockZNode
argument_list|,
name|lockName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SWEEP_JOB_TABLE_NODE
argument_list|,
name|tableLockNode
argument_list|)
expr_stmt|;
name|job
operator|=
name|prepareJob
argument_list|(
name|tn
argument_list|,
name|familyName
argument_list|,
name|scan
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|SCAN_COLUMN_FAMILY
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
comment|// Record the compaction start time.
comment|// In the sweep tool, only the mob file whose modification time is older than
comment|// (startTime - delay) could be handled by this tool.
comment|// The delay is one day. It could be configured as well, but this is only used
comment|// in the test.
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_SWEEP_TOOL_COMPACTION_START_DATE
argument_list|,
name|compactionStartTime
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|MobFilePathHashPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|job
argument_list|,
name|tn
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
comment|// Archive the unused mob files.
name|removeUnusedFiles
argument_list|(
name|job
argument_list|,
name|tn
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Job was not successful"
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|cleanup
argument_list|(
name|job
argument_list|,
name|tn
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to release the table lock "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Prepares a map reduce job.    * @param tn The current table name.    * @param familyName The current family name.    * @param scan The current scan.    * @param conf The current configuration.    * @return A map reduce job.    * @throws IOException    */
specifier|private
name|Job
name|prepareJob
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|String
name|familyName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|SweepMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tn
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|SweepMapper
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Writable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|NoTagsKeyValue
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SweepReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|jobName
init|=
name|getCustomJobName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|tn
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CREDENTIALS_LOCATION
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|fileLoc
init|=
name|conf
operator|.
name|get
argument_list|(
name|CREDENTIALS_LOCATION
argument_list|)
decl_stmt|;
name|Credentials
name|cred
init|=
name|Credentials
operator|.
name|readTokenStorageFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileLoc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|cred
argument_list|)
expr_stmt|;
block|}
return|return
name|job
return|;
block|}
comment|/**    * Gets a customized job name.    * It's className-mapperClassName-reducerClassName-tableName-familyName.    * @param className The current class name.    * @param tableName The current table name.    * @param familyName The current family name.    * @return The customized job name.    */
specifier|private
specifier|static
name|String
name|getCustomJobName
parameter_list|(
name|String
name|className
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|name
operator|.
name|append
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|SweepMapper
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|SweepReducer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Submits a job.    * @param job The current job.    * @param tn The current table name.    * @param familyName The current family name.    * @throws IOException    */
specifier|private
name|void
name|submit
parameter_list|(
name|Job
name|job
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete the temp directory of the mob files in case the failure in the previous
comment|// execution.
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|MobConstants
operator|.
name|TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|mobCompactionTempDir
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
name|MobConstants
operator|.
name|MOB_SWEEP_TOOL_COMPACTION_TEMP_DIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|workingPath
init|=
name|MobUtils
operator|.
name|getCompactionWorkingPath
argument_list|(
name|mobCompactionTempDir
argument_list|,
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|WORKING_DIR_KEY
argument_list|,
name|workingPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the working directory in case it'not deleted by the last running.
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create the working directory.
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingPath
argument_list|)
expr_stmt|;
comment|// create a sequence file which contains the names of all the existing files.
name|Path
name|workingPathOfFiles
init|=
operator|new
name|Path
argument_list|(
name|workingPath
argument_list|,
literal|"files"
argument_list|)
decl_stmt|;
name|Path
name|workingPathOfNames
init|=
operator|new
name|Path
argument_list|(
name|workingPath
argument_list|,
literal|"names"
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|WORKING_FILES_DIR_KEY
argument_list|,
name|workingPathOfFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|allFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|workingPathOfNames
argument_list|,
name|WORKING_ALLNAMES_DIR
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|WORKING_ALLNAMES_FILE_KEY
argument_list|,
name|allFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|vistiedFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|workingPathOfNames
argument_list|,
name|WORKING_VISITED_DIR
argument_list|)
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|WORKING_VISITED_DIR_KEY
argument_list|,
name|vistiedFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a directory where the files contain names of visited mob files are saved.
name|fs
operator|.
name|mkdirs
argument_list|(
name|vistiedFileNamesPath
argument_list|)
expr_stmt|;
name|Path
name|mobStorePath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tn
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
comment|// Find all the files whose creation time are older than one day.
comment|// Write those file names to a file.
comment|// In each reducer there's a writer, it write the visited file names to a file which is saved
comment|// in WORKING_VISITED_DIR.
comment|// After the job is finished, compare those files, then find out the unused mob files and
comment|// archive them.
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobStorePath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|mobCompactionDelay
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|MOB_SWEEP_JOB_DELAY
argument_list|,
name|ONE_DAY
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|files
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
operator|&&
operator|!
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|compactionStartTime
operator|-
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
operator|>
name|mobCompactionDelay
condition|)
block|{
comment|// only record the potentially unused files older than one day.
name|fileNames
operator|.
name|add
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FSDataOutputStream
name|fout
init|=
literal|null
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create a file includes all the existing mob files whose creation time is older than
comment|// (now - oneDay)
name|fout
operator|=
name|fs
operator|.
name|create
argument_list|(
name|allFileNamesPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// write the names to a sequence file
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fout
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|fileName
argument_list|,
name|MobConstants
operator|.
name|EMPTY_STRING
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fout
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the unused mob files.    * Compare the file which contains all the existing mob files and the visited files,    * find out the unused mob file and archive them.    * @param conf The current configuration.    * @return The unused mob files.    * @throws IOException    */
name|List
argument_list|<
name|String
argument_list|>
name|getUnusedFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find out the unused files and archive them
name|Path
name|allFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|WORKING_ALLNAMES_FILE_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|allNamesReader
init|=
literal|null
decl_stmt|;
name|MergeSortReader
name|visitedNamesReader
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toBeArchived
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|allNamesReader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|allFileNamesPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|visitedNamesReader
operator|=
operator|new
name|MergeSortReader
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|WORKING_VISITED_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nextAll
init|=
operator|(
name|String
operator|)
name|allNamesReader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|String
name|nextVisited
init|=
name|visitedNamesReader
operator|.
name|next
argument_list|()
decl_stmt|;
do|do
block|{
if|if
condition|(
name|nextAll
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextVisited
operator|!=
literal|null
condition|)
block|{
name|int
name|compare
init|=
name|nextAll
operator|.
name|compareTo
argument_list|(
name|nextVisited
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|<
literal|0
condition|)
block|{
name|toBeArchived
operator|.
name|add
argument_list|(
name|nextAll
argument_list|)
expr_stmt|;
name|nextAll
operator|=
operator|(
name|String
operator|)
name|allNamesReader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compare
operator|>
literal|0
condition|)
block|{
name|nextVisited
operator|=
name|visitedNamesReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextAll
operator|=
operator|(
name|String
operator|)
name|allNamesReader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|nextVisited
operator|=
name|visitedNamesReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|toBeArchived
operator|.
name|add
argument_list|(
name|nextAll
argument_list|)
expr_stmt|;
name|nextAll
operator|=
operator|(
name|String
operator|)
name|allNamesReader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|nextAll
operator|!=
literal|null
operator|||
name|nextVisited
operator|!=
literal|null
condition|)
do|;
block|}
finally|finally
block|{
if|if
condition|(
name|allNamesReader
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|allNamesReader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visitedNamesReader
operator|!=
literal|null
condition|)
block|{
name|visitedNamesReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|toBeArchived
return|;
block|}
comment|/**    * Archives unused mob files.    * @param job The current job.    * @param tn The current table name.    * @param hcd The descriptor of the current column family.    * @throws IOException    */
specifier|private
name|void
name|removeUnusedFiles
parameter_list|(
name|Job
name|job
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find out the unused files and archive them
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toBeArchived
init|=
name|getUnusedFiles
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// archive them
name|Path
name|mobStorePath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tn
argument_list|,
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|archiveFileName
range|:
name|toBeArchived
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|mobStorePath
argument_list|,
name|archiveFileName
argument_list|)
decl_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|cacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|storeFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|MobUtils
operator|.
name|removeMobFiles
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tn
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tn
argument_list|)
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|storeFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|storeFiles
operator|.
name|size
argument_list|()
operator|+
literal|" unused MOB files are removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to archive the store files "
operator|+
name|storeFiles
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Deletes the working directory.    * @param job The current job.    * @param familyName The family to cleanup    */
specifier|private
name|void
name|cleanup
parameter_list|(
name|Job
name|job
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
comment|// delete the working directory
name|Path
name|workingPath
init|=
operator|new
name|Path
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|WORKING_DIR_KEY
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete the working directory after sweeping store "
operator|+
name|familyName
operator|+
literal|" in the table "
operator|+
name|tn
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A result with index.    */
specifier|private
specifier|static
class|class
name|IndexedResult
implements|implements
name|Comparable
argument_list|<
name|IndexedResult
argument_list|>
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
specifier|public
name|IndexedResult
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|IndexedResult
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
operator|&&
name|o
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|.
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|IndexedResult
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|IndexedResult
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * Merge sort reader.    * It merges and sort the readers in different sequence files as one where    * the results are read in order.    */
specifier|private
specifier|static
class|class
name|MergeSortReader
block|{
specifier|private
name|List
argument_list|<
name|SequenceFile
operator|.
name|Reader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<
name|SequenceFile
operator|.
name|Reader
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PriorityQueue
argument_list|<
name|IndexedResult
argument_list|>
name|results
init|=
operator|new
name|PriorityQueue
argument_list|<
name|IndexedResult
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MergeSortReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|reader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|IndexedResult
argument_list|(
name|index
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|String
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexedResult
name|result
init|=
name|results
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
name|readers
operator|.
name|get
argument_list|(
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|reader
operator|.
name|next
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|IndexedResult
argument_list|(
name|result
operator|.
name|getIndex
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|SequenceFile
operator|.
name|Reader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * The counter used in sweep job.    */
specifier|public
enum|enum
name|SweepCounter
block|{
comment|/**      * How many files are read.      */
name|INPUT_FILE_COUNT
block|,
comment|/**      * How many files need to be merged or cleaned.      */
name|FILE_TO_BE_MERGE_OR_CLEAN
block|,
comment|/**      * How many files are left after merging.      */
name|FILE_AFTER_MERGE_OR_CLEAN
block|,
comment|/**      * How many records are updated.      */
name|RECORDS_UPDATED
block|,   }
specifier|public
specifier|static
class|class
name|DummyMobAbortable
implements|implements
name|Abortable
block|{
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
block|}
block|}
end_class

end_unit

