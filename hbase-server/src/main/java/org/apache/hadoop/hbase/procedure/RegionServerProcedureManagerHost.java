begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure
operator|.
name|flush
operator|.
name|RegionServerFlushTableProcedureManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|snapshot
operator|.
name|RegionServerSnapshotManager
import|;
end_import

begin_comment
comment|/**  * Provides the globally barriered procedure framework and environment  * for region server oriented operations.   * {@link org.apache.hadoop.hbase.regionserver.HRegionServer} interacts  * with the loaded procedure manager through this class.  */
end_comment

begin_class
specifier|public
class|class
name|RegionServerProcedureManagerHost
extends|extends
name|ProcedureManagerHost
argument_list|<
name|RegionServerProcedureManager
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionServerProcedureManagerHost
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|RegionServerServices
name|rss
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RegionServerProcedureManager
name|proc
range|:
name|procedures
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure "
operator|+
name|proc
operator|.
name|getProcedureSignature
argument_list|()
operator|+
literal|" is initializing"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|initialize
argument_list|(
name|rss
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure "
operator|+
name|proc
operator|.
name|getProcedureSignature
argument_list|()
operator|+
literal|" is initialized"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|RegionServerProcedureManager
name|proc
range|:
name|procedures
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure "
operator|+
name|proc
operator|.
name|getProcedureSignature
argument_list|()
operator|+
literal|" is starting"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure "
operator|+
name|proc
operator|.
name|getProcedureSignature
argument_list|()
operator|+
literal|" is started"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
for|for
control|(
name|RegionServerProcedureManager
name|proc
range|:
name|procedures
control|)
block|{
try|try
block|{
name|proc
operator|.
name|stop
argument_list|(
name|force
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close procedure "
operator|+
name|proc
operator|.
name|getProcedureSignature
argument_list|()
operator|+
literal|" cleanly"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadProcedures
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|loadUserProcedures
argument_list|(
name|conf
argument_list|,
name|REGIONSERVER_PROCEDURE_CONF_KEY
argument_list|)
expr_stmt|;
comment|// load the default snapshot manager
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|RegionServerSnapshotManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// load the default flush region procedure manager
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|RegionServerFlushTableProcedureManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

