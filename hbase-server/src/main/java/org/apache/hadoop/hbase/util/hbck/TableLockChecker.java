begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InterProcessLock
operator|.
name|MetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_comment
comment|/**  * Utility to check and fix table locks. Need zookeeper connection.  */
end_comment

begin_class
specifier|public
class|class
name|TableLockChecker
block|{
specifier|private
name|ZooKeeperWatcher
name|zkWatcher
decl_stmt|;
specifier|private
name|ErrorReporter
name|errorReporter
decl_stmt|;
name|long
name|expireTimeout
decl_stmt|;
specifier|public
name|TableLockChecker
parameter_list|(
name|ZooKeeperWatcher
name|zkWatcher
parameter_list|,
name|ErrorReporter
name|errorReporter
parameter_list|)
block|{
name|this
operator|.
name|zkWatcher
operator|=
name|zkWatcher
expr_stmt|;
name|this
operator|.
name|errorReporter
operator|=
name|errorReporter
expr_stmt|;
name|expireTimeout
operator|=
name|zkWatcher
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|TableLockManager
operator|.
name|TABLE_LOCK_EXPIRE_TIMEOUT
argument_list|,
name|TableLockManager
operator|.
name|DEFAULT_TABLE_LOCK_EXPIRE_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkTableLocks
parameter_list|()
throws|throws
name|IOException
block|{
name|TableLockManager
name|tableLockManager
init|=
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|zkWatcher
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|zkWatcher
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expireDate
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|expireTimeout
decl_stmt|;
name|MetadataHandler
name|handler
init|=
operator|new
name|MetadataHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleMetadata
parameter_list|(
name|byte
index|[]
name|ownerMetadata
parameter_list|)
block|{
name|ZooKeeperProtos
operator|.
name|TableLock
name|data
init|=
name|TableLockManager
operator|.
name|fromBytes
argument_list|(
name|ownerMetadata
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Table lock acquire attempt found:"
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"[tableName=%s, lockOwner=%s, threadId=%s, "
operator|+
literal|"purpose=%s, isShared=%s, createTime=%s]"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|data
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
operator|.
name|getLockOwner
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|getThreadId
argument_list|()
argument_list|,
name|data
operator|.
name|getPurpose
argument_list|()
argument_list|,
name|data
operator|.
name|getIsShared
argument_list|()
argument_list|,
name|data
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|hasCreateTime
argument_list|()
operator|&&
name|data
operator|.
name|getCreateTime
argument_list|()
operator|<
name|expireDate
condition|)
block|{
name|errorReporter
operator|.
name|reportError
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EXPIRED_TABLE_LOCK
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorReporter
operator|.
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|tableLockManager
operator|.
name|visitAllLocks
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fixExpiredTableLocks
parameter_list|()
throws|throws
name|IOException
block|{
name|TableLockManager
name|tableLockManager
init|=
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|zkWatcher
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|zkWatcher
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tableLockManager
operator|.
name|reapAllExpiredLocks
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

