begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionSnare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_comment
comment|/**  * General snapshot operation taken on a regionserver  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SnapshotTask
implements|implements
name|ForeignExceptionSnare
implements|,
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|protected
specifier|final
name|SnapshotDescription
name|snapshot
decl_stmt|;
specifier|protected
specifier|final
name|ForeignExceptionDispatcher
name|errorMonitor
decl_stmt|;
comment|/**    * @param snapshot Description of the snapshot we are going to operate on    * @param monitor listener interested in failures to the snapshot caused by this operation    */
specifier|public
name|SnapshotTask
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|ForeignExceptionDispatcher
name|monitor
parameter_list|)
block|{
assert|assert
name|monitor
operator|!=
literal|null
operator|:
literal|"ForeignExceptionDispatcher must not be null!"
assert|;
assert|assert
name|snapshot
operator|!=
literal|null
operator|:
literal|"SnapshotDescription must not be null!"
assert|;
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|errorMonitor
operator|=
name|monitor
expr_stmt|;
block|}
specifier|public
name|void
name|snapshotFailure
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|ForeignException
name|ee
init|=
operator|new
name|ForeignException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|errorMonitor
operator|.
name|receive
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rethrowException
parameter_list|()
throws|throws
name|ForeignException
block|{
name|this
operator|.
name|errorMonitor
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasException
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMonitor
operator|.
name|hasException
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ForeignException
name|getException
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMonitor
operator|.
name|getException
argument_list|()
return|;
block|}
block|}
end_class

end_unit

