begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HasThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Executes region split as a "transaction".  Call {@link #prepare()} to setup  * the transaction, {@link #execute(Server, RegionServerServices)} to run the  * transaction and {@link #rollback(Server, RegionServerServices)} to cleanup if execute fails.  *  *<p>Here is an example of how you would use this class:  *<pre>  *  SplitTransaction st = new SplitTransaction(this.conf, parent, midKey)  *  if (!st.prepare()) return;  *  try {  *    st.execute(server, services);  *  } catch (IOException ioe) {  *    try {  *      st.rollback(server, services);  *      return;  *    } catch (RuntimeException e) {  *      myAbortable.abort("Failed split, abort");  *    }  *  }  *</Pre>  *<p>This class is not thread safe.  Caller needs ensure split is run by  * one thread only.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitTransaction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SplitTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*    * Region to split    */
specifier|private
specifier|final
name|HRegion
name|parent
decl_stmt|;
specifier|private
name|HRegionInfo
name|hri_a
decl_stmt|;
specifier|private
name|HRegionInfo
name|hri_b
decl_stmt|;
specifier|private
name|long
name|fileSplitTimeout
init|=
literal|30000
decl_stmt|;
comment|/*    * Row to split around    */
specifier|private
specifier|final
name|byte
index|[]
name|splitrow
decl_stmt|;
comment|/**    * Types to add to the transaction journal.    * Each enum is a step in the split transaction. Used to figure how much    * we need to rollback.    */
specifier|static
enum|enum
name|JournalEntryType
block|{
comment|/**      * Started      */
name|STARTED
block|,
comment|/**      * Prepared (after table lock)      */
name|PREPARED
block|,
comment|/**      * Before preSplit coprocessor hook      */
name|BEFORE_PRE_SPLIT_HOOK
block|,
comment|/**      * After preSplit coprocessor hook      */
name|AFTER_PRE_SPLIT_HOOK
block|,
comment|/**      * Set region as in transition, set it into SPLITTING state.      */
name|SET_SPLITTING
block|,
comment|/**      * We created the temporary split data directory.      */
name|CREATE_SPLIT_DIR
block|,
comment|/**      * Closed the parent region.      */
name|CLOSED_PARENT_REGION
block|,
comment|/**      * The parent has been taken out of the server's online regions list.      */
name|OFFLINED_PARENT
block|,
comment|/**      * Started in on creation of the first daughter region.      */
name|STARTED_REGION_A_CREATION
block|,
comment|/**      * Started in on the creation of the second daughter region.      */
name|STARTED_REGION_B_CREATION
block|,
comment|/**      * Opened the first daughter region      */
name|OPENED_REGION_A
block|,
comment|/**      * Opened the second daughter region      */
name|OPENED_REGION_B
block|,
comment|/**      * Before postSplit coprocessor hook      */
name|BEFORE_POST_SPLIT_HOOK
block|,
comment|/**      * After postSplit coprocessor hook      */
name|AFTER_POST_SPLIT_HOOK
block|,
comment|/**      * Point of no return.      * If we got here, then transaction is not recoverable other than by      * crashing out the regionserver.      */
name|PONR
block|}
specifier|static
class|class
name|JournalEntry
block|{
specifier|public
name|JournalEntryType
name|type
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
name|JournalEntry
parameter_list|(
name|JournalEntryType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JournalEntry
parameter_list|(
name|JournalEntryType
name|type
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/*    * Journal of how far the split transaction has progressed.    */
specifier|private
specifier|final
name|List
argument_list|<
name|JournalEntry
argument_list|>
name|journal
init|=
operator|new
name|ArrayList
argument_list|<
name|JournalEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Constructor    * @param r Region to split    * @param splitrow Row to split around    */
specifier|public
name|SplitTransaction
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|splitrow
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|splitrow
operator|=
name|splitrow
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Does checks on split inputs.    * @return<code>true</code> if the region is splittable else    *<code>false</code> if it is not (e.g. its already closed, etc.).    */
specifier|public
name|boolean
name|prepare
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|parent
operator|.
name|isSplittable
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Split key can be null if this region is unsplittable; i.e. has refs.
if|if
condition|(
name|this
operator|.
name|splitrow
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|HRegionInfo
name|hri
init|=
name|this
operator|.
name|parent
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|parent
operator|.
name|prepareToSplit
argument_list|()
expr_stmt|;
comment|// Check splitrow.
name|byte
index|[]
name|startKey
init|=
name|hri
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|hri
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|startKey
argument_list|,
name|splitrow
argument_list|)
operator|||
operator|!
name|this
operator|.
name|parent
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|containsRow
argument_list|(
name|splitrow
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split row is not inside region key range or is equal to "
operator|+
literal|"startkey: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|this
operator|.
name|splitrow
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|rid
init|=
name|getDaughterRegionIdTimestamp
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|this
operator|.
name|hri_a
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|this
operator|.
name|splitrow
argument_list|,
literal|false
argument_list|,
name|rid
argument_list|)
expr_stmt|;
name|this
operator|.
name|hri_b
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|this
operator|.
name|splitrow
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|,
name|rid
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|PREPARED
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Calculate daughter regionid to use.    * @param hri Parent {@link HRegionInfo}    * @return Daughter region id (timestamp) to use.    */
specifier|private
specifier|static
name|long
name|getDaughterRegionIdTimestamp
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|long
name|rid
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Regionid is timestamp.  Can't be less than that of parent else will insert
comment|// at wrong location in hbase:meta (See HBASE-710).
if|if
condition|(
name|rid
operator|<
name|hri
operator|.
name|getRegionId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clock skew; parent regions id is "
operator|+
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|" but current time here is "
operator|+
name|rid
argument_list|)
expr_stmt|;
name|rid
operator|=
name|hri
operator|.
name|getRegionId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|rid
return|;
block|}
specifier|private
specifier|static
name|IOException
name|closedByOtherException
init|=
operator|new
name|IOException
argument_list|(
literal|"Failed to close region: already closed by another thread"
argument_list|)
decl_stmt|;
comment|/**    * Prepare the regions and region files.    * @param server Hosting server instance.  Can be null when testing (won't try    * and update in zk if a null server)    * @param services Used to online/offline regions.    * @throws IOException If thrown, transaction failed.    *    Call {@link #rollback(Server, RegionServerServices)}    * @return Regions created    */
comment|/* package */
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|createDaughters
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting split of region "
operator|+
name|this
operator|.
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isStopped
argument_list|()
operator|)
operator|||
operator|(
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|isStopping
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server is stopped or stopping"
argument_list|)
throw|;
block|}
assert|assert
operator|!
name|this
operator|.
name|parent
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
operator|:
literal|"Unsafe to hold write lock while performing RPCs"
assert|;
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|BEFORE_PRE_SPLIT_HOOK
argument_list|)
argument_list|)
expr_stmt|;
comment|// Coprocessor callback
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Remove one of these
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preSplit
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preSplit
argument_list|(
name|this
operator|.
name|splitrow
argument_list|)
expr_stmt|;
block|}
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|AFTER_PRE_SPLIT_HOOK
argument_list|)
argument_list|)
expr_stmt|;
comment|// If true, no cluster to write meta edits to or to update znodes in.
name|boolean
name|testing
init|=
name|server
operator|==
literal|null
condition|?
literal|true
else|:
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.testing.nocluster"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|fileSplitTimeout
operator|=
name|testing
condition|?
name|this
operator|.
name|fileSplitTimeout
else|:
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.fileSplitTimeout"
argument_list|,
name|this
operator|.
name|fileSplitTimeout
argument_list|)
expr_stmt|;
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|daughterRegions
init|=
name|stepsBeforePONR
argument_list|(
name|server
argument_list|,
name|services
argument_list|,
name|testing
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preSplitBeforePONR
argument_list|(
name|this
operator|.
name|splitrow
argument_list|,
name|metaEntries
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Coprocessor bypassing region "
operator|+
name|this
operator|.
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" split."
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|Mutation
name|p
range|:
name|metaEntries
control|)
block|{
name|HRegionInfo
operator|.
name|parseRegionName
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Row key of mutation from coprossor is not parsable as region name."
operator|+
literal|"Mutations from coprocessor should only for hbase:meta table."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// This is the point of no return.  Adding subsequent edits to .META. as we
comment|// do below when we do the daughter opens adding each to .META. can fail in
comment|// various interesting ways the most interesting of which is a timeout
comment|// BUT the edits all go through (See HBASE-3872).  IF we reach the PONR
comment|// then subsequent failures need to crash out this regionserver; the
comment|// server shutdown processing should be able to fix-up the incomplete split.
comment|// The offlined parent will have the daughters as extra columns.  If
comment|// we leave the daughter regions in place and do not remove them when we
comment|// crash out, then they will have their references to the parent in place
comment|// still and the server shutdown fixup of .META. will point to these
comment|// regions.
comment|// We should add PONR JournalEntry before offlineParentInMeta,so even if
comment|// OfflineParentInMeta timeout,this will cause regionserver exit,and then
comment|// master ServerShutdownHandler will fix daughter& avoid data loss. (See
comment|// HBase-4562).
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|PONR
argument_list|)
argument_list|)
expr_stmt|;
comment|// Edit parent in meta.  Offlines parent region and adds splita and splitb
comment|// as an atomic update. See HBASE-7721. This update to META makes the region
comment|// will determine whether the region is split or not in case of failures.
comment|// If it is successful, master will roll-forward, if not, master will rollback
comment|// and assign the parent region.
if|if
condition|(
name|services
operator|!=
literal|null
operator|&&
operator|!
name|services
operator|.
name|reportRegionStateTransition
argument_list|(
name|TransitionCode
operator|.
name|SPLIT_PONR
argument_list|,
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|)
condition|)
block|{
comment|// Passed PONR, let SSH clean it up
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to notify master that split passed PONR: "
operator|+
name|parent
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|daughterRegions
return|;
block|}
specifier|public
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|stepsBeforePONR
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|boolean
name|testing
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|services
operator|!=
literal|null
operator|&&
operator|!
name|services
operator|.
name|reportRegionStateTransition
argument_list|(
name|TransitionCode
operator|.
name|READY_TO_SPLIT
argument_list|,
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get ok from master to split "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|SET_SPLITTING
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|createSplitsDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|CREATE_SPLIT_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesToSplit
init|=
literal|null
decl_stmt|;
name|Exception
name|exceptionToThrow
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hstoreFilesToSplit
operator|=
name|this
operator|.
name|parent
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionToThrow
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|==
literal|null
operator|&&
name|hstoreFilesToSplit
operator|==
literal|null
condition|)
block|{
comment|// The region was closed by a concurrent thread.  We can't continue
comment|// with the split, instead we must just abandon the split.  If we
comment|// reopen or split this could cause problems because the region has
comment|// probably already been moved to a different server, or is in the
comment|// process of moving to a different server.
name|exceptionToThrow
operator|=
name|closedByOtherException
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|!=
name|closedByOtherException
condition|)
block|{
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|CLOSED_PARENT_REGION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exceptionToThrow
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|exceptionToThrow
throw|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptionToThrow
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|testing
condition|)
block|{
name|services
operator|.
name|removeFromOnlineRegions
argument_list|(
name|this
operator|.
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|OFFLINED_PARENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: If splitStoreFiles were multithreaded would we complete steps in
comment|// less elapsed time?  St.Ack 20100920
comment|//
comment|// splitStoreFiles creates daughter region dirs under the parent splits dir
comment|// Nothing to unroll here if failure -- clean up of CREATE_SPLIT_DIR will
comment|// clean this up.
name|splitStoreFiles
argument_list|(
name|hstoreFilesToSplit
argument_list|)
expr_stmt|;
comment|// Log to the journal that we are creating region A, the first daughter
comment|// region.  We could fail halfway through.  If we do, we could have left
comment|// stuff in fs that needs cleanup -- a storefile or two.  Thats why we
comment|// add entry to journal BEFORE rather than AFTER the change.
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|STARTED_REGION_A_CREATION
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|a
init|=
name|this
operator|.
name|parent
operator|.
name|createDaughterRegionFromSplits
argument_list|(
name|this
operator|.
name|hri_a
argument_list|)
decl_stmt|;
comment|// Ditto
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|STARTED_REGION_B_CREATION
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|b
init|=
name|this
operator|.
name|parent
operator|.
name|createDaughterRegionFromSplits
argument_list|(
name|this
operator|.
name|hri_b
argument_list|)
decl_stmt|;
return|return
operator|new
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**    * Perform time consuming opening of the daughter regions.    * @param server Hosting server instance.  Can be null when testing    * @param services Used to online/offline regions.    * @param a first daughter region    * @param a second daughter region    * @throws IOException If thrown, transaction failed.    *          Call {@link #rollback(Server, RegionServerServices)}    */
comment|/* package */
name|void
name|openDaughters
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|HRegion
name|a
parameter_list|,
name|HRegion
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|stopped
init|=
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isStopped
argument_list|()
decl_stmt|;
name|boolean
name|stopping
init|=
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|isStopping
argument_list|()
decl_stmt|;
comment|// TODO: Is this check needed here?
if|if
condition|(
name|stopped
operator|||
name|stopping
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not opening daughters "
operator|+
name|b
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" and "
operator|+
name|a
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because stopping="
operator|+
name|stopping
operator|+
literal|", stopped="
operator|+
name|stopped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Open daughters in parallel.
name|DaughterOpener
name|aOpener
init|=
operator|new
name|DaughterOpener
argument_list|(
name|server
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|DaughterOpener
name|bOpener
init|=
operator|new
name|DaughterOpener
argument_list|(
name|server
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|aOpener
operator|.
name|start
argument_list|()
expr_stmt|;
name|bOpener
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|aOpener
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|aOpener
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|OPENED_REGION_A
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bOpener
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|bOpener
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|OPENED_REGION_B
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|aOpener
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed "
operator|+
name|aOpener
operator|.
name|getName
argument_list|()
argument_list|,
name|aOpener
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|bOpener
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed "
operator|+
name|bOpener
operator|.
name|getName
argument_list|()
argument_list|,
name|bOpener
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|services
operator|.
name|reportRegionStateTransition
argument_list|(
name|TransitionCode
operator|.
name|SPLIT
argument_list|,
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to report split region to master: "
operator|+
name|parent
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
throw|;
block|}
comment|// Should add it to OnlineRegions
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Run the transaction.    * @param server Hosting server instance.  Can be null when testing    * @param services Used to online/offline regions.    * @throws IOException If thrown, transaction failed.    *          Call {@link #rollback(Server, RegionServerServices)}    * @return Regions created    * @throws IOException    * @see #rollback(Server, RegionServerServices)    */
specifier|public
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|createDaughters
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preSplitAfterPONR
argument_list|()
expr_stmt|;
block|}
return|return
name|stepsAfterPONR
argument_list|(
name|server
argument_list|,
name|services
argument_list|,
name|regions
argument_list|)
return|;
block|}
specifier|public
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|stepsAfterPONR
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|openDaughters
argument_list|(
name|server
argument_list|,
name|services
argument_list|,
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|BEFORE_POST_SPLIT_HOOK
argument_list|)
argument_list|)
expr_stmt|;
comment|// Coprocessor callback
if|if
condition|(
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postSplit
argument_list|(
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|journal
operator|.
name|add
argument_list|(
operator|new
name|JournalEntry
argument_list|(
name|JournalEntryType
operator|.
name|AFTER_POST_SPLIT_HOOK
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
specifier|public
name|Put
name|addLocation
parameter_list|(
specifier|final
name|Put
name|p
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|)
block|{
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|openSeqNum
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/*    * Open daughter region in its own thread.    * If we fail, abort this hosting server.    */
class|class
name|DaughterOpener
extends|extends
name|HasThread
block|{
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|r
decl_stmt|;
specifier|private
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
name|DaughterOpener
parameter_list|(
specifier|final
name|Server
name|s
parameter_list|,
specifier|final
name|HRegion
name|r
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|s
operator|==
literal|null
condition|?
literal|"null-services"
else|:
name|s
operator|.
name|getServerName
argument_list|()
operator|)
operator|+
literal|"-daughterOpener="
operator|+
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
block|}
comment|/**      * @return Null if open succeeded else exception that causes us fail open.      * Call it after this thread exits else you may get wrong view on result.      */
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|this
operator|.
name|t
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|openDaughterRegion
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Open daughter regions, add them to online list and update meta.    * @param server    * @param daughter    * @throws IOException    * @throws KeeperException    */
name|void
name|openDaughterRegion
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|HRegion
name|daughter
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|HRegionInfo
name|hri
init|=
name|daughter
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|LoggingProgressable
name|reporter
init|=
name|server
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|LoggingProgressable
argument_list|(
name|hri
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.split.daughter.open.log.interval"
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|daughter
operator|.
name|openHRegion
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|LoggingProgressable
implements|implements
name|CancelableProgressable
block|{
specifier|private
specifier|final
name|HRegionInfo
name|hri
decl_stmt|;
specifier|private
name|long
name|lastLog
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
name|LoggingProgressable
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|progress
parameter_list|()
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|lastLog
operator|>
name|this
operator|.
name|interval
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening "
operator|+
name|this
operator|.
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastLog
operator|=
name|now
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|void
name|splitStoreFiles
parameter_list|(
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesToSplit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hstoreFilesToSplit
operator|==
literal|null
condition|)
block|{
comment|// Could be null because close didn't succeed -- for now consider it fatal
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Close returned empty list of StoreFiles"
argument_list|)
throw|;
block|}
comment|// The following code sets up a thread pool executor with as many slots as
comment|// there's files to split. It then fires up everything, waits for
comment|// completion and finally checks for any exception
name|int
name|nbFiles
init|=
name|hstoreFilesToSplit
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nbFiles
operator|==
literal|0
condition|)
block|{
comment|// no file needs to be splitted.
return|return;
block|}
name|ThreadFactoryBuilder
name|builder
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNameFormat
argument_list|(
literal|"StoreFileSplitter-%1$d"
argument_list|)
expr_stmt|;
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nbFiles
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|(
name|nbFiles
argument_list|)
decl_stmt|;
comment|// Split each store file.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|entry
range|:
name|hstoreFilesToSplit
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|StoreFile
name|sf
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|StoreFileSplitter
name|sfs
init|=
operator|new
name|StoreFileSplitter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|sf
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|threadPool
operator|.
name|submit
argument_list|(
name|sfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Shutdown the pool
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait for all the tasks to finish
try|try
block|{
name|boolean
name|stillRunning
init|=
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
name|this
operator|.
name|fileSplitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|stillRunning
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// wait for the thread to shutdown completely.
while|while
condition|(
operator|!
name|threadPool
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Took too long to split the"
operator|+
literal|" files and create the references, aborting split"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Look for any exception
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|splitStoreFile
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|StoreFile
name|sf
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionFileSystem
name|fs
init|=
name|this
operator|.
name|parent
operator|.
name|getRegionFileSystem
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|fs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|hri_a
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|this
operator|.
name|splitrow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|splitStoreFile
argument_list|(
name|this
operator|.
name|hri_b
argument_list|,
name|familyName
argument_list|,
name|sf
argument_list|,
name|this
operator|.
name|splitrow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility class used to do the file splitting / reference writing    * in parallel instead of sequentially.    */
class|class
name|StoreFileSplitter
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
specifier|final
name|StoreFile
name|sf
decl_stmt|;
comment|/**      * Constructor that takes what it needs to split      * @param family Family that contains the store file      * @param sf which file      */
specifier|public
name|StoreFileSplitter
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|StoreFile
name|sf
parameter_list|)
block|{
name|this
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|splitStoreFile
argument_list|(
name|family
argument_list|,
name|sf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * @param server Hosting server instance (May be null when testing).    * @param services    * @throws IOException If thrown, rollback failed.  Take drastic action.    * @return True if we successfully rolled back, false if we got to the point    * of no return and so now need to abort the server to minimize damage.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|boolean
name|rollback
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Coprocessor callback
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preRollBackSplit
argument_list|()
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|ListIterator
argument_list|<
name|JournalEntry
argument_list|>
name|iterator
init|=
name|this
operator|.
name|journal
operator|.
name|listIterator
argument_list|(
name|this
operator|.
name|journal
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Iterate in reverse.
while|while
condition|(
name|iterator
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|JournalEntry
name|je
init|=
name|iterator
operator|.
name|previous
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|je
operator|.
name|type
condition|)
block|{
case|case
name|SET_SPLITTING
case|:
if|if
condition|(
name|services
operator|!=
literal|null
operator|&&
operator|!
name|services
operator|.
name|reportRegionStateTransition
argument_list|(
name|TransitionCode
operator|.
name|SPLIT_REVERTED
argument_list|,
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|CREATE_SPLIT_DIR
case|:
name|this
operator|.
name|parent
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|cleanupSplitsDir
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLOSED_PARENT_REGION
case|:
try|try
block|{
comment|// So, this returns a seqid but if we just closed and then reopened, we
comment|// should be ok. On close, we flushed using sequenceid obtained from
comment|// hosting regionserver so no need to propagate the sequenceid returned
comment|// out of initialize below up into regionserver as we normally do.
comment|// TODO: Verify.
name|this
operator|.
name|parent
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed rollbacking CLOSED_PARENT_REGION of region "
operator|+
name|this
operator|.
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|STARTED_REGION_A_CREATION
case|:
name|this
operator|.
name|parent
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|cleanupDaughterRegion
argument_list|(
name|this
operator|.
name|hri_a
argument_list|)
expr_stmt|;
break|break;
case|case
name|STARTED_REGION_B_CREATION
case|:
name|this
operator|.
name|parent
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|cleanupDaughterRegion
argument_list|(
name|this
operator|.
name|hri_b
argument_list|)
expr_stmt|;
break|break;
case|case
name|OFFLINED_PARENT
case|:
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|this
operator|.
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PONR
case|:
comment|// We got to the point-of-no-return so we need to just abort. Return
comment|// immediately.  Do not clean up created daughter regions.  They need
comment|// to be in place so we don't delete the parent region mistakenly.
comment|// See HBASE-3872.
return|return
literal|false
return|;
comment|// Informational only cases
case|case
name|STARTED
case|:
case|case
name|PREPARED
case|:
case|case
name|BEFORE_PRE_SPLIT_HOOK
case|:
case|case
name|AFTER_PRE_SPLIT_HOOK
case|:
case|case
name|BEFORE_POST_SPLIT_HOOK
case|:
case|case
name|AFTER_POST_SPLIT_HOOK
case|:
case|case
name|OPENED_REGION_A
case|:
case|case
name|OPENED_REGION_B
case|:
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled journal entry: "
operator|+
name|je
argument_list|)
throw|;
block|}
block|}
comment|// Coprocessor callback
if|if
condition|(
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|parent
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postRollBackSplit
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|HRegionInfo
name|getFirstDaughter
parameter_list|()
block|{
return|return
name|hri_a
return|;
block|}
name|HRegionInfo
name|getSecondDaughter
parameter_list|()
block|{
return|return
name|hri_b
return|;
block|}
name|List
argument_list|<
name|JournalEntry
argument_list|>
name|getJournal
parameter_list|()
block|{
return|return
name|journal
return|;
block|}
block|}
end_class

end_unit

