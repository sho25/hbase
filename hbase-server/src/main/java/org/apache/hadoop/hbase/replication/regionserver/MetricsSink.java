begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsReplicationSource
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining the various replication statistics for a sink and publishing them  * through the metrics interfaces.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsSink
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SINK_AGE_OF_LAST_APPLIED_OP
init|=
literal|"sink.ageOfLastAppliedOp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SINK_APPLIED_BATCHES
init|=
literal|"sink.appliedBatches"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SINK_APPLIED_OPS
init|=
literal|"sink.appliedOps"
decl_stmt|;
specifier|private
name|MetricsReplicationSource
name|rms
decl_stmt|;
specifier|private
name|long
name|lastTimestampForAge
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|MetricsSink
parameter_list|()
block|{
name|rms
operator|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsReplicationSource
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the age of the last applied operation    *    * @param timestamp The timestamp of the last operation applied.    * @return the age that was set    */
specifier|public
name|long
name|setAgeOfLastAppliedOp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|long
name|age
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lastTimestampForAge
operator|!=
name|timestamp
condition|)
block|{
name|lastTimestampForAge
operator|=
name|timestamp
expr_stmt|;
name|age
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastTimestampForAge
expr_stmt|;
block|}
name|rms
operator|.
name|setGauge
argument_list|(
name|SINK_AGE_OF_LAST_APPLIED_OP
argument_list|,
name|age
argument_list|)
expr_stmt|;
return|return
name|age
return|;
block|}
comment|/**    * Refreshing the age makes sure the value returned is the actual one and    * not the one set a replication time    * @return refreshed age    */
specifier|public
name|long
name|refreshAgeOfLastAppliedOp
parameter_list|()
block|{
return|return
name|setAgeOfLastAppliedOp
argument_list|(
name|lastTimestampForAge
argument_list|)
return|;
block|}
comment|/**    * Convience method to change metrics when a batch of operations are applied.    *    * @param batchSize    */
specifier|public
name|void
name|applyBatch
parameter_list|(
name|long
name|batchSize
parameter_list|)
block|{
name|rms
operator|.
name|incCounters
argument_list|(
name|SINK_APPLIED_BATCHES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rms
operator|.
name|incCounters
argument_list|(
name|SINK_APPLIED_OPS
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

