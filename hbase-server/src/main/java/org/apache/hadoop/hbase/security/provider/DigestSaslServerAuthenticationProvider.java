begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseSaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DigestSaslServerAuthenticationProvider
extends|extends
name|DigestSaslAuthenticationProvider
implements|implements
name|SaslServerAuthenticationProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DigestSaslServerAuthenticationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|UserGroupInformation
argument_list|>
name|attemptingUser
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|AttemptingUserProvidingSaslServer
name|createServer
parameter_list|(
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|secretManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Server is not configured to do DIGEST authentication."
argument_list|)
throw|;
block|}
specifier|final
name|SaslServer
name|server
init|=
name|Sasl
operator|.
name|createSaslServer
argument_list|(
name|getSaslAuthMethod
argument_list|()
operator|.
name|getSaslMechanism
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SaslUtil
operator|.
name|SASL_DEFAULT_REALM
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslDigestCallbackHandler
argument_list|(
name|secretManager
argument_list|,
name|attemptingUser
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|AttemptingUserProvidingSaslServer
argument_list|(
name|server
argument_list|,
parameter_list|()
lambda|->
name|attemptingUser
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/** CallbackHandler for SASL DIGEST-MD5 mechanism */
specifier|private
specifier|static
class|class
name|SaslDigestCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|UserGroupInformation
argument_list|>
name|attemptingUser
decl_stmt|;
specifier|public
name|SaslDigestCallbackHandler
parameter_list|(
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|AtomicReference
argument_list|<
name|UserGroupInformation
argument_list|>
name|attemptingUser
parameter_list|)
block|{
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
name|this
operator|.
name|attemptingUser
operator|=
name|attemptingUser
expr_stmt|;
block|}
specifier|private
name|char
index|[]
name|getPassword
parameter_list|(
name|TokenIdentifier
name|tokenid
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|SaslUtil
operator|.
name|encodePassword
argument_list|(
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|tokenid
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|AuthorizeCallback
name|ac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|AuthorizeCallback
condition|)
block|{
name|ac
operator|=
operator|(
name|AuthorizeCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
continue|continue;
comment|// realm is ignored
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL DIGEST-MD5 Callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|TokenIdentifier
name|tokenIdentifier
init|=
name|HBaseSaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|nc
operator|.
name|getDefaultName
argument_list|()
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|attemptingUser
operator|.
name|set
argument_list|(
name|tokenIdentifier
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|char
index|[]
name|password
init|=
name|getPassword
argument_list|(
name|tokenIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"SASL server DIGEST-MD5 callback: setting password for client: {}"
argument_list|,
name|tokenIdentifier
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ac
operator|!=
literal|null
condition|)
block|{
comment|// The authentication ID is the identifier (username) of the user who authenticated via
comment|// SASL (the one who provided credentials). The authorization ID is who the remote user
comment|// "asked" to be once they authenticated. This is akin to the UGI/JAAS "doAs" notion, e.g.
comment|// authentication ID is the "real" user and authorization ID is the "proxy" user.
comment|//
comment|// For DelegationTokens: we do not expect any remote user with a delegation token to execute
comment|// any RPCs as a user other than themselves. We disallow all cases where the real user
comment|// does not match who the remote user wants to execute a request as someone else.
name|String
name|authenticatedUserId
init|=
name|ac
operator|.
name|getAuthenticationID
argument_list|()
decl_stmt|;
name|String
name|userRequestedToExecuteAs
init|=
name|ac
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
if|if
condition|(
name|authenticatedUserId
operator|.
name|equals
argument_list|(
name|userRequestedToExecuteAs
argument_list|)
condition|)
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|String
name|username
init|=
name|HBaseSaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|userRequestedToExecuteAs
argument_list|,
name|secretManager
argument_list|)
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"SASL server DIGEST-MD5 callback: setting "
operator|+
literal|"canonicalized client ID: "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
name|ac
operator|.
name|setAuthorizedID
argument_list|(
name|userRequestedToExecuteAs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsProtocolAuthentication
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|getAuthorizedUgi
parameter_list|(
name|String
name|authzId
parameter_list|,
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|authorizedUgi
decl_stmt|;
name|TokenIdentifier
name|tokenId
init|=
name|HBaseSaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|authzId
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|authorizedUgi
operator|=
name|tokenId
operator|.
name|getUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|authorizedUgi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Can't retrieve username from tokenIdentifier."
argument_list|)
throw|;
block|}
name|authorizedUgi
operator|.
name|addTokenIdentifier
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
name|authorizedUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|getSaslAuthMethod
argument_list|()
operator|.
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|authorizedUgi
return|;
block|}
block|}
end_class

end_unit

