begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DroppedSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|HeapMemorySizeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HasThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Thread that flushes cache on request  *  * NOTE: This class extends Thread rather than Chore because the sleep time  * can be interrupted when there is something to do, rather than the Chore  * sleep time which is invariant.  *  * @see FlushRequester  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|MemStoreFlusher
implements|implements
name|FlushRequester
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemStoreFlusher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// These two data members go together.  Any entry in the one must have
comment|// a corresponding entry in the other.
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|FlushQueueEntry
argument_list|>
name|flushQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|FlushQueueEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|HRegion
argument_list|,
name|FlushRegionEntry
argument_list|>
name|regionsInQueue
init|=
operator|new
name|HashMap
argument_list|<
name|HRegion
argument_list|,
name|FlushRegionEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|wakeupPending
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|threadWakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|blockSignal
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
name|long
name|globalMemStoreLimit
decl_stmt|;
specifier|protected
name|float
name|globalMemStoreLimitLowMarkPercent
decl_stmt|;
specifier|protected
name|long
name|globalMemStoreLimitLowMark
decl_stmt|;
specifier|private
name|long
name|blockingWaitTime
decl_stmt|;
specifier|private
specifier|final
name|Counter
name|updatesBlockedMsHighWater
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FlushHandler
index|[]
name|flushHandlers
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FlushRequestListener
argument_list|>
name|flushRequestListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|FlushRequestListener
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * @param conf    * @param server    */
specifier|public
name|MemStoreFlusher
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|long
name|max
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|float
name|globalMemStorePercent
init|=
name|HeapMemorySizeUtil
operator|.
name|getGlobalMemStorePercent
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|globalMemStoreLimit
operator|=
call|(
name|long
call|)
argument_list|(
name|max
operator|*
name|globalMemStorePercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|globalMemStoreLimitLowMarkPercent
operator|=
name|HeapMemorySizeUtil
operator|.
name|getGlobalMemStoreLowerMark
argument_list|(
name|conf
argument_list|,
name|globalMemStorePercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|globalMemStoreLimitLowMark
operator|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|globalMemStoreLimit
operator|*
name|this
operator|.
name|globalMemStoreLimitLowMarkPercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockingWaitTime
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.blockingWaitTime"
argument_list|,
literal|90000
argument_list|)
expr_stmt|;
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.flusher.count"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|this
operator|.
name|flushHandlers
operator|=
operator|new
name|FlushHandler
index|[
name|handlerCount
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"globalMemStoreLimit="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimit
argument_list|)
operator|+
literal|", globalMemStoreLimitLowMark="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|globalMemStoreLimitLowMark
argument_list|)
operator|+
literal|", maxHeap="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Counter
name|getUpdatesBlockedMsHighWater
parameter_list|()
block|{
return|return
name|this
operator|.
name|updatesBlockedMsHighWater
return|;
block|}
comment|/**    * The memstore across all regions has exceeded the low water mark. Pick    * one region to flush and flush it synchronously (this is called from the    * flush thread)    * @return true if successful    */
specifier|private
name|boolean
name|flushOneForGlobalPressure
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|regionsBySize
init|=
name|server
operator|.
name|getCopyOfOnlineRegionsSortedBySize
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegion
argument_list|>
name|excludedRegions
init|=
operator|new
name|HashSet
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|flushedOne
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|flushedOne
condition|)
block|{
comment|// Find the biggest region that doesn't have too many storefiles
comment|// (might be null!)
name|HRegion
name|bestFlushableRegion
init|=
name|getBiggestMemstoreRegion
argument_list|(
name|regionsBySize
argument_list|,
name|excludedRegions
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Find the biggest region, total, even if it might have too many flushes.
name|HRegion
name|bestAnyRegion
init|=
name|getBiggestMemstoreRegion
argument_list|(
name|regionsBySize
argument_list|,
name|excludedRegions
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestAnyRegion
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Above memory mark but there are no flushable regions!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|HRegion
name|regionToFlush
decl_stmt|;
if|if
condition|(
name|bestFlushableRegion
operator|!=
literal|null
operator|&&
name|bestAnyRegion
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|>
literal|2
operator|*
name|bestFlushableRegion
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Even if it's not supposed to be flushed, pick a region if it's more than twice
comment|// as big as the best flushable one - otherwise when we're under pressure we make
comment|// lots of little flushes and cause lots of compactions, etc, which just makes
comment|// life worse!
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Under global heap pressure: "
operator|+
literal|"Region "
operator|+
name|bestAnyRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" has too many "
operator|+
literal|"store files, but is "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|bestAnyRegion
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|" vs best flushable region's "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|bestFlushableRegion
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|". Choosing the bigger."
argument_list|)
expr_stmt|;
block|}
name|regionToFlush
operator|=
name|bestAnyRegion
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bestFlushableRegion
operator|==
literal|null
condition|)
block|{
name|regionToFlush
operator|=
name|bestAnyRegion
expr_stmt|;
block|}
else|else
block|{
name|regionToFlush
operator|=
name|bestFlushableRegion
expr_stmt|;
block|}
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|regionToFlush
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flush of region "
operator|+
name|regionToFlush
operator|+
literal|" due to global heap pressure"
argument_list|)
expr_stmt|;
name|flushedOne
operator|=
name|flushRegion
argument_list|(
name|regionToFlush
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flushedOne
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Excluding unflushable region "
operator|+
name|regionToFlush
operator|+
literal|" - trying to find a different region to flush."
argument_list|)
expr_stmt|;
name|excludedRegions
operator|.
name|add
argument_list|(
name|regionToFlush
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|FlushHandler
extends|extends
name|HasThread
block|{
specifier|private
name|FlushHandler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|FlushQueueEntry
name|fqe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wakeupPending
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// allow someone to wake us up again
name|fqe
operator|=
name|flushQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|fqe
operator|==
literal|null
operator|||
name|fqe
operator|instanceof
name|WakeupFlushThread
condition|)
block|{
if|if
condition|(
name|isAboveLowWaterMark
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flush thread woke up because memory above low water="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|globalMemStoreLimitLowMark
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flushOneForGlobalPressure
argument_list|()
condition|)
block|{
comment|// Wasn't able to flush any region, but we're above low water mark
comment|// This is unlikely to happen, but might happen when closing the
comment|// entire server - another thread is flushing regions. We'll just
comment|// sleep a little bit to avoid spinning, and then pretend that
comment|// we flushed one, so anyone blocked will check again
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|wakeUpIfBlocking
argument_list|()
expr_stmt|;
block|}
comment|// Enqueue another one of these tokens so we'll wake up again
name|wakeupFlushThread
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
name|FlushRegionEntry
name|fre
init|=
operator|(
name|FlushRegionEntry
operator|)
name|fqe
decl_stmt|;
if|if
condition|(
operator|!
name|flushRegion
argument_list|(
name|fre
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flusher failed for entry "
operator|+
name|fqe
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
name|regionsInQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|flushQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Signal anyone waiting, so they see the close flag
name|wakeUpIfBlocking
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|wakeupFlushThread
parameter_list|()
block|{
if|if
condition|(
name|wakeupPending
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|flushQueue
operator|.
name|add
argument_list|(
operator|new
name|WakeupFlushThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HRegion
name|getBiggestMemstoreRegion
parameter_list|(
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|regionsBySize
parameter_list|,
name|Set
argument_list|<
name|HRegion
argument_list|>
name|excludedRegions
parameter_list|,
name|boolean
name|checkStoreFileCount
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
for|for
control|(
name|HRegion
name|region
range|:
name|regionsBySize
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|excludedRegions
operator|.
name|contains
argument_list|(
name|region
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|region
operator|.
name|writestate
operator|.
name|flushing
operator|||
operator|!
name|region
operator|.
name|writestate
operator|.
name|writesEnabled
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkStoreFileCount
operator|&&
name|isTooManyStoreFiles
argument_list|(
name|region
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|region
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Return true if global memory usage is above the high watermark    */
specifier|private
name|boolean
name|isAboveHighWaterMark
parameter_list|()
block|{
return|return
name|server
operator|.
name|getRegionServerAccounting
argument_list|()
operator|.
name|getGlobalMemstoreSize
argument_list|()
operator|>=
name|globalMemStoreLimit
return|;
block|}
comment|/**    * Return true if we're above the high watermark    */
specifier|private
name|boolean
name|isAboveLowWaterMark
parameter_list|()
block|{
return|return
name|server
operator|.
name|getRegionServerAccounting
argument_list|()
operator|.
name|getGlobalMemstoreSize
argument_list|()
operator|>=
name|globalMemStoreLimitLowMark
return|;
block|}
specifier|public
name|void
name|requestFlush
parameter_list|(
name|HRegion
name|r
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
if|if
condition|(
operator|!
name|regionsInQueue
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
comment|// This entry has no delay so it will be added at the top of the flush
comment|// queue.  It'll come out near immediately.
name|FlushRegionEntry
name|fqe
init|=
operator|new
name|FlushRegionEntry
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|this
operator|.
name|regionsInQueue
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|fqe
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushQueue
operator|.
name|add
argument_list|(
name|fqe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|requestDelayedFlush
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
if|if
condition|(
operator|!
name|regionsInQueue
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
comment|// This entry has some delay
name|FlushRegionEntry
name|fqe
init|=
operator|new
name|FlushRegionEntry
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|fqe
operator|.
name|requeue
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsInQueue
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|fqe
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushQueue
operator|.
name|add
argument_list|(
name|fqe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getFlushQueueSize
parameter_list|()
block|{
return|return
name|flushQueue
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Only interrupt once it's done with a run through the work loop.    */
name|void
name|interruptIfNecessary
parameter_list|()
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|FlushHandler
name|flushHander
range|:
name|flushHandlers
control|)
block|{
if|if
condition|(
name|flushHander
operator|!=
literal|null
condition|)
name|flushHander
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|start
parameter_list|(
name|UncaughtExceptionHandler
name|eh
parameter_list|)
block|{
name|ThreadFactory
name|flusherThreadFactory
init|=
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
operator|+
literal|"-MemStoreFlusher"
argument_list|,
name|eh
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flushHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|flushHandlers
index|[
name|i
index|]
operator|=
operator|new
name|FlushHandler
argument_list|(
literal|"MemStoreFlusher."
operator|+
name|i
argument_list|)
expr_stmt|;
name|flusherThreadFactory
operator|.
name|newThread
argument_list|(
name|flushHandlers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|flushHandlers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|isAlive
parameter_list|()
block|{
for|for
control|(
name|FlushHandler
name|flushHander
range|:
name|flushHandlers
control|)
block|{
if|if
condition|(
name|flushHander
operator|!=
literal|null
operator|&&
name|flushHander
operator|.
name|isAlive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|join
parameter_list|()
block|{
for|for
control|(
name|FlushHandler
name|flushHander
range|:
name|flushHandlers
control|)
block|{
if|if
condition|(
name|flushHander
operator|!=
literal|null
condition|)
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|flushHander
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * A flushRegion that checks store file count.  If too many, puts the flush    * on delay queue to retry later.    * @param fqe    * @return true if the region was successfully flushed, false otherwise. If    * false, there will be accompanying log messages explaining why the log was    * not flushed.    */
specifier|private
name|boolean
name|flushRegion
parameter_list|(
specifier|final
name|FlushRegionEntry
name|fqe
parameter_list|)
block|{
name|HRegion
name|region
init|=
name|fqe
operator|.
name|region
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
operator|&&
name|isTooManyStoreFiles
argument_list|(
name|region
argument_list|)
condition|)
block|{
if|if
condition|(
name|fqe
operator|.
name|isMaximumWait
argument_list|(
name|this
operator|.
name|blockingWaitTime
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waited "
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|fqe
operator|.
name|createTime
operator|)
operator|+
literal|"ms on a compaction to clean up 'too many store files'; waited "
operator|+
literal|"long enough... proceeding with flush of "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If this is first time we've been put off, then emit a log message.
if|if
condition|(
name|fqe
operator|.
name|getRequeueCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// Note: We don't impose blockingStoreFiles constraint on meta regions
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" has too many "
operator|+
literal|"store files; delaying flush up to "
operator|+
name|this
operator|.
name|blockingWaitTime
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|server
operator|.
name|compactSplitThread
operator|.
name|requestSplit
argument_list|(
name|region
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|server
operator|.
name|compactSplitThread
operator|.
name|requestSystemCompaction
argument_list|(
name|region
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|e
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|e
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed for region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Put back on the queue.  Have it come back out of the queue
comment|// after a delay of this.blockingWaitTime / 100 ms.
name|this
operator|.
name|flushQueue
operator|.
name|add
argument_list|(
name|fqe
operator|.
name|requeue
argument_list|(
name|this
operator|.
name|blockingWaitTime
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell a lie, it's not flushed but it's ok
return|return
literal|true
return|;
block|}
block|}
return|return
name|flushRegion
argument_list|(
name|region
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * Flush a region.    * @param region Region to flush.    * @param emergencyFlush Set if we are being force flushed. If true the region    * needs to be removed from the flush queue. If false, when we were called    * from the main flusher run loop and we got the entry to flush by calling    * poll on the flush queue (which removed it).    *    * @return true if the region was successfully flushed, false otherwise. If    * false, there will be accompanying log messages explaining why the log was    * not flushed.    */
specifier|private
name|boolean
name|flushRegion
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|boolean
name|emergencyFlush
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInQueue
init|)
block|{
name|FlushRegionEntry
name|fqe
init|=
name|this
operator|.
name|regionsInQueue
operator|.
name|remove
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqe
operator|!=
literal|null
operator|&&
name|emergencyFlush
condition|)
block|{
comment|// Need to remove from region from delay queue.  When NOT an
comment|// emergencyFlush, then item was removed via a flushQueue.poll.
name|flushQueue
operator|.
name|remove
argument_list|(
name|fqe
argument_list|)
expr_stmt|;
block|}
block|}
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|notifyFlushRequest
argument_list|(
name|region
argument_list|,
name|emergencyFlush
argument_list|)
expr_stmt|;
name|boolean
name|shouldCompact
init|=
name|region
operator|.
name|flushcache
argument_list|()
operator|.
name|isCompactionNeeded
argument_list|()
decl_stmt|;
comment|// We just want to check the size
name|boolean
name|shouldSplit
init|=
name|region
operator|.
name|checkSplit
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|shouldSplit
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|compactSplitThread
operator|.
name|requestSplit
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldCompact
condition|)
block|{
name|server
operator|.
name|compactSplitThread
operator|.
name|requestSystemCompaction
argument_list|(
name|region
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
comment|// Cache flush can fail in a few places. If it fails in a critical
comment|// section, we get a DroppedSnapshotException and a replay of hlog
comment|// is required. Currently the only way to do this is a restart of
comment|// the server. Abort because hdfs is probably bad (HBASE-644 is a case
comment|// where hdfs was bad but passed the hdfs check).
name|server
operator|.
name|abort
argument_list|(
literal|"Replay of HLog required. Forcing server shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|=
name|ex
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|ex
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|ex
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed"
operator|+
operator|(
name|region
operator|!=
literal|null
condition|?
operator|(
literal|" for region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|)
else|:
literal|""
operator|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|wakeUpIfBlocking
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|notifyFlushRequest
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|boolean
name|emergencyFlush
parameter_list|)
block|{
name|FlushType
name|type
init|=
name|FlushType
operator|.
name|NORMAL
decl_stmt|;
if|if
condition|(
name|emergencyFlush
condition|)
block|{
name|type
operator|=
name|isAboveHighWaterMark
argument_list|()
condition|?
name|FlushType
operator|.
name|ABOVE_HIGHER_MARK
else|:
name|FlushType
operator|.
name|ABOVE_LOWER_MARK
expr_stmt|;
block|}
for|for
control|(
name|FlushRequestListener
name|listener
range|:
name|flushRequestListeners
control|)
block|{
name|listener
operator|.
name|flushRequested
argument_list|(
name|type
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|wakeUpIfBlocking
parameter_list|()
block|{
synchronized|synchronized
init|(
name|blockSignal
init|)
block|{
name|blockSignal
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isTooManyStoreFiles
parameter_list|(
name|HRegion
name|region
parameter_list|)
block|{
for|for
control|(
name|Store
name|store
range|:
name|region
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|store
operator|.
name|hasTooManyStoreFiles
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if the regionserver's memstore memory usage is greater than the    * limit. If so, flush regions with the biggest memstores until we're down    * to the lower limit. This method blocks callers until we're down to a safe    * amount of memstore consumption.    */
specifier|public
name|void
name|reclaimMemStoreMemory
parameter_list|()
block|{
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"MemStoreFluser.reclaimMemStoreMemory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAboveHighWaterMark
argument_list|()
condition|)
block|{
if|if
condition|(
name|Trace
operator|.
name|isTracing
argument_list|()
condition|)
block|{
name|scope
operator|.
name|getSpan
argument_list|()
operator|.
name|addTimelineAnnotation
argument_list|(
literal|"Force Flush. We're above high water mark."
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|blockSignal
init|)
block|{
name|boolean
name|blocked
init|=
literal|false
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
name|isAboveHighWaterMark
argument_list|()
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|blocked
condition|)
block|{
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocking updates on "
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|": the global memstore size "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|server
operator|.
name|getRegionServerAccounting
argument_list|()
operator|.
name|getGlobalMemstoreSize
argument_list|()
argument_list|)
operator|+
literal|" is>= than blocking "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|globalMemStoreLimit
argument_list|)
operator|+
literal|" size"
argument_list|)
expr_stmt|;
block|}
name|blocked
operator|=
literal|true
expr_stmt|;
name|wakeupFlushThread
argument_list|()
expr_stmt|;
try|try
block|{
comment|// we should be able to wait forever, but we've seen a bug where
comment|// we miss a notify, so put a 5 second bound on it at least.
name|blockSignal
operator|.
name|wait
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting"
argument_list|)
expr_stmt|;
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
name|long
name|took
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Memstore is above high water mark and block "
operator|+
name|took
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|interrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blocked
condition|)
block|{
specifier|final
name|long
name|totalTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|totalTime
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|updatesBlockedMsHighWater
operator|.
name|add
argument_list|(
name|totalTime
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Unblocking updates for server "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isAboveLowWaterMark
argument_list|()
condition|)
block|{
name|wakeupFlushThread
argument_list|()
expr_stmt|;
block|}
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"flush_queue="
operator|+
name|flushQueue
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|dumpQueue
parameter_list|()
block|{
name|StringBuilder
name|queueList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queueList
operator|.
name|append
argument_list|(
literal|"Flush Queue Queue dump:\n"
argument_list|)
expr_stmt|;
name|queueList
operator|.
name|append
argument_list|(
literal|"  Flush Queue:\n"
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FlushQueueEntry
argument_list|>
name|it
init|=
name|flushQueue
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|queueList
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queueList
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|queueList
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Register a MemstoreFlushListener    * @param listener    */
specifier|public
name|void
name|registerFlushRequestListener
parameter_list|(
specifier|final
name|FlushRequestListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|flushRequestListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unregister the listener from MemstoreFlushListeners    * @param listener    * @return true when passed listener is unregistered successfully.    */
specifier|public
name|boolean
name|unregisterFlushRequestListener
parameter_list|(
specifier|final
name|FlushRequestListener
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|flushRequestListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
comment|/**    * Sets the global memstore limit to a new size.    * @param globalMemStoreSize    */
specifier|public
name|void
name|setGlobalMemstoreLimit
parameter_list|(
name|long
name|globalMemStoreSize
parameter_list|)
block|{
name|this
operator|.
name|globalMemStoreLimit
operator|=
name|globalMemStoreSize
expr_stmt|;
name|this
operator|.
name|globalMemStoreLimitLowMark
operator|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|globalMemStoreLimitLowMarkPercent
operator|*
name|globalMemStoreSize
argument_list|)
expr_stmt|;
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|globalMemStoreLimit
return|;
block|}
interface|interface
name|FlushQueueEntry
extends|extends
name|Delayed
block|{}
comment|/**    * Token to insert into the flush queue that ensures that the flusher does not sleep    */
specifier|static
class|class
name|WakeupFlushThread
implements|implements
name|FlushQueueEntry
block|{
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|this
operator|==
name|obj
operator|)
return|;
block|}
block|}
comment|/**    * Datastructure used in the flush queue.  Holds region and retry count.    * Keeps tabs on how old this object is.  Implements {@link Delayed}.  On    * construction, the delay is zero. When added to a delay queue, we'll come    * out near immediately.  Call {@link #requeue(long)} passing delay in    * milliseconds before readding to delay queue if you want it to stay there    * a while.    */
specifier|static
class|class
name|FlushRegionEntry
implements|implements
name|FlushQueueEntry
block|{
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|final
name|long
name|createTime
decl_stmt|;
specifier|private
name|long
name|whenToExpire
decl_stmt|;
specifier|private
name|int
name|requeueCount
init|=
literal|0
decl_stmt|;
name|FlushRegionEntry
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|whenToExpire
operator|=
name|this
operator|.
name|createTime
expr_stmt|;
block|}
comment|/**      * @param maximumWait      * @return True if we have been delayed><code>maximumWait</code> milliseconds.      */
specifier|public
name|boolean
name|isMaximumWait
parameter_list|(
specifier|final
name|long
name|maximumWait
parameter_list|)
block|{
return|return
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|createTime
operator|)
operator|>
name|maximumWait
return|;
block|}
comment|/**      * @return Count of times {@link #requeue(long)} was called; i.e this is      * number of times we've been requeued.      */
specifier|public
name|int
name|getRequeueCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|requeueCount
return|;
block|}
comment|/**      * @param when When to expire, when to come up out of the queue.      * Specify in milliseconds.  This method adds EnvironmentEdgeManager.currentTimeMillis()      * to whatever you pass.      * @return This.      */
specifier|public
name|FlushRegionEntry
name|requeue
parameter_list|(
specifier|final
name|long
name|when
parameter_list|)
block|{
name|this
operator|.
name|whenToExpire
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|when
expr_stmt|;
name|this
operator|.
name|requeueCount
operator|++
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|this
operator|.
name|whenToExpire
operator|-
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|other
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|other
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[flush region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Delayed
name|other
init|=
operator|(
name|Delayed
operator|)
name|obj
decl_stmt|;
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
block|}
end_class

begin_enum
enum|enum
name|FlushType
block|{
name|NORMAL
block|,
name|ABOVE_LOWER_MARK
block|,
name|ABOVE_HIGHER_MARK
block|; }
end_enum

end_unit

