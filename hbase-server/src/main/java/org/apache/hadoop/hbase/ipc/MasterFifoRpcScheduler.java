begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DaemonThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A special {@code }RpcScheduler} only used for master. This scheduler separates RegionServerReport  * requests to independent handlers to avoid these requests block other requests. To use this  * scheduler, please set "hbase.master.rpc.scheduler.factory.class" to  * "org.apache.hadoop.hbase.ipc.MasterFifoRpcScheduler".  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MasterFifoRpcScheduler
extends|extends
name|FifoRpcScheduler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterFifoRpcScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set RSReport requests handlers count when masters use MasterFifoRpcScheduler. The default value    * is half of "hbase.regionserver.handler.count" value, but at least 1. The other handlers count    * is "hbase.regionserver.handler.count" value minus RSReport handlers count, but at least 1 too.    */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_SERVER_REPORT_HANDLER_COUNT
init|=
literal|"hbase.master.server.report.handler.count"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_SERVER_REPORT
init|=
literal|"RegionServerReport"
decl_stmt|;
specifier|private
specifier|final
name|int
name|rsReportHandlerCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|rsRsreportMaxQueueLength
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|rsReportQueueSize
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|rsReportExecutor
decl_stmt|;
specifier|public
name|MasterFifoRpcScheduler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|callHandlerCount
parameter_list|,
name|int
name|rsReportHandlerCount
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|callHandlerCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsReportHandlerCount
operator|=
name|rsReportHandlerCount
expr_stmt|;
name|this
operator|.
name|rsRsreportMaxQueueLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|RpcScheduler
operator|.
name|IPC_SERVER_MAX_CALLQUEUE_LENGTH
argument_list|,
name|rsReportHandlerCount
operator|*
name|RpcServer
operator|.
name|DEFAULT_MAX_CALLQUEUE_LENGTH_PER_HANDLER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using {} as call queue; handlerCount={}; maxQueueLength={}; rsReportHandlerCount={}; "
operator|+
literal|"rsReportMaxQueueLength={}"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|handlerCount
argument_list|,
name|maxQueueLength
argument_list|,
name|rsReportHandlerCount
argument_list|,
name|rsRsreportMaxQueueLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|handlerCount
argument_list|,
name|handlerCount
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|maxQueueLength
argument_list|)
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
literal|"MasterFifoRpcScheduler.call.handler"
argument_list|)
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsReportExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|rsReportHandlerCount
argument_list|,
name|rsReportHandlerCount
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|rsRsreportMaxQueueLength
argument_list|)
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
literal|"MasterFifoRpcScheduler.RSReport.handler"
argument_list|)
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|rsReportExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dispatch
parameter_list|(
specifier|final
name|CallRunner
name|task
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|method
init|=
name|getCallMethod
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsReportExecutor
operator|!=
literal|null
operator|&&
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|equals
argument_list|(
name|REGION_SERVER_REPORT
argument_list|)
condition|)
block|{
return|return
name|executeRpcCall
argument_list|(
name|rsReportExecutor
argument_list|,
name|rsReportQueueSize
argument_list|,
name|task
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|executeRpcCall
argument_list|(
name|executor
argument_list|,
name|queueSize
argument_list|,
name|task
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getGeneralQueueLength
parameter_list|()
block|{
return|return
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|rsReportExecutor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getActiveRpcHandlerCount
parameter_list|()
block|{
return|return
name|executor
operator|.
name|getActiveCount
argument_list|()
operator|+
name|rsReportExecutor
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallQueueInfo
name|getCallQueueInfo
parameter_list|()
block|{
name|String
name|queueName
init|=
literal|"Master Fifo Queue"
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|methodCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|methodSize
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CallQueueInfo
name|callQueueInfo
init|=
operator|new
name|CallQueueInfo
argument_list|()
decl_stmt|;
name|callQueueInfo
operator|.
name|setCallMethodCount
argument_list|(
name|queueName
argument_list|,
name|methodCount
argument_list|)
expr_stmt|;
name|callQueueInfo
operator|.
name|setCallMethodSize
argument_list|(
name|queueName
argument_list|,
name|methodSize
argument_list|)
expr_stmt|;
name|updateMethodCountAndSizeByQueue
argument_list|(
name|executor
operator|.
name|getQueue
argument_list|()
argument_list|,
name|methodCount
argument_list|,
name|methodSize
argument_list|)
expr_stmt|;
name|updateMethodCountAndSizeByQueue
argument_list|(
name|rsReportExecutor
operator|.
name|getQueue
argument_list|()
argument_list|,
name|methodCount
argument_list|,
name|methodSize
argument_list|)
expr_stmt|;
return|return
name|callQueueInfo
return|;
block|}
block|}
end_class

end_unit

