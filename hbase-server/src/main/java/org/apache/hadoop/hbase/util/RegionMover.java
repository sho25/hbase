begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * Tool for loading/unloading regions to/from given regionserver This tool can be run from Command  * line directly as a utility. Supports Ack/No Ack mode for loading/unloading operations.Ack mode  * acknowledges if regions are online after movement while noAck mode is best effort mode that  * improves performance but will still move on if region is stuck/not moved. Motivation behind noAck  * mode being RS shutdown where even if a Region is stuck, upon shutdown master will move it  * anyways. This can also be used by constructiong an Object using the builder and then calling  * {@link #load()} or {@link #unload()} methods for the desired operations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|RegionMover
extends|extends
name|AbstractHBaseTool
implements|implements
name|Closeable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MOVE_RETRIES_MAX_KEY
init|=
literal|"hbase.move.retries.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MOVE_WAIT_MAX_KEY
init|=
literal|"hbase.move.wait.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVERSTART_WAIT_MAX_KEY
init|=
literal|"hbase.serverstart.wait.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MOVE_RETRIES_MAX
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MOVE_WAIT_MAX
init|=
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SERVERSTART_WAIT_MAX
init|=
literal|180
decl_stmt|;
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionMover
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegionMoverBuilder
name|rmbuilder
decl_stmt|;
specifier|private
name|boolean
name|ack
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxthreads
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
specifier|private
name|String
name|loadUnload
decl_stmt|;
specifier|private
name|String
name|hostname
decl_stmt|;
specifier|private
name|String
name|filename
decl_stmt|;
specifier|private
name|String
name|excludeFile
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
name|RegionMover
parameter_list|(
name|RegionMoverBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|hostname
operator|=
name|builder
operator|.
name|hostname
expr_stmt|;
name|this
operator|.
name|filename
operator|=
name|builder
operator|.
name|filename
expr_stmt|;
name|this
operator|.
name|excludeFile
operator|=
name|builder
operator|.
name|excludeFile
expr_stmt|;
name|this
operator|.
name|maxthreads
operator|=
name|builder
operator|.
name|maxthreads
expr_stmt|;
name|this
operator|.
name|ack
operator|=
name|builder
operator|.
name|ack
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|builder
operator|.
name|port
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|builder
operator|.
name|timeout
expr_stmt|;
name|setConf
argument_list|(
name|builder
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
specifier|private
name|RegionMover
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|this
operator|.
name|admin
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|this
operator|.
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builder for Region mover. Use the {@link #build()} method to create RegionMover object. Has    * {@link #filename(String)}, {@link #excludeFile(String)}, {@link #maxthreads(int)},    * {@link #ack(boolean)}, {@link #timeout(int)} methods to set the corresponding options    */
specifier|public
specifier|static
class|class
name|RegionMoverBuilder
block|{
specifier|private
name|boolean
name|ack
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxthreads
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|timeout
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|String
name|hostname
decl_stmt|;
specifier|private
name|String
name|filename
decl_stmt|;
specifier|private
name|String
name|excludeFile
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|defaultDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|RegionMoverBuilder
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
argument_list|(
name|hostname
argument_list|,
name|createConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new configuration and sets region mover specific overrides      */
specifier|private
specifier|static
name|Configuration
name|createConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.prefetch.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**      * @param hostname Hostname to unload regions from or load regions to. Can be either hostname      *     or hostname:port.      * @param conf Configuration object      */
specifier|public
name|RegionMoverBuilder
parameter_list|(
name|String
name|hostname
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|splitHostname
init|=
name|hostname
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|this
operator|.
name|hostname
operator|=
name|splitHostname
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|splitHostname
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitHostname
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|port
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_PORT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|filename
operator|=
name|defaultDir
operator|+
name|File
operator|.
name|separator
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
name|this
operator|.
name|hostname
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**      * Path of file where regions will be written to during unloading/read from during loading      * @param filename      * @return RegionMoverBuilder object      */
specifier|public
name|RegionMoverBuilder
name|filename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the max number of threads that will be used to move regions      */
specifier|public
name|RegionMoverBuilder
name|maxthreads
parameter_list|(
name|int
name|threads
parameter_list|)
block|{
name|this
operator|.
name|maxthreads
operator|=
name|threads
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Path of file containing hostnames to be excluded during region movement. Exclude file should      * have 'host:port' per line. Port is mandatory here as we can have many RS running on a single      * host.      */
specifier|public
name|RegionMoverBuilder
name|excludeFile
parameter_list|(
name|String
name|excludefile
parameter_list|)
block|{
name|this
operator|.
name|excludeFile
operator|=
name|excludefile
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set ack/noAck mode.      *<p>      * In ack mode regions are acknowledged before and after moving and the move is retried      * hbase.move.retries.max times, if unsuccessful we quit with exit code 1.No Ack mode is a best      * effort mode,each region movement is tried once.This can be used during graceful shutdown as      * even if we have a stuck region,upon shutdown it'll be reassigned anyway.      *<p>      * @param ack      * @return RegionMoverBuilder object      */
specifier|public
name|RegionMoverBuilder
name|ack
parameter_list|(
name|boolean
name|ack
parameter_list|)
block|{
name|this
operator|.
name|ack
operator|=
name|ack
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the timeout for Load/Unload operation in seconds.This is a global timeout,threadpool for      * movers also have a separate time which is hbase.move.wait.max * number of regions to      * load/unload      * @param timeout in seconds      * @return RegionMoverBuilder object      */
specifier|public
name|RegionMoverBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * This method builds the appropriate RegionMover object which can then be used to load/unload      * using load and unload methods      * @return RegionMover object      */
specifier|public
name|RegionMover
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RegionMover
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Move Regions and make sure that they are up on the target server.If a region movement fails we    * exit as failure    */
specifier|private
class|class
name|MoveWithAck
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|RegionInfo
name|region
decl_stmt|;
specifier|private
name|ServerName
name|targetServer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
decl_stmt|;
specifier|private
name|ServerName
name|sourceServer
decl_stmt|;
specifier|public
name|MoveWithAck
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sourceServer
parameter_list|,
name|ServerName
name|targetServer
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|targetServer
operator|=
name|targetServer
expr_stmt|;
name|this
operator|.
name|movedRegions
operator|=
name|movedRegions
expr_stmt|;
name|this
operator|.
name|sourceServer
operator|=
name|sourceServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|moved
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|retries
init|=
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MOVE_RETRIES_MAX_KEY
argument_list|,
name|DEFAULT_MOVE_RETRIES_MAX
argument_list|)
decl_stmt|;
name|int
name|maxWaitInSeconds
init|=
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MOVE_WAIT_MAX_KEY
argument_list|,
name|DEFAULT_MOVE_WAIT_MAX
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|boolean
name|sameServer
init|=
literal|true
decl_stmt|;
comment|// Assert we can scan the region in its current location
name|isSuccessfulScan
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving region:"
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" from "
operator|+
name|sourceServer
operator|+
literal|" to "
operator|+
name|targetServer
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|<
name|retries
operator|&&
name|sameServer
condition|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retry "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
operator|+
literal|" of maximum "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|retries
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|count
operator|+
literal|1
expr_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|maxWait
init|=
name|startTime
operator|+
operator|(
name|maxWaitInSeconds
operator|*
literal|1000
operator|)
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|maxWait
condition|)
block|{
name|sameServer
operator|=
name|isSameServer
argument_list|(
name|region
argument_list|,
name|sourceServer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sameServer
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sameServer
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Region: "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" stuck on "
operator|+
name|this
operator|.
name|sourceServer
operator|+
literal|",newServer="
operator|+
name|this
operator|.
name|targetServer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isSuccessfulScan
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved Region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" cost:"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.3f"
argument_list|,
call|(
name|float
call|)
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
argument_list|)
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|moved
operator|=
literal|true
expr_stmt|;
name|movedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|moved
return|;
block|}
block|}
comment|/**    * Move Regions without Acknowledging.Usefule in case of RS shutdown as we might want to shut the    * RS down anyways and not abort on a stuck region. Improves movement performance    */
specifier|private
class|class
name|MoveWithoutAck
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|RegionInfo
name|region
decl_stmt|;
specifier|private
name|ServerName
name|targetServer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
decl_stmt|;
specifier|private
name|ServerName
name|sourceServer
decl_stmt|;
specifier|public
name|MoveWithoutAck
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sourceServer
parameter_list|,
name|ServerName
name|targetServer
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|targetServer
operator|=
name|targetServer
expr_stmt|;
name|this
operator|.
name|movedRegions
operator|=
name|movedRegions
expr_stmt|;
name|this
operator|.
name|sourceServer
operator|=
name|sourceServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving region:"
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" from "
operator|+
name|sourceServer
operator|+
literal|" to "
operator|+
name|targetServer
argument_list|)
expr_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" from "
operator|+
name|sourceServer
operator|+
literal|" to "
operator|+
name|targetServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Moving Region:"
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we add region to the moved regions list in No Ack Mode since this is best effort
name|movedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Loads the specified {@link #hostname} with regions listed in the {@link #filename} RegionMover    * Object has to be created using {@link #RegionMover(RegionMoverBuilder)}    * @return true if loading succeeded, false otherwise    */
specifier|public
name|boolean
name|load
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ExecutorService
name|loadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|loadTask
init|=
name|loadPool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToMove
init|=
name|readRegionsFromFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsToMove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No regions to load.Exiting"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|loadRegions
argument_list|(
name|regionsToMove
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while loading regions to "
operator|+
name|hostname
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
decl_stmt|;
return|return
name|waitTaskToFinish
argument_list|(
name|loadPool
argument_list|,
name|loadTask
argument_list|,
literal|"loading"
argument_list|)
return|;
block|}
specifier|private
name|void
name|loadRegions
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToMove
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerName
name|server
init|=
name|getTargetServer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|regionsToMove
operator|.
name|size
argument_list|()
operator|+
literal|" regions to "
operator|+
name|server
operator|+
literal|" using "
operator|+
name|this
operator|.
name|maxthreads
operator|+
literal|" threads.Ack mode:"
operator|+
name|this
operator|.
name|ack
argument_list|)
expr_stmt|;
name|ExecutorService
name|moveRegionsPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|this
operator|.
name|maxthreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|taskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
name|RegionInfo
name|region
init|=
name|regionsToMove
operator|.
name|get
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|ServerName
name|currentServer
init|=
name|getServerNameForRegion
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentServer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get server for Region:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" moving on"
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|currentServer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is already on target server="
operator|+
name|server
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ack
condition|)
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
name|moveRegionsPool
operator|.
name|submit
argument_list|(
operator|new
name|MoveWithAck
argument_list|(
name|region
argument_list|,
name|currentServer
argument_list|,
name|server
argument_list|,
name|movedRegions
argument_list|)
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
name|moveRegionsPool
operator|.
name|submit
argument_list|(
operator|new
name|MoveWithoutAck
argument_list|(
name|region
argument_list|,
name|currentServer
argument_list|,
name|server
argument_list|,
name|movedRegions
argument_list|)
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|moveRegionsPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|long
name|timeoutInSeconds
init|=
name|regionsToMove
operator|.
name|size
argument_list|()
operator|*
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|MOVE_WAIT_MAX_KEY
argument_list|,
name|DEFAULT_MOVE_WAIT_MAX
argument_list|)
decl_stmt|;
name|waitMoveTasksToFinish
argument_list|(
name|moveRegionsPool
argument_list|,
name|taskList
argument_list|,
name|timeoutInSeconds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unload regions from given {@link #hostname} using ack/noAck mode and {@link #maxthreads}.In    * noAck mode we do not make sure that region is successfully online on the target region    * server,hence it is best effort.We do not unload regions to hostnames given in    * {@link #excludeFile}.    * @return true if unloading succeeded, false otherwise    */
specifier|public
name|boolean
name|unload
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|deleteFile
argument_list|(
name|this
operator|.
name|filename
argument_list|)
expr_stmt|;
name|ExecutorService
name|unloadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|unloadTask
init|=
name|unloadPool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get Online RegionServers
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|regionServers
operator|.
name|addAll
argument_list|(
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the host Region server from target Region Servers list
name|ServerName
name|server
init|=
name|stripServer
argument_list|(
name|regionServers
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
comment|// Remove RS present in the exclude file
name|stripExcludes
argument_list|(
name|regionServers
argument_list|)
expr_stmt|;
name|stripMaster
argument_list|(
name|regionServers
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No Regions were moved - no servers available"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|unloadRegions
argument_list|(
name|server
argument_list|,
name|regionServers
argument_list|,
name|movedRegions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while unloading regions "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|movedRegions
operator|!=
literal|null
condition|)
block|{
name|writeFile
argument_list|(
name|filename
argument_list|,
name|movedRegions
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|)
decl_stmt|;
return|return
name|waitTaskToFinish
argument_list|(
name|unloadPool
argument_list|,
name|unloadTask
argument_list|,
literal|"unloading"
argument_list|)
return|;
block|}
specifier|private
name|void
name|unloadRegions
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToMove
init|=
name|admin
operator|.
name|getRegions
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|regionsToMove
operator|.
name|removeAll
argument_list|(
name|movedRegions
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionsToMove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No Regions to move....Quitting now"
argument_list|)
expr_stmt|;
break|break;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|regionsToMove
operator|.
name|size
argument_list|()
operator|+
literal|" regions from "
operator|+
name|this
operator|.
name|hostname
operator|+
literal|" to "
operator|+
name|regionServers
operator|.
name|size
argument_list|()
operator|+
literal|" servers using "
operator|+
name|this
operator|.
name|maxthreads
operator|+
literal|" threads .Ack Mode:"
operator|+
name|ack
argument_list|)
expr_stmt|;
name|ExecutorService
name|moveRegionsPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|this
operator|.
name|maxthreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|taskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|serverIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|regionsToMove
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|ack
condition|)
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
name|moveRegionsPool
operator|.
name|submit
argument_list|(
operator|new
name|MoveWithAck
argument_list|(
name|regionsToMove
operator|.
name|get
argument_list|(
name|counter
argument_list|)
argument_list|,
name|server
argument_list|,
name|regionServers
operator|.
name|get
argument_list|(
name|serverIndex
argument_list|)
argument_list|,
name|movedRegions
argument_list|)
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
name|moveRegionsPool
operator|.
name|submit
argument_list|(
operator|new
name|MoveWithoutAck
argument_list|(
name|regionsToMove
operator|.
name|get
argument_list|(
name|counter
argument_list|)
argument_list|,
name|server
argument_list|,
name|regionServers
operator|.
name|get
argument_list|(
name|serverIndex
argument_list|)
argument_list|,
name|movedRegions
argument_list|)
argument_list|)
decl_stmt|;
name|taskList
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
name|serverIndex
operator|=
operator|(
name|serverIndex
operator|+
literal|1
operator|)
operator|%
name|regionServers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|moveRegionsPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|long
name|timeoutInSeconds
init|=
name|regionsToMove
operator|.
name|size
argument_list|()
operator|*
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|MOVE_WAIT_MAX_KEY
argument_list|,
name|DEFAULT_MOVE_WAIT_MAX
argument_list|)
decl_stmt|;
name|waitMoveTasksToFinish
argument_list|(
name|moveRegionsPool
argument_list|,
name|taskList
argument_list|,
name|timeoutInSeconds
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|waitTaskToFinish
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
name|Future
argument_list|<
name|Boolean
argument_list|>
name|task
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|pool
operator|.
name|awaitTermination
argument_list|(
operator|(
name|long
operator|)
name|this
operator|.
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timed out before finishing the "
operator|+
name|operation
operator|+
literal|" operation. Timeout: "
operator|+
name|this
operator|.
name|timeout
operator|+
literal|"sec"
argument_list|)
expr_stmt|;
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
return|return
name|task
operator|.
name|get
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while "
operator|+
name|operation
operator|+
literal|" Regions on "
operator|+
name|this
operator|.
name|hostname
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while "
operator|+
name|operation
operator|+
literal|" regions on RegionServer "
operator|+
name|this
operator|.
name|hostname
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|waitMoveTasksToFinish
parameter_list|(
name|ExecutorService
name|moveRegionsPool
parameter_list|,
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|taskList
parameter_list|,
name|long
name|timeoutInSeconds
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
operator|!
name|moveRegionsPool
operator|.
name|awaitTermination
argument_list|(
name|timeoutInSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|moveRegionsPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|moveRegionsPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
range|:
name|taskList
control|)
block|{
try|try
block|{
comment|// if even after shutdownNow threads are stuck we wait for 5 secs max
if|if
condition|(
operator|!
name|future
operator|.
name|get
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Was Not able to move region....Exiting Now"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not move region Exception"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while waiting for Thread to Complete "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got Exception From Thread While moving region "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread for moving region cancelled. Timeout for cancellation:"
operator|+
name|timeoutInSeconds
operator|+
literal|"secs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
name|ServerName
name|getTargetServer
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerName
name|server
init|=
literal|null
decl_stmt|;
name|int
name|maxWaitInSeconds
init|=
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|SERVERSTART_WAIT_MAX_KEY
argument_list|,
name|DEFAULT_SERVERSTART_WAIT_MAX
argument_list|)
decl_stmt|;
name|long
name|maxWait
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|maxWaitInSeconds
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|maxWait
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|regionServers
operator|.
name|addAll
argument_list|(
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the host Region server from target Region Servers list
name|server
operator|=
name|stripServer
argument_list|(
name|regionServers
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" is not up yet, waiting"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get list of region servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Server "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" is not up. Giving up."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Server "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" to load regions not online"
argument_list|)
throw|;
block|}
return|return
name|server
return|;
block|}
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|readRegionsFromFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|regions
return|;
block|}
try|try
init|(
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|int
name|numRegions
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|numRegions
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|RegionInfo
operator|.
name|parseFromOrNull
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|dis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while reading regions from file:"
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|regions
return|;
block|}
comment|/**    * Write the number of regions moved in the first line followed by regions moved in subsequent    * lines    */
specifier|private
name|void
name|writeFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|movedRegions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeInt
argument_list|(
name|movedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|movedRegions
control|)
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|dos
argument_list|,
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR: Was Not able to write regions moved to output file but moved "
operator|+
name|movedRegions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|deleteFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return List of servers from the exclude file in format 'hostname:port'.    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readExcludes
parameter_list|(
name|String
name|excludeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludeServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeFile
operator|==
literal|null
condition|)
block|{
return|return
name|excludeServers
return|;
block|}
else|else
block|{
try|try
block|{
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|excludeFile
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|filter
argument_list|(
operator|(
operator|(
name|Predicate
argument_list|<
name|String
argument_list|>
operator|)
name|String
operator|::
name|isEmpty
operator|)
operator|.
name|negate
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|forEach
argument_list|(
name|excludeServers
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while reading excludes file, continuing anyways"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|excludeServers
return|;
block|}
block|}
comment|/**    * Excludes the servername whose hostname and port portion matches the list given in exclude file    */
specifier|private
name|void
name|stripExcludes
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|excludeFile
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|readExcludes
argument_list|(
name|excludeFile
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ServerName
argument_list|>
name|i
init|=
name|regionServers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|rs
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|rsPort
init|=
name|rs
operator|.
name|split
argument_list|(
name|ServerName
operator|.
name|SERVERNAME_SEPARATOR
argument_list|)
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
operator|+
name|rs
operator|.
name|split
argument_list|(
name|ServerName
operator|.
name|SERVERNAME_SEPARATOR
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|contains
argument_list|(
name|rsPort
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Valid Region server targets are:"
operator|+
name|regionServers
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Excluded Servers are"
operator|+
name|excludes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Exclude master from list of RSs to move regions to    */
specifier|private
name|void
name|stripMaster
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerName
name|master
init|=
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER
argument_list|)
argument_list|)
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|stripServer
argument_list|(
name|regionServers
argument_list|,
name|master
operator|.
name|getHostname
argument_list|()
argument_list|,
name|master
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the servername whose hostname and port portion matches from the passed array of servers.    * Returns as side-effect the servername removed.    * @return server removed from list of Region Servers    */
specifier|private
name|ServerName
name|stripServer
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionServers
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ServerName
argument_list|>
name|iter
init|=
name|regionServers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServerName
name|server
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostname
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|hostname
argument_list|)
operator|&&
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|port
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Tries to scan a row from passed region    */
specifier|private
name|void
name|isSuccessfulScan
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
operator|.
name|setOneRowLimit
argument_list|()
operator|.
name|setMaxResultSize
argument_list|(
literal|1L
argument_list|)
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not scan region:"
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Returns true if passed region is still on serverName when we look at hbase:meta.    * @return true if region is hosted on serverName otherwise false    */
specifier|private
name|boolean
name|isSameServer
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerName
name|serverForRegion
init|=
name|getServerNameForRegion
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverForRegion
operator|!=
literal|null
operator|&&
name|serverForRegion
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get servername that is up in hbase:meta hosting the given region. this is hostname + port +    * startcode comma-delimited. Can return null    * @return regionServer hosting the given region    */
specifier|private
name|ServerName
name|getServerNameForRegion
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
return|return
name|loc
operator|.
name|getServerName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|this
operator|.
name|addRequiredOptWithArg
argument_list|(
literal|"r"
argument_list|,
literal|"regionserverhost"
argument_list|,
literal|"region server<hostname>|<hostname:port>"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addRequiredOptWithArg
argument_list|(
literal|"o"
argument_list|,
literal|"operation"
argument_list|,
literal|"Expected: load/unload"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addOptWithArg
argument_list|(
literal|"m"
argument_list|,
literal|"maxthreads"
argument_list|,
literal|"Define the maximum number of threads to use to unload and reload the regions"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addOptWithArg
argument_list|(
literal|"x"
argument_list|,
literal|"excludefile"
argument_list|,
literal|"File with<hostname:port> per line to exclude as unload targets; default excludes only "
operator|+
literal|"target host; useful for rack decommisioning."
argument_list|)
expr_stmt|;
name|this
operator|.
name|addOptWithArg
argument_list|(
literal|"f"
argument_list|,
literal|"filename"
argument_list|,
literal|"File to save regions list into unloading, or read from loading; "
operator|+
literal|"default /tmp/<usernamehostname:port>"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addOptNoArg
argument_list|(
literal|"n"
argument_list|,
literal|"noack"
argument_list|,
literal|"Turn on No-Ack mode(default: false) which won't check if region is online on target "
operator|+
literal|"RegionServer, hence best effort. This is more performant in unloading and loading "
operator|+
literal|"but might lead to region being unavailable for some time till master reassigns it "
operator|+
literal|"in case the move failed"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addOptWithArg
argument_list|(
literal|"t"
argument_list|,
literal|"timeout"
argument_list|,
literal|"timeout in seconds after which the tool will exit "
operator|+
literal|"irrespective of whether it finished or not;default Integer.MAX_VALUE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|String
name|hostname
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"r"
argument_list|)
decl_stmt|;
name|rmbuilder
operator|=
operator|new
name|RegionMoverBuilder
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|'m'
argument_list|)
condition|)
block|{
name|rmbuilder
operator|.
name|maxthreads
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|'m'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|'n'
argument_list|)
condition|)
block|{
name|rmbuilder
operator|.
name|ack
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|'f'
argument_list|)
condition|)
block|{
name|rmbuilder
operator|.
name|filename
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|'x'
argument_list|)
condition|)
block|{
name|rmbuilder
operator|.
name|excludeFile
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|'x'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|'t'
argument_list|)
condition|)
block|{
name|rmbuilder
operator|.
name|timeout
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|'t'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|loadUnload
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"o"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|success
decl_stmt|;
try|try
init|(
name|RegionMover
name|rm
init|=
name|rmbuilder
operator|.
name|build
argument_list|()
init|)
block|{
if|if
condition|(
name|loadUnload
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"load"
argument_list|)
condition|)
block|{
name|success
operator|=
name|rm
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loadUnload
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unload"
argument_list|)
condition|)
block|{
name|success
operator|=
name|rm
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
operator|(
name|success
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
init|(
name|RegionMover
name|mover
init|=
operator|new
name|RegionMover
argument_list|()
init|)
block|{
name|mover
operator|.
name|doStaticMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

