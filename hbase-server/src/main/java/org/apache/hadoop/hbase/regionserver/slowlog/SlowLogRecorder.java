begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|slowlog
package|;
end_package

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|BlockingWaitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|RingBuffer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|dsl
operator|.
name|Disruptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|dsl
operator|.
name|ProducerType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TooSlowLog
operator|.
name|SlowLogPayload
import|;
end_import

begin_comment
comment|/**  * Online SlowLog Provider Service that keeps slow RPC logs in the ring buffer.  * The service uses LMAX Disruptor to save slow records which are then consumed by  * a queue and based on the ring buffer size, the available records are then fetched  * from the queue in thread-safe manner.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|SlowLogRecorder
block|{
specifier|private
specifier|final
name|Disruptor
argument_list|<
name|RingBufferEnvelope
argument_list|>
name|disruptor
decl_stmt|;
specifier|private
specifier|final
name|SlowLogEventHandler
name|slowLogEventHandler
decl_stmt|;
specifier|private
specifier|final
name|int
name|eventCount
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isOnlineSlowLogProviderEnabled
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SLOW_LOG_RING_BUFFER_SIZE
init|=
literal|"hbase.regionserver.slowlog.ringbuffer.size"
decl_stmt|;
comment|/**    * Initialize disruptor with configurable ringbuffer size    */
specifier|public
name|SlowLogRecorder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|isOnlineSlowLogProviderEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|SLOW_LOG_BUFFER_ENABLED_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ONLINE_LOG_PROVIDER_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOnlineSlowLogProviderEnabled
condition|)
block|{
name|this
operator|.
name|disruptor
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|slowLogEventHandler
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|eventCount
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|eventCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SLOW_LOG_RING_BUFFER_SIZE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_SLOW_LOG_RING_BUFFER_SIZE
argument_list|)
expr_stmt|;
comment|// This is the 'writer' -- a single threaded executor. This single thread consumes what is
comment|// put on the ringbuffer.
specifier|final
name|String
name|hostingThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// disruptor initialization with BlockingWaitStrategy
name|this
operator|.
name|disruptor
operator|=
operator|new
name|Disruptor
argument_list|<>
argument_list|(
name|RingBufferEnvelope
operator|::
operator|new
argument_list|,
name|getEventCount
argument_list|()
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
name|hostingThreadName
operator|+
literal|".slowlog.append"
argument_list|)
argument_list|,
name|ProducerType
operator|.
name|MULTI
argument_list|,
operator|new
name|BlockingWaitStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|disruptor
operator|.
name|setDefaultExceptionHandler
argument_list|(
operator|new
name|DisruptorExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize ringbuffer event handler
name|this
operator|.
name|slowLogEventHandler
operator|=
operator|new
name|SlowLogEventHandler
argument_list|(
name|this
operator|.
name|eventCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|disruptor
operator|.
name|handleEventsWith
argument_list|(
operator|new
name|SlowLogEventHandler
index|[]
block|{
name|this
operator|.
name|slowLogEventHandler
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|disruptor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// must be power of 2 for disruptor ringbuffer
specifier|private
name|int
name|getEventCount
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|eventCount
operator|>=
literal|0
argument_list|,
name|SLOW_LOG_RING_BUFFER_SIZE
operator|+
literal|" must be> 0"
argument_list|)
expr_stmt|;
name|int
name|floor
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|eventCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|floor
operator|==
name|eventCount
condition|)
block|{
return|return
name|floor
return|;
block|}
comment|// max capacity is 1<< 30
if|if
condition|(
name|floor
operator|>=
literal|1
operator|<<
literal|29
condition|)
block|{
return|return
literal|1
operator|<<
literal|30
return|;
block|}
return|return
name|floor
operator|<<
literal|1
return|;
block|}
comment|/**    * Retrieve online slow logs from ringbuffer    *    * @param request slow log request parameters    * @return online slow logs from ringbuffer    */
specifier|public
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|getSlowLogPayloads
parameter_list|(
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
parameter_list|)
block|{
return|return
name|isOnlineSlowLogProviderEnabled
condition|?
name|this
operator|.
name|slowLogEventHandler
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**    * clears slow log payloads from ringbuffer    *    * @return true if slow log payloads are cleaned up or    *   hbase.regionserver.slowlog.buffer.enabled is not set to true, false if failed to    *   clean up slow logs    */
specifier|public
name|boolean
name|clearSlowLogPayloads
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOnlineSlowLogProviderEnabled
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|this
operator|.
name|slowLogEventHandler
operator|.
name|clearSlowLogs
argument_list|()
return|;
block|}
comment|/**    * Add slow log rpcCall details to ringbuffer    *    * @param rpcLogDetails all details of rpc call that would be useful for ring buffer    *   consumers    */
specifier|public
name|void
name|addSlowLogPayload
parameter_list|(
name|RpcLogDetails
name|rpcLogDetails
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOnlineSlowLogProviderEnabled
condition|)
block|{
return|return;
block|}
name|RingBuffer
argument_list|<
name|RingBufferEnvelope
argument_list|>
name|ringBuffer
init|=
name|this
operator|.
name|disruptor
operator|.
name|getRingBuffer
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
name|ringBuffer
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|ringBuffer
operator|.
name|get
argument_list|(
name|seqId
argument_list|)
operator|.
name|load
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ringBuffer
operator|.
name|publish
argument_list|(
name|seqId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

