begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The MemStoreCompactorSegmentsIterator extends MemStoreSegmentsIterator  * and performs the scan for compaction operation meaning it is based on SQM  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MemStoreCompactorSegmentsIterator
extends|extends
name|MemStoreSegmentsIterator
block|{
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|hasMore
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|kvsIterator
decl_stmt|;
comment|// scanner on top of pipeline scanner that uses ScanQueryMatcher
specifier|private
name|StoreScanner
name|compactingScanner
decl_stmt|;
comment|// C-tor
specifier|public
name|MemStoreCompactorSegmentsIterator
parameter_list|(
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|segments
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|int
name|compactionKVMax
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|compactionKVMax
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|()
decl_stmt|;
comment|// create the list of scanners to traverse over all the data
comment|// no dirty reads here as these are immutable segments
name|int
name|order
init|=
name|segments
operator|.
name|size
argument_list|()
decl_stmt|;
name|AbstractMemStore
operator|.
name|addToScanners
argument_list|(
name|segments
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|order
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
comment|// build the scanner based on Query Matcher
comment|// reinitialize the compacting scanner for each instance of iterator
name|compactingScanner
operator|=
name|createScanner
argument_list|(
name|store
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
name|hasMore
operator|=
name|compactingScanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|kvsIterator
operator|=
name|kvs
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|kvsIterator
operator|==
literal|null
condition|)
block|{
comment|// for the case when the result is empty
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|kvsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// refillKVS() method should be invoked only if !kvsIterator.hasNext()
if|if
condition|(
operator|!
name|refillKVS
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|kvsIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|next
parameter_list|()
block|{
if|if
condition|(
name|kvsIterator
operator|==
literal|null
condition|)
block|{
comment|// for the case when the result is empty
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|kvsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// refillKVS() method should be invoked only if !kvsIterator.hasNext()
if|if
condition|(
operator|!
name|refillKVS
argument_list|()
condition|)
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|!
name|hasMore
operator|)
condition|?
literal|null
else|:
name|kvsIterator
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|compactingScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|compactingScanner
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Creates the scanner for compacting the pipeline.    * @return the scanner    */
specifier|private
name|StoreScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get all available versions
return|return
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|,
name|OptionalInt
operator|.
name|of
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|scanners
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|,
name|store
operator|.
name|getSmallestReadPoint
argument_list|()
argument_list|,
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/* Refill kev-value set (should be invoked only when KVS is empty)    * Returns true if KVS is non-empty */
specifier|private
name|boolean
name|refillKVS
parameter_list|()
block|{
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// clear previous KVS, first initiated in the constructor
if|if
condition|(
operator|!
name|hasMore
condition|)
block|{
comment|// if there is nothing expected next in compactingScanner
return|return
literal|false
return|;
block|}
try|try
block|{
comment|// try to get next KVS
name|hasMore
operator|=
name|compactingScanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// is the new KVS empty ?
name|kvsIterator
operator|=
name|kvs
operator|.
name|iterator
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// KVS is empty, but hasMore still true?
if|if
condition|(
name|hasMore
condition|)
block|{
comment|// try to move to next row
return|return
name|refillKVS
argument_list|()
return|;
block|}
block|}
return|return
name|hasMore
return|;
block|}
block|}
end_class

end_unit

