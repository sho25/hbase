begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
operator|.
name|delegate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
operator|.
name|ExceptionDispatcher
import|;
end_import

begin_comment
comment|/**  * Helper class for exception handler factories.  * @param<D> Type of delegate to use  * @param<T> type of generic error listener to update  * @param<E> exception to expect for errors  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|DelegatingExceptionDispatcher
parameter_list|<
name|D
extends|extends
name|ExceptionDispatcher
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
parameter_list|,
name|T
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ExceptionDispatcher
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
block|{
specifier|protected
specifier|final
name|D
name|delegate
decl_stmt|;
specifier|public
name|DelegatingExceptionDispatcher
parameter_list|(
name|D
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
literal|"delegate - "
operator|+
name|delegate
operator|.
name|getName
argument_list|()
argument_list|,
name|delegate
operator|.
name|getDefaultVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExceptionVisitor
argument_list|<
name|T
argument_list|>
name|getDefaultVisitor
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getDefaultVisitor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|receiveError
parameter_list|(
name|String
name|message
parameter_list|,
name|E
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
name|delegate
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|e
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|L
parameter_list|>
name|void
name|addErrorListener
parameter_list|(
name|ExceptionVisitor
argument_list|<
name|L
argument_list|>
name|visitor
parameter_list|,
name|L
name|errorable
parameter_list|)
block|{
name|delegate
operator|.
name|addErrorListener
argument_list|(
name|visitor
argument_list|,
name|errorable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failOnError
parameter_list|()
throws|throws
name|E
block|{
name|delegate
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkForError
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|checkForError
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addErrorListener
parameter_list|(
name|T
name|errorable
parameter_list|)
block|{
name|delegate
operator|.
name|addErrorListener
argument_list|(
name|errorable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

