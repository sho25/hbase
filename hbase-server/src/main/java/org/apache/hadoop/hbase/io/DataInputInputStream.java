begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An InputStream that wraps a DataInput.  * @see DataOutputOutputStream  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DataInputInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|DataInput
name|in
decl_stmt|;
comment|/**    * Construct an InputStream from the given DataInput. If 'in'    * is already an InputStream, simply returns it. Otherwise, wraps    * it in an InputStream.    * @param in the DataInput to wrap    * @return an InputStream instance that reads from 'in'    */
specifier|public
specifier|static
name|InputStream
name|constructInputStream
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|instanceof
name|InputStream
condition|)
block|{
return|return
operator|(
name|InputStream
operator|)
name|in
return|;
block|}
else|else
block|{
return|return
operator|new
name|DataInputInputStream
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|public
name|DataInputInputStream
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readUnsignedByte
argument_list|()
return|;
block|}
block|}
end_class

end_unit

