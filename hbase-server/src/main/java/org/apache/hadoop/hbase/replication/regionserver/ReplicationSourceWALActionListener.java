begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_comment
comment|/**  * Used to receive new wals.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ReplicationSourceWALActionListener
implements|implements
name|WALActionsListener
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSourceManager
name|manager
decl_stmt|;
specifier|public
name|ReplicationSourceWALActionListener
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ReplicationSourceManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preLogRoll
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|manager
operator|.
name|preLogRoll
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postLogRoll
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|manager
operator|.
name|postLogRoll
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|scopeWALEdits
argument_list|(
name|logKey
argument_list|,
name|logEdit
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility method used to set the correct scopes on each log key. Doesn't set a scope on keys from    * compaction WAL edits and if the scope is local.    * @param logKey Key that may get scoped according to its edits    * @param logEdit Edits used to lookup the scopes    * @throws IOException If failed to parse the WALEdit    */
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|scopeWALEdits
parameter_list|(
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|replicationForBulkLoadEnabled
init|=
name|ReplicationUtils
operator|.
name|isReplicationForBulkLoadDataEnabled
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|foundOtherEdits
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|logEdit
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
condition|)
block|{
name|foundOtherEdits
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundOtherEdits
operator|&&
name|logEdit
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|WALProtos
operator|.
name|RegionEventDescriptor
name|maybeEvent
init|=
name|WALEdit
operator|.
name|getRegionEventDescriptor
argument_list|(
name|logEdit
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeEvent
operator|!=
literal|null
operator|&&
operator|(
name|maybeEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|EventType
operator|.
name|REGION_CLOSE
operator|)
condition|)
block|{
comment|// In serially replication, we use scopes when reading close marker.
name|foundOtherEdits
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
operator|!
name|replicationForBulkLoadEnabled
operator|&&
operator|!
name|foundOtherEdits
operator|)
operator|||
name|logEdit
operator|.
name|isReplay
argument_list|()
condition|)
block|{
operator|(
operator|(
name|WALKeyImpl
operator|)
name|logKey
operator|)
operator|.
name|serializeReplicationScope
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

