begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|RowCounter
import|;
end_import

begin_comment
comment|/**  * The filter looks for the given columns in KeyValue. Once there is a match for  * any one of the columns, it returns ReturnCode.NEXT_ROW for remaining  * KeyValues in the row.  *<p>  * Note : It may emit KVs which do not have the given columns in them, if  * these KVs happen to occur before a KV which does have a match. Given this  * caveat, this filter is only useful for special cases like {@link RowCounter}.  *<p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|FirstKeyValueMatchingQualifiersFilter
extends|extends
name|FirstKeyOnlyFilter
block|{
specifier|private
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
decl_stmt|;
comment|/**    * This constructor should not be used.    */
specifier|public
name|FirstKeyValueMatchingQualifiersFilter
parameter_list|()
block|{
name|qualifiers
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor which takes a set of columns. As soon as first KeyValue    * matching any of these columns is found, filter moves to next row.    *     * @param qualifiers the set of columns to me matched.    */
specifier|public
name|FirstKeyValueMatchingQualifiersFilter
parameter_list|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
parameter_list|)
block|{
name|this
operator|.
name|qualifiers
operator|=
name|qualifiers
expr_stmt|;
block|}
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
if|if
condition|(
name|hasFoundKV
argument_list|()
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
elseif|else
if|if
condition|(
name|hasOneMatchingQualifier
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|setFoundKV
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
specifier|private
name|boolean
name|hasOneMatchingQualifier
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|q
range|:
name|qualifiers
control|)
block|{
if|if
condition|(
name|v
operator|.
name|matchingQualifier
argument_list|(
name|q
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

