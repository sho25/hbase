begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * A helper to modify or remove HBase granted user default and access HDFS ACLs over hFiles.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SnapshotScannerHDFSAclHelper
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapshotScannerHDFSAclHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACL_SYNC_TO_HDFS_ENABLE
init|=
literal|"hbase.acl.sync.to.hdfs.enable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACL_SYNC_TO_HDFS_THREAD_NUMBER
init|=
literal|"hbase.acl.sync.to.hdfs.thread.number"
decl_stmt|;
comment|// The tmp directory to restore snapshot, it can not be a sub directory of HBase root dir
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_TMP_DIR
init|=
literal|"hbase.snapshot.restore.tmp.dir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_TMP_DIR_DEFAULT
init|=
literal|"/hbase/.tmpdir-to-restore-snapshot"
decl_stmt|;
comment|// The default permission of the common directories if the feature is enabled.
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DIRECTORY_PERMISSION
init|=
literal|"hbase.acl.sync.to.hdfs.common.directory.permission"
decl_stmt|;
comment|// The secure HBase permission is 700, 751 means all others have execute access and the mask is
comment|// set to read-execute to make the extended access ACL entries can work. Be cautious to set
comment|// this value.
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DIRECTORY_PERMISSION_DEFAULT
init|=
literal|"751"
decl_stmt|;
comment|// The default permission of the snapshot restore directories if the feature is enabled.
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_DIRECTORY_PERMISSION
init|=
literal|"hbase.acl.sync.to.hdfs.restore.directory.permission"
decl_stmt|;
comment|// 753 means all others have write-execute access.
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_DIRECTORY_PERMISSION_DEFAULT
init|=
literal|"753"
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|PathHelper
name|pathHelper
decl_stmt|;
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
specifier|public
name|SnapshotScannerHDFSAclHelper
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|pathHelper
operator|=
operator|new
name|PathHelper
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|pathHelper
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|ACL_SYNC_TO_HDFS_THREAD_NUMBER
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"hdfs-acl-thread-%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setCommonDirectoryPermission
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set public directory permission to 751 to make all users have access permission.
comment|// And we also need the access permission of the parent of HBase root directory, but
comment|// it's not set here, because the owner of HBase root directory may don't own permission
comment|// to change it's parent permission to 751.
comment|// The {root/.tmp} and {root/.tmp/data} directories are created to make global user HDFS
comment|// ACLs can be inherited.
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pathHelper
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getMobDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getTmpDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getArchiveDir
argument_list|()
argument_list|)
decl_stmt|;
name|paths
operator|.
name|addAll
argument_list|(
name|getGlobalRootPaths
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|createDirIfNotExist
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|COMMON_DIRECTORY_PERMISSION
argument_list|,
name|COMMON_DIRECTORY_PERMISSION_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create snapshot restore directory
name|Path
name|restoreDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SNAPSHOT_RESTORE_TMP_DIR
argument_list|,
name|SNAPSHOT_RESTORE_TMP_DIR_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|createDirIfNotExist
argument_list|(
name|restoreDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|restoreDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SNAPSHOT_RESTORE_DIRECTORY_PERMISSION
argument_list|,
name|SNAPSHOT_RESTORE_DIRECTORY_PERMISSION_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set acl when grant user permission    * @param userPermission the user and permission    * @param skipNamespaces the namespace set to skip set acl because already set    * @param skipTables the table set to skip set acl because already set    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|grantAcl
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handleGrantOrRevokeAcl
argument_list|(
name|userPermission
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|MODIFY
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set HDFS acl when grant {}, cost {} ms"
argument_list|,
name|userPermission
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error when grant: {}"
argument_list|,
name|userPermission
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove acl when grant or revoke user permission    * @param userPermission the user and permission    * @param skipNamespaces the namespace set to skip remove acl    * @param skipTables the table set to skip remove acl    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|revokeAcl
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handleGrantOrRevokeAcl
argument_list|(
name|userPermission
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set HDFS acl when revoke {}, cost {} ms"
argument_list|,
name|userPermission
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error when revoke: {}"
argument_list|,
name|userPermission
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Set acl when take a snapshot    * @param snapshot the snapshot desc    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|snapshotAcl
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|snapshot
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// global user permission can be inherited from default acl automatically
name|Set
argument_list|<
name|String
argument_list|>
name|userSet
init|=
name|getUsersWithTableReadAction
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|userSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Path
name|path
init|=
name|pathHelper
operator|.
name|getSnapshotDir
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|handleHDFSAcl
argument_list|(
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|userSet
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|MODIFY
argument_list|,
literal|true
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT_ADN_ACCESS
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Set HDFS acl when snapshot {}, cost {} ms"
argument_list|,
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error when snapshot {}"
argument_list|,
name|snapshot
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove table access acl from namespace dir when delete table    * @param tableName the table    * @param removeUsers the users whose access acl will be removed    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|removeNamespaceAccessAcl
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|removeUsers
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|removeUsers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|handleNamespaceAccessAcl
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|removeUsers
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove HDFS acl when {} table {}, cost {} ms"
argument_list|,
name|operation
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Remove HDFS acl error when {} table {}"
argument_list|,
name|operation
argument_list|,
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove default acl from namespace archive dir when delete namespace    * @param namespace the namespace    * @param removeUsers the users whose default acl will be removed    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|removeNamespaceDefaultAcl
parameter_list|(
name|String
name|namespace
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|removeUsers
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|archiveNsDir
init|=
name|pathHelper
operator|.
name|getArchiveNsDir
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|HDFSAclOperation
name|operation
init|=
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|archiveNsDir
argument_list|,
name|removeUsers
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
argument_list|,
literal|false
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|operation
operator|.
name|handleAcl
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove HDFS acl when delete namespace {}, cost {} ms"
argument_list|,
name|namespace
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Remove HDFS acl error when delete namespace {}"
argument_list|,
name|namespace
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove default acl from table archive dir when delete table    * @param tableName the table name    * @param removeUsers the users whose default acl will be removed    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|removeTableDefaultAcl
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|removeUsers
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|archiveTableDir
init|=
name|pathHelper
operator|.
name|getArchiveTableDir
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HDFSAclOperation
name|operation
init|=
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|archiveTableDir
argument_list|,
name|removeUsers
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
argument_list|,
literal|false
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|operation
operator|.
name|handleAcl
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove HDFS acl when delete table {}, cost {} ms"
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Remove HDFS acl error when delete table {}"
argument_list|,
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Add table user acls    * @param tableName the table    * @param users the table users with READ permission    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|addTableAcl
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|users
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
init|=
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|MODIFY
decl_stmt|;
name|handleNamespaceAccessAcl
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|users
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
name|handleTableAcl
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|users
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Set HDFS acl when {} table {}, cost {} ms"
argument_list|,
name|operation
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error when {} table {}"
argument_list|,
name|operation
argument_list|,
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove table acls when modify table    * @param tableName the table    * @param users the table users with READ permission    * @return false if an error occurred, otherwise true    */
specifier|public
name|boolean
name|removeTableAcl
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|)
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|users
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|handleTableAcl
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|users
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Set HDFS acl when create or modify table {}, cost {} ms"
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error when create or modify table {}"
argument_list|,
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|handleGrantOrRevokeAcl
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|userPermission
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|userPermission
operator|.
name|getAccessScope
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
name|handleGlobalAcl
argument_list|(
name|users
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAMESPACE
case|:
name|NamespacePermission
name|namespacePermission
init|=
operator|(
name|NamespacePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|handleNamespaceAcl
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|namespacePermission
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|,
name|users
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|TablePermission
name|tablePermission
init|=
operator|(
name|TablePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|handleNamespaceAccessAcl
argument_list|(
name|tablePermission
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|users
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
name|handleTableAcl
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tablePermission
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|users
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal user permission scope "
operator|+
name|userPermission
operator|.
name|getAccessScope
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|handleGlobalAcl
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|,
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
comment|// handle global root directories HDFS acls
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|hdfsAclOperations
init|=
name|getGlobalRootPaths
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|path
lambda|->
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|users
argument_list|,
name|operationType
argument_list|,
literal|false
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT_ADN_ACCESS
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|handleHDFSAclParallel
argument_list|(
name|hdfsAclOperations
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// handle namespace HDFS acls
name|handleNamespaceAcl
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|admin
operator|.
name|listNamespaces
argument_list|()
argument_list|)
argument_list|,
name|users
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleNamespaceAcl
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|,
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|namespaces
operator|.
name|removeAll
argument_list|(
name|skipNamespaces
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|remove
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
comment|// handle namespace root directories HDFS acls
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|hdfsAclOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|skipTableNamespaces
init|=
name|skipTables
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TableName
operator|::
name|getNamespaceAsString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
comment|/**        * When op is REMOVE, remove the DEFAULT namespace ACL while keep the ACCESS for skipTables,        * otherwise remove both the DEFAULT + ACCESS ACLs. When op is MODIFY, just operate the        * DEFAULT + ACCESS ACLs.        */
name|HDFSAclOperation
operator|.
name|OperationType
name|op
init|=
name|operationType
decl_stmt|;
name|HDFSAclOperation
operator|.
name|AclType
name|aclType
init|=
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT_ADN_ACCESS
decl_stmt|;
if|if
condition|(
name|operationType
operator|==
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
operator|&&
name|skipTableNamespaces
operator|.
name|contains
argument_list|(
name|ns
argument_list|)
condition|)
block|{
comment|// remove namespace directories default HDFS acls for skip tables
name|op
operator|=
name|HDFSAclOperation
operator|.
name|OperationType
operator|.
name|REMOVE
expr_stmt|;
name|aclType
operator|=
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT
expr_stmt|;
block|}
for|for
control|(
name|Path
name|path
range|:
name|getNamespaceRootPaths
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|hdfsAclOperations
operator|.
name|add
argument_list|(
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|users
argument_list|,
name|op
argument_list|,
literal|false
argument_list|,
name|aclType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|handleHDFSAclParallel
argument_list|(
name|hdfsAclOperations
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// handle table directories HDFS acls
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespaces
control|)
block|{
name|tables
operator|.
name|addAll
argument_list|(
name|admin
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|this
operator|::
name|isAclSyncToHdfsEnabled
argument_list|)
operator|.
name|map
argument_list|(
name|TableDescriptor
operator|::
name|getTableName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handleTableAcl
argument_list|(
name|tables
argument_list|,
name|users
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|,
name|operationType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleTableAcl
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
parameter_list|,
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|filterTableNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
operator|!
name|skipTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
operator|&&
operator|!
name|skipNamespaces
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
name|filterTableNames
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// handle table HDFS acls
for|for
control|(
name|TableName
name|tableName
range|:
name|filterTableNames
control|)
block|{
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|hdfsAclOperations
init|=
name|getTableRootPaths
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|path
lambda|->
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|users
argument_list|,
name|operationType
argument_list|,
literal|true
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|DEFAULT_ADN_ACCESS
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|handleHDFSAclSequential
argument_list|(
name|hdfsAclOperations
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|handleNamespaceAccessAcl
parameter_list|(
name|String
name|namespace
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|HDFSAclOperation
operator|.
name|OperationType
name|operationType
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
comment|// handle namespace access HDFS acls
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|hdfsAclOperations
init|=
name|getNamespaceRootPaths
argument_list|(
name|namespace
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|path
lambda|->
operator|new
name|HDFSAclOperation
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|users
argument_list|,
name|operationType
argument_list|,
literal|false
argument_list|,
name|HDFSAclOperation
operator|.
name|AclType
operator|.
name|ACCESS
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|handleHDFSAclParallel
argument_list|(
name|hdfsAclOperations
argument_list|)
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|void
name|createTableDirectories
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|getTableRootPaths
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|createDirIfNotExist
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * return paths that user will global permission will visit    * @return the path list    */
name|List
argument_list|<
name|Path
argument_list|>
name|getGlobalRootPaths
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pathHelper
operator|.
name|getTmpDataDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getMobDataDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getArchiveDataDir
argument_list|()
argument_list|,
name|pathHelper
operator|.
name|getSnapshotRootDir
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * return paths that user will namespace permission will visit    * @param namespace the namespace    * @return the path list    */
name|List
argument_list|<
name|Path
argument_list|>
name|getNamespaceRootPaths
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pathHelper
operator|.
name|getTmpNsDir
argument_list|(
name|namespace
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getDataNsDir
argument_list|(
name|namespace
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getMobDataNsDir
argument_list|(
name|namespace
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getArchiveNsDir
argument_list|(
name|namespace
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * return paths that user will table permission will visit    * @param tableName the table    * @param includeSnapshotPath true if return table snapshots paths, otherwise false    * @return the path list    * @throws IOException if an error occurred    */
name|List
argument_list|<
name|Path
argument_list|>
name|getTableRootPaths
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|includeSnapshotPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pathHelper
operator|.
name|getTmpTableDir
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getDataTableDir
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getMobTableDir
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|pathHelper
operator|.
name|getArchiveTableDir
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeSnapshotPath
condition|)
block|{
name|paths
operator|.
name|addAll
argument_list|(
name|getTableSnapshotPaths
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getTableSnapshotPaths
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|admin
operator|.
name|listSnapshots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|snapDesc
lambda|->
name|snapDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|snapshotDescription
lambda|->
name|pathHelper
operator|.
name|getSnapshotDir
argument_list|(
name|snapshotDescription
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return users with global read permission    * @return users with global read permission    * @throws IOException if an error occurred    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getUsersWithGlobalReadAction
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getUsersWithReadAction
argument_list|(
name|PermissionStorage
operator|.
name|getGlobalPermissions
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return users with namespace read permission    * @param namespace the namespace    * @param includeGlobal true if include users with global read action    * @return users with namespace read permission    * @throws IOException if an error occurred    */
name|Set
argument_list|<
name|String
argument_list|>
name|getUsersWithNamespaceReadAction
parameter_list|(
name|String
name|namespace
parameter_list|,
name|boolean
name|includeGlobal
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
name|getUsersWithReadAction
argument_list|(
name|PermissionStorage
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeGlobal
condition|)
block|{
name|users
operator|.
name|addAll
argument_list|(
name|getUsersWithGlobalReadAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|users
return|;
block|}
comment|/**    * Return users with table read permission    * @param tableName the table    * @param includeNamespace true if include users with namespace read action    * @param includeGlobal true if include users with global read action    * @return users with table read permission    * @throws IOException if an error occurred    */
name|Set
argument_list|<
name|String
argument_list|>
name|getUsersWithTableReadAction
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|includeNamespace
parameter_list|,
name|boolean
name|includeGlobal
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
name|getUsersWithReadAction
argument_list|(
name|PermissionStorage
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeNamespace
condition|)
block|{
name|users
operator|.
name|addAll
argument_list|(
name|getUsersWithNamespaceReadAction
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|includeGlobal
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|users
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getUsersWithReadAction
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|permissionMultimap
parameter_list|)
block|{
return|return
name|permissionMultimap
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|entry
lambda|->
name|checkUserPermission
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkUserPermission
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|)
block|{
name|boolean
name|result
init|=
name|containReadAction
argument_list|(
name|userPermission
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|&&
name|userPermission
operator|.
name|getPermission
argument_list|()
operator|instanceof
name|TablePermission
condition|)
block|{
name|result
operator|=
name|isNotFamilyOrQualifierPermission
argument_list|(
operator|(
name|TablePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|boolean
name|containReadAction
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|)
block|{
return|return
name|userPermission
operator|.
name|getPermission
argument_list|()
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
return|;
block|}
name|boolean
name|isNotFamilyOrQualifierPermission
parameter_list|(
name|TablePermission
name|tablePermission
parameter_list|)
block|{
return|return
operator|!
name|tablePermission
operator|.
name|hasFamily
argument_list|()
operator|&&
operator|!
name|tablePermission
operator|.
name|hasQualifier
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAclSyncToHdfsEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|masterCoprocessors
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|masterCoprocessorSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterCoprocessors
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|masterCoprocessorSet
argument_list|,
name|masterCoprocessors
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|SnapshotScannerHDFSAclHelper
operator|.
name|ACL_SYNC_TO_HDFS_ENABLE
argument_list|,
literal|false
argument_list|)
operator|&&
name|masterCoprocessorSet
operator|.
name|contains
argument_list|(
name|SnapshotScannerHDFSAclController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|masterCoprocessorSet
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|boolean
name|isAclSyncToHdfsEnabled
parameter_list|(
name|TableDescriptor
name|tableDescriptor
parameter_list|)
block|{
return|return
name|tableDescriptor
operator|==
literal|null
condition|?
literal|false
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|tableDescriptor
operator|.
name|getValue
argument_list|(
name|ACL_SYNC_TO_HDFS_ENABLE
argument_list|)
argument_list|)
return|;
block|}
name|PathHelper
name|getPathHelper
parameter_list|()
block|{
return|return
name|pathHelper
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|handleHDFSAcl
parameter_list|(
name|HDFSAclOperation
name|acl
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|childAclOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|handleAcl
argument_list|()
expr_stmt|;
name|childAclOperations
operator|=
name|acl
operator|.
name|getChildAclOperations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Skip handle acl if file not found
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error for path {}"
argument_list|,
name|acl
operator|.
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|childAclOperations
return|;
block|}
argument_list|,
name|pool
argument_list|)
operator|.
name|thenComposeAsync
argument_list|(
name|this
operator|::
name|handleHDFSAclParallel
argument_list|,
name|pool
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|handleHDFSAclSequential
parameter_list|(
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|operations
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
for|for
control|(
name|HDFSAclOperation
name|hdfsAclOperation
range|:
name|operations
control|)
block|{
name|handleHDFSAcl
argument_list|(
name|hdfsAclOperation
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set HDFS acl error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|,
name|pool
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|handleHDFSAclParallel
parameter_list|(
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|operations
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|operations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|handleHDFSAcl
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|AclEntry
name|aclEntry
parameter_list|(
name|AclEntryScope
name|scope
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|setType
argument_list|(
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|name
argument_list|)
condition|?
name|GROUP
else|:
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setPermission
argument_list|(
name|READ_EXECUTE
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|void
name|createDirIfNotExist
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|deleteEmptyDir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
operator|&&
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Inner class used to describe modify or remove what type of acl entries(ACCESS, DEFAULT,    * ACCESS_AND_DEFAULT) for files or directories(and child files).    */
specifier|private
specifier|static
class|class
name|HDFSAclOperation
block|{
enum|enum
name|OperationType
block|{
name|MODIFY
block|,
name|REMOVE
block|}
enum|enum
name|AclType
block|{
name|ACCESS
block|,
name|DEFAULT
block|,
name|DEFAULT_ADN_ACCESS
block|}
specifier|private
interface|interface
name|Operation
block|{
name|void
name|apply
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclList
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
name|Operation
name|operation
decl_stmt|;
specifier|private
name|boolean
name|recursive
decl_stmt|;
specifier|private
name|AclType
name|aclType
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|defaultAndAccessAclEntries
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|accessAclEntries
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|defaultAclEntries
decl_stmt|;
name|HDFSAclOperation
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|OperationType
name|operationType
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|AclType
name|aclType
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|defaultAndAccessAclEntries
operator|=
name|getAclEntries
argument_list|(
name|AclType
operator|.
name|DEFAULT_ADN_ACCESS
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|this
operator|.
name|accessAclEntries
operator|=
name|getAclEntries
argument_list|(
name|AclType
operator|.
name|ACCESS
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultAclEntries
operator|=
name|getAclEntries
argument_list|(
name|AclType
operator|.
name|DEFAULT
argument_list|,
name|users
argument_list|)
expr_stmt|;
if|if
condition|(
name|operationType
operator|==
name|OperationType
operator|.
name|MODIFY
condition|)
block|{
name|operation
operator|=
name|FileSystem
operator|::
name|modifyAclEntries
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operationType
operator|==
name|OperationType
operator|.
name|REMOVE
condition|)
block|{
name|operation
operator|=
name|FileSystem
operator|::
name|removeAclEntries
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal HDFS acl operation type: "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
name|this
operator|.
name|aclType
operator|=
name|aclType
expr_stmt|;
block|}
name|HDFSAclOperation
parameter_list|(
name|Path
name|path
parameter_list|,
name|HDFSAclOperation
name|parent
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|parent
operator|.
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|defaultAndAccessAclEntries
operator|=
name|parent
operator|.
name|defaultAndAccessAclEntries
expr_stmt|;
name|this
operator|.
name|accessAclEntries
operator|=
name|parent
operator|.
name|accessAclEntries
expr_stmt|;
name|this
operator|.
name|defaultAclEntries
operator|=
name|parent
operator|.
name|defaultAclEntries
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|parent
operator|.
name|operation
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|parent
operator|.
name|recursive
expr_stmt|;
name|this
operator|.
name|aclType
operator|=
name|parent
operator|.
name|aclType
expr_stmt|;
block|}
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|getChildAclOperations
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HDFSAclOperation
argument_list|>
name|hdfsAclOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|recursive
operator|&&
name|fs
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fileStatuses
control|)
block|{
name|hdfsAclOperations
operator|.
name|add
argument_list|(
operator|new
name|HDFSAclOperation
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hdfsAclOperations
return|;
block|}
name|void
name|handleAcl
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|aclType
condition|)
block|{
case|case
name|ACCESS
case|:
name|operation
operator|.
name|apply
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|accessAclEntries
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT
case|:
name|operation
operator|.
name|apply
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|defaultAclEntries
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT_ADN_ACCESS
case|:
name|operation
operator|.
name|apply
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|defaultAndAccessAclEntries
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal HDFS acl type: "
operator|+
name|aclType
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|operation
operator|.
name|apply
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|accessAclEntries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getAclEntries
parameter_list|(
name|AclType
name|aclType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|)
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|aclType
condition|)
block|{
case|case
name|ACCESS
case|:
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|aclEntries
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEFAULT
case|:
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|aclEntries
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEFAULT_ADN_ACCESS
case|:
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|aclEntries
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|aclEntries
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal HDFS acl type: "
operator|+
name|aclType
argument_list|)
throw|;
block|}
return|return
name|aclEntries
return|;
block|}
block|}
specifier|static
specifier|final
class|class
name|PathHelper
block|{
name|Configuration
name|conf
decl_stmt|;
name|Path
name|rootDir
decl_stmt|;
name|Path
name|tmpDataDir
decl_stmt|;
name|Path
name|dataDir
decl_stmt|;
name|Path
name|mobDataDir
decl_stmt|;
name|Path
name|archiveDataDir
decl_stmt|;
name|Path
name|snapshotDir
decl_stmt|;
name|PathHelper
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|rootDir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|tmpDataDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
argument_list|)
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
expr_stmt|;
name|dataDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
expr_stmt|;
name|mobDataDir
operator|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|rootDir
argument_list|)
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
expr_stmt|;
name|archiveDataDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
argument_list|)
expr_stmt|;
block|}
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|rootDir
return|;
block|}
name|Path
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
return|;
block|}
name|Path
name|getMobDir
parameter_list|()
block|{
return|return
name|mobDataDir
operator|.
name|getParent
argument_list|()
return|;
block|}
name|Path
name|getMobDataDir
parameter_list|()
block|{
return|return
name|mobDataDir
return|;
block|}
name|Path
name|getTmpDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HBASE_TEMP_DIRECTORY
argument_list|)
return|;
block|}
name|Path
name|getTmpDataDir
parameter_list|()
block|{
return|return
name|tmpDataDir
return|;
block|}
name|Path
name|getArchiveDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
return|;
block|}
name|Path
name|getArchiveDataDir
parameter_list|()
block|{
return|return
name|archiveDataDir
return|;
block|}
name|Path
name|getDataNsDir
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|namespace
argument_list|)
return|;
block|}
name|Path
name|getMobDataNsDir
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|mobDataDir
argument_list|,
name|namespace
argument_list|)
return|;
block|}
name|Path
name|getDataTableDir
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getDataNsDir
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|getMobTableDir
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMobDataNsDir
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|getArchiveNsDir
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|archiveDataDir
argument_list|,
name|namespace
argument_list|)
return|;
block|}
name|Path
name|getArchiveTableDir
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getArchiveNsDir
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|getTmpNsDir
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tmpDataDir
argument_list|,
name|namespace
argument_list|)
return|;
block|}
name|Path
name|getTmpTableDir
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getTmpNsDir
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|getSnapshotRootDir
parameter_list|()
block|{
return|return
name|snapshotDir
return|;
block|}
name|Path
name|getSnapshotDir
parameter_list|(
name|String
name|snapshot
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|snapshot
argument_list|)
return|;
block|}
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

