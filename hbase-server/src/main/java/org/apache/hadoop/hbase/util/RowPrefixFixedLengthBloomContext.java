begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Handles ROWPREFIX bloom related context.  * It works with both ByteBufferedCell and byte[] backed cells  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RowPrefixFixedLengthBloomContext
extends|extends
name|RowBloomContext
block|{
specifier|private
specifier|final
name|int
name|prefixLength
decl_stmt|;
specifier|public
name|RowPrefixFixedLengthBloomContext
parameter_list|(
name|BloomFilterWriter
name|bloomFilterWriter
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|int
name|prefixLength
parameter_list|)
block|{
name|super
argument_list|(
name|bloomFilterWriter
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
block|}
specifier|public
name|void
name|writeBloom
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBloom
argument_list|(
name|getRowPrefixCell
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cell the cell    * @return the new cell created by row prefix    */
specifier|private
name|Cell
name|getRowPrefixCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|copyRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
return|return
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|prefixLength
argument_list|,
name|row
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

