begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Utility for {@link TableMapper} and {@link TableReducer}  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|TableMapReduceUtil
block|{
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableMapReduceUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table  The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table  The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|inputFormatClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputValueClass
operator|!=
literal|null
condition|)
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputKeyClass
operator|!=
literal|null
condition|)
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|SCAN
argument_list|,
name|convertScanToString
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @param inputFormatClass The class of the input format    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initCredentials
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|obtainAuthTokenForJob
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted obtaining user authentication token"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes the given scan into a Base64 encoded string.    *    * @param scan  The scan to write out.    * @return The scan saved in a Base64 encoded string.    * @throws IOException When writing the scan fails.    */
specifier|static
name|String
name|convertScanToString
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
name|proto
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the given Base64 string back into a Scan instance.    *    * @param base64  The scan details.    * @return The newly created Scan instance.    * @throws IOException When reading the scan instance fails.    */
specifier|static
name|Scan
name|convertStringToScan
parameter_list|(
name|String
name|base64
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|decoded
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|base64
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|Scan
name|scan
decl_stmt|;
try|try
block|{
name|scan
operator|=
name|ClientProtos
operator|.
name|Scan
operator|.
name|parseFrom
argument_list|(
name|decoded
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|ipbe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ipbe
argument_list|)
throw|;
block|}
return|return
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
name|partitioner
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @param quorumAddress Distant cluster to write to; default is null for    * output to the cluster that is designated in<code>hbase-site.xml</code>.    * Set this String to the zookeeper ensemble of an alternate remote cluster    * when you would have the reduce write a cluster that is other than the    * default; e.g. copying tables between clusters, the source would be    * designated by<code>hbase-site.xml</code> and this param would have the    * ensemble address of the remote cluster.  The format to pass is particular.    * Pass<code>&lt;hbase.zookeeper.quorum>:&lt;hbase.zookeeper.client.port>:&lt;zookeeper.znode.parent>    *</code> such as<code>server,server2,server3:2181:/hbase</code>.    * @param serverClass redefined hbase.regionserver.class    * @param serverImpl redefined hbase.regionserver.impl    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|,
name|String
name|quorumAddress
parameter_list|,
name|String
name|serverClass
parameter_list|,
name|String
name|serverImpl
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
name|partitioner
argument_list|,
name|quorumAddress
argument_list|,
name|serverClass
argument_list|,
name|serverImpl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @param quorumAddress Distant cluster to write to; default is null for    * output to the cluster that is designated in<code>hbase-site.xml</code>.    * Set this String to the zookeeper ensemble of an alternate remote cluster    * when you would have the reduce write a cluster that is other than the    * default; e.g. copying tables between clusters, the source would be    * designated by<code>hbase-site.xml</code> and this param would have the    * ensemble address of the remote cluster.  The format to pass is particular.    * Pass<code>&lt;hbase.zookeeper.quorum>:&lt;hbase.zookeeper.client.port>:&lt;zookeeper.znode.parent>    *</code> such as<code>server,server2,server3:2181:/hbase</code>.    * @param serverClass redefined hbase.regionserver.class    * @param serverImpl redefined hbase.regionserver.impl    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|,
name|String
name|quorumAddress
parameter_list|,
name|String
name|serverClass
parameter_list|,
name|String
name|serverImpl
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TableOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|reducer
operator|!=
literal|null
condition|)
name|job
operator|.
name|setReducerClass
argument_list|(
name|reducer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|OUTPUT_TABLE
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// If passed a quorum/ensemble address, pass it on to TableOutputFormat.
if|if
condition|(
name|quorumAddress
operator|!=
literal|null
condition|)
block|{
comment|// Calling this will validate the format
name|ZKUtil
operator|.
name|transformClusterKey
argument_list|(
name|quorumAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|QUORUM_ADDRESS
argument_list|,
name|quorumAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverClass
operator|!=
literal|null
operator|&&
name|serverImpl
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|REGION_SERVER_CLASS
argument_list|,
name|serverClass
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|serverImpl
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitioner
operator|==
name|HRegionPartitioner
operator|.
name|class
condition|)
block|{
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|HRegionPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTable
name|outputTable
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|int
name|regions
init|=
name|outputTable
operator|.
name|getRegionsInfo
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
operator|>
name|regions
condition|)
block|{
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|outputTable
operator|.
name|getRegionsInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|partitioner
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|partitioner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures that the given number of reduce tasks for the given job    * configuration does not exceed the number of regions for the given table.    *    * @param table  The table to get the region count for.    * @param job  The current job to adjust.    * @throws IOException When retrieving the table details fails.    */
specifier|public
specifier|static
name|void
name|limitNumReduceTasks
parameter_list|(
name|String
name|table
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|outputTable
init|=
operator|new
name|HTable
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|int
name|regions
init|=
name|outputTable
operator|.
name|getRegionsInfo
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
operator|>
name|regions
condition|)
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the number of reduce tasks for the given job configuration to the    * number of regions the given table has.    *    * @param table  The table to get the region count for.    * @param job  The current job to adjust.    * @throws IOException When retrieving the table details fails.    */
specifier|public
specifier|static
name|void
name|setNumReduceTasks
parameter_list|(
name|String
name|table
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|outputTable
init|=
operator|new
name|HTable
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|int
name|regions
init|=
name|outputTable
operator|.
name|getRegionsInfo
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the number of rows to return and cache with each scanner iteration.    * Higher caching values will enable faster mapreduce jobs at the expense of    * requiring more heap to contain the cached rows.    *    * @param job The current job to adjust.    * @param batchSize The number of rows to return in batch with each scanner    * iteration.    */
specifier|public
specifier|static
name|void
name|setScannerCaching
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.scanner.caching"
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the HBase dependency jars as well as jars for any of the configured    * job classes to the job configuration, so that JobClient will ship them    * to the cluster and add them to the DistributedCache.    */
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|class
argument_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|class
argument_list|,
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|job
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputValueClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|job
operator|.
name|getPartitionerClass
argument_list|()
argument_list|,
name|job
operator|.
name|getCombinerClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add the jars containing the given classes to the job's configuration    * such that JobClient will ship them to the cluster and add them to    * the DistributedCache.    */
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add jars that are already in the tmpjars variable
name|jars
operator|.
name|addAll
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add jars containing the specified classes
for|for
control|(
name|Class
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|String
name|pathStr
init|=
name|findOrCreateJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find jar for class "
operator|+
name|clazz
operator|+
literal|" in order to ship it to the cluster."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not validate jar file "
operator|+
name|path
operator|+
literal|" for class "
operator|+
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|jars
operator|.
name|add
argument_list|(
name|path
operator|.
name|makeQualified
argument_list|(
name|localFs
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jars
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|conf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If org.apache.hadoop.util.JarFinder is available (0.23+ hadoop),    * finds the Jar for a class or creates it if it doesn't exist. If    * the class is in a directory in the classpath, it creates a Jar    * on the fly with the contents of the directory and returns the path    * to that Jar. If a Jar is created, it is created in    * the system temporary directory.    *    * Otherwise, returns an existing jar that contains a class of the    * same name.    *    * @param my_class the class to find.    * @return a jar file that contains the class, or null.    * @throws IOException    */
specifier|private
specifier|static
name|String
name|findOrCreateJar
parameter_list|(
name|Class
name|my_class
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jarFinder
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.util.JarFinder"
argument_list|)
decl_stmt|;
comment|// hadoop-0.23 has a JarFinder class that will create the jar
comment|// if it doesn't exist.  Note that this is needed to run the mapreduce
comment|// unit tests post-0.23, because mapreduce v2 requires the relevant jars
comment|// to be in the mr cluster to do output, split, etc.  At unit test time,
comment|// the hbase jars do not exist, so we need to create some.  Note that we
comment|// can safely fall back to findContainingJars for pre-0.23 mapreduce.
name|Method
name|m
init|=
name|jarFinder
operator|.
name|getMethod
argument_list|(
literal|"getJar"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|my_class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
comment|// function was properly called, but threw it's own exception
throw|throw
operator|new
name|IOException
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore all other exceptions. related to reflection failure
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"New JarFinder: org.apache.hadoop.util.JarFinder.getJar "
operator|+
literal|"not available.  Using old findContainingJar"
argument_list|)
expr_stmt|;
return|return
name|findContainingJar
argument_list|(
name|my_class
argument_list|)
return|;
block|}
comment|/**    * Find a jar that contains a class of the same name, if any.    * It will return a jar file, even if that is not the first thing    * on the class path that has a class with the same name.    *     * This is shamelessly copied from JobConf    *     * @param my_class the class to find.    * @return a jar file that contains the class, or null.    * @throws IOException    */
specifier|private
specifier|static
name|String
name|findContainingJar
parameter_list|(
name|Class
name|my_class
parameter_list|)
block|{
name|ClassLoader
name|loader
init|=
name|my_class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|String
name|class_file
init|=
name|my_class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|itr
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|class_file
argument_list|)
init|;
name|itr
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
operator|(
name|URL
operator|)
name|itr
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|toReturn
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|toReturn
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|toReturn
operator|=
name|toReturn
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// URLDecoder is a misnamed class, since it actually decodes
comment|// x-www-form-urlencoded MIME type rather than actual
comment|// URL encoding (which the file path has). Therefore it would
comment|// decode +s to ' 's which is incorrect (spaces are actually
comment|// either unencoded or encoded as "%20"). Replace +s first, so
comment|// that they are kept sacred during the decoding process.
name|toReturn
operator|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%2B"
argument_list|)
expr_stmt|;
name|toReturn
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|toReturn
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"!.*$"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

