begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALHeader
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|SecureAsyncProtobufLogWriter
extends|extends
name|AsyncProtobufLogWriter
block|{
specifier|private
name|Encryptor
name|encryptor
init|=
literal|null
decl_stmt|;
specifier|public
name|SecureAsyncProtobufLogWriter
parameter_list|(
name|EventLoopGroup
name|eventLoopGroup
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Channel
argument_list|>
name|channelClass
parameter_list|)
block|{
name|super
argument_list|(
name|eventLoopGroup
argument_list|,
name|channelClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|WALHeader
name|buildWALHeader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|WALHeader
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|buildSecureWALHeader
argument_list|(
name|conf
argument_list|,
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setEncryptor
parameter_list|(
name|Encryptor
name|encryptor
parameter_list|)
block|{
name|this
operator|.
name|encryptor
operator|=
name|encryptor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initAfterHeader
parameter_list|(
name|boolean
name|doCompress
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|secureInitAfterHeader
argument_list|(
name|doCompress
argument_list|,
name|encryptor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

