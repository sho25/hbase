begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MetricsCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|WALObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Implements the coprocessor environment and runtime support for coprocessors  * loaded within a {@link WAL}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|WALCoprocessorHost
extends|extends
name|CoprocessorHost
argument_list|<
name|WALCoprocessor
argument_list|,
name|WALCoprocessorEnvironment
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WALCoprocessorHost
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Encapsulation of the environment of each coprocessor    */
specifier|static
class|class
name|WALEnvironment
extends|extends
name|BaseEnvironment
argument_list|<
name|WALCoprocessor
argument_list|>
implements|implements
name|WALCoprocessorEnvironment
block|{
specifier|private
specifier|final
name|WAL
name|wal
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|metricRegistry
decl_stmt|;
annotation|@
name|Override
specifier|public
name|WAL
name|getWAL
parameter_list|()
block|{
return|return
name|wal
return|;
block|}
comment|/**      * Constructor      * @param impl the coprocessor instance      * @param priority chaining priority      * @param seq load sequence      * @param conf configuration      * @param wal WAL      */
specifier|private
name|WALEnvironment
parameter_list|(
specifier|final
name|WALCoprocessor
name|impl
parameter_list|,
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|WAL
name|wal
parameter_list|)
block|{
name|super
argument_list|(
name|impl
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|wal
expr_stmt|;
name|this
operator|.
name|metricRegistry
operator|=
name|MetricsCoprocessor
operator|.
name|createRegistryForWALCoprocessor
argument_list|(
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricRegistry
name|getMetricRegistryForRegionServer
parameter_list|()
block|{
return|return
name|metricRegistry
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|MetricsCoprocessor
operator|.
name|removeRegistry
argument_list|(
name|this
operator|.
name|metricRegistry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|WAL
name|wal
decl_stmt|;
comment|/**    * Constructor    * @param log the write ahead log    * @param conf the configuration    */
specifier|public
name|WALCoprocessorHost
parameter_list|(
specifier|final
name|WAL
name|log
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// We don't want to require an Abortable passed down through (FS)HLog, so
comment|// this means that a failure to load of a WAL coprocessor won't abort the
comment|// server. This isn't ideal, and means that security components that
comment|// utilize a WALObserver will have to check the observer initialization
comment|// state manually. However, WALObservers will eventually go away so it
comment|// should be an acceptable state of affairs.
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|log
expr_stmt|;
comment|// load system default cp's from configuration.
name|loadSystemCoprocessors
argument_list|(
name|conf
argument_list|,
name|WAL_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WALEnvironment
name|createEnvironment
parameter_list|(
specifier|final
name|WALCoprocessor
name|instance
parameter_list|,
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|seq
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|WALEnvironment
argument_list|(
name|instance
argument_list|,
name|priority
argument_list|,
name|seq
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|wal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WALCoprocessor
name|checkAndGetInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
if|if
condition|(
name|WALCoprocessor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|implClass
argument_list|)
condition|)
block|{
return|return
operator|(
name|WALCoprocessor
operator|)
name|implClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
operator|+
literal|" is not of type WALCoprocessor. Check the "
operator|+
literal|"configuration "
operator|+
name|CoprocessorHost
operator|.
name|WAL_COPROCESSOR_CONF_KEY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|ObserverGetter
argument_list|<
name|WALCoprocessor
argument_list|,
name|WALObserver
argument_list|>
name|walObserverGetter
init|=
name|WALCoprocessor
operator|::
name|getWALObserver
decl_stmt|;
specifier|abstract
class|class
name|WALObserverOperation
extends|extends
name|ObserverOperationWithoutResult
argument_list|<
name|WALObserver
argument_list|>
block|{
specifier|public
name|WALObserverOperation
parameter_list|()
block|{
name|super
argument_list|(
name|walObserverGetter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @deprecated Since hbase-2.0.0. No replacement. To be removed in hbase-3.0.0 and replaced    * with something that doesn't expose IntefaceAudience.Private classes.    */
annotation|@
name|Deprecated
specifier|public
name|void
name|preWALWrite
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|WALKey
name|logKey
parameter_list|,
specifier|final
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Not bypassable.
if|if
condition|(
name|this
operator|.
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|execOperation
argument_list|(
operator|new
name|WALObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|WALObserver
name|oserver
parameter_list|)
throws|throws
name|IOException
block|{
name|oserver
operator|.
name|preWALWrite
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated Since hbase-2.0.0. No replacement. To be removed in hbase-3.0.0 and replaced    * with something that doesn't expose IntefaceAudience.Private classes.    */
annotation|@
name|Deprecated
specifier|public
name|void
name|postWALWrite
parameter_list|(
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|WALKey
name|logKey
parameter_list|,
specifier|final
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|WALObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|call
parameter_list|(
name|WALObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postWALWrite
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|logKey
argument_list|,
name|logEdit
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called before rolling the current WAL    * @param oldPath the path of the current wal that we are replacing    * @param newPath the path of the wal we are going to create    */
specifier|public
name|void
name|preWALRoll
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|WALObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|call
parameter_list|(
name|WALObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|preWALRoll
argument_list|(
name|this
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called after rolling the current WAL    * @param oldPath the path of the wal that we replaced    * @param newPath the path of the wal we have created and now is the current    */
specifier|public
name|void
name|postWALRoll
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|execOperation
argument_list|(
name|coprocEnvironments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|WALObserverOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|call
parameter_list|(
name|WALObserver
name|observer
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|.
name|postWALRoll
argument_list|(
name|this
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

