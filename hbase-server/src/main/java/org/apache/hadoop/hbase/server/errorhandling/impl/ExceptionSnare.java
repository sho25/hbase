begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionCheckable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|exception
operator|.
name|UnknownErrorException
import|;
end_import

begin_comment
comment|/**  * Simple exception handler that keeps track of whether of its failure state, and the exception that  * should be thrown based on the received error.  *<p>  * Ensures that an exception is not propagated if an error has already been received, ensuring that  * you don't have infinite error propagation.  *<p>  * You can think of it like a 'one-time-use' {@link ExceptionCheckable}, that once it receives an  * error will not listen to any new error updates.  *<p>  * Thread-safe.  * @param<E> Type of exception to throw when calling {@link #failOnError()}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ExceptionSnare
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
implements|implements
name|ExceptionCheckable
argument_list|<
name|E
argument_list|>
implements|,
name|ExceptionListener
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExceptionSnare
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|protected
name|E
name|exception
decl_stmt|;
specifier|protected
name|Name
name|name
decl_stmt|;
comment|/**    * Create an exception snare with a generic error name    */
specifier|public
name|ExceptionSnare
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|Name
argument_list|(
literal|"generic-error-snare"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failOnError
parameter_list|()
throws|throws
name|E
block|{
if|if
condition|(
name|checkForError
argument_list|()
condition|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownErrorException
argument_list|()
throw|;
throw|throw
name|exception
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkForError
parameter_list|()
block|{
return|return
name|this
operator|.
name|error
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|receiveError
parameter_list|(
name|String
name|message
parameter_list|,
name|E
name|e
parameter_list|,
name|Object
modifier|...
name|info
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|name
operator|.
name|getNamePrefixForLog
argument_list|()
operator|+
literal|"Got an error:"
operator|+
name|message
operator|+
literal|", info:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|receiveInternalError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**    * Receive an error notification from internal sources. Can be used by subclasses to set an error.    *<p>    * This method may be called concurrently, so precautions must be taken to not clobber yourself,    * either making the method<tt>synchronized</tt>, synchronizing on<tt>this</tt> of calling this    * method.    * @param e exception that caused the error (can be null).    */
specifier|protected
specifier|synchronized
name|void
name|receiveInternalError
parameter_list|(
name|E
name|e
parameter_list|)
block|{
comment|// if we already got the error or we received the error fail fast
if|if
condition|(
name|this
operator|.
name|error
condition|)
return|return;
comment|// store the error since we haven't seen it before
name|this
operator|.
name|error
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
end_class

end_unit

