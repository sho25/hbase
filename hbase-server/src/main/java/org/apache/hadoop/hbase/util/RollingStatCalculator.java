begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * This class maintains mean and variation for any sequence of input provided to it.  * It is initialized with number of rolling periods which basically means the number of past  * inputs whose data will be considered to maintain mean and variation.  * It will use O(N) memory to maintain these statistics, where N is number of look up periods it  * was initialized with.  * If zero is passed during initialization then it will maintain mean and variance from the  * start. It will use O(1) memory only. But note that since it will maintain mean / variance  * from the start the statistics may behave like constants and may ignore short trends.  * All operations are O(1) except the initialization which is O(N).  */
end_comment

begin_class
specifier|public
class|class
name|RollingStatCalculator
block|{
specifier|private
name|double
name|currentSum
decl_stmt|;
specifier|private
name|double
name|currentSqrSum
decl_stmt|;
comment|// Total number of data values whose statistic is currently present
specifier|private
name|long
name|numberOfDataValues
decl_stmt|;
specifier|private
name|int
name|rollingPeriod
decl_stmt|;
specifier|private
name|int
name|currentIndexPosition
decl_stmt|;
comment|// to be used only if we have non-zero rolling period
specifier|private
name|long
index|[]
name|dataValues
decl_stmt|;
comment|/**    * Creates a RollingStatCalculator with given number of rolling periods.    * @param rollingPeriod    */
specifier|public
name|RollingStatCalculator
parameter_list|(
name|int
name|rollingPeriod
parameter_list|)
block|{
name|this
operator|.
name|rollingPeriod
operator|=
name|rollingPeriod
expr_stmt|;
name|this
operator|.
name|dataValues
operator|=
name|fillWithZeros
argument_list|(
name|rollingPeriod
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentSum
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|currentSqrSum
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|currentIndexPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numberOfDataValues
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Inserts given data value to array of data values to be considered for statistics calculation    * @param data    */
specifier|public
name|void
name|insertDataValue
parameter_list|(
name|long
name|data
parameter_list|)
block|{
comment|// if current number of data points already equals rolling period and rolling period is
comment|// non-zero then remove one data and update the statistics
if|if
condition|(
name|numberOfDataValues
operator|>=
name|rollingPeriod
operator|&&
name|rollingPeriod
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|removeData
argument_list|(
name|dataValues
index|[
name|currentIndexPosition
index|]
argument_list|)
expr_stmt|;
block|}
name|numberOfDataValues
operator|++
expr_stmt|;
name|currentSum
operator|=
name|currentSum
operator|+
operator|(
name|double
operator|)
name|data
expr_stmt|;
name|currentSqrSum
operator|=
name|currentSqrSum
operator|+
operator|(
operator|(
name|double
operator|)
name|data
operator|*
name|data
operator|)
expr_stmt|;
if|if
condition|(
name|rollingPeriod
operator|>
literal|0
condition|)
block|{
name|dataValues
index|[
name|currentIndexPosition
index|]
operator|=
name|data
expr_stmt|;
name|currentIndexPosition
operator|=
operator|(
name|currentIndexPosition
operator|+
literal|1
operator|)
operator|%
name|rollingPeriod
expr_stmt|;
block|}
block|}
comment|/**    * Update the statistics after removing the given data value    * @param data    */
specifier|private
name|void
name|removeData
parameter_list|(
name|long
name|data
parameter_list|)
block|{
name|currentSum
operator|=
name|currentSum
operator|-
operator|(
name|double
operator|)
name|data
expr_stmt|;
name|currentSqrSum
operator|=
name|currentSqrSum
operator|-
operator|(
operator|(
name|double
operator|)
name|data
operator|*
name|data
operator|)
expr_stmt|;
name|numberOfDataValues
operator|--
expr_stmt|;
block|}
comment|/**    * @return mean of the data values that are in the current list of data values    */
specifier|public
name|double
name|getMean
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentSum
operator|/
operator|(
name|double
operator|)
name|numberOfDataValues
return|;
block|}
comment|/**    * @return deviation of the data values that are in the current list of data values    */
specifier|public
name|double
name|getDeviation
parameter_list|()
block|{
name|double
name|variance
init|=
operator|(
name|currentSqrSum
operator|-
operator|(
name|currentSum
operator|*
name|currentSum
operator|)
operator|/
call|(
name|double
call|)
argument_list|(
name|numberOfDataValues
argument_list|)
operator|)
operator|/
name|numberOfDataValues
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
return|;
block|}
comment|/**    * @param size    * @return an array of given size initialized with zeros    */
specifier|private
name|long
index|[]
name|fillWithZeros
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|long
index|[]
name|zeros
init|=
operator|new
name|long
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|zeros
index|[
name|i
index|]
operator|=
literal|0L
expr_stmt|;
block|}
return|return
name|zeros
return|;
block|}
block|}
end_class

end_unit

