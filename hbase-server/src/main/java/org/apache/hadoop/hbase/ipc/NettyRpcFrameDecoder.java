begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|VersionInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RequestTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|CorruptedFrameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_comment
comment|/**  * Decoder for extracting frame  *  * @since 2.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NettyRpcFrameDecoder
extends|extends
name|ByteToMessageDecoder
block|{
specifier|private
specifier|static
name|int
name|FRAME_LENGTH_FIELD_LENGTH
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFrameLength
decl_stmt|;
specifier|private
name|boolean
name|requestTooBig
decl_stmt|;
specifier|private
name|String
name|requestTooBigMessage
decl_stmt|;
specifier|public
name|NettyRpcFrameDecoder
parameter_list|(
name|int
name|maxFrameLength
parameter_list|)
block|{
name|this
operator|.
name|maxFrameLength
operator|=
name|maxFrameLength
expr_stmt|;
block|}
specifier|private
name|NettyServerRpcConnection
name|connection
decl_stmt|;
name|void
name|setConnection
parameter_list|(
name|NettyServerRpcConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|requestTooBig
condition|)
block|{
name|handleTooBigRequest
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|FRAME_LENGTH_FIELD_LENGTH
condition|)
block|{
return|return;
block|}
name|long
name|frameLength
init|=
name|in
operator|.
name|getUnsignedInt
argument_list|(
name|in
operator|.
name|readerIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|frameLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"negative frame length field: "
operator|+
name|frameLength
argument_list|)
throw|;
block|}
if|if
condition|(
name|frameLength
operator|>
name|maxFrameLength
condition|)
block|{
name|requestTooBig
operator|=
literal|true
expr_stmt|;
name|requestTooBigMessage
operator|=
literal|"RPC data length of "
operator|+
name|frameLength
operator|+
literal|" received from "
operator|+
name|connection
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|" is greater than max allowed "
operator|+
name|connection
operator|.
name|rpcServer
operator|.
name|maxRequestSize
operator|+
literal|". Set \""
operator|+
name|SimpleRpcServer
operator|.
name|MAX_REQUEST_SIZE
operator|+
literal|"\" on server to override this limit (not recommended)"
expr_stmt|;
name|NettyRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|requestTooBigMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|connectionHeaderRead
condition|)
block|{
name|handleTooBigRequest
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return;
block|}
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|frameLengthInt
init|=
operator|(
name|int
operator|)
name|frameLength
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|frameLengthInt
operator|+
name|FRAME_LENGTH_FIELD_LENGTH
condition|)
block|{
return|return;
block|}
name|in
operator|.
name|skipBytes
argument_list|(
name|FRAME_LENGTH_FIELD_LENGTH
argument_list|)
expr_stmt|;
comment|// extract frame
name|out
operator|.
name|add
argument_list|(
name|in
operator|.
name|readRetainedSlice
argument_list|(
name|frameLengthInt
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleTooBigRequest
parameter_list|(
name|ByteBuf
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
name|int
name|preIndex
init|=
name|in
operator|.
name|readerIndex
argument_list|()
decl_stmt|;
name|int
name|headerSize
init|=
name|readRawVarint32
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|preIndex
operator|==
name|in
operator|.
name|readerIndex
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|headerSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"negative headerSize: "
operator|+
name|headerSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|headerSize
condition|)
block|{
name|in
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return;
block|}
name|RPCProtos
operator|.
name|RequestHeader
name|header
init|=
name|getHeader
argument_list|(
name|in
argument_list|,
name|headerSize
argument_list|)
decl_stmt|;
comment|// Notify the client about the offending request
name|NettyServerCall
name|reqTooBig
init|=
operator|new
name|NettyServerCall
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|,
name|connection
operator|.
name|service
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|connection
argument_list|,
literal|0
argument_list|,
name|connection
operator|.
name|addr
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|connection
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|connection
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connection
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|exception
argument_list|(
name|SimpleRpcServer
operator|.
name|REQUEST_TOO_BIG_EXCEPTION
argument_list|)
expr_stmt|;
comment|// Make sure the client recognizes the underlying exception
comment|// Otherwise, throw a DoNotRetryIOException.
if|if
condition|(
name|VersionInfoUtil
operator|.
name|hasMinimumVersion
argument_list|(
name|connection
operator|.
name|connectionHeader
operator|.
name|getVersionInfo
argument_list|()
argument_list|,
name|RequestTooBigException
operator|.
name|MAJOR_VERSION
argument_list|,
name|RequestTooBigException
operator|.
name|MINOR_VERSION
argument_list|)
condition|)
block|{
name|reqTooBig
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SimpleRpcServer
operator|.
name|REQUEST_TOO_BIG_EXCEPTION
argument_list|,
name|requestTooBigMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reqTooBig
operator|.
name|setResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|DoNotRetryIOException
argument_list|()
argument_list|,
name|requestTooBigMessage
argument_list|)
expr_stmt|;
block|}
comment|// To guarantee that the message is written and flushed before closing the channel,
comment|// we should call channel.writeAndFlush() directly to add the close listener
comment|// instead of calling reqTooBig.sendResponseIfReady()
name|reqTooBig
operator|.
name|param
operator|=
literal|null
expr_stmt|;
name|connection
operator|.
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|reqTooBig
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RPCProtos
operator|.
name|RequestHeader
name|getHeader
parameter_list|(
name|ByteBuf
name|in
parameter_list|,
name|int
name|headerSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuf
name|msg
init|=
name|in
operator|.
name|readRetainedSlice
argument_list|(
name|headerSize
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|array
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
init|=
name|msg
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|array
operator|=
name|msg
operator|.
name|array
argument_list|()
expr_stmt|;
name|offset
operator|=
name|msg
operator|.
name|arrayOffset
argument_list|()
operator|+
name|msg
operator|.
name|readerIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|msg
operator|.
name|getBytes
argument_list|(
name|msg
operator|.
name|readerIndex
argument_list|()
argument_list|,
name|array
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|Builder
name|builder
init|=
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|array
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
name|msg
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads variable length 32bit int from buffer    * This method is from ProtobufVarint32FrameDecoder in Netty and modified a little bit    * to pass the cyeckstyle rule.    *    * @return decoded int if buffers readerIndex has been forwarded else nonsense value    */
specifier|private
specifier|static
name|int
name|readRawVarint32
parameter_list|(
name|ByteBuf
name|buffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|buffer
operator|.
name|isReadable
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|buffer
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
name|byte
name|tmp
init|=
name|buffer
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|>=
literal|0
condition|)
block|{
return|return
name|tmp
return|;
block|}
else|else
block|{
name|int
name|result
init|=
name|tmp
operator|&
literal|127
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tmp
operator|=
name|buffer
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|>=
literal|0
condition|)
block|{
name|result
operator||=
name|tmp
operator|<<
literal|7
expr_stmt|;
block|}
else|else
block|{
name|result
operator||=
operator|(
name|tmp
operator|&
literal|127
operator|)
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tmp
operator|=
name|buffer
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|>=
literal|0
condition|)
block|{
name|result
operator||=
name|tmp
operator|<<
literal|14
expr_stmt|;
block|}
else|else
block|{
name|result
operator||=
operator|(
name|tmp
operator|&
literal|127
operator|)
operator|<<
literal|14
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tmp
operator|=
name|buffer
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|>=
literal|0
condition|)
block|{
name|result
operator||=
name|tmp
operator|<<
literal|21
expr_stmt|;
block|}
else|else
block|{
name|result
operator||=
operator|(
name|tmp
operator|&
literal|127
operator|)
operator|<<
literal|21
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|tmp
operator|=
name|buffer
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|result
operator||=
name|tmp
operator|<<
literal|28
expr_stmt|;
if|if
condition|(
name|tmp
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|CorruptedFrameException
argument_list|(
literal|"malformed varint."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

