begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|PeerProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedurePrepareLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|StateMachineProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|ModifyPeerStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|PeerModificationState
import|;
end_import

begin_comment
comment|/**  * The base class for all replication peer related procedure.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ModifyPeerProcedure
extends|extends
name|StateMachineProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|PeerModificationState
argument_list|>
implements|implements
name|PeerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ModifyPeerProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|peerId
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|locked
decl_stmt|;
comment|// used to keep compatible with old client where we can only returns after updateStorage.
specifier|protected
name|ProcedurePrepareLatch
name|latch
decl_stmt|;
specifier|protected
name|ModifyPeerProcedure
parameter_list|()
block|{   }
specifier|protected
name|ModifyPeerProcedure
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|this
operator|.
name|peerId
operator|=
name|peerId
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|ProcedurePrepareLatch
operator|.
name|createLatch
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedurePrepareLatch
name|getLatch
parameter_list|()
block|{
return|return
name|latch
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPeerId
parameter_list|()
block|{
return|return
name|peerId
return|;
block|}
comment|/**    * Called before we start the actual processing. The implementation should call the pre CP hook,    * and also the pre-check for the peer modification.    *<p>    * If an IOException is thrown then we will give up and mark the procedure as failed directly. If    * all checks passes then the procedure can not be rolled back any more.    */
specifier|protected
specifier|abstract
name|void
name|prePeerModification
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|updatePeerStorage
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Called before we finish the procedure. The implementation can do some logging work, and also    * call the coprocessor hook if any.    *<p>    * Notice that, since we have already done the actual work, throwing {@code IOException} here will    * not fail this procedure, we will just ignore it and finish the procedure as suceeded. If    * {@code ReplicationException} is thrown we will retry since this usually means we fails to    * update the peer storage.    */
specifier|protected
specifier|abstract
name|void
name|postPeerModification
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
function_decl|;
specifier|private
name|void
name|releaseLatch
parameter_list|()
block|{
name|ProcedurePrepareLatch
operator|.
name|releaseLatch
argument_list|(
name|latch
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|PeerModificationState
name|state
parameter_list|)
throws|throws
name|ProcedureSuspendedException
throws|,
name|ProcedureYieldException
throws|,
name|InterruptedException
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|PRE_PEER_MODIFICATION
case|:
try|try
block|{
name|prePeerModification
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} failed to call pre CP hook or the pre check is failed for peer {}, "
operator|+
literal|"mark the procedure as failure and give up"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setFailure
argument_list|(
literal|"master-"
operator|+
name|getPeerOperationType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-peer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|releaseLatch
argument_list|()
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} failed to call prePeerModification for peer {}, retry"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
name|setNextState
argument_list|(
name|PeerModificationState
operator|.
name|UPDATE_PEER_STORAGE
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
case|case
name|UPDATE_PEER_STORAGE
case|:
try|try
block|{
name|updatePeerStorage
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} update peer storage for peer {} failed, retry"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
name|setNextState
argument_list|(
name|PeerModificationState
operator|.
name|REFRESH_PEER_ON_RS
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
case|case
name|REFRESH_PEER_ON_RS
case|:
name|addChildProcedure
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|sn
lambda|->
operator|new
name|RefreshPeerProcedure
argument_list|(
name|peerId
argument_list|,
name|getPeerOperationType
argument_list|()
argument_list|,
name|sn
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|RefreshPeerProcedure
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|PeerModificationState
operator|.
name|POST_PEER_MODIFICATION
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
case|case
name|POST_PEER_MODIFICATION
case|:
try|try
block|{
name|postPeerModification
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} failed to call postPeerModification for peer {}, retry"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} failed to call post CP hook for peer {}, "
operator|+
literal|"ignore since the procedure has already done"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|peerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|releaseLatch
argument_list|()
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|waitPeerExclusiveLock
argument_list|(
name|this
argument_list|,
name|peerId
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
name|locked
operator|=
literal|true
expr_stmt|;
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|locked
operator|=
literal|false
expr_stmt|;
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|wakePeerExclusiveLock
argument_list|(
name|this
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|holdLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|hasLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
name|locked
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|PeerModificationState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|state
operator|==
name|PeerModificationState
operator|.
name|PRE_PEER_MODIFICATION
condition|)
block|{
comment|// actually the peer related operations has no rollback, but if we haven't done any
comment|// modifications on the peer storage yet, we can just return.
return|return;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|PeerModificationState
name|getState
parameter_list|(
name|int
name|stateId
parameter_list|)
block|{
return|return
name|PeerModificationState
operator|.
name|forNumber
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
name|PeerModificationState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PeerModificationState
name|getInitialState
parameter_list|()
block|{
return|return
name|PeerModificationState
operator|.
name|PRE_PEER_MODIFICATION
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|ModifyPeerStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerId
argument_list|(
name|peerId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|peerId
operator|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|ModifyPeerStateData
operator|.
name|class
argument_list|)
operator|.
name|getPeerId
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

