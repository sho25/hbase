begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
operator|.
name|ReplicationPeerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to clean the useless barriers in {@link HConstants#REPLICATION_BARRIER_FAMILY_STR} family in  * meta table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationBarrierCleaner
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationBarrierCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPLICATION_BARRIER_CLEANER_INTERVAL
init|=
literal|"hbase.master.cleaner.replication.barrier.interval"
decl_stmt|;
comment|// 12 hour. Usually regions will not be moved so the barrier are rarely updated. Use a large
comment|// interval.
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_REPLICATION_BARRIER_CLEANER_INTERVAL
init|=
literal|12
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|ReplicationPeerManager
name|peerManager
decl_stmt|;
specifier|public
name|ReplicationBarrierCleaner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|ReplicationPeerManager
name|peerManager
parameter_list|)
block|{
name|super
argument_list|(
literal|"ReplicationBarrierCleaner"
argument_list|,
name|stopper
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|REPLICATION_BARRIER_CLEANER_INTERVAL
argument_list|,
name|DEFAULT_REPLICATION_BARRIER_CLEANER_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|peerManager
operator|=
name|peerManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|long
name|totalRows
init|=
literal|0
decl_stmt|;
name|long
name|cleanedRows
init|=
literal|0
decl_stmt|;
name|long
name|deletedRows
init|=
literal|0
decl_stmt|;
name|long
name|deletedBarriers
init|=
literal|0
decl_stmt|;
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|peerIds
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Table
name|metaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|metaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
operator|.
name|readAllVersions
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|totalRows
operator|++
expr_stmt|;
name|long
index|[]
name|barriers
init|=
name|MetaTableAccessor
operator|.
name|getReplicationBarriers
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|barriers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|regionName
init|=
name|result
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tn
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|tn
expr_stmt|;
name|peerIds
operator|=
name|peerManager
operator|.
name|getSerialPeerIdsBelongsTo
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|peerIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no serial replication, only keep the newest barrier
name|Cell
name|cell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
decl_stmt|;
name|metaTable
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|regionName
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cleanedRows
operator|++
expr_stmt|;
name|deletedBarriers
operator|+=
name|barriers
operator|.
name|length
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
name|String
name|encodedRegionName
init|=
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|long
name|pushedSeqId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|peerId
range|:
name|peerIds
control|)
block|{
name|pushedSeqId
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pushedSeqId
argument_list|,
name|peerManager
operator|.
name|getQueueStorage
argument_list|()
operator|.
name|getLastSequenceId
argument_list|(
name|encodedRegionName
argument_list|,
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|barriers
argument_list|,
name|pushedSeqId
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
comment|// beyond the first barrier, usually this should not happen but anyway let's add a check
comment|// for it.
continue|continue;
block|}
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|index
operator|++
expr_stmt|;
block|}
comment|// A special case for merged/split region, where we are in the last closed range and the
comment|// pushedSeqId is the last barrier minus 1.
if|if
condition|(
name|index
operator|==
name|barriers
operator|.
name|length
operator|-
literal|1
operator|&&
name|pushedSeqId
operator|==
name|barriers
index|[
name|barriers
operator|.
name|length
operator|-
literal|1
index|]
operator|-
literal|1
condition|)
block|{
comment|// check if the region has already been removed, i.e, no catalog family
if|if
condition|(
operator|!
name|metaTable
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
condition|)
block|{
name|metaTable
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|regionName
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|deletedRows
operator|++
expr_stmt|;
name|deletedBarriers
operator|+=
name|barriers
operator|.
name|length
expr_stmt|;
continue|continue;
block|}
block|}
comment|// the barrier before 'index - 1'(exclusive) can be safely removed. See the algorithm in
comment|// SerialReplicationChecker for more details.
if|if
condition|(
name|index
operator|-
literal|1
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
decl_stmt|;
comment|// All barriers before this cell(exclusive) can be removed
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
name|cells
operator|.
name|size
argument_list|()
operator|-
name|index
argument_list|)
decl_stmt|;
name|metaTable
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|regionName
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cleanedRows
operator|++
expr_stmt|;
name|deletedBarriers
operator|+=
name|index
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ReplicationException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to clean up replication barrier"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalRows
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleanup replication barriers: "
operator|+
literal|"totalRows {}, cleanedRows {}, deletedRows {}, deletedBarriers {}"
argument_list|,
name|totalRows
argument_list|,
name|cleanedRows
argument_list|,
name|deletedRows
argument_list|,
name|deletedBarriers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

