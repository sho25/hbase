begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_comment
comment|/**  * Query matcher for stripe compaction if range drop deletes is used.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|StripeCompactionScanQueryMatcher
extends|extends
name|DropDeletesCompactionScanQueryMatcher
block|{
specifier|private
specifier|final
name|byte
index|[]
name|dropDeletesFromRow
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|dropDeletesToRow
decl_stmt|;
specifier|private
enum|enum
name|DropDeletesInOutput
block|{
name|BEFORE
block|,
name|IN
block|,
name|AFTER
block|}
specifier|private
name|DropDeletesInOutput
name|dropDeletesInOutput
init|=
name|DropDeletesInOutput
operator|.
name|BEFORE
decl_stmt|;
specifier|public
name|StripeCompactionScanQueryMatcher
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|DeleteTracker
name|deletes
parameter_list|,
name|long
name|readPointToUse
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|,
name|long
name|now
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
block|{
name|super
argument_list|(
name|scanInfo
argument_list|,
name|deletes
argument_list|,
name|readPointToUse
argument_list|,
name|earliestPutTs
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropDeletesFromRow
operator|=
name|dropDeletesFromRow
expr_stmt|;
name|this
operator|.
name|dropDeletesToRow
operator|=
name|dropDeletesToRow
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MatchCode
name|match
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|MatchCode
name|returnCode
init|=
name|preCheck
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnCode
operator|!=
literal|null
condition|)
block|{
return|return
name|returnCode
return|;
block|}
name|long
name|mvccVersion
init|=
name|cell
operator|.
name|getSequenceId
argument_list|()
decl_stmt|;
name|byte
name|typeByte
init|=
name|cell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|typeByte
argument_list|)
condition|)
block|{
if|if
condition|(
name|mvccVersion
operator|>
name|maxReadPointToTrackVersions
condition|)
block|{
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
name|trackDelete
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|dropDeletesInOutput
operator|==
name|DropDeletesInOutput
operator|.
name|IN
condition|)
block|{
comment|// here we are running like major compaction
name|trackDelete
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|returnCode
operator|=
name|tryDropDelete
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnCode
operator|!=
literal|null
condition|)
block|{
return|return
name|returnCode
return|;
block|}
block|}
else|else
block|{
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
block|}
else|else
block|{
name|returnCode
operator|=
name|checkDeleted
argument_list|(
name|deletes
argument_list|,
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnCode
operator|!=
literal|null
condition|)
block|{
return|return
name|returnCode
return|;
block|}
block|}
comment|// Skip checking column since we do not remove column during compaction.
return|return
name|columns
operator|.
name|checkVersions
argument_list|(
name|cell
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|typeByte
argument_list|,
name|mvccVersion
operator|>
name|maxReadPointToTrackVersions
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|entered
parameter_list|()
block|{
return|return
name|dropDeletesFromRow
operator|.
name|length
operator|==
literal|0
operator|||
name|rowComparator
operator|.
name|compareRows
argument_list|(
name|currentRow
argument_list|,
name|dropDeletesFromRow
argument_list|,
literal|0
argument_list|,
name|dropDeletesFromRow
operator|.
name|length
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|private
name|boolean
name|left
parameter_list|()
block|{
return|return
name|dropDeletesToRow
operator|.
name|length
operator|>
literal|0
operator|&&
name|rowComparator
operator|.
name|compareRows
argument_list|(
name|currentRow
argument_list|,
name|dropDeletesToRow
argument_list|,
literal|0
argument_list|,
name|dropDeletesToRow
operator|.
name|length
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Check if we are about to enter or leave the drop deletes range.
switch|switch
condition|(
name|dropDeletesInOutput
condition|)
block|{
case|case
name|BEFORE
case|:
if|if
condition|(
name|entered
argument_list|()
condition|)
block|{
if|if
condition|(
name|left
argument_list|()
condition|)
block|{
comment|// Already out of range, which means there are no rows within the range.
name|dropDeletesInOutput
operator|=
name|DropDeletesInOutput
operator|.
name|AFTER
expr_stmt|;
block|}
else|else
block|{
name|dropDeletesInOutput
operator|=
name|DropDeletesInOutput
operator|.
name|IN
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IN
case|:
if|if
condition|(
name|left
argument_list|()
condition|)
block|{
name|dropDeletesInOutput
operator|=
name|DropDeletesInOutput
operator|.
name|AFTER
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_class

end_unit

