begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoreCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|HasMasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|SnapshotScannerHDFSAclHelper
operator|.
name|PathHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Set HDFS ACLs to hFiles to make HBase granted users have permission to scan snapshot  *<p>  * To use this feature, please mask sure HDFS config:  *<ul>  *<li>dfs.permissions.enabled = true</li>  *<li>fs.permissions.umask-mode = 027 (or smaller umask than 027)</li>  *</ul>  *</p>  *<p>  * The implementation of this feature is as followings:  *<ul>  *<li>For common directories such as 'data' and 'archive', set other permission to '--x' to make  * everyone have the permission to access the directory.</li>  *<li>For namespace or table directories such as 'data/ns/table', 'archive/ns/table' and  * '.hbase-snapshot/snapshotName', set user 'r-x' access acl and 'r-x' default acl when following  * operations happen:  *<ul>  *<li>grant user with global, namespace or table permission;</li>  *<li>revoke user from global, namespace or table;</li>  *<li>snapshot table;</li>  *<li>truncate table;</li>  *</ul>  *</li>  *<li>Note: Because snapshots are at table level, so this feature just considers users with global,  * namespace or table permissions, ignores users with table CF or cell permissions.</li>  *</ul>  *</p>  */
end_comment

begin_class
annotation|@
name|CoreCoprocessor
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|SnapshotScannerHDFSAclController
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapshotScannerHDFSAclController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SnapshotScannerHDFSAclHelper
name|hdfsAclHelper
init|=
literal|null
decl_stmt|;
specifier|private
name|PathHelper
name|pathHelper
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/** Provider for mapping principal names to Users */
specifier|private
name|UserProvider
name|userProvider
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMasterInitialization
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|SnapshotScannerHDFSAclHelper
operator|.
name|USER_SCAN_SNAPSHOT_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|MasterCoprocessorEnvironment
name|mEnv
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mEnv
operator|instanceof
name|HasMasterServices
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Does not implement HMasterServices"
argument_list|)
throw|;
block|}
name|MasterServices
name|masterServices
init|=
operator|(
operator|(
name|HasMasterServices
operator|)
name|mEnv
operator|)
operator|.
name|getMasterServices
argument_list|()
decl_stmt|;
name|hdfsAclHelper
operator|=
operator|new
name|SnapshotScannerHDFSAclHelper
argument_list|(
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|pathHelper
operator|=
name|hdfsAclHelper
operator|.
name|getPathHelper
argument_list|()
expr_stmt|;
name|fs
operator|=
name|pathHelper
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hdfsAclHelper
operator|.
name|setCommonDirectoryPermission
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|userProvider
operator|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Try to initialize the coprocessor SnapshotScannerHDFSAclController but failure "
operator|+
literal|"because the config "
operator|+
name|SnapshotScannerHDFSAclHelper
operator|.
name|USER_SCAN_SNAPSHOT_ENABLE
operator|+
literal|" is false."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postStartMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkInitialized
argument_list|()
condition|)
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
init|)
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// Check if hbase acl table has 'm' CF, if not, add 'm' CF
name|TableDescriptor
name|tableDescriptor
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|boolean
name|containHdfsAclFamily
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|tableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|family
lambda|->
name|Bytes
operator|.
name|equals
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|,
name|SnapshotScannerHDFSAclStorage
operator|.
name|HDFS_ACL_FAMILY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containHdfsAclFamily
condition|)
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableDescriptor
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|SnapshotScannerHDFSAclStorage
operator|.
name|HDFS_ACL_FAMILY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table "
operator|+
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
operator|+
literal|" is not created yet. Please check if "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is configured after "
operator|+
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|checkInitialized
argument_list|()
condition|)
block|{
name|hdfsAclHelper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedCreateTableAction
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
operator|&&
name|checkInitialized
argument_list|()
condition|)
block|{
name|TableName
name|tableName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|hdfsAclHelper
operator|.
name|getTableRootPaths
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add table owner HDFS acls
name|String
name|owner
init|=
name|desc
operator|.
name|getOwnerString
argument_list|()
operator|==
literal|null
condition|?
name|getActiveUser
argument_list|(
name|c
argument_list|)
operator|.
name|getShortName
argument_list|()
else|:
name|desc
operator|.
name|getOwnerString
argument_list|()
decl_stmt|;
name|hdfsAclHelper
operator|.
name|addTableAcl
argument_list|(
name|tableName
argument_list|,
name|owner
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|aclTable
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|SnapshotScannerHDFSAclStorage
operator|.
name|addUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|owner
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkInitialized
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|hdfsAclHelper
operator|.
name|getNamespaceRootPaths
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedSnapshotAction
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
operator|&&
name|checkInitialized
argument_list|()
condition|)
block|{
name|hdfsAclHelper
operator|.
name|snapshotAcl
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedTruncateTableAction
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|isSystemTable
argument_list|()
operator|&&
name|checkInitialized
argument_list|()
condition|)
block|{
name|hdfsAclHelper
operator|.
name|resetTableAcl
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|isSystemTable
argument_list|()
operator|&&
name|checkInitialized
argument_list|()
condition|)
block|{
comment|/*        * remove table user access HDFS acl from namespace directory if the user has no permissions        * of global, ns of the table or other tables of the ns, eg: Bob has 'ns1:t1' read permission,        * when delete 'ns1:t1', if Bob has global read permission, '@ns1' read permission or        * 'ns1:other_tables' read permission, then skip remove Bob access acl in ns1Dirs, otherwise,        * remove Bob access acl.        */
name|Set
argument_list|<
name|String
argument_list|>
name|removeUsers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|aclTable
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getTableUsers
argument_list|(
name|aclTable
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|SnapshotScannerHDFSAclStorage
operator|.
name|deleteTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|namespace
init|=
name|tableName
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|userEntries
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserEntries
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|boolean
name|remove
init|=
literal|true
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|entry
range|:
name|userEntries
control|)
block|{
if|if
condition|(
name|PermissionStorage
operator|.
name|isGlobalEntry
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|remove
operator|=
literal|false
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|PermissionStorage
operator|.
name|isNamespaceEntry
argument_list|(
name|entry
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|PermissionStorage
operator|.
name|fromNamespaceEntry
argument_list|(
name|entry
argument_list|)
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
name|remove
operator|=
literal|false
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entry
argument_list|)
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
name|remove
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|remove
condition|)
block|{
name|removeUsers
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|removeUsers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hdfsAclHelper
operator|.
name|removeNamespaceAcl
argument_list|(
name|tableName
argument_list|,
name|removeUsers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkInitialized
argument_list|()
condition|)
block|{
try|try
init|(
name|Table
name|aclTable
init|=
name|ctx
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|SnapshotScannerHDFSAclStorage
operator|.
name|deleteNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
comment|/**        * Delete namespace tmp directory because it's created by this coprocessor when namespace is        * created to make namespace default acl can be inherited by tables. The namespace data        * directory is deleted by DeleteNamespaceProcedure, the namespace archive directory is        * deleted by HFileCleaner.        */
name|Path
name|tmpNsDir
init|=
name|pathHelper
operator|.
name|getTmpNsDir
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tmpNsDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|listStatus
argument_list|(
name|tmpNsDir
argument_list|)
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmpNsDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The tmp directory {} of namespace {} is not empty after delete namespace"
argument_list|,
name|tmpNsDir
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGrant
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|UserPermission
name|userPermission
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkInitialized
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|Table
name|aclTable
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|Configuration
name|conf
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|userPermission
operator|.
name|getUser
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|userPermission
operator|.
name|getAccessScope
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
name|UserPermission
name|perm
init|=
name|getUserGlobalPermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|perm
operator|!=
literal|null
operator|&&
name|containReadPermission
argument_list|(
name|perm
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
condition|)
block|{
name|Pair
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|namespaceAndTable
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserNamespaceAndTable
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
init|=
name|namespaceAndTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
init|=
name|namespaceAndTable
operator|.
name|getSecond
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|t
lambda|->
operator|!
name|skipNamespaces
operator|.
name|contains
argument_list|(
name|t
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|hdfsAclHelper
operator|.
name|grantAcl
argument_list|(
name|userPermission
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
name|SnapshotScannerHDFSAclStorage
operator|.
name|addUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The merged user permission doesn't contain READ, so remove user global HDFS acls if
comment|// it's set
name|removeUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAMESPACE
case|:
name|String
name|namespace
init|=
operator|(
operator|(
name|NamespacePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
operator|)
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|UserPermission
name|nsPerm
init|=
name|getUserNamespacePermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsPerm
operator|!=
literal|null
operator|&&
name|containReadPermission
argument_list|(
name|nsPerm
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserNamespaceAndTable
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|hdfsAclHelper
operator|.
name|grantAcl
argument_list|(
name|userPermission
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
block|}
name|SnapshotScannerHDFSAclStorage
operator|.
name|addUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The merged user permission doesn't contain READ, so remove user namespace HDFS acls
comment|// if it's set
name|removeUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLE
case|:
name|TableName
name|tableName
init|=
operator|(
operator|(
name|TablePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
operator|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|UserPermission
name|tPerm
init|=
name|getUserTablePermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tPerm
operator|!=
literal|null
condition|)
block|{
name|TablePermission
name|tablePermission
init|=
operator|(
name|TablePermission
operator|)
name|tPerm
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|tablePermission
operator|.
name|hasFamily
argument_list|()
operator|||
name|tablePermission
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|tPerm
operator|!=
literal|null
operator|&&
name|containReadPermission
argument_list|(
name|tPerm
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|hdfsAclHelper
operator|.
name|grantAcl
argument_list|(
name|userPermission
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SnapshotScannerHDFSAclStorage
operator|.
name|addUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The merged user permission doesn't contain READ, so remove user table HDFS acls if
comment|// it's set
name|removeUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal user permission scope "
operator|+
name|userPermission
operator|.
name|getAccessScope
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRevoke
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|UserPermission
name|userPermission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkInitialized
argument_list|()
condition|)
block|{
try|try
init|(
name|Table
name|aclTable
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|PermissionStorage
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|String
name|userName
init|=
name|userPermission
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|userPermission
operator|.
name|getAccessScope
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
name|UserPermission
name|userGlobalPerm
init|=
name|getUserGlobalPermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userGlobalPerm
operator|==
literal|null
operator|||
operator|!
name|containReadPermission
argument_list|(
name|userGlobalPerm
argument_list|)
condition|)
block|{
name|removeUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAMESPACE
case|:
name|NamespacePermission
name|nsPerm
init|=
operator|(
name|NamespacePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|UserPermission
name|userNsPerm
init|=
name|getUserNamespacePermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|nsPerm
operator|.
name|getNamespace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNsPerm
operator|==
literal|null
operator|||
operator|!
name|containReadPermission
argument_list|(
name|userNsPerm
argument_list|)
condition|)
block|{
name|removeUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|nsPerm
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLE
case|:
name|TablePermission
name|tPerm
init|=
operator|(
name|TablePermission
operator|)
name|userPermission
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|UserPermission
name|userTablePerm
init|=
name|getUserTablePermission
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userTablePerm
operator|==
literal|null
operator|||
operator|!
name|containReadPermission
argument_list|(
name|userTablePerm
argument_list|)
condition|)
block|{
name|removeUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|userPermission
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal user permission scope "
operator|+
name|userPermission
operator|.
name|getAccessScope
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeUserGlobalHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|UserPermission
name|userPermission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
condition|)
block|{
comment|// remove user global acls but reserve ns and table acls
name|Pair
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|namespaceAndTable
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserNamespaceAndTable
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|skipNamespaces
init|=
name|namespaceAndTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
init|=
name|namespaceAndTable
operator|.
name|getSecond
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|t
lambda|->
operator|!
name|skipNamespaces
operator|.
name|contains
argument_list|(
name|t
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|hdfsAclHelper
operator|.
name|revokeAcl
argument_list|(
name|userPermission
argument_list|,
name|skipNamespaces
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
name|SnapshotScannerHDFSAclStorage
operator|.
name|deleteUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeUserNamespaceHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|UserPermission
name|userPermission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// remove user ns acls but reserve table acls
if|if
condition|(
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|skipTables
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserNamespaceAndTable
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|hdfsAclHelper
operator|.
name|revokeAcl
argument_list|(
name|userPermission
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|skipTables
argument_list|)
expr_stmt|;
block|}
name|SnapshotScannerHDFSAclStorage
operator|.
name|deleteUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeUserTableHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|UserPermission
name|userPermission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
operator|&&
operator|!
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
comment|// remove table acls
name|hdfsAclHelper
operator|.
name|revokeAcl
argument_list|(
name|userPermission
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SnapshotScannerHDFSAclStorage
operator|.
name|deleteUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|containReadPermission
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|)
block|{
if|if
condition|(
name|userPermission
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|userPermission
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|action
lambda|->
name|action
operator|==
name|Action
operator|.
name|READ
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|UserPermission
name|getUserGlobalPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permissions
init|=
name|PermissionStorage
operator|.
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|PermissionStorage
operator|.
name|ACL_GLOBAL_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissions
operator|!=
literal|null
operator|&&
name|permissions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|permissions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|UserPermission
name|getUserNamespacePermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permissions
init|=
name|PermissionStorage
operator|.
name|getUserNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissions
operator|!=
literal|null
operator|&&
name|permissions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|permissions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|UserPermission
name|getUserTablePermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permissions
init|=
name|PermissionStorage
operator|.
name|getUserTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissions
operator|!=
literal|null
operator|&&
name|permissions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|permissions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isHdfsAclSet
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isHdfsAclSet
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isHdfsAclSet
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isHdfsAclSet
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Check if user global/namespace/table HDFS acls is already set to hfile    */
specifier|private
name|boolean
name|isHdfsAclSet
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isSet
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserGlobalHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|isSet
operator|=
name|isSet
operator|||
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|isSet
operator|=
name|isSet
operator|||
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserNamespaceHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|||
name|SnapshotScannerHDFSAclStorage
operator|.
name|hasUserTableHdfsAcl
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|isSet
return|;
block|}
specifier|private
name|boolean
name|checkInitialized
parameter_list|()
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|User
name|getActiveUser
parameter_list|(
name|ObserverContext
argument_list|<
name|?
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// for non-rpc handling, fallback to system user
name|Optional
argument_list|<
name|User
argument_list|>
name|optionalUser
init|=
name|ctx
operator|.
name|getCaller
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionalUser
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|optionalUser
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|userProvider
operator|.
name|getCurrent
argument_list|()
return|;
block|}
specifier|static
specifier|final
class|class
name|SnapshotScannerHDFSAclStorage
block|{
comment|/**      * Add a new CF in HBase acl table to record if the HBase read permission is synchronized to      * related hfiles. The record has two usages: 1. check if we need to remove HDFS acls for a      * grant without READ permission(eg: grant user table read permission and then grant user table      * write permission without merging the existing permissions, in this case, need to remove HDFS      * acls); 2. skip some HDFS acl sync because it may be already set(eg: grant user table read      * permission and then grant user ns read permission; grant user table read permission and then      * grant user table write permission with merging the existing permissions).      */
specifier|static
specifier|final
name|byte
index|[]
name|HDFS_ACL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
comment|// The value 'R' has no specific meaning, if cell value is not null, it means that the user HDFS
comment|// acls is set to hfiles.
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|HDFS_ACL_VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R"
argument_list|)
decl_stmt|;
specifier|static
name|void
name|addUserGlobalHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|addUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|PermissionStorage
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|addUserNamespaceHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|addUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|PermissionStorage
operator|.
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|addUserTableHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|addUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addUserEntry
parameter_list|(
name|Table
name|t
parameter_list|,
name|String
name|user
parameter_list|,
name|byte
index|[]
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
argument_list|)
argument_list|,
name|HDFS_ACL_VALUE
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|deleteUserGlobalHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|PermissionStorage
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|deleteUserNamespaceHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|PermissionStorage
operator|.
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|deleteUserTableHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteUserEntry
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|byte
index|[]
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|aclTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|deleteNamespaceHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteEntry
argument_list|(
name|aclTable
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|PermissionStorage
operator|.
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|deleteTableHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteEntry
argument_list|(
name|aclTable
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteEntry
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|byte
index|[]
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|)
expr_stmt|;
name|aclTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getTableUsers
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getEntryUsers
argument_list|(
name|aclTable
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getEntryUsers
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|byte
index|[]
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|aclTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|result
operator|.
name|listCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|users
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|users
return|;
block|}
specifier|static
name|Pair
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|getUserNamespaceAndTable
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|userEntries
init|=
name|SnapshotScannerHDFSAclStorage
operator|.
name|getUserEntries
argument_list|(
name|aclTable
argument_list|,
name|userName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|entry
range|:
name|userEntries
control|)
block|{
if|if
condition|(
name|PermissionStorage
operator|.
name|isNamespaceEntry
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|PermissionStorage
operator|.
name|fromNamespaceEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PermissionStorage
operator|.
name|isTableEntry
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|namespaces
argument_list|,
name|tables
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getUserEntries
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|aclTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|entry
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getRow
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entry
return|;
block|}
specifier|static
name|boolean
name|hasUserGlobalHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|PermissionStorage
operator|.
name|ACL_GLOBAL_NAME
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|hasUserNamespaceHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|PermissionStorage
operator|.
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|hasUserTableHdfsAcl
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasUserEntry
argument_list|(
name|aclTable
argument_list|,
name|user
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasUserEntry
parameter_list|(
name|Table
name|aclTable
parameter_list|,
name|String
name|userName
parameter_list|,
name|byte
index|[]
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HDFS_ACL_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|aclTable
operator|.
name|exists
argument_list|(
name|get
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

