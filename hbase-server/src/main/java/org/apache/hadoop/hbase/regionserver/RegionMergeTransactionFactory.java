begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A factory for creating RegionMergeTransactions, which execute region split as a "transaction".  * See {@link RegionMergeTransactionImpl}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RegionMergeTransactionFactory
implements|implements
name|Configurable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MERGE_TRANSACTION_IMPL_KEY
init|=
literal|"hbase.regionserver.merge.transaction.impl"
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|RegionMergeTransactionFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Create a merge transaction    * @param a region a to merge    * @param b region b to merge    * @param forcible if false, we will only merge adjacent regions    * @return transaction instance    */
specifier|public
name|RegionMergeTransactionImpl
name|create
parameter_list|(
specifier|final
name|Region
name|a
parameter_list|,
specifier|final
name|Region
name|b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
block|{
comment|// The implementation class must extend RegionMergeTransactionImpl, not only
comment|// implement the RegionMergeTransaction interface like you might expect,
comment|// because various places such as AssignmentManager use static methods
comment|// from RegionMergeTransactionImpl. Whatever we use for implementation must
comment|// be compatible, so it's safest to require ? extends RegionMergeTransactionImpl.
comment|// If not compatible we will throw a runtime exception from here.
return|return
name|ReflectionUtils
operator|.
name|instantiateWithCustomCtor
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|MERGE_TRANSACTION_IMPL_KEY
argument_list|,
name|RegionMergeTransactionImpl
operator|.
name|class
argument_list|,
name|RegionMergeTransactionImpl
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Region
operator|.
name|class
block|,
name|Region
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|a
block|,
name|b
block|,
name|forcible
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

