begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaMutationAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationEndpoint
import|;
end_import

begin_interface
specifier|public
interface|interface
name|RegionServerObserver
extends|extends
name|Coprocessor
block|{
comment|/**    * Called before stopping region server.    * @param env An instance of RegionServerCoprocessorEnvironment    * @throws IOException Signals that an I/O exception has occurred.    */
name|void
name|preStopRegionServer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Called before the regions merge.    * Call {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} to skip the merge.    * @throws IOException if an error occurred on the coprocessor    * @param ctx    * @param regionA    * @param regionB    * @throws IOException    */
name|void
name|preMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * called after the regions merge.    * @param c    * @param regionA    * @param regionB    * @param mergedRegion    * @throws IOException    */
name|void
name|postMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|,
specifier|final
name|Region
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called before PONR step as part of regions merge transaction. Calling    * {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} rollback the merge    * @param ctx    * @param regionA    * @param regionB    * @param metaEntries mutations to execute on hbase:meta atomically with regions merge updates.     *        Any puts or deletes to execute on hbase:meta can be added to the mutations.    * @throws IOException    */
name|void
name|preMergeCommit
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|,
annotation|@
name|MetaMutationAnnotation
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called after PONR step as part of regions merge transaction.    * @param ctx    * @param regionA    * @param regionB    * @param mergedRegion    * @throws IOException    */
name|void
name|postMergeCommit
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|,
specifier|final
name|Region
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called before the roll back of the regions merge.    * @param ctx    * @param regionA    * @param regionB    * @throws IOException    */
name|void
name|preRollBackMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called after the roll back of the regions merge.    * @param ctx    * @param regionA    * @param regionB    * @throws IOException    */
name|void
name|postRollBackMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Region
name|regionA
parameter_list|,
specifier|final
name|Region
name|regionB
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called before executing user request to roll a region server WAL.    * @param ctx An instance of ObserverContext    * @throws IOException Signals that an I/O exception has occurred.    */
name|void
name|preRollWALWriterRequest
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called after executing user request to roll a region server WAL.    * @param ctx An instance of ObserverContext    * @throws IOException Signals that an I/O exception has occurred.    */
name|void
name|postRollWALWriterRequest
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called after the replication endpoint is instantiated.    * @param ctx    * @param endpoint - the base endpoint for replication    * @return the endpoint to use during replication.    */
name|ReplicationEndpoint
name|postCreateReplicationEndPoint
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|ReplicationEndpoint
name|endpoint
parameter_list|)
function_decl|;
comment|/**    * This will be called before executing replication request to shipping log entries.    * @param ctx An instance of ObserverContext    * @param entries list of WALEntries to replicate    * @param cells Cells that the WALEntries refer to (if cells is non-null)    * @throws IOException Signals that an I/O exception has occurred.    */
name|void
name|preReplicateLogEntries
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
parameter_list|,
name|CellScanner
name|cells
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This will be called after executing replication request to shipping log entries.    * @param ctx An instance of ObserverContext    * @param entries list of WALEntries to replicate    * @param cells Cells that the WALEntries refer to (if cells is non-null)    * @throws IOException Signals that an I/O exception has occurred.    */
name|void
name|postReplicateLogEntries
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
parameter_list|,
name|CellScanner
name|cells
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

