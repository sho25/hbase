begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_comment
comment|/**  * This chore, every time it runs, will try to delete snapshots that are expired based on TTL in  * seconds configured for each Snapshot  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SnapshotCleanerChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapshotCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_CLEANER_CHORE_NAME
init|=
literal|"SnapshotCleaner"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_CLEANER_INTERVAL
init|=
literal|"hbase.master.cleaner.snapshot.interval"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SNAPSHOT_CLEANER_DEFAULT_INTERVAL
init|=
literal|1800
operator|*
literal|1000
decl_stmt|;
comment|// Default 30 min
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_SNAPSHOT_EVENT
init|=
literal|"Eligible Snapshot for cleanup due to expired TTL."
decl_stmt|;
specifier|private
specifier|final
name|SnapshotManager
name|snapshotManager
decl_stmt|;
comment|/**    * Construct Snapshot Cleaner Chore with parameterized constructor    *    * @param stopper When {@link Stoppable#isStopped()} is true, this chore will cancel and cleanup    * @param configuration The configuration to set    * @param snapshotManager SnapshotManager instance to manage lifecycle of snapshot    */
specifier|public
name|SnapshotCleanerChore
parameter_list|(
name|Stoppable
name|stopper
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|SnapshotManager
name|snapshotManager
parameter_list|)
block|{
name|super
argument_list|(
name|SNAPSHOT_CLEANER_CHORE_NAME
argument_list|,
name|stopper
argument_list|,
name|configuration
operator|.
name|getInt
argument_list|(
name|SNAPSHOT_CLEANER_INTERVAL
argument_list|,
name|SNAPSHOT_CLEANER_DEFAULT_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotManager
operator|=
name|snapshotManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Snapshot Cleaner Chore is starting up..."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|SnapshotProtos
operator|.
name|SnapshotDescription
argument_list|>
name|completedSnapshotsList
init|=
name|this
operator|.
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshotDescription
range|:
name|completedSnapshotsList
control|)
block|{
name|long
name|snapshotCreatedTime
init|=
name|snapshotDescription
operator|.
name|getCreationTime
argument_list|()
decl_stmt|;
name|long
name|snapshotTtl
init|=
name|snapshotDescription
operator|.
name|getTtl
argument_list|()
decl_stmt|;
comment|/*          * Backward compatibility after the patch deployment on HMaster          * Any snapshot with ttl 0 is to be considered as snapshot to keep FOREVER          * Default ttl value specified by {@HConstants.DEFAULT_SNAPSHOT_TTL}          */
if|if
condition|(
name|snapshotCreatedTime
operator|>
literal|0
operator|&&
name|snapshotTtl
operator|>
literal|0
operator|&&
name|snapshotTtl
operator|<
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
condition|)
block|{
name|long
name|currentTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|snapshotCreatedTime
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|snapshotTtl
argument_list|)
operator|)
operator|<
name|currentTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Event: {} Name: {}, CreatedTime: {}, TTL: {}, currentTime: {}"
argument_list|,
name|DELETE_SNAPSHOT_EVENT
argument_list|,
name|snapshotDescription
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotCreatedTime
argument_list|,
name|snapshotTtl
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|deleteExpiredSnapshot
argument_list|(
name|snapshotDescription
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while cleaning up Snapshots..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Snapshot Cleaner Chore is closing..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteExpiredSnapshot
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshotDescription
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|snapshotManager
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotDescription
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while deleting Snapshot: {}"
argument_list|,
name|snapshotDescription
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

