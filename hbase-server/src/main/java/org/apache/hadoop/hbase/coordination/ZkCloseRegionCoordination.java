begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * ZK-based implementation of {@link CloseRegionCoordination}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZkCloseRegionCoordination
implements|implements
name|CloseRegionCoordination
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZkCloseRegionCoordination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|FAILED_VERSION
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|CoordinatedStateManager
name|csm
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|public
name|ZkCloseRegionCoordination
parameter_list|(
name|CoordinatedStateManager
name|csm
parameter_list|,
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|this
operator|.
name|csm
operator|=
name|csm
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
block|}
comment|/**    * In ZK-based version we're checking for bad znode state, e.g. if we're    * trying to delete the znode, and it's not ours (version doesn't match).    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkClosingState
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|CloseRegionDetails
name|crd
parameter_list|)
block|{
name|ZkCloseRegionDetails
name|zkCrd
init|=
operator|(
name|ZkCloseRegionDetails
operator|)
name|crd
decl_stmt|;
try|try
block|{
return|return
name|zkCrd
operator|.
name|isPublishStatusInZk
argument_list|()
operator|&&
operator|!
name|ZKAssign
operator|.
name|checkClosingState
argument_list|(
name|watcher
argument_list|,
name|regionInfo
argument_list|,
operator|(
operator|(
name|ZkCloseRegionDetails
operator|)
name|crd
operator|)
operator|.
name|getExpectedVersion
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|csm
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Unrecoverable exception while checking state with zk "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", still finishing close"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
comment|/**    * In ZK-based version we do some znodes transitioning.    */
annotation|@
name|Override
specifier|public
name|void
name|setClosedState
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|CloseRegionDetails
name|crd
parameter_list|)
block|{
name|ZkCloseRegionDetails
name|zkCrd
init|=
operator|(
name|ZkCloseRegionDetails
operator|)
name|crd
decl_stmt|;
name|String
name|name
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkCrd
operator|.
name|isPublishStatusInZk
argument_list|()
condition|)
block|{
if|if
condition|(
name|setClosedState
argument_list|(
name|region
argument_list|,
name|sn
argument_list|,
name|zkCrd
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set closed state in zk for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set closed state in zk UNSUCCESSFUL for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Parse ZK-related fields from request.    */
annotation|@
name|Override
specifier|public
name|CloseRegionDetails
name|parseFromProtoRequest
parameter_list|(
name|AdminProtos
operator|.
name|CloseRegionRequest
name|request
parameter_list|)
block|{
name|ZkCloseRegionCoordination
operator|.
name|ZkCloseRegionDetails
name|zkCrd
init|=
operator|new
name|ZkCloseRegionCoordination
operator|.
name|ZkCloseRegionDetails
argument_list|()
decl_stmt|;
name|zkCrd
operator|.
name|setPublishStatusInZk
argument_list|(
name|request
operator|.
name|getTransitionInZK
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|versionOfClosingNode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasVersionOfClosingNode
argument_list|()
condition|)
block|{
name|versionOfClosingNode
operator|=
name|request
operator|.
name|getVersionOfClosingNode
argument_list|()
expr_stmt|;
block|}
name|zkCrd
operator|.
name|setExpectedVersion
argument_list|(
name|versionOfClosingNode
argument_list|)
expr_stmt|;
return|return
name|zkCrd
return|;
block|}
comment|/**    * No ZK tracking will be performed for that case.    * This method should be used when we want to construct CloseRegionDetails,    * but don't want any coordination on that (when it's initiated by regionserver),    * so no znode state transitions will be performed.    */
annotation|@
name|Override
specifier|public
name|CloseRegionDetails
name|getDetaultDetails
parameter_list|()
block|{
name|ZkCloseRegionCoordination
operator|.
name|ZkCloseRegionDetails
name|zkCrd
init|=
operator|new
name|ZkCloseRegionCoordination
operator|.
name|ZkCloseRegionDetails
argument_list|()
decl_stmt|;
name|zkCrd
operator|.
name|setPublishStatusInZk
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|zkCrd
operator|.
name|setExpectedVersion
argument_list|(
name|FAILED_VERSION
argument_list|)
expr_stmt|;
return|return
name|zkCrd
return|;
block|}
comment|/**    * Transition ZK node to CLOSED    * @param region HRegion instance being closed    * @param sn ServerName on which task runs    * @param zkCrd  details about region closing operation.    * @return If the state is set successfully    */
specifier|private
name|boolean
name|setClosedState
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|ZkCloseRegionDetails
name|zkCrd
parameter_list|)
block|{
specifier|final
name|int
name|expectedVersion
init|=
name|zkCrd
operator|.
name|getExpectedVersion
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|watcher
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|sn
argument_list|,
name|expectedVersion
argument_list|)
operator|==
name|FAILED_VERSION
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Completed the CLOSE of a region but when transitioning from "
operator|+
literal|" CLOSING to CLOSED got a version mismatch, someone else clashed "
operator|+
literal|"so now unassigning"
argument_list|)
expr_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// I've seen NPE when table was deleted while close was running in unit tests.
name|LOG
operator|.
name|warn
argument_list|(
literal|"NPE during close -- catching and continuing..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed transitioning node from CLOSING to CLOSED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close region after failing to transition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * ZK-based implementation. Has details about whether the state transition should be    * reflected in ZK, as well as expected version of znode.    */
specifier|public
specifier|static
class|class
name|ZkCloseRegionDetails
implements|implements
name|CloseRegionCoordination
operator|.
name|CloseRegionDetails
block|{
comment|/**      * True if we are to update zk about the region close; if the close      * was orchestrated by master, then update zk.  If the close is being run by      * the regionserver because its going down, don't update zk.      * */
specifier|private
name|boolean
name|publishStatusInZk
decl_stmt|;
comment|/**      * The version of znode to compare when RS transitions the znode from      * CLOSING state.      */
specifier|private
name|int
name|expectedVersion
init|=
name|FAILED_VERSION
decl_stmt|;
specifier|public
name|ZkCloseRegionDetails
parameter_list|()
block|{     }
specifier|public
name|ZkCloseRegionDetails
parameter_list|(
name|boolean
name|publishStatusInZk
parameter_list|,
name|int
name|expectedVersion
parameter_list|)
block|{
name|this
operator|.
name|publishStatusInZk
operator|=
name|publishStatusInZk
expr_stmt|;
name|this
operator|.
name|expectedVersion
operator|=
name|expectedVersion
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPublishStatusInZk
parameter_list|()
block|{
return|return
name|publishStatusInZk
return|;
block|}
specifier|public
name|void
name|setPublishStatusInZk
parameter_list|(
name|boolean
name|publishStatusInZk
parameter_list|)
block|{
name|this
operator|.
name|publishStatusInZk
operator|=
name|publishStatusInZk
expr_stmt|;
block|}
specifier|public
name|int
name|getExpectedVersion
parameter_list|()
block|{
return|return
name|expectedVersion
return|;
block|}
specifier|public
name|void
name|setExpectedVersion
parameter_list|(
name|int
name|expectedVersion
parameter_list|)
block|{
name|this
operator|.
name|expectedVersion
operator|=
name|expectedVersion
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

