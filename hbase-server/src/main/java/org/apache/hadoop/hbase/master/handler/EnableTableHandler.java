begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|BulkAssigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|GeneralBulkAssigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
operator|.
name|TableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Handler to run enable of a table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|EnableTableHandler
extends|extends
name|EventHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EnableTableHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|AssignmentManager
name|assignmentManager
decl_stmt|;
specifier|private
specifier|final
name|TableLockManager
name|tableLockManager
decl_stmt|;
specifier|private
specifier|final
name|CatalogTracker
name|catalogTracker
decl_stmt|;
specifier|private
name|boolean
name|skipTableStateCheck
init|=
literal|false
decl_stmt|;
specifier|private
name|TableLock
name|tableLock
decl_stmt|;
specifier|public
name|EnableTableHandler
parameter_list|(
name|Server
name|server
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|AssignmentManager
name|assignmentManager
parameter_list|,
name|TableLockManager
name|tableLockManager
parameter_list|,
name|boolean
name|skipTableStateCheck
parameter_list|)
block|{
name|super
argument_list|(
name|server
argument_list|,
name|EventType
operator|.
name|C_M_ENABLE_TABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|catalogTracker
operator|=
name|catalogTracker
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
name|assignmentManager
expr_stmt|;
name|this
operator|.
name|tableLockManager
operator|=
name|tableLockManager
expr_stmt|;
name|this
operator|.
name|skipTableStateCheck
operator|=
name|skipTableStateCheck
expr_stmt|;
block|}
specifier|public
name|EnableTableHandler
name|prepare
parameter_list|()
throws|throws
name|TableNotFoundException
throws|,
name|TableNotDisabledException
throws|,
name|IOException
block|{
comment|//acquire the table write lock, blocking
name|this
operator|.
name|tableLock
operator|=
name|this
operator|.
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|tableName
argument_list|,
name|EventType
operator|.
name|C_M_ENABLE_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Check if table exists
if|if
condition|(
operator|!
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|catalogTracker
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
comment|// retainAssignment is true only during recovery.  In normal case it is false
if|if
condition|(
operator|!
name|this
operator|.
name|skipTableStateCheck
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|removeEnablingTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// TODO : Use HBCK to clear such nodes
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete the ENABLING node for the table "
operator|+
name|tableName
operator|+
literal|".  The table will remain unusable. Run HBCK to manually fix the problem."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There could be multiple client requests trying to disable or enable
comment|// the table at the same time. Ensure only the first request is honored
comment|// After that, no other requests can be accepted until the table reaches
comment|// DISABLED or ENABLED.
if|if
condition|(
operator|!
name|skipTableStateCheck
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|checkDisabledAndSetEnablingTable
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" isn't disabled; skipping enable"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TableNotDisabledException
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to ensure that the table will be"
operator|+
literal|" enabling because of a ZooKeeper issue"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|releaseTableLock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|name
init|=
literal|"UnknownServerName"
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|name
operator|+
literal|"-"
operator|+
name|getSeqid
argument_list|()
operator|+
literal|"-"
operator|+
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to enable the table "
operator|+
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
operator|(
operator|(
name|HMaster
operator|)
name|this
operator|.
name|server
operator|)
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preEnableTableHandler
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|handleEnableTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postEnableTableHandler
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to enable the table "
operator|+
name|this
operator|.
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to enable the table "
operator|+
name|this
operator|.
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to enable the table "
operator|+
name|this
operator|.
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseTableLock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|releaseTableLock
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|tableLock
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|tableLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not release the table lock"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleEnableTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// I could check table is disabling and if so, not enable but require
comment|// that user first finish disabling but that might be obnoxious.
comment|// Set table enabling flag up in zk.
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnablingTable
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|ServerManager
name|serverManager
init|=
operator|(
operator|(
name|HMaster
operator|)
name|this
operator|.
name|server
operator|)
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
comment|// Get the regions of this table. We're done when all listed
comment|// tables are onlined.
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tableRegionsAndLocations
init|=
name|MetaReader
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|this
operator|.
name|catalogTracker
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|countOfRegionsInTable
init|=
name|tableRegionsAndLocations
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsToAssign
init|=
name|regionsToAssignWithServerName
argument_list|(
name|tableRegionsAndLocations
argument_list|)
decl_stmt|;
name|int
name|regionsCount
init|=
name|regionsToAssign
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsCount
operator|==
literal|0
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Table '"
operator|+
name|this
operator|.
name|tableName
operator|+
literal|"' has "
operator|+
name|countOfRegionsInTable
operator|+
literal|" regions, of which "
operator|+
name|regionsCount
operator|+
literal|" are offline."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|onlineServers
init|=
name|serverManager
operator|.
name|createDestinationServersList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|bulkPlan
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getBalancer
argument_list|()
operator|.
name|retainAssignment
argument_list|(
name|regionsToAssign
argument_list|,
name|onlineServers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bulk assigning "
operator|+
name|regionsCount
operator|+
literal|" region(s) across "
operator|+
name|bulkPlan
operator|.
name|size
argument_list|()
operator|+
literal|" server(s), retainAssignment=true"
argument_list|)
expr_stmt|;
name|BulkAssigner
name|ba
init|=
operator|new
name|GeneralBulkAssigner
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|bulkPlan
argument_list|,
name|this
operator|.
name|assignmentManager
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ba
operator|.
name|bulkAssign
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Enable operation was interrupted when enabling table '"
operator|+
name|this
operator|.
name|tableName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// Preserve the interrupt.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|done
condition|)
block|{
comment|// Flip the table to enabled.
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|setEnabledTable
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table '"
operator|+
name|this
operator|.
name|tableName
operator|+
literal|"' was successfully enabled. Status: done="
operator|+
name|done
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table '"
operator|+
name|this
operator|.
name|tableName
operator|+
literal|"' wasn't successfully enabled. Status: done="
operator|+
name|done
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param regionsInMeta    * @return List of regions neither in transition nor assigned.    * @throws IOException    */
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsToAssignWithServerName
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regionsInMeta
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsToAssign
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|regionsInMeta
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionLocation
range|:
name|regionsInMeta
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|regionLocation
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|regionLocation
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionStates
operator|.
name|isRegionOffline
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|regionsToAssign
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping assign for the region "
operator|+
name|hri
operator|+
literal|" during enable table "
operator|+
name|hri
operator|.
name|getTable
argument_list|()
operator|+
literal|" because its already in tranition or assigned."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|regionsToAssign
return|;
block|}
block|}
end_class

end_unit

