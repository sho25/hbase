begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CancelledKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Sends responses of RPC back to clients.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|SimpleRpcServerResponder
extends|extends
name|Thread
block|{
comment|/**  */
specifier|private
specifier|final
name|SimpleRpcServer
name|simpleRpcServer
decl_stmt|;
specifier|private
specifier|final
name|Selector
name|writeSelector
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|SimpleServerRpcConnection
argument_list|>
name|writingCons
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|SimpleServerRpcConnection
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleRpcServerResponder
parameter_list|(
name|SimpleRpcServer
name|simpleRpcServer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|simpleRpcServer
operator|=
name|simpleRpcServer
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
literal|"RpcServer.responder"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|Threads
operator|.
name|LOGGING_EXCEPTION_HANDLER
argument_list|)
expr_stmt|;
name|writeSelector
operator|=
name|Selector
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// create a selector
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
try|try
block|{
name|doRunLoop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": stopping"
argument_list|)
expr_stmt|;
try|try
block|{
name|writeSelector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|getName
argument_list|()
operator|+
literal|": couldn't close write selector"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Take the list of the connections that want to write, and register them in the selector.    */
specifier|private
name|void
name|registerWrites
parameter_list|()
block|{
name|Iterator
argument_list|<
name|SimpleServerRpcConnection
argument_list|>
name|it
init|=
name|writingCons
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SimpleServerRpcConnection
name|c
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|SelectionKey
name|sk
init|=
name|c
operator|.
name|channel
operator|.
name|keyFor
argument_list|(
name|writeSelector
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sk
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|.
name|channel
operator|.
name|register
argument_list|(
name|writeSelector
argument_list|,
name|SelectionKey
operator|.
name|OP_WRITE
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|e
parameter_list|)
block|{
comment|// ignore: the client went away.
if|if
condition|(
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sk
operator|.
name|interestOps
argument_list|(
name|SelectionKey
operator|.
name|OP_WRITE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CancelledKeyException
name|e
parameter_list|)
block|{
comment|// ignore: the client went away.
if|if
condition|(
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add a connection to the list that want to write,    */
specifier|public
name|void
name|registerForWrite
parameter_list|(
name|SimpleServerRpcConnection
name|c
parameter_list|)
block|{
if|if
condition|(
name|writingCons
operator|.
name|add
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|writeSelector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRunLoop
parameter_list|()
block|{
name|long
name|lastPurgeTime
init|=
literal|0
decl_stmt|;
comment|// last check for old calls.
while|while
condition|(
name|this
operator|.
name|simpleRpcServer
operator|.
name|running
condition|)
block|{
try|try
block|{
name|registerWrites
argument_list|()
expr_stmt|;
name|int
name|keyCt
init|=
name|writeSelector
operator|.
name|select
argument_list|(
name|this
operator|.
name|simpleRpcServer
operator|.
name|purgeTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyCt
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|SelectionKey
argument_list|>
name|keys
init|=
name|writeSelector
operator|.
name|selectedKeys
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SelectionKey
argument_list|>
name|iter
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SelectionKey
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|.
name|isValid
argument_list|()
operator|&&
name|key
operator|.
name|isWritable
argument_list|()
condition|)
block|{
name|doAsyncWrite
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": asyncWrite"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|lastPurgeTime
operator|=
name|purge
argument_list|(
name|lastPurgeTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|simpleRpcServer
operator|.
name|errorHandler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|simpleRpcServer
operator|.
name|errorHandler
operator|.
name|checkOOME
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": exiting on OutOfMemoryError"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|//
comment|// we can run out of memory if we have too many threads
comment|// log the event and sleep for a minute and give
comment|// some thread(s) a chance to finish
comment|//
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|": OutOfMemoryError in server select"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|": exception in Responder "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": stopped"
argument_list|)
expr_stmt|;
block|}
comment|/**    * If there were some calls that have not been sent out for a long time, we close the connection.    * @return the time of the purge.    */
specifier|private
name|long
name|purge
parameter_list|(
name|long
name|lastPurgeTime
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|<
name|lastPurgeTime
operator|+
name|this
operator|.
name|simpleRpcServer
operator|.
name|purgeTimeout
condition|)
block|{
return|return
name|lastPurgeTime
return|;
block|}
name|ArrayList
argument_list|<
name|SimpleServerRpcConnection
argument_list|>
name|conWithOldCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get the list of channels from list of keys.
synchronized|synchronized
init|(
name|writeSelector
operator|.
name|keys
argument_list|()
init|)
block|{
for|for
control|(
name|SelectionKey
name|key
range|:
name|writeSelector
operator|.
name|keys
argument_list|()
control|)
block|{
name|SimpleServerRpcConnection
name|connection
init|=
operator|(
name|SimpleServerRpcConnection
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Coding error: SelectionKey key without attachment."
argument_list|)
throw|;
block|}
name|SimpleServerCall
name|call
init|=
name|connection
operator|.
name|responseQueue
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
operator|&&
name|now
operator|>
name|call
operator|.
name|lastSentTime
operator|+
name|this
operator|.
name|simpleRpcServer
operator|.
name|purgeTimeout
condition|)
block|{
name|conWithOldCalls
operator|.
name|add
argument_list|(
name|call
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Seems safer to close the connection outside of the synchronized loop...
for|for
control|(
name|SimpleServerRpcConnection
name|connection
range|:
name|conWithOldCalls
control|)
block|{
name|this
operator|.
name|simpleRpcServer
operator|.
name|closeConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|now
return|;
block|}
specifier|private
name|void
name|doAsyncWrite
parameter_list|(
name|SelectionKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleServerRpcConnection
name|connection
init|=
operator|(
name|SimpleServerRpcConnection
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"doAsyncWrite: no connection"
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|.
name|channel
argument_list|()
operator|!=
name|connection
operator|.
name|channel
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"doAsyncWrite: bad channel"
argument_list|)
throw|;
block|}
if|if
condition|(
name|processAllResponses
argument_list|(
name|connection
argument_list|)
condition|)
block|{
try|try
block|{
comment|// We wrote everything, so we don't need to be told when the socket is ready for
comment|// write anymore.
name|key
operator|.
name|interestOps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancelledKeyException
name|e
parameter_list|)
block|{
comment|/*          * The Listener/reader might have closed the socket. We don't explicitly cancel the key, so          * not sure if this will ever fire. This warning could be removed.          */
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while changing ops : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Process the response for this call. You need to have the lock on    * {@link org.apache.hadoop.hbase.ipc.SimpleServerRpcConnection#responseWriteLock}    * @param call the call    * @return true if we proceed the call fully, false otherwise.    * @throws IOException    */
name|boolean
name|processResponse
parameter_list|(
specifier|final
name|SimpleServerCall
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|error
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// Send as much data as we can in the non-blocking fashion
name|long
name|numBytes
init|=
name|this
operator|.
name|simpleRpcServer
operator|.
name|channelWrite
argument_list|(
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|channel
argument_list|,
name|call
operator|.
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Error writing on the socket "
operator|+
literal|"for the call:"
operator|+
name|call
operator|.
name|toShortString
argument_list|()
argument_list|)
throw|;
block|}
name|error
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|error
condition|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
name|call
operator|.
name|toShortString
argument_list|()
operator|+
literal|": output error -- closing"
argument_list|)
expr_stmt|;
comment|// We will be closing this connection itself. Mark this call as done so that all the
comment|// buffer(s) it got from pool can get released
name|call
operator|.
name|done
argument_list|()
expr_stmt|;
name|this
operator|.
name|simpleRpcServer
operator|.
name|closeConnection
argument_list|(
name|call
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|call
operator|.
name|response
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|call
operator|.
name|done
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
comment|// Socket can't take more, we will have to come back.
block|}
block|}
comment|/**    * Process all the responses for this connection    * @return true if all the calls were processed or that someone else is doing it. false if there *    *         is still some work to do. In this case, we expect the caller to delay us.    * @throws IOException    */
specifier|private
name|boolean
name|processAllResponses
parameter_list|(
specifier|final
name|SimpleServerRpcConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We want only one writer on the channel for a connection at a time.
name|connection
operator|.
name|responseWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// protection if some handlers manage to need all the responder
name|SimpleServerCall
name|call
init|=
name|connection
operator|.
name|responseQueue
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|processResponse
argument_list|(
name|call
argument_list|)
condition|)
block|{
name|connection
operator|.
name|responseQueue
operator|.
name|addFirst
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|responseWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|connection
operator|.
name|responseQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|//
comment|// Enqueue a response from the application.
comment|//
name|void
name|doRespond
parameter_list|(
name|SimpleServerCall
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
comment|// If there is already a write in progress, we don't wait. This allows to free the handlers
comment|// immediately for other tasks.
if|if
condition|(
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseQueue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseWriteLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If we're alone, we can try to do a direct call to the socket. It's
comment|// an optimisation to save on context switches and data transfer between cores..
if|if
condition|(
name|processResponse
argument_list|(
name|call
argument_list|)
condition|)
block|{
return|return;
comment|// we're done.
block|}
comment|// Too big to fit, putting ahead.
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseQueue
operator|.
name|addFirst
argument_list|(
name|call
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
comment|// We will register to the selector later, outside of the lock.
block|}
block|}
finally|finally
block|{
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|call
operator|.
name|getConnection
argument_list|()
operator|.
name|responseQueue
operator|.
name|addLast
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|responder
operator|.
name|registerForWrite
argument_list|(
name|call
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the serve time when the response has to be sent later
name|call
operator|.
name|lastSentTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

