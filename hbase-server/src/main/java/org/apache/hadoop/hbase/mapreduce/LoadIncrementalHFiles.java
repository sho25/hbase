begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Tool to load the output of HFileOutputFormat into an existing table.  * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0. Use  *             {@link org.apache.hadoop.hbase.tool.LoadIncrementalHFiles} instead.  */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"
argument_list|,
name|justification
operator|=
literal|"Temporary glue. To be removed"
argument_list|)
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|LoadIncrementalHFiles
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
block|{
comment|/**    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0. Use    *             {@link org.apache.hadoop.hbase.tool.LoadIncrementalHFiles.LoadQueueItem} instead.    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"
argument_list|,
name|justification
operator|=
literal|"Temporary glue. To be removed"
argument_list|)
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|static
class|class
name|LoadQueueItem
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
operator|.
name|LoadQueueItem
block|{
specifier|public
name|LoadQueueItem
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|Path
name|hfilePath
parameter_list|)
block|{
name|super
argument_list|(
name|family
argument_list|,
name|hfilePath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|LoadIncrementalHFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|run
parameter_list|(
name|String
name|dirPath
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
operator|.
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|originRet
decl_stmt|;
if|if
condition|(
name|dirPath
operator|!=
literal|null
condition|)
block|{
name|originRet
operator|=
name|run
argument_list|(
name|dirPath
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originRet
operator|=
name|run
argument_list|(
name|map
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|originRet
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|ret
operator|.
name|put
argument_list|(
operator|new
name|LoadQueueItem
argument_list|(
name|k
operator|.
name|getFamily
argument_list|()
argument_list|,
name|k
operator|.
name|getFilePath
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

