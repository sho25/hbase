begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
operator|.
name|NO_PRIORITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
operator|.
name|PRIORITY_USER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|ConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|PropagatingConfigurationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|RegionServerSpaceQuotaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|CompactionThroughputControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|StealJobQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Compact region on request and then run split if appropriate  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompactSplit
implements|implements
name|CompactionRequester
implements|,
name|PropagatingConfigurationObserver
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactSplit
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Configuration key for the large compaction threads.
specifier|public
specifier|final
specifier|static
name|String
name|LARGE_COMPACTION_THREADS
init|=
literal|"hbase.regionserver.thread.compaction.large"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|LARGE_COMPACTION_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
comment|// Configuration key for the small compaction threads.
specifier|public
specifier|final
specifier|static
name|String
name|SMALL_COMPACTION_THREADS
init|=
literal|"hbase.regionserver.thread.compaction.small"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|SMALL_COMPACTION_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
comment|// Configuration key for split threads
specifier|public
specifier|final
specifier|static
name|String
name|SPLIT_THREADS
init|=
literal|"hbase.regionserver.thread.split"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|SPLIT_THREADS_DEFAULT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_REGION_SPLIT_LIMIT
init|=
literal|"hbase.regionserver.regionSplitLimit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_SERVER_REGION_SPLIT_LIMIT
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|longCompactions
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|shortCompactions
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|splits
decl_stmt|;
specifier|private
specifier|volatile
name|ThroughputController
name|compactionThroughputController
decl_stmt|;
comment|/**    * Splitting should not take place if the total number of regions exceed this.    * This is not a hard limit to the number of regions but it is a guideline to    * stop splitting after number of online regions is greater than this.    */
specifier|private
name|int
name|regionSplitLimit
decl_stmt|;
comment|/** @param server */
name|CompactSplit
parameter_list|(
name|HRegionServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionSplitLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|REGION_SERVER_REGION_SPLIT_LIMIT
argument_list|,
name|DEFAULT_REGION_SERVER_REGION_SPLIT_LIMIT
argument_list|)
expr_stmt|;
name|int
name|largeThreads
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|LARGE_COMPACTION_THREADS
argument_list|,
name|LARGE_COMPACTION_THREADS_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|smallThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SMALL_COMPACTION_THREADS
argument_list|,
name|SMALL_COMPACTION_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|splitThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|SPLIT_THREADS
argument_list|,
name|SPLIT_THREADS_DEFAULT
argument_list|)
decl_stmt|;
comment|// if we have throttle threads, make sure the user also specified size
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|largeThreads
operator|>
literal|0
operator|&&
name|smallThreads
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StealJobQueue
argument_list|<
name|Runnable
argument_list|>
name|stealJobQueue
init|=
operator|new
name|StealJobQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|COMPARATOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|longCompactions
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|largeThreads
argument_list|,
name|largeThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|stealJobQueue
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|String
name|name
init|=
name|n
operator|+
literal|"-longCompactions-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|longCompactions
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|Rejection
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|longCompactions
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
name|this
operator|.
name|shortCompactions
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|smallThreads
argument_list|,
name|smallThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|stealJobQueue
operator|.
name|getStealFromQueue
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|String
name|name
init|=
name|n
operator|+
literal|"-shortCompactions-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|shortCompactions
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|Rejection
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|splits
operator|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|splitThreads
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|String
name|name
init|=
name|n
operator|+
literal|"-splits-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// compaction throughput controller
name|this
operator|.
name|compactionThroughputController
operator|=
name|CompactionThroughputControllerFactory
operator|.
name|create
argument_list|(
name|server
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"compaction_queue=("
operator|+
name|longCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|":"
operator|+
name|shortCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")"
operator|+
literal|", split_queue="
operator|+
name|splits
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|dumpQueue
parameter_list|()
block|{
name|StringBuilder
name|queueLists
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"Compaction/Split Queue dump:\n"
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"  LargeCompation Queue:\n"
argument_list|)
expr_stmt|;
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|lq
init|=
name|longCompactions
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Runnable
argument_list|>
name|it
init|=
name|lq
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|queueLists
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shortCompactions
operator|!=
literal|null
condition|)
block|{
name|queueLists
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"  SmallCompation Queue:\n"
argument_list|)
expr_stmt|;
name|lq
operator|=
name|shortCompactions
operator|.
name|getQueue
argument_list|()
expr_stmt|;
name|it
operator|=
name|lq
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|queueLists
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|queueLists
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"  Split Queue:\n"
argument_list|)
expr_stmt|;
name|lq
operator|=
name|splits
operator|.
name|getQueue
argument_list|()
expr_stmt|;
name|it
operator|=
name|lq
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|queueLists
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queueLists
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|queueLists
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|requestSplit
parameter_list|(
specifier|final
name|Region
name|r
parameter_list|)
block|{
comment|// don't split regions that are blocking
if|if
condition|(
name|shouldSplitRegion
argument_list|()
operator|&&
operator|(
operator|(
name|HRegion
operator|)
name|r
operator|)
operator|.
name|getCompactPriority
argument_list|()
operator|>=
name|PRIORITY_USER
condition|)
block|{
name|byte
index|[]
name|midKey
init|=
operator|(
operator|(
name|HRegion
operator|)
name|r
operator|)
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|midKey
operator|!=
literal|null
condition|)
block|{
name|requestSplit
argument_list|(
name|r
argument_list|,
name|midKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|requestSplit
parameter_list|(
specifier|final
name|Region
name|r
parameter_list|,
name|byte
index|[]
name|midKey
parameter_list|)
block|{
name|requestSplit
argument_list|(
name|r
argument_list|,
name|midKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/*    * The User parameter allows the split thread to assume the correct user identity    */
specifier|public
specifier|synchronized
name|void
name|requestSplit
parameter_list|(
specifier|final
name|Region
name|r
parameter_list|,
name|byte
index|[]
name|midKey
parameter_list|,
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|midKey
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region "
operator|+
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" not splittable because midkey=null"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|HRegion
operator|)
name|r
operator|)
operator|.
name|shouldForceSplit
argument_list|()
condition|)
block|{
operator|(
operator|(
name|HRegion
operator|)
name|r
operator|)
operator|.
name|clearSplit
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|this
operator|.
name|splits
operator|.
name|execute
argument_list|(
operator|new
name|SplitRequest
argument_list|(
name|r
argument_list|,
name|midKey
argument_list|,
name|this
operator|.
name|server
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Splitting "
operator|+
name|r
operator|+
literal|", "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not execute split for "
operator|+
name|r
argument_list|,
name|ree
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|CompactionCompleteTracker
block|{
specifier|default
name|void
name|completed
parameter_list|(
name|Store
name|store
parameter_list|)
block|{     }
block|}
specifier|private
specifier|static
specifier|final
name|CompactionCompleteTracker
name|DUMMY_COMPLETE_TRACKER
init|=
operator|new
name|CompactionCompleteTracker
argument_list|()
block|{       }
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|AggregatingCompleteTracker
implements|implements
name|CompactionCompleteTracker
block|{
specifier|private
specifier|final
name|CompactionLifeCycleTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|remaining
decl_stmt|;
specifier|public
name|AggregatingCompleteTracker
parameter_list|(
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|int
name|numberOfStores
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|numberOfStores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|Store
name|store
parameter_list|)
block|{
if|if
condition|(
name|remaining
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tracker
operator|.
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|CompactionCompleteTracker
name|getCompleteTracker
parameter_list|(
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|IntSupplier
name|numberOfStores
parameter_list|)
block|{
if|if
condition|(
name|tracker
operator|==
name|CompactionLifeCycleTracker
operator|.
name|DUMMY
condition|)
block|{
comment|// a simple optimization to avoid creating unnecessary objects as usually we do not care about
comment|// the life cycle of a compaction.
return|return
name|DUMMY_COMPLETE_TRACKER
return|;
block|}
else|else
block|{
return|return
operator|new
name|AggregatingCompleteTracker
argument_list|(
name|tracker
argument_list|,
name|numberOfStores
operator|.
name|getAsInt
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|String
name|why
parameter_list|,
name|int
name|priority
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|requestCompactionInternal
argument_list|(
name|region
argument_list|,
name|why
argument_list|,
name|priority
argument_list|,
literal|true
argument_list|,
name|tracker
argument_list|,
name|getCompleteTracker
argument_list|(
name|tracker
argument_list|,
parameter_list|()
lambda|->
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilyCount
argument_list|()
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|requestCompaction
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|HStore
name|store
parameter_list|,
name|String
name|why
parameter_list|,
name|int
name|priority
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|requestCompactionInternal
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|why
argument_list|,
name|priority
argument_list|,
literal|true
argument_list|,
name|tracker
argument_list|,
name|getCompleteTracker
argument_list|(
name|tracker
argument_list|,
parameter_list|()
lambda|->
literal|1
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|requestCompactionInternal
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|String
name|why
parameter_list|,
name|int
name|priority
parameter_list|,
name|boolean
name|selectNow
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionCompleteTracker
name|completeTracker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// request compaction on all stores
for|for
control|(
name|HStore
name|store
range|:
name|region
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|requestCompactionInternal
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|why
argument_list|,
name|priority
argument_list|,
name|selectNow
argument_list|,
name|tracker
argument_list|,
name|completeTracker
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|requestCompactionInternal
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|HStore
name|store
parameter_list|,
name|String
name|why
parameter_list|,
name|int
name|priority
parameter_list|,
name|boolean
name|selectNow
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionCompleteTracker
name|completeTracker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|.
name|isStopped
argument_list|()
operator|||
operator|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|isCompactionEnabled
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|RegionServerSpaceQuotaManager
name|spaceQuotaManager
init|=
name|this
operator|.
name|server
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|spaceQuotaManager
operator|!=
literal|null
operator|&&
name|spaceQuotaManager
operator|.
name|areCompactionsDisabled
argument_list|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|reason
init|=
literal|"Ignoring compaction request for "
operator|+
name|region
operator|+
literal|" as an active space quota violation "
operator|+
literal|" policy disallows compactions."
decl_stmt|;
name|tracker
operator|.
name|notExecuted
argument_list|(
name|store
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|completeTracker
operator|.
name|completed
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompactionContext
name|compaction
decl_stmt|;
if|if
condition|(
name|selectNow
condition|)
block|{
name|Optional
argument_list|<
name|CompactionContext
argument_list|>
name|c
init|=
name|selectCompaction
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|priority
argument_list|,
name|tracker
argument_list|,
name|completeTracker
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// message logged inside
return|return;
block|}
name|compaction
operator|=
name|c
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|compaction
operator|=
literal|null
expr_stmt|;
block|}
name|ThreadPoolExecutor
name|pool
decl_stmt|;
if|if
condition|(
name|selectNow
condition|)
block|{
comment|// compaction.get is safe as we will just return if selectNow is true but no compaction is
comment|// selected
name|pool
operator|=
name|store
operator|.
name|throttleCompaction
argument_list|(
name|compaction
operator|.
name|getRequest
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
condition|?
name|longCompactions
else|:
name|shortCompactions
expr_stmt|;
block|}
else|else
block|{
comment|// We assume that most compactions are small. So, put system compactions into small
comment|// pool; we will do selection there, and move to large pool if necessary.
name|pool
operator|=
name|shortCompactions
expr_stmt|;
block|}
name|pool
operator|.
name|execute
argument_list|(
operator|new
name|CompactionRunner
argument_list|(
name|store
argument_list|,
name|region
argument_list|,
name|compaction
argument_list|,
name|tracker
argument_list|,
name|completeTracker
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|incrementCompactionsQueuedCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|type
init|=
operator|(
name|pool
operator|==
name|shortCompactions
operator|)
condition|?
literal|"Small "
else|:
literal|"Large "
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|type
operator|+
literal|"Compaction requested: "
operator|+
operator|(
name|selectNow
condition|?
name|compaction
operator|.
name|toString
argument_list|()
else|:
literal|"system"
operator|)
operator|+
operator|(
name|why
operator|!=
literal|null
operator|&&
operator|!
name|why
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"; Because: "
operator|+
name|why
else|:
literal|""
operator|)
operator|+
literal|"; "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|requestSystemCompaction
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|String
name|why
parameter_list|)
throws|throws
name|IOException
block|{
name|requestCompactionInternal
argument_list|(
name|region
argument_list|,
name|why
argument_list|,
name|NO_PRIORITY
argument_list|,
literal|false
argument_list|,
name|CompactionLifeCycleTracker
operator|.
name|DUMMY
argument_list|,
name|DUMMY_COMPLETE_TRACKER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|requestSystemCompaction
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|HStore
name|store
parameter_list|,
name|String
name|why
parameter_list|)
throws|throws
name|IOException
block|{
name|requestCompactionInternal
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|why
argument_list|,
name|NO_PRIORITY
argument_list|,
literal|false
argument_list|,
name|CompactionLifeCycleTracker
operator|.
name|DUMMY
argument_list|,
name|DUMMY_COMPLETE_TRACKER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Optional
argument_list|<
name|CompactionContext
argument_list|>
name|selectCompaction
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|HStore
name|store
parameter_list|,
name|int
name|priority
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionCompleteTracker
name|completeTracker
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|CompactionContext
argument_list|>
name|compaction
init|=
name|store
operator|.
name|requestCompaction
argument_list|(
name|priority
argument_list|,
name|tracker
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compaction
operator|.
name|isPresent
argument_list|()
operator|&&
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|reason
init|=
literal|"Not compacting "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because compaction request was cancelled"
decl_stmt|;
name|tracker
operator|.
name|notExecuted
argument_list|(
name|store
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|completeTracker
operator|.
name|completed
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
return|return
name|compaction
return|;
block|}
comment|/**    * Only interrupt once it's done with a run through the work loop.    */
name|void
name|interruptIfNecessary
parameter_list|()
block|{
name|splits
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|longCompactions
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|shortCompactions
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitFor
parameter_list|(
name|ThreadPoolExecutor
name|t
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
name|done
operator|=
name|t
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|name
operator|+
literal|" to finish..."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|t
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted waiting for "
operator|+
name|name
operator|+
literal|" to finish..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|join
parameter_list|()
block|{
name|waitFor
argument_list|(
name|splits
argument_list|,
literal|"Split Thread"
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|longCompactions
argument_list|,
literal|"Large Compaction Thread"
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|shortCompactions
argument_list|,
literal|"Small Compaction Thread"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current size of the queue containing regions that are    * processed.    *    * @return The current size of the regions queue.    */
specifier|public
name|int
name|getCompactionQueueSize
parameter_list|()
block|{
return|return
name|longCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|shortCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLargeCompactionQueueSize
parameter_list|()
block|{
return|return
name|longCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSmallCompactionQueueSize
parameter_list|()
block|{
return|return
name|shortCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSplitQueueSize
parameter_list|()
block|{
return|return
name|splits
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|shouldSplitRegion
parameter_list|()
block|{
if|if
condition|(
name|server
operator|.
name|getNumberOfOnlineRegions
argument_list|()
operator|>
literal|0.9
operator|*
name|regionSplitLimit
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Total number of regions is approaching the upper limit "
operator|+
name|regionSplitLimit
operator|+
literal|". "
operator|+
literal|"Please consider taking a look at http://hbase.apache.org/book.html#ops.regionmgt"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|regionSplitLimit
operator|>
name|server
operator|.
name|getNumberOfOnlineRegions
argument_list|()
operator|)
return|;
block|}
comment|/**    * @return the regionSplitLimit    */
specifier|public
name|int
name|getRegionSplitLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionSplitLimit
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Runnable
argument_list|>
name|COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Runnable
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|compare
parameter_list|(
name|CompactionRequestImpl
name|r1
parameter_list|,
name|CompactionRequestImpl
name|r2
parameter_list|)
block|{
if|if
condition|(
name|r1
operator|==
name|r2
condition|)
block|{
return|return
literal|0
return|;
comment|//they are the same request
block|}
comment|// less first
name|int
name|cmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|Long
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|getSelectionTime
argument_list|()
argument_list|,
name|r2
operator|.
name|getSelectionTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
comment|// break the tie based on hash code
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|r1
argument_list|)
operator|-
name|System
operator|.
name|identityHashCode
argument_list|(
name|r2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Runnable
name|r1
parameter_list|,
name|Runnable
name|r2
parameter_list|)
block|{
comment|// CompactionRunner first
if|if
condition|(
name|r1
operator|instanceof
name|CompactionRunner
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|r2
operator|instanceof
name|CompactionRunner
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|r2
operator|instanceof
name|CompactionRunner
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// break the tie based on hash code
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|r1
argument_list|)
operator|-
name|System
operator|.
name|identityHashCode
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
name|CompactionRunner
name|o1
init|=
operator|(
name|CompactionRunner
operator|)
name|r1
decl_stmt|;
name|CompactionRunner
name|o2
init|=
operator|(
name|CompactionRunner
operator|)
name|r2
decl_stmt|;
comment|// less first
name|int
name|cmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|queuedPriority
argument_list|,
name|o2
operator|.
name|queuedPriority
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|CompactionContext
name|c1
init|=
name|o1
operator|.
name|compaction
decl_stmt|;
name|CompactionContext
name|c2
init|=
name|o2
operator|.
name|compaction
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|null
condition|)
block|{
return|return
name|c2
operator|!=
literal|null
condition|?
name|compare
argument_list|(
name|c1
operator|.
name|getRequest
argument_list|()
argument_list|,
name|c2
operator|.
name|getRequest
argument_list|()
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|c2
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
class|class
name|CompactionRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|HStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|final
name|CompactionContext
name|compaction
decl_stmt|;
specifier|private
specifier|final
name|CompactionLifeCycleTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|CompactionCompleteTracker
name|completeTracker
decl_stmt|;
specifier|private
name|int
name|queuedPriority
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|parent
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|long
name|time
decl_stmt|;
specifier|public
name|CompactionRunner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|CompactionContext
name|compaction
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionCompleteTracker
name|completeTracker
parameter_list|,
name|ThreadPoolExecutor
name|parent
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|compaction
operator|=
name|compaction
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|completeTracker
operator|=
name|completeTracker
expr_stmt|;
name|this
operator|.
name|queuedPriority
operator|=
name|compaction
operator|!=
literal|null
condition|?
name|compaction
operator|.
name|getRequest
argument_list|()
operator|.
name|getPriority
argument_list|()
else|:
name|store
operator|.
name|getCompactPriority
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|compaction
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Request = "
operator|+
name|compaction
operator|.
name|getRequest
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"regionName = "
operator|+
name|region
operator|.
name|toString
argument_list|()
operator|+
literal|", storeName = "
operator|+
name|store
operator|.
name|toString
argument_list|()
operator|+
literal|", priority = "
operator|+
name|queuedPriority
operator|+
literal|", time = "
operator|+
name|time
return|;
block|}
block|}
specifier|private
name|void
name|doCompaction
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|CompactionContext
name|c
decl_stmt|;
comment|// Common case - system compaction without a file selection. Select now.
if|if
condition|(
name|compaction
operator|==
literal|null
condition|)
block|{
name|int
name|oldPriority
init|=
name|this
operator|.
name|queuedPriority
decl_stmt|;
name|this
operator|.
name|queuedPriority
operator|=
name|this
operator|.
name|store
operator|.
name|getCompactPriority
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|queuedPriority
operator|>
name|oldPriority
condition|)
block|{
comment|// Store priority decreased while we were in queue (due to some other compaction?),
comment|// requeue with new priority to avoid blocking potential higher priorities.
name|this
operator|.
name|parent
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|Optional
argument_list|<
name|CompactionContext
argument_list|>
name|selected
decl_stmt|;
try|try
block|{
name|selected
operator|=
name|selectCompaction
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|this
operator|.
name|store
argument_list|,
name|queuedPriority
argument_list|,
name|tracker
argument_list|,
name|completeTracker
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Compaction selection failed "
operator|+
name|this
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
name|region
operator|.
name|decrementCompactionsQueuedCount
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|selected
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|region
operator|.
name|decrementCompactionsQueuedCount
argument_list|()
expr_stmt|;
return|return;
comment|// nothing to do
block|}
name|c
operator|=
name|selected
operator|.
name|get
argument_list|()
expr_stmt|;
assert|assert
name|c
operator|.
name|hasSelection
argument_list|()
assert|;
comment|// Now see if we are in correct pool for the size; if not, go to the correct one.
comment|// We might end up waiting for a while, so cancel the selection.
name|ThreadPoolExecutor
name|pool
init|=
name|store
operator|.
name|throttleCompaction
argument_list|(
name|c
operator|.
name|getRequest
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
condition|?
name|longCompactions
else|:
name|shortCompactions
decl_stmt|;
comment|// Long compaction pool can process small job
comment|// Short compaction pool should not process large job
if|if
condition|(
name|this
operator|.
name|parent
operator|==
name|shortCompactions
operator|&&
name|pool
operator|==
name|longCompactions
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|cancelRequestedCompaction
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|c
operator|=
name|compaction
expr_stmt|;
block|}
comment|// Finally we can compact something.
assert|assert
name|c
operator|!=
literal|null
assert|;
name|tracker
operator|.
name|beforeExecution
argument_list|(
name|store
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Note: please don't put single-compaction logic here;
comment|//       put it into region/store/etc. This is CST logic.
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|boolean
name|completed
init|=
name|region
operator|.
name|compact
argument_list|(
name|c
argument_list|,
name|store
argument_list|,
name|compactionThroughputController
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
operator|(
name|completed
operator|)
condition|?
literal|"Completed"
else|:
literal|"Aborted"
operator|)
operator|+
literal|" compaction: "
operator|+
name|this
operator|+
literal|"; duration="
operator|+
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|now
argument_list|,
name|start
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
condition|)
block|{
comment|// degenerate case: blocked regions require recursive enqueues
if|if
condition|(
name|store
operator|.
name|getCompactPriority
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|requestSystemCompaction
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
literal|"Recursive enqueue"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// see if the compaction has caused us to exceed max region size
name|requestSplit
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|IOException
name|remoteEx
init|=
name|ex
operator|instanceof
name|RemoteException
condition|?
operator|(
operator|(
name|RemoteException
operator|)
name|ex
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
else|:
name|ex
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Compaction failed "
operator|+
name|this
argument_list|,
name|remoteEx
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteEx
operator|!=
name|ex
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Compaction failed at original callstack: "
operator|+
name|formatStackTrace
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|reportCompactionRequestFailure
argument_list|()
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Compaction failed "
operator|+
name|this
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|region
operator|.
name|reportCompactionRequestFailure
argument_list|()
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|tracker
operator|.
name|afterExecution
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|completeTracker
operator|.
name|completed
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|region
operator|.
name|decrementCompactionsQueuedCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CompactSplitThread Status: "
operator|+
name|CompactSplit
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|isStopped
argument_list|()
operator|||
operator|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|isCompactionEnabled
argument_list|()
operator|)
condition|)
block|{
name|region
operator|.
name|decrementCompactionsQueuedCount
argument_list|()
expr_stmt|;
return|return;
block|}
name|doCompaction
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|formatStackTrace
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Cleanup class to use when rejecting a compaction request from the queue.    */
specifier|private
specifier|static
class|class
name|Rejection
implements|implements
name|RejectedExecutionHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|ThreadPoolExecutor
name|pool
parameter_list|)
block|{
if|if
condition|(
name|runnable
operator|instanceof
name|CompactionRunner
condition|)
block|{
name|CompactionRunner
name|runner
init|=
operator|(
name|CompactionRunner
operator|)
name|runnable
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction Rejected: "
operator|+
name|runner
argument_list|)
expr_stmt|;
if|if
condition|(
name|runner
operator|.
name|compaction
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|store
operator|.
name|cancelRequestedCompaction
argument_list|(
name|runner
operator|.
name|compaction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
comment|// Check if number of large / small compaction threads has changed, and then
comment|// adjust the core pool size of the thread pools, by using the
comment|// setCorePoolSize() method. According to the javadocs, it is safe to
comment|// change the core pool size on-the-fly. We need to reset the maximum
comment|// pool size, as well.
name|int
name|largeThreads
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|newConf
operator|.
name|getInt
argument_list|(
name|LARGE_COMPACTION_THREADS
argument_list|,
name|LARGE_COMPACTION_THREADS_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|longCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|!=
name|largeThreads
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing the value of "
operator|+
name|LARGE_COMPACTION_THREADS
operator|+
literal|" from "
operator|+
name|this
operator|.
name|longCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|+
literal|" to "
operator|+
name|largeThreads
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|longCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|<
name|largeThreads
condition|)
block|{
name|this
operator|.
name|longCompactions
operator|.
name|setMaximumPoolSize
argument_list|(
name|largeThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|longCompactions
operator|.
name|setCorePoolSize
argument_list|(
name|largeThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|longCompactions
operator|.
name|setCorePoolSize
argument_list|(
name|largeThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|longCompactions
operator|.
name|setMaximumPoolSize
argument_list|(
name|largeThreads
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|smallThreads
init|=
name|newConf
operator|.
name|getInt
argument_list|(
name|SMALL_COMPACTION_THREADS
argument_list|,
name|SMALL_COMPACTION_THREADS_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|shortCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|!=
name|smallThreads
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing the value of "
operator|+
name|SMALL_COMPACTION_THREADS
operator|+
literal|" from "
operator|+
name|this
operator|.
name|shortCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|+
literal|" to "
operator|+
name|smallThreads
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|shortCompactions
operator|.
name|getCorePoolSize
argument_list|()
operator|<
name|smallThreads
condition|)
block|{
name|this
operator|.
name|shortCompactions
operator|.
name|setMaximumPoolSize
argument_list|(
name|smallThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|shortCompactions
operator|.
name|setCorePoolSize
argument_list|(
name|smallThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|shortCompactions
operator|.
name|setCorePoolSize
argument_list|(
name|smallThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|shortCompactions
operator|.
name|setMaximumPoolSize
argument_list|(
name|smallThreads
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|splitThreads
init|=
name|newConf
operator|.
name|getInt
argument_list|(
name|SPLIT_THREADS
argument_list|,
name|SPLIT_THREADS_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|splits
operator|.
name|getCorePoolSize
argument_list|()
operator|!=
name|splitThreads
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing the value of "
operator|+
name|SPLIT_THREADS
operator|+
literal|" from "
operator|+
name|this
operator|.
name|splits
operator|.
name|getCorePoolSize
argument_list|()
operator|+
literal|" to "
operator|+
name|splitThreads
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|splits
operator|.
name|getCorePoolSize
argument_list|()
operator|<
name|splitThreads
condition|)
block|{
name|this
operator|.
name|splits
operator|.
name|setMaximumPoolSize
argument_list|(
name|splitThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|splits
operator|.
name|setCorePoolSize
argument_list|(
name|splitThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|splits
operator|.
name|setCorePoolSize
argument_list|(
name|splitThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|splits
operator|.
name|setMaximumPoolSize
argument_list|(
name|splitThreads
argument_list|)
expr_stmt|;
block|}
block|}
name|ThroughputController
name|old
init|=
name|this
operator|.
name|compactionThroughputController
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|old
operator|.
name|stop
argument_list|(
literal|"configuration change"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|compactionThroughputController
operator|=
name|CompactionThroughputControllerFactory
operator|.
name|create
argument_list|(
name|server
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
comment|// We change this atomically here instead of reloading the config in order that upstream
comment|// would be the only one with the flexibility to reload the config.
name|this
operator|.
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|getSmallCompactionThreadNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|shortCompactions
operator|.
name|getCorePoolSize
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getLargeCompactionThreadNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|longCompactions
operator|.
name|getCorePoolSize
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getSplitThreadNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|splits
operator|.
name|getCorePoolSize
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|registerChildren
parameter_list|(
name|ConfigurationManager
name|manager
parameter_list|)
block|{
comment|// No children to register.
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|deregisterChildren
parameter_list|(
name|ConfigurationManager
name|manager
parameter_list|)
block|{
comment|// No children to register
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ThroughputController
name|getCompactionThroughputController
parameter_list|()
block|{
return|return
name|compactionThroughputController
return|;
block|}
annotation|@
name|VisibleForTesting
comment|/**    * Shutdown the long compaction thread pool.    * Should only be used in unit test to prevent long compaction thread pool from stealing job    * from short compaction queue    */
name|void
name|shutdownLongCompactions
parameter_list|()
block|{
name|this
operator|.
name|longCompactions
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearLongCompactionsQueue
parameter_list|()
block|{
name|longCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearShortCompactionsQueue
parameter_list|()
block|{
name|shortCompactions
operator|.
name|getQueue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

