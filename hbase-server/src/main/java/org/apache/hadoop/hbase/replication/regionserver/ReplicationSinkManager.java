begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|HBaseReplicationEndpoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Maintains a collection of peers to replicate to, and randomly selects a  * single peer to replicate to per set of data to replicate. Also handles  * keeping track of peer availability.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationSinkManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSinkManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Default maximum number of times a replication sink can be reported as bad before    * it will no longer be provided as a sink for replication without the pool of    * replication sinks being refreshed.    */
specifier|static
specifier|final
name|int
name|DEFAULT_BAD_SINK_THRESHOLD
init|=
literal|3
decl_stmt|;
comment|/**    * Default ratio of the total number of peer cluster region servers to consider    * replicating to.    */
specifier|static
specifier|final
name|float
name|DEFAULT_REPLICATION_SOURCE_RATIO
init|=
literal|0.1f
decl_stmt|;
specifier|private
specifier|final
name|HConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|String
name|peerClusterId
decl_stmt|;
specifier|private
specifier|final
name|HBaseReplicationEndpoint
name|endpoint
decl_stmt|;
comment|// Count of "bad replication sink" reports per peer sink
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|badReportCounts
decl_stmt|;
comment|// Ratio of total number of potential peer region servers to be used
specifier|private
specifier|final
name|float
name|ratio
decl_stmt|;
comment|// Maximum number of times a sink can be reported as bad before the pool of
comment|// replication sinks is refreshed
specifier|private
specifier|final
name|int
name|badSinkThreshold
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
comment|// A timestamp of the last time the list of replication peers changed
specifier|private
name|long
name|lastUpdateToPeers
decl_stmt|;
comment|// The current pool of sinks to which replication can be performed
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|sinks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/**    * Instantiate for a single replication peer cluster.    * @param conn connection to the peer cluster    * @param peerClusterId identifier of the peer cluster    * @param endpoint replication endpoint for inter cluster replication    * @param conf HBase configuration, used for determining replication source ratio and bad peer    *          threshold    */
specifier|public
name|ReplicationSinkManager
parameter_list|(
name|HConnection
name|conn
parameter_list|,
name|String
name|peerClusterId
parameter_list|,
name|HBaseReplicationEndpoint
name|endpoint
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|peerClusterId
operator|=
name|peerClusterId
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|badReportCounts
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|ratio
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"replication.source.ratio"
argument_list|,
name|DEFAULT_REPLICATION_SOURCE_RATIO
argument_list|)
expr_stmt|;
name|this
operator|.
name|badSinkThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"replication.bad.sink.threshold"
argument_list|,
name|DEFAULT_BAD_SINK_THRESHOLD
argument_list|)
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get a randomly-chosen replication sink to replicate to.    *    * @return a replication sink to replicate to    */
specifier|public
name|SinkPeer
name|getReplicationSink
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endpoint
operator|.
name|getLastRegionServerUpdate
argument_list|()
operator|>
name|this
operator|.
name|lastUpdateToPeers
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current list of sinks is out of date, updating"
argument_list|)
expr_stmt|;
name|chooseSinks
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No replication sinks are available"
argument_list|)
throw|;
block|}
name|ServerName
name|serverName
init|=
name|sinks
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|sinks
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SinkPeer
argument_list|(
name|serverName
argument_list|,
name|conn
operator|.
name|getAdmin
argument_list|(
name|serverName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Report a {@code SinkPeer} as being bad (i.e. an attempt to replicate to it    * failed). If a single SinkPeer is reported as bad more than    * replication.bad.sink.threshold times, it will be removed    * from the pool of potential replication targets.    *    * @param sinkPeer    *          The SinkPeer that had a failed replication attempt on it    */
specifier|public
name|void
name|reportBadSink
parameter_list|(
name|SinkPeer
name|sinkPeer
parameter_list|)
block|{
name|ServerName
name|serverName
init|=
name|sinkPeer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|int
name|badReportCount
init|=
operator|(
name|badReportCounts
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
condition|?
name|badReportCounts
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
else|:
literal|0
operator|)
operator|+
literal|1
decl_stmt|;
name|badReportCounts
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|badReportCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|badReportCount
operator|>
name|badSinkThreshold
condition|)
block|{
name|this
operator|.
name|sinks
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|sinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|chooseSinks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|chooseSinks
parameter_list|()
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|slaveAddresses
init|=
name|endpoint
operator|.
name|getRegionServers
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|slaveAddresses
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|int
name|numSinks
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|slaveAddresses
operator|.
name|size
argument_list|()
operator|*
name|ratio
argument_list|)
decl_stmt|;
name|sinks
operator|=
name|slaveAddresses
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numSinks
argument_list|)
expr_stmt|;
name|lastUpdateToPeers
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|badReportCounts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|getSinks
parameter_list|()
block|{
return|return
name|sinks
return|;
block|}
comment|/**    * Wraps a replication region server sink to provide the ability to identify    * it.    */
specifier|public
specifier|static
class|class
name|SinkPeer
block|{
specifier|private
name|ServerName
name|serverName
decl_stmt|;
specifier|private
name|AdminService
operator|.
name|BlockingInterface
name|regionServer
decl_stmt|;
specifier|public
name|SinkPeer
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|AdminService
operator|.
name|BlockingInterface
name|regionServer
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|regionServer
expr_stmt|;
block|}
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
specifier|public
name|AdminService
operator|.
name|BlockingInterface
name|getRegionServer
parameter_list|()
block|{
return|return
name|regionServer
return|;
block|}
block|}
block|}
end_class

end_unit

