begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A Store data file.  Stores usually have one or more of these files.  They  * are produced by flushing the memstore to disk.  To  * create, instantiate a writer using {@link StoreFileWriter.Builder}  * and append data. Be sure to add any metadata before calling close on the  * Writer (Use the appendMetadata convenience methods). On close, a StoreFile  * is sitting in the Filesystem.  To refer to it, create a StoreFile instance  * passing filesystem and path.  To read, call {@link #initReader()}  *<p>StoreFiles may also reference store files in another Store.  *  * The reason for this weird pattern where you use a different instance for the  * writer and a reader is that we write once but read a lot more.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HStoreFile
implements|implements
name|StoreFile
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HStoreFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_STORE_FILE_READER_NO_READAHEAD
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|StoreFileInfo
name|fileInfo
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
comment|// Block cache configuration and reference.
specifier|private
specifier|final
name|CacheConfig
name|cacheConf
decl_stmt|;
comment|// Counter that is incremented every time a scanner is created on the
comment|// store file. It is decremented when the scan on the store file is
comment|// done.
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|noReadahead
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|primaryReplica
decl_stmt|;
comment|// Indicates if the file got compacted
specifier|private
specifier|volatile
name|boolean
name|compactedAway
init|=
literal|false
decl_stmt|;
comment|// Keys for metadata stored in backing HFile.
comment|// Set when we obtain a Reader.
specifier|private
name|long
name|sequenceid
init|=
operator|-
literal|1
decl_stmt|;
comment|// max of the MemstoreTS in the KV's in this store
comment|// Set when we obtain a Reader.
specifier|private
name|long
name|maxMemstoreTS
init|=
operator|-
literal|1
decl_stmt|;
comment|// firstKey, lastkey and cellComparator will be set when openReader.
specifier|private
name|Cell
name|firstKey
decl_stmt|;
specifier|private
name|Cell
name|lastKey
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|Cell
argument_list|>
name|comparator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CacheConfig
name|getCacheConf
parameter_list|()
block|{
return|return
name|cacheConf
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getFirstKey
parameter_list|()
block|{
return|return
name|firstKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getLastKey
parameter_list|()
block|{
return|return
name|lastKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|Cell
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxMemstoreTS
parameter_list|()
block|{
return|return
name|maxMemstoreTS
return|;
block|}
comment|// If true, this file was product of a major compaction.  Its then set
comment|// whenever you get a Reader.
specifier|private
name|AtomicBoolean
name|majorCompaction
init|=
literal|null
decl_stmt|;
comment|// If true, this file should not be included in minor compactions.
comment|// It's set whenever you get a Reader.
specifier|private
name|boolean
name|excludeFromMinorCompaction
init|=
literal|false
decl_stmt|;
comment|/**    * Map of the metadata entries in the corresponding HFile. Populated when Reader is opened    * after which it is not modified again.    */
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|metadataMap
decl_stmt|;
comment|// StoreFile.Reader
specifier|private
specifier|volatile
name|StoreFileReader
name|reader
decl_stmt|;
comment|/**    * Bloom filter type specified in column family configuration. Does not    * necessarily correspond to the Bloom filter type present in the HFile.    */
specifier|private
specifier|final
name|BloomType
name|cfBloomType
decl_stmt|;
comment|/**    * Constructor, loads a reader and it's indices, etc. May allocate a substantial amount of ram    * depending on the underlying files (10-20MB?).    * @param fs The current file system to use.    * @param p The path of the file.    * @param conf The current configuration.    * @param cacheConf The cache configuration and block cache reference.    * @param cfBloomType The bloom type to use for this store file as specified by column family    *          configuration. This may or may not be the same as the Bloom filter type actually    *          present in the HFile, because column family configuration might change. If this is    *          {@link BloomType#NONE}, the existing Bloom filter is ignored.    * @deprecated Now we will specific whether the StoreFile is for primary replica when    *             constructing, so please use {@link #HStoreFile(FileSystem, Path, Configuration,    *             CacheConfig, BloomType, boolean)} directly.    */
annotation|@
name|Deprecated
specifier|public
name|HStoreFile
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CacheConfig
name|cacheConf
parameter_list|,
specifier|final
name|BloomType
name|cfBloomType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
operator|new
name|StoreFileInfo
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|p
argument_list|)
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|cfBloomType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor, loads a reader and it's indices, etc. May allocate a substantial amount of ram    * depending on the underlying files (10-20MB?).    * @param fs The current file system to use.    * @param p The path of the file.    * @param conf The current configuration.    * @param cacheConf The cache configuration and block cache reference.    * @param cfBloomType The bloom type to use for this store file as specified by column family    *          configuration. This may or may not be the same as the Bloom filter type actually    *          present in the HFile, because column family configuration might change. If this is    *          {@link BloomType#NONE}, the existing Bloom filter is ignored.    * @param primaryReplica true if this is a store file for primary replica, otherwise false.    * @throws IOException    */
specifier|public
name|HStoreFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|BloomType
name|cfBloomType
parameter_list|,
name|boolean
name|primaryReplica
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
operator|new
name|StoreFileInfo
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|p
argument_list|)
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|cfBloomType
argument_list|,
name|primaryReplica
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor, loads a reader and it's indices, etc. May allocate a substantial amount of ram    * depending on the underlying files (10-20MB?).    * @param fs The current file system to use.    * @param fileInfo The store file information.    * @param conf The current configuration.    * @param cacheConf The cache configuration and block cache reference.    * @param cfBloomType The bloom type to use for this store file as specified by column family    *          configuration. This may or may not be the same as the Bloom filter type actually    *          present in the HFile, because column family configuration might change. If this is    *          {@link BloomType#NONE}, the existing Bloom filter is ignored.    * @deprecated Now we will specific whether the StoreFile is for primary replica when    *             constructing, so please use {@link #HStoreFile(FileSystem, StoreFileInfo,    *             Configuration, CacheConfig, BloomType, boolean)} directly.    */
annotation|@
name|Deprecated
specifier|public
name|HStoreFile
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|StoreFileInfo
name|fileInfo
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|CacheConfig
name|cacheConf
parameter_list|,
specifier|final
name|BloomType
name|cfBloomType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|fileInfo
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|cfBloomType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor, loads a reader and it's indices, etc. May allocate a substantial amount of ram    * depending on the underlying files (10-20MB?).    * @param fs fs The current file system to use.    * @param fileInfo The store file information.    * @param conf The current configuration.    * @param cacheConf The cache configuration and block cache reference.    * @param cfBloomType The bloom type to use for this store file as specified by column    *          family configuration. This may or may not be the same as the Bloom filter type    *          actually present in the HFile, because column family configuration might change. If    *          this is {@link BloomType#NONE}, the existing Bloom filter is ignored.    * @param primaryReplica true if this is a store file for primary replica, otherwise false.    */
specifier|public
name|HStoreFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|StoreFileInfo
name|fileInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|BloomType
name|cfBloomType
parameter_list|,
name|boolean
name|primaryReplica
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|fileInfo
operator|=
name|fileInfo
expr_stmt|;
name|this
operator|.
name|cacheConf
operator|=
name|cacheConf
expr_stmt|;
name|this
operator|.
name|noReadahead
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|STORE_FILE_READER_NO_READAHEAD
argument_list|,
name|DEFAULT_STORE_FILE_READER_NO_READAHEAD
argument_list|)
expr_stmt|;
if|if
condition|(
name|BloomFilterFactory
operator|.
name|isGeneralBloomEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|this
operator|.
name|cfBloomType
operator|=
name|cfBloomType
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring bloom filter check for file "
operator|+
name|this
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
literal|"cfBloomType="
operator|+
name|cfBloomType
operator|+
literal|" (disabled in config)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfBloomType
operator|=
name|BloomType
operator|.
name|NONE
expr_stmt|;
block|}
name|this
operator|.
name|primaryReplica
operator|=
name|primaryReplica
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StoreFileInfo
name|getFileInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getQualifiedPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
operator|.
name|getPath
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReference
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
operator|.
name|isReference
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isHFile
parameter_list|()
block|{
return|return
name|StoreFileInfo
operator|.
name|isHFile
argument_list|(
name|this
operator|.
name|fileInfo
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMajorCompactionResult
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|majorCompaction
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"This has not been set yet"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|majorCompaction
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|excludeFromMinorCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|excludeFromMinorCompaction
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxSequenceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|sequenceid
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getModificationTimeStamp
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileInfo
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getMetadataValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|metadataMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBulkLoadResult
parameter_list|()
block|{
name|boolean
name|bulkLoadedHFile
init|=
literal|false
decl_stmt|;
name|String
name|fileName
init|=
name|this
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|startPos
init|=
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"SeqId_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|bulkLoadedHFile
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|bulkLoadedHFile
operator|||
operator|(
name|metadataMap
operator|!=
literal|null
operator|&&
name|metadataMap
operator|.
name|containsKey
argument_list|(
name|BULKLOAD_TIME_KEY
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCompactedAway
parameter_list|()
block|{
return|return
name|compactedAway
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReferencedInReads
parameter_list|()
block|{
name|int
name|rc
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
assert|assert
name|rc
operator|>=
literal|0
assert|;
comment|// we should not go negative.
return|return
name|rc
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|OptionalLong
name|getBulkLoadTimestamp
parameter_list|()
block|{
name|byte
index|[]
name|bulkLoadTimestamp
init|=
name|metadataMap
operator|.
name|get
argument_list|(
name|BULKLOAD_TIME_KEY
argument_list|)
decl_stmt|;
return|return
name|bulkLoadTimestamp
operator|==
literal|null
condition|?
name|OptionalLong
operator|.
name|empty
argument_list|()
else|:
name|OptionalLong
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|bulkLoadTimestamp
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HDFSBlocksDistribution
name|getHDFSBlockDistribution
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
operator|.
name|getHDFSBlockDistribution
argument_list|()
return|;
block|}
comment|/**    * Opens reader on this store file. Called by Constructor.    * @throws IOException    * @see #closeReader(boolean)    */
specifier|private
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reader
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
literal|"Already open"
argument_list|)
throw|;
block|}
comment|// Open the StoreFile.Reader
name|this
operator|.
name|reader
operator|=
name|fileInfo
operator|.
name|open
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|cacheConf
argument_list|,
literal|false
argument_list|,
name|noReadahead
condition|?
literal|0L
else|:
operator|-
literal|1L
argument_list|,
name|primaryReplica
argument_list|,
name|refCount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Load up indices and fileinfo. This also loads Bloom filter type.
name|metadataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|reader
operator|.
name|loadFileInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read in our metadata.
name|byte
index|[]
name|b
init|=
name|metadataMap
operator|.
name|get
argument_list|(
name|MAX_SEQ_ID_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
comment|// By convention, if halfhfile, top half has a sequence number> bottom
comment|// half. Thats why we add one in below. Its done for case the two halves
comment|// are ever merged back together --rare.  Without it, on open of store,
comment|// since store files are distinguished by sequence id, the one half would
comment|// subsume the other.
name|this
operator|.
name|sequenceid
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|isTopReference
argument_list|()
condition|)
block|{
name|this
operator|.
name|sequenceid
operator|+=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isBulkLoadResult
argument_list|()
condition|)
block|{
comment|// generate the sequenceId from the fileName
comment|// fileName is of the form<randomName>_SeqId_<id-when-loaded>_
name|String
name|fileName
init|=
name|this
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Use lastIndexOf() to get the last, most recent bulk load seqId.
name|int
name|startPos
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|"SeqId_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|sequenceid
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
name|startPos
operator|+
literal|6
argument_list|,
name|fileName
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|,
name|startPos
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle reference files as done above.
if|if
condition|(
name|fileInfo
operator|.
name|isTopReference
argument_list|()
condition|)
block|{
name|this
operator|.
name|sequenceid
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// SKIP_RESET_SEQ_ID only works in bulk loaded file.
comment|// In mob compaction, the hfile where the cells contain the path of a new mob file is bulk
comment|// loaded to hbase, these cells have the same seqIds with the old ones. We do not want
comment|// to reset new seqIds for them since this might make a mess of the visibility of cells that
comment|// have the same row key but different seqIds.
name|boolean
name|skipResetSeqId
init|=
name|isSkipResetSeqId
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|SKIP_RESET_SEQ_ID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipResetSeqId
condition|)
block|{
comment|// increase the seqId when it is a bulk loaded file from mob compaction.
name|this
operator|.
name|sequenceid
operator|+=
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|reader
operator|.
name|setSkipResetSeqId
argument_list|(
name|skipResetSeqId
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|.
name|setBulkLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reader
operator|.
name|setSequenceID
argument_list|(
name|this
operator|.
name|sequenceid
argument_list|)
expr_stmt|;
name|b
operator|=
name|metadataMap
operator|.
name|get
argument_list|(
name|HFile
operator|.
name|Writer
operator|.
name|MAX_MEMSTORE_TS_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxMemstoreTS
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|b
operator|=
name|metadataMap
operator|.
name|get
argument_list|(
name|MAJOR_COMPACTION_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|boolean
name|mc
init|=
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|majorCompaction
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|majorCompaction
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|majorCompaction
operator|.
name|set
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Presume it is not major compacted if it doesn't explicity say so
comment|// HFileOutputFormat explicitly sets the major compacted key.
name|this
operator|.
name|majorCompaction
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|b
operator|=
name|metadataMap
operator|.
name|get
argument_list|(
name|EXCLUDE_FROM_MINOR_COMPACTION_KEY
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludeFromMinorCompaction
operator|=
operator|(
name|b
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|b
argument_list|)
operator|)
expr_stmt|;
name|BloomType
name|hfileBloomType
init|=
name|reader
operator|.
name|getBloomFilterType
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfBloomType
operator|!=
name|BloomType
operator|.
name|NONE
condition|)
block|{
name|reader
operator|.
name|loadBloomfilter
argument_list|(
name|BlockType
operator|.
name|GENERAL_BLOOM_META
argument_list|)
expr_stmt|;
if|if
condition|(
name|hfileBloomType
operator|!=
name|cfBloomType
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HFile Bloom filter type for "
operator|+
name|reader
operator|.
name|getHFileReader
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|hfileBloomType
operator|+
literal|", but "
operator|+
name|cfBloomType
operator|+
literal|" specified in column family "
operator|+
literal|"configuration"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hfileBloomType
operator|!=
name|BloomType
operator|.
name|NONE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Bloom filter turned off by CF config for "
operator|+
name|reader
operator|.
name|getHFileReader
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// load delete family bloom filter
name|reader
operator|.
name|loadBloomfilter
argument_list|(
name|BlockType
operator|.
name|DELETE_FAMILY_BLOOM_META
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|reader
operator|.
name|timeRange
operator|=
name|TimeRangeTracker
operator|.
name|getTimeRange
argument_list|(
name|metadataMap
operator|.
name|get
argument_list|(
name|TIMERANGE_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading timestamp range data from meta -- "
operator|+
literal|"proceeding without"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|.
name|timeRange
operator|=
literal|null
expr_stmt|;
block|}
comment|// initialize so we can reuse them after reader closed.
name|firstKey
operator|=
name|reader
operator|.
name|getFirstKey
argument_list|()
expr_stmt|;
name|lastKey
operator|=
name|reader
operator|.
name|getLastKey
argument_list|()
expr_stmt|;
name|comparator
operator|=
name|reader
operator|.
name|getComparator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|boolean
name|evictOnClose
init|=
name|cacheConf
operator|!=
literal|null
condition|?
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
else|:
literal|true
decl_stmt|;
name|this
operator|.
name|closeReader
argument_list|(
name|evictOnClose
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to close reader"
argument_list|,
name|ee
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
name|StoreFileReader
name|createStreamReader
parameter_list|(
name|boolean
name|canUseDropBehind
parameter_list|)
throws|throws
name|IOException
block|{
name|initReader
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
name|fileInfo
operator|.
name|open
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|cacheConf
argument_list|,
name|canUseDropBehind
argument_list|,
operator|-
literal|1L
argument_list|,
name|primaryReplica
argument_list|,
name|refCount
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|copyFields
argument_list|(
name|this
operator|.
name|reader
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
name|StoreFileScanner
name|getPreadScanner
parameter_list|(
name|boolean
name|cacheBlocks
parameter_list|,
name|long
name|readPt
parameter_list|,
name|long
name|scannerOrder
parameter_list|,
name|boolean
name|canOptimizeForNonNullColumn
parameter_list|)
block|{
return|return
name|getReader
argument_list|()
operator|.
name|getStoreFileScanner
argument_list|(
name|cacheBlocks
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|readPt
argument_list|,
name|scannerOrder
argument_list|,
name|canOptimizeForNonNullColumn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StoreFileScanner
name|getStreamScanner
parameter_list|(
name|boolean
name|canUseDropBehind
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|long
name|readPt
parameter_list|,
name|long
name|scannerOrder
parameter_list|,
name|boolean
name|canOptimizeForNonNullColumn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createStreamReader
argument_list|(
name|canUseDropBehind
argument_list|)
operator|.
name|getStoreFileScanner
argument_list|(
name|cacheBlocks
argument_list|,
literal|false
argument_list|,
name|isCompaction
argument_list|,
name|readPt
argument_list|,
name|scannerOrder
argument_list|,
name|canOptimizeForNonNullColumn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StoreFileReader
name|getReader
parameter_list|()
block|{
return|return
name|this
operator|.
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|closeReader
parameter_list|(
name|boolean
name|evictOnClose
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|reader
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|.
name|close
argument_list|(
name|evictOnClose
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markCompactedAway
parameter_list|()
block|{
name|this
operator|.
name|compactedAway
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteReader
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|evictOnClose
init|=
name|cacheConf
operator|!=
literal|null
condition|?
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
else|:
literal|true
decl_stmt|;
name|closeReader
argument_list|(
name|evictOnClose
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileInfo
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toStringDetailed
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isReference="
argument_list|)
operator|.
name|append
argument_list|(
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isBulkLoadResult="
argument_list|)
operator|.
name|append
argument_list|(
name|isBulkLoadResult
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBulkLoadResult
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", bulkLoadTS="
argument_list|)
expr_stmt|;
name|OptionalLong
name|bulkLoadTS
init|=
name|getBulkLoadTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|bulkLoadTS
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|bulkLoadTS
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"NotPresent"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", seqid="
argument_list|)
operator|.
name|append
argument_list|(
name|getMaxSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", majorCompaction="
argument_list|)
operator|.
name|append
argument_list|(
name|isMajorCompactionResult
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Gets whether to skip resetting the sequence id for cells.    * @param skipResetSeqId The byte array of boolean.    * @return Whether to skip resetting the sequence id.    */
specifier|private
name|boolean
name|isSkipResetSeqId
parameter_list|(
name|byte
index|[]
name|skipResetSeqId
parameter_list|)
block|{
if|if
condition|(
name|skipResetSeqId
operator|!=
literal|null
operator|&&
name|skipResetSeqId
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|skipResetSeqId
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|OptionalLong
name|getMinimumTimestamp
parameter_list|()
block|{
name|TimeRange
name|tr
init|=
name|getReader
argument_list|()
operator|.
name|timeRange
decl_stmt|;
return|return
name|tr
operator|!=
literal|null
condition|?
name|OptionalLong
operator|.
name|of
argument_list|(
name|tr
operator|.
name|getMin
argument_list|()
argument_list|)
else|:
name|OptionalLong
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|OptionalLong
name|getMaximumTimestamp
parameter_list|()
block|{
name|TimeRange
name|tr
init|=
name|getReader
argument_list|()
operator|.
name|timeRange
decl_stmt|;
return|return
name|tr
operator|!=
literal|null
condition|?
name|OptionalLong
operator|.
name|of
argument_list|(
name|tr
operator|.
name|getMax
argument_list|()
argument_list|)
else|:
name|OptionalLong
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

