begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|DisableTableProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * This is a helper class used internally to manage the namespace metadata that is stored in the ns  * family in meta table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableNamespaceManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KEY_MAX_REGIONS
init|=
literal|"hbase.namespace.quota.maxregions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_MAX_TABLES
init|=
literal|"hbase.namespace.quota.maxtables"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NS_INIT_TIMEOUT
init|=
literal|"hbase.master.namespace.init.timeout"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_NS_INIT_TIMEOUT
init|=
literal|300000
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|NamespaceDescriptor
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
name|TableNamespaceManager
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
block|}
specifier|private
name|void
name|migrateNamespaceTable
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|nsTable
init|=
name|masterServices
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|nsTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_FAMILY_INFO_BYTES
argument_list|)
operator|.
name|readAllVersions
argument_list|()
argument_list|)
init|;
name|BufferedMutator
name|mutator
operator|=
name|masterServices
operator|.
name|getConnection
argument_list|()
operator|.
name|getBufferedMutator
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
init|;
condition|;
control|)
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|getColumnCells
argument_list|(
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_FAMILY_INFO_BYTES
argument_list|,
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_COL_DESC_BYTES
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|NAMESPACE_FAMILY
argument_list|,
name|HConstants
operator|.
name|NAMESPACE_COL_DESC_QUALIFIER
argument_list|,
name|c
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|// schedule a disable procedure instead of block waiting here, as when disabling a table we will
comment|// wait until master is initialized, but we are part of the initialization...
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
operator|new
name|DisableTableProcedure
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadNamespaceIntoCache
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|masterServices
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|NAMESPACE_FAMILY
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
init|;
condition|;
control|)
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|Cell
name|cell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|NAMESPACE_FAMILY
argument_list|,
name|HConstants
operator|.
name|NAMESPACE_COL_DESC_QUALIFIER
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|ns
init|=
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|parseFrom
argument_list|(
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|TableState
name|nsTableState
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsTableState
operator|!=
literal|null
operator|&&
name|nsTableState
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|migrateNamespaceTable
argument_list|()
expr_stmt|;
block|}
name|loadNamespaceIntoCache
argument_list|()
expr_stmt|;
block|}
comment|/**    * check whether a namespace has already existed.    */
specifier|public
name|boolean
name|doesNamespaceExist
parameter_list|(
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cache
operator|.
name|containsKey
argument_list|(
name|namespaceName
argument_list|)
return|;
block|}
specifier|public
name|NamespaceDescriptor
name|get
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addOrUpdateNamespace
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|insertNamespaceToMeta
argument_list|(
name|masterServices
operator|.
name|getConnection
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|insertNamespaceToMeta
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|NAMESPACE_FAMILY
argument_list|,
name|HConstants
operator|.
name|NAMESPACE_COL_DESC_QUALIFIER
argument_list|,
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|ns
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteNamespace
parameter_list|(
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|namespaceName
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|masterServices
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|remove
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|list
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|cache
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|validateTableAndRegionCount
parameter_list|(
name|NamespaceDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getMaxRegions
argument_list|(
name|desc
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The max region quota for "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" is less than or equal to zero."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getMaxTables
argument_list|(
name|desc
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The max tables quota for "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" is less than or equal to zero."
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|long
name|getMaxTables
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|KEY_MAX_TABLES
argument_list|)
decl_stmt|;
name|long
name|maxTables
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|maxTables
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"NumberFormatException while getting max tables."
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// The property is not set, so assume its the max long value.
name|maxTables
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
name|maxTables
return|;
block|}
specifier|public
specifier|static
name|long
name|getMaxRegions
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|KEY_MAX_REGIONS
argument_list|)
decl_stmt|;
name|long
name|maxRegions
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|maxRegions
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"NumberFormatException while getting max regions."
argument_list|,
name|exp
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// The property is not set, so assume its the max long value.
name|maxRegions
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
name|maxRegions
return|;
block|}
block|}
end_class

end_unit

