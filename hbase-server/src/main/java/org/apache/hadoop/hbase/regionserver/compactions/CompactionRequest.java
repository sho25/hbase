begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class holds all logical details necessary to run a compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"coprocessor"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CompactionRequest
block|{
comment|// was this compaction promoted to an off-peak
specifier|private
name|boolean
name|isOffPeak
init|=
literal|false
decl_stmt|;
specifier|private
enum|enum
name|DisplayCompactionType
block|{
name|MINOR
block|,
name|ALL_FILES
block|,
name|MAJOR
block|}
specifier|private
name|DisplayCompactionType
name|isMajor
init|=
name|DisplayCompactionType
operator|.
name|MINOR
decl_stmt|;
specifier|private
name|int
name|priority
init|=
name|Store
operator|.
name|NO_PRIORITY
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
decl_stmt|;
comment|// CompactRequest object creation time.
specifier|private
name|long
name|selectionTime
decl_stmt|;
comment|// System time used to compare objects in FIFO order. TODO: maybe use selectionTime?
specifier|private
name|long
name|timeInNanos
decl_stmt|;
specifier|private
name|String
name|regionName
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|storeName
init|=
literal|""
decl_stmt|;
specifier|private
name|long
name|totalSize
init|=
operator|-
literal|1L
decl_stmt|;
comment|/**    * This ctor should be used by coprocessors that want to subclass CompactionRequest.    */
specifier|public
name|CompactionRequest
parameter_list|()
block|{
name|this
operator|.
name|selectionTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|timeInNanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CompactionRequest
parameter_list|(
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|files
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|this
operator|.
name|filesToCompact
operator|=
name|files
expr_stmt|;
name|recalculateSize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateFiles
parameter_list|(
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|files
parameter_list|)
block|{
name|this
operator|.
name|filesToCompact
operator|=
name|files
expr_stmt|;
name|recalculateSize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Called before compaction is executed by CompactSplitThread; for use by coproc subclasses.    */
specifier|public
name|void
name|beforeExecute
parameter_list|()
block|{}
comment|/**    * Called after compaction is executed by CompactSplitThread; for use by coproc subclasses.    */
specifier|public
name|void
name|afterExecute
parameter_list|()
block|{}
comment|/**    * Combines the request with other request. Coprocessors subclassing CR may override    * this if they want to do clever things based on CompactionPolicy selection that    * is passed to this method via "other". The default implementation just does a copy.    * @param other Request to combine with.    * @return The result (may be "this" or "other").    */
specifier|public
name|CompactionRequest
name|combineWith
parameter_list|(
name|CompactionRequest
name|other
parameter_list|)
block|{
name|this
operator|.
name|filesToCompact
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|other
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|isOffPeak
operator|=
name|other
operator|.
name|isOffPeak
expr_stmt|;
name|this
operator|.
name|isMajor
operator|=
name|other
operator|.
name|isMajor
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|other
operator|.
name|priority
expr_stmt|;
name|this
operator|.
name|selectionTime
operator|=
name|other
operator|.
name|selectionTime
expr_stmt|;
name|this
operator|.
name|timeInNanos
operator|=
name|other
operator|.
name|timeInNanos
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|other
operator|.
name|regionName
expr_stmt|;
name|this
operator|.
name|storeName
operator|=
name|other
operator|.
name|storeName
expr_stmt|;
name|this
operator|.
name|totalSize
operator|=
name|other
operator|.
name|totalSize
expr_stmt|;
name|recalculateSize
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|getFiles
parameter_list|()
block|{
return|return
name|this
operator|.
name|filesToCompact
return|;
block|}
comment|/**    * Sets the region/store name, for logging.    */
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|regionName
parameter_list|,
name|String
name|storeName
parameter_list|)
block|{
name|this
operator|.
name|regionName
operator|=
name|regionName
expr_stmt|;
name|this
operator|.
name|storeName
operator|=
name|storeName
expr_stmt|;
block|}
comment|/** Gets the total size of all StoreFiles in compaction */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|totalSize
return|;
block|}
specifier|public
name|boolean
name|isAllFiles
parameter_list|()
block|{
return|return
name|this
operator|.
name|isMajor
operator|==
name|DisplayCompactionType
operator|.
name|MAJOR
operator|||
name|this
operator|.
name|isMajor
operator|==
name|DisplayCompactionType
operator|.
name|ALL_FILES
return|;
block|}
specifier|public
name|boolean
name|isMajor
parameter_list|()
block|{
return|return
name|this
operator|.
name|isMajor
operator|==
name|DisplayCompactionType
operator|.
name|MAJOR
return|;
block|}
comment|/** Gets the priority for the request */
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
comment|/** Sets the priority for the request */
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOffPeak
parameter_list|()
block|{
return|return
name|this
operator|.
name|isOffPeak
return|;
block|}
specifier|public
name|void
name|setOffPeak
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isOffPeak
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|long
name|getSelectionTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|selectionTime
return|;
block|}
specifier|public
name|long
name|getSelectionNanoTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeInNanos
return|;
block|}
comment|/**    * Specify if this compaction should be a major compaction based on the state of the store    * @param isMajor<tt>true</tt> if the system determines that this compaction should be a major    *          compaction    */
specifier|public
name|void
name|setIsMajor
parameter_list|(
name|boolean
name|isMajor
parameter_list|,
name|boolean
name|isAllFiles
parameter_list|)
block|{
assert|assert
name|isAllFiles
operator|||
operator|!
name|isMajor
assert|;
name|this
operator|.
name|isMajor
operator|=
operator|!
name|isAllFiles
condition|?
name|DisplayCompactionType
operator|.
name|MINOR
else|:
operator|(
name|isMajor
condition|?
name|DisplayCompactionType
operator|.
name|MAJOR
else|:
name|DisplayCompactionType
operator|.
name|ALL_FILES
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|fsList
init|=
name|filesToCompact
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getReader
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|f
operator|.
name|getReader
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
return|return
literal|"regionName="
operator|+
name|regionName
operator|+
literal|", storeName="
operator|+
name|storeName
operator|+
literal|", fileCount="
operator|+
name|this
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", fileSize="
operator|+
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|totalSize
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
operator|+
operator|(
operator|(
name|fsList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|""
else|:
literal|" ("
operator|+
name|fsList
operator|+
literal|")"
operator|)
operator|+
literal|", priority="
operator|+
name|priority
operator|+
literal|", time="
operator|+
name|timeInNanos
return|;
block|}
comment|/**    * Recalculate the size of the compaction based on current files.    * @param files files that should be included in the compaction    */
specifier|private
name|void
name|recalculateSize
parameter_list|()
block|{
name|long
name|sz
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|sf
range|:
name|this
operator|.
name|filesToCompact
control|)
block|{
name|StoreFileReader
name|r
init|=
name|sf
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|sz
operator|+=
name|r
operator|==
literal|null
condition|?
literal|0
else|:
name|r
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|totalSize
operator|=
name|sz
expr_stmt|;
block|}
block|}
end_class

end_unit

