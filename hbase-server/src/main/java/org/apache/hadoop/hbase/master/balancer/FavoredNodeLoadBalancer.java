begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_comment
comment|/**  * An implementation of the {@link LoadBalancer} that assigns favored nodes for  * each region. There is a Primary RegionServer that hosts the region, and then  * there is Secondary and Tertiary RegionServers. Currently, the favored nodes  * information is used in creating HDFS files - the Primary RegionServer passes  * the primary, secondary, tertiary node addresses as hints to the DistributedFileSystem  * API for creating files on the filesystem. These nodes are treated as hints by  * the HDFS to place the blocks of the file. This alleviates the problem to do with  * reading from remote nodes (since we can make the Secondary RegionServer as the new  * Primary RegionServer) after a region is recovered. This should help provide consistent  * read latencies for the regions even when their primary region servers die.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FavoredNodeLoadBalancer
extends|extends
name|BaseLoadBalancer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FavoredNodeLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FavoredNodes
name|globalFavoredNodesAssignmentPlan
decl_stmt|;
specifier|private
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|globalFavoredNodesAssignmentPlan
operator|=
operator|new
name|FavoredNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
comment|//TODO. At a high level, this should look at the block locality per region, and
comment|//then reassign regions based on which nodes have the most blocks of the region
comment|//file(s). There could be different ways like minimize region movement, or, maximum
comment|//locality, etc. The other dimension to look at is whether Stochastic loadbalancer
comment|//can be integrated with this
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
decl_stmt|;
try|try
block|{
name|FavoredNodeAssignmentHelper
name|assignmentHelper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|assignmentHelper
operator|.
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|assignmentHelper
operator|.
name|canPlaceFavoredNodes
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
return|;
block|}
name|assignmentMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|roundRobinAssignmentImpl
argument_list|(
name|assignmentHelper
argument_list|,
name|assignmentMap
argument_list|,
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception while doing favored-nodes assignment "
operator|+
name|ex
operator|+
literal|" Falling back to regular assignment"
argument_list|)
expr_stmt|;
name|assignmentMap
operator|=
name|super
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
return|return
name|assignmentMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
try|try
block|{
name|FavoredNodeAssignmentHelper
name|assignmentHelper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|assignmentHelper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ServerName
name|primary
init|=
name|super
operator|.
name|randomAssignment
argument_list|(
name|regionInfo
argument_list|,
name|servers
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|assignmentHelper
operator|.
name|canPlaceFavoredNodes
argument_list|()
condition|)
block|{
return|return
name|primary
return|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|primaryRSMap
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|assignSecondaryAndTertiaryNodesForRegion
argument_list|(
name|assignmentHelper
argument_list|,
name|regions
argument_list|,
name|primaryRSMap
argument_list|)
expr_stmt|;
return|return
name|primary
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception while doing favored-nodes (random)assignment "
operator|+
name|ex
operator|+
literal|" Falling back to regular assignment"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|randomAssignment
argument_list|(
name|regionInfo
argument_list|,
name|servers
argument_list|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getFavoredNodes
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|this
operator|.
name|globalFavoredNodesAssignmentPlan
operator|.
name|getFavoredNodes
argument_list|(
name|regionInfo
argument_list|)
return|;
block|}
specifier|private
name|void
name|roundRobinAssignmentImpl
parameter_list|(
name|FavoredNodeAssignmentHelper
name|assignmentHelper
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|// figure the primary RSs
name|assignmentHelper
operator|.
name|placePrimaryRSAsRoundRobin
argument_list|(
name|assignmentMap
argument_list|,
name|primaryRSMap
argument_list|,
name|regions
argument_list|)
expr_stmt|;
name|assignSecondaryAndTertiaryNodesForRegion
argument_list|(
name|assignmentHelper
argument_list|,
name|regions
argument_list|,
name|primaryRSMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assignSecondaryAndTertiaryNodesForRegion
parameter_list|(
name|FavoredNodeAssignmentHelper
name|assignmentHelper
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|)
block|{
comment|// figure the secondary and tertiary RSs
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryRSMap
init|=
name|assignmentHelper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
comment|// now record all the assignments so that we can serve queries later
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesForRegion
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
index|[]
name|secondaryAndTertiaryNodes
init|=
name|secondaryAndTertiaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondaryAndTertiaryNodes
operator|!=
literal|null
condition|)
block|{
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|secondaryAndTertiaryNodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|favoredNodesForRegion
operator|.
name|add
argument_list|(
name|secondaryAndTertiaryNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|globalFavoredNodesAssignmentPlan
operator|.
name|updateFavoredNodesMap
argument_list|(
name|region
argument_list|,
name|favoredNodesForRegion
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|noteFavoredNodes
parameter_list|(
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|favoredNodesMap
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|entry
range|:
name|favoredNodesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|globalFavoredNodesAssignmentPlan
operator|.
name|updateFavoredNodesMap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

