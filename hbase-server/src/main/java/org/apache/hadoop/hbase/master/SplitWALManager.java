begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|DEFAULT_HBASE_SPLIT_WAL_MAX_SPLITTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|HBASE_SPLIT_WAL_MAX_SPLITTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterWalManager
operator|.
name|META_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterWalManager
operator|.
name|NON_META_FILTER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|SplitWALProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Create {@link SplitWALProcedure} for each WAL which need to split. Manage the workers for each  * {@link SplitWALProcedure}.  * Total number of workers is (number of online servers) * (HBASE_SPLIT_WAL_MAX_SPLITTER).  * Helps assign and release workers for split tasks.  * Provide helper method to delete split WAL file and directory.  *  * The user can get the SplitWALProcedures via splitWALs(crashedServer, splitMeta)  * can get the files that need to split via getWALsToSplit(crashedServer, splitMeta)  * can delete the splitting WAL and directory via deleteSplitWAL(wal)  * and deleteSplitWAL(crashedServer)  * can check if splitting WALs of a crashed server is success via isSplitWALFinished(walPath)  * can acquire and release a worker for splitting WAL via acquireSplitWALWorker(procedure)  * and releaseSplitWALWorker(worker, scheduler)  *  * This class is to replace the zk-based WAL splitting related code, {@link MasterWalManager},  * {@link SplitLogManager}, {@link org.apache.hadoop.hbase.zookeeper.ZKSplitLog} and  * {@link org.apache.hadoop.hbase.coordination.ZKSplitLogManagerCoordination} can be removed  * after we switch to procedure-based WAL splitting.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitWALManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitWALManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|master
decl_stmt|;
specifier|private
specifier|final
name|SplitWorkerAssigner
name|splitWorkerAssigner
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|SplitWALManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|master
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|splitWorkerAssigner
operator|=
operator|new
name|SplitWorkerAssigner
argument_list|(
name|this
operator|.
name|master
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HBASE_SPLIT_WAL_MAX_SPLITTER
argument_list|,
name|DEFAULT_HBASE_SPLIT_WAL_MAX_SPLITTER
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getWALRootDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Procedure
argument_list|>
name|splitWALs
parameter_list|(
name|ServerName
name|crashedServer
parameter_list|,
name|boolean
name|splitMeta
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// 1. list all splitting files
name|List
argument_list|<
name|FileStatus
argument_list|>
name|splittingFiles
init|=
name|getWALsToSplit
argument_list|(
name|crashedServer
argument_list|,
name|splitMeta
argument_list|)
decl_stmt|;
comment|// 2. create corresponding procedures
return|return
name|createSplitWALProcedures
argument_list|(
name|splittingFiles
argument_list|,
name|crashedServer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to create procedures for splitting logs of {}"
argument_list|,
name|crashedServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getWALsToSplit
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|boolean
name|splitMeta
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|logDirs
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
operator|.
name|getLogDirs
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
name|SplitLogManager
operator|.
name|getFileList
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|logDirs
argument_list|,
name|splitMeta
condition|?
name|META_FILTER
else|:
name|NON_META_FILTER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"size of WALs of {} is {}, isMeta: {}"
argument_list|,
name|serverName
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|,
name|splitMeta
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fileStatuses
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getWALSplitDir
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|logDir
operator|.
name|suffix
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SPLITTING_EXT
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteSplitWAL
parameter_list|(
name|String
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|wal
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteWALDir
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|splitDir
init|=
name|getWALSplitDir
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|splitDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSplitWALFinished
parameter_list|(
name|String
name|walPath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|walPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|List
argument_list|<
name|Procedure
argument_list|>
name|createSplitWALProcedures
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|splittingWALs
parameter_list|,
name|ServerName
name|crashedServer
parameter_list|)
block|{
return|return
name|splittingWALs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|wal
lambda|->
operator|new
name|SplitWALProcedure
argument_list|(
name|wal
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|crashedServer
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * try to acquire an worker from online servers which is executring    * @param procedure split WAL task    * @return an available region server which could execute this task    * @throws ProcedureSuspendedException if there is no available worker,    *         it will throw this exception to let the procedure wait    */
specifier|public
name|ServerName
name|acquireSplitWALWorker
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|procedure
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|worker
init|=
name|splitWorkerAssigner
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"acquired a worker {} to split a WAL"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
if|if
condition|(
name|worker
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|worker
operator|.
name|get
argument_list|()
return|;
block|}
name|splitWorkerAssigner
operator|.
name|suspend
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
comment|/**    * After the worker finished the split WAL task, it will release the worker, and wake up all the    * suspend procedures in the ProcedureEvent    * @param worker worker which is about to release    * @param scheduler scheduler which is to wake up the procedure event    */
specifier|public
name|void
name|releaseSplitWALWorker
parameter_list|(
name|ServerName
name|worker
parameter_list|,
name|MasterProcedureScheduler
name|scheduler
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"release a worker {} to split a WAL"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|splitWorkerAssigner
operator|.
name|release
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|splitWorkerAssigner
operator|.
name|wake
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
comment|/**    * When master restart, there will be a new splitWorkerAssigner. But if there are splitting WAL    * tasks running on the region server side, they will not be count by the new splitWorkerAssigner.    * Thus we should add the workers of running tasks to the assigner when we load the procedures    * from MasterProcWALs.    * @param worker region server which is executing a split WAL task    */
specifier|public
name|void
name|addUsedSplitWALWorker
parameter_list|(
name|ServerName
name|worker
parameter_list|)
block|{
name|splitWorkerAssigner
operator|.
name|addUsedWorker
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
comment|/**    * help assign and release a worker for each WAL splitting task    * For each worker, concurrent running splitting task should be no more than maxSplitTasks    * If a task failed to acquire a worker, it will suspend and wait for workers available    *    */
specifier|private
specifier|static
specifier|final
class|class
name|SplitWorkerAssigner
implements|implements
name|ServerListener
block|{
specifier|private
name|int
name|maxSplitTasks
decl_stmt|;
specifier|private
specifier|final
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Integer
argument_list|>
name|currentWorkers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|public
name|SplitWorkerAssigner
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|int
name|maxSplitTasks
parameter_list|)
block|{
name|this
operator|.
name|maxSplitTasks
operator|=
name|maxSplitTasks
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|<>
argument_list|(
literal|"split-WAL-worker-assigning"
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|acquire
parameter_list|()
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|serverList
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|worker
init|=
name|serverList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|serverName
lambda|->
operator|!
name|currentWorkers
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
operator|||
name|currentWorkers
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|>
literal|0
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|worker
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|currentWorkers
operator|.
name|compute
argument_list|(
name|worker
operator|.
name|get
argument_list|()
argument_list|,
operator|(
name|serverName
operator|,
name|availableWorker
operator|)
operator|->
name|availableWorker
operator|==
literal|null
condition|?
name|maxSplitTasks
operator|-
literal|1
else|:
name|availableWorker
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|worker
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|currentWorkers
operator|.
name|compute
argument_list|(
name|serverName
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|v
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|suspend
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
block|{
name|event
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|wake
parameter_list|(
name|MasterProcedureScheduler
name|scheduler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|event
operator|.
name|wake
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverAdded
parameter_list|(
name|ServerName
name|worker
parameter_list|)
block|{
name|this
operator|.
name|wake
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|addUsedWorker
parameter_list|(
name|ServerName
name|worker
parameter_list|)
block|{
comment|// load used worker when master restart
name|currentWorkers
operator|.
name|compute
argument_list|(
name|worker
argument_list|,
operator|(
name|serverName
operator|,
name|availableWorker
operator|)
operator|->
name|availableWorker
operator|==
literal|null
condition|?
name|maxSplitTasks
operator|-
literal|1
else|:
name|availableWorker
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

