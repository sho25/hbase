begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_comment
comment|/**  * This is the default implementation for ScanLabelGenerator. It will extract labels passed via  * Scan#authorizations and cross check against the global auths set for the user. The labels for which  * user is not authenticated will be dropped even if it is passed via Scan Authorizations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultScanLabelGenerator
implements|implements
name|ScanLabelGenerator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultScanLabelGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|VisibilityLabelsManager
name|labelsManager
decl_stmt|;
specifier|public
name|DefaultScanLabelGenerator
parameter_list|()
block|{
name|this
operator|.
name|labelsManager
operator|=
name|VisibilityLabelsManager
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLabels
parameter_list|(
name|User
name|user
parameter_list|,
name|Authorizations
name|authorizations
parameter_list|)
block|{
if|if
condition|(
name|authorizations
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|authorizations
operator|.
name|getLabels
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|user
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|auths
init|=
name|this
operator|.
name|labelsManager
operator|.
name|getAuths
argument_list|(
name|userName
argument_list|)
decl_stmt|;
return|return
name|dropLabelsNotInUserAuths
argument_list|(
name|labels
argument_list|,
name|auths
argument_list|,
name|userName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dropLabelsNotInUserAuths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|auths
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|droppedLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|passedLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
if|if
condition|(
name|auths
operator|.
name|contains
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|passedLabels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|droppedLabels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|droppedLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Labels "
operator|+
name|droppedLabels
operator|+
literal|" in Scan/Get visibility attributes dropped as user "
operator|+
name|userName
operator|+
literal|" having no auth set for those."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|passedLabels
return|;
block|}
block|}
end_class

end_unit

