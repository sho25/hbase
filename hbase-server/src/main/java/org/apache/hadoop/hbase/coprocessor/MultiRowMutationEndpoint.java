begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|WrongRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class demonstrates how to implement atomic multi row transactions using  * {@link HRegion#mutateRowsWithLocks(java.util.Collection, java.util.Collection)}  * and Coprocessor endpoints.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MultiRowMutationEndpoint
extends|extends
name|BaseEndpointCoprocessor
implements|implements
name|MultiRowMutationProtocol
block|{
annotation|@
name|Override
specifier|public
name|void
name|mutateRows
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the coprocessor environment
name|RegionCoprocessorEnvironment
name|env
init|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// set of rows to lock, sorted to avoid deadlocks
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
comment|// check whether rows are in range for this region
if|if
condition|(
operator|!
name|HRegion
operator|.
name|rowIsInRange
argument_list|(
name|regionInfo
argument_list|,
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Requested row out of range '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
name|rowsToLock
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if this is the first row, region might have moved,
comment|// allow client to retry
throw|throw
operator|new
name|WrongRegionException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
comment|// rows are split between regions, do not retry
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
name|rowsToLock
operator|.
name|add
argument_list|(
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// call utility method on region
name|env
operator|.
name|getRegion
argument_list|()
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

