begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScannable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DroppedSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|ConfigurationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|FailedSanityCheckException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|OperationConflictException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|OutOfOrderScannerNextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPCErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PayloadCarryingRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PriorityFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|QosPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCallContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerNotRunningYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|MergeRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|MergeRegionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
operator|.
name|RegionOpenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateFavoredNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateFavoredNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WarmupRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WarmupRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
operator|.
name|FamilyPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ResultOrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameInt64Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|OperationQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|RegionServerQuotaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|RegionScannerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Leases
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Leases
operator|.
name|LeaseStillHeldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
operator|.
name|FlushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
operator|.
name|LimitScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenMetaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|OpenRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ServerRegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Implements the regionserver RPC services.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|RSRpcServices
implements|implements
name|HBaseRPCErrorHandler
implements|,
name|AdminService
operator|.
name|BlockingInterface
implements|,
name|ClientService
operator|.
name|BlockingInterface
implements|,
name|PriorityFunction
implements|,
name|ConfigurationObserver
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSRpcServices
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** RPC scheduler to use for the region server. */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS
init|=
literal|"hbase.region.server.rpc.scheduler.factory.class"
decl_stmt|;
comment|/**    * Minimum allowable time limit delta (in milliseconds) that can be enforced during scans. This    * configuration exists to prevent the scenario where a time limit is specified to be so    * restrictive that the time limit is reached immediately (before any cells are scanned).    */
specifier|private
specifier|static
specifier|final
name|String
name|REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA
init|=
literal|"hbase.region.server.rpc.minimum.scan.time.limit.delta"
decl_stmt|;
comment|/**    * Default value of {@link RSRpcServices#REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA}    */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA
init|=
literal|10
decl_stmt|;
comment|// Request counter. (Includes requests that are not serviced by regions.)
specifier|final
name|Counter
name|requestCount
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
comment|// Server to handle client requests.
specifier|final
name|RpcServerInterface
name|rpcServer
decl_stmt|;
specifier|final
name|InetSocketAddress
name|isa
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|regionServer
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxScannerResultSize
decl_stmt|;
comment|// The reference to the priority extraction function
specifier|private
specifier|final
name|PriorityFunction
name|priority
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|scannerIdGen
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
name|scanners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The lease timeout period for client scanners (milliseconds).    */
specifier|private
specifier|final
name|int
name|scannerLeaseTimeoutPeriod
decl_stmt|;
comment|/**    * The RPC timeout period (milliseconds)    */
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
comment|/**    * The minimum allowable delta to use for the scan limit    */
specifier|private
specifier|final
name|long
name|minimumScanTimeLimitDelta
decl_stmt|;
comment|/**    * An Rpc callback for closing a RegionScanner.    */
specifier|static
class|class
name|RegionScannerCloseCallBack
implements|implements
name|RpcCallback
block|{
specifier|private
specifier|final
name|RegionScanner
name|scanner
decl_stmt|;
specifier|public
name|RegionScannerCloseCallBack
parameter_list|(
name|RegionScanner
name|scanner
parameter_list|)
block|{
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * An Rpc callback for doing shipped() call on a RegionScanner.    */
specifier|private
class|class
name|RegionScannerShippedCallBack
implements|implements
name|RpcCallback
block|{
specifier|private
specifier|final
name|String
name|scannerName
decl_stmt|;
specifier|private
specifier|final
name|RegionScanner
name|scanner
decl_stmt|;
specifier|private
specifier|final
name|Lease
name|lease
decl_stmt|;
specifier|public
name|RegionScannerShippedCallBack
parameter_list|(
name|String
name|scannerName
parameter_list|,
name|RegionScanner
name|scanner
parameter_list|,
name|Lease
name|lease
parameter_list|)
block|{
name|this
operator|.
name|scannerName
operator|=
name|scannerName
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
name|this
operator|.
name|lease
operator|=
name|lease
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|scanner
operator|.
name|shipped
argument_list|()
expr_stmt|;
comment|// We're done. On way out re-add the above removed lease. The lease was temp removed for this
comment|// Rpc call and we are at end of the call now. Time to add it back.
if|if
condition|(
name|scanners
operator|.
name|containsKey
argument_list|(
name|scannerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
name|regionServer
operator|.
name|leases
operator|.
name|addLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An RpcCallBack that creates a list of scanners that needs to perform callBack operation on    * completion of multiGets.    */
specifier|static
class|class
name|RegionScannersCloseCallBack
implements|implements
name|RpcCallback
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|RegionScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionScanner
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addScanner
parameter_list|(
name|RegionScanner
name|scanner
parameter_list|)
block|{
name|this
operator|.
name|scanners
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|RegionScanner
name|scanner
range|:
name|scanners
control|)
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while closing the scanner "
operator|+
name|scanner
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Holder class which holds the RegionScanner, nextCallSeq and RpcCallbacks together.    */
specifier|private
specifier|static
class|class
name|RegionScannerHolder
block|{
specifier|private
name|AtomicLong
name|nextCallSeq
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|RegionScanner
name|s
decl_stmt|;
specifier|private
name|Region
name|r
decl_stmt|;
specifier|final
name|RpcCallback
name|closeCallBack
decl_stmt|;
specifier|final
name|RpcCallback
name|shippedCallback
decl_stmt|;
specifier|public
name|RegionScannerHolder
parameter_list|(
name|RegionScanner
name|s
parameter_list|,
name|Region
name|r
parameter_list|,
name|RpcCallback
name|closeCallBack
parameter_list|,
name|RpcCallback
name|shippedCallback
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|closeCallBack
operator|=
name|closeCallBack
expr_stmt|;
name|this
operator|.
name|shippedCallback
operator|=
name|shippedCallback
expr_stmt|;
block|}
specifier|private
name|long
name|getNextCallSeq
parameter_list|()
block|{
return|return
name|nextCallSeq
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|incNextCallSeq
parameter_list|()
block|{
name|nextCallSeq
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|rollbackNextCallSeq
parameter_list|()
block|{
name|nextCallSeq
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Instantiated as a scanner lease. If the lease times out, the scanner is    * closed    */
specifier|private
class|class
name|ScannerListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|scannerName
decl_stmt|;
name|ScannerListener
parameter_list|(
specifier|final
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|scannerName
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|RegionScannerHolder
name|rsh
init|=
name|scanners
operator|.
name|remove
argument_list|(
name|this
operator|.
name|scannerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
name|RegionScanner
name|s
init|=
name|rsh
operator|.
name|s
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired on region "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Region
name|region
init|=
name|regionServer
operator|.
name|getRegion
argument_list|(
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing scanner for "
operator|+
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Scanner "
operator|+
name|this
operator|.
name|scannerName
operator|+
literal|" lease expired, but no related"
operator|+
literal|" scanner found, hence no chance to close that related scanner!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|ResultOrException
name|getResultOrException
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|r
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|RegionLoadStats
name|stats
parameter_list|)
block|{
return|return
name|getResultOrException
argument_list|(
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|r
argument_list|,
name|stats
argument_list|)
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ResultOrException
name|getResultOrException
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|getResultOrException
argument_list|(
name|ResponseConverter
operator|.
name|buildActionResult
argument_list|(
name|e
argument_list|)
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ResultOrException
name|getResultOrException
parameter_list|(
specifier|final
name|ResultOrException
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|builder
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Starts the nonce operation for a mutation, if needed.    * @param mutation Mutation.    * @param nonceGroup Nonce group from the request.    * @returns Nonce used (can be NO_NONCE).    */
specifier|private
name|long
name|startNonceOperation
parameter_list|(
specifier|final
name|MutationProto
name|mutation
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
throws|throws
name|IOException
throws|,
name|OperationConflictException
block|{
if|if
condition|(
name|regionServer
operator|.
name|nonceManager
operator|==
literal|null
operator|||
operator|!
name|mutation
operator|.
name|hasNonce
argument_list|()
condition|)
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
name|boolean
name|canProceed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|canProceed
operator|=
name|regionServer
operator|.
name|nonceManager
operator|.
name|startOperation
argument_list|(
name|nonceGroup
argument_list|,
name|mutation
operator|.
name|getNonce
argument_list|()
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Nonce start operation interrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|canProceed
condition|)
block|{
comment|// TODO: instead, we could convert append/increment to get w/mvcc
name|String
name|message
init|=
literal|"The operation with nonce {"
operator|+
name|nonceGroup
operator|+
literal|", "
operator|+
name|mutation
operator|.
name|getNonce
argument_list|()
operator|+
literal|"} on row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|+
literal|"] may have already completed"
decl_stmt|;
throw|throw
operator|new
name|OperationConflictException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|mutation
operator|.
name|getNonce
argument_list|()
return|;
block|}
comment|/**    * Ends nonce operation for a mutation, if needed.    * @param mutation Mutation.    * @param nonceGroup Nonce group from the request. Always 0 in initial implementation.    * @param success Whether the operation for this nonce has succeeded.    */
specifier|private
name|void
name|endNonceOperation
parameter_list|(
specifier|final
name|MutationProto
name|mutation
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
if|if
condition|(
name|regionServer
operator|.
name|nonceManager
operator|!=
literal|null
operator|&&
name|mutation
operator|.
name|hasNonce
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|nonceManager
operator|.
name|endOperation
argument_list|(
name|nonceGroup
argument_list|,
name|mutation
operator|.
name|getNonce
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return True if current call supports cellblocks    */
specifier|private
name|boolean
name|isClientCellBlockSupport
parameter_list|()
block|{
name|RpcCallContext
name|context
init|=
name|RpcServer
operator|.
name|getCurrentCall
argument_list|()
decl_stmt|;
return|return
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isClientCellBlockSupport
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isClientCellBlockSupport
parameter_list|(
name|RpcCallContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isClientCellBlockSupport
argument_list|()
return|;
block|}
specifier|private
name|void
name|addResult
parameter_list|(
specifier|final
name|MutateResponse
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|PayloadCarryingRpcController
name|rpcc
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|isClientCellBlockSupport
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ProtobufUtil
operator|.
name|toResultNoData
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|rpcc
operator|.
name|setCellScanner
argument_list|(
name|result
operator|.
name|cellScanner
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClientProtos
operator|.
name|Result
name|pbr
init|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|pbr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addResults
parameter_list|(
specifier|final
name|ScanResponse
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
name|boolean
name|isDefaultRegion
parameter_list|,
name|boolean
name|clientCellBlockSupported
parameter_list|)
block|{
name|builder
operator|.
name|setStale
argument_list|(
operator|!
name|isDefaultRegion
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|clientCellBlockSupported
condition|)
block|{
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|builder
operator|.
name|addCellsPerResult
argument_list|(
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPartialFlagPerResult
argument_list|(
name|res
operator|.
name|isPartial
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|PayloadCarryingRpcController
operator|)
name|controller
operator|)
operator|.
name|setCellScanner
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|ClientProtos
operator|.
name|Result
name|pbr
init|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addResults
argument_list|(
name|pbr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mutate a list of rows atomically.    *    * @param region    * @param actions    * @param cellScanner if non-null, the mutation data -- the Cell content.    * @throws IOException    */
specifier|private
name|ClientProtos
operator|.
name|RegionLoadStats
name|mutateRows
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|ClientProtos
operator|.
name|Action
argument_list|>
name|actions
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|RowMutations
name|rm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|actions
control|)
block|{
if|if
condition|(
name|action
operator|.
name|hasGet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Atomic put and/or delete only, not a Get="
operator|+
name|action
operator|.
name|getGet
argument_list|()
argument_list|)
throw|;
block|}
name|MutationType
name|type
init|=
name|action
operator|.
name|getMutation
argument_list|()
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rm
operator|==
literal|null
condition|)
block|{
name|rm
operator|=
operator|new
name|RowMutations
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PUT
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Atomic put and/or delete only, not "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|region
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getRegionStats
argument_list|()
return|;
block|}
comment|/**    * Mutate a list of rows atomically.    *    * @param region    * @param actions    * @param cellScanner if non-null, the mutation data -- the Cell content.    * @param row    * @param family    * @param qualifier    * @param compareOp    * @param comparator @throws IOException    */
specifier|private
name|boolean
name|checkAndRowMutate
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|ClientProtos
operator|.
name|Action
argument_list|>
name|actions
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|RowMutations
name|rm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|actions
control|)
block|{
if|if
condition|(
name|action
operator|.
name|hasGet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Atomic put and/or delete only, not a Get="
operator|+
name|action
operator|.
name|getGet
argument_list|()
argument_list|)
throw|;
block|}
name|MutationType
name|type
init|=
name|action
operator|.
name|getMutation
argument_list|()
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rm
operator|==
literal|null
condition|)
block|{
name|rm
operator|=
operator|new
name|RowMutations
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PUT
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|rm
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Atomic put and/or delete only, not "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|region
operator|.
name|checkAndRowMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|rm
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
comment|/**    * Execute an append mutation.    *    * @param region    * @param m    * @param cellScanner    * @return result to return to client if default operation should be    * bypassed as indicated by RegionObserver, null otherwise    * @throws IOException    */
specifier|private
name|Result
name|append
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|OperationQuota
name|quota
parameter_list|,
specifier|final
name|MutationProto
name|m
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Append
name|append
init|=
name|ProtobufUtil
operator|.
name|toAppend
argument_list|(
name|m
argument_list|,
name|cellScanner
argument_list|)
decl_stmt|;
name|quota
operator|.
name|addMutation
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preAppend
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|long
name|nonce
init|=
name|startNonceOperation
argument_list|(
name|m
argument_list|,
name|nonceGroup
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|=
name|region
operator|.
name|append
argument_list|(
name|append
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|endNonceOperation
argument_list|(
name|m
argument_list|,
name|nonceGroup
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postAppend
argument_list|(
name|append
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateAppend
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Execute an increment mutation.    *    * @param region    * @param mutation    * @return the Result    * @throws IOException    */
specifier|private
name|Result
name|increment
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|OperationQuota
name|quota
parameter_list|,
specifier|final
name|MutationProto
name|mutation
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Increment
name|increment
init|=
name|ProtobufUtil
operator|.
name|toIncrement
argument_list|(
name|mutation
argument_list|,
name|cells
argument_list|)
decl_stmt|;
name|quota
operator|.
name|addMutation
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preIncrement
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|long
name|nonce
init|=
name|startNonceOperation
argument_list|(
name|mutation
argument_list|,
name|nonceGroup
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|r
operator|=
name|region
operator|.
name|increment
argument_list|(
name|increment
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|endNonceOperation
argument_list|(
name|mutation
argument_list|,
name|nonceGroup
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postIncrement
argument_list|(
name|increment
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateIncrement
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Run through the regionMutation<code>rm</code> and per Mutation, do the work, and then when    * done, add an instance of a {@link ResultOrException} that corresponds to each Mutation.    * @param region    * @param actions    * @param cellScanner    * @param builder    * @param cellsToReturn  Could be null. May be allocated in this method.  This is what this    * method returns as a 'result'.    * @param closeCallBack the callback to be used with multigets    * @param context the current RpcCallContext    * @return Return the<code>cellScanner</code> passed    */
specifier|private
name|List
argument_list|<
name|CellScannable
argument_list|>
name|doNonAtomicRegionMutation
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|OperationQuota
name|quota
parameter_list|,
specifier|final
name|RegionAction
name|actions
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|,
specifier|final
name|RegionActionResult
operator|.
name|Builder
name|builder
parameter_list|,
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cellsToReturn
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|RegionScannersCloseCallBack
name|closeCallBack
parameter_list|,
name|RpcCallContext
name|context
parameter_list|)
block|{
comment|// Gather up CONTIGUOUS Puts and Deletes in this mutations List.  Idea is that rather than do
comment|// one at a time, we instead pass them in batch.  Be aware that the corresponding
comment|// ResultOrException instance that matches each Put or Delete is then added down in the
comment|// doBatchOp call.  We should be staying aligned though the Put and Delete are deferred/batched
name|List
argument_list|<
name|ClientProtos
operator|.
name|Action
argument_list|>
name|mutations
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|actions
operator|.
name|getActionList
argument_list|()
control|)
block|{
name|ClientProtos
operator|.
name|ResultOrException
operator|.
name|Builder
name|resultOrExceptionBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Result
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|hasGet
argument_list|()
condition|)
block|{
name|Get
name|get
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|action
operator|.
name|getGet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|get
argument_list|(
name|get
argument_list|,
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
argument_list|,
name|closeCallBack
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|hasServiceCall
argument_list|()
condition|)
block|{
name|resultOrExceptionBuilder
operator|=
name|ResultOrException
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|result
init|=
name|execServiceOnRegion
argument_list|(
name|region
argument_list|,
name|action
operator|.
name|getServiceCall
argument_list|()
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|CoprocessorServiceResult
operator|.
name|Builder
name|serviceResultBuilder
init|=
name|ClientProtos
operator|.
name|CoprocessorServiceResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|resultOrExceptionBuilder
operator|.
name|setServiceResult
argument_list|(
name|serviceResultBuilder
operator|.
name|setValue
argument_list|(
name|serviceResultBuilder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|result
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|rpcServer
operator|.
name|getMetrics
argument_list|()
operator|.
name|exception
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|resultOrExceptionBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|hasMutation
argument_list|()
condition|)
block|{
name|MutationType
name|type
init|=
name|action
operator|.
name|getMutation
argument_list|()
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|MutationType
operator|.
name|PUT
operator|&&
name|type
operator|!=
name|MutationType
operator|.
name|DELETE
operator|&&
name|mutations
operator|!=
literal|null
operator|&&
operator|!
name|mutations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Flush out any Puts or Deletes already collected.
name|doBatchOp
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|quota
argument_list|,
name|mutations
argument_list|,
name|cellScanner
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|quota
argument_list|,
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|quota
argument_list|,
name|action
operator|.
name|getMutation
argument_list|()
argument_list|,
name|cellScanner
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
case|case
name|DELETE
case|:
comment|// Collect the individual mutations and apply in a batch
if|if
condition|(
name|mutations
operator|==
literal|null
condition|)
block|{
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClientProtos
operator|.
name|Action
argument_list|>
argument_list|(
name|actions
operator|.
name|getActionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mutations
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Unexpected Action type"
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|ClientProtos
operator|.
name|Result
name|pbResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isClientCellBlockSupport
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|pbResult
operator|=
name|ProtobufUtil
operator|.
name|toResultNoData
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|//  Hard to guess the size here.  Just make a rough guess.
if|if
condition|(
name|cellsToReturn
operator|==
literal|null
condition|)
name|cellsToReturn
operator|=
operator|new
name|ArrayList
argument_list|<
name|CellScannable
argument_list|>
argument_list|()
expr_stmt|;
name|cellsToReturn
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pbResult
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|resultOrExceptionBuilder
operator|=
name|ClientProtos
operator|.
name|ResultOrException
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResult
argument_list|(
name|pbResult
argument_list|)
expr_stmt|;
block|}
comment|// Could get to here and there was no result and no exception.  Presumes we added
comment|// a Put or Delete to the collecting Mutations List for adding later.  In this
comment|// case the corresponding ResultOrException instance for the Put or Delete will be added
comment|// down in the doBatchOp method call rather than up here.
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|rpcServer
operator|.
name|getMetrics
argument_list|()
operator|.
name|exception
argument_list|(
name|ie
argument_list|)
expr_stmt|;
name|resultOrExceptionBuilder
operator|=
name|ResultOrException
operator|.
name|newBuilder
argument_list|()
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resultOrExceptionBuilder
operator|!=
literal|null
condition|)
block|{
comment|// Propagate index.
name|resultOrExceptionBuilder
operator|.
name|setIndex
argument_list|(
name|action
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResultOrException
argument_list|(
name|resultOrExceptionBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finish up any outstanding mutations
if|if
condition|(
name|mutations
operator|!=
literal|null
operator|&&
operator|!
name|mutations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doBatchOp
argument_list|(
name|builder
argument_list|,
name|region
argument_list|,
name|quota
argument_list|,
name|mutations
argument_list|,
name|cellScanner
argument_list|)
expr_stmt|;
block|}
return|return
name|cellsToReturn
return|;
block|}
comment|/**    * Execute a list of Put/Delete mutations.    *    * @param builder    * @param region    * @param mutations    */
specifier|private
name|void
name|doBatchOp
parameter_list|(
specifier|final
name|RegionActionResult
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|OperationQuota
name|quota
parameter_list|,
specifier|final
name|List
argument_list|<
name|ClientProtos
operator|.
name|Action
argument_list|>
name|mutations
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|)
block|{
name|Mutation
index|[]
name|mArray
init|=
operator|new
name|Mutation
index|[
name|mutations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|boolean
name|batchContainsPuts
init|=
literal|false
decl_stmt|,
name|batchContainsDelete
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|mutations
control|)
block|{
name|MutationProto
name|m
init|=
name|action
operator|.
name|getMutation
argument_list|()
decl_stmt|;
name|Mutation
name|mutation
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getMutateType
argument_list|()
operator|==
name|MutationType
operator|.
name|PUT
condition|)
block|{
name|mutation
operator|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|m
argument_list|,
name|cells
argument_list|)
expr_stmt|;
name|batchContainsPuts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mutation
operator|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|m
argument_list|,
name|cells
argument_list|)
expr_stmt|;
name|batchContainsDelete
operator|=
literal|true
expr_stmt|;
block|}
name|mArray
index|[
name|i
operator|++
index|]
operator|=
name|mutation
expr_stmt|;
name|quota
operator|.
name|addMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|OperationStatus
index|[]
name|codes
init|=
name|region
operator|.
name|batchMutate
argument_list|(
name|mArray
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|codes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|mutations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
condition|)
block|{
case|case
name|BAD_FAMILY
case|:
name|e
operator|=
operator|new
name|NoSuchColumnFamilyException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResultOrException
argument_list|(
name|getResultOrException
argument_list|(
name|e
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANITY_CHECK_FAILURE
case|:
name|e
operator|=
operator|new
name|FailedSanityCheckException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResultOrException
argument_list|(
name|getResultOrException
argument_list|(
name|e
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|e
operator|=
operator|new
name|DoNotRetryIOException
argument_list|(
name|codes
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResultOrException
argument_list|(
name|getResultOrException
argument_list|(
name|e
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUCCESS
case|:
name|builder
operator|.
name|addResultOrException
argument_list|(
name|getResultOrException
argument_list|(
name|ClientProtos
operator|.
name|Result
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|index
argument_list|,
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getRegionStats
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mutations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addResultOrException
argument_list|(
name|getResultOrException
argument_list|(
name|ie
argument_list|,
name|mutations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|long
name|after
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|batchContainsPuts
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updatePut
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|batchContainsDelete
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateDelete
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Execute a list of Put/Delete mutations. The function returns OperationStatus instead of    * constructing MultiResponse to save a possible loop if caller doesn't need MultiResponse.    * @param region    * @param mutations    * @param replaySeqId    * @return an array of OperationStatus which internally contains the OperationStatusCode and the    *         exceptionMessage if any    * @throws IOException    */
specifier|private
name|OperationStatus
index|[]
name|doReplayBatchOp
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|List
argument_list|<
name|WALSplitter
operator|.
name|MutationReplay
argument_list|>
name|mutations
parameter_list|,
name|long
name|replaySeqId
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|boolean
name|batchContainsPuts
init|=
literal|false
decl_stmt|,
name|batchContainsDelete
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|WALSplitter
operator|.
name|MutationReplay
argument_list|>
name|it
init|=
name|mutations
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|WALSplitter
operator|.
name|MutationReplay
name|m
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|type
operator|==
name|MutationType
operator|.
name|PUT
condition|)
block|{
name|batchContainsPuts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|batchContainsDelete
operator|=
literal|true
expr_stmt|;
block|}
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|map
init|=
name|m
operator|.
name|mutation
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|metaCells
init|=
name|map
operator|.
name|get
argument_list|(
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaCells
operator|!=
literal|null
operator|&&
operator|!
name|metaCells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Cell
name|metaCell
range|:
name|metaCells
control|)
block|{
name|CompactionDescriptor
name|compactionDesc
init|=
name|WALEdit
operator|.
name|getCompaction
argument_list|(
name|metaCell
argument_list|)
decl_stmt|;
name|boolean
name|isDefaultReplica
init|=
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|HRegion
name|hRegion
init|=
operator|(
name|HRegion
operator|)
name|region
decl_stmt|;
if|if
condition|(
name|compactionDesc
operator|!=
literal|null
condition|)
block|{
comment|// replay the compaction. Remove the files from stores only if we are the primary
comment|// region replica (thus own the files)
name|hRegion
operator|.
name|replayWALCompactionMarker
argument_list|(
name|compactionDesc
argument_list|,
operator|!
name|isDefaultReplica
argument_list|,
name|isDefaultReplica
argument_list|,
name|replaySeqId
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|FlushDescriptor
name|flushDesc
init|=
name|WALEdit
operator|.
name|getFlushDescriptor
argument_list|(
name|metaCell
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushDesc
operator|!=
literal|null
operator|&&
operator|!
name|isDefaultReplica
condition|)
block|{
name|hRegion
operator|.
name|replayWALFlushMarker
argument_list|(
name|flushDesc
argument_list|,
name|replaySeqId
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RegionEventDescriptor
name|regionEvent
init|=
name|WALEdit
operator|.
name|getRegionEventDescriptor
argument_list|(
name|metaCell
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionEvent
operator|!=
literal|null
operator|&&
operator|!
name|isDefaultReplica
condition|)
block|{
name|hRegion
operator|.
name|replayWALRegionEventMarker
argument_list|(
name|regionEvent
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|BulkLoadDescriptor
name|bulkLoadEvent
init|=
name|WALEdit
operator|.
name|getBulkLoadDescriptor
argument_list|(
name|metaCell
argument_list|)
decl_stmt|;
if|if
condition|(
name|bulkLoadEvent
operator|!=
literal|null
condition|)
block|{
name|hRegion
operator|.
name|replayWALBulkLoadEventMarker
argument_list|(
name|bulkLoadEvent
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|requestCount
operator|.
name|add
argument_list|(
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
return|return
name|region
operator|.
name|batchReplay
argument_list|(
name|mutations
operator|.
name|toArray
argument_list|(
operator|new
name|WALSplitter
operator|.
name|MutationReplay
index|[
name|mutations
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|replaySeqId
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|long
name|after
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|batchContainsPuts
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updatePut
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|batchContainsDelete
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateDelete
argument_list|(
name|after
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|closeAllScanners
parameter_list|()
block|{
comment|// Close any outstanding scanners. Means they'll get an UnknownScanner
comment|// exception next time they come in.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionScannerHolder
argument_list|>
name|e
range|:
name|scanners
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing scanner "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|RSRpcServices
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
name|regionServer
operator|=
name|rs
expr_stmt|;
name|RpcSchedulerFactory
name|rpcSchedulerFactory
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rpcSchedulerFactoryClass
init|=
name|rs
operator|.
name|conf
operator|.
name|getClass
argument_list|(
name|REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS
argument_list|,
name|SimpleRpcSchedulerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|rpcSchedulerFactory
operator|=
operator|(
operator|(
name|RpcSchedulerFactory
operator|)
name|rpcSchedulerFactoryClass
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Server to handle client requests.
name|InetSocketAddress
name|initialIsa
decl_stmt|;
name|InetSocketAddress
name|bindAddress
decl_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|MasterRpcServices
condition|)
block|{
name|String
name|hostname
init|=
name|getHostname
argument_list|(
name|rs
operator|.
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|rs
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MASTER_PORT
argument_list|)
decl_stmt|;
comment|// Creation of a HSA will force a resolve.
name|initialIsa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|bindAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|rs
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.ipc.address"
argument_list|,
name|hostname
argument_list|)
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|hostname
init|=
name|getHostname
argument_list|(
name|rs
operator|.
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|rs
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONSERVER_PORT
argument_list|)
decl_stmt|;
comment|// Creation of a HSA will force a resolve.
name|initialIsa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|bindAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|rs
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.ipc.address"
argument_list|,
name|hostname
argument_list|)
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
name|priority
operator|=
name|createPriority
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|rs
operator|.
name|getProcessName
argument_list|()
operator|+
literal|"/"
operator|+
name|initialIsa
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Set how many times to retry talking to another server over HConnection.
name|ConnectionUtils
operator|.
name|setServerSideHConnectionRetriesConfig
argument_list|(
name|rs
operator|.
name|conf
argument_list|,
name|name
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|rpcServer
operator|=
operator|new
name|RpcServer
argument_list|(
name|rs
argument_list|,
name|name
argument_list|,
name|getServices
argument_list|()
argument_list|,
name|bindAddress
argument_list|,
comment|// use final bindAddress for this server.
name|rs
operator|.
name|conf
argument_list|,
name|rpcSchedulerFactory
operator|.
name|create
argument_list|(
name|rs
operator|.
name|conf
argument_list|,
name|this
argument_list|,
name|rs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|be
parameter_list|)
block|{
name|String
name|configName
init|=
operator|(
name|this
operator|instanceof
name|MasterRpcServices
operator|)
condition|?
name|HConstants
operator|.
name|MASTER_PORT
else|:
name|HConstants
operator|.
name|REGIONSERVER_PORT
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|be
operator|.
name|getMessage
argument_list|()
operator|+
literal|". To switch ports use the '"
operator|+
name|configName
operator|+
literal|"' configuration property."
argument_list|,
name|be
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|be
operator|.
name|getCause
argument_list|()
else|:
name|be
argument_list|)
throw|;
block|}
name|scannerLeaseTimeoutPeriod
operator|=
name|rs
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|)
expr_stmt|;
name|maxScannerResultSize
operator|=
name|rs
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_SERVER_SCANNER_MAX_RESULT_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_SERVER_SCANNER_MAX_RESULT_SIZE
argument_list|)
expr_stmt|;
name|rpcTimeout
operator|=
name|rs
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
expr_stmt|;
name|minimumScanTimeLimitDelta
operator|=
name|rs
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA
argument_list|,
name|DEFAULT_REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Listener channel is closed"
argument_list|)
throw|;
block|}
comment|// Set our address, however we need the final port that was given to rpcServer
name|isa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|initialIsa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|setErrorHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
if|if
condition|(
name|rpcServer
operator|instanceof
name|ConfigurationObserver
condition|)
block|{
operator|(
operator|(
name|ConfigurationObserver
operator|)
name|rpcServer
operator|)
operator|.
name|onConfigurationChange
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PriorityFunction
name|createPriority
parameter_list|()
block|{
return|return
operator|new
name|AnnotationReadingPriorityFunction
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isMaster
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|hostname
init|=
name|conf
operator|.
name|get
argument_list|(
name|isMaster
condition|?
name|HRegionServer
operator|.
name|MASTER_HOSTNAME_KEY
else|:
name|HRegionServer
operator|.
name|RS_HOSTNAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostname
operator|==
literal|null
operator|||
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|masterOrRS
init|=
name|isMaster
condition|?
literal|"master"
else|:
literal|"regionserver"
decl_stmt|;
return|return
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase."
operator|+
name|masterOrRS
operator|+
literal|".dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase."
operator|+
name|masterOrRS
operator|+
literal|".dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"hostname is configured to be "
operator|+
name|hostname
argument_list|)
expr_stmt|;
return|return
name|hostname
return|;
block|}
block|}
name|RegionScanner
name|getScanner
parameter_list|(
name|long
name|scannerId
parameter_list|)
block|{
name|String
name|scannerIdString
init|=
name|Long
operator|.
name|toString
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
name|RegionScannerHolder
name|scannerHolder
init|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|scannerHolder
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerHolder
operator|.
name|s
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the vtime associated with the scanner.    * Currently the vtime is the number of "next" calls.    */
name|long
name|getScannerVirtualTime
parameter_list|(
name|long
name|scannerId
parameter_list|)
block|{
name|String
name|scannerIdString
init|=
name|Long
operator|.
name|toString
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
name|RegionScannerHolder
name|scannerHolder
init|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|scannerHolder
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerHolder
operator|.
name|getNextCallSeq
argument_list|()
return|;
block|}
return|return
literal|0L
return|;
block|}
name|RegionScannerHolder
name|addScanner
parameter_list|(
name|String
name|scannerName
parameter_list|,
name|RegionScanner
name|s
parameter_list|,
name|Region
name|r
parameter_list|)
throws|throws
name|LeaseStillHeldException
block|{
name|Lease
name|lease
init|=
name|regionServer
operator|.
name|leases
operator|.
name|createLease
argument_list|(
name|scannerName
argument_list|,
name|this
operator|.
name|scannerLeaseTimeoutPeriod
argument_list|,
operator|new
name|ScannerListener
argument_list|(
name|scannerName
argument_list|)
argument_list|)
decl_stmt|;
name|RpcCallback
name|shippedCallback
init|=
operator|new
name|RegionScannerShippedCallBack
argument_list|(
name|scannerName
argument_list|,
name|s
argument_list|,
name|lease
argument_list|)
decl_stmt|;
name|RpcCallback
name|closeCallback
decl_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|RpcCallback
condition|)
block|{
name|closeCallback
operator|=
operator|(
name|RpcCallback
operator|)
name|s
expr_stmt|;
block|}
else|else
block|{
name|closeCallback
operator|=
operator|new
name|RegionScannerCloseCallBack
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|RegionScannerHolder
name|rsh
init|=
operator|new
name|RegionScannerHolder
argument_list|(
name|s
argument_list|,
name|r
argument_list|,
name|closeCallback
argument_list|,
name|shippedCallback
argument_list|)
decl_stmt|;
name|RegionScannerHolder
name|existing
init|=
name|scanners
operator|.
name|putIfAbsent
argument_list|(
name|scannerName
argument_list|,
name|rsh
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"scannerId must be unique within regionserver's whole lifecycle!"
assert|;
return|return
name|rsh
return|;
block|}
comment|/**    * Find the HRegion based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region    * @throws IOException if the specifier is not null,    *    but failed to find the region    */
name|Region
name|getRegion
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|regionServer
operator|.
name|getRegionByEncodedName
argument_list|(
name|regionSpecifier
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|getRegionEncodedName
argument_list|(
name|regionSpecifier
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|PriorityFunction
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|regionServer
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
specifier|private
name|RegionServerQuotaManager
name|getQuotaManager
parameter_list|()
block|{
return|return
name|regionServer
operator|.
name|getRegionServerQuotaManager
argument_list|()
return|;
block|}
name|void
name|start
parameter_list|()
block|{
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
block|{
name|closeAllScanners
argument_list|()
expr_stmt|;
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Called to verify that this server is up and running.    *    * @throws IOException    */
specifier|protected
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|regionServer
operator|.
name|isAborted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RegionServerAbortedException
argument_list|(
literal|"Server "
operator|+
name|regionServer
operator|.
name|serverName
operator|+
literal|" aborting"
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServer
operator|.
name|isStopped
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Server "
operator|+
name|regionServer
operator|.
name|serverName
operator|+
literal|" stopping"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionServer
operator|.
name|fsOk
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"File system not available"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionServer
operator|.
name|isOnline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServerNotRunningYetException
argument_list|(
literal|"Server is not running yet"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return list of blocking services and their security info classes that this server supports    */
specifier|protected
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|getServices
parameter_list|()
block|{
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|bssi
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|ClientService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|AdminService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|AdminService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bssi
return|;
block|}
specifier|public
name|InetSocketAddress
name|getSocketAddress
parameter_list|()
block|{
return|return
name|isa
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|(
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|User
name|user
parameter_list|)
block|{
return|return
name|priority
operator|.
name|getPriority
argument_list|(
name|header
argument_list|,
name|param
argument_list|,
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDeadline
parameter_list|(
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|)
block|{
return|return
name|priority
operator|.
name|getDeadline
argument_list|(
name|header
argument_list|,
name|param
argument_list|)
return|;
block|}
comment|/*    * Check if an OOME and, if so, abort immediately to avoid creating more objects.    *    * @param e    *    * @return True if we OOME'd and are aborting.    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkOOME
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
operator|||
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|OutOfMemoryError
operator|)
operator|||
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.lang.OutOfMemoryError"
argument_list|)
operator|)
condition|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Run out of memory; "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" will abort itself immediately"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stop
condition|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stop
return|;
block|}
comment|/**    * Close a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|CloseRegionResponse
name|closeRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CloseRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|ServerName
name|sn
init|=
operator|(
name|request
operator|.
name|hasDestinationServer
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getDestinationServer
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasServerStartCode
argument_list|()
condition|)
block|{
comment|// check that we are the same server that this RPC is intended for.
name|long
name|serverStartCode
init|=
name|request
operator|.
name|getServerStartCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|!=
name|serverStartCode
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"This RPC was intended for a "
operator|+
literal|"different server with startCode: "
operator|+
name|serverStartCode
operator|+
literal|", this server is: "
operator|+
name|regionServer
operator|.
name|serverName
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|encodedRegionName
init|=
name|ProtobufUtil
operator|.
name|getRegionEncodedName
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
comment|// Can be null if we're calling close on a region that's not online
specifier|final
name|Region
name|region
init|=
name|regionServer
operator|.
name|getFromOnlineRegions
argument_list|(
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|region
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Close "
operator|+
name|encodedRegionName
operator|+
literal|", moving to "
operator|+
name|sn
argument_list|)
expr_stmt|;
name|boolean
name|closed
init|=
name|regionServer
operator|.
name|closeRegion
argument_list|(
name|encodedRegionName
argument_list|,
literal|false
argument_list|,
name|sn
argument_list|)
decl_stmt|;
name|CloseRegionResponse
operator|.
name|Builder
name|builder
init|=
name|CloseRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClosed
argument_list|(
name|closed
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compact a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|CompactRegionResponse
name|compactRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CompactRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|.
name|startRegionOperation
argument_list|(
name|Operation
operator|.
name|COMPACT_REGION
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compacting "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|major
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
name|Store
name|store
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|request
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|store
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"column family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|" does not exist in region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasMajor
argument_list|()
condition|)
block|{
name|major
operator|=
name|request
operator|.
name|getMajor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|major
condition|)
block|{
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|region
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|familyLogMsg
init|=
operator|(
name|family
operator|!=
literal|null
operator|)
condition|?
literal|" for column family: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"User-triggered compaction requested for region "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|familyLogMsg
argument_list|)
expr_stmt|;
block|}
name|String
name|log
init|=
literal|"User-triggered "
operator|+
operator|(
name|major
condition|?
literal|"major "
else|:
literal|""
operator|)
operator|+
literal|"compaction"
operator|+
name|familyLogMsg
decl_stmt|;
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|store
argument_list|,
name|log
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionServer
operator|.
name|compactSplitThread
operator|.
name|requestCompaction
argument_list|(
name|region
argument_list|,
name|log
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|CompactRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Flush a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|FlushRegionResponse
name|flushRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|FlushRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|shouldFlush
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasIfOlderThanTs
argument_list|()
condition|)
block|{
name|shouldFlush
operator|=
name|region
operator|.
name|getEarliestFlushTimeForAllStores
argument_list|()
operator|<
name|request
operator|.
name|getIfOlderThanTs
argument_list|()
expr_stmt|;
block|}
name|FlushRegionResponse
operator|.
name|Builder
name|builder
init|=
name|FlushRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldFlush
condition|)
block|{
name|boolean
name|writeFlushWalMarker
init|=
name|request
operator|.
name|hasWriteFlushWalMarker
argument_list|()
condition|?
name|request
operator|.
name|getWriteFlushWalMarker
argument_list|()
else|:
literal|false
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Go behind the curtain so we can manage writing of the flush WAL marker
name|HRegion
operator|.
name|FlushResultImpl
name|flushResult
init|=
call|(
name|HRegion
operator|.
name|FlushResultImpl
call|)
argument_list|(
operator|(
name|HRegion
operator|)
name|region
argument_list|)
operator|.
name|flushcache
argument_list|(
literal|true
argument_list|,
name|writeFlushWalMarker
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushResult
operator|.
name|isFlushSucceeded
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateFlushTime
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|boolean
name|compactionNeeded
init|=
name|flushResult
operator|.
name|isCompactionNeeded
argument_list|()
decl_stmt|;
if|if
condition|(
name|compactionNeeded
condition|)
block|{
name|regionServer
operator|.
name|compactSplitThread
operator|.
name|requestSystemCompaction
argument_list|(
name|region
argument_list|,
literal|"Compaction through user triggered flush"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setFlushed
argument_list|(
name|flushResult
operator|.
name|isFlushSucceeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setWroteFlushWalMarker
argument_list|(
name|flushResult
operator|.
name|wroteFlushWalMarker
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLastFlushTime
argument_list|(
name|region
operator|.
name|getEarliestFlushTimeForAllStores
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
comment|// Cache flush can fail in a few places. If it fails in a critical
comment|// section, we get a DroppedSnapshotException and a replay of wal
comment|// is required. Currently the only way to do this is a restart of
comment|// the server.
name|regionServer
operator|.
name|abort
argument_list|(
literal|"Replay of WAL required. Forcing server shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetOnlineRegionResponse
name|getOnlineRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetOnlineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Region
argument_list|>
name|onlineRegions
init|=
name|regionServer
operator|.
name|onlineRegions
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|onlineRegions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetOnlineRegionResponse
argument_list|(
name|list
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetRegionInfoResponse
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRegionInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|GetRegionInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetRegionInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCompactionState
argument_list|()
operator|&&
name|request
operator|.
name|getCompactionState
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompactionState
argument_list|(
name|region
operator|.
name|getCompactionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIsRecovering
argument_list|(
name|region
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get some information of the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetServerInfoResponse
name|getServerInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetServerInfoRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|int
name|infoPort
init|=
name|regionServer
operator|.
name|infoServer
operator|!=
literal|null
condition|?
name|regionServer
operator|.
name|infoServer
operator|.
name|getPort
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetServerInfoResponse
argument_list|(
name|regionServer
operator|.
name|serverName
argument_list|,
name|infoPort
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|GetStoreFileResponse
name|getStoreFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetStoreFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamilies
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getFamilyCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnFamilies
operator|=
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnFamilies
operator|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteString
name|cf
range|:
name|request
operator|.
name|getFamilyList
argument_list|()
control|)
block|{
name|columnFamilies
operator|.
name|add
argument_list|(
name|cf
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nCF
init|=
name|columnFamilies
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
name|region
operator|.
name|getStoreFileList
argument_list|(
name|columnFamilies
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|nCF
index|]
index|[]
argument_list|)
argument_list|)
decl_stmt|;
name|GetStoreFileResponse
operator|.
name|Builder
name|builder
init|=
name|GetStoreFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllStoreFile
argument_list|(
name|fileList
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Merge regions on the region server.    *    * @param controller the RPC controller    * @param request the request    * @return merge regions response    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|MergeRegionsResponse
name|mergeRegions
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MergeRegionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|regionA
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegionA
argument_list|()
argument_list|)
decl_stmt|;
name|Region
name|regionB
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegionB
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|forcible
init|=
name|request
operator|.
name|getForcible
argument_list|()
decl_stmt|;
name|long
name|masterSystemTime
init|=
name|request
operator|.
name|hasMasterSystemTime
argument_list|()
condition|?
name|request
operator|.
name|getMasterSystemTime
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|regionA
operator|.
name|startRegionOperation
argument_list|(
name|Operation
operator|.
name|MERGE_REGION
argument_list|)
expr_stmt|;
name|regionB
operator|.
name|startRegionOperation
argument_list|(
name|Operation
operator|.
name|MERGE_REGION
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionA
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
operator|||
name|regionB
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|MergeRegionException
argument_list|(
literal|"Can't merge non-default replicas"
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Receiving merging request for  "
operator|+
name|regionA
operator|+
literal|", "
operator|+
name|regionB
operator|+
literal|",forcible="
operator|+
name|forcible
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|FlushResult
name|flushResult
init|=
name|regionA
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushResult
operator|.
name|isFlushSucceeded
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateFlushTime
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|flushResult
operator|=
name|regionB
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushResult
operator|.
name|isFlushSucceeded
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateFlushTime
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|regionServer
operator|.
name|compactSplitThread
operator|.
name|requestRegionsMerge
argument_list|(
name|regionA
argument_list|,
name|regionB
argument_list|,
name|forcible
argument_list|,
name|masterSystemTime
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MergeRegionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
name|regionServer
operator|.
name|abort
argument_list|(
literal|"Replay of WAL required. Forcing server shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Open asynchronously a region or a set of regions on the region server.    *    * The opening is coordinated by ZooKeeper, and this method requires the znode to be created    *  before being called. As a consequence, this method should be called only from the master.    *<p>    * Different manages states for the region are:    *</p><ul>    *<li>region not opened: the region opening will start asynchronously.</li>    *<li>a close is already in progress: this is considered as an error.</li>    *<li>an open is already in progress: this new open request will be ignored. This is important    *  because the Master can do multiple requests if it crashes.</li>    *<li>the region is already opened:  this new open request will be ignored.</li>    *</ul>    *<p>    * Bulk assign: If there are more than 1 region to open, it will be considered as a bulk assign.    * For a single region opening, errors are sent through a ServiceException. For bulk assign,    * errors are put in the response as FAILED_OPENING.    *</p>    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|OpenRegionResponse
name|openRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|OpenRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasServerStartCode
argument_list|()
condition|)
block|{
comment|// check that we are the same server that this RPC is intended for.
name|long
name|serverStartCode
init|=
name|request
operator|.
name|getServerStartCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|!=
name|serverStartCode
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"This RPC was intended for a "
operator|+
literal|"different server with startCode: "
operator|+
name|serverStartCode
operator|+
literal|", this server is: "
operator|+
name|regionServer
operator|.
name|serverName
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|OpenRegionResponse
operator|.
name|Builder
name|builder
init|=
name|OpenRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|regionCount
init|=
name|request
operator|.
name|getOpenInfoCount
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|HTableDescriptor
argument_list|>
name|htds
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HTableDescriptor
argument_list|>
argument_list|(
name|regionCount
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isBulkAssign
init|=
name|regionCount
operator|>
literal|1
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|regionCount
operator|==
literal|1
condition|)
block|{
name|RegionInfo
name|ri
init|=
name|request
operator|.
name|getOpenInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|ri
operator|!=
literal|null
condition|)
block|{
name|tableName
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|ri
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
comment|// We are assigning meta, wait a little for regionserver to finish initialization.
name|int
name|timeout
init|=
name|regionServer
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
operator|>>
literal|2
decl_stmt|;
comment|// Quarter of RPC timeout
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
synchronized|synchronized
init|(
name|regionServer
operator|.
name|online
init|)
block|{
try|try
block|{
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<=
name|endTime
operator|&&
operator|!
name|regionServer
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|regionServer
operator|.
name|isOnline
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|online
operator|.
name|wait
argument_list|(
name|regionServer
operator|.
name|msgInterval
argument_list|)
expr_stmt|;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|t
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|t
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|long
name|masterSystemTime
init|=
name|request
operator|.
name|hasMasterSystemTime
argument_list|()
condition|?
name|request
operator|.
name|getMasterSystemTime
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RegionOpenInfo
name|regionOpenInfo
range|:
name|request
operator|.
name|getOpenInfoList
argument_list|()
control|)
block|{
specifier|final
name|HRegionInfo
name|region
init|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionOpenInfo
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
decl_stmt|;
try|try
block|{
name|String
name|encodedName
init|=
name|region
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedNameBytes
init|=
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
specifier|final
name|Region
name|onlineRegion
init|=
name|regionServer
operator|.
name|getFromOnlineRegions
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlineRegion
operator|!=
literal|null
condition|)
block|{
comment|// The region is already online. This should not happen any more.
name|String
name|error
init|=
literal|"Received OPEN for the region:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", which is already online"
decl_stmt|;
name|regionServer
operator|.
name|abort
argument_list|(
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Open "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|htd
operator|=
name|htds
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|htd
operator|==
literal|null
condition|)
block|{
name|htd
operator|=
name|regionServer
operator|.
name|tableDescriptors
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|htds
operator|.
name|put
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Boolean
name|previous
init|=
name|regionServer
operator|.
name|regionsInTransitionInRS
operator|.
name|putIfAbsent
argument_list|(
name|encodedNameBytes
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|previous
argument_list|)
condition|)
block|{
if|if
condition|(
name|regionServer
operator|.
name|getFromOnlineRegions
argument_list|(
name|encodedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// There is a close in progress. This should not happen any more.
name|String
name|error
init|=
literal|"Received OPEN for the region:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", which we are already trying to CLOSE"
decl_stmt|;
name|regionServer
operator|.
name|abort
argument_list|(
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|regionServer
operator|.
name|regionsInTransitionInRS
operator|.
name|put
argument_list|(
name|encodedNameBytes
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|previous
argument_list|)
condition|)
block|{
comment|// An open is in progress. This is supported, but let's log this.
name|LOG
operator|.
name|info
argument_list|(
literal|"Receiving OPEN for the region:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", which we are already trying to OPEN"
operator|+
literal|" - ignoring this new request for this region."
argument_list|)
expr_stmt|;
block|}
comment|// We are opening this region. If it moves back and forth for whatever reason, we don't
comment|// want to keep returning the stale moved record while we are opening/if we close again.
name|regionServer
operator|.
name|removeFromMovedRegions
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
operator|!
name|previous
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|// check if the region to be opened is marked in recovering state in ZK
if|if
condition|(
name|ZKSplitLog
operator|.
name|isRegionMarkedRecoveringInZK
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Check if current region open is for distributedLogReplay. This check is to support
comment|// rolling restart/upgrade where we want to Master/RS see same configuration
if|if
condition|(
operator|!
name|regionOpenInfo
operator|.
name|hasOpenForDistributedLogReplay
argument_list|()
operator|||
name|regionOpenInfo
operator|.
name|getOpenForDistributedLogReplay
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|recoveringRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove stale recovery region from ZK when we open region not for recovering which
comment|// could happen when turn distributedLogReplay off from on.
name|List
argument_list|<
name|String
argument_list|>
name|tmpRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tmpRegions
operator|.
name|add
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|ZKSplitLog
operator|.
name|deleteRecoveringRegionZNodes
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|tmpRegions
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there is no action in progress, we can submit a specific handler.
comment|// Need to pass the expected version in the constructor.
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenMetaHandler
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|masterSystemTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionServer
operator|.
name|updateRegionFavoredNodesMapping
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|regionOpenInfo
operator|.
name|getFavoredNodesList
argument_list|()
argument_list|)
expr_stmt|;
name|regionServer
operator|.
name|service
operator|.
name|submit
argument_list|(
operator|new
name|OpenRegionHandler
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|,
name|region
argument_list|,
name|htd
argument_list|,
name|masterSystemTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|zooKeeperEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't retrieve recovering state from zookeeper"
argument_list|,
name|zooKeeperEx
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|zooKeeperEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed opening region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBulkAssign
condition|)
block|{
name|builder
operator|.
name|addOpeningState
argument_list|(
name|RegionOpeningState
operator|.
name|FAILED_OPENING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    *  Wamrmup a region on this server.    *    * This method should only be called by Master. It synchrnously opens the region and    * closes the region bringing the most important pages in cache.    *<p>    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|WarmupRegionResponse
name|warmupRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|WarmupRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|RegionInfo
name|regionInfo
init|=
name|request
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
specifier|final
name|HRegionInfo
name|region
init|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
decl_stmt|;
name|WarmupRegionResponse
name|response
init|=
name|WarmupRegionResponse
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|String
name|encodedName
init|=
name|region
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedNameBytes
init|=
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
specifier|final
name|Region
name|onlineRegion
init|=
name|regionServer
operator|.
name|getFromOnlineRegions
argument_list|(
name|encodedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlineRegion
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region already online. Skipping warming up "
operator|+
name|region
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Warming up Region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|htd
operator|=
name|regionServer
operator|.
name|tableDescriptors
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedNameBytes
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region is in transition. Skipping warmup "
operator|+
name|region
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
name|HRegion
operator|.
name|warmupHRegion
argument_list|(
name|region
argument_list|,
name|htd
argument_list|,
name|regionServer
operator|.
name|getWAL
argument_list|(
name|region
argument_list|)
argument_list|,
name|regionServer
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|regionServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed warming up region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * Replay the given changes when distributedLogReplay WAL edits from a failed RS. The guarantee is    * that the given mutations will be durable on the receiving RS if this method returns without any    * exception.    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|REPLAY_QOS
argument_list|)
specifier|public
name|ReplicateWALEntryResponse
name|replay
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ReplicateWALEntryRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|CellScanner
name|cells
init|=
operator|(
operator|(
name|PayloadCarryingRpcController
operator|)
name|controller
operator|)
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
name|request
operator|.
name|getEntryList
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty input
return|return
name|ReplicateWALEntryResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
name|ByteString
name|regionName
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|regionServer
operator|.
name|getRegionByEncodedName
argument_list|(
name|regionName
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
name|RegionCoprocessorHost
name|coprocessorHost
init|=
name|ServerRegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|?
name|region
operator|.
name|getCoprocessorHost
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// do not invoke coprocessors if this is a secondary region replica
name|List
argument_list|<
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
argument_list|>
name|walEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Skip adding the edits to WAL if this is a secondary region replica
name|boolean
name|isPrimary
init|=
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Durability
name|durability
init|=
name|isPrimary
condition|?
name|Durability
operator|.
name|USE_DEFAULT
else|:
name|Durability
operator|.
name|SKIP_WAL
decl_stmt|;
for|for
control|(
name|WALEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|regionName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Replay request contains entries from multiple "
operator|+
literal|"regions. First region:"
operator|+
name|regionName
operator|.
name|toStringUtf8
argument_list|()
operator|+
literal|" , other region:"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServer
operator|.
name|nonceManager
operator|!=
literal|null
operator|&&
name|isPrimary
condition|)
block|{
name|long
name|nonceGroup
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|long
name|nonce
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasNonce
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNonce
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|regionServer
operator|.
name|nonceManager
operator|.
name|reportOperationFromWal
argument_list|(
name|nonceGroup
argument_list|,
name|nonce
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getWriteTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
name|walEntry
init|=
operator|(
name|coprocessorHost
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WALSplitter
operator|.
name|MutationReplay
argument_list|>
name|edits
init|=
name|WALSplitter
operator|.
name|getMutationsFromWALEntry
argument_list|(
name|entry
argument_list|,
name|cells
argument_list|,
name|walEntry
argument_list|,
name|durability
argument_list|)
decl_stmt|;
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
comment|// Start coprocessor replay here. The coprocessor is for each WALEdit instead of a
comment|// KeyValue.
if|if
condition|(
name|coprocessorHost
operator|.
name|preWALRestore
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|walEntry
operator|.
name|getFirst
argument_list|()
argument_list|,
name|walEntry
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
comment|// if bypass this log entry, ignore it ...
continue|continue;
block|}
name|walEntries
operator|.
name|add
argument_list|(
name|walEntry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|edits
operator|!=
literal|null
operator|&&
operator|!
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|replaySeqId
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|hasOrigSequenceNumber
argument_list|()
operator|)
condition|?
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getOrigSequenceNumber
argument_list|()
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSequenceNumber
argument_list|()
decl_stmt|;
name|OperationStatus
index|[]
name|result
init|=
name|doReplayBatchOp
argument_list|(
name|region
argument_list|,
name|edits
argument_list|,
name|replaySeqId
argument_list|)
decl_stmt|;
comment|// check if it's a partial success
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|result
operator|!=
literal|null
operator|&&
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
index|[
name|i
index|]
operator|!=
name|OperationStatus
operator|.
name|SUCCESS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|result
index|[
name|i
index|]
operator|.
name|getExceptionMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|//sync wal at the end because ASYNC_WAL is used above
name|WAL
name|wal
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
block|{
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coprocessorHost
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|WALKey
argument_list|,
name|WALEdit
argument_list|>
name|entry
range|:
name|walEntries
control|)
block|{
name|coprocessorHost
operator|.
name|postWALRestore
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|entry
operator|.
name|getFirst
argument_list|()
argument_list|,
name|entry
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ReplicateWALEntryResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateReplay
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|WAL
name|getWAL
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getWAL
argument_list|()
return|;
block|}
comment|/**    * Replicate WAL entries on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|REPLICATION_QOS
argument_list|)
specifier|public
name|ReplicateWALEntryResponse
name|replicateWALEntry
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ReplicateWALEntryRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|replicationSinkHandler
operator|!=
literal|null
condition|)
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
name|request
operator|.
name|getEntryList
argument_list|()
decl_stmt|;
name|CellScanner
name|cellScanner
init|=
operator|(
operator|(
name|PayloadCarryingRpcController
operator|)
name|controller
operator|)
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
operator|.
name|preReplicateLogEntries
argument_list|(
name|entries
argument_list|,
name|cellScanner
argument_list|)
expr_stmt|;
name|regionServer
operator|.
name|replicationSinkHandler
operator|.
name|replicateLogEntries
argument_list|(
name|entries
argument_list|,
name|cellScanner
argument_list|,
name|request
operator|.
name|getReplicationClusterId
argument_list|()
argument_list|,
name|request
operator|.
name|getSourceBaseNamespaceDirPath
argument_list|()
argument_list|,
name|request
operator|.
name|getSourceHFileArchiveDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|regionServer
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
operator|.
name|postReplicateLogEntries
argument_list|(
name|entries
argument_list|,
name|cellScanner
argument_list|)
expr_stmt|;
return|return
name|ReplicateWALEntryResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Replication services are not initialized yet"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Roll the WAL writer of the region server.    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|RollWALWriterResponse
name|rollWALWriter
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|RollWALWriterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|regionServer
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
operator|.
name|preRollWALWriterRequest
argument_list|()
expr_stmt|;
name|regionServer
operator|.
name|walRoller
operator|.
name|requestRollAll
argument_list|()
expr_stmt|;
name|regionServer
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
operator|.
name|postRollWALWriterRequest
argument_list|()
expr_stmt|;
name|RollWALWriterResponse
operator|.
name|Builder
name|builder
init|=
name|RollWALWriterResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Split a region on the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|SplitRegionResponse
name|splitRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|SplitRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|.
name|startRegionOperation
argument_list|(
name|Operation
operator|.
name|SPLIT_REGION
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't split replicas directly. "
operator|+
literal|"Replicas are auto-split when their primary is split."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting "
operator|+
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|FlushResult
name|flushResult
init|=
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushResult
operator|.
name|isFlushSucceeded
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateFlushTime
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|splitPoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasSplitPoint
argument_list|()
condition|)
block|{
name|splitPoint
operator|=
name|request
operator|.
name|getSplitPoint
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|forceSplit
argument_list|(
name|splitPoint
argument_list|)
expr_stmt|;
name|regionServer
operator|.
name|compactSplitThread
operator|.
name|requestSplit
argument_list|(
name|region
argument_list|,
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|checkSplit
argument_list|()
argument_list|,
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SplitRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
name|regionServer
operator|.
name|abort
argument_list|(
literal|"Replay of WAL required. Forcing server shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Stop the region server.    *    * @param controller the RPC controller    * @param request the request    * @throws ServiceException    */
annotation|@
name|Override
annotation|@
name|QosPriority
argument_list|(
name|priority
operator|=
name|HConstants
operator|.
name|ADMIN_QOS
argument_list|)
specifier|public
name|StopServerResponse
name|stopServer
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|StopServerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|String
name|reason
init|=
name|request
operator|.
name|getReason
argument_list|()
decl_stmt|;
name|regionServer
operator|.
name|stop
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return
name|StopServerResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateFavoredNodesResponse
name|updateFavoredNodes
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UpdateFavoredNodesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|UpdateFavoredNodesRequest
operator|.
name|RegionUpdateInfo
argument_list|>
name|openInfoList
init|=
name|request
operator|.
name|getUpdateInfoList
argument_list|()
decl_stmt|;
name|UpdateFavoredNodesResponse
operator|.
name|Builder
name|respBuilder
init|=
name|UpdateFavoredNodesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateFavoredNodesRequest
operator|.
name|RegionUpdateInfo
name|regionUpdateInfo
range|:
name|openInfoList
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionUpdateInfo
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|regionServer
operator|.
name|updateRegionFavoredNodesMapping
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|regionUpdateInfo
operator|.
name|getFavoredNodesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|respBuilder
operator|.
name|setResponse
argument_list|(
name|openInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|respBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Atomically bulk load several HFiles into an open region    * @return true if successful, false is failed but recoverably (no action)    * @throws ServiceException if failed unrecoverably    */
annotation|@
name|Override
specifier|public
name|BulkLoadHFileResponse
name|bulkLoadHFile
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|BulkLoadHFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FamilyPath
name|familyPath
range|:
name|request
operator|.
name|getFamilyPathList
argument_list|()
control|)
block|{
name|familyPaths
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|familyPath
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|familyPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bypass
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preBulkLoadHFile
argument_list|(
name|familyPaths
argument_list|)
expr_stmt|;
block|}
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|bypass
condition|)
block|{
name|loaded
operator|=
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|familyPaths
argument_list|,
name|request
operator|.
name|getAssignSeqNum
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|loaded
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postBulkLoadHFile
argument_list|(
name|familyPaths
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
block|}
name|BulkLoadHFileResponse
operator|.
name|Builder
name|builder
init|=
name|BulkLoadHFileResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLoaded
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|result
init|=
name|execServiceOnRegion
argument_list|(
name|region
argument_list|,
name|request
operator|.
name|getCall
argument_list|()
argument_list|)
decl_stmt|;
name|CoprocessorServiceResponse
operator|.
name|Builder
name|builder
init|=
name|CoprocessorServiceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|builder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|result
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Message
name|execServiceOnRegion
parameter_list|(
name|Region
name|region
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|CoprocessorServiceCall
name|serviceCall
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ignore the passed in controller (from the serialized call)
name|ServerRpcController
name|execController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
return|return
name|region
operator|.
name|execService
argument_list|(
name|execController
argument_list|,
name|serviceCall
argument_list|)
return|;
block|}
comment|/**    * Get data from a table.    *    * @param controller the RPC controller    * @param request the get request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|GetRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|before
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|OperationQuota
name|quota
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|GetResponse
operator|.
name|Builder
name|builder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Get
name|get
init|=
name|request
operator|.
name|getGet
argument_list|()
decl_stmt|;
name|Boolean
name|existence
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|RpcCallContext
name|context
init|=
name|RpcServer
operator|.
name|getCurrentCall
argument_list|()
decl_stmt|;
name|quota
operator|=
name|getQuotaManager
argument_list|()
operator|.
name|checkQuota
argument_list|(
name|region
argument_list|,
name|OperationQuota
operator|.
name|OperationType
operator|.
name|GET
argument_list|)
expr_stmt|;
name|Get
name|clientGet
init|=
name|ProtobufUtil
operator|.
name|toGet
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|get
operator|.
name|getExistenceOnly
argument_list|()
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existence
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preExists
argument_list|(
name|clientGet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existence
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|get
argument_list|(
name|clientGet
argument_list|,
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for test purpose
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|clientGet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|boolean
name|exists
init|=
name|r
operator|.
name|getExists
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exists
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postExists
argument_list|(
name|clientGet
argument_list|,
name|exists
argument_list|)
expr_stmt|;
block|}
name|existence
operator|=
name|exists
expr_stmt|;
block|}
block|}
if|if
condition|(
name|existence
operator|!=
literal|null
condition|)
block|{
name|ClientProtos
operator|.
name|Result
name|pbr
init|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|existence
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
literal|0
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|pbr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|ClientProtos
operator|.
name|Result
name|pbr
init|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|pbr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|quota
operator|.
name|addGetResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateGet
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
name|quota
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Result
name|get
parameter_list|(
name|Get
name|get
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|RegionScannersCloseCallBack
name|closeCallBack
parameter_list|,
name|RpcCallContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|region
operator|.
name|prepareGet
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|stale
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
literal|0
decl_stmt|;
comment|// pre-get CP hook
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preGet
argument_list|(
name|get
argument_list|,
name|results
argument_list|)
condition|)
block|{
return|return
name|Result
operator|.
name|create
argument_list|(
name|results
argument_list|,
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|?
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
else|:
literal|null
argument_list|,
name|stale
argument_list|)
return|;
block|}
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|RegionScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|closeCallBack
operator|==
literal|null
condition|)
block|{
comment|// If there is a context then the scanner can be added to the current
comment|// RpcCallContext. The rpc callback will take care of closing the
comment|// scanner, for eg in case
comment|// of get()
assert|assert
name|scanner
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCallback
assert|;
name|context
operator|.
name|setCallBack
argument_list|(
operator|(
name|RegionScannerImpl
operator|)
name|scanner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The call is from multi() where the results from the get() are
comment|// aggregated and then send out to the
comment|// rpc. The rpccall back will close all such scanners created as part
comment|// of multi().
name|closeCallBack
operator|.
name|addScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// post-get CP hook
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postGet
argument_list|(
name|get
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|metricsUpdateForGet
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|results
argument_list|,
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|?
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
else|:
literal|null
argument_list|,
name|stale
argument_list|)
return|;
block|}
comment|/**    * Execute multiple actions on a table: get, mutate, and/or execCoprocessor    *    * @param rpcc the RPC controller    * @param request the multi request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|MultiResponse
name|multi
parameter_list|(
specifier|final
name|RpcController
name|rpcc
parameter_list|,
specifier|final
name|MultiRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
comment|// rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.
comment|// It is also the conduit via which we pass back data.
name|PayloadCarryingRpcController
name|controller
init|=
operator|(
name|PayloadCarryingRpcController
operator|)
name|rpcc
decl_stmt|;
name|CellScanner
name|cellScanner
init|=
name|controller
operator|!=
literal|null
condition|?
name|controller
operator|.
name|cellScanner
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
name|controller
operator|.
name|setCellScanner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|long
name|nonceGroup
init|=
name|request
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|request
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
comment|// this will contain all the cells that we need to return. It's created later, if needed.
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cellsToReturn
init|=
literal|null
decl_stmt|;
name|MultiResponse
operator|.
name|Builder
name|responseBuilder
init|=
name|MultiResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|RegionActionResult
operator|.
name|Builder
name|regionActionResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Boolean
name|processed
init|=
literal|null
decl_stmt|;
name|RegionScannersCloseCallBack
name|closeCallBack
init|=
literal|null
decl_stmt|;
name|RpcCallContext
name|context
init|=
name|RpcServer
operator|.
name|getCurrentCall
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionAction
name|regionAction
range|:
name|request
operator|.
name|getRegionActionList
argument_list|()
control|)
block|{
name|this
operator|.
name|requestCount
operator|.
name|add
argument_list|(
name|regionAction
operator|.
name|getActionCount
argument_list|()
argument_list|)
expr_stmt|;
name|OperationQuota
name|quota
decl_stmt|;
name|Region
name|region
decl_stmt|;
name|regionActionResultBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|region
operator|=
name|getRegion
argument_list|(
name|regionAction
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|quota
operator|=
name|getQuotaManager
argument_list|()
operator|.
name|checkQuota
argument_list|(
name|region
argument_list|,
name|regionAction
operator|.
name|getActionList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rpcServer
operator|.
name|getMetrics
argument_list|()
operator|.
name|exception
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|regionActionResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|responseBuilder
operator|.
name|addRegionActionResult
argument_list|(
name|regionActionResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
comment|// For this region it's a failure.
block|}
if|if
condition|(
name|regionAction
operator|.
name|hasAtomic
argument_list|()
operator|&&
name|regionAction
operator|.
name|getAtomic
argument_list|()
condition|)
block|{
comment|// How does this call happen?  It may need some work to play well w/ the surroundings.
comment|// Need to return an item per Action along w/ Action index.  TODO.
try|try
block|{
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayComparable
name|comparator
init|=
name|ProtobufUtil
operator|.
name|toComparator
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|processed
operator|=
name|checkAndRowMutate
argument_list|(
name|region
argument_list|,
name|regionAction
operator|.
name|getActionList
argument_list|()
argument_list|,
name|cellScanner
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClientProtos
operator|.
name|RegionLoadStats
name|stats
init|=
name|mutateRows
argument_list|(
name|region
argument_list|,
name|regionAction
operator|.
name|getActionList
argument_list|()
argument_list|,
name|cellScanner
argument_list|)
decl_stmt|;
comment|// add the stats to the request
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|responseBuilder
operator|.
name|addRegionActionResult
argument_list|(
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
operator|.
name|addResultOrException
argument_list|(
name|ResultOrException
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLoadStats
argument_list|(
name|stats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rpcServer
operator|.
name|getMetrics
argument_list|()
operator|.
name|exception
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// As it's atomic, we may expect it's a global failure.
name|regionActionResultBuilder
operator|.
name|setException
argument_list|(
name|ResponseConverter
operator|.
name|buildException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// doNonAtomicRegionMutation manages the exception internally
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|closeCallBack
operator|==
literal|null
condition|)
block|{
comment|// An RpcCallBack that creates a list of scanners that needs to perform callBack
comment|// operation on completion of multiGets.
comment|// Set this only once
name|closeCallBack
operator|=
operator|new
name|RegionScannersCloseCallBack
argument_list|()
expr_stmt|;
name|context
operator|.
name|setCallBack
argument_list|(
name|closeCallBack
argument_list|)
expr_stmt|;
block|}
name|cellsToReturn
operator|=
name|doNonAtomicRegionMutation
argument_list|(
name|region
argument_list|,
name|quota
argument_list|,
name|regionAction
argument_list|,
name|cellScanner
argument_list|,
name|regionActionResultBuilder
argument_list|,
name|cellsToReturn
argument_list|,
name|nonceGroup
argument_list|,
name|closeCallBack
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|responseBuilder
operator|.
name|addRegionActionResult
argument_list|(
name|regionActionResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|quota
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Load the controller with the Cells to return.
if|if
condition|(
name|cellsToReturn
operator|!=
literal|null
operator|&&
operator|!
name|cellsToReturn
operator|.
name|isEmpty
argument_list|()
operator|&&
name|controller
operator|!=
literal|null
condition|)
block|{
name|controller
operator|.
name|setCellScanner
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cellsToReturn
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
name|responseBuilder
operator|.
name|setProcessed
argument_list|(
name|processed
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Mutate data in a table.    *    * @param rpcc the RPC controller    * @param request the mutate request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|MutateResponse
name|mutate
parameter_list|(
specifier|final
name|RpcController
name|rpcc
parameter_list|,
specifier|final
name|MutateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// rpc controller is how we bring in data via the back door;  it is unprotobuf'ed data.
comment|// It is also the conduit via which we pass back data.
name|PayloadCarryingRpcController
name|controller
init|=
operator|(
name|PayloadCarryingRpcController
operator|)
name|rpcc
decl_stmt|;
name|CellScanner
name|cellScanner
init|=
name|controller
operator|!=
literal|null
condition|?
name|controller
operator|.
name|cellScanner
argument_list|()
else|:
literal|null
decl_stmt|;
name|OperationQuota
name|quota
init|=
literal|null
decl_stmt|;
comment|// Clear scanner so we are not holding on to reference across call.
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
name|controller
operator|.
name|setCellScanner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
operator|.
name|Builder
name|builder
init|=
name|MutateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|MutationProto
name|mutation
init|=
name|request
operator|.
name|getMutation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|regionServer
operator|.
name|cacheFlusher
operator|.
name|reclaimMemStoreMemory
argument_list|()
expr_stmt|;
block|}
name|long
name|nonceGroup
init|=
name|request
operator|.
name|hasNonceGroup
argument_list|()
condition|?
name|request
operator|.
name|getNonceGroup
argument_list|()
else|:
name|HConstants
operator|.
name|NO_NONCE
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|Boolean
name|processed
init|=
literal|null
decl_stmt|;
name|MutationType
name|type
init|=
name|mutation
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
name|quota
operator|=
name|getQuotaManager
argument_list|()
operator|.
name|checkQuota
argument_list|(
name|region
argument_list|,
name|OperationQuota
operator|.
name|OperationType
operator|.
name|MUTATE
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|APPEND
case|:
comment|// TODO: this doesn't actually check anything.
name|r
operator|=
name|append
argument_list|(
name|region
argument_list|,
name|quota
argument_list|,
name|mutation
argument_list|,
name|cellScanner
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
comment|// TODO: this doesn't actually check anything.
name|r
operator|=
name|increment
argument_list|(
name|region
argument_list|,
name|quota
argument_list|,
name|mutation
argument_list|,
name|cellScanner
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|Put
name|put
init|=
name|ProtobufUtil
operator|.
name|toPut
argument_list|(
name|mutation
argument_list|,
name|cellScanner
argument_list|)
decl_stmt|;
name|quota
operator|.
name|addMutation
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayComparable
name|comparator
init|=
name|ProtobufUtil
operator|.
name|toComparator
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndPut
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|put
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|result
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
name|Delete
name|delete
init|=
name|ProtobufUtil
operator|.
name|toDelete
argument_list|(
name|mutation
argument_list|,
name|cellScanner
argument_list|)
decl_stmt|;
name|quota
operator|.
name|addMutation
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCondition
argument_list|()
condition|)
block|{
name|Condition
name|condition
init|=
name|request
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|condition
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|condition
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|condition
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CompareOp
name|compareOp
init|=
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getCompareType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayComparable
name|comparator
init|=
name|ProtobufUtil
operator|.
name|toComparator
argument_list|(
name|condition
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processed
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processed
operator|==
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postCheckAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|compareOp
argument_list|,
name|comparator
argument_list|,
name|delete
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|processed
operator|=
name|result
expr_stmt|;
block|}
block|}
else|else
block|{
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|processed
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported mutate type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProcessed
argument_list|(
name|processed
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addResult
argument_list|(
name|builder
argument_list|,
name|r
argument_list|,
name|controller
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|regionServer
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
name|quota
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Scan data in a table.    *    * @param controller the RPC controller    * @param request the scan request    * @throws ServiceException    */
annotation|@
name|Override
specifier|public
name|ScanResponse
name|scan
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|OperationQuota
name|quota
init|=
literal|null
decl_stmt|;
name|Leases
operator|.
name|Lease
name|lease
init|=
literal|null
decl_stmt|;
name|String
name|scannerName
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasScannerId
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasScan
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required input: scannerId or scan"
argument_list|)
throw|;
block|}
name|long
name|scannerId
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|scannerId
operator|=
name|request
operator|.
name|getScannerId
argument_list|()
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If checkOpen failed, server not running or filesystem gone,
comment|// cancel this lease; filesystem is gone or we're closing or something.
if|if
condition|(
name|scannerName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server shutting down and client tried to access missing scanner "
operator|+
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|leases
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|regionServer
operator|.
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|le
parameter_list|)
block|{
comment|// No problem, ignore
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Un-able to cancel lease of scanner. It could already be closed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
throw|throw
name|e
throw|;
block|}
name|requestCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|int
name|ttl
init|=
literal|0
decl_stmt|;
name|Region
name|region
init|=
literal|null
decl_stmt|;
name|RegionScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|RegionScannerHolder
name|rsh
init|=
literal|null
decl_stmt|;
name|boolean
name|moreResults
init|=
literal|true
decl_stmt|;
name|boolean
name|closeScanner
init|=
literal|false
decl_stmt|;
name|boolean
name|isSmallScan
init|=
literal|false
decl_stmt|;
name|RegionScanner
name|actualRegionScanner
init|=
literal|null
decl_stmt|;
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCloseScanner
argument_list|()
condition|)
block|{
name|closeScanner
operator|=
name|request
operator|.
name|getCloseScanner
argument_list|()
expr_stmt|;
block|}
name|int
name|rows
init|=
name|closeScanner
condition|?
literal|0
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasNumberOfRows
argument_list|()
condition|)
block|{
name|rows
operator|=
name|request
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|)
block|{
name|rsh
operator|=
name|scanners
operator|.
name|get
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsh
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client tried to access missing scanner "
operator|+
name|scannerName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnknownScannerException
argument_list|(
literal|"Name: "
operator|+
name|scannerName
operator|+
literal|", already closed?"
argument_list|)
throw|;
block|}
name|scanner
operator|=
name|rsh
operator|.
name|s
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|scanner
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|=
name|regionServer
operator|.
name|getRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|!=
name|rsh
operator|.
name|r
condition|)
block|{
comment|// Yes, should be the same instance
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Region was re-opened after the scanner"
operator|+
name|scannerName
operator|+
literal|" was created: "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|region
operator|=
name|getRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
name|ClientProtos
operator|.
name|Scan
name|protoScan
init|=
name|request
operator|.
name|getScan
argument_list|()
decl_stmt|;
name|boolean
name|isLoadingCfsOnDemandSet
init|=
name|protoScan
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|protoScan
argument_list|)
decl_stmt|;
comment|// if the request doesn't set this, get the default region setting.
if|if
condition|(
operator|!
name|isLoadingCfsOnDemandSet
condition|)
block|{
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|region
operator|.
name|isLoadingCfsOnDemandDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|isSmallScan
operator|=
name|scan
operator|.
name|isSmall
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
comment|// Adding all families to scanner
for|for
control|(
name|byte
index|[]
name|family
range|:
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerOpen
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|actualRegionScanner
operator|=
name|scanner
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerOpen
argument_list|(
name|scan
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualRegionScanner
operator|!=
name|scanner
condition|)
block|{
comment|// It means the RegionScanner has been wrapped
if|if
condition|(
name|actualRegionScanner
operator|instanceof
name|RegionScannerImpl
condition|)
block|{
comment|// Copy the results when nextRaw is called from the CP so that
comment|// CP can have a cloned version of the results without bothering
comment|// about the eviction. Ugly, yes!!!
operator|(
operator|(
name|RegionScannerImpl
operator|)
name|actualRegionScanner
operator|)
operator|.
name|setCopyCellsFromSharedMem
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|scannerId
operator|=
name|this
operator|.
name|scannerIdGen
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|scannerName
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|rsh
operator|=
name|addScanner
argument_list|(
name|scannerName
argument_list|,
name|scanner
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|this
operator|.
name|scannerLeaseTimeoutPeriod
expr_stmt|;
block|}
assert|assert
name|scanner
operator|!=
literal|null
assert|;
name|RpcCallContext
name|context
init|=
name|RpcServer
operator|.
name|getCurrentCall
argument_list|()
decl_stmt|;
name|quota
operator|=
name|getQuotaManager
argument_list|()
operator|.
name|checkQuota
argument_list|(
name|region
argument_list|,
name|OperationQuota
operator|.
name|OperationType
operator|.
name|SCAN
argument_list|)
expr_stmt|;
name|long
name|maxQuotaResultSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxScannerResultSize
argument_list|,
name|quota
operator|.
name|getReadAvailable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
block|{
comment|// if nextCallSeq does not match throw Exception straight away. This needs to be
comment|// performed even before checking of Lease.
comment|// See HBASE-5974
if|if
condition|(
name|request
operator|.
name|hasNextCallSeq
argument_list|()
condition|)
block|{
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getNextCallSeq
argument_list|()
operator|!=
name|rsh
operator|.
name|getNextCallSeq
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OutOfOrderScannerNextException
argument_list|(
literal|"Expected nextCallSeq: "
operator|+
name|rsh
operator|.
name|getNextCallSeq
argument_list|()
operator|+
literal|" But the nextCallSeq got from client: "
operator|+
name|request
operator|.
name|getNextCallSeq
argument_list|()
operator|+
literal|"; request="
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|request
argument_list|)
argument_list|)
throw|;
block|}
comment|// Increment the nextCallSeq value which is the next expected from client.
name|rsh
operator|.
name|incNextCallSeq
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Remove lease while its being processed in server; protects against case
comment|// where processing of request takes> lease expiration time.
name|lease
operator|=
name|regionServer
operator|.
name|leases
operator|.
name|removeLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|totalCellSize
init|=
literal|0
decl_stmt|;
name|long
name|currentScanResultSize
init|=
literal|0
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// Call coprocessor. Get region info from scanner.
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|bypass
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|totalCellSize
operator|+=
name|CellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|currentScanResultSize
operator|+=
name|CellUtil
operator|.
name|estimatedHeapSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bypass
operator|!=
literal|null
operator|&&
name|bypass
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|long
name|maxResultSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|scanner
operator|.
name|getMaxResultSize
argument_list|()
argument_list|,
name|maxQuotaResultSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxResultSize
operator|<=
literal|0
condition|)
block|{
name|maxResultSize
operator|=
name|maxQuotaResultSize
expr_stmt|;
block|}
comment|// This is cells inside a row. Default size is 10 so if many versions or many cfs,
comment|// then we'll resize. Resizings show in profiler. Set it higher than 10. For now
comment|// arbitrary 32. TODO: keep record of general size of results being returned.
name|List
argument_list|<
name|Cell
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|region
operator|.
name|startRegionOperation
argument_list|(
name|Operation
operator|.
name|SCAN
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|scanner
init|)
block|{
name|boolean
name|stale
init|=
operator|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
literal|0
operator|)
decl_stmt|;
name|boolean
name|clientHandlesPartials
init|=
name|request
operator|.
name|hasClientHandlesPartials
argument_list|()
operator|&&
name|request
operator|.
name|getClientHandlesPartials
argument_list|()
decl_stmt|;
name|boolean
name|clientHandlesHeartbeats
init|=
name|request
operator|.
name|hasClientHandlesHeartbeats
argument_list|()
operator|&&
name|request
operator|.
name|getClientHandlesHeartbeats
argument_list|()
decl_stmt|;
comment|// On the server side we must ensure that the correct ordering of partial results is
comment|// returned to the client to allow them to properly reconstruct the partial results.
comment|// If the coprocessor host is adding to the result list, we cannot guarantee the
comment|// correct ordering of partial results and so we prevent partial results from being
comment|// formed.
name|boolean
name|serverGuaranteesOrderOfPartials
init|=
name|currentScanResultSize
operator|==
literal|0
decl_stmt|;
name|boolean
name|allowPartialResults
init|=
name|clientHandlesPartials
operator|&&
name|serverGuaranteesOrderOfPartials
operator|&&
operator|!
name|isSmallScan
decl_stmt|;
name|boolean
name|moreRows
init|=
literal|false
decl_stmt|;
comment|// Heartbeat messages occur when the processing of the ScanRequest is exceeds a
comment|// certain time threshold on the server. When the time threshold is exceeded, the
comment|// server stops the scan and sends back whatever Results it has accumulated within
comment|// that time period (may be empty). Since heartbeat messages have the potential to
comment|// create partial Results (in the event that the timeout occurs in the middle of a
comment|// row), we must only generate heartbeat messages when the client can handle both
comment|// heartbeats AND partials
name|boolean
name|allowHeartbeatMessages
init|=
name|clientHandlesHeartbeats
operator|&&
name|allowPartialResults
decl_stmt|;
comment|// Default value of timeLimit is negative to indicate no timeLimit should be
comment|// enforced.
name|long
name|timeLimit
init|=
operator|-
literal|1
decl_stmt|;
comment|// Set the time limit to be half of the more restrictive timeout value (one of the
comment|// timeout values must be positive). In the event that both values are positive, the
comment|// more restrictive of the two is used to calculate the limit.
if|if
condition|(
name|allowHeartbeatMessages
operator|&&
operator|(
name|scannerLeaseTimeoutPeriod
operator|>
literal|0
operator|||
name|rpcTimeout
operator|>
literal|0
operator|)
condition|)
block|{
name|long
name|timeLimitDelta
decl_stmt|;
if|if
condition|(
name|scannerLeaseTimeoutPeriod
operator|>
literal|0
operator|&&
name|rpcTimeout
operator|>
literal|0
condition|)
block|{
name|timeLimitDelta
operator|=
name|Math
operator|.
name|min
argument_list|(
name|scannerLeaseTimeoutPeriod
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeLimitDelta
operator|=
name|scannerLeaseTimeoutPeriod
operator|>
literal|0
condition|?
name|scannerLeaseTimeoutPeriod
else|:
name|rpcTimeout
expr_stmt|;
block|}
comment|// Use half of whichever timeout value was more restrictive... But don't allow
comment|// the time limit to be less than the allowable minimum (could cause an
comment|// immediatate timeout before scanning any data).
name|timeLimitDelta
operator|=
name|Math
operator|.
name|max
argument_list|(
name|timeLimitDelta
operator|/
literal|2
argument_list|,
name|minimumScanTimeLimitDelta
argument_list|)
expr_stmt|;
name|timeLimit
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeLimitDelta
expr_stmt|;
block|}
specifier|final
name|LimitScope
name|sizeScope
init|=
name|allowPartialResults
condition|?
name|LimitScope
operator|.
name|BETWEEN_CELLS
else|:
name|LimitScope
operator|.
name|BETWEEN_ROWS
decl_stmt|;
specifier|final
name|LimitScope
name|timeScope
init|=
name|allowHeartbeatMessages
condition|?
name|LimitScope
operator|.
name|BETWEEN_CELLS
else|:
name|LimitScope
operator|.
name|BETWEEN_ROWS
decl_stmt|;
name|boolean
name|trackMetrics
init|=
name|request
operator|.
name|hasTrackScanMetrics
argument_list|()
operator|&&
name|request
operator|.
name|getTrackScanMetrics
argument_list|()
decl_stmt|;
comment|// Configure with limits for this RPC. Set keep progress true since size progress
comment|// towards size limit should be kept between calls to nextRaw
name|ScannerContext
operator|.
name|Builder
name|contextBuilder
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|contextBuilder
operator|.
name|setSizeLimit
argument_list|(
name|sizeScope
argument_list|,
name|maxResultSize
argument_list|)
expr_stmt|;
name|contextBuilder
operator|.
name|setBatchLimit
argument_list|(
name|scanner
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
name|contextBuilder
operator|.
name|setTimeLimit
argument_list|(
name|timeScope
argument_list|,
name|timeLimit
argument_list|)
expr_stmt|;
name|contextBuilder
operator|.
name|setTrackMetrics
argument_list|(
name|trackMetrics
argument_list|)
expr_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|contextBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|limitReached
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|rows
condition|)
block|{
comment|// Reset the batch progress to 0 before every call to RegionScanner#nextRaw. The
comment|// batch limit is a limit on the number of cells per Result. Thus, if progress is
comment|// being tracked (i.e. scannerContext.keepProgress() is true) then we need to
comment|// reset the batch progress between nextRaw invocations since we don't want the
comment|// batch progress from previous calls to affect future calls
name|scannerContext
operator|.
name|setBatchProgress
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Collect values to be returned here
name|moreRows
operator|=
name|scanner
operator|.
name|nextRaw
argument_list|(
name|values
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|values
control|)
block|{
name|totalCellSize
operator|+=
name|CellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|partial
init|=
name|scannerContext
operator|.
name|partialResultFormed
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|values
argument_list|,
literal|null
argument_list|,
name|stale
argument_list|,
name|partial
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|boolean
name|sizeLimitReached
init|=
name|scannerContext
operator|.
name|checkSizeLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_ROWS
argument_list|)
decl_stmt|;
name|boolean
name|timeLimitReached
init|=
name|scannerContext
operator|.
name|checkTimeLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_ROWS
argument_list|)
decl_stmt|;
name|boolean
name|rowLimitReached
init|=
name|i
operator|>=
name|rows
decl_stmt|;
name|limitReached
operator|=
name|sizeLimitReached
operator|||
name|timeLimitReached
operator|||
name|rowLimitReached
expr_stmt|;
if|if
condition|(
name|limitReached
operator|||
operator|!
name|moreRows
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Done scanning. limitReached: "
operator|+
name|limitReached
operator|+
literal|" moreRows: "
operator|+
name|moreRows
operator|+
literal|" scannerContext: "
operator|+
name|scannerContext
argument_list|)
expr_stmt|;
block|}
comment|// We only want to mark a ScanResponse as a heartbeat message in the event that
comment|// there are more values to be read server side. If there aren't more values,
comment|// marking it as a heartbeat is wasteful because the client will need to issue
comment|// another ScanRequest only to realize that they already have all the values
if|if
condition|(
name|moreRows
condition|)
block|{
comment|// Heartbeat messages occur when the time limit has been reached.
name|builder
operator|.
name|setHeartbeatMessage
argument_list|(
name|timeLimitReached
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|limitReached
operator|||
name|moreRows
condition|)
block|{
comment|// We stopped prematurely
name|builder
operator|.
name|setMoreResultsInRegion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We didn't get a single batch
name|builder
operator|.
name|setMoreResultsInRegion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Check to see if the client requested that we track metrics server side. If the
comment|// client requested metrics, retrieve the metrics from the scanner context.
if|if
condition|(
name|trackMetrics
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metrics
init|=
name|scannerContext
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMetricsMap
argument_list|()
decl_stmt|;
name|ScanMetrics
operator|.
name|Builder
name|metricBuilder
init|=
name|ScanMetrics
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|NameInt64Pair
operator|.
name|Builder
name|pairBuilder
init|=
name|NameInt64Pair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|pairBuilder
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|pairBuilder
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|metricBuilder
operator|.
name|addMetrics
argument_list|(
name|pairBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setScanMetrics
argument_list|(
name|metricBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|updateReadRequestsCount
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|region
operator|.
name|getMetrics
argument_list|()
operator|.
name|updateScanNext
argument_list|(
name|totalCellSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionServer
operator|.
name|metricsRegionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|metricsRegionServer
operator|.
name|updateScannerNext
argument_list|(
name|totalCellSize
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|region
operator|.
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
comment|// coprocessor postNext hook
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|rows
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|quota
operator|.
name|addScanResult
argument_list|(
name|results
argument_list|)
expr_stmt|;
comment|// If the scanner's filter - if any - is done with the scan
comment|// and wants to tell the client to stop the scan. This is done by passing
comment|// a null result, and setting moreResults to false.
if|if
condition|(
name|scanner
operator|.
name|isFilterDone
argument_list|()
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moreResults
operator|=
literal|false
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|addResults
argument_list|(
name|builder
argument_list|,
name|results
argument_list|,
name|controller
argument_list|,
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|,
name|isClientCellBlockSupport
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// if we have an exception on scanner next and we are using the callSeq
comment|// we should rollback because the client will retry with the same callSeq
comment|// and get an OutOfOrderScannerNextException if we don't do so.
if|if
condition|(
name|rsh
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasNextCallSeq
argument_list|()
condition|)
block|{
name|rsh
operator|.
name|rollbackNextCallSeq
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setCallBack
argument_list|(
name|rsh
operator|.
name|shippedCallback
argument_list|)
expr_stmt|;
block|}
comment|// Adding resets expiration time on lease.
if|if
condition|(
name|scanners
operator|.
name|containsKey
argument_list|(
name|scannerName
argument_list|)
condition|)
block|{
name|ttl
operator|=
name|this
operator|.
name|scannerLeaseTimeoutPeriod
expr_stmt|;
comment|// When context != null, adding back the lease will be done in callback set above.
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lease
operator|!=
literal|null
condition|)
name|regionServer
operator|.
name|leases
operator|.
name|addLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|moreResults
operator|||
name|closeScanner
condition|)
block|{
name|ttl
operator|=
literal|0
expr_stmt|;
name|moreResults
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|scanner
argument_list|)
condition|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
comment|// bypass
block|}
block|}
name|rsh
operator|=
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setCallBack
argument_list|(
name|rsh
operator|.
name|closeCallBack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsh
operator|.
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|regionServer
operator|.
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|le
parameter_list|)
block|{
comment|// No problem, ignore
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Un-able to cancel lease of scanner. It could already be closed."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ttl
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setTtl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setScannerId
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMoreResults
argument_list|(
name|moreResults
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|scannerName
operator|!=
literal|null
operator|&&
name|ie
operator|instanceof
name|NotServingRegionException
condition|)
block|{
name|RegionScannerHolder
name|rsh
init|=
name|scanners
operator|.
name|remove
argument_list|(
name|scannerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsh
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|RegionScanner
name|scanner
init|=
name|rsh
operator|.
name|s
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|scannerName
operator|+
literal|" encountered "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
operator|+
literal|", closing ..."
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|regionServer
operator|.
name|leases
operator|.
name|cancelLease
argument_list|(
name|scannerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Getting exception closing "
operator|+
name|scannerName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
name|quota
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorServiceResponse
name|execRegionServerService
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|regionServer
operator|.
name|execRegionServerService
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateConfigurationResponse
name|updateConfiguration
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UpdateConfigurationRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|this
operator|.
name|regionServer
operator|.
name|updateConfiguration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|UpdateConfigurationResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
block|}
end_class

end_unit

