begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_START_ROW
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_comment
comment|/**  * Query matcher for compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|CompactionScanQueryMatcher
extends|extends
name|ScanQueryMatcher
block|{
comment|/** readPoint over which the KVs are unconditionally included */
specifier|protected
specifier|final
name|long
name|maxReadPointToTrackVersions
decl_stmt|;
comment|/** Keeps track of deletes */
specifier|protected
specifier|final
name|DeleteTracker
name|deletes
decl_stmt|;
comment|/** whether to return deleted rows */
specifier|protected
specifier|final
name|KeepDeletedCells
name|keepDeletedCells
decl_stmt|;
specifier|protected
name|CompactionScanQueryMatcher
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|DeleteTracker
name|deletes
parameter_list|,
name|long
name|readPointToUse
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|,
name|long
name|now
parameter_list|)
block|{
name|super
argument_list|(
name|createStartKeyFromRow
argument_list|(
name|EMPTY_START_ROW
argument_list|,
name|scanInfo
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
operator|new
name|ScanWildcardColumnTracker
argument_list|(
name|scanInfo
operator|.
name|getMinVersions
argument_list|()
argument_list|,
name|scanInfo
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|oldestUnexpiredTS
argument_list|)
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxReadPointToTrackVersions
operator|=
name|readPointToUse
expr_stmt|;
name|this
operator|.
name|deletes
operator|=
name|deletes
expr_stmt|;
name|this
operator|.
name|keepDeletedCells
operator|=
name|scanInfo
operator|.
name|getKeepDeletedCells
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeShipped
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
name|deletes
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNullColumnInQuery
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUserScan
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moreRowsMayExistAfter
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
name|getFilter
parameter_list|()
block|{
comment|// no filter when compaction
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextKeyHint
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no filter, so no key hint.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|deletes
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|trackDelete
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
comment|// If keepDeletedCells is true, then we only remove cells by versions or TTL during
comment|// compaction, so we do not need to track delete here.
comment|// If keepDeletedCells is TTL and the delete marker is expired, then we can make sure that the
comment|// minVerions is larger than 0(otherwise we will just return at preCheck). So here we still
comment|// need to track the delete marker to see if it masks some cells.
if|if
condition|(
name|keepDeletedCells
operator|==
name|KeepDeletedCells
operator|.
name|FALSE
operator|||
operator|(
name|keepDeletedCells
operator|==
name|KeepDeletedCells
operator|.
name|TTL
operator|&&
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|<
name|oldestUnexpiredTS
operator|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|CompactionScanQueryMatcher
name|create
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|readPointToUse
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|,
name|long
name|now
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|,
name|RegionCoprocessorHost
name|regionCoprocessorHost
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteTracker
name|deleteTracker
init|=
name|instantiateDeleteTracker
argument_list|(
name|regionCoprocessorHost
argument_list|)
decl_stmt|;
if|if
condition|(
name|dropDeletesFromRow
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|scanType
operator|==
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
condition|)
block|{
return|return
operator|new
name|MinorCompactionScanQueryMatcher
argument_list|(
name|scanInfo
argument_list|,
name|deleteTracker
argument_list|,
name|readPointToUse
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MajorCompactionScanQueryMatcher
argument_list|(
name|scanInfo
argument_list|,
name|deleteTracker
argument_list|,
name|readPointToUse
argument_list|,
name|earliestPutTs
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|StripeCompactionScanQueryMatcher
argument_list|(
name|scanInfo
argument_list|,
name|deleteTracker
argument_list|,
name|readPointToUse
argument_list|,
name|earliestPutTs
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
name|dropDeletesFromRow
argument_list|,
name|dropDeletesToRow
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

