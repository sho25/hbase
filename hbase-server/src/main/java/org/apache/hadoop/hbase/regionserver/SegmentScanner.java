begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_comment
comment|/**  * An abstraction for store segment scanner.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|SegmentScanner
implements|implements
name|KeyValueScanner
block|{
specifier|private
name|long
name|sequenceID
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|protected
specifier|abstract
name|Segment
name|getSegment
parameter_list|()
function_decl|;
comment|/**    * Get the sequence id associated with this KeyValueScanner. This is required    * for comparing multiple files (or memstore segments) scanners to find out    * which one has the latest data.    *    */
annotation|@
name|Override
specifier|public
name|long
name|getSequenceID
parameter_list|()
block|{
return|return
name|sequenceID
return|;
block|}
comment|/**    * Close the KeyValue scanner.    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|getSegment
argument_list|()
operator|.
name|decScannerCount
argument_list|()
expr_stmt|;
block|}
comment|/**    * This functionality should be resolved in the higher level which is    * MemStoreScanner, currently returns true as default. Doesn't throw    * IllegalStateException in order not to change the signature of the    * overridden method    */
annotation|@
name|Override
specifier|public
name|boolean
name|shouldUseScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|Store
name|store
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**    * This scanner is working solely on the in-memory MemStore therefore this    * interface is not relevant.    */
annotation|@
name|Override
specifier|public
name|boolean
name|requestSeek
parameter_list|(
name|Cell
name|c
parameter_list|,
name|boolean
name|forward
parameter_list|,
name|boolean
name|useBloom
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"requestSeek cannot be called on MutableCellSetSegmentScanner"
argument_list|)
throw|;
block|}
comment|/**    * This scanner is working solely on the in-memory MemStore and doesn't work on    * store files, MutableCellSetSegmentScanner always does the seek,    * therefore always returning true.    */
annotation|@
name|Override
specifier|public
name|boolean
name|realSeekDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * This function should be never called on scanners that always do real seek operations (i.e. most    * of the scanners and also this one). The easiest way to achieve this is to call    * {@link #realSeekDone()} first.    */
annotation|@
name|Override
specifier|public
name|void
name|enforceSeek
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"enforceSeek cannot be called on MutableCellSetSegmentScanner"
argument_list|)
throw|;
block|}
comment|/**    * @return true if this is a file scanner. Otherwise a memory scanner is assumed.    */
annotation|@
name|Override
specifier|public
name|boolean
name|isFileScanner
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * @return the next key in the index (the key to seek to the next block)    *     if known, or null otherwise    *     Not relevant for in-memory scanner    */
annotation|@
name|Override
specifier|public
name|Cell
name|getNextIndexedKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Called after a batch of rows scanned (RPC) and set to be returned to client. Any in between    * cleanup can be done here. Nothing to be done for MutableCellSetSegmentScanner.    */
annotation|@
name|Override
specifier|public
name|void
name|shipped
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
comment|/**    * Set the sequence id of the scanner.    * This is used to determine an order between memory segment scanners.    * @param x a unique sequence id    */
specifier|public
name|void
name|setSequenceID
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|sequenceID
operator|=
name|x
expr_stmt|;
block|}
comment|/**    * Returns whether the given scan should seek in this segment    * @return whether the given scan should seek in this segment    */
specifier|public
name|boolean
name|shouldSeek
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|long
name|oldestUnexpiredTS
parameter_list|)
block|{
return|return
name|getSegment
argument_list|()
operator|.
name|shouldSeek
argument_list|(
name|scan
argument_list|,
name|oldestUnexpiredTS
argument_list|)
return|;
block|}
comment|//debug method
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
literal|"Store segment scanner of type "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
decl_stmt|;
name|res
operator|+=
literal|"sequence id "
operator|+
name|getSequenceID
argument_list|()
operator|+
literal|"; "
expr_stmt|;
name|res
operator|+=
name|getSegment
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

