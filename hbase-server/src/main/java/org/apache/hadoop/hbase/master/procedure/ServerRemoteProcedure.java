begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|FailedRemoteDispatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|/**  * This extract the common used methods of procedures which are send to remote servers. Developers  * who extends this class only need to override remoteCallBuild() and complete(). This procedure  * will help add the operation to {@link RSProcedureDispatcher}  *  * If adding the operation to dispatcher failed, addOperationToNode will throw  * FailedRemoteDispatchException, and this procedure will return null which procedure Executor will  * mark this procedure as complete. Thus the upper layer of this procedure must have a way to  * check if this procedure really succeed and how to deal with it.  *  * If sending the operation to remote RS failed, dispatcher will call remoteCallFailed() to  * handle this, which actually call remoteOperationDone with the exception.  * If the targetServer crashed but this procedure has no response, than dispatcher will call  * remoteOperationFailed() to handle this, which also calls remoteOperationDone with the exception.  * If the operation is successful, then remoteOperationCompleted will be called and actually calls  * the remoteOperationDone without exception.  *  * In remoteOperationDone, we'll check if the procedure is already get wake up by others. Then  * developer could implement complete() based on their own purpose.  *  * But basic logic is that if operation succeed, set succ to true and do the clean work.  *  * If operation failed and require to resend it to the same server, leave the succ as false.  *  * If operation failed and require to resend it to another server, set succ to true and upper layer  * should be able to find out this operation not work and send a operation to another server.  */
specifier|public
specifier|abstract
class|class
name|ServerRemoteProcedure
extends|extends
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
implements|implements
name|RemoteProcedureDispatcher
operator|.
name|RemoteProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|ServerName
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerRemoteProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
decl_stmt|;
specifier|protected
name|ServerName
name|targetServer
decl_stmt|;
specifier|protected
name|boolean
name|dispatched
decl_stmt|;
specifier|protected
name|boolean
name|succ
decl_stmt|;
specifier|protected
specifier|abstract
name|void
name|complete
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|Throwable
name|error
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
index|[]
name|execute
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|dispatched
condition|)
block|{
if|if
condition|(
name|succ
condition|)
block|{
return|return
literal|null
return|;
block|}
name|dispatched
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|env
operator|.
name|getRemoteDispatcher
argument_list|()
operator|.
name|addOperationToNode
argument_list|(
name|targetServer
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedRemoteDispatchException
name|frde
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not send remote operation {} to {}, this operation will "
operator|+
literal|"be retried to send to another server"
argument_list|,
name|this
operator|.
name|getProcId
argument_list|()
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|dispatched
operator|=
literal|true
expr_stmt|;
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|<>
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|suspendIfNotReady
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|completionCleanup
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getRemoteDispatcher
argument_list|()
operator|.
name|removeCompletedOperation
argument_list|(
name|targetServer
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remoteCallFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
name|remoteOperationDone
argument_list|(
name|env
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remoteOperationCompleted
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|remoteOperationDone
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remoteOperationFailed
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|RemoteProcedureException
name|error
parameter_list|)
block|{
name|remoteOperationDone
argument_list|(
name|env
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|remoteOperationDone
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This procedure {} is already finished, skip the rest processes"
argument_list|,
name|this
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"procedure event for {} is null, maybe the procedure is created when recovery"
argument_list|,
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|complete
argument_list|(
name|env
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|event
operator|.
name|wake
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

