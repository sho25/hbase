begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_comment
comment|/**  * A collection for methods used by multiple classes to restore HBase tables.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RestoreUtil
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RestoreUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
name|HBackupFileSystem
name|hBackupFS
init|=
literal|null
decl_stmt|;
comment|// store table name and snapshot dir mapping
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|snapshotMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RestoreUtil
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HBackupFileSystem
name|hBackupFS
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|hBackupFS
operator|=
name|hBackupFS
expr_stmt|;
block|}
comment|/**    * During incremental backup operation. Call WalPlayer to replay WAL in backup image Currently    * tableNames and newTablesNames only contain single table, will be expanded to multiple tables in    * the future    * @param logDir : incremental backup folders, which contains WAL    * @param tableNames : source tableNames(table names were backuped)    * @param newTableNames : target tableNames(table names to be restored to)    * @throws IOException exception    */
specifier|public
name|void
name|incrementalRestoreTable
parameter_list|(
name|String
name|logDir
parameter_list|,
name|String
index|[]
name|tableNames
parameter_list|,
name|String
index|[]
name|newTableNames
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableNames
operator|.
name|length
operator|!=
name|newTableNames
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Number of source tables adn taget Tables does not match!"
argument_list|)
throw|;
block|}
comment|// for incremental backup image, expect the table already created either by user or previous
comment|// full backup. Here, check that all new tables exists
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|newTableNames
control|)
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HBase table "
operator|+
name|tableName
operator|+
literal|" does not exist. Create the table first, e.g. by restoring a full backup."
argument_list|)
throw|;
block|}
block|}
name|IncrementalRestoreService
name|restoreService
init|=
name|BackupRestoreServiceFactory
operator|.
name|getIncrementalRestoreService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|restoreService
operator|.
name|run
argument_list|(
name|logDir
argument_list|,
name|tableNames
argument_list|,
name|newTableNames
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|fullRestoreTable
parameter_list|(
name|Path
name|tableBackupPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|newTableName
parameter_list|,
name|boolean
name|converted
parameter_list|)
throws|throws
name|IOException
block|{
name|restoreTableAndCreate
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|tableBackupPath
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|restoreTableAndCreate
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|newTableName
parameter_list|,
name|Path
name|tableBackupPath
parameter_list|,
name|boolean
name|converted
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newTableName
operator|==
literal|null
operator|||
name|newTableName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|newTableName
operator|=
name|tableName
expr_stmt|;
block|}
name|FileSystem
name|fileSys
init|=
name|tableBackupPath
operator|.
name|getFileSystem
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// get table descriptor first
name|HTableDescriptor
name|tableDescriptor
init|=
literal|null
decl_stmt|;
name|Path
name|tableSnapshotPath
init|=
name|hBackupFS
operator|.
name|getTableSnapshotPath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tableSnapshotPath
argument_list|)
condition|)
block|{
comment|// snapshot path exist means the backup path is in HDFS
comment|// check whether snapshot dir already recorded for target table
if|if
condition|(
name|snapshotMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fileSys
argument_list|,
name|tableSnapshotPath
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fileSys
argument_list|,
name|tableSnapshotPath
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|=
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"tableDescriptor.getNameAsString() = "
operator|+
name|tableDescriptor
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" while tableName = "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// HBase 96.0 and 98.0
comment|// tableDescriptor =
comment|// FSTableDescriptors.getTableDescriptorFromFs(fileSys, snapshotMap.get(tableName));
block|}
else|else
block|{
name|tableDescriptor
operator|=
name|hBackupFS
operator|.
name|getTableDesc
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"tableSnapshotPath="
operator|+
name|tableSnapshotPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|hBackupFS
operator|.
name|getTableInfoPath
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found no table descriptor in the snapshot dir, previous schema would be lost"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|converted
condition|)
block|{
comment|// first check if this is a converted backup image
name|LOG
operator|.
name|error
argument_list|(
literal|"convert will be supported in a future jira"
argument_list|)
expr_stmt|;
block|}
name|Path
name|tableArchivePath
init|=
name|hBackupFS
operator|.
name|getTableArchivePath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableArchivePath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tableDescriptor
operator|!=
literal|null
condition|)
block|{
comment|// find table descriptor but no archive dir means the table is empty, create table and exit
name|LOG
operator|.
name|debug
argument_list|(
literal|"find table descriptor but no archive dir for table "
operator|+
name|tableName
operator|+
literal|", will only create table"
argument_list|)
expr_stmt|;
name|tableDescriptor
operator|.
name|setName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newTableName
argument_list|)
argument_list|)
expr_stmt|;
name|checkAndCreateTable
argument_list|(
name|tableBackupPath
argument_list|,
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|null
argument_list|,
name|tableDescriptor
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table because directory '"
operator|+
literal|" tableArchivePath is null."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
name|tableDescriptor
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|newTableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableDescriptor
operator|.
name|setName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|converted
condition|)
block|{
comment|// record all region dirs:
comment|// load all files in dir
try|try
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionPathList
init|=
name|hBackupFS
operator|.
name|getRegionList
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// should only try to create the table with all region informations, so we could pre-split
comment|// the regions in fine grain
name|checkAndCreateTable
argument_list|(
name|tableBackupPath
argument_list|,
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|regionPathList
argument_list|,
name|tableDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableArchivePath
operator|!=
literal|null
condition|)
block|{
comment|// start real restore through bulkload
comment|// if the backup target is on local cluster, special action needed
name|Path
name|tempTableArchivePath
init|=
name|hBackupFS
operator|.
name|checkLocalAndBackup
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempTableArchivePath
operator|.
name|equals
argument_list|(
name|tableArchivePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TableArchivePath for bulkload using existPath: "
operator|+
name|tableArchivePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionPathList
operator|=
name|hBackupFS
operator|.
name|getRegionList
argument_list|(
name|tempTableArchivePath
argument_list|)
expr_stmt|;
comment|// point to the tempDir
name|LOG
operator|.
name|debug
argument_list|(
literal|"TableArchivePath for bulkload using tempPath: "
operator|+
name|tempTableArchivePath
argument_list|)
expr_stmt|;
block|}
name|LoadIncrementalHFiles
name|loader
init|=
name|createLoader
argument_list|(
name|tempTableArchivePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|regionPath
range|:
name|regionPathList
control|)
block|{
name|String
name|regionName
init|=
name|regionPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restoring HFiles from directory "
operator|+
name|regionName
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|regionName
block|,
name|newTableName
block|}
decl_stmt|;
name|loader
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|// restore the recovered.edits if exists
name|replayRecoveredEditsIfAny
argument_list|(
name|tableBackupPath
argument_list|,
name|tableName
argument_list|,
name|tableDescriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"convert will be supported in a future jira"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Replay recovered edits from backup.    */
specifier|private
name|void
name|replayRecoveredEditsIfAny
parameter_list|(
name|Path
name|tableBackupPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|HTableDescriptor
name|newTableHtd
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to replay the recovered.edits if exist to the target table "
operator|+
name|newTableHtd
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" from the backup of table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|tableBackupPath
operator|.
name|getFileSystem
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirs
init|=
name|hBackupFS
operator|.
name|getRegionList
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionDirs
operator|==
literal|null
operator|||
name|regionDirs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No recovered.edits to be replayed for empty backup of table "
operator|+
name|tableName
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|regionDir
range|:
name|regionDirs
control|)
block|{
comment|// OLD: NavigableSet<Path> files = HLogUtil.getSplitEditFilesSorted(fs, regionDir);
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|WALSplitter
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No recovered.edits found for the region "
operator|+
name|regionDir
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Path
name|edits
range|:
name|files
control|)
block|{
if|if
condition|(
name|edits
operator|==
literal|null
operator|||
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|edits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null or non-existent edits file: "
operator|+
name|edits
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
operator|(
name|HTable
operator|)
name|conn
operator|.
name|getTable
argument_list|(
name|newTableHtd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|replayRecoveredEdits
argument_list|(
name|table
argument_list|,
name|fs
argument_list|,
name|edits
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.skip.errors"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipErrors
condition|)
block|{
name|Path
name|p
init|=
name|WALSplitter
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|HConstants
operator|.
name|HREGION_EDITS_REPLAY_SKIP_ERRORS
operator|+
literal|"=true so continuing. Renamed "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// for each edit file under a region
block|}
comment|// for each region
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Restore process for an edit entry.    * @param htable The target table of restore    * @param key HLog key    * @param val KVs    * @throws IOException exception    */
specifier|private
name|void
name|restoreEdit
parameter_list|(
name|HTable
name|htable
parameter_list|,
name|WALKey
name|key
parameter_list|,
name|WALEdit
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|Delete
name|del
init|=
literal|null
decl_stmt|;
name|Cell
name|lastKV
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|val
operator|.
name|getCells
argument_list|()
control|)
block|{
comment|// filtering HLog meta entries, see HLog.completeCacheFlushLogEdit
if|if
condition|(
name|WALEdit
operator|.
name|isMetaEditFamily
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// A WALEdit may contain multiple operations (HBASE-3584) and/or
comment|// multiple rows (HBASE-5229).
comment|// Aggregate as much as possible into a single Put/Delete
comment|// operation before apply the action to the table.
if|if
condition|(
name|lastKV
operator|==
literal|null
operator|||
name|lastKV
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|kv
operator|.
name|getTypeByte
argument_list|()
operator|||
operator|!
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|lastKV
argument_list|,
name|kv
argument_list|)
condition|)
block|{
comment|// row or type changed, write out aggregate KVs.
if|if
condition|(
name|put
operator|!=
literal|null
condition|)
block|{
name|applyAction
argument_list|(
name|htable
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|del
operator|!=
literal|null
condition|)
block|{
name|applyAction
argument_list|(
name|htable
argument_list|,
name|del
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|del
operator|=
operator|new
name|Delete
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|del
operator|.
name|addDeleteMarker
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|lastKV
operator|=
name|kv
expr_stmt|;
block|}
comment|// write residual KVs
if|if
condition|(
name|put
operator|!=
literal|null
condition|)
block|{
name|applyAction
argument_list|(
name|htable
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|del
operator|!=
literal|null
condition|)
block|{
name|applyAction
argument_list|(
name|htable
argument_list|,
name|del
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Apply an action (Put/Delete) to table.    * @param table table    * @param action action    * @throws IOException exception    */
specifier|private
name|void
name|applyAction
parameter_list|(
name|HTable
name|table
parameter_list|,
name|Mutation
name|action
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The actions are not immutable, so we defensively copy them
if|if
condition|(
name|action
operator|instanceof
name|Put
condition|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|(
name|Put
operator|)
name|action
argument_list|)
decl_stmt|;
comment|// put.setWriteToWAL(false);
comment|// why do not we do WAL?
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|Delete
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
operator|(
name|Delete
operator|)
name|action
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"action must be either Delete or Put"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Replay the given edits.    * @param htable The target table of restore    * @param fs File system    * @param edits Recovered.edits to be replayed    * @throws IOException exception    */
specifier|private
name|void
name|replayRecoveredEdits
parameter_list|(
name|HTable
name|htable
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replaying edits from "
operator|+
name|edits
operator|+
literal|"; path="
operator|+
name|edits
argument_list|)
expr_stmt|;
name|WAL
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|WALFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|long
name|editsCount
init|=
literal|0
decl_stmt|;
name|WAL
operator|.
name|Entry
name|entry
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|restoreEdit
argument_list|(
name|htable
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|editsCount
operator|+
literal|" edits from "
operator|+
name|edits
operator|+
literal|" have been replayed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|Path
name|p
init|=
name|WALSplitter
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Encountered EOF. Most likely due to Master failure during "
operator|+
literal|"log spliting, so we have this data in another edit.  "
operator|+
literal|"Continuing, but renaming "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|eof
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
condition|)
block|{
name|Path
name|p
init|=
name|WALSplitter
operator|.
name|moveAsideBadEditsFile
argument_list|(
name|fs
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"File corruption encountered!  "
operator|+
literal|"Continuing, but renaming "
operator|+
name|edits
operator|+
literal|" as "
operator|+
name|p
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// other IO errors may be transient (bad network connection,
comment|// checksum exception on one datanode, etc). throw& retry
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a {@link LoadIncrementalHFiles} instance to be used to restore the HFiles of a full    * backup.    * @return the {@link LoadIncrementalHFiles} instance    * @throws IOException exception    */
specifier|private
name|LoadIncrementalHFiles
name|createLoader
parameter_list|(
name|Path
name|tableArchivePath
parameter_list|,
name|boolean
name|multipleTables
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set configuration for restore:
comment|// LoadIncrementalHFile needs more time
comment|//<name>hbase.rpc.timeout</name><value>600000</value>
comment|// calculates
name|Integer
name|milliSecInMin
init|=
literal|60000
decl_stmt|;
name|Integer
name|previousMillis
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Integer
name|numberOfFilesInDir
init|=
name|multipleTables
condition|?
name|hBackupFS
operator|.
name|getMaxNumberOfFilesInSubDir
argument_list|(
name|tableArchivePath
argument_list|)
else|:
name|hBackupFS
operator|.
name|getNumberOfFilesInDir
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
name|Integer
name|calculatedMillis
init|=
name|numberOfFilesInDir
operator|*
name|milliSecInMin
decl_stmt|;
comment|// 1 minute per file
name|Integer
name|resultMillis
init|=
name|Math
operator|.
name|max
argument_list|(
name|calculatedMillis
argument_list|,
name|previousMillis
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultMillis
operator|>
name|previousMillis
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting configuration for restore with LoadIncrementalHFile: "
operator|+
literal|"hbase.rpc.timeout to "
operator|+
name|calculatedMillis
operator|/
name|milliSecInMin
operator|+
literal|" minutes, to handle the number of files in backup "
operator|+
name|tableArchivePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
name|resultMillis
argument_list|)
expr_stmt|;
block|}
name|LoadIncrementalHFiles
name|loader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|loader
operator|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
return|return
name|loader
return|;
block|}
comment|/**    * Prepare the table for bulkload, most codes copied from    * {@link LoadIncrementalHFiles#createTable(String, String)}    * @param tableBackupPath path    * @param tableName table name    * @param targetTableName target table name    * @param regionDirList region directory list    * @param htd table descriptor    * @throws IOException exception    */
specifier|private
name|void
name|checkAndCreateTable
parameter_list|(
name|Path
name|tableBackupPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|targetTableName
parameter_list|,
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
if|if
condition|(
name|hbadmin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|targetTableName
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using exising target table '"
operator|+
name|targetTableName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating target table '"
operator|+
name|targetTableName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// if no region dir given, create the table and return
if|if
condition|(
name|regionDirList
operator|==
literal|null
operator|||
name|regionDirList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hbadmin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
index|[]
name|keys
init|=
name|hBackupFS
operator|.
name|generateBoundaryKeys
argument_list|(
name|regionDirList
argument_list|)
decl_stmt|;
comment|// create table using table decriptor and region boundaries
name|hbadmin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

