begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueuesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStateZKBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/*  * Check and fix undeleted replication queues for removed peerId.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationChecker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
specifier|final
name|ErrorReporter
name|errorReporter
decl_stmt|;
specifier|private
specifier|final
name|ReplicationQueuesClient
name|queuesClient
decl_stmt|;
specifier|private
specifier|final
name|ReplicationPeers
name|replicationPeers
decl_stmt|;
specifier|private
specifier|final
name|ReplicationQueueDeletor
name|queueDeletor
decl_stmt|;
comment|// replicator with its queueIds for removed peers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|undeletedQueueIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// replicator with its undeleted queueIds for removed peers in hfile-refs queue
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|undeletedHFileRefsQueueIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|hfileRefsZNode
decl_stmt|;
specifier|public
name|ReplicationChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|ErrorReporter
name|errorReporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|zkw
operator|=
name|zkw
expr_stmt|;
name|this
operator|.
name|errorReporter
operator|=
name|errorReporter
expr_stmt|;
name|this
operator|.
name|queuesClient
operator|=
name|ReplicationFactory
operator|.
name|getReplicationQueuesClient
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|queuesClient
operator|.
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|=
name|ReplicationFactory
operator|.
name|getReplicationPeers
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|queuesClient
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|.
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueDeletor
operator|=
operator|new
name|ReplicationQueueDeletor
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to construct ReplicationChecker"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|replicationZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|String
name|replicationZNode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zkw
operator|.
name|baseZNode
argument_list|,
name|replicationZNodeName
argument_list|)
decl_stmt|;
name|String
name|hfileRefsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ReplicationStateZKBase
operator|.
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_KEY
argument_list|,
name|ReplicationStateZKBase
operator|.
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_DEFAULT
argument_list|)
decl_stmt|;
name|hfileRefsZNode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|hfileRefsZNodeName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasUnDeletedQueues
parameter_list|()
block|{
return|return
name|errorReporter
operator|.
name|getErrorList
argument_list|()
operator|.
name|contains
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNDELETED_REPLICATION_QUEUE
argument_list|)
return|;
block|}
specifier|public
name|void
name|checkUnDeletedQueues
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|peerIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|replicationPeers
operator|.
name|getAllPeerIds
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replicators
init|=
name|this
operator|.
name|queuesClient
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|replicator
range|:
name|replicators
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queueIds
init|=
name|this
operator|.
name|queuesClient
operator|.
name|getAllQueues
argument_list|(
name|replicator
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queueId
range|:
name|queueIds
control|)
block|{
name|ReplicationQueueInfo
name|queueInfo
init|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|queueId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|peerIds
operator|.
name|contains
argument_list|(
name|queueInfo
operator|.
name|getPeerId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|undeletedQueueIds
operator|.
name|containsKey
argument_list|(
name|replicator
argument_list|)
condition|)
block|{
name|undeletedQueueIds
operator|.
name|put
argument_list|(
name|replicator
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|undeletedQueueIds
operator|.
name|get
argument_list|(
name|replicator
argument_list|)
operator|.
name|add
argument_list|(
name|queueId
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Undeleted replication queue for removed peer found: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"[removedPeerId=%s, replicator=%s, queueId=%s]"
argument_list|,
name|queueInfo
operator|.
name|getPeerId
argument_list|()
argument_list|,
name|replicator
argument_list|,
name|queueId
argument_list|)
decl_stmt|;
name|errorReporter
operator|.
name|reportError
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNDELETED_REPLICATION_QUEUE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
name|checkUnDeletedHFileRefsQueues
argument_list|(
name|peerIds
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkUnDeletedHFileRefsQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|peerIds
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|-
literal|1
operator|==
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|hfileRefsZNode
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|listOfPeers
init|=
name|this
operator|.
name|queuesClient
operator|.
name|getAllPeersFromHFileRefsQueue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|peers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|listOfPeers
argument_list|)
decl_stmt|;
name|peers
operator|.
name|removeAll
argument_list|(
name|peerIds
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|peers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|undeletedHFileRefsQueueIds
operator|.
name|addAll
argument_list|(
name|peers
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Undeleted replication hfile-refs queue for removed peer found: "
operator|+
name|undeletedHFileRefsQueueIds
operator|+
literal|" under hfile-refs node "
operator|+
name|hfileRefsZNode
decl_stmt|;
name|errorReporter
operator|.
name|reportError
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNDELETED_REPLICATION_QUEUE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get list of all peers from hfile-refs znode "
operator|+
name|hfileRefsZNode
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ReplicationQueueDeletor
extends|extends
name|ReplicationStateZKBase
block|{
specifier|public
name|ReplicationQueueDeletor
parameter_list|(
name|ZooKeeperWatcher
name|zk
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeQueue
parameter_list|(
name|String
name|replicator
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|queueZnodePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|queuesZNode
argument_list|,
name|replicator
argument_list|)
argument_list|,
name|queueId
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|queueZnodePath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"remove replication queue, replicator: "
operator|+
name|replicator
operator|+
literal|", queueId: "
operator|+
name|queueId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to delete queue, replicator: "
operator|+
name|replicator
operator|+
literal|", queueId: "
operator|+
name|queueId
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fixUnDeletedQueues
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|replicatorAndQueueIds
range|:
name|undeletedQueueIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|replicator
init|=
name|replicatorAndQueueIds
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queueId
range|:
name|replicatorAndQueueIds
operator|.
name|getValue
argument_list|()
control|)
block|{
name|queueDeletor
operator|.
name|removeQueue
argument_list|(
name|replicator
argument_list|,
name|queueId
argument_list|)
expr_stmt|;
block|}
block|}
name|fixUnDeletedHFileRefsQueue
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fixUnDeletedHFileRefsQueue
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|hfileRefsQueueId
range|:
name|undeletedHFileRefsQueueIds
control|)
block|{
name|String
name|node
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|hfileRefsZNode
argument_list|,
name|hfileRefsQueueId
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zkw
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully deleted hfile-refs queue "
operator|+
name|hfileRefsQueueId
operator|+
literal|" from path "
operator|+
name|hfileRefsZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete hfile-refs queue "
operator|+
name|hfileRefsQueueId
operator|+
literal|" from path "
operator|+
name|hfileRefsZNode
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

