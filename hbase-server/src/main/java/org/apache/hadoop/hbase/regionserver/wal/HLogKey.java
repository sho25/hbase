begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FamilyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|ScopeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * A Key for an entry in the change log.  *  * The log intermingles edits to many tables and rows, so each log entry  * identifies the appropriate table and row.  Within a table and row, they're  * also sorted.  *  *<p>Some Transactional edits (START, COMMIT, ABORT) will not have an  * associated row.  */
end_comment

begin_comment
comment|// TODO: Key and WALEdit are never used separately, or in one-to-many relation, for practical
end_comment

begin_comment
comment|//       purposes. They need to be merged into HLogEntry.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HLogKey
implements|implements
name|WritableComparable
argument_list|<
name|HLogKey
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HLogKey
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// should be< 0 (@see #readFields(DataInput))
comment|// version 2 supports HLog compression
enum|enum
name|Version
block|{
name|UNVERSIONED
argument_list|(
literal|0
argument_list|)
block|,
comment|// Initial number we put on HLogKey when we introduced versioning.
name|INITIAL
argument_list|(
operator|-
literal|1
argument_list|)
block|,
comment|// Version -2 introduced a dictionary compression facility.  Only this
comment|// dictionary-based compression is available in version -2.
name|COMPRESSED
argument_list|(
operator|-
literal|2
argument_list|)
block|;
specifier|final
name|int
name|code
decl_stmt|;
specifier|static
specifier|final
name|Version
index|[]
name|byCode
decl_stmt|;
static|static
block|{
name|byCode
operator|=
name|Version
operator|.
name|values
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byCode
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|byCode
index|[
name|i
index|]
operator|.
name|code
operator|!=
operator|-
literal|1
operator|*
name|i
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Values in this enum should be descending by one"
argument_list|)
throw|;
block|}
block|}
block|}
name|Version
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
name|boolean
name|atLeast
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
return|return
name|code
operator|<=
name|other
operator|.
name|code
return|;
block|}
specifier|static
name|Version
name|fromCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|byCode
index|[
name|code
operator|*
operator|-
literal|1
index|]
return|;
block|}
block|}
comment|/*    * This is used for reading the log entries created by the previous releases    * (0.94.11) which write the clusters information to the scopes of WALEdit.    */
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX_CLUSTER_KEY
init|=
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Version
name|VERSION
init|=
name|Version
operator|.
name|COMPRESSED
decl_stmt|;
comment|//  The encoded region name.
specifier|private
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
specifier|private
name|TableName
name|tablename
decl_stmt|;
specifier|private
name|long
name|logSeqNum
decl_stmt|;
comment|// Time at which this edit was written.
specifier|private
name|long
name|writeTime
decl_stmt|;
comment|// The first element in the list is the cluster id on which the change has originated
specifier|private
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
decl_stmt|;
specifier|private
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
decl_stmt|;
specifier|private
name|CompressionContext
name|compressionContext
decl_stmt|;
specifier|public
name|HLogKey
parameter_list|()
block|{
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|UUID
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HLogKey
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|UUID
name|clusterId
parameter_list|)
block|{
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|clusterIds
operator|.
name|add
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the log key for writing to somewhere.    * We maintain the tablename mainly for debugging purposes.    * A regionName is always a sub-table object.    *    * @param encodedRegionName Encoded name of the region as returned by    *<code>HRegionInfo#getEncodedNameAsBytes()</code>.    * @param tablename   - name of table    * @param logSeqNum   - log sequence number    * @param now Time at which this edit was written.    * @param clusterIds the clusters that have consumed the change(used in Replication)    */
specifier|public
name|HLogKey
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|)
block|{
name|init
argument_list|(
name|encodedRegionName
argument_list|,
name|tablename
argument_list|,
name|logSeqNum
argument_list|,
name|now
argument_list|,
name|clusterIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|TableName
name|tablename
parameter_list|,
name|long
name|logSeqNum
parameter_list|,
specifier|final
name|long
name|now
parameter_list|,
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
parameter_list|)
block|{
name|this
operator|.
name|logSeqNum
operator|=
name|logSeqNum
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|now
expr_stmt|;
name|this
operator|.
name|clusterIds
operator|=
name|clusterIds
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
block|}
comment|/**    * @param compressionContext Compression context to use    */
specifier|public
name|void
name|setCompressionContext
parameter_list|(
name|CompressionContext
name|compressionContext
parameter_list|)
block|{
name|this
operator|.
name|compressionContext
operator|=
name|compressionContext
expr_stmt|;
block|}
comment|/** @return encoded region name */
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
comment|/** @return table name */
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
return|return
name|tablename
return|;
block|}
comment|/** @return log sequence number */
specifier|public
name|long
name|getLogSeqNum
parameter_list|()
block|{
return|return
name|this
operator|.
name|logSeqNum
return|;
block|}
comment|/**    * @return the write time    */
specifier|public
name|long
name|getWriteTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeTime
return|;
block|}
specifier|public
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|getScopes
parameter_list|()
block|{
return|return
name|scopes
return|;
block|}
specifier|public
name|void
name|setScopes
parameter_list|(
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
block|{
name|this
operator|.
name|scopes
operator|=
name|scopes
expr_stmt|;
block|}
specifier|public
name|void
name|readOlderScopes
parameter_list|(
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
block|{
if|if
condition|(
name|scopes
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|scopes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scope
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|scope
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PREFIX_CLUSTER_KEY
argument_list|)
condition|)
block|{
name|addClusterId
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|PREFIX_CLUSTER_KEY
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scopes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|scopes
operator|=
name|scopes
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Marks that the cluster with the given clusterId has consumed the change    */
specifier|public
name|void
name|addClusterId
parameter_list|(
name|UUID
name|clusterId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clusterIds
operator|.
name|contains
argument_list|(
name|clusterId
argument_list|)
condition|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the set of cluster Ids that have consumed the change    */
specifier|public
name|List
argument_list|<
name|UUID
argument_list|>
name|getClusterIds
parameter_list|()
block|{
return|return
name|clusterIds
return|;
block|}
comment|/**    * @return the cluster id on which the change has originated. It there is no such cluster, it    *         returns DEFAULT_CLUSTER_ID (cases where replication is not enabled)    */
specifier|public
name|UUID
name|getOriginatingClusterId
parameter_list|()
block|{
return|return
name|clusterIds
operator|.
name|isEmpty
argument_list|()
condition|?
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
else|:
name|clusterIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|tablename
operator|+
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
operator|+
literal|"/"
operator|+
name|logSeqNum
return|;
block|}
comment|/**    * Produces a string map for this key. Useful for programmatic use and    * manipulation of the data stored in an HLogKey, for example, printing    * as JSON.    *    * @return a Map containing data from this key    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toStringMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"region"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"sequence"
argument_list|,
name|logSeqNum
argument_list|)
expr_stmt|;
return|return
name|stringMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|HLogKey
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
name|result
operator|^=
name|this
operator|.
name|logSeqNum
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|writeTime
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|HLogKey
name|o
parameter_list|)
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|o
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|logSeqNum
operator|<
name|o
operator|.
name|logSeqNum
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|logSeqNum
operator|>
name|o
operator|.
name|logSeqNum
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|writeTime
operator|<
name|o
operator|.
name|writeTime
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|writeTime
operator|>
name|o
operator|.
name|writeTime
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
comment|// why isn't cluster id accounted for?
return|return
name|result
return|;
block|}
comment|/**    * Drop this instance's tablename byte array and instead    * hold a reference to the provided tablename. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internTableName
parameter_list|(
name|TableName
name|tablename
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|tablename
operator|.
name|equals
argument_list|(
name|this
operator|.
name|tablename
argument_list|)
assert|;
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
block|}
comment|/**    * Drop this instance's region name byte array and instead    * hold a reference to the provided region name. This is not    * meant to be a general purpose setter - it's only used    * to collapse references to conserve memory.    */
name|void
name|internEncodedRegionName
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
comment|// We should not use this as a setter - only to swap
comment|// in a new reference to the same table name.
assert|assert
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|encodedRegionName
argument_list|)
assert|;
name|this
operator|.
name|encodedRegionName
operator|=
name|encodedRegionName
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HLogKey is being serialized to writable - only expected in test code"
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|VERSION
operator|.
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|compressionContext
operator|==
literal|null
condition|)
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Compressor
operator|.
name|writeCompressed
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|encodedRegionName
operator|.
name|length
argument_list|,
name|out
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
expr_stmt|;
name|Compressor
operator|.
name|writeCompressed
argument_list|(
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|,
name|out
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|logSeqNum
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|writeTime
argument_list|)
expr_stmt|;
comment|// Don't need to write the clusters information as we are using protobufs from 0.95
comment|// Writing only the first clusterId for testing the legacy read
name|Iterator
argument_list|<
name|UUID
argument_list|>
name|iterator
init|=
name|clusterIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UUID
name|clusterId
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|clusterId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|clusterId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Version
name|version
init|=
name|Version
operator|.
name|UNVERSIONED
decl_stmt|;
comment|// HLogKey was not versioned in the beginning.
comment|// In order to introduce it now, we make use of the fact
comment|// that encodedRegionName was written with Bytes.writeByteArray,
comment|// which encodes the array length as a vint which is>= 0.
comment|// Hence if the vint is>= 0 we have an old version and the vint
comment|// encodes the length of encodedRegionName.
comment|// If< 0 we just read the version and the next vint is the length.
comment|// @see Bytes#readByteArray(DataInput)
name|this
operator|.
name|scopes
operator|=
literal|null
expr_stmt|;
comment|// writable HLogKey does not contain scopes
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tablenameBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
comment|// what we just read was the version
name|version
operator|=
name|Version
operator|.
name|fromCode
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// We only compress V2 of HLogkey.
comment|// If compression is on, the length is handled by the dictionary
if|if
condition|(
name|compressionContext
operator|==
literal|null
operator|||
operator|!
name|version
operator|.
name|atLeast
argument_list|(
name|Version
operator|.
name|COMPRESSED
argument_list|)
condition|)
block|{
name|len
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|compressionContext
operator|==
literal|null
operator|||
operator|!
name|version
operator|.
name|atLeast
argument_list|(
name|Version
operator|.
name|COMPRESSED
argument_list|)
condition|)
block|{
name|this
operator|.
name|encodedRegionName
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
name|tablenameBytes
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|Compressor
operator|.
name|readCompressed
argument_list|(
name|in
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
expr_stmt|;
name|tablenameBytes
operator|=
name|Compressor
operator|.
name|readCompressed
argument_list|(
name|in
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|logSeqNum
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterIds
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|atLeast
argument_list|(
name|Version
operator|.
name|INITIAL
argument_list|)
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
comment|// read the older log
comment|// Definitely is the originating cluster
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|// dummy read (former byte cluster id)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Means it's a very old key, just continue
block|}
block|}
try|try
block|{
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablenameBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tablenameBytes
argument_list|)
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|OLD_META_STR
argument_list|)
condition|)
block|{
comment|// It is a pre-namespace meta table edit, continue with new format.
name|LOG
operator|.
name|info
argument_list|(
literal|"Got an old .META. edit, continuing with new format "
argument_list|)
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|META_TABLE_NAME
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tablenameBytes
argument_list|)
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|OLD_ROOT_STR
argument_list|)
condition|)
block|{
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|OLD_ROOT_TABLE_NAME
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
else|else
throw|throw
name|iae
throw|;
block|}
comment|// Do not need to read the clusters information as we are using protobufs from 0.95
block|}
specifier|public
name|WALKey
operator|.
name|Builder
name|getBuilder
parameter_list|(
name|WALCellCodec
operator|.
name|ByteStringCompressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
name|WALKey
operator|.
name|Builder
name|builder
init|=
name|WALKey
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressionContext
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedRegionName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setEncodedRegionName
argument_list|(
name|compressor
operator|.
name|compress
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|compressor
operator|.
name|compress
argument_list|(
name|this
operator|.
name|tablename
operator|.
name|getName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLogSequenceNumber
argument_list|(
name|this
operator|.
name|logSeqNum
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setWriteTime
argument_list|(
name|writeTime
argument_list|)
expr_stmt|;
name|HBaseProtos
operator|.
name|UUID
operator|.
name|Builder
name|uuidBuilder
init|=
name|HBaseProtos
operator|.
name|UUID
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|clusterId
range|:
name|clusterIds
control|)
block|{
name|uuidBuilder
operator|.
name|setLeastSigBits
argument_list|(
name|clusterId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|uuidBuilder
operator|.
name|setMostSigBits
argument_list|(
name|clusterId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addClusterIds
argument_list|(
name|uuidBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|scopes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteString
name|family
init|=
operator|(
name|compressionContext
operator|==
literal|null
operator|)
condition|?
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
name|compressor
operator|.
name|compress
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|familyDict
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addScopes
argument_list|(
name|FamilyScope
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setScopeType
argument_list|(
name|ScopeType
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
specifier|public
name|void
name|readFieldsFromPb
parameter_list|(
name|WALKey
name|walKey
parameter_list|,
name|WALCellCodec
operator|.
name|ByteStringUncompressor
name|uncompressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|compressionContext
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|walKey
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|regionDict
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tablenameBytes
init|=
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|walKey
operator|.
name|getTableName
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|tableDict
argument_list|)
decl_stmt|;
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablenameBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|encodedRegionName
operator|=
name|walKey
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|walKey
operator|.
name|getTableName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clusterIds
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|walKey
operator|.
name|hasClusterId
argument_list|()
condition|)
block|{
comment|//When we are reading the older log (0.95.1 release)
comment|//This is definitely the originating cluster
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|walKey
operator|.
name|getClusterId
argument_list|()
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|walKey
operator|.
name|getClusterId
argument_list|()
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HBaseProtos
operator|.
name|UUID
name|clusterId
range|:
name|walKey
operator|.
name|getClusterIdsList
argument_list|()
control|)
block|{
name|clusterIds
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|clusterId
operator|.
name|getMostSigBits
argument_list|()
argument_list|,
name|clusterId
operator|.
name|getLeastSigBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scopes
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|walKey
operator|.
name|getScopesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|FamilyScope
name|scope
range|:
name|walKey
operator|.
name|getScopesList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
operator|(
name|compressionContext
operator|==
literal|null
operator|)
condition|?
name|scope
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
name|uncompressor
operator|.
name|uncompress
argument_list|(
name|scope
operator|.
name|getFamily
argument_list|()
argument_list|,
name|compressionContext
operator|.
name|familyDict
argument_list|)
decl_stmt|;
name|this
operator|.
name|scopes
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|scope
operator|.
name|getScopeType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|logSeqNum
operator|=
name|walKey
operator|.
name|getLogSequenceNumber
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|walKey
operator|.
name|getWriteTime
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

