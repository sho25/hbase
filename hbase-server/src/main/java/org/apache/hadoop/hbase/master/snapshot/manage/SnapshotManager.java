begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|manage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SnapshotSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|DisabledTableSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * This class monitors the whole process of snapshots via ZooKeeper. There is only one  * SnapshotMonitor for the master.  *<p>  * Start monitoring a snapshot by calling method monitor() before the snapshot is started across the  * cluster via ZooKeeper. SnapshotMonitor would stop monitoring this snapshot only if it is finished  * or aborted.  *<p>  * Note: There could be only one snapshot being processed and monitored at a time over the cluster.  * Start monitoring a snapshot only when the previous one reaches an end status.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|SnapshotManager
implements|implements
name|Stoppable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO - enable having multiple snapshots with multiple monitors
specifier|private
specifier|final
name|MasterServices
name|master
decl_stmt|;
specifier|private
name|SnapshotSentinel
name|handler
decl_stmt|;
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|public
name|SnapshotManager
parameter_list|(
specifier|final
name|MasterServices
name|master
parameter_list|,
specifier|final
name|ZooKeeperWatcher
name|watcher
parameter_list|,
specifier|final
name|ExecutorService
name|executorService
parameter_list|)
throws|throws
name|KeeperException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|executorService
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return<tt>true</tt> if there is a snapshot currently being taken,<tt>false</tt> otherwise    */
specifier|public
name|boolean
name|isTakingSnapshot
parameter_list|()
block|{
return|return
name|handler
operator|!=
literal|null
operator|&&
operator|!
name|handler
operator|.
name|isFinished
argument_list|()
return|;
block|}
comment|/**    * Check to make sure that we are OK to run the passed snapshot. Checks to make sure that we    * aren't already running a snapshot.    * @param snapshot description of the snapshot we want to start    * @throws HBaseSnapshotException if the filesystem could not be prepared to start the snapshot    */
specifier|private
specifier|synchronized
name|void
name|prepareToTakeSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
comment|// make sure we aren't already running a snapshot
if|if
condition|(
name|isTakingSnapshot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Already running another snapshot:"
operator|+
name|this
operator|.
name|handler
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
try|try
block|{
comment|// delete the working directory, since we aren't running the snapshot
name|fs
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// recreate the working directory for the snapshot
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Couldn't create working directory ("
operator|+
name|workingDir
operator|+
literal|") for snapshot."
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|HBaseSnapshotException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Exception while checking to see if snapshot could be started."
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
comment|/**    * Take a snapshot of a disabled table.    *<p>    * Ensures the snapshot won't be started if there is another snapshot already running. Does    *<b>not</b> check to see if another snapshot of the same name already exists.    * @param snapshot description of the snapshot to take. Modified to be {@link Type#DISABLED}.    * @throws HBaseSnapshotException if the snapshot could not be started    */
specifier|public
specifier|synchronized
name|void
name|snapshotDisabledTable
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
comment|// setup the snapshot
name|prepareToTakeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// set the snapshot to be a disabled snapshot, since the client doesn't know about that
name|snapshot
operator|=
name|snapshot
operator|.
name|toBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|DISABLED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DisabledTableSnapshotHandler
name|handler
decl_stmt|;
try|try
block|{
name|handler
operator|=
operator|new
name|DisabledTableSnapshotHandler
argument_list|(
name|snapshot
argument_list|,
name|this
operator|.
name|master
argument_list|,
name|this
operator|.
name|master
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|pool
operator|.
name|submit
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// cleanup the working directory
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|// fail the snapshot
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Could not build snapshot handler"
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the current handler for the snapshot    */
specifier|public
name|SnapshotSentinel
name|getCurrentSnapshotSentinel
parameter_list|()
block|{
return|return
name|this
operator|.
name|handler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
comment|// short circuit
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
comment|// make sure we get stop
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
comment|// pass the stop onto all the listeners
if|if
condition|(
name|this
operator|.
name|handler
operator|!=
literal|null
condition|)
name|this
operator|.
name|handler
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
comment|/**    * Set the handler for the current snapshot    *<p>    * Exposed for TESTING    * @param handler handler the master should use    */
specifier|public
name|void
name|setSnapshotHandlerForTesting
parameter_list|(
name|SnapshotSentinel
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
block|}
end_class

end_unit

