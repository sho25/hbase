begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|manage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SnapshotSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|CloneSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|DisabledTableSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|RestoreSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|TakeSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|SnapshotDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|SnapshotExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|TablePartiallyOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|UnknownSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|restore
operator|.
name|RestoreSnapshotHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This class manages the procedure of taking and restoring snapshots. There is only one  * SnapshotManager for the master.  *<p>  * The class provides methods for monitoring in-progress snapshot actions.  *<p>  * Note: Currently there can only one snapshot being taken at a time over the cluster.  This is a  * simplification in the current implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|SnapshotManager
implements|implements
name|Stoppable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** By default, check to see if the snapshot is complete every WAKE MILLIS (ms) */
specifier|public
specifier|static
specifier|final
name|int
name|SNAPSHOT_WAKE_MILLIS_DEFAULT
init|=
literal|500
decl_stmt|;
comment|/**    * Conf key for # of ms elapsed between checks for snapshot errors while waiting for    * completion.    */
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_WAKE_MILLIS_KEY
init|=
literal|"hbase.snapshot.master.wakeMillis"
decl_stmt|;
comment|/** By default, check to see if the snapshot is complete (ms) */
specifier|public
specifier|static
specifier|final
name|int
name|SNAPSHOT_TIMEOUT_MILLIS_DEFAULT
init|=
literal|5000
decl_stmt|;
comment|/**    * Conf key for # of ms elapsed before injecting a snapshot timeout error when waiting for    * completion.    */
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_TIMEMOUT_MILLIS_KEY
init|=
literal|"hbase.snapshot.master.timeoutMillis"
decl_stmt|;
comment|/** Name of the operation to use in the controller */
specifier|public
specifier|static
specifier|final
name|String
name|ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION
init|=
literal|"online-snapshot"
decl_stmt|;
comment|// TODO - enable having multiple snapshots with multiple monitors/threads
comment|// this needs to be configuration based when running multiple snapshots is implemented
comment|/** number of current operations running on the master */
specifier|private
specifier|static
specifier|final
name|int
name|opThreads
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|private
specifier|final
name|long
name|wakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|master
decl_stmt|;
comment|// Needed by TableEventHandlers
comment|// A reference to a handler.  If the handler is non-null, then it is assumed that a snapshot is
comment|// in progress currently
comment|// TODO: this is a bad smell;  likely replace with a collection in the future.  Also this gets
comment|// reset by every operation.
specifier|private
name|TakeSnapshotHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
comment|// Restore Sentinels map, with table name as key
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotSentinel
argument_list|>
name|restoreHandlers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SnapshotSentinel
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Construct a snapshot manager.    * @param master    * @param comms    */
specifier|public
name|SnapshotManager
parameter_list|(
specifier|final
name|MasterServices
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
comment|// get the configuration for the coordinator
name|Configuration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|wakeFrequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPSHOT_WAKE_MILLIS_KEY
argument_list|,
name|SNAPSHOT_WAKE_MILLIS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|master
operator|.
name|getExecutorService
argument_list|()
expr_stmt|;
name|resetTempDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the list of all completed snapshots.    * @return list of SnapshotDescriptions    * @throws IOException File system exception    */
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|getCompletedSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshotDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|()
decl_stmt|;
comment|// first create the snapshot root path and check to see if it exists
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// if there are no snapshots, return an empty list
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
return|return
name|snapshotDescs
return|;
block|}
comment|// ignore all the snapshots in progress
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// loop through all the completed snapshots
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|Path
name|info
init|=
operator|new
name|Path
argument_list|(
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOTINFO_FILE
argument_list|)
decl_stmt|;
comment|// if the snapshot is bad
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot information for "
operator|+
name|snapshot
operator|.
name|getPath
argument_list|()
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescription
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|snapshotDescs
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found a corrupted snapshot "
operator|+
name|snapshot
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|snapshotDescs
return|;
block|}
comment|/**    * Cleans up any snapshots in the snapshot/.tmp directory that were left from failed    * snapshot attempts.    *    * @throws IOException if we can't reach the filesystem    */
name|void
name|resetTempDir
parameter_list|()
throws|throws
name|IOException
block|{
comment|// cleanup any existing snapshots.
name|Path
name|tmpdir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|tmpdir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't delete working snapshot directory: "
operator|+
name|tmpdir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete the specified snapshot    * @param snapshot    * @throws SnapshotDoesNotExistException If the specified snapshot does not exist.    * @throws IOException For filesystem IOExceptions    */
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|SnapshotDoesNotExistException
throws|,
name|IOException
block|{
comment|// call coproc pre hook
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preDeleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|// check to see if it is completed
if|if
condition|(
operator|!
name|isSnapshotCompleted
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotDoesNotExistException
argument_list|(
name|snapshot
argument_list|)
throw|;
block|}
name|String
name|snapshotName
init|=
name|snapshot
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting snapshot: "
operator|+
name|snapshotName
argument_list|)
expr_stmt|;
comment|// first create the snapshot description and check to see if it exists
name|MasterFileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
comment|// delete the existing snapshot
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|snapshotDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseSnapshotException
argument_list|(
literal|"Failed to delete snapshot directory: "
operator|+
name|snapshotDir
argument_list|)
throw|;
block|}
comment|// call coproc post hook
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDeleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return the handler if it is currently running and has the same snapshot target name.    * @param snapshot    * @return null if doesn't match, else a live handler.    */
name|TakeSnapshotHandler
name|getTakeSnapshotHandler
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|TakeSnapshotHandler
name|h
init|=
name|this
operator|.
name|handler
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|h
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// specified snapshot is to the one currently running
return|return
literal|null
return|;
block|}
return|return
name|h
return|;
block|}
comment|/**    * Check if the specified snapshot is done    * @param expected    * @return true if snapshot is ready to be restored, false if it is still being taken.    * @throws IOException IOException if error from HDFS or RPC    * @throws UnknownSnapshotException if snapshot is invalid or does not exist.    */
specifier|public
name|boolean
name|isSnapshotDone
parameter_list|(
name|SnapshotDescription
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check the request to make sure it has a snapshot
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"No snapshot name passed in request, can't figure out which snapshot you want to check."
argument_list|)
throw|;
block|}
comment|// check to see if the sentinel exists
name|TakeSnapshotHandler
name|handler
init|=
name|getTakeSnapshotHandler
argument_list|(
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
comment|// doesn't exist, check if it is already completely done.
if|if
condition|(
operator|!
name|isSnapshotCompleted
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"Snapshot:"
operator|+
name|expected
operator|.
name|getName
argument_list|()
operator|+
literal|" is not currently running or one of the known completed snapshots."
argument_list|)
throw|;
block|}
comment|// was done, return true;
return|return
literal|true
return|;
block|}
comment|// pass on any failure we find in the sentinel
try|try
block|{
name|handler
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForeignException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseSnapshotException
argument_list|(
literal|"Snapshot error from RS"
argument_list|,
name|e
argument_list|,
name|expected
argument_list|)
throw|;
block|}
comment|// check to see if we are done
if|if
condition|(
name|handler
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot '"
operator|+
name|expected
operator|.
name|getName
argument_list|()
operator|+
literal|"' has completed, notifying client."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sentinel isn't finished with snapshot '"
operator|+
name|expected
operator|.
name|getName
argument_list|()
operator|+
literal|"'!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check to see if there are any snapshots in progress currently.  Currently we have a    * limitation only allowing a single snapshot attempt at a time.    * @return<tt>true</tt> if there any snapshots in progress,<tt>false</tt> otherwise    * @throws SnapshotCreationException if the snapshot failed    */
specifier|synchronized
name|boolean
name|isTakingSnapshot
parameter_list|()
throws|throws
name|SnapshotCreationException
block|{
comment|// TODO later when we handle multiple there would be a map with ssname to handler.
return|return
name|handler
operator|!=
literal|null
operator|&&
operator|!
name|handler
operator|.
name|isFinished
argument_list|()
return|;
block|}
comment|/**    * Check to see if the specified table has a snapshot in progress.  Currently we have a    * limitation only allowing a single snapshot attempt at a time.    * @param tableName name of the table being snapshotted.    * @return<tt>true</tt> if there is a snapshot in progress on the specified table.    */
specifier|private
name|boolean
name|isTakingSnapshot
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
operator|&&
name|handler
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
operator|!
name|handler
operator|.
name|isFinished
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check to make sure that we are OK to run the passed snapshot. Checks to make sure that we    * aren't already running a snapshot.    * @param snapshot description of the snapshot we want to start    * @throws HBaseSnapshotException if the filesystem could not be prepared to start the snapshot    */
specifier|private
specifier|synchronized
name|void
name|prepareToTakeSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
comment|// make sure we aren't already running a snapshot
if|if
condition|(
name|isTakingSnapshot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Already running another snapshot:"
operator|+
name|this
operator|.
name|handler
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Restore in progress on the same table snapshot:"
operator|+
name|this
operator|.
name|handler
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
try|try
block|{
comment|// delete the working directory, since we aren't running the snapshot.  Likely leftovers
comment|// from a failed attempt.
name|fs
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// recreate the working directory for the snapshot
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Couldn't create working directory ("
operator|+
name|workingDir
operator|+
literal|") for snapshot."
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|HBaseSnapshotException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Exception while checking to see if snapshot could be started."
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
comment|/**    * Take a snapshot based on the enabled/disabled state of the table.    *    * @param snapshot    * @throws HBaseSnapshotException when a snapshot specific exception occurs.    * @throws IOException when some sort of generic IO exception occurs.    */
specifier|public
name|void
name|takeSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
throws|,
name|IOException
block|{
comment|// check to see if we already completed the snapshot
if|if
condition|(
name|isSnapshotCompleted
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotExistsException
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' already stored on the filesystem."
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"No existing snapshot, attempting snapshot..."
argument_list|)
expr_stmt|;
comment|// check to see if the table exists
name|HTableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|desc
operator|=
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Table:"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|" info doesn't exist!"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Error while geting table description for table "
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Table '"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|"' doesn't exist, can't take snapshot."
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
comment|// set the snapshot version, now that we are ready to take it
name|snapshot
operator|=
name|snapshot
operator|.
name|toBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOT_LAYOUT_VERSION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// call pre coproc hook
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preSnapshot
argument_list|(
name|snapshot
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// setup the snapshot
name|prepareToTakeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
comment|// if the table is enabled, then have the RS run actually the snapshot work
name|AssignmentManager
name|assignmentMgr
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignmentMgr
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table enabled, starting distributed snapshot."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Snapshots of enabled tables is not yet supported"
argument_list|)
throw|;
block|}
comment|// For disabled table, snapshot is created by the master
elseif|else
if|if
condition|(
name|assignmentMgr
operator|.
name|getZKTable
argument_list|()
operator|.
name|isDisabledTable
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table is disabled, running snapshot entirely on master."
argument_list|)
expr_stmt|;
name|snapshotDisabledTable
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started snapshot: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't snapshot table '"
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|"', isn't open or closed, we don't know what to do!"
argument_list|)
expr_stmt|;
name|TablePartiallyOpenException
name|tpoe
init|=
operator|new
name|TablePartiallyOpenException
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|" isn't fully open."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Table is not entirely open or closed"
argument_list|,
name|tpoe
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
comment|// call post coproc hook
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postSnapshot
argument_list|(
name|snapshot
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Take a snapshot of a disabled table.    *<p>    * Ensures the snapshot won't be started if there is another snapshot already running. Does    *<b>not</b> check to see if another snapshot of the same name already exists.    * @param snapshot description of the snapshot to take. Modified to be {@link Type#DISABLED}.    * @throws HBaseSnapshotException if the snapshot could not be started    */
specifier|private
specifier|synchronized
name|void
name|snapshotDisabledTable
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
comment|// set the snapshot to be a disabled snapshot, since the client doesn't know about that
name|snapshot
operator|=
name|snapshot
operator|.
name|toBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|DISABLED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DisabledTableSnapshotHandler
name|handler
decl_stmt|;
try|try
block|{
name|handler
operator|=
operator|new
name|DisabledTableSnapshotHandler
argument_list|(
name|snapshot
argument_list|,
name|this
operator|.
name|master
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// cleanup the working directory by trying to delete it from the fs.
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|workingDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete working directory ("
operator|+
name|workingDir
operator|+
literal|" for snapshot:"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|// fail the snapshot
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Could not build snapshot handler"
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the handler for the current snapshot    *<p>    * Exposed for TESTING    * @param handler handler the master should use    *    * TODO get rid of this if possible, repackaging, modify tests.    */
specifier|public
specifier|synchronized
name|void
name|setSnapshotHandlerForTesting
parameter_list|(
name|TakeSnapshotHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**    * Check to see if the snapshot is one of the currently completed snapshots    * @param expected snapshot to check    * @return<tt>true</tt> if the snapshot is stored on the {@link FileSystem},<tt>false</tt> if is    *         not stored    * @throws IOException if the filesystem throws an unexpected exception,    * @throws IllegalArgumentException if snapshot name is invalid.    */
specifier|private
name|boolean
name|isSnapshotCompleted
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// check to see if the snapshot already exists
return|return
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"Unexpected exception thrown"
argument_list|,
name|iae
argument_list|)
throw|;
block|}
block|}
comment|/**    * Restore the specified snapshot.    * The restore will fail if the destination table has a snapshot or restore in progress.    *    * @param snapshot Snapshot Descriptor    * @param hTableDescriptor Table Descriptor of the table to create    * @param waitTime timeout before considering the clone failed    */
specifier|synchronized
name|void
name|cloneSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|String
name|tableName
init|=
name|hTableDescriptor
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// make sure we aren't running a snapshot on the same table
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Snapshot in progress on the restore table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Restore already in progress on the table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
try|try
block|{
name|CloneSnapshotHandler
name|handler
init|=
operator|new
name|CloneSnapshotHandler
argument_list|(
name|master
argument_list|,
name|snapshot
argument_list|,
name|hTableDescriptor
argument_list|)
decl_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|restoreHandlers
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't clone the snapshot="
operator|+
name|snapshot
operator|+
literal|" on table="
operator|+
name|tableName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Restore the specified snapshot    * @param reqSnapshot    * @throws IOException    */
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
name|SnapshotDescription
name|reqSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|reqSnapshot
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
comment|// check if the snapshot exists
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A Snapshot named '"
operator|+
name|reqSnapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' does not exist."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SnapshotDoesNotExistException
argument_list|(
name|reqSnapshot
argument_list|)
throw|;
block|}
comment|// read snapshot information
name|SnapshotDescription
name|fsSnapshot
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|snapshotTableDesc
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptor
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|reqSnapshot
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// stop tracking completed restores
name|cleanupRestoreSentinels
argument_list|()
expr_stmt|;
comment|// Execute the restore/clone operation
if|if
condition|(
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|master
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
if|if
condition|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|fsSnapshot
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Table '"
operator|+
name|fsSnapshot
operator|.
name|getTable
argument_list|()
operator|+
literal|"' must be disabled in order to perform a restore operation."
argument_list|)
throw|;
block|}
comment|// call coproc pre hook
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preRestoreSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|snapshotTableDesc
argument_list|)
expr_stmt|;
block|}
name|restoreSnapshot
argument_list|(
name|fsSnapshot
argument_list|,
name|snapshotTableDesc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore snapshot="
operator|+
name|fsSnapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postRestoreSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|snapshotTableDesc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|HTableDescriptor
name|htd
init|=
name|RestoreSnapshotHelper
operator|.
name|cloneTableSchema
argument_list|(
name|snapshotTableDesc
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preCloneSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
name|cloneSnapshot
argument_list|(
name|fsSnapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Clone snapshot="
operator|+
name|fsSnapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" as table="
operator|+
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCloneSnapshot
argument_list|(
name|reqSnapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Restore the specified snapshot.    * The restore will fail if the destination table has a snapshot or restore in progress.    *    * @param snapshot Snapshot Descriptor    * @param hTableDescriptor Table Descriptor    * @param waitTime timeout before considering the restore failed    */
specifier|private
specifier|synchronized
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|HBaseSnapshotException
block|{
name|String
name|tableName
init|=
name|hTableDescriptor
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// make sure we aren't running a snapshot on the same table
if|if
condition|(
name|isTakingSnapshot
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Snapshot in progress on the restore table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
comment|// make sure we aren't running a restore on the same table
if|if
condition|(
name|isRestoringTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Restore already in progress on the table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
try|try
block|{
name|RestoreSnapshotHandler
name|handler
init|=
operator|new
name|RestoreSnapshotHandler
argument_list|(
name|master
argument_list|,
name|snapshot
argument_list|,
name|hTableDescriptor
argument_list|)
decl_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|restoreHandlers
operator|.
name|put
argument_list|(
name|hTableDescriptor
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't restore the snapshot="
operator|+
name|snapshot
operator|+
literal|" on table="
operator|+
name|tableName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify if the the restore of the specified table is in progress.    *    * @param tableName table under restore    * @return<tt>true</tt> if there is a restore in progress of the specified table.    */
specifier|private
name|boolean
name|isRestoringTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
block|{
name|SnapshotSentinel
name|sentinel
init|=
name|restoreHandlers
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
operator|(
name|sentinel
operator|!=
literal|null
operator|&&
operator|!
name|sentinel
operator|.
name|isFinished
argument_list|()
operator|)
return|;
block|}
comment|/**    * Returns status of a restore request, specifically comparing source snapshot and target table    * names.  Throws exception if not a known snapshot.    * @param snapshot    * @return true if in progress, false if is not.    * @throws UnknownSnapshotException if specified source snapshot does not exit.    * @throws IOException if there was some sort of IO failure    */
specifier|public
name|boolean
name|isRestoringTable
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check to see if the snapshot is already on the fs
if|if
condition|(
operator|!
name|isSnapshotCompleted
argument_list|(
name|snapshot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownSnapshotException
argument_list|(
literal|"Snapshot:"
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" is not one of the known completed snapshots."
argument_list|)
throw|;
block|}
name|SnapshotSentinel
name|sentinel
init|=
name|getRestoreSnapshotSentinel
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sentinel
operator|==
literal|null
condition|)
block|{
comment|// there is no sentinel so restore is not in progress.
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|sentinel
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// another handler is trying to restore to the table, but it isn't the same snapshot source.
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verify snapshot="
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" against="
operator|+
name|sentinel
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" table="
operator|+
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|ForeignException
name|e
init|=
name|sentinel
operator|.
name|getExceptionIfFailed
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
throw|throw
name|e
throw|;
comment|// check to see if we are done
if|if
condition|(
name|sentinel
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore snapshot="
operator|+
name|snapshot
operator|+
literal|" has completed. Notifying the client."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sentinel is not yet finished with restoring snapshot="
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the restore snapshot sentinel for the specified table    * @param tableName table under restore    * @return the restore snapshot handler    */
specifier|private
specifier|synchronized
name|SnapshotSentinel
name|getRestoreSnapshotSentinel
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
block|{
try|try
block|{
return|return
name|restoreHandlers
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
finally|finally
block|{
name|cleanupRestoreSentinels
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Scan the restore handlers and remove the finished ones.    */
specifier|private
name|void
name|cleanupRestoreSentinels
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SnapshotSentinel
argument_list|>
argument_list|>
name|it
init|=
name|restoreHandlers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SnapshotSentinel
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SnapshotSentinel
name|sentinel
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|sentinel
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Implementing Stoppable interface
comment|//
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
comment|// short circuit
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
comment|// make sure we get stop
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
comment|// pass the stop onto take snapshot handlers
if|if
condition|(
name|this
operator|.
name|handler
operator|!=
literal|null
condition|)
name|this
operator|.
name|handler
operator|.
name|cancel
argument_list|(
name|why
argument_list|)
expr_stmt|;
comment|// pass the stop onto all the restore handlers
for|for
control|(
name|SnapshotSentinel
name|restoreHandler
range|:
name|this
operator|.
name|restoreHandlers
operator|.
name|values
argument_list|()
control|)
block|{
name|restoreHandler
operator|.
name|cancel
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
block|}
end_class

end_unit

