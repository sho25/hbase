begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Per-peer per-node throttling controller for replication: enabled if  * bandwidth&gt; 0, a cycle = 100ms, by throttling we guarantee data pushed  * to peer within each cycle won't exceed 'bandwidth' bytes  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationThrottler
block|{
specifier|private
name|boolean
name|enabled
decl_stmt|;
specifier|private
name|double
name|bandwidth
decl_stmt|;
specifier|private
name|long
name|cyclePushSize
decl_stmt|;
specifier|private
name|long
name|cycleStartTick
decl_stmt|;
comment|/**    * ReplicationThrottler constructor    * If bandwidth less than 1, throttling is disabled    * @param bandwidth per cycle(100ms)    */
specifier|public
name|ReplicationThrottler
parameter_list|(
specifier|final
name|double
name|bandwidth
parameter_list|)
block|{
name|this
operator|.
name|bandwidth
operator|=
name|bandwidth
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|this
operator|.
name|bandwidth
operator|>
literal|0
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|enabled
condition|)
block|{
name|this
operator|.
name|cyclePushSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|cycleStartTick
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If throttling is enabled    * @return true if throttling is enabled    */
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|enabled
return|;
block|}
comment|/**    * Get how long the caller should sleep according to the current size and    * current cycle's total push size and start tick, return the sleep interval    * for throttling control.    * @param size is the size of edits to be pushed    * @return sleep interval for throttling control    */
specifier|public
name|long
name|getNextSleepInterval
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|enabled
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|sleepTicks
init|=
literal|0
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// 1. if cyclePushSize exceeds bandwidth, we need to sleep some
comment|//    following cycles to amortize, this case can occur when a single push
comment|//    exceeds the bandwidth
if|if
condition|(
operator|(
name|double
operator|)
name|this
operator|.
name|cyclePushSize
operator|>
name|bandwidth
condition|)
block|{
name|double
name|cycles
init|=
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|this
operator|.
name|cyclePushSize
operator|/
name|bandwidth
argument_list|)
decl_stmt|;
name|long
name|shouldTillTo
init|=
name|this
operator|.
name|cycleStartTick
operator|+
call|(
name|long
call|)
argument_list|(
name|cycles
operator|*
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldTillTo
operator|>
name|now
condition|)
block|{
name|sleepTicks
operator|=
name|shouldTillTo
operator|-
name|now
expr_stmt|;
block|}
else|else
block|{
comment|// no reset in shipEdits since no sleep, so we need to reset cycleStartTick here!
name|this
operator|.
name|cycleStartTick
operator|=
name|now
expr_stmt|;
block|}
name|this
operator|.
name|cyclePushSize
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|long
name|nextCycleTick
init|=
name|this
operator|.
name|cycleStartTick
operator|+
literal|100
decl_stmt|;
comment|//a cycle is 100ms
if|if
condition|(
name|now
operator|>=
name|nextCycleTick
condition|)
block|{
comment|// 2. switch to next cycle if the current cycle has passed
name|this
operator|.
name|cycleStartTick
operator|=
name|now
expr_stmt|;
name|this
operator|.
name|cyclePushSize
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|cyclePushSize
operator|>
literal|0
operator|&&
call|(
name|double
call|)
argument_list|(
name|this
operator|.
name|cyclePushSize
operator|+
name|size
argument_list|)
operator|>=
name|bandwidth
condition|)
block|{
comment|// 3. delay the push to next cycle if exceeds throttling bandwidth.
comment|//    enforcing cyclePushSize> 0 to avoid the unnecessary sleep for case
comment|//    where a cycle's first push size(currentSize)> bandwidth
name|sleepTicks
operator|=
name|nextCycleTick
operator|-
name|now
expr_stmt|;
name|this
operator|.
name|cyclePushSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|sleepTicks
return|;
block|}
comment|/**    * Add current size to the current cycle's total push size    * @param size is the current size added to the current cycle's    * total push size    */
specifier|public
name|void
name|addPushSize
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|enabled
condition|)
block|{
name|this
operator|.
name|cyclePushSize
operator|+=
name|size
expr_stmt|;
block|}
block|}
comment|/**    * Reset the cycle start tick to NOW    */
specifier|public
name|void
name|resetStartTick
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|enabled
condition|)
block|{
name|this
operator|.
name|cycleStartTick
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setBandwidth
parameter_list|(
name|double
name|bandwidth
parameter_list|)
block|{
name|this
operator|.
name|bandwidth
operator|=
name|bandwidth
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|this
operator|.
name|bandwidth
operator|>
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

