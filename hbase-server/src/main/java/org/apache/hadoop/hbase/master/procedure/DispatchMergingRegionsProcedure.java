begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionOpeningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|CatalogJanitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|DispatchMergingRegionsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * The procedure to Merge a region in a table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DispatchMergingRegionsProcedure
extends|extends
name|AbstractStateMachineTableProcedure
argument_list|<
name|DispatchMergingRegionsState
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DispatchMergingRegionsProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|Boolean
name|traceEnabled
decl_stmt|;
specifier|private
name|AssignmentManager
name|assignmentManager
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
specifier|private
name|ServerName
name|regionLocation
decl_stmt|;
specifier|private
name|String
name|regionsToMergeListFullName
decl_stmt|;
specifier|private
name|String
name|regionsToMergeListEncodedName
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|HRegionInfo
index|[]
name|regionsToMerge
decl_stmt|;
specifier|private
name|boolean
name|forcible
decl_stmt|;
specifier|public
name|DispatchMergingRegionsProcedure
parameter_list|()
block|{
name|this
operator|.
name|traceEnabled
operator|=
name|isTraceEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|regionLocation
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|regionsToMergeListFullName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|regionsToMergeListEncodedName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|DispatchMergingRegionsProcedure
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|regionsToMerge
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
block|{
name|super
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|this
operator|.
name|traceEnabled
operator|=
name|isTraceEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
comment|// For now, we only merge 2 regions.  It could be extended to more than 2 regions in
comment|// the future.
assert|assert
operator|(
name|regionsToMerge
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|this
operator|.
name|regionsToMerge
operator|=
name|regionsToMerge
expr_stmt|;
name|this
operator|.
name|forcible
operator|=
name|forcible
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|regionsToMergeListFullName
operator|=
name|getRegionsToMergeListFullNameString
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionsToMergeListEncodedName
operator|=
name|getRegionsToMergeListEncodedNameString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|DispatchMergingRegionsState
name|state
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" execute state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|DISPATCH_MERGING_REGIONS_PREPARE
case|:
name|prepareMergeRegion
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_PRE_OPERATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISPATCH_MERGING_REGIONS_PRE_OPERATION
case|:
comment|//Unused for now - reserve to add preMerge coprocessor in the future
name|setNextState
argument_list|(
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS
case|:
if|if
condition|(
name|MoveRegionsToSameRS
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|setNextState
argument_list|(
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel merging regions "
operator|+
name|getRegionsToMergeListFullNameString
argument_list|()
operator|+
literal|", because can't move them to the same RS"
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_POST_OPERATION
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS
case|:
name|doMergeInRS
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_POST_OPERATION
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISPATCH_MERGING_REGIONS_POST_OPERATION
case|:
comment|//Unused for now - reserve to add postCompletedMerge coprocessor in the future
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error trying to merge regions "
operator|+
name|getRegionsToMergeListFullNameString
argument_list|()
operator|+
literal|" in the table "
operator|+
name|tableName
operator|+
literal|" (in state="
operator|+
name|state
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setFailure
argument_list|(
literal|"master-merge-regions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|DispatchMergingRegionsState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" rollback state="
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|DISPATCH_MERGING_REGIONS_POST_OPERATION
case|:
break|break;
comment|// nothing to rollback
case|case
name|DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS
case|:
name|String
name|msg
init|=
name|this
operator|+
literal|" We are in the "
operator|+
name|state
operator|+
literal|" state."
operator|+
literal|" It is complicated to rollback the merge operation that region server is working on."
operator|+
literal|" Rollback is not supported and we should let the merge operation to complete"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS
case|:
break|break;
comment|// nothing to rollback
case|case
name|DISPATCH_MERGING_REGIONS_PRE_OPERATION
case|:
break|break;
comment|// nothing to rollback
case|case
name|DISPATCH_MERGING_REGIONS_PREPARE
case|:
break|break;
comment|// nothing to rollback
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" unhandled state="
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This will be retried. Unless there is a bug in the code,
comment|// this should be just a "temporary error" (e.g. network down)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed rollback attempt step "
operator|+
name|state
operator|+
literal|" for merging the regions "
operator|+
name|getRegionsToMergeListFullNameString
argument_list|()
operator|+
literal|" in table "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DispatchMergingRegionsState
name|getState
parameter_list|(
specifier|final
name|int
name|stateId
parameter_list|)
block|{
return|return
name|DispatchMergingRegionsState
operator|.
name|valueOf
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
specifier|final
name|DispatchMergingRegionsState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DispatchMergingRegionsState
name|getInitialState
parameter_list|()
block|{
return|return
name|DispatchMergingRegionsState
operator|.
name|DISPATCH_MERGING_REGIONS_PREPARE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setNextState
parameter_list|(
name|DispatchMergingRegionsState
name|state
parameter_list|)
block|{
if|if
condition|(
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
name|setAbortFailure
argument_list|(
literal|"merge-table-regions"
argument_list|,
literal|"abort requested"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setNextState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|DispatchMergingRegionsStateData
operator|.
name|Builder
name|dispatchMergingRegionsMsg
init|=
name|MasterProcedureProtos
operator|.
name|DispatchMergingRegionsStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|MasterProcedureUtil
operator|.
name|toProtoUserInfo
argument_list|(
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setForcible
argument_list|(
name|forcible
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsToMerge
control|)
block|{
name|dispatchMergingRegionsMsg
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dispatchMergingRegionsMsg
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deserializeStateData
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|DispatchMergingRegionsStateData
name|dispatchMergingRegionsMsg
init|=
name|MasterProcedureProtos
operator|.
name|DispatchMergingRegionsStateData
operator|.
name|parseDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|setUser
argument_list|(
name|MasterProcedureUtil
operator|.
name|toUserInfo
argument_list|(
name|dispatchMergingRegionsMsg
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|dispatchMergingRegionsMsg
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|dispatchMergingRegionsMsg
operator|.
name|getRegionInfoCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|regionsToMerge
operator|=
operator|new
name|HRegionInfo
index|[
name|dispatchMergingRegionsMsg
operator|.
name|getRegionInfoCount
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionsToMerge
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionsToMerge
index|[
name|i
index|]
operator|=
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|dispatchMergingRegionsMsg
operator|.
name|getRegionInfo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|toStringClassDetails
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" (table="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" regions="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRegionsToMergeListFullNameString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" forcible="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|forcible
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|acquireLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
operator|!
name|env
operator|.
name|getProcedureQueue
argument_list|()
operator|.
name|waitRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|regionsToMerge
index|[
literal|0
index|]
argument_list|,
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getProcedureQueue
argument_list|()
operator|.
name|wakeRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|regionsToMerge
index|[
literal|0
index|]
argument_list|,
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableOperationType
name|getTableOperationType
parameter_list|()
block|{
return|return
name|TableOperationType
operator|.
name|MERGE
return|;
block|}
comment|/**    * Prepare merge and do some check    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|prepareMergeRegion
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Note: the following logic assumes that we only have 2 regions to merge.  In the future,
comment|// if we want to extend to more than 2 regions, the code needs to modify a little bit.
comment|//
name|CatalogJanitor
name|catalogJanitor
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getCatalogJanitor
argument_list|()
decl_stmt|;
name|boolean
name|regionAHasMergeQualifier
init|=
operator|!
name|catalogJanitor
operator|.
name|cleanMergeQualifier
argument_list|(
name|regionsToMerge
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionAHasMergeQualifier
operator|||
operator|!
name|catalogJanitor
operator|.
name|cleanMergeQualifier
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Skip merging regions "
operator|+
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", because region "
operator|+
operator|(
name|regionAHasMergeQualifier
condition|?
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getEncodedName
argument_list|()
else|:
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getEncodedName
argument_list|()
operator|)
operator|+
literal|" has merge qualifier"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MergeRegionException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|RegionStates
name|regionStates
init|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|RegionState
name|regionStateA
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionState
name|regionStateB
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionStateA
operator|==
literal|null
operator|||
name|regionStateB
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|regionStateA
operator|==
literal|null
condition|?
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getEncodedName
argument_list|()
else|:
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionStateA
operator|.
name|isOpened
argument_list|()
operator|||
operator|!
name|regionStateB
operator|.
name|isOpened
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MergeRegionException
argument_list|(
literal|"Unable to merge regions not online "
operator|+
name|regionStateA
operator|+
literal|", "
operator|+
name|regionStateB
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
operator|||
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|MergeRegionException
argument_list|(
literal|"Can't merge non-default replicas"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|forcible
operator|&&
operator|!
name|HRegionInfo
operator|.
name|areAdjacent
argument_list|(
name|regionsToMerge
index|[
literal|0
index|]
argument_list|,
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MergeRegionException
argument_list|(
literal|"Unable to merge not adjacent regions "
operator|+
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|regionsToMerge
index|[
literal|1
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" where forcible = "
operator|+
name|forcible
argument_list|)
throw|;
block|}
block|}
comment|/**    * Move all regions to the same region server    * @param env MasterProcedureEnv    * @return whether target regions hosted by the same RS    * @throws IOException    */
specifier|private
name|boolean
name|MoveRegionsToSameRS
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure regions are on the same regionserver before send merge
comment|// regions request to region server.
comment|//
name|boolean
name|onSameRS
init|=
name|isRegionsOnTheSameServer
argument_list|(
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|onSameRS
condition|)
block|{
comment|// Note: the following logic assumes that we only have 2 regions to merge.  In the future,
comment|// if we want to extend to more than 2 regions, the code needs to modify a little bit.
comment|//
name|RegionStates
name|regionStates
init|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|regionLocation2
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|RegionLoad
name|loadOfRegionA
init|=
name|getRegionLoad
argument_list|(
name|env
argument_list|,
name|regionLocation
argument_list|,
name|regionsToMerge
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|RegionLoad
name|loadOfRegionB
init|=
name|getRegionLoad
argument_list|(
name|env
argument_list|,
name|regionLocation2
argument_list|,
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadOfRegionA
operator|!=
literal|null
operator|&&
name|loadOfRegionB
operator|!=
literal|null
operator|&&
name|loadOfRegionA
operator|.
name|getRequestsCount
argument_list|()
operator|<
name|loadOfRegionB
operator|.
name|getRequestsCount
argument_list|()
condition|)
block|{
comment|// switch regionsToMerge[0] and regionsToMerge[1]
name|HRegionInfo
name|tmpRegion
init|=
name|this
operator|.
name|regionsToMerge
index|[
literal|0
index|]
decl_stmt|;
name|this
operator|.
name|regionsToMerge
index|[
literal|0
index|]
operator|=
name|this
operator|.
name|regionsToMerge
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|regionsToMerge
index|[
literal|1
index|]
operator|=
name|tmpRegion
expr_stmt|;
name|ServerName
name|tmpLocation
init|=
name|regionLocation
decl_stmt|;
name|regionLocation
operator|=
name|regionLocation2
expr_stmt|;
name|regionLocation2
operator|=
name|tmpLocation
expr_stmt|;
block|}
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|RegionPlan
name|regionPlan
init|=
operator|new
name|RegionPlan
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
argument_list|,
name|regionLocation2
argument_list|,
name|regionLocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving regions to same server for merge: "
operator|+
name|regionPlan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|balance
argument_list|(
name|regionPlan
argument_list|)
expr_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// Make sure check RIT first, then get region location, otherwise
comment|// we would make a wrong result if region is online between getting
comment|// region location and checking RIT
name|boolean
name|isRIT
init|=
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|regionLocation2
operator|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionsToMerge
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|onSameRS
operator|=
name|regionLocation
operator|.
name|equals
argument_list|(
name|regionLocation2
argument_list|)
expr_stmt|;
if|if
condition|(
name|onSameRS
operator|||
operator|!
name|isRIT
condition|)
block|{
comment|// Regions are on the same RS, or regionsToMerge[1] is not in
comment|// RegionInTransition any more
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|InterruptedIOException
name|iioe
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iioe
throw|;
block|}
block|}
do|while
condition|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|)
operator|<=
name|getTimeout
argument_list|(
name|env
argument_list|)
condition|)
do|;
block|}
return|return
name|onSameRS
return|;
block|}
comment|/**    * Do the real merge operation in the region server that hosts regions    * @param env MasterProcedureEnv    * @throws IOException    */
specifier|private
name|void
name|doMergeInRS
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|duration
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
if|if
condition|(
name|getServerName
argument_list|(
name|env
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// The merge probably already happen. Check
name|RegionState
name|regionState
init|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|regionsToMerge
index|[
literal|0
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|.
name|isMerging
argument_list|()
operator|||
name|regionState
operator|.
name|isMerged
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge regions "
operator|+
name|getRegionsToMergeListEncodedNameString
argument_list|()
operator|+
literal|" is in progress or completed.  No need to send a new request."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot sending merge to hosting server of the regions "
operator|+
name|getRegionsToMergeListEncodedNameString
argument_list|()
operator|+
literal|" as the server is unknown"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// TODO: the following RPC call is not idempotent.  Multiple calls (eg. after master
comment|// failover, re-execute this step) could result in some exception thrown that does not
comment|// paint the correct picture.  This behavior is on-par with old releases.  Improvement
comment|// could happen in the future.
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|sendRegionsMerge
argument_list|(
name|getServerName
argument_list|(
name|env
argument_list|)
argument_list|,
name|regionsToMerge
index|[
literal|0
index|]
argument_list|,
name|regionsToMerge
index|[
literal|1
index|]
argument_list|,
name|forcible
argument_list|,
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent merge to server "
operator|+
name|getServerName
argument_list|(
name|env
argument_list|)
operator|+
literal|" for region "
operator|+
name|getRegionsToMergeListEncodedNameString
argument_list|()
operator|+
literal|", focible="
operator|+
name|forcible
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RegionOpeningException
name|roe
parameter_list|)
block|{
comment|// Do a retry since region should be online on RS immediately
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed mergering regions in "
operator|+
name|getServerName
argument_list|(
name|env
argument_list|)
operator|+
literal|", retrying..."
argument_list|,
name|roe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed sending merge to "
operator|+
name|getServerName
argument_list|(
name|env
argument_list|)
operator|+
literal|" for regions "
operator|+
name|getRegionsToMergeListEncodedNameString
argument_list|()
operator|+
literal|", focible="
operator|+
name|forcible
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
do|while
condition|(
operator|(
name|duration
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|)
operator|<=
name|getTimeout
argument_list|(
name|env
argument_list|)
condition|)
do|;
comment|// If we reaches here, it means that we get timed out.
name|String
name|msg
init|=
literal|"Failed sending merge to "
operator|+
name|getServerName
argument_list|(
name|env
argument_list|)
operator|+
literal|" after "
operator|+
name|duration
operator|+
literal|"ms"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
specifier|private
name|RegionLoad
name|getRegionLoad
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|ServerManager
name|serverManager
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|ServerLoad
name|load
init|=
name|serverManager
operator|.
name|getLoad
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionsLoad
init|=
name|load
operator|.
name|getRegionsLoad
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsLoad
operator|!=
literal|null
condition|)
block|{
return|return
name|regionsLoad
operator|.
name|get
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @param env MasterProcedureEnv    * @return whether target regions hosted by the same RS    */
specifier|private
name|boolean
name|isRegionsOnTheSameServer
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|Boolean
name|onSameRS
init|=
literal|true
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|regionLocation
operator|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionLocation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|regionsToMerge
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|regionLocation2
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionLocation2
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|onSameRS
condition|)
block|{
name|onSameRS
operator|=
name|regionLocation
operator|.
name|equals
argument_list|(
name|regionLocation2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// At least one region is not online, merge will fail, no need to continue.
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|regionsToMerge
operator|.
name|length
condition|)
block|{
comment|// Finish checking all regions, return the result;
return|return
name|onSameRS
return|;
block|}
block|}
comment|// If reaching here, at least one region is not online.
name|String
name|msg
init|=
literal|"Skip merging regions "
operator|+
name|getRegionsToMergeListFullNameString
argument_list|()
operator|+
literal|", because region "
operator|+
name|regionsToMerge
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" is not online now."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @param env MasterProcedureEnv    * @return assignmentManager    */
specifier|private
name|AssignmentManager
name|getAssignmentManager
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|assignmentManager
operator|==
literal|null
condition|)
block|{
name|assignmentManager
operator|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
block|}
return|return
name|assignmentManager
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @param env MasterProcedureEnv    * @return timeout value    */
specifier|private
name|int
name|getTimeout
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|==
operator|-
literal|1
condition|)
block|{
name|timeout
operator|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.master.regionmerge.timeout"
argument_list|,
name|regionsToMerge
operator|.
name|length
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|timeout
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @param env MasterProcedureEnv    * @return serverName    */
specifier|private
name|ServerName
name|getServerName
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|regionLocation
operator|==
literal|null
condition|)
block|{
name|regionLocation
operator|=
name|getAssignmentManager
argument_list|(
name|env
argument_list|)
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionsToMerge
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|regionLocation
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @param fullName whether return only encoded name    * @return region names in a list    */
specifier|private
name|String
name|getRegionsToMergeListFullNameString
parameter_list|()
block|{
if|if
condition|(
name|regionsToMergeListFullName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|regionsToMerge
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" ]"
argument_list|)
expr_stmt|;
name|regionsToMergeListFullName
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|regionsToMergeListFullName
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @return encoded region names    */
specifier|private
name|String
name|getRegionsToMergeListEncodedNameString
parameter_list|()
block|{
if|if
condition|(
name|regionsToMergeListEncodedName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|regionsToMerge
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|regionsToMerge
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" ]"
argument_list|)
expr_stmt|;
name|regionsToMergeListEncodedName
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|regionsToMergeListEncodedName
return|;
block|}
comment|/**    * The procedure could be restarted from a different machine. If the variable is null, we need to    * retrieve it.    * @return traceEnabled    */
specifier|private
name|Boolean
name|isTraceEnabled
parameter_list|()
block|{
if|if
condition|(
name|traceEnabled
operator|==
literal|null
condition|)
block|{
name|traceEnabled
operator|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
expr_stmt|;
block|}
return|return
name|traceEnabled
return|;
block|}
block|}
end_class

end_unit

