begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_comment
comment|/**  * In each operation of AsyncRegion, we pass a context object with information of the request.  * We can pass deadline of this request to AsyncRegion implementation to drop timeout request and  * not waste time on timed out requests.  * We can add listeners to watch the event of completion/failure of this operation, which helps us  * make operation of AsyncRegion non-blocking. It is important for Staged Event-Driven Architecture  * (SEDA), see HBASE-16583 for details.  * The context is RPC-free, don't add RPC related code. In RPC we should use listener to deal with  * the result.  * @param<T> The type of result, Void if the operation has no result.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionOperationContext
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|long
name|deadline
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|List
argument_list|<
name|OperationListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|listeners
decl_stmt|;
specifier|public
name|long
name|getDeadline
parameter_list|()
block|{
return|return
name|deadline
return|;
block|}
specifier|public
name|void
name|setDeadline
parameter_list|(
name|long
name|deadline
parameter_list|)
block|{
name|this
operator|.
name|deadline
operator|=
name|deadline
expr_stmt|;
block|}
specifier|public
name|RegionOperationContext
parameter_list|()
block|{
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RegionOperationContext
parameter_list|(
name|RegionOperationContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|)
block|{
name|this
operator|.
name|deadline
operator|=
name|context
operator|.
name|deadline
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|context
operator|.
name|listeners
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionOperationContext
parameter_list|(
name|RpcController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|instanceof
name|HBaseRpcController
condition|)
block|{
name|this
operator|.
name|deadline
operator|=
operator|(
operator|(
name|HBaseRpcController
operator|)
name|controller
operator|)
operator|.
name|getDeadline
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|addListener
parameter_list|(
name|OperationListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * We will call this only in one thread, so no need to lock.    */
specifier|public
name|void
name|error
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
for|for
control|(
name|OperationListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|failed
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * We will call this only in one thread, so no need to lock.    */
specifier|public
name|void
name|done
parameter_list|(
name|T
name|result
parameter_list|)
block|{
for|for
control|(
name|OperationListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|completed
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

