begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureDeque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AvlUtil
operator|.
name|AvlLinkedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|Queue
parameter_list|<
name|TKey
extends|extends
name|Comparable
parameter_list|<
name|TKey
parameter_list|>
parameter_list|>
extends|extends
name|AvlLinkedNode
argument_list|<
name|Queue
argument_list|<
name|TKey
argument_list|>
argument_list|>
block|{
comment|/**    * @param proc must not be null    */
specifier|abstract
name|boolean
name|requireExclusiveLock
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
function_decl|;
specifier|private
specifier|final
name|TKey
name|key
decl_stmt|;
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|private
specifier|final
name|ProcedureDeque
name|runnables
init|=
operator|new
name|ProcedureDeque
argument_list|()
decl_stmt|;
comment|// Reference to status of lock on entity this queue represents.
specifier|private
specifier|final
name|LockStatus
name|lockStatus
decl_stmt|;
specifier|protected
name|Queue
parameter_list|(
name|TKey
name|key
parameter_list|,
name|LockStatus
name|lockStatus
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|1
argument_list|,
name|lockStatus
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Queue
parameter_list|(
name|TKey
name|key
parameter_list|,
name|int
name|priority
parameter_list|,
name|LockStatus
name|lockStatus
parameter_list|)
block|{
assert|assert
name|priority
operator|>=
literal|1
operator|:
literal|"priority must be greater than or equal to 1"
assert|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|lockStatus
operator|=
name|lockStatus
expr_stmt|;
block|}
specifier|protected
name|TKey
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
specifier|protected
name|LockStatus
name|getLockStatus
parameter_list|()
block|{
return|return
name|lockStatus
return|;
block|}
comment|// This should go away when we have the new AM and its events
comment|// and we move xlock to the lock-event-queue.
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
operator|!
name|lockStatus
operator|.
name|hasExclusiveLock
argument_list|()
operator|&&
operator|!
name|isEmpty
argument_list|()
return|;
block|}
comment|// ======================================================================
comment|// Functions to handle procedure queue
comment|// ======================================================================
specifier|public
name|void
name|add
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|,
name|boolean
name|addToFront
parameter_list|)
block|{
if|if
condition|(
name|addToFront
condition|)
block|{
name|runnables
operator|.
name|addFirst
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runnables
operator|.
name|addLast
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Procedure
argument_list|<
name|?
argument_list|>
name|peek
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
name|Procedure
argument_list|<
name|?
argument_list|>
name|poll
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|poll
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|runnables
operator|.
name|size
argument_list|()
return|;
block|}
comment|// ======================================================================
comment|// Generic Helpers
comment|// ======================================================================
specifier|public
name|int
name|compareKey
parameter_list|(
name|TKey
name|cmpKey
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|cmpKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Queue
argument_list|<
name|TKey
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|compareKey
argument_list|(
name|other
operator|.
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s(%s, xlock=%s sharedLock=%s size=%s)"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|key
argument_list|,
name|lockStatus
operator|.
name|hasExclusiveLock
argument_list|()
condition|?
literal|"true ("
operator|+
name|lockStatus
operator|.
name|getExclusiveLockProcIdOwner
argument_list|()
operator|+
literal|")"
else|:
literal|"false"
argument_list|,
name|lockStatus
operator|.
name|getSharedLockCount
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

