begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|slowlog
package|;
end_package

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|RingBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SlowLogParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TooSlowLog
operator|.
name|SlowLogPayload
import|;
end_import

begin_comment
comment|/**  * Event Handler run by disruptor ringbuffer consumer  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|SlowLogEventHandler
implements|implements
name|EventHandler
argument_list|<
name|RingBufferEnvelope
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SlowLogEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|SlowLogPayload
argument_list|>
name|queue
decl_stmt|;
name|SlowLogEventHandler
parameter_list|(
name|int
name|eventCount
parameter_list|)
block|{
name|EvictingQueue
argument_list|<
name|SlowLogPayload
argument_list|>
name|evictingQueue
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|eventCount
argument_list|)
decl_stmt|;
name|queue
operator|=
name|Queues
operator|.
name|synchronizedQueue
argument_list|(
name|evictingQueue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called when a publisher has published an event to the {@link RingBuffer}    *    * @param event published to the {@link RingBuffer}    * @param sequence of the event being processed    * @param endOfBatch flag to indicate if this is the last event in a batch from    *   the {@link RingBuffer}    * @throws Exception if the EventHandler would like the exception handled further up the chain    */
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|RingBufferEnvelope
name|event
parameter_list|,
name|long
name|sequence
parameter_list|,
name|boolean
name|endOfBatch
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RpcLogDetails
name|rpcCallDetails
init|=
name|event
operator|.
name|getPayload
argument_list|()
decl_stmt|;
specifier|final
name|RpcCall
name|rpcCall
init|=
name|rpcCallDetails
operator|.
name|getRpcCall
argument_list|()
decl_stmt|;
specifier|final
name|String
name|clientAddress
init|=
name|rpcCallDetails
operator|.
name|getClientAddress
argument_list|()
decl_stmt|;
specifier|final
name|long
name|responseSize
init|=
name|rpcCallDetails
operator|.
name|getResponseSize
argument_list|()
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|rpcCallDetails
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDescriptor
init|=
name|rpcCall
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|Message
name|param
init|=
name|rpcCall
operator|.
name|getParam
argument_list|()
decl_stmt|;
name|long
name|receiveTime
init|=
name|rpcCall
operator|.
name|getReceiveTime
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|rpcCall
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|processingTime
init|=
call|(
name|int
call|)
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
decl_stmt|;
name|int
name|qTime
init|=
call|(
name|int
call|)
argument_list|(
name|startTime
operator|-
name|receiveTime
argument_list|)
decl_stmt|;
specifier|final
name|SlowLogParams
name|slowLogParams
init|=
name|ProtobufUtil
operator|.
name|getSlowLogParams
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|int
name|numGets
init|=
literal|0
decl_stmt|;
name|int
name|numMutations
init|=
literal|0
decl_stmt|;
name|int
name|numServiceCalls
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|param
operator|instanceof
name|ClientProtos
operator|.
name|MultiRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MultiRequest
name|multi
init|=
operator|(
name|ClientProtos
operator|.
name|MultiRequest
operator|)
name|param
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|RegionAction
name|regionAction
range|:
name|multi
operator|.
name|getRegionActionList
argument_list|()
control|)
block|{
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|regionAction
operator|.
name|getActionList
argument_list|()
control|)
block|{
if|if
condition|(
name|action
operator|.
name|hasMutation
argument_list|()
condition|)
block|{
name|numMutations
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasGet
argument_list|()
condition|)
block|{
name|numGets
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasServiceCall
argument_list|()
condition|)
block|{
name|numServiceCalls
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|String
name|userName
init|=
name|rpcCall
operator|.
name|getRequestUserName
argument_list|()
operator|.
name|orElse
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|String
name|methodDescriptorName
init|=
name|methodDescriptor
operator|!=
literal|null
condition|?
name|methodDescriptor
operator|.
name|getName
argument_list|()
else|:
name|StringUtils
operator|.
name|EMPTY
decl_stmt|;
name|SlowLogPayload
name|slowLogPayload
init|=
name|SlowLogPayload
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCallDetails
argument_list|(
name|methodDescriptorName
operator|+
literal|"("
operator|+
name|param
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|setClientAddress
argument_list|(
name|clientAddress
argument_list|)
operator|.
name|setMethodName
argument_list|(
name|methodDescriptorName
argument_list|)
operator|.
name|setMultiGets
argument_list|(
name|numGets
argument_list|)
operator|.
name|setMultiMutations
argument_list|(
name|numMutations
argument_list|)
operator|.
name|setMultiServiceCalls
argument_list|(
name|numServiceCalls
argument_list|)
operator|.
name|setParam
argument_list|(
name|slowLogParams
operator|!=
literal|null
condition|?
name|slowLogParams
operator|.
name|getParams
argument_list|()
else|:
name|StringUtils
operator|.
name|EMPTY
argument_list|)
operator|.
name|setProcessingTime
argument_list|(
name|processingTime
argument_list|)
operator|.
name|setQueueTime
argument_list|(
name|qTime
argument_list|)
operator|.
name|setRegionName
argument_list|(
name|slowLogParams
operator|!=
literal|null
condition|?
name|slowLogParams
operator|.
name|getRegionName
argument_list|()
else|:
name|StringUtils
operator|.
name|EMPTY
argument_list|)
operator|.
name|setResponseSize
argument_list|(
name|responseSize
argument_list|)
operator|.
name|setServerClass
argument_list|(
name|className
argument_list|)
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|slowLogPayload
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans up slow log payloads    *    * @return true if slow log payloads are cleaned up, false otherwise    */
name|boolean
name|clearSlowLogs
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received request to clean up online slowlog buffer.."
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Retrieve list of slow log payloads    *    * @param request slow log request parameters    * @return list of slow log payloads    */
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|getSlowLogPayloads
parameter_list|(
specifier|final
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloadList
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|queue
operator|.
name|toArray
argument_list|(
operator|new
name|SlowLogPayload
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// latest slow logs first, operator is interested in latest records from in-memory buffer
name|Collections
operator|.
name|reverse
argument_list|(
name|slowLogPayloadList
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFilterProvided
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|slowLogPayloadList
operator|=
name|filterSlowLogs
argument_list|(
name|request
argument_list|,
name|slowLogPayloadList
argument_list|)
expr_stmt|;
block|}
name|int
name|limit
init|=
name|request
operator|.
name|getLimit
argument_list|()
operator|>=
name|slowLogPayloadList
operator|.
name|size
argument_list|()
condition|?
name|slowLogPayloadList
operator|.
name|size
argument_list|()
else|:
name|request
operator|.
name|getLimit
argument_list|()
decl_stmt|;
return|return
name|slowLogPayloadList
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isFilterProvided
parameter_list|(
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getClientAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|filterSlowLogs
parameter_list|(
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
parameter_list|,
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloadList
parameter_list|)
block|{
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|filteredSlowLogPayloads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SlowLogPayload
name|slowLogPayload
range|:
name|slowLogPayloadList
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|slowLogPayload
operator|.
name|getRegionName
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|filteredSlowLogPayloads
operator|.
name|add
argument_list|(
name|slowLogPayload
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|slowLogPayload
operator|.
name|getRegionName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|filteredSlowLogPayloads
operator|.
name|add
argument_list|(
name|slowLogPayload
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getClientAddress
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|slowLogPayload
operator|.
name|getClientAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getClientAddress
argument_list|()
argument_list|)
condition|)
block|{
name|filteredSlowLogPayloads
operator|.
name|add
argument_list|(
name|slowLogPayload
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|slowLogPayload
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|filteredSlowLogPayloads
operator|.
name|add
argument_list|(
name|slowLogPayload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filteredSlowLogPayloads
return|;
block|}
block|}
end_class

end_unit

