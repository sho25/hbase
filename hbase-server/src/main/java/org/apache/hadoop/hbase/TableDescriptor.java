begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_comment
comment|/**  * Class represents table state on HDFS.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableDescriptor
block|{
specifier|private
name|HTableDescriptor
name|hTableDescriptor
decl_stmt|;
comment|/**    * Don't use, state was moved to meta, use MetaTableAccessor instead    * @deprecated state was moved to meta    */
annotation|@
name|Deprecated
annotation|@
name|Nullable
specifier|private
name|TableState
operator|.
name|State
name|tableState
decl_stmt|;
comment|/**    * Creates TableDescriptor with all fields.    * @param hTableDescriptor HTableDescriptor to use    * @param tableState table state    * @deprecated state was moved to meta    */
annotation|@
name|Deprecated
specifier|public
name|TableDescriptor
parameter_list|(
name|HTableDescriptor
name|hTableDescriptor
parameter_list|,
annotation|@
name|Nullable
name|TableState
operator|.
name|State
name|tableState
parameter_list|)
block|{
name|this
operator|.
name|hTableDescriptor
operator|=
name|hTableDescriptor
expr_stmt|;
name|this
operator|.
name|tableState
operator|=
name|tableState
expr_stmt|;
block|}
comment|/**    * Creates TableDescriptor with Enabled table.    * @param hTableDescriptor HTableDescriptor to use    */
annotation|@
name|VisibleForTesting
specifier|public
name|TableDescriptor
parameter_list|(
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
block|{
name|this
argument_list|(
name|hTableDescriptor
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Associated HTableDescriptor    * @return instance of HTableDescriptor    */
specifier|public
name|HTableDescriptor
name|getHTableDescriptor
parameter_list|()
block|{
return|return
name|hTableDescriptor
return|;
block|}
specifier|public
name|void
name|setHTableDescriptor
parameter_list|(
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
block|{
name|this
operator|.
name|hTableDescriptor
operator|=
name|hTableDescriptor
expr_stmt|;
block|}
comment|/**    * @return table state    * @deprecated state was moved to meta    */
annotation|@
name|Deprecated
annotation|@
name|Nullable
specifier|public
name|TableState
operator|.
name|State
name|getTableState
parameter_list|()
block|{
return|return
name|tableState
return|;
block|}
comment|/**    * @param tableState state to set for table    * @deprecated state was moved to meta    */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTableState
parameter_list|(
annotation|@
name|Nullable
name|TableState
operator|.
name|State
name|tableState
parameter_list|)
block|{
name|this
operator|.
name|tableState
operator|=
name|tableState
expr_stmt|;
block|}
comment|/**    * Convert to PB.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|HBaseProtos
operator|.
name|TableDescriptor
name|convert
parameter_list|()
block|{
name|HBaseProtos
operator|.
name|TableDescriptor
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|TableDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSchema
argument_list|(
name|hTableDescriptor
operator|.
name|convert
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setState
argument_list|(
name|tableState
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert from PB    */
specifier|public
specifier|static
name|TableDescriptor
name|convert
parameter_list|(
name|HBaseProtos
operator|.
name|TableDescriptor
name|proto
parameter_list|)
block|{
name|HTableDescriptor
name|hTableDescriptor
init|=
name|HTableDescriptor
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|TableState
operator|.
name|State
name|state
init|=
name|proto
operator|.
name|hasState
argument_list|()
condition|?
name|TableState
operator|.
name|State
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getState
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|TableDescriptor
argument_list|(
name|hTableDescriptor
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|/**    * @return This instance serialized with pb with pb magic prefix    * @see #parseFrom(byte[])    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|convert
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param bytes A pb serialized {@link TableDescriptor} instance with pb magic prefix    * @see #toByteArray()    */
specifier|public
specifier|static
name|TableDescriptor
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Expected PB encoded TableDescriptor"
argument_list|)
throw|;
block|}
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|TableDescriptor
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|TableDescriptor
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|TableDescriptor
name|ts
decl_stmt|;
try|try
block|{
name|ts
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|convert
argument_list|(
name|ts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TableDescriptor
name|that
init|=
operator|(
name|TableDescriptor
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|hTableDescriptor
operator|!=
literal|null
condition|?
operator|!
name|hTableDescriptor
operator|.
name|equals
argument_list|(
name|that
operator|.
name|hTableDescriptor
argument_list|)
else|:
name|that
operator|.
name|hTableDescriptor
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tableState
operator|!=
name|that
operator|.
name|tableState
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|hTableDescriptor
operator|!=
literal|null
condition|?
name|hTableDescriptor
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|tableState
operator|!=
literal|null
condition|?
name|tableState
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TableDescriptor{"
operator|+
literal|"hTableDescriptor="
operator|+
name|hTableDescriptor
operator|+
literal|", tableState="
operator|+
name|tableState
operator|+
literal|'}'
return|;
block|}
specifier|public
specifier|static
name|HTableDescriptor
name|metaTableDescriptor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|metaDescriptor
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_META_VERSIONS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_META_VERSIONS
argument_list|)
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_META_BLOCK_SIZE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_META_BLOCK_SIZE
argument_list|)
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
comment|// Disable blooms for meta.  Needs work.  Seems to mess w/ getClosestOrBefore.
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
comment|// Enable cache of data blocks in L1 if more than one caching tier deployed:
comment|// e.g. if using CombinedBlockCache (BucketCache).
operator|.
name|setCacheDataInL1
argument_list|(
literal|true
argument_list|)
block|,
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|TABLE_FAMILY
argument_list|)
comment|// Ten is arbitrary number.  Keep versions to help debugging.
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
comment|// Disable blooms for meta.  Needs work.  Seems to mess w/ getClosestOrBefore.
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
comment|// Enable cache of data blocks in L1 if more than one caching tier deployed:
comment|// e.g. if using CombinedBlockCache (BucketCache).
operator|.
name|setCacheDataInL1
argument_list|(
literal|true
argument_list|)
block|}
argument_list|)
block|{     }
decl_stmt|;
name|metaDescriptor
operator|.
name|addCoprocessor
argument_list|(
literal|"org.apache.hadoop.hbase.coprocessor.MultiRowMutationEndpoint"
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_SYSTEM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|metaDescriptor
return|;
block|}
block|}
end_class

end_unit

