begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_comment
comment|/**  * Represents an entry in the {@link LruBlockCache}.  *  *<p>Makes the block memory-aware with {@link HeapSize} and Comparable  * to sort by access time for the LRU.  It also takes care of priority by  * either instantiating as in-memory or handling the transition from single  * to multiple access.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LruCachedBlock
implements|implements
name|HeapSize
implements|,
name|Comparable
argument_list|<
name|LruCachedBlock
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|long
name|PER_BLOCK_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|3
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
operator|(
literal|3
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
operator|+
name|ClassSize
operator|.
name|STRING
operator|+
name|ClassSize
operator|.
name|BYTE_BUFFER
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockCacheKey
name|cacheKey
decl_stmt|;
specifier|private
specifier|final
name|Cacheable
name|buf
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|accessTime
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|BlockPriority
name|priority
decl_stmt|;
comment|/**    * Time this block was cached.  Presumes we are created just before we are added to the cache.    */
specifier|private
specifier|final
name|long
name|cachedTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|public
name|LruCachedBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|,
name|long
name|accessTime
parameter_list|)
block|{
name|this
argument_list|(
name|cacheKey
argument_list|,
name|buf
argument_list|,
name|accessTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LruCachedBlock
parameter_list|(
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|buf
parameter_list|,
name|long
name|accessTime
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
operator|.
name|cacheKey
operator|=
name|cacheKey
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|accessTime
operator|=
name|accessTime
expr_stmt|;
comment|// We approximate the size of this class by the size of its name string
comment|// plus the size of its byte buffer plus the overhead associated with all
comment|// the base classes. We also include the base class
comment|// sizes in the PER_BLOCK_OVERHEAD variable rather than align()ing them with
comment|// their buffer lengths. This variable is used elsewhere in unit tests.
name|this
operator|.
name|size
operator|=
name|ClassSize
operator|.
name|align
argument_list|(
name|cacheKey
operator|.
name|heapSize
argument_list|()
argument_list|)
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|)
operator|+
name|PER_BLOCK_OVERHEAD
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|MEMORY
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|SINGLE
expr_stmt|;
block|}
block|}
comment|/**    * Block has been accessed.    * @param accessTime Last access; this is actually a incremented sequence number rather than an    * actual time.    */
specifier|public
name|void
name|access
parameter_list|(
name|long
name|accessTime
parameter_list|)
block|{
name|this
operator|.
name|accessTime
operator|=
name|accessTime
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|priority
operator|==
name|BlockPriority
operator|.
name|SINGLE
condition|)
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|MULTI
expr_stmt|;
block|}
block|}
comment|/**    * @return Time we were cached at in nano seconds.    */
specifier|public
name|long
name|getCachedTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|cachedTime
return|;
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|LruCachedBlock
name|that
parameter_list|)
block|{
comment|// Newer accessed blocks sort before older ones.
if|if
condition|(
name|this
operator|.
name|accessTime
operator|==
name|that
operator|.
name|accessTime
condition|)
return|return
literal|0
return|;
return|return
name|this
operator|.
name|accessTime
operator|<
name|that
operator|.
name|accessTime
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LruCachedBlock
name|other
init|=
operator|(
name|LruCachedBlock
operator|)
name|obj
decl_stmt|;
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|Cacheable
name|getBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
specifier|public
name|BlockCacheKey
name|getCacheKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheKey
return|;
block|}
specifier|public
name|BlockPriority
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
block|}
end_class

end_unit

