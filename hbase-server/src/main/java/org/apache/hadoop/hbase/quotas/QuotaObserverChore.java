begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MetricsMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * Reads the currently received Region filesystem-space use reports and acts on those which  * violate a defined quota.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|QuotaObserverChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuotaObserverChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUOTA_OBSERVER_CHORE_PERIOD_KEY
init|=
literal|"hbase.master.quotas.observer.chore.period"
decl_stmt|;
specifier|static
specifier|final
name|int
name|QUOTA_OBSERVER_CHORE_PERIOD_DEFAULT
init|=
literal|1000
operator|*
literal|60
operator|*
literal|1
decl_stmt|;
comment|// 1 minutes in millis
specifier|static
specifier|final
name|String
name|QUOTA_OBSERVER_CHORE_DELAY_KEY
init|=
literal|"hbase.master.quotas.observer.chore.delay"
decl_stmt|;
specifier|static
specifier|final
name|long
name|QUOTA_OBSERVER_CHORE_DELAY_DEFAULT
init|=
literal|1000L
operator|*
literal|15L
decl_stmt|;
comment|// 15 seconds in millis
specifier|static
specifier|final
name|String
name|QUOTA_OBSERVER_CHORE_TIMEUNIT_KEY
init|=
literal|"hbase.master.quotas.observer.chore.timeunit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUOTA_OBSERVER_CHORE_TIMEUNIT_DEFAULT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|QUOTA_OBSERVER_CHORE_REPORT_PERCENT_KEY
init|=
literal|"hbase.master.quotas.observer.report.percent"
decl_stmt|;
specifier|static
specifier|final
name|double
name|QUOTA_OBSERVER_CHORE_REPORT_PERCENT_DEFAULT
init|=
literal|0.95
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGION_REPORT_RETENTION_DURATION_KEY
init|=
literal|"hbase.master.quotas.region.report.retention.millis"
decl_stmt|;
specifier|static
specifier|final
name|long
name|REGION_REPORT_RETENTION_DURATION_DEFAULT
init|=
literal|1000
operator|*
literal|60
operator|*
literal|10
decl_stmt|;
comment|// 10 minutes
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|MasterQuotaManager
name|quotaManager
decl_stmt|;
specifier|private
specifier|final
name|MetricsMaster
name|metrics
decl_stmt|;
comment|/*    * Callback that changes in quota snapshots are passed to.    */
specifier|private
specifier|final
name|SpaceQuotaSnapshotNotifier
name|snapshotNotifier
decl_stmt|;
comment|/*    * Preserves the state of quota snapshots for tables and namespaces    */
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|tableQuotaSnapshots
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|readOnlyTableQuotaSnapshots
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|namespaceQuotaSnapshots
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|readOnlyNamespaceSnapshots
decl_stmt|;
comment|// The time, in millis, that region reports should be kept by the master
specifier|private
specifier|final
name|long
name|regionReportLifetimeMillis
decl_stmt|;
comment|/*    * Encapsulates logic for tracking the state of a table/namespace WRT space quotas    */
specifier|private
name|QuotaSnapshotStore
argument_list|<
name|TableName
argument_list|>
name|tableSnapshotStore
decl_stmt|;
specifier|private
name|QuotaSnapshotStore
argument_list|<
name|String
argument_list|>
name|namespaceSnapshotStore
decl_stmt|;
specifier|public
name|QuotaObserverChore
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|MetricsMaster
name|metrics
parameter_list|)
block|{
name|this
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|master
operator|.
name|getSpaceQuotaSnapshotNotifier
argument_list|()
argument_list|,
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
argument_list|,
name|master
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
name|QuotaObserverChore
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SpaceQuotaSnapshotNotifier
name|snapshotNotifier
parameter_list|,
name|MasterQuotaManager
name|quotaManager
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|MetricsMaster
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|QuotaObserverChore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|stopper
argument_list|,
name|getPeriod
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getInitialDelay
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getTimeUnit
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|quotaManager
operator|=
name|quotaManager
expr_stmt|;
name|this
operator|.
name|snapshotNotifier
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|snapshotNotifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableQuotaSnapshots
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|readOnlyTableQuotaSnapshots
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tableQuotaSnapshots
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespaceQuotaSnapshots
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|readOnlyNamespaceSnapshots
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|namespaceQuotaSnapshots
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionReportLifetimeMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|REGION_REPORT_RETENTION_DURATION_KEY
argument_list|,
name|REGION_REPORT_RETENTION_DURATION_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Refreshing space quotas in RegionServer"
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|_chore
argument_list|()
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrementQuotaObserverTime
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1_000_000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to process quota reports and update quota state. Will retry."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|_chore
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the total set of tables that have quotas defined. Includes table quotas
comment|// and tables included by namespace quotas.
name|TablesWithQuotas
name|tablesWithQuotas
init|=
name|fetchAllTablesWithQuotasDefined
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found following tables with quotas: "
operator|+
name|tablesWithQuotas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
comment|// Set the number of namespaces and tables with quotas defined
name|metrics
operator|.
name|setNumSpaceQuotas
argument_list|(
name|tablesWithQuotas
operator|.
name|getTableQuotaTables
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|tablesWithQuotas
operator|.
name|getNamespacesWithQuotas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The current "view" of region space use. Used henceforth.
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|reportedRegionSpaceUse
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using "
operator|+
name|reportedRegionSpaceUse
operator|.
name|size
argument_list|()
operator|+
literal|" region space use reports: "
operator|+
name|reportedRegionSpaceUse
argument_list|)
expr_stmt|;
block|}
comment|// Remove the "old" region reports
name|pruneOldRegionReports
argument_list|()
expr_stmt|;
comment|// Create the stores to track table and namespace snapshots
name|initializeSnapshotStores
argument_list|(
name|reportedRegionSpaceUse
argument_list|)
expr_stmt|;
comment|// Report the number of (non-expired) region size reports
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|setNumRegionSizeReports
argument_list|(
name|reportedRegionSpaceUse
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Filter out tables for which we don't have adequate regionspace reports yet.
comment|// Important that we do this after we instantiate the stores above
comment|// This gives us a set of Tables which may or may not be violating their quota.
comment|// To be safe, we want to make sure that these are not in violation.
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInLimbo
init|=
name|tablesWithQuotas
operator|.
name|filterInsufficientlyReportedTables
argument_list|(
name|tableSnapshotStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Filtered insufficiently reported tables, left with "
operator|+
name|reportedRegionSpaceUse
operator|.
name|size
argument_list|()
operator|+
literal|" regions reported"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableName
name|tableInLimbo
range|:
name|tablesInLimbo
control|)
block|{
specifier|final
name|SpaceQuotaSnapshot
name|currentSnapshot
init|=
name|tableSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|tableInLimbo
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving "
operator|+
name|tableInLimbo
operator|+
literal|" out of violation because fewer region sizes were"
operator|+
literal|" reported than required."
argument_list|)
expr_stmt|;
block|}
name|SpaceQuotaSnapshot
name|targetSnapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
name|currentSnapshot
operator|.
name|getUsage
argument_list|()
argument_list|,
name|currentSnapshot
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|snapshotNotifier
operator|.
name|transitionTable
argument_list|(
name|tableInLimbo
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
comment|// Update it in the Table QuotaStore so that memory is consistent with no violation.
name|tableSnapshotStore
operator|.
name|setCurrentState
argument_list|(
name|tableInLimbo
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Transition each table to/from quota violation based on the current and target state.
comment|// Only table quotas are enacted.
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithTableQuotas
init|=
name|tablesWithQuotas
operator|.
name|getTableQuotaTables
argument_list|()
decl_stmt|;
name|processTablesWithQuotas
argument_list|(
name|tablesWithTableQuotas
argument_list|)
expr_stmt|;
comment|// For each Namespace quota, transition each table in the namespace in or out of violation
comment|// only if a table quota violation policy has not already been applied.
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesWithQuotas
init|=
name|tablesWithQuotas
operator|.
name|getNamespacesWithQuotas
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableName
argument_list|>
name|tablesByNamespace
init|=
name|tablesWithQuotas
operator|.
name|getTablesByNamespace
argument_list|()
decl_stmt|;
name|processNamespacesWithQuotas
argument_list|(
name|namespacesWithQuotas
argument_list|,
name|tablesByNamespace
argument_list|)
expr_stmt|;
block|}
name|void
name|initializeSnapshotStores
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
parameter_list|)
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|immutableRegionSpaceUse
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|regionSizes
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableSnapshotStore
operator|==
literal|null
condition|)
block|{
name|tableSnapshotStore
operator|=
operator|new
name|TableQuotaSnapshotStore
argument_list|(
name|conn
argument_list|,
name|this
argument_list|,
name|immutableRegionSpaceUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableSnapshotStore
operator|.
name|setRegionUsage
argument_list|(
name|immutableRegionSpaceUse
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaceSnapshotStore
operator|==
literal|null
condition|)
block|{
name|namespaceSnapshotStore
operator|=
operator|new
name|NamespaceQuotaSnapshotStore
argument_list|(
name|conn
argument_list|,
name|this
argument_list|,
name|immutableRegionSpaceUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespaceSnapshotStore
operator|.
name|setRegionUsage
argument_list|(
name|immutableRegionSpaceUse
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Processes each {@code TableName} which has a quota defined and moves it in or out of    * violation based on the space use.    *    * @param tablesWithTableQuotas The HBase tables which have quotas defined    */
name|void
name|processTablesWithQuotas
parameter_list|(
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithTableQuotas
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|numTablesInViolation
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tablesWithTableQuotas
control|)
block|{
specifier|final
name|SpaceQuota
name|spaceQuota
init|=
name|tableSnapshotStore
operator|.
name|getSpaceQuota
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|spaceQuota
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpectedly did not find a space quota for "
operator|+
name|table
operator|+
literal|", maybe it was recently deleted."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|SpaceQuotaSnapshot
name|currentSnapshot
init|=
name|tableSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|targetSnapshot
init|=
name|tableSnapshotStore
operator|.
name|getTargetState
argument_list|(
name|table
argument_list|,
name|spaceQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing "
operator|+
name|table
operator|+
literal|" with current="
operator|+
name|currentSnapshot
operator|+
literal|", target="
operator|+
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
name|updateTableQuota
argument_list|(
name|table
argument_list|,
name|currentSnapshot
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
name|numTablesInViolation
operator|++
expr_stmt|;
block|}
block|}
comment|// Report the number of tables in violation
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|setNumTableInSpaceQuotaViolation
argument_list|(
name|numTablesInViolation
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Processes each namespace which has a quota defined and moves all of the tables contained    * in that namespace into or out of violation of the quota. Tables which are already in    * violation of a quota at the table level which<em>also</em> have a reside in a namespace    * with a violated quota will not have the namespace quota enacted. The table quota takes    * priority over the namespace quota.    *    * @param namespacesWithQuotas The set of namespaces that have quotas defined    * @param tablesByNamespace A mapping of namespaces and the tables contained in those namespaces    */
name|void
name|processNamespacesWithQuotas
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|namespacesWithQuotas
parameter_list|,
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableName
argument_list|>
name|tablesByNamespace
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|numNamespacesInViolation
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|namespacesWithQuotas
control|)
block|{
comment|// Get the quota definition for the namespace
specifier|final
name|SpaceQuota
name|spaceQuota
init|=
name|namespaceSnapshotStore
operator|.
name|getSpaceQuota
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|spaceQuota
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not get Namespace space quota for "
operator|+
name|namespace
operator|+
literal|", maybe it was recently deleted."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|SpaceQuotaSnapshot
name|currentSnapshot
init|=
name|namespaceSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|targetSnapshot
init|=
name|namespaceSnapshotStore
operator|.
name|getTargetState
argument_list|(
name|namespace
argument_list|,
name|spaceQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing "
operator|+
name|namespace
operator|+
literal|" with current="
operator|+
name|currentSnapshot
operator|+
literal|", target="
operator|+
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
name|updateNamespaceQuota
argument_list|(
name|namespace
argument_list|,
name|currentSnapshot
argument_list|,
name|targetSnapshot
argument_list|,
name|tablesByNamespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
name|numNamespacesInViolation
operator|++
expr_stmt|;
block|}
block|}
comment|// Report the number of namespaces in violation
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|setNumNamespacesInSpaceQuotaViolation
argument_list|(
name|numNamespacesInViolation
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the hbase:quota table with the new quota policy for this<code>table</code>    * if necessary.    *    * @param table The table being checked    * @param currentSnapshot The state of the quota on this table from the previous invocation.    * @param targetSnapshot The state the quota should be in for this table.    */
name|void
name|updateTableQuota
parameter_list|(
name|TableName
name|table
parameter_list|,
name|SpaceQuotaSnapshot
name|currentSnapshot
parameter_list|,
name|SpaceQuotaSnapshot
name|targetSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SpaceQuotaStatus
name|currentStatus
init|=
name|currentSnapshot
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
specifier|final
name|SpaceQuotaStatus
name|targetStatus
init|=
name|targetSnapshot
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
comment|// If we're changing something, log it.
if|if
condition|(
operator|!
name|currentSnapshot
operator|.
name|equals
argument_list|(
name|targetSnapshot
argument_list|)
condition|)
block|{
comment|// If the target is none, we're moving out of violation. Update the hbase:quota table
if|if
condition|(
operator|!
name|targetStatus
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|table
operator|+
literal|" moving into observance of table space quota."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// We're either moving into violation or changing violation policies
name|LOG
operator|.
name|debug
argument_list|(
name|table
operator|+
literal|" moving into violation of table space quota with policy of "
operator|+
name|targetStatus
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|snapshotNotifier
operator|.
name|transitionTable
argument_list|(
name|table
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
comment|// Update it in memory
name|tableSnapshotStore
operator|.
name|setCurrentState
argument_list|(
name|table
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// Policies are the same, so we have nothing to do except log this. Don't need to re-update
comment|// the quota table
if|if
condition|(
operator|!
name|currentStatus
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|table
operator|+
literal|" remains in observance of quota."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|table
operator|+
literal|" remains in violation of quota."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Updates the hbase:quota table with the target quota policy for this<code>namespace</code>    * if necessary.    *    * @param namespace The namespace being checked    * @param currentSnapshot The state of the quota on this namespace from the previous invocation    * @param targetSnapshot The state the quota should be in for this namespace    * @param tablesByNamespace A mapping of tables in namespaces.    */
name|void
name|updateNamespaceQuota
parameter_list|(
name|String
name|namespace
parameter_list|,
name|SpaceQuotaSnapshot
name|currentSnapshot
parameter_list|,
name|SpaceQuotaSnapshot
name|targetSnapshot
parameter_list|,
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableName
argument_list|>
name|tablesByNamespace
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SpaceQuotaStatus
name|targetStatus
init|=
name|targetSnapshot
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
comment|// When the policies differ, we need to move into or out of violatino
if|if
condition|(
operator|!
name|currentSnapshot
operator|.
name|equals
argument_list|(
name|targetSnapshot
argument_list|)
condition|)
block|{
comment|// We want to have a policy of "NONE", moving out of violation
if|if
condition|(
operator|!
name|targetStatus
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
for|for
control|(
name|TableName
name|tableInNS
range|:
name|tablesByNamespace
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
control|)
block|{
comment|// If there is a quota on this table in violation
if|if
condition|(
name|tableSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|tableInNS
argument_list|)
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
comment|// Table-level quota violation policy is being applied here.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Not activating Namespace violation policy because a Table violation"
operator|+
literal|" policy is already in effect for "
operator|+
name|tableInNS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tableInNS
operator|+
literal|" moving into observance of namespace space quota"
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotNotifier
operator|.
name|transitionTable
argument_list|(
name|tableInNS
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We want to move into violation at the NS level
block|}
else|else
block|{
comment|// Moving tables in the namespace into violation or to a different violation policy
for|for
control|(
name|TableName
name|tableInNS
range|:
name|tablesByNamespace
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
control|)
block|{
specifier|final
name|SpaceQuotaSnapshot
name|tableQuotaSnapshot
init|=
name|tableSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|tableInNS
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasTableQuota
init|=
name|QuotaSnapshotStore
operator|.
name|NO_QUOTA
operator|!=
name|tableQuotaSnapshot
decl_stmt|;
if|if
condition|(
name|hasTableQuota
operator|&&
name|tableQuotaSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
comment|// Table-level quota violation policy is being applied here.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Not activating Namespace violation policy because a Table violation"
operator|+
literal|" policy is already in effect for "
operator|+
name|tableInNS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No table quota present or a table quota present that is not in violation
name|LOG
operator|.
name|info
argument_list|(
name|tableInNS
operator|+
literal|" moving into violation of namespace space quota with policy "
operator|+
name|targetStatus
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotNotifier
operator|.
name|transitionTable
argument_list|(
name|tableInNS
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Update the new state in memory for this namespace
name|namespaceSnapshotStore
operator|.
name|setCurrentState
argument_list|(
name|namespace
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Policies are the same
if|if
condition|(
operator|!
name|targetStatus
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
comment|// Both are NONE, so we remain in observance
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|namespace
operator|+
literal|" remains in observance of quota."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Namespace quota is still in violation, need to enact if the table quota is not
comment|// taking priority.
for|for
control|(
name|TableName
name|tableInNS
range|:
name|tablesByNamespace
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
control|)
block|{
comment|// Does a table policy exist
if|if
condition|(
name|tableSnapshotStore
operator|.
name|getCurrentState
argument_list|(
name|tableInNS
argument_list|)
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
comment|// Table-level quota violation policy is being applied here.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Not activating Namespace violation policy because Table violation"
operator|+
literal|" policy is already in effect for "
operator|+
name|tableInNS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No table policy, so enact namespace policy
name|LOG
operator|.
name|info
argument_list|(
name|tableInNS
operator|+
literal|" moving into violation of namespace space quota"
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotNotifier
operator|.
name|transitionTable
argument_list|(
name|tableInNS
argument_list|,
name|targetSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Removes region reports over a certain age.    */
name|void
name|pruneOldRegionReports
parameter_list|()
block|{
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|pruneTime
init|=
name|now
operator|-
name|regionReportLifetimeMillis
decl_stmt|;
specifier|final
name|int
name|numRemoved
init|=
name|quotaManager
operator|.
name|pruneEntriesOlderThan
argument_list|(
name|pruneTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removed "
operator|+
name|numRemoved
operator|+
literal|" old region size reports that were older than "
operator|+
name|pruneTime
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Computes the set of all tables that have quotas defined. This includes tables with quotas    * explicitly set on them, in addition to tables that exist namespaces which have a quota    * defined.    */
name|TablesWithQuotas
name|fetchAllTablesWithQuotasDefined
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Scan
name|scan
init|=
name|QuotaTableUtil
operator|.
name|makeScan
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|TablesWithQuotas
name|tablesWithQuotas
init|=
operator|new
name|TablesWithQuotas
argument_list|(
name|conn
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|QuotaRetriever
name|scanner
init|=
operator|new
name|QuotaRetriever
argument_list|()
init|)
block|{
name|scanner
operator|.
name|init
argument_list|(
name|conn
argument_list|,
name|scan
argument_list|)
expr_stmt|;
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
comment|// Only one of namespace and tablename should be 'null'
specifier|final
name|String
name|namespace
init|=
name|quotaSettings
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|quotaSettings
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|QuotaType
operator|.
name|SPACE
operator|!=
name|quotaSettings
operator|.
name|getQuotaType
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
assert|assert
name|tableName
operator|==
literal|null
assert|;
comment|// Collect all of the tables in the namespace
name|TableName
index|[]
name|tablesInNS
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableNamesByNamespace
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableUnderNs
range|:
name|tablesInNS
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding "
operator|+
name|tableUnderNs
operator|+
literal|" under "
operator|+
name|namespace
operator|+
literal|" as having a namespace quota"
argument_list|)
expr_stmt|;
block|}
name|tablesWithQuotas
operator|.
name|addNamespaceQuotaTable
argument_list|(
name|tableUnderNs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|tableName
operator|!=
literal|null
assert|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding "
operator|+
name|tableName
operator|+
literal|" as having table quota."
argument_list|)
expr_stmt|;
block|}
comment|// namespace is already null, must be a non-null tableName
name|tablesWithQuotas
operator|.
name|addTableQuotaTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tablesWithQuotas
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|QuotaSnapshotStore
argument_list|<
name|TableName
argument_list|>
name|getTableSnapshotStore
parameter_list|()
block|{
return|return
name|tableSnapshotStore
return|;
block|}
annotation|@
name|VisibleForTesting
name|QuotaSnapshotStore
argument_list|<
name|String
argument_list|>
name|getNamespaceSnapshotStore
parameter_list|()
block|{
return|return
name|namespaceSnapshotStore
return|;
block|}
comment|/**    * Returns an unmodifiable view over the current {@link SpaceQuotaSnapshot} objects    * for each HBase table with a quota defined.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|getTableQuotaSnapshots
parameter_list|()
block|{
return|return
name|readOnlyTableQuotaSnapshots
return|;
block|}
comment|/**    * Returns an unmodifiable view over the current {@link SpaceQuotaSnapshot} objects    * for each HBase namespace with a quota defined.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|getNamespaceQuotaSnapshots
parameter_list|()
block|{
return|return
name|readOnlyNamespaceSnapshots
return|;
block|}
comment|/**    * Fetches the {@link SpaceQuotaSnapshot} for the given table.    */
name|SpaceQuotaSnapshot
name|getTableQuotaSnapshot
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|SpaceQuotaSnapshot
name|state
init|=
name|this
operator|.
name|tableQuotaSnapshots
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
comment|// No tracked state implies observance.
return|return
name|QuotaSnapshotStore
operator|.
name|NO_QUOTA
return|;
block|}
return|return
name|state
return|;
block|}
comment|/**    * Stores the quota state for the given table.    */
name|void
name|setTableQuotaSnapshot
parameter_list|(
name|TableName
name|table
parameter_list|,
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|tableQuotaSnapshots
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetches the {@link SpaceQuotaSnapshot} for the given namespace from this chore.    */
name|SpaceQuotaSnapshot
name|getNamespaceQuotaSnapshot
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|SpaceQuotaSnapshot
name|state
init|=
name|this
operator|.
name|namespaceQuotaSnapshots
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
comment|// No tracked state implies observance.
return|return
name|QuotaSnapshotStore
operator|.
name|NO_QUOTA
return|;
block|}
return|return
name|state
return|;
block|}
comment|/**    * Stores the given {@code snapshot} for the given {@code namespace} in this chore.    */
name|void
name|setNamespaceQuotaSnapshot
parameter_list|(
name|String
name|namespace
parameter_list|,
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|namespaceQuotaSnapshots
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extracts the period for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore period or the default value in the given timeunit.    * @see #getTimeUnit(Configuration)    */
specifier|static
name|int
name|getPeriod
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|QUOTA_OBSERVER_CHORE_PERIOD_KEY
argument_list|,
name|QUOTA_OBSERVER_CHORE_PERIOD_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the initial delay for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore initial delay or the default value in the given timeunit.    * @see #getTimeUnit(Configuration)    */
specifier|static
name|long
name|getInitialDelay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|QUOTA_OBSERVER_CHORE_DELAY_KEY
argument_list|,
name|QUOTA_OBSERVER_CHORE_DELAY_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the time unit for the chore period and initial delay from the configuration. The    * configuration value for {@link #QUOTA_OBSERVER_CHORE_TIMEUNIT_KEY} must correspond to    * a {@link TimeUnit} value.    *    * @param conf The configuration object.    * @return The configured time unit for the chore period and initial delay or the default value.    */
specifier|static
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|QUOTA_OBSERVER_CHORE_TIMEUNIT_KEY
argument_list|,
name|QUOTA_OBSERVER_CHORE_TIMEUNIT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Extracts the percent of Regions for a table to have been reported to enable quota violation    * state change.    *    * @param conf The configuration object.    * @return The percent of regions reported to use.    */
specifier|static
name|Double
name|getRegionReportPercent
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getDouble
argument_list|(
name|QUOTA_OBSERVER_CHORE_REPORT_PERCENT_KEY
argument_list|,
name|QUOTA_OBSERVER_CHORE_REPORT_PERCENT_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * A container which encapsulates the tables that have either a table quota or are contained in a    * namespace which have a namespace quota.    */
specifier|static
class|class
name|TablesWithQuotas
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithTableQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithNamespaceQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|TablesWithQuotas
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**      * Adds a table with a table quota.      */
specifier|public
name|void
name|addTableQuotaTable
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
name|tablesWithTableQuotas
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a table with a namespace quota.      */
specifier|public
name|void
name|addNamespaceQuotaTable
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
name|tablesWithNamespaceQuotas
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if the given table has a table quota.      */
specifier|public
name|boolean
name|hasTableQuota
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
return|return
name|tablesWithTableQuotas
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
return|;
block|}
comment|/**      * Returns true if the table exists in a namespace with a namespace quota.      */
specifier|public
name|boolean
name|hasNamespaceQuota
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
return|return
name|tablesWithNamespaceQuotas
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
return|;
block|}
comment|/**      * Returns an unmodifiable view of all tables with table quotas.      */
specifier|public
name|Set
argument_list|<
name|TableName
argument_list|>
name|getTableQuotaTables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|tablesWithTableQuotas
argument_list|)
return|;
block|}
comment|/**      * Returns an unmodifiable view of all tables in namespaces that have      * namespace quotas.      */
specifier|public
name|Set
argument_list|<
name|TableName
argument_list|>
name|getNamespaceQuotaTables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|tablesWithNamespaceQuotas
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNamespacesWithQuotas
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tn
range|:
name|tablesWithNamespaceQuotas
control|)
block|{
name|namespaces
operator|.
name|add
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaces
return|;
block|}
comment|/**      * Returns a view of all tables that reside in a namespace with a namespace      * quota, grouped by the namespace itself.      */
specifier|public
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableName
argument_list|>
name|getTablesByNamespace
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|TableName
argument_list|>
name|tablesByNS
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tn
range|:
name|tablesWithNamespaceQuotas
control|)
block|{
name|tablesByNS
operator|.
name|put
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|tn
argument_list|)
expr_stmt|;
block|}
return|return
name|tablesByNS
return|;
block|}
comment|/**      * Filters out all tables for which the Master currently doesn't have enough region space      * reports received from RegionServers yet.      */
specifier|public
name|Set
argument_list|<
name|TableName
argument_list|>
name|filterInsufficientlyReportedTables
parameter_list|(
name|QuotaSnapshotStore
argument_list|<
name|TableName
argument_list|>
name|tableStore
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|double
name|percentRegionsReportedThreshold
init|=
name|getRegionReportPercent
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|tablesWithTableQuotas
argument_list|,
name|tablesWithNamespaceQuotas
argument_list|)
control|)
block|{
comment|// Don't recompute a table we've already computed
if|if
condition|(
name|tablesToRemove
operator|.
name|contains
argument_list|(
name|table
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|int
name|numRegionsInTable
init|=
name|getNumRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
comment|// If the table doesn't exist (no regions), bail out.
if|if
condition|(
name|numRegionsInTable
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Filtering "
operator|+
name|table
operator|+
literal|" because no regions were reported"
argument_list|)
expr_stmt|;
block|}
name|tablesToRemove
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|int
name|reportedRegionsInQuota
init|=
name|getNumReportedRegions
argument_list|(
name|table
argument_list|,
name|tableStore
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ratioReported
init|=
operator|(
operator|(
name|double
operator|)
name|reportedRegionsInQuota
operator|)
operator|/
name|numRegionsInTable
decl_stmt|;
if|if
condition|(
name|ratioReported
operator|<
name|percentRegionsReportedThreshold
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Filtering "
operator|+
name|table
operator|+
literal|" because "
operator|+
name|reportedRegionsInQuota
operator|+
literal|" of "
operator|+
name|numRegionsInTable
operator|+
literal|" regions were reported."
argument_list|)
expr_stmt|;
block|}
name|tablesToRemove
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Retaining "
operator|+
name|table
operator|+
literal|" because "
operator|+
name|reportedRegionsInQuota
operator|+
literal|" of "
operator|+
name|numRegionsInTable
operator|+
literal|" regions were reported."
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TableName
name|tableToRemove
range|:
name|tablesToRemove
control|)
block|{
name|tablesWithTableQuotas
operator|.
name|remove
argument_list|(
name|tableToRemove
argument_list|)
expr_stmt|;
name|tablesWithNamespaceQuotas
operator|.
name|remove
argument_list|(
name|tableToRemove
argument_list|)
expr_stmt|;
block|}
return|return
name|tablesToRemove
return|;
block|}
comment|/**      * Computes the total number of regions in a table.      */
name|int
name|getNumRegions
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|this
operator|.
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|regions
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Computes the number of regions reported for a table.      */
name|int
name|getNumReportedRegions
parameter_list|(
name|TableName
name|table
parameter_list|,
name|QuotaSnapshotStore
argument_list|<
name|TableName
argument_list|>
name|tableStore
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Iterables
operator|.
name|size
argument_list|(
name|tableStore
operator|.
name|filterBySubject
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": tablesWithTableQuotas="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|tablesWithTableQuotas
argument_list|)
operator|.
name|append
argument_list|(
literal|", tablesWithNamespaceQuotas="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|tablesWithNamespaceQuotas
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

