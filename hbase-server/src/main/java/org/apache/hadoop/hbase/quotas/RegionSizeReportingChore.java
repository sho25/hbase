begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MetricsRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Chore which sends the region size reports on this RegionServer to the Master.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionSizeReportingChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionSizeReportingChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGION_SIZE_REPORTING_CHORE_PERIOD_KEY
init|=
literal|"hbase.regionserver.quotas.region.size.reporting.chore.period"
decl_stmt|;
specifier|static
specifier|final
name|int
name|REGION_SIZE_REPORTING_CHORE_PERIOD_DEFAULT
init|=
literal|1000
operator|*
literal|60
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGION_SIZE_REPORTING_CHORE_DELAY_KEY
init|=
literal|"hbase.regionserver.quotas.region.size.reporting.chore.delay"
decl_stmt|;
specifier|static
specifier|final
name|long
name|REGION_SIZE_REPORTING_CHORE_DELAY_DEFAULT
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGION_SIZE_REPORTING_CHORE_TIMEUNIT_KEY
init|=
literal|"hbase.regionserver.quotas.region.size.reporting.chore.timeunit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGION_SIZE_REPORTING_CHORE_TIMEUNIT_DEFAULT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RegionServerServices
name|rsServices
decl_stmt|;
specifier|private
specifier|final
name|MetricsRegionServer
name|metrics
decl_stmt|;
specifier|public
name|RegionSizeReportingChore
parameter_list|(
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|super
argument_list|(
name|RegionSizeReportingChore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|rsServices
argument_list|,
name|getPeriod
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getInitialDelay
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|getTimeUnit
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsServices
operator|=
name|rsServices
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|rsServices
operator|.
name|getMetrics
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|_chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrementRegionSizeReportingChoreTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|_chore
parameter_list|()
block|{
specifier|final
name|RegionServerSpaceQuotaManager
name|quotaManager
init|=
name|rsServices
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
decl_stmt|;
comment|// Get the HRegionInfo for each online region
name|HashSet
argument_list|<
name|RegionInfo
argument_list|>
name|onlineRegionInfos
init|=
name|getOnlineRegionInfos
argument_list|(
name|rsServices
operator|.
name|getRegions
argument_list|()
argument_list|)
decl_stmt|;
name|RegionSizeStore
name|store
init|=
name|quotaManager
operator|.
name|getRegionSizeStore
argument_list|()
decl_stmt|;
comment|// Remove all sizes for non-online regions
name|removeNonOnlineRegions
argument_list|(
name|store
argument_list|,
name|onlineRegionInfos
argument_list|)
expr_stmt|;
name|rsServices
operator|.
name|reportRegionSizesForQuotas
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|RegionInfo
argument_list|>
name|getOnlineRegionInfos
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Region
argument_list|>
name|onlineRegions
parameter_list|)
block|{
name|HashSet
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|onlineRegions
operator|.
name|forEach
argument_list|(
parameter_list|(
name|region
parameter_list|)
lambda|->
name|regionInfos
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|regionInfos
return|;
block|}
name|void
name|removeNonOnlineRegions
parameter_list|(
name|RegionSizeStore
name|store
parameter_list|,
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|onlineRegions
parameter_list|)
block|{
comment|// We have to remove regions which are no longer online from the store, otherwise they will
comment|// continue to be sent to the Master which will prevent size report expiration.
if|if
condition|(
name|onlineRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Easy-case, no online regions means no size reports
name|store
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|RegionSize
argument_list|>
argument_list|>
name|iter
init|=
name|store
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numEntriesRemoved
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|RegionSize
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|onlineRegions
operator|.
name|contains
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
name|numEntriesRemoved
operator|++
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removed "
operator|+
name|numEntriesRemoved
operator|+
literal|" region sizes before reporting to Master "
operator|+
literal|"because they are for non-online regions."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Extracts the period for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore period or the default value.    */
specifier|static
name|int
name|getPeriod
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|REGION_SIZE_REPORTING_CHORE_PERIOD_KEY
argument_list|,
name|REGION_SIZE_REPORTING_CHORE_PERIOD_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the initial delay for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore initial delay or the default value.    */
specifier|static
name|long
name|getInitialDelay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|REGION_SIZE_REPORTING_CHORE_DELAY_KEY
argument_list|,
name|REGION_SIZE_REPORTING_CHORE_DELAY_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the time unit for the chore period and initial delay from the configuration. The    * configuration value for {@link #REGION_SIZE_REPORTING_CHORE_TIMEUNIT_KEY} must correspond to a    * {@link TimeUnit} value.    *    * @param conf The configuration object.    * @return The configured time unit for the chore period and initial delay or the default value.    */
specifier|static
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|REGION_SIZE_REPORTING_CHORE_TIMEUNIT_KEY
argument_list|,
name|REGION_SIZE_REPORTING_CHORE_TIMEUNIT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

