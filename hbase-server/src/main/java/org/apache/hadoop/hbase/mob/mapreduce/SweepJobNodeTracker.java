begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|TableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Tracker on the sweep tool node in zookeeper.  * The sweep tool node is an ephemeral one, when the process dies this node is deleted,  * at that time MR might be still running, and if another sweep job is started, two MR  * for the same column family will run at the same time.  * This tracker watches this ephemeral node, if it's gone or it's not created by the  * sweep job that owns the current MR, the current process will be aborted.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SweepJobNodeTracker
extends|extends
name|ZooKeeperListener
block|{
specifier|private
name|String
name|parentNode
decl_stmt|;
specifier|private
name|String
name|lockNodePrefix
decl_stmt|;
specifier|private
name|String
name|owner
decl_stmt|;
specifier|private
name|String
name|lockNode
decl_stmt|;
specifier|public
name|SweepJobNodeTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|String
name|parentNode
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentNode
operator|=
name|parentNode
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|lockNodePrefix
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|parentNode
argument_list|,
literal|"write-"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers the watcher on the sweep job node.    * If there's no such a sweep job node, or it's not created by the sweep job that    * owns the current MR, the current process will be aborted.    * This assumes the table lock uses the Zookeeper. It's a workaround and only used    * in the sweep tool, and the sweep tool will be removed after the mob file compaction    * is finished.    */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|KeeperException
block|{
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|parentNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// there are locks
name|TreeSet
argument_list|<
name|String
argument_list|>
name|sortedChildren
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sortedChildren
operator|.
name|addAll
argument_list|(
name|children
argument_list|)
expr_stmt|;
comment|// find all the write locks
name|SortedSet
argument_list|<
name|String
argument_list|>
name|tails
init|=
name|sortedChildren
operator|.
name|tailSet
argument_list|(
name|lockNodePrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tails
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|tail
range|:
name|tails
control|)
block|{
name|String
name|path
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|parentNode
argument_list|,
name|tail
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getDataAndWatch
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|TableLock
name|lock
init|=
name|TableLockManager
operator|.
name|fromBytes
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|lock
operator|.
name|getLockOwner
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
name|sn
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
operator|.
name|getHostName
argument_list|()
argument_list|,
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|,
name|serverName
operator|.
name|getStartCode
argument_list|()
argument_list|)
decl_stmt|;
comment|// compare the server names (host, port and start code), make sure the lock is created
if|if
condition|(
name|owner
operator|.
name|equals
argument_list|(
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|lockNode
operator|=
name|path
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// If the lock node is deleted, abort the current process.
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|lockNode
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

