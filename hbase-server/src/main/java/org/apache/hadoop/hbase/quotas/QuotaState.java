begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Throttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * In-Memory state of table or namespace quotas  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|QuotaState
block|{
specifier|protected
name|long
name|lastUpdate
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|lastQuery
init|=
literal|0
decl_stmt|;
specifier|protected
name|QuotaLimiter
name|globalLimiter
init|=
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|public
name|QuotaState
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QuotaState
parameter_list|(
specifier|final
name|long
name|updateTs
parameter_list|)
block|{
name|lastUpdate
operator|=
name|updateTs
expr_stmt|;
block|}
specifier|public
name|long
name|getLastUpdate
parameter_list|()
block|{
return|return
name|lastUpdate
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|getLastQuery
parameter_list|()
block|{
return|return
name|lastQuery
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"QuotaState(ts="
operator|+
name|lastUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBypass
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" bypass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|globalLimiter
operator|!=
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
condition|)
block|{
comment|//builder.append(" global-limiter");
name|builder
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|globalLimiter
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return true if there is no quota information associated to this object    */
specifier|public
specifier|synchronized
name|boolean
name|isBypass
parameter_list|()
block|{
return|return
name|globalLimiter
operator|==
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Setup the global quota information.    * (This operation is part of the QuotaState setup)    */
specifier|public
name|void
name|setQuotas
parameter_list|(
specifier|final
name|Quotas
name|quotas
parameter_list|)
block|{
if|if
condition|(
name|quotas
operator|.
name|hasThrottle
argument_list|()
condition|)
block|{
name|globalLimiter
operator|=
name|QuotaLimiterFactory
operator|.
name|fromThrottle
argument_list|(
name|quotas
operator|.
name|getThrottle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|globalLimiter
operator|=
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Perform an update of the quota info based on the other quota info object.    * (This operation is executed by the QuotaCache)    */
specifier|public
specifier|synchronized
name|void
name|update
parameter_list|(
specifier|final
name|QuotaState
name|other
parameter_list|)
block|{
if|if
condition|(
name|globalLimiter
operator|==
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
condition|)
block|{
name|globalLimiter
operator|=
name|other
operator|.
name|globalLimiter
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|globalLimiter
operator|==
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
condition|)
block|{
name|globalLimiter
operator|=
name|NoopQuotaLimiter
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|globalLimiter
operator|=
name|QuotaLimiterFactory
operator|.
name|update
argument_list|(
name|globalLimiter
argument_list|,
name|other
operator|.
name|globalLimiter
argument_list|)
expr_stmt|;
block|}
name|lastUpdate
operator|=
name|other
operator|.
name|lastUpdate
expr_stmt|;
block|}
comment|/**    * Return the limiter associated with this quota.    * @return the quota limiter    */
specifier|public
specifier|synchronized
name|QuotaLimiter
name|getGlobalLimiter
parameter_list|()
block|{
name|lastQuery
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
name|globalLimiter
return|;
block|}
block|}
end_class

end_unit

