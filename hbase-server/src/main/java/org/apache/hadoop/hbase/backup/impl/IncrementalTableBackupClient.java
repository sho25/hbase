begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupCopyJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_comment
comment|/**  * Incremental backup implementation.  * See the {@link #execute() execute} method.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|IncrementalTableBackupClient
extends|extends
name|TableBackupClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IncrementalTableBackupClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|IncrementalTableBackupClient
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
specifier|final
name|String
name|backupId
parameter_list|,
name|BackupRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|filterMissingFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|incrBackupFileList
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getMissingFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|incrBackupFileList
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * Do incremental copy.    * @param backupInfo backup info    */
specifier|private
name|void
name|incrementalCopy
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental copy is starting."
argument_list|)
expr_stmt|;
comment|// set overall backup phase: incremental_copy
name|backupInfo
operator|.
name|setPhase
argument_list|(
name|BackupPhase
operator|.
name|INCREMENTAL_COPY
argument_list|)
expr_stmt|;
comment|// get incremental backup file list and prepare parms for DistCp
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
init|=
name|backupInfo
operator|.
name|getIncrBackupFileList
argument_list|()
decl_stmt|;
comment|// filter missing files out (they have been copied by previous backups)
name|incrBackupFileList
operator|=
name|filterMissingFiles
argument_list|(
name|incrBackupFileList
argument_list|)
expr_stmt|;
name|String
index|[]
name|strArr
init|=
name|incrBackupFileList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|incrBackupFileList
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|strArr
index|[
name|strArr
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
expr_stmt|;
name|BackupCopyJob
name|copyService
init|=
name|BackupRestoreFactory
operator|.
name|getBackupCopyJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|int
name|MAX_ITERAIONS
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|counter
operator|++
operator|<
name|MAX_ITERAIONS
condition|)
block|{
comment|// We run DistCp maximum 2 times
comment|// If it fails on a second time, we throw Exception
name|int
name|res
init|=
name|copyService
operator|.
name|copy
argument_list|(
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|conf
argument_list|,
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|strArr
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Copy incremental log files failed with return code: "
operator|+
name|res
operator|+
literal|"."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed of Hadoop Distributed Copy from "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|incrBackupFileList
argument_list|,
literal|","
argument_list|)
operator|+
literal|" to "
operator|+
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|missingFiles
init|=
name|getMissingFiles
argument_list|(
name|incrBackupFileList
argument_list|)
decl_stmt|;
if|if
condition|(
name|missingFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// Repeat DistCp, some files have been moved from WALs to oldWALs during previous run
comment|// update backupInfo and strAttr
if|if
condition|(
name|counter
operator|==
name|MAX_ITERAIONS
condition|)
block|{
name|String
name|msg
init|=
literal|"DistCp could not finish the following files: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|missingFiles
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|converted
init|=
name|convertFilesFromWALtoOldWAL
argument_list|(
name|missingFiles
argument_list|)
decl_stmt|;
name|incrBackupFileList
operator|.
name|removeAll
argument_list|(
name|missingFiles
argument_list|)
expr_stmt|;
name|incrBackupFileList
operator|.
name|addAll
argument_list|(
name|converted
argument_list|)
expr_stmt|;
name|backupInfo
operator|.
name|setIncrBackupFileList
argument_list|(
name|incrBackupFileList
argument_list|)
expr_stmt|;
comment|// Run DistCp only for missing files (which have been moved from WALs to oldWALs
comment|// during previous run)
name|strArr
operator|=
name|converted
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|converted
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|strArr
index|[
name|strArr
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental copy from "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|incrBackupFileList
argument_list|,
literal|","
argument_list|)
operator|+
literal|" to "
operator|+
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|convertFilesFromWALtoOldWAL
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|missingFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|missingFiles
control|)
block|{
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Copy incremental log files failed, file is missing : "
operator|+
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed of Hadoop Distributed Copy to "
operator|+
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
operator|+
literal|", file is missing "
operator|+
name|path
argument_list|)
throw|;
block|}
name|list
operator|.
name|add
argument_list|(
name|path
operator|.
name|replace
argument_list|(
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|,
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
comment|// case PREPARE_INCREMENTAL:
name|beginBackup
argument_list|(
name|backupManager
argument_list|,
name|backupInfo
argument_list|)
expr_stmt|;
name|backupInfo
operator|.
name|setPhase
argument_list|(
name|BackupPhase
operator|.
name|PREPARE_INCREMENTAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"For incremental backup, current table set is "
operator|+
name|backupManager
operator|.
name|getIncrementalBackupTableSet
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|newTimestamps
operator|=
operator|(
operator|(
name|IncrementalBackupManager
operator|)
name|backupManager
operator|)
operator|.
name|getIncrBackupLogFileList
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fail the overall backup and return
name|failBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|e
argument_list|,
literal|"Unexpected Exception : "
argument_list|,
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// case INCREMENTAL_COPY:
try|try
block|{
comment|// copy out the table and region info files for each table
name|BackupUtils
operator|.
name|copyTableRegionInfo
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|incrementalCopy
argument_list|(
name|backupInfo
argument_list|)
expr_stmt|;
comment|// Save list of WAL files copied
name|backupManager
operator|.
name|recordWALFiles
argument_list|(
name|backupInfo
operator|.
name|getIncrBackupFileList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unexpected exception in incremental-backup: incremental copy "
operator|+
name|backupId
decl_stmt|;
comment|// fail the overall backup and return
name|failBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|e
argument_list|,
name|msg
argument_list|,
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// case INCR_BACKUP_COMPLETE:
comment|// set overall backup status: complete. Here we make sure to complete the backup.
comment|// After this checkpoint, even if entering cancel process, will let the backup finished
try|try
block|{
name|backupInfo
operator|.
name|setState
argument_list|(
name|BackupState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// Set the previousTimestampMap which is before this current log roll to the manifest.
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|previousTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|backupInfo
operator|.
name|setIncrTimestampMap
argument_list|(
name|previousTimestampMap
argument_list|)
expr_stmt|;
comment|// The table list in backupInfo is good for both full backup and incremental backup.
comment|// For incremental backup, it contains the incremental backup table set.
name|backupManager
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|backupInfo
operator|.
name|getTables
argument_list|()
argument_list|,
name|newTimestamps
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|newTableSetTimestampMap
init|=
name|backupManager
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|Long
name|newStartCode
init|=
name|BackupUtils
operator|.
name|getMinValue
argument_list|(
name|BackupUtils
operator|.
name|getRSLogTimestampMins
argument_list|(
name|newTableSetTimestampMap
argument_list|)
argument_list|)
decl_stmt|;
name|backupManager
operator|.
name|writeBackupStartCode
argument_list|(
name|newStartCode
argument_list|)
expr_stmt|;
comment|// backup complete
name|completeBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failBackup
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|backupManager
argument_list|,
name|e
argument_list|,
literal|"Unexpected Exception : "
argument_list|,
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

