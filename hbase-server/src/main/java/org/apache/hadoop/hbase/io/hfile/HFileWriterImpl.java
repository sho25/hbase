begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ByteBufferCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
operator|.
name|MetaCellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileBlock
operator|.
name|BlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Common functionality needed by all versions of {@link HFile} writers.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HFileWriterImpl
implements|implements
name|HFile
operator|.
name|Writer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HFileWriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|UNSET
init|=
operator|-
literal|1
decl_stmt|;
comment|/** if this feature is enabled, preCalculate encoded data size before real encoding happens*/
specifier|public
specifier|static
specifier|final
name|String
name|UNIFIED_ENCODED_BLOCKSIZE_RATIO
init|=
literal|"hbase.writer.unified.encoded.blocksize.ratio"
decl_stmt|;
comment|/** Block size limit after encoding, used to unify encoded block Cache entry size*/
specifier|private
specifier|final
name|int
name|encodedBlockSizeLimit
decl_stmt|;
comment|/** The Cell previously appended. Becomes the last cell in the file.*/
specifier|protected
name|Cell
name|lastCell
init|=
literal|null
decl_stmt|;
comment|/** FileSystem stream to write into. */
specifier|protected
name|FSDataOutputStream
name|outputStream
decl_stmt|;
comment|/** True if we opened the<code>outputStream</code> (and so will close it). */
specifier|protected
specifier|final
name|boolean
name|closeOutputStream
decl_stmt|;
comment|/** A "file info" block: a key-value map of file-wide metadata. */
specifier|protected
name|FileInfo
name|fileInfo
init|=
operator|new
name|HFile
operator|.
name|FileInfo
argument_list|()
decl_stmt|;
comment|/** Total # of key/value entries, i.e. how many times add() was called. */
specifier|protected
name|long
name|entryCount
init|=
literal|0
decl_stmt|;
comment|/** Used for calculating the average key length. */
specifier|protected
name|long
name|totalKeyLength
init|=
literal|0
decl_stmt|;
comment|/** Used for calculating the average value length. */
specifier|protected
name|long
name|totalValueLength
init|=
literal|0
decl_stmt|;
comment|/** Total uncompressed bytes, maybe calculate a compression ratio later. */
specifier|protected
name|long
name|totalUncompressedBytes
init|=
literal|0
decl_stmt|;
comment|/** Key comparator. Used to ensure we write in order. */
specifier|protected
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
comment|/** Meta block names. */
specifier|protected
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metaNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** {@link Writable}s representing meta block data. */
specifier|protected
name|List
argument_list|<
name|Writable
argument_list|>
name|metaData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * First cell in a block.    * This reference should be short-lived since we write hfiles in a burst.    */
specifier|protected
name|Cell
name|firstCellInBlock
init|=
literal|null
decl_stmt|;
comment|/** May be null if we were passed a stream. */
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
comment|/** Cache configuration for caching data on write. */
specifier|protected
specifier|final
name|CacheConfig
name|cacheConf
decl_stmt|;
comment|/**    * Name for this object used when logging or in toString. Is either    * the result of a toString on stream or else name of passed file Path.    */
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * The data block encoding which will be used.    * {@link NoOpDataBlockEncoder#INSTANCE} if there is no encoding.    */
specifier|protected
specifier|final
name|HFileDataBlockEncoder
name|blockEncoder
decl_stmt|;
specifier|protected
specifier|final
name|HFileContext
name|hFileContext
decl_stmt|;
specifier|private
name|int
name|maxTagsLength
init|=
literal|0
decl_stmt|;
comment|/** KeyValue version in FileInfo */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|KEY_VALUE_VERSION
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"KEY_VALUE_VERSION"
argument_list|)
decl_stmt|;
comment|/** Version for KeyValue which includes memstore timestamp */
specifier|public
specifier|static
specifier|final
name|int
name|KEY_VALUE_VER_WITH_MEMSTORE
init|=
literal|1
decl_stmt|;
comment|/** Inline block writers for multi-level block index and compound Blooms. */
specifier|private
name|List
argument_list|<
name|InlineBlockWriter
argument_list|>
name|inlineBlockWriters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** block writer */
specifier|protected
name|HFileBlock
operator|.
name|Writer
name|blockWriter
decl_stmt|;
specifier|private
name|HFileBlockIndex
operator|.
name|BlockIndexWriter
name|dataBlockIndexWriter
decl_stmt|;
specifier|private
name|HFileBlockIndex
operator|.
name|BlockIndexWriter
name|metaBlockIndexWriter
decl_stmt|;
comment|/** The offset of the first data block or -1 if the file is empty. */
specifier|private
name|long
name|firstDataBlockOffset
init|=
name|UNSET
decl_stmt|;
comment|/** The offset of the last data block or 0 if the file is empty. */
specifier|protected
name|long
name|lastDataBlockOffset
init|=
name|UNSET
decl_stmt|;
comment|/**    * The last(stop) Cell of the previous data block.    * This reference should be short-lived since we write hfiles in a burst.    */
specifier|private
name|Cell
name|lastCellOfPreviousBlock
init|=
literal|null
decl_stmt|;
comment|/** Additional data items to be written to the "load-on-open" section. */
specifier|private
name|List
argument_list|<
name|BlockWritable
argument_list|>
name|additionalLoadOnOpenData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|long
name|maxMemstoreTS
init|=
literal|0
decl_stmt|;
specifier|public
name|HFileWriterImpl
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|Path
name|path
parameter_list|,
name|FSDataOutputStream
name|outputStream
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|HFileContext
name|fileContext
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
name|outputStream
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|getName
argument_list|()
else|:
name|outputStream
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|hFileContext
operator|=
name|fileContext
expr_stmt|;
name|DataBlockEncoding
name|encoding
init|=
name|hFileContext
operator|.
name|getDataBlockEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|this
operator|.
name|blockEncoder
operator|=
operator|new
name|HFileDataBlockEncoderImpl
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|blockEncoder
operator|=
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
expr_stmt|;
block|}
name|this
operator|.
name|comparator
operator|=
name|comparator
operator|!=
literal|null
condition|?
name|comparator
else|:
name|CellComparatorImpl
operator|.
name|COMPARATOR
expr_stmt|;
name|closeOutputStream
operator|=
name|path
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|cacheConf
operator|=
name|cacheConf
expr_stmt|;
name|float
name|encodeBlockSizeRatio
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|UNIFIED_ENCODED_BLOCKSIZE_RATIO
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|this
operator|.
name|encodedBlockSizeLimit
operator|=
call|(
name|int
call|)
argument_list|(
name|hFileContext
operator|.
name|getBlocksize
argument_list|()
operator|*
name|encodeBlockSizeRatio
argument_list|)
expr_stmt|;
name|finishInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Writer"
operator|+
operator|(
name|path
operator|!=
literal|null
condition|?
literal|" for "
operator|+
name|path
else|:
literal|""
operator|)
operator|+
literal|" initialized with cacheConf: "
operator|+
name|cacheConf
operator|+
literal|" comparator: "
operator|+
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" fileContext: "
operator|+
name|fileContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add to the file info. All added key/value pairs can be obtained using    * {@link HFile.Reader#loadFileInfo()}.    *    * @param k Key    * @param v Value    * @throws IOException in case the key or the value are invalid    */
annotation|@
name|Override
specifier|public
name|void
name|appendFileInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|k
parameter_list|,
specifier|final
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|fileInfo
operator|.
name|append
argument_list|(
name|k
argument_list|,
name|v
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the file info offset in the trailer, finishes up populating fields in    * the file info, and writes the file info into the given data output. The    * reason the data output is not always {@link #outputStream} is that we store    * file info as a block in version 2.    *    * @param trailer fixed file trailer    * @param out the data output to write the file info to    * @throws IOException    */
specifier|protected
specifier|final
name|void
name|writeFileInfo
parameter_list|(
name|FixedFileTrailer
name|trailer
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|trailer
operator|.
name|setFileInfoOffset
argument_list|(
name|outputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|finishFileInfo
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|fileInfo
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|HFile
operator|.
name|updateWriteLatency
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the given Cell's key does not violate the key order.    *    * @param cell Cell whose key to check.    * @return true if the key is duplicate    * @throws IOException if the key or the key order is wrong    */
specifier|protected
name|boolean
name|checkKey
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isDuplicateKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key cannot be null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastCell
operator|!=
literal|null
condition|)
block|{
name|int
name|keyComp
init|=
name|PrivateCellUtil
operator|.
name|compareKeyIgnoresMvcc
argument_list|(
name|comparator
argument_list|,
name|lastCell
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyComp
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Added a key not lexically larger than"
operator|+
literal|" previous. Current cell = "
operator|+
name|cell
operator|+
literal|", lastCell = "
operator|+
name|lastCell
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|keyComp
operator|==
literal|0
condition|)
block|{
name|isDuplicateKey
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isDuplicateKey
return|;
block|}
comment|/** Checks the given value for validity. */
specifier|protected
name|void
name|checkValue
parameter_list|(
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Value cannot be null"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Path or null if we were passed a stream rather than a Path.    */
annotation|@
name|Override
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"writer="
operator|+
operator|(
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
operator|+
literal|", name="
operator|+
name|name
operator|+
literal|", compression="
operator|+
name|hFileContext
operator|.
name|getCompression
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Compression
operator|.
name|Algorithm
name|compressionByName
parameter_list|(
name|String
name|algoName
parameter_list|)
block|{
if|if
condition|(
name|algoName
operator|==
literal|null
condition|)
return|return
name|HFile
operator|.
name|DEFAULT_COMPRESSION_ALGORITHM
return|;
return|return
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|algoName
argument_list|)
return|;
block|}
comment|/** A helper method to create HFile output streams in constructors */
specifier|protected
specifier|static
name|FSDataOutputStream
name|createOutputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|InetSocketAddress
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|perms
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
return|return
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|perms
argument_list|,
name|favoredNodes
argument_list|)
return|;
block|}
comment|/** Additional initialization steps */
specifier|protected
name|void
name|finishInit
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|blockWriter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"finishInit called twice"
argument_list|)
throw|;
block|}
name|blockWriter
operator|=
operator|new
name|HFileBlock
operator|.
name|Writer
argument_list|(
name|blockEncoder
argument_list|,
name|hFileContext
argument_list|)
expr_stmt|;
comment|// Data block index writer
name|boolean
name|cacheIndexesOnWrite
init|=
name|cacheConf
operator|.
name|shouldCacheIndexesOnWrite
argument_list|()
decl_stmt|;
name|dataBlockIndexWriter
operator|=
operator|new
name|HFileBlockIndex
operator|.
name|BlockIndexWriter
argument_list|(
name|blockWriter
argument_list|,
name|cacheIndexesOnWrite
condition|?
name|cacheConf
else|:
literal|null
argument_list|,
name|cacheIndexesOnWrite
condition|?
name|name
else|:
literal|null
argument_list|)
expr_stmt|;
name|dataBlockIndexWriter
operator|.
name|setMaxChunkSize
argument_list|(
name|HFileBlockIndex
operator|.
name|getMaxChunkSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dataBlockIndexWriter
operator|.
name|setMinIndexNumEntries
argument_list|(
name|HFileBlockIndex
operator|.
name|getMinIndexNumEntries
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|inlineBlockWriters
operator|.
name|add
argument_list|(
name|dataBlockIndexWriter
argument_list|)
expr_stmt|;
comment|// Meta data block index writer
name|metaBlockIndexWriter
operator|=
operator|new
name|HFileBlockIndex
operator|.
name|BlockIndexWriter
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Initialized with "
operator|+
name|cacheConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * At a block boundary, write all the inline blocks and opens new block.    *    * @throws IOException    */
specifier|protected
name|void
name|checkBlockBoundary
parameter_list|()
throws|throws
name|IOException
block|{
comment|//for encoder like prefixTree, encoded size is not available, so we have to compare both encoded size
comment|//and unencoded size to blocksize limit.
if|if
condition|(
name|blockWriter
operator|.
name|encodedBlockSizeWritten
argument_list|()
operator|>=
name|encodedBlockSizeLimit
operator|||
name|blockWriter
operator|.
name|blockSizeWritten
argument_list|()
operator|>=
name|hFileContext
operator|.
name|getBlocksize
argument_list|()
condition|)
block|{
name|finishBlock
argument_list|()
expr_stmt|;
name|writeInlineBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|newBlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Clean up the data block that is currently being written.*/
specifier|private
name|void
name|finishBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|blockWriter
operator|.
name|isWriting
argument_list|()
operator|||
name|blockWriter
operator|.
name|blockSizeWritten
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// Update the first data block offset if UNSET; used scanning.
if|if
condition|(
name|firstDataBlockOffset
operator|==
name|UNSET
condition|)
block|{
name|firstDataBlockOffset
operator|=
name|outputStream
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
comment|// Update the last data block offset each time through here.
name|lastDataBlockOffset
operator|=
name|outputStream
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|blockWriter
operator|.
name|writeHeaderAndData
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|int
name|onDiskSize
init|=
name|blockWriter
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
decl_stmt|;
name|Cell
name|indexEntry
init|=
name|getMidpoint
argument_list|(
name|this
operator|.
name|comparator
argument_list|,
name|lastCellOfPreviousBlock
argument_list|,
name|firstCellInBlock
argument_list|)
decl_stmt|;
name|dataBlockIndexWriter
operator|.
name|addEntry
argument_list|(
name|PrivateCellUtil
operator|.
name|getCellKeySerializedAsKeyValueKey
argument_list|(
name|indexEntry
argument_list|)
argument_list|,
name|lastDataBlockOffset
argument_list|,
name|onDiskSize
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheConf
operator|.
name|shouldCacheDataOnWrite
argument_list|()
condition|)
block|{
name|doCacheOnWrite
argument_list|(
name|lastDataBlockOffset
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Try to return a Cell that falls between<code>left</code> and    *<code>right</code> but that is shorter; i.e. takes up less space. This    * trick is used building HFile block index. Its an optimization. It does not    * always work. In this case we'll just return the<code>right</code> cell.    *    * @param comparator    *          Comparator to use.    * @param left    * @param right    * @return A cell that sorts between<code>left</code> and<code>right</code>.    */
specifier|public
specifier|static
name|Cell
name|getMidpoint
parameter_list|(
specifier|final
name|CellComparator
name|comparator
parameter_list|,
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
comment|// TODO: Redo so only a single pass over the arrays rather than one to
comment|// compare and then a second composing midpoint.
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"right cell can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
comment|// If Cells from meta table, don't mess around. meta table Cells have schema
comment|// (table,startrow,hash) so can't be treated as plain byte arrays. Just skip
comment|// out without trying to do this optimization.
if|if
condition|(
name|comparator
operator|instanceof
name|MetaCellComparator
condition|)
block|{
return|return
name|right
return|;
block|}
name|int
name|diff
init|=
name|comparator
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Left row sorts after right row; left="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|left
argument_list|)
operator|+
literal|", right="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|right
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|midRow
decl_stmt|;
name|boolean
name|bufferBacked
init|=
name|left
operator|instanceof
name|ByteBufferCell
operator|&&
name|right
operator|instanceof
name|ByteBufferCell
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
comment|// Left row is< right row.
if|if
condition|(
name|bufferBacked
condition|)
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|right
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
name|left
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|left
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|right
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|right
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If midRow is null, just return 'right'. Can't do optimization.
if|if
condition|(
name|midRow
operator|==
literal|null
condition|)
return|return
name|right
return|;
return|return
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|midRow
argument_list|)
return|;
block|}
comment|// Rows are same. Compare on families.
name|diff
operator|=
name|comparator
operator|.
name|compareFamilies
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Left family sorts after right family; left="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|left
argument_list|)
operator|+
literal|", right="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|right
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|bufferBacked
condition|)
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
name|left
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If midRow is null, just return 'right'. Can't do optimization.
if|if
condition|(
name|midRow
operator|==
literal|null
condition|)
return|return
name|right
return|;
comment|// Return new Cell where we use right row and then a mid sort family.
return|return
name|PrivateCellUtil
operator|.
name|createFirstOnRowFamily
argument_list|(
name|right
argument_list|,
name|midRow
argument_list|,
literal|0
argument_list|,
name|midRow
operator|.
name|length
argument_list|)
return|;
block|}
comment|// Families are same. Compare on qualifiers.
name|diff
operator|=
name|comparator
operator|.
name|compareQualifiers
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Left qualifier sorts after right qualifier; left="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|left
argument_list|)
operator|+
literal|", right="
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|right
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|bufferBacked
condition|)
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|left
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|right
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|midRow
operator|=
name|getMinimumMidpointArray
argument_list|(
name|left
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If midRow is null, just return 'right'. Can't do optimization.
if|if
condition|(
name|midRow
operator|==
literal|null
condition|)
return|return
name|right
return|;
comment|// Return new Cell where we use right row and family and then a mid sort qualifier.
return|return
name|PrivateCellUtil
operator|.
name|createFirstOnRowCol
argument_list|(
name|right
argument_list|,
name|midRow
argument_list|,
literal|0
argument_list|,
name|midRow
operator|.
name|length
argument_list|)
return|;
block|}
comment|// No opportunity for optimization. Just return right key.
return|return
name|right
return|;
block|}
comment|/**    * @param leftArray    * @param leftOffset    * @param leftLength    * @param rightArray    * @param rightOffset    * @param rightLength    * @return Return a new array that is between left and right and minimally    *         sized else just return null as indicator that we could not create a    *         mid point.    */
specifier|private
specifier|static
name|byte
index|[]
name|getMinimumMidpointArray
parameter_list|(
specifier|final
name|byte
index|[]
name|leftArray
parameter_list|,
specifier|final
name|int
name|leftOffset
parameter_list|,
specifier|final
name|int
name|leftLength
parameter_list|,
specifier|final
name|byte
index|[]
name|rightArray
parameter_list|,
specifier|final
name|int
name|rightOffset
parameter_list|,
specifier|final
name|int
name|rightLength
parameter_list|)
block|{
comment|// rows are different
name|int
name|minLength
init|=
name|leftLength
operator|<
name|rightLength
condition|?
name|leftLength
else|:
name|rightLength
decl_stmt|;
name|int
name|diffIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|diffIdx
operator|<
name|minLength
operator|&&
name|leftArray
index|[
name|leftOffset
operator|+
name|diffIdx
index|]
operator|==
name|rightArray
index|[
name|rightOffset
operator|+
name|diffIdx
index|]
condition|)
block|{
name|diffIdx
operator|++
expr_stmt|;
block|}
name|byte
index|[]
name|minimumMidpointArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|diffIdx
operator|>=
name|minLength
condition|)
block|{
comment|// leftKey's row is prefix of rightKey's.
name|minimumMidpointArray
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rightArray
argument_list|,
name|rightOffset
argument_list|,
name|minimumMidpointArray
argument_list|,
literal|0
argument_list|,
name|diffIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|diffByte
init|=
name|leftArray
index|[
name|leftOffset
operator|+
name|diffIdx
index|]
decl_stmt|;
if|if
condition|(
operator|(
literal|0xff
operator|&
name|diffByte
operator|)
operator|<
literal|0xff
operator|&&
operator|(
name|diffByte
operator|+
literal|1
operator|)
operator|<
operator|(
name|rightArray
index|[
name|rightOffset
operator|+
name|diffIdx
index|]
operator|&
literal|0xff
operator|)
condition|)
block|{
name|minimumMidpointArray
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|leftArray
argument_list|,
name|leftOffset
argument_list|,
name|minimumMidpointArray
argument_list|,
literal|0
argument_list|,
name|diffIdx
argument_list|)
expr_stmt|;
name|minimumMidpointArray
index|[
name|diffIdx
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|diffByte
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minimumMidpointArray
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rightArray
argument_list|,
name|rightOffset
argument_list|,
name|minimumMidpointArray
argument_list|,
literal|0
argument_list|,
name|diffIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|minimumMidpointArray
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getMinimumMidpointArray
parameter_list|(
name|ByteBuffer
name|left
parameter_list|,
name|int
name|leftOffset
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|ByteBuffer
name|right
parameter_list|,
name|int
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
comment|// rows are different
name|int
name|minLength
init|=
name|leftLength
operator|<
name|rightLength
condition|?
name|leftLength
else|:
name|rightLength
decl_stmt|;
name|int
name|diffIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|diffIdx
operator|<
name|minLength
operator|&&
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|left
argument_list|,
name|leftOffset
operator|+
name|diffIdx
argument_list|)
operator|==
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|right
argument_list|,
name|rightOffset
operator|+
name|diffIdx
argument_list|)
condition|)
block|{
name|diffIdx
operator|++
expr_stmt|;
block|}
name|byte
index|[]
name|minMidpoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|diffIdx
operator|>=
name|minLength
condition|)
block|{
comment|// leftKey's row is prefix of rightKey's.
name|minMidpoint
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|minMidpoint
argument_list|,
name|right
argument_list|,
name|rightOffset
argument_list|,
literal|0
argument_list|,
name|diffIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|diffByte
init|=
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|left
argument_list|,
name|leftOffset
operator|+
name|diffIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|0xff
operator|&
name|diffByte
operator|)
operator|<
literal|0xff
operator|&&
operator|(
name|diffByte
operator|+
literal|1
operator|)
operator|<
operator|(
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|right
argument_list|,
name|rightOffset
operator|+
name|diffIdx
argument_list|)
operator|&
literal|0xff
operator|)
condition|)
block|{
name|minMidpoint
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|minMidpoint
argument_list|,
name|left
argument_list|,
name|leftOffset
argument_list|,
literal|0
argument_list|,
name|diffIdx
argument_list|)
expr_stmt|;
name|minMidpoint
index|[
name|diffIdx
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|diffByte
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minMidpoint
operator|=
operator|new
name|byte
index|[
name|diffIdx
operator|+
literal|1
index|]
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|minMidpoint
argument_list|,
name|right
argument_list|,
name|rightOffset
argument_list|,
literal|0
argument_list|,
name|diffIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|minMidpoint
return|;
block|}
comment|/** Gives inline block writers an opportunity to contribute blocks. */
specifier|private
name|void
name|writeInlineBlocks
parameter_list|(
name|boolean
name|closing
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|InlineBlockWriter
name|ibw
range|:
name|inlineBlockWriters
control|)
block|{
while|while
condition|(
name|ibw
operator|.
name|shouldWriteBlock
argument_list|(
name|closing
argument_list|)
condition|)
block|{
name|long
name|offset
init|=
name|outputStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|boolean
name|cacheThisBlock
init|=
name|ibw
operator|.
name|getCacheOnWrite
argument_list|()
decl_stmt|;
name|ibw
operator|.
name|writeInlineBlock
argument_list|(
name|blockWriter
operator|.
name|startWriting
argument_list|(
name|ibw
operator|.
name|getInlineBlockType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|writeHeaderAndData
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|ibw
operator|.
name|blockWritten
argument_list|(
name|offset
argument_list|,
name|blockWriter
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|,
name|blockWriter
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheThisBlock
condition|)
block|{
name|doCacheOnWrite
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Caches the last written HFile block.    * @param offset the offset of the block we want to cache. Used to determine    *          the cache key.    */
specifier|private
name|void
name|doCacheOnWrite
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|HFileBlock
name|cacheFormatBlock
init|=
name|blockWriter
operator|.
name|getBlockForCaching
argument_list|(
name|cacheConf
argument_list|)
decl_stmt|;
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
operator|.
name|cacheBlock
argument_list|(
operator|new
name|BlockCacheKey
argument_list|(
name|name
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|,
name|cacheFormatBlock
operator|.
name|getBlockType
argument_list|()
argument_list|)
argument_list|,
name|cacheFormatBlock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ready a new block for writing.    *    * @throws IOException    */
specifier|protected
name|void
name|newBlock
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This is where the next block begins.
name|blockWriter
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|firstCellInBlock
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|lastCell
operator|!=
literal|null
condition|)
block|{
name|lastCellOfPreviousBlock
operator|=
name|lastCell
expr_stmt|;
block|}
block|}
comment|/**    * Add a meta block to the end of the file. Call before close(). Metadata    * blocks are expensive. Fill one with a bunch of serialized data rather than    * do a metadata block per metadata instance. If metadata is small, consider    * adding to file info using {@link #appendFileInfo(byte[], byte[])}    *    * @param metaBlockName    *          name of the block    * @param content    *          will call readFields to get data later (DO NOT REUSE)    */
annotation|@
name|Override
specifier|public
name|void
name|appendMetaBlock
parameter_list|(
name|String
name|metaBlockName
parameter_list|,
name|Writable
name|content
parameter_list|)
block|{
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|metaBlockName
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|metaNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// stop when the current key is greater than our own
name|byte
index|[]
name|cur
init|=
name|metaNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
operator|.
name|compare
argument_list|(
name|cur
argument_list|,
literal|0
argument_list|,
name|cur
operator|.
name|length
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|metaNames
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Save data block encoder metadata in the file info.
name|blockEncoder
operator|.
name|saveMetadata
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Write out the end of the data blocks, then write meta data blocks.
comment|// followed by fileinfo, data block index and meta block index.
name|finishBlock
argument_list|()
expr_stmt|;
name|writeInlineBlocks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FixedFileTrailer
name|trailer
init|=
operator|new
name|FixedFileTrailer
argument_list|(
name|getMajorVersion
argument_list|()
argument_list|,
name|getMinorVersion
argument_list|()
argument_list|)
decl_stmt|;
comment|// Write out the metadata blocks if any.
if|if
condition|(
operator|!
name|metaNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metaNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// store the beginning offset
name|long
name|offset
init|=
name|outputStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
comment|// write the metadata content
name|DataOutputStream
name|dos
init|=
name|blockWriter
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|META
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|writeHeaderAndData
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
comment|// Add the new meta block to the meta index.
name|metaBlockIndexWriter
operator|.
name|addEntry
argument_list|(
name|metaNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|offset
argument_list|,
name|blockWriter
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Load-on-open section.
comment|// Data block index.
comment|//
comment|// In version 2, this section of the file starts with the root level data
comment|// block index. We call a function that writes intermediate-level blocks
comment|// first, then root level, and returns the offset of the root level block
comment|// index.
name|long
name|rootIndexOffset
init|=
name|dataBlockIndexWriter
operator|.
name|writeIndexBlocks
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|trailer
operator|.
name|setLoadOnOpenOffset
argument_list|(
name|rootIndexOffset
argument_list|)
expr_stmt|;
comment|// Meta block index.
name|metaBlockIndexWriter
operator|.
name|writeSingleLevelIndex
argument_list|(
name|blockWriter
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|ROOT_INDEX
argument_list|)
argument_list|,
literal|"meta"
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|writeHeaderAndData
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hFileContext
operator|.
name|isIncludesMvcc
argument_list|()
condition|)
block|{
name|appendFileInfo
argument_list|(
name|MAX_MEMSTORE_TS_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|maxMemstoreTS
argument_list|)
argument_list|)
expr_stmt|;
name|appendFileInfo
argument_list|(
name|KEY_VALUE_VERSION
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|KEY_VALUE_VER_WITH_MEMSTORE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// File info
name|writeFileInfo
argument_list|(
name|trailer
argument_list|,
name|blockWriter
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|FILE_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|writeHeaderAndData
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
comment|// Load-on-open data supplied by higher levels, e.g. Bloom filters.
for|for
control|(
name|BlockWritable
name|w
range|:
name|additionalLoadOnOpenData
control|)
block|{
name|blockWriter
operator|.
name|writeBlock
argument_list|(
name|w
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|totalUncompressedBytes
operator|+=
name|blockWriter
operator|.
name|getUncompressedSizeWithHeader
argument_list|()
expr_stmt|;
block|}
comment|// Now finish off the trailer.
name|trailer
operator|.
name|setNumDataIndexLevels
argument_list|(
name|dataBlockIndexWriter
operator|.
name|getNumLevels
argument_list|()
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setUncompressedDataIndexSize
argument_list|(
name|dataBlockIndexWriter
operator|.
name|getTotalUncompressedSize
argument_list|()
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setFirstDataBlockOffset
argument_list|(
name|firstDataBlockOffset
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setLastDataBlockOffset
argument_list|(
name|lastDataBlockOffset
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setComparatorClass
argument_list|(
name|comparator
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setDataIndexCount
argument_list|(
name|dataBlockIndexWriter
operator|.
name|getNumRootEntries
argument_list|()
argument_list|)
expr_stmt|;
name|finishClose
argument_list|(
name|trailer
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInlineBlockWriter
parameter_list|(
name|InlineBlockWriter
name|ibw
parameter_list|)
block|{
name|inlineBlockWriters
operator|.
name|add
argument_list|(
name|ibw
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGeneralBloomFilter
parameter_list|(
specifier|final
name|BloomFilterWriter
name|bfw
parameter_list|)
block|{
name|this
operator|.
name|addBloomFilter
argument_list|(
name|bfw
argument_list|,
name|BlockType
operator|.
name|GENERAL_BLOOM_META
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDeleteFamilyBloomFilter
parameter_list|(
specifier|final
name|BloomFilterWriter
name|bfw
parameter_list|)
block|{
name|this
operator|.
name|addBloomFilter
argument_list|(
name|bfw
argument_list|,
name|BlockType
operator|.
name|DELETE_FAMILY_BLOOM_META
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addBloomFilter
parameter_list|(
specifier|final
name|BloomFilterWriter
name|bfw
parameter_list|,
specifier|final
name|BlockType
name|blockType
parameter_list|)
block|{
if|if
condition|(
name|bfw
operator|.
name|getKeyCount
argument_list|()
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|blockType
operator|!=
name|BlockType
operator|.
name|GENERAL_BLOOM_META
operator|&&
name|blockType
operator|!=
name|BlockType
operator|.
name|DELETE_FAMILY_BLOOM_META
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Block Type: "
operator|+
name|blockType
operator|.
name|toString
argument_list|()
operator|+
literal|"is not supported"
argument_list|)
throw|;
block|}
name|additionalLoadOnOpenData
operator|.
name|add
argument_list|(
operator|new
name|BlockWritable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|blockType
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeToBlock
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|bfw
operator|.
name|getMetaWriter
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Writable
name|dataWriter
init|=
name|bfw
operator|.
name|getDataWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataWriter
operator|!=
literal|null
condition|)
name|dataWriter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HFileContext
name|getFileContext
parameter_list|()
block|{
return|return
name|hFileContext
return|;
block|}
comment|/**    * Add key/value to file. Keys must be added in an order that agrees with the    * Comparator passed on construction.    *    * @param cell    *          Cell to add. Cannot be empty nor null.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// checkKey uses comparator to check we are writing in order.
name|boolean
name|dupKey
init|=
name|checkKey
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dupKey
condition|)
block|{
name|checkBlockBoundary
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blockWriter
operator|.
name|isWriting
argument_list|()
condition|)
block|{
name|newBlock
argument_list|()
expr_stmt|;
block|}
name|blockWriter
operator|.
name|write
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|totalKeyLength
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOfKey
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|totalValueLength
operator|+=
name|cell
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
comment|// Are we the first key in this block?
if|if
condition|(
name|firstCellInBlock
operator|==
literal|null
condition|)
block|{
comment|// If cell is big, block will be closed and this firstCellInBlock reference will only last
comment|// a short while.
name|firstCellInBlock
operator|=
name|cell
expr_stmt|;
block|}
comment|// TODO: What if cell is 10MB and we write infrequently? We hold on to cell here indefinitely?
name|lastCell
operator|=
name|cell
expr_stmt|;
name|entryCount
operator|++
expr_stmt|;
name|this
operator|.
name|maxMemstoreTS
operator|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|maxMemstoreTS
argument_list|,
name|cell
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|tagsLength
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagsLength
operator|>
name|this
operator|.
name|maxTagsLength
condition|)
block|{
name|this
operator|.
name|maxTagsLength
operator|=
name|tagsLength
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeShipped
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add clone methods for every cell
if|if
condition|(
name|this
operator|.
name|lastCell
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lastCell
operator|=
name|KeyValueUtil
operator|.
name|toNewKeyCell
argument_list|(
name|this
operator|.
name|lastCell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|firstCellInBlock
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|firstCellInBlock
operator|=
name|KeyValueUtil
operator|.
name|toNewKeyCell
argument_list|(
name|this
operator|.
name|firstCellInBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lastCellOfPreviousBlock
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lastCellOfPreviousBlock
operator|=
name|KeyValueUtil
operator|.
name|toNewKeyCell
argument_list|(
name|this
operator|.
name|lastCellOfPreviousBlock
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|finishFileInfo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastCell
operator|!=
literal|null
condition|)
block|{
comment|// Make a copy. The copy is stuffed into our fileinfo map. Needs a clean
comment|// byte buffer. Won't take a tuple.
name|byte
index|[]
name|lastKey
init|=
name|PrivateCellUtil
operator|.
name|getCellKeySerializedAsKeyValueKey
argument_list|(
name|this
operator|.
name|lastCell
argument_list|)
decl_stmt|;
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|LASTKEY
argument_list|,
name|lastKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Average key length.
name|int
name|avgKeyLen
init|=
name|entryCount
operator|==
literal|0
condition|?
literal|0
else|:
call|(
name|int
call|)
argument_list|(
name|totalKeyLength
operator|/
name|entryCount
argument_list|)
decl_stmt|;
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|AVG_KEY_LEN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|avgKeyLen
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|CREATE_TIME_TS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hFileContext
operator|.
name|getFileCreateTime
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Average value length.
name|int
name|avgValueLen
init|=
name|entryCount
operator|==
literal|0
condition|?
literal|0
else|:
call|(
name|int
call|)
argument_list|(
name|totalValueLength
operator|/
name|entryCount
argument_list|)
decl_stmt|;
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|AVG_VALUE_LEN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|avgValueLen
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|hFileContext
operator|.
name|isIncludesTags
argument_list|()
condition|)
block|{
comment|// When tags are not being written in this file, MAX_TAGS_LEN is excluded
comment|// from the FileInfo
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|MAX_TAGS_LEN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|maxTagsLength
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|tagsCompressed
init|=
operator|(
name|hFileContext
operator|.
name|getDataBlockEncoding
argument_list|()
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
operator|)
operator|&&
name|hFileContext
operator|.
name|isCompressTags
argument_list|()
decl_stmt|;
name|fileInfo
operator|.
name|append
argument_list|(
name|FileInfo
operator|.
name|TAGS_COMPRESSED
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tagsCompressed
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|getMajorVersion
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
specifier|protected
name|int
name|getMinorVersion
parameter_list|()
block|{
return|return
name|HFileReaderImpl
operator|.
name|MAX_MINOR_VERSION
return|;
block|}
specifier|protected
name|void
name|finishClose
parameter_list|(
name|FixedFileTrailer
name|trailer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write out encryption metadata before finalizing if we have a valid crypto context
name|Encryption
operator|.
name|Context
name|cryptoContext
init|=
name|hFileContext
operator|.
name|getEncryptionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|cryptoContext
operator|!=
name|Encryption
operator|.
name|Context
operator|.
name|NONE
condition|)
block|{
comment|// Wrap the context's key and write it as the encryption metadata, the wrapper includes
comment|// all information needed for decryption
name|trailer
operator|.
name|setEncryptionKey
argument_list|(
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|cryptoContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|cryptoContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|cryptoContext
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now we can finish the close
name|trailer
operator|.
name|setMetaIndexCount
argument_list|(
name|metaNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setTotalUncompressedBytes
argument_list|(
name|totalUncompressedBytes
operator|+
name|trailer
operator|.
name|getTrailerSize
argument_list|()
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setEntryCount
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
name|trailer
operator|.
name|setCompressionCodec
argument_list|(
name|hFileContext
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|trailer
operator|.
name|serialize
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|HFile
operator|.
name|updateWriteLatency
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeOutputStream
condition|)
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

