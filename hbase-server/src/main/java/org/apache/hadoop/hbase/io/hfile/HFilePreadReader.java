begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link HFile.Reader} to deal with pread.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HFilePreadReader
extends|extends
name|HFileReaderImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HFileReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|HFilePreadReader
parameter_list|(
name|ReaderContext
name|context
parameter_list|,
name|HFileInfo
name|fileInfo
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|fileInfo
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Prefetch file blocks upon open if requested
if|if
condition|(
name|cacheConf
operator|.
name|shouldPrefetchOnOpen
argument_list|()
condition|)
block|{
name|PrefetchExecutor
operator|.
name|request
argument_list|(
name|path
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
try|try
block|{
name|end
operator|=
name|getTrailer
argument_list|()
operator|.
name|getLoadOnOpenDataOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Prefetch start "
operator|+
name|getPathOffsetEndStr
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Don't use BlockIterator here, because it's designed to read load-on-open section.
name|long
name|onDiskSizeOfNextBlock
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Perhaps we got our block from cache? Unlikely as this may be, if it happens, then
comment|// the internal-to-hfileblock thread local which holds the overread that gets the
comment|// next header, will not have happened...so, pass in the onDiskSize gotten from the
comment|// cached block. This 'optimization' triggers extremely rarely I'd say.
name|HFileBlock
name|block
init|=
name|readBlock
argument_list|(
name|offset
argument_list|,
name|onDiskSizeOfNextBlock
argument_list|,
comment|/* cacheBlock= */
literal|true
argument_list|,
comment|/* pread= */
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|onDiskSizeOfNextBlock
operator|=
name|block
operator|.
name|getNextBlockOnDiskSize
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|block
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Ideally here the readBlock won't find the block in cache. We call this
comment|// readBlock so that block data is read from FS and cached in BC. we must call
comment|// returnBlock here to decrease the reference count of block.
name|block
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// IOExceptions are probably due to region closes (relocation, etc.)
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Prefetch "
operator|+
name|getPathOffsetEndStr
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stream moved/closed or prefetch cancelled?"
operator|+
name|getPathOffsetEndStr
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Other exceptions are interesting
name|LOG
operator|.
name|warn
argument_list|(
literal|"Prefetch "
operator|+
name|getPathOffsetEndStr
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|PrefetchExecutor
operator|.
name|complete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getPathOffsetEndStr
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|end
parameter_list|)
block|{
return|return
literal|"path="
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", end="
operator|+
name|end
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|evictOnClose
parameter_list|)
throws|throws
name|IOException
block|{
name|PrefetchExecutor
operator|.
name|cancel
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Deallocate blocks in load-on-open section
name|this
operator|.
name|fileInfo
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Deallocate data blocks
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|cache
lambda|->
block|{
if|if
condition|(
name|evictOnClose
condition|)
block|{
name|int
name|numEvicted
init|=
name|cache
operator|.
name|evictBlocksByHfileName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"On close, file="
operator|+
name|name
operator|+
literal|" evicted="
operator|+
name|numEvicted
operator|+
literal|" block(s)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fsBlockReader
operator|.
name|closeStreams
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

