begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionOpeningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|CatalogJanitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Handles MERGE regions request on master: move the regions together(on the  * same regionserver) and send MERGE RPC to regionserver.  *  * NOTE:The real merge is executed on the regionserver  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DispatchMergingRegionHandler
extends|extends
name|EventHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DispatchMergingRegionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
specifier|final
name|CatalogJanitor
name|catalogJanitor
decl_stmt|;
specifier|private
name|HRegionInfo
name|region_a
decl_stmt|;
specifier|private
name|HRegionInfo
name|region_b
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|forcible
decl_stmt|;
specifier|private
specifier|final
name|int
name|timeout
decl_stmt|;
specifier|public
name|DispatchMergingRegionHandler
parameter_list|(
specifier|final
name|MasterServices
name|services
parameter_list|,
specifier|final
name|CatalogJanitor
name|catalogJanitor
parameter_list|,
specifier|final
name|HRegionInfo
name|region_a
parameter_list|,
specifier|final
name|HRegionInfo
name|region_b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
block|{
name|super
argument_list|(
name|services
argument_list|,
name|EventType
operator|.
name|C_M_MERGE_REGION
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|=
name|services
expr_stmt|;
name|this
operator|.
name|catalogJanitor
operator|=
name|catalogJanitor
expr_stmt|;
name|this
operator|.
name|region_a
operator|=
name|region_a
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|region_b
expr_stmt|;
name|this
operator|.
name|forcible
operator|=
name|forcible
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.master.regionmerge.timeout"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|regionAHasMergeQualifier
init|=
operator|!
name|catalogJanitor
operator|.
name|cleanMergeQualifier
argument_list|(
name|region_a
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionAHasMergeQualifier
operator|||
operator|!
name|catalogJanitor
operator|.
name|cleanMergeQualifier
argument_list|(
name|region_b
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip merging regions "
operator|+
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", because region "
operator|+
operator|(
name|regionAHasMergeQualifier
condition|?
name|region_a
operator|.
name|getEncodedName
argument_list|()
else|:
name|region_b
operator|.
name|getEncodedName
argument_list|()
operator|)
operator|+
literal|" has merge qualifier"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionStates
name|regionStates
init|=
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|region_a_location
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|region_a
argument_list|)
decl_stmt|;
name|ServerName
name|region_b_location
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|region_b
argument_list|)
decl_stmt|;
if|if
condition|(
name|region_a_location
operator|==
literal|null
operator|||
name|region_b_location
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip merging regions "
operator|+
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", because region "
operator|+
operator|(
name|region_a_location
operator|==
literal|null
condition|?
name|region_a
operator|.
name|getEncodedName
argument_list|()
else|:
name|region_b
operator|.
name|getEncodedName
argument_list|()
operator|)
operator|+
literal|" is not online now"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|onSameRS
init|=
name|region_a_location
operator|.
name|equals
argument_list|(
name|region_b_location
argument_list|)
decl_stmt|;
comment|// Make sure regions are on the same regionserver before send merge
comment|// regions request to regionserver
if|if
condition|(
operator|!
name|onSameRS
condition|)
block|{
comment|// Move region_b to region a's location, switch region_a and region_b if
comment|// region_a's load lower than region_b's, so we will always move lower
comment|// load region
name|RegionLoad
name|loadOfRegionA
init|=
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLoad
argument_list|(
name|region_a_location
argument_list|)
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|get
argument_list|(
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionLoad
name|loadOfRegionB
init|=
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getLoad
argument_list|(
name|region_b_location
argument_list|)
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|get
argument_list|(
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadOfRegionA
operator|!=
literal|null
operator|&&
name|loadOfRegionB
operator|!=
literal|null
operator|&&
name|loadOfRegionA
operator|.
name|getRequestsCount
argument_list|()
operator|<
name|loadOfRegionB
operator|.
name|getRequestsCount
argument_list|()
condition|)
block|{
comment|// switch region_a and region_b
name|HRegionInfo
name|tmpRegion
init|=
name|this
operator|.
name|region_a
decl_stmt|;
name|this
operator|.
name|region_a
operator|=
name|this
operator|.
name|region_b
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|tmpRegion
expr_stmt|;
name|ServerName
name|tmpLocation
init|=
name|region_a_location
decl_stmt|;
name|region_a_location
operator|=
name|region_b_location
expr_stmt|;
name|region_b_location
operator|=
name|tmpLocation
expr_stmt|;
block|}
name|RegionPlan
name|regionPlan
init|=
operator|new
name|RegionPlan
argument_list|(
name|region_b
argument_list|,
name|region_b_location
argument_list|,
name|region_a_location
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving regions to same server for merge: "
operator|+
name|regionPlan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|balance
argument_list|(
name|regionPlan
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// Make sure check RIT first, then get region location, otherwise
comment|// we would make a wrong result if region is online between getting
comment|// region location and checking RIT
name|boolean
name|isRIT
init|=
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|region_b
argument_list|)
decl_stmt|;
name|region_b_location
operator|=
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|region_b
argument_list|)
expr_stmt|;
name|onSameRS
operator|=
name|region_a_location
operator|.
name|equals
argument_list|(
name|region_b_location
argument_list|)
expr_stmt|;
if|if
condition|(
name|onSameRS
operator|||
operator|!
name|isRIT
condition|)
block|{
comment|// Regions are on the same RS, or region_b is not in
comment|// RegionInTransition any more
break|break;
block|}
if|if
condition|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|>
name|timeout
condition|)
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|InterruptedIOException
name|iioe
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iioe
throw|;
block|}
block|}
block|}
if|if
condition|(
name|onSameRS
condition|)
block|{
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|sendRegionsMerge
argument_list|(
name|region_a_location
argument_list|,
name|region_a
argument_list|,
name|region_b
argument_list|,
name|forcible
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent merge to server "
operator|+
name|region_a_location
operator|+
literal|" for region "
operator|+
name|region_a
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|","
operator|+
name|region_b
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", focible="
operator|+
name|forcible
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|RegionOpeningException
name|roe
parameter_list|)
block|{
if|if
condition|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|>
name|timeout
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed sending merge to "
operator|+
name|region_a_location
operator|+
literal|" after "
operator|+
name|timeout
operator|+
literal|"ms"
argument_list|,
name|roe
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Do a retry since region should be online on RS immediately
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed sending merge to "
operator|+
name|region_a_location
operator|+
literal|" for region "
operator|+
name|region_a
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|","
operator|+
name|region_b
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", focible="
operator|+
name|forcible
argument_list|,
name|ie
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel merging regions "
operator|+
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", because can't move them together after "
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

