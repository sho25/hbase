begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|CellSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|EntryBuffers
operator|.
name|RegionEntryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BoundedRecoveredHFilesOutputSink
extends|extends
name|OutputSink
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BoundedRecoveredHFilesOutputSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAL_SPLIT_TO_HFILE
init|=
literal|"hbase.wal.split.to.hfile"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_WAL_SPLIT_TO_HFILE
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|WALSplitter
name|walSplitter
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableDescriptor
argument_list|>
name|tableDescCache
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
name|FileSystem
name|rootFS
decl_stmt|;
comment|// Since the splitting process may create multiple output files, we need a map
comment|// to track the output count of each region.
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|regionEditsWrittenMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Need a counter to track the opening writers.
specifier|private
specifier|final
name|AtomicInteger
name|openingWritersNum
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|BoundedRecoveredHFilesOutputSink
parameter_list|(
name|WALSplitter
name|walSplitter
parameter_list|,
name|WALSplitter
operator|.
name|PipelineController
name|controller
parameter_list|,
name|EntryBuffers
name|entryBuffers
parameter_list|,
name|int
name|numWriters
parameter_list|)
block|{
name|super
argument_list|(
name|controller
argument_list|,
name|entryBuffers
argument_list|,
name|numWriters
argument_list|)
expr_stmt|;
name|this
operator|.
name|walSplitter
operator|=
name|walSplitter
expr_stmt|;
name|tableDescCache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startWriterThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|walSplitter
operator|.
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|rootFS
operator|=
name|FSUtils
operator|.
name|getRootDirFileSystem
argument_list|(
name|walSplitter
operator|.
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|startWriterThreads
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CellSet
argument_list|>
name|familyCells
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|familySeqIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isMetaTable
init|=
name|buffer
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|WAL
operator|.
name|Entry
name|entry
range|:
name|buffer
operator|.
name|entryBuffer
control|)
block|{
name|long
name|seqId
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
argument_list|)
decl_stmt|;
comment|// comparator need to be specified for meta
name|familyCells
operator|.
name|computeIfAbsent
argument_list|(
name|familyName
argument_list|,
name|key
lambda|->
operator|new
name|CellSet
argument_list|(
name|isMetaTable
condition|?
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
else|:
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|familySeqIds
operator|.
name|compute
argument_list|(
name|familyName
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
name|seqId
else|:
name|Math
operator|.
name|max
argument_list|(
name|v
argument_list|,
name|seqId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The key point is create a new writer for each column family, write edits then close writer.
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CellSet
argument_list|>
name|cellsEntry
range|:
name|familyCells
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|familyName
init|=
name|cellsEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
name|createRecoveredHFileWriter
argument_list|(
name|buffer
operator|.
name|tableName
argument_list|,
name|regionName
argument_list|,
name|familySeqIds
operator|.
name|get
argument_list|(
name|familyName
argument_list|)
argument_list|,
name|familyName
argument_list|,
name|isMetaTable
argument_list|)
decl_stmt|;
name|openingWritersNum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cellsEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|regionEditsWrittenMap
operator|.
name|compute
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
name|buffer
operator|.
name|entryBuffer
operator|.
name|size
argument_list|()
else|:
name|v
operator|+
name|buffer
operator|.
name|entryBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|splits
operator|.
name|add
argument_list|(
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|openingWritersNum
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
init|=
literal|true
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|&=
name|finishWriterThreads
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|isSuccessful
operator|&=
name|writeRemainingEntryBuffers
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
name|isSuccessful
condition|?
name|splits
else|:
literal|null
return|;
block|}
comment|/**    * Write out the remaining RegionEntryBuffers and close the writers.    *    * @return true when there is no error.    */
specifier|private
name|boolean
name|writeRemainingEntryBuffers
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|EntryBuffers
operator|.
name|RegionEntryBuffer
name|buffer
range|:
name|entryBuffers
operator|.
name|buffers
operator|.
name|values
argument_list|()
control|)
block|{
name|closeCompletionService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progressFailed
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|entryBuffers
operator|.
name|buffers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|closeCompletionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progressFailed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progressFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|progressFailed
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
return|return
name|regionEditsWrittenMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|regionEditsWrittenMap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
name|int
name|getNumOpenWriters
parameter_list|()
block|{
return|return
name|openingWritersNum
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|keepRegionEvent
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|StoreFileWriter
name|createRecoveredHFileWriter
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|regionName
parameter_list|,
name|long
name|seqId
parameter_list|,
name|String
name|familyName
parameter_list|,
name|boolean
name|isMetaTable
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|outputFile
init|=
name|WALSplitUtil
operator|.
name|getRegionRecoveredHFilePath
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|,
name|familyName
argument_list|,
name|seqId
argument_list|,
name|walSplitter
operator|.
name|getFileBeingSplit
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|walSplitter
operator|.
name|conf
argument_list|,
name|rootFS
argument_list|)
decl_stmt|;
name|checkPathValid
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
name|StoreFileWriter
operator|.
name|Builder
name|writerBuilder
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|walSplitter
operator|.
name|conf
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
name|rootFS
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|outputFile
argument_list|)
decl_stmt|;
name|HFileContextBuilder
name|hFileContextBuilder
init|=
operator|new
name|HFileContextBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMetaTable
condition|)
block|{
name|hFileContextBuilder
operator|.
name|withCellComparator
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configContextForNonMetaWriter
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|,
name|hFileContextBuilder
argument_list|,
name|writerBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|writerBuilder
operator|.
name|withFileContext
argument_list|(
name|hFileContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|configContextForNonMetaWriter
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|,
name|HFileContextBuilder
name|hFileContextBuilder
parameter_list|,
name|StoreFileWriter
operator|.
name|Builder
name|writerBuilder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tableDescCache
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableDescCache
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableDescriptor
name|tableDesc
init|=
name|tableDescCache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|tableDesc
operator|.
name|getColumnFamily
argument_list|(
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|familyName
argument_list|)
argument_list|)
decl_stmt|;
name|hFileContextBuilder
operator|.
name|withCompression
argument_list|(
name|cfd
operator|.
name|getCompressionType
argument_list|()
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|cfd
operator|.
name|getBlocksize
argument_list|()
argument_list|)
operator|.
name|withCompressTags
argument_list|(
name|cfd
operator|.
name|isCompressTags
argument_list|()
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|cfd
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|withCellComparator
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|writerBuilder
operator|.
name|withBloomType
argument_list|(
name|cfd
operator|.
name|getBloomFilterType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPathValid
parameter_list|(
name|Path
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rootFS
operator|.
name|exists
argument_list|(
name|outputFile
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"this file {} may be left after last failed split "
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rootFS
operator|.
name|delete
argument_list|(
name|outputFile
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete old generated HFile {} failed"
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

