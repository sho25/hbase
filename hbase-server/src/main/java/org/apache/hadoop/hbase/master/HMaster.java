begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HealthCheckChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PleaseHoldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnknownProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|FifoRpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|SimpleRpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BalancerChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|ClusterStatusChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadBalancerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|HFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|LogCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|CreateTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|DeleteTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|DisableTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|DispatchMergingRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|EnableTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|ModifyTableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|TableAddFamilyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|TableDeleteFamilyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|TableModifyFamilyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MemoryBoundedLogMessageBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|AddColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|AddColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|AssignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|AssignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|BalanceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|RunCatalogScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|RunCatalogScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DeleteTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DisableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DisableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DispatchMergingRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|DispatchMergingRegionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|EnableCatalogJanitorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|EnableCatalogJanitorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|EnableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|EnableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsCatalogJanitorEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsCatalogJanitorEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsRestoreSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsRestoreSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|IsSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|GetCompletedSnapshotsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|GetCompletedSnapshotsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ModifyColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ModifyColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ModifyTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ModifyTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|MoveRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|MoveRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|OfflineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|OfflineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|RestoreSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|SetBalancerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|ShutdownResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|StopMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|StopMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|SnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|SnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|UnassignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|UnassignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetClusterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetClusterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetSchemaAlterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetSchemaAlterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterMonitorProtos
operator|.
name|GetTableNamesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsMasterRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsMasterRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRSFatalErrorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|Replication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
operator|.
name|SpanReceiverHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CompressionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HasThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ClusterStatusTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|DrainingServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|LoadBalancerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RegionServerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MBeanUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * HMaster is the "master server" for HBase. An HBase cluster has one active  * master.  If many masters are started, all compete.  Whichever wins goes on to  * run the cluster.  All others park themselves in their constructor until  * master or cluster shutdown or until the active master loses its lease in  * zookeeper.  Thereafter, all running master jostle to take over master role.  *  *<p>The Master can be asked shutdown the cluster. See {@link #shutdown()}.  In  * this case it will tell all regionservers to go down and then wait on them  * all reporting in that they are down.  This master will then shut itself down.  *  *<p>You can also shutdown just this master.  Call {@link #stopMaster()}.  *  * @see Watcher  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|HMaster
extends|extends
name|HasThread
implements|implements
name|MasterMonitorProtos
operator|.
name|MasterMonitorService
operator|.
name|BlockingInterface
implements|,
name|MasterAdminProtos
operator|.
name|MasterAdminService
operator|.
name|BlockingInterface
implements|,
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
operator|.
name|BlockingInterface
implements|,
name|MasterServices
implements|,
name|Server
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// MASTER is name of the webapp and the attribute name used stuffing this
comment|//instance into web context.
specifier|public
specifier|static
specifier|final
name|String
name|MASTER
init|=
literal|"master"
decl_stmt|;
comment|// The configuration for the Master
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// server for the web ui
specifier|private
name|InfoServer
name|infoServer
decl_stmt|;
comment|// Our zk client.
specifier|private
name|ZooKeeperWatcher
name|zooKeeper
decl_stmt|;
comment|// Manager and zk listener for master election
specifier|private
name|ActiveMasterManager
name|activeMasterManager
decl_stmt|;
comment|// Region server tracker
name|RegionServerTracker
name|regionServerTracker
decl_stmt|;
comment|// Draining region server tracker
specifier|private
name|DrainingServerTracker
name|drainingServerTracker
decl_stmt|;
comment|// Tracker for load balancer state
specifier|private
name|LoadBalancerTracker
name|loadBalancerTracker
decl_stmt|;
comment|// master address manager and watcher
specifier|private
name|MasterAddressTracker
name|masterAddressManager
decl_stmt|;
comment|// RPC server for the HMaster
specifier|private
specifier|final
name|RpcServerInterface
name|rpcServer
decl_stmt|;
comment|// Set after we've called HBaseServer#openServer and ready to receive RPCs.
comment|// Set back to false after we stop rpcServer.  Used by tests.
specifier|private
specifier|volatile
name|boolean
name|rpcServerOpen
init|=
literal|false
decl_stmt|;
comment|/** Namespace stuff */
specifier|private
name|TableNamespaceManager
name|tableNamespaceManager
decl_stmt|;
specifier|private
name|NamespaceJanitor
name|namespaceJanitorChore
decl_stmt|;
comment|/**    * This servers address.    */
specifier|private
specifier|final
name|InetSocketAddress
name|isa
decl_stmt|;
comment|// Metrics for the HMaster
specifier|private
specifier|final
name|MetricsMaster
name|metricsMaster
decl_stmt|;
comment|// file system manager for the master FS operations
specifier|private
name|MasterFileSystem
name|fileSystemManager
decl_stmt|;
comment|// server manager to deal with region server info
name|ServerManager
name|serverManager
decl_stmt|;
comment|// manager of assignment nodes in zookeeper
name|AssignmentManager
name|assignmentManager
decl_stmt|;
comment|// manager of catalog regions
specifier|private
name|CatalogTracker
name|catalogTracker
decl_stmt|;
comment|// Cluster status zk tracker and local setter
specifier|private
name|ClusterStatusTracker
name|clusterStatusTracker
decl_stmt|;
comment|// buffer for "fatal error" notices from region servers
comment|// in the cluster. This is only used for assisting
comment|// operations/debugging.
specifier|private
name|MemoryBoundedLogMessageBuffer
name|rsFatals
decl_stmt|;
comment|// This flag is for stopping this Master instance.  Its set when we are
comment|// stopping or aborting
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
comment|// Set on abort -- usually failure of our zk session.
specifier|private
specifier|volatile
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
comment|// flag set after we become the active master (used for testing)
specifier|private
specifier|volatile
name|boolean
name|isActiveMaster
init|=
literal|false
decl_stmt|;
comment|// flag set after we complete initialization once active,
comment|// it is not private since it's used in unit tests
specifier|volatile
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|// flag set after we complete assignMeta.
specifier|private
specifier|volatile
name|boolean
name|serverShutdownHandlerEnabled
init|=
literal|false
decl_stmt|;
comment|// Instance of the hbase executor service.
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|LoadBalancer
name|balancer
decl_stmt|;
specifier|private
name|Thread
name|balancerChore
decl_stmt|;
specifier|private
name|Thread
name|clusterStatusChore
decl_stmt|;
specifier|private
name|ClusterStatusPublisher
name|clusterStatusPublisherChore
init|=
literal|null
decl_stmt|;
specifier|private
name|CatalogJanitor
name|catalogJanitorChore
decl_stmt|;
specifier|private
name|LogCleaner
name|logCleaner
decl_stmt|;
specifier|private
name|HFileCleaner
name|hfileCleaner
decl_stmt|;
specifier|private
name|MasterCoprocessorHost
name|cpHost
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|serverName
decl_stmt|;
specifier|private
name|TableDescriptors
name|tableDescriptors
decl_stmt|;
comment|// Table level lock manager for schema changes
specifier|private
name|TableLockManager
name|tableLockManager
decl_stmt|;
comment|// Time stamps for when a hmaster was started and when it became active
specifier|private
name|long
name|masterStartTime
decl_stmt|;
specifier|private
name|long
name|masterActiveTime
decl_stmt|;
comment|/** time interval for emitting metrics values */
specifier|private
specifier|final
name|int
name|msgInterval
decl_stmt|;
comment|/**    * MX Bean for MasterInfo    */
specifier|private
name|ObjectName
name|mxBean
init|=
literal|null
decl_stmt|;
comment|//should we check the compression codec type at master side, default true, HBASE-6370
specifier|private
specifier|final
name|boolean
name|masterCheckCompression
decl_stmt|;
specifier|private
name|SpanReceiverHost
name|spanReceiverHost
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Service
argument_list|>
name|coprocessorServiceHandlers
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// monitor for snapshot of hbase tables
specifier|private
name|SnapshotManager
name|snapshotManager
decl_stmt|;
comment|/** The health check chore. */
specifier|private
name|HealthCheckChore
name|healthCheckChore
decl_stmt|;
comment|/**    * is in distributedLogReplay mode. When true, SplitLogWorker directly replays WAL edits to newly    * assigned region servers instead of creating recovered.edits files.    */
specifier|private
specifier|final
name|boolean
name|distributedLogReplay
decl_stmt|;
comment|/** flag used in test cases in order to simulate RS failures during master initialization */
specifier|private
specifier|volatile
name|boolean
name|initializationBeforeMetaAssignment
init|=
literal|false
decl_stmt|;
comment|/** The following is used in master recovery scenario to re-register listeners */
specifier|private
name|List
argument_list|<
name|ZooKeeperListener
argument_list|>
name|registeredZKListenersBeforeRecovery
decl_stmt|;
comment|/**    * Initializes the HMaster. The steps are as follows:    *<p>    *<ol>    *<li>Initialize HMaster RPC and address    *<li>Connect to ZooKeeper.    *</ol>    *<p>    * Remaining steps of initialization occur in {@link #run()} so that they    * run in their own thread rather than within the context of the constructor.    * @throws InterruptedException    */
specifier|public
name|HMaster
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Disable the block cache on the master
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// Server to handle client requests.
name|String
name|hostname
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MASTER_PORT
argument_list|)
decl_stmt|;
comment|// Test that the hostname is reachable
name|InetSocketAddress
name|initialIsa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of hostname "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
comment|// Verify that the bind address is reachable if set
name|String
name|bindAddress
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.ipc.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindAddress
operator|!=
literal|null
condition|)
block|{
name|initialIsa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of bind address "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
block|}
name|String
name|name
init|=
literal|"master/"
operator|+
name|initialIsa
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Set how many times to retry talking to another server over HConnection.
name|HConnectionManager
operator|.
name|setServerSideHConnectionRetries
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|name
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|int
name|numHandlers
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|MASTER_HANDLER_COUNT
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_COUNT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MASTER_HANLDER_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|=
operator|new
name|RpcServer
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|getServices
argument_list|()
argument_list|,
name|initialIsa
argument_list|,
comment|// BindAddress is IP we got for this server.
name|conf
argument_list|,
operator|new
name|FifoRpcScheduler
argument_list|(
name|conf
argument_list|,
name|numHandlers
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set our address.
name|this
operator|.
name|isa
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
comment|// We don't want to pass isa's hostname here since it could be 0.0.0.0
name|this
operator|.
name|serverName
operator|=
operator|new
name|ServerName
argument_list|(
name|hostname
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsFatals
operator|=
operator|new
name|MemoryBoundedLogMessageBuffer
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.buffer.for.rs.fatals"
argument_list|,
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// login the zookeeper client principal (if using security)
name|ZKUtil
operator|.
name|loginClient
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|"hbase.zookeeper.client.keytab.file"
argument_list|,
literal|"hbase.zookeeper.client.kerberos.principal"
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize server principal (if using secure Hadoop)
name|User
operator|.
name|login
argument_list|(
name|conf
argument_list|,
literal|"hbase.master.keytab.file"
argument_list|,
literal|"hbase.master.kerberos.principal"
argument_list|,
name|this
operator|.
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.rootdir="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|+
literal|", hbase.cluster.distributed="
operator|+
name|this
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.cluster.distributed"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the thread name now we have an address
name|setName
argument_list|(
name|MASTER
operator|+
literal|":"
operator|+
name|this
operator|.
name|serverName
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|Replication
operator|.
name|decorateMasterConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Hack! Maps DFSClient => Master for logs.  HDFS made this
comment|// config param for task trackers, but we can piggyback off of it.
if|if
condition|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.task.id"
argument_list|,
literal|"hb_m_"
operator|+
name|this
operator|.
name|serverName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|zooKeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|MASTER
operator|+
literal|":"
operator|+
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|startThreads
argument_list|()
expr_stmt|;
comment|// metrics interval: using the same property as region server.
name|this
operator|.
name|msgInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//should we check the compression codec type at master side, default true, HBASE-6370
name|this
operator|.
name|masterCheckCompression
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.master.check.compression"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsMaster
operator|=
operator|new
name|MetricsMaster
argument_list|(
operator|new
name|MetricsMasterWrapperImpl
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// Health checker thread.
name|int
name|sleepTime
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HEALTH_CHORE_WAKE_FREQ
argument_list|,
name|HConstants
operator|.
name|DEFAULT_THREAD_WAKE_FREQUENCY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHealthCheckerConfigured
argument_list|()
condition|)
block|{
name|healthCheckChore
operator|=
operator|new
name|HealthCheckChore
argument_list|(
name|sleepTime
argument_list|,
name|this
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Do we publish the status?
name|boolean
name|shouldPublish
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|STATUS_PUBLISHED
argument_list|,
name|HConstants
operator|.
name|STATUS_PUBLISHED_DEFAULT
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ClusterStatusPublisher
operator|.
name|Publisher
argument_list|>
name|publisherClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|ClusterStatusPublisher
operator|.
name|STATUS_PUBLISHER_CLASS
argument_list|,
name|ClusterStatusPublisher
operator|.
name|DEFAULT_STATUS_PUBLISHER_CLASS
argument_list|,
name|ClusterStatusPublisher
operator|.
name|Publisher
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldPublish
condition|)
block|{
if|if
condition|(
name|publisherClass
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|HConstants
operator|.
name|STATUS_PUBLISHED
operator|+
literal|" is true, but "
operator|+
name|ClusterStatusPublisher
operator|.
name|DEFAULT_STATUS_PUBLISHER_CLASS
operator|+
literal|" is not set - not publishing status"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterStatusPublisherChore
operator|=
operator|new
name|ClusterStatusPublisher
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|publisherClass
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|clusterStatusPublisherChore
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|distributedLogReplay
operator|=
name|this
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return list of blocking services and their security info classes that this server supports    */
specifier|private
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|getServices
parameter_list|()
block|{
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|bssi
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|MasterMonitorProtos
operator|.
name|MasterMonitorService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|MasterMonitorProtos
operator|.
name|MasterMonitorService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|MasterAdminProtos
operator|.
name|MasterAdminService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|MasterAdminProtos
operator|.
name|MasterAdminService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|bssi
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
argument_list|,
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bssi
return|;
block|}
comment|/**    * Stall startup if we are designated a backup master; i.e. we want someone    * else to become the master before proceeding.    * @param c configuration    * @param amm    * @throws InterruptedException    */
specifier|private
specifier|static
name|void
name|stallIfBackupMaster
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|ActiveMasterManager
name|amm
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// If we're a backup master, stall until a primary to writes his address
if|if
condition|(
operator|!
name|c
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|MASTER_TYPE_BACKUP
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MASTER_TYPE_BACKUP
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"HMaster started in backup mode.  "
operator|+
literal|"Stalling until master znode is written."
argument_list|)
expr_stmt|;
comment|// This will only be a minute or so while the cluster starts up,
comment|// so don't worry about setting watches on the parent znode
while|while
condition|(
operator|!
name|amm
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for master address ZNode to be written "
operator|+
literal|"(Also watching cluster state node)"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|c
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZK_SESSION_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZK_SESSION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MetricsMaster
name|getMetrics
parameter_list|()
block|{
return|return
name|metricsMaster
return|;
block|}
comment|/**    * Main processing loop for the HMaster.    *<ol>    *<li>Block until becoming active master    *<li>Finish initialization via finishInitialization(MonitoredTask)    *<li>Enter loop until we are stopped    *<li>Stop services and perform cleanup once stopped    *</ol>    */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MonitoredTask
name|startupStatus
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Master startup"
argument_list|)
decl_stmt|;
name|startupStatus
operator|.
name|setDescription
argument_list|(
literal|"Master startup"
argument_list|)
expr_stmt|;
name|masterStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registeredZKListenersBeforeRecovery
operator|=
name|this
operator|.
name|zooKeeper
operator|.
name|getListeners
argument_list|()
expr_stmt|;
name|this
operator|.
name|masterAddressManager
operator|=
operator|new
name|MasterAddressTracker
argument_list|(
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterAddressManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Put up info server.
name|int
name|port
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|60010
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|String
name|a
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|this
operator|.
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
name|MASTER
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|addServlet
argument_list|(
literal|"status"
argument_list|,
literal|"/master-status"
argument_list|,
name|MasterStatusServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|addServlet
argument_list|(
literal|"dump"
argument_list|,
literal|"/dump"
argument_list|,
name|MasterDumpServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|MASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/*        * Block on becoming the active master.        *        * We race with other masters to write our address into ZooKeeper.  If we        * succeed, we are the primary/active master and finish initialization.        *        * If we do not succeed, there is another active master and we should        * now wait until it dies to try and become the next active master.  If we        * do not succeed on our first attempt, this is no longer a cluster startup.        */
name|becomeActiveMaster
argument_list|(
name|startupStatus
argument_list|)
expr_stmt|;
comment|// We are either the active master or we were asked to shutdown
if|if
condition|(
operator|!
name|this
operator|.
name|stopped
condition|)
block|{
name|finishInitialization
argument_list|(
name|startupStatus
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// HBASE-5680: Likely hadoop23 vs hadoop 20.x/1.x incompatibility
if|if
condition|(
name|t
operator|instanceof
name|NoClassDefFoundError
operator|&&
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org/apache/hadoop/hdfs/protocol/FSConstants$SafeModeAction"
argument_list|)
condition|)
block|{
comment|// improved error message for this special case
name|abort
argument_list|(
literal|"HBase is having a problem with its Hadoop jars.  You may need to "
operator|+
literal|"recompile HBase against Hadoop version "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|" or change your hadoop jars to start properly"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abort
argument_list|(
literal|"Unhandled exception. Starting shutdown."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|startupStatus
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stopChores
argument_list|()
expr_stmt|;
comment|// Wait for all the remaining region servers to report in IFF we were
comment|// running a cluster shutdown AND we were NOT aborting.
if|if
condition|(
operator|!
name|this
operator|.
name|abort
operator|&&
name|this
operator|.
name|serverManager
operator|!=
literal|null
operator|&&
name|this
operator|.
name|serverManager
operator|.
name|isClusterShutdown
argument_list|()
condition|)
block|{
name|this
operator|.
name|serverManager
operator|.
name|letRegionServersShutdown
argument_list|()
expr_stmt|;
block|}
name|stopServiceThreads
argument_list|()
expr_stmt|;
comment|// Stop services started for both backup and active masters
if|if
condition|(
name|this
operator|.
name|activeMasterManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|activeMasterManager
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|catalogTracker
operator|!=
literal|null
condition|)
name|this
operator|.
name|catalogTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serverManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|serverManager
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|assignmentManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|assignmentManager
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fileSystemManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|fileSystemManager
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|snapshotManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|snapshotManager
operator|.
name|stop
argument_list|(
literal|"server shutting down."
argument_list|)
expr_stmt|;
name|this
operator|.
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster main thread exiting"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try becoming active master.    * @param startupStatus    * @return True if we could successfully become the active master.    * @throws InterruptedException    */
specifier|private
name|boolean
name|becomeActiveMaster
parameter_list|(
name|MonitoredTask
name|startupStatus
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// TODO: This is wrong!!!! Should have new servername if we restart ourselves,
comment|// if we come back to life.
name|this
operator|.
name|activeMasterManager
operator|=
operator|new
name|ActiveMasterManager
argument_list|(
name|zooKeeper
argument_list|,
name|this
operator|.
name|serverName
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|zooKeeper
operator|.
name|registerListener
argument_list|(
name|activeMasterManager
argument_list|)
expr_stmt|;
name|stallIfBackupMaster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|activeMasterManager
argument_list|)
expr_stmt|;
comment|// The ClusterStatusTracker is setup before the other
comment|// ZKBasedSystemTrackers because it's needed by the activeMasterManager
comment|// to check if the cluster should be shutdown.
name|this
operator|.
name|clusterStatusTracker
operator|=
operator|new
name|ClusterStatusTracker
argument_list|(
name|getZooKeeper
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterStatusTracker
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|activeMasterManager
operator|.
name|blockUntilBecomingActiveMaster
argument_list|(
name|startupStatus
argument_list|)
return|;
block|}
comment|/**    * Initialize all ZK based system trackers.    * @throws IOException    * @throws InterruptedException    */
name|void
name|initializeZKBasedSystemTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|catalogTracker
operator|=
name|createCatalogTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalogTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|balancer
operator|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|loadBalancerTracker
operator|=
operator|new
name|LoadBalancerTracker
argument_list|(
name|zooKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|loadBalancerTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
operator|new
name|AssignmentManager
argument_list|(
name|this
argument_list|,
name|serverManager
argument_list|,
name|this
operator|.
name|catalogTracker
argument_list|,
name|this
operator|.
name|balancer
argument_list|,
name|this
operator|.
name|executorService
argument_list|,
name|this
operator|.
name|metricsMaster
argument_list|,
name|this
operator|.
name|tableLockManager
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|registerListenerFirst
argument_list|(
name|assignmentManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerTracker
operator|=
operator|new
name|RegionServerTracker
argument_list|(
name|zooKeeper
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|drainingServerTracker
operator|=
operator|new
name|DrainingServerTracker
argument_list|(
name|zooKeeper
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|drainingServerTracker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Set the cluster as up.  If new RSs, they'll be waiting on this before
comment|// going ahead with their startup.
name|boolean
name|wasUp
init|=
name|this
operator|.
name|clusterStatusTracker
operator|.
name|isClusterUp
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wasUp
condition|)
name|this
operator|.
name|clusterStatusTracker
operator|.
name|setClusterUp
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server active/primary master="
operator|+
name|this
operator|.
name|serverName
operator|+
literal|", sessionid=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|+
literal|", setting cluster-up flag (Was="
operator|+
name|wasUp
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// create the snapshot manager
name|this
operator|.
name|snapshotManager
operator|=
operator|new
name|SnapshotManager
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|metricsMaster
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create CatalogTracker.    * In its own method so can intercept and mock it over in tests.    * @param zk If zk is null, we'll create an instance (and shut it down    * when {@link #stop(String)} is called) else we'll use what is passed.    * @param conf    * @param abortable If fatal exception we'll call abort on this.  May be null.    * If it is we'll use the Connection associated with the passed    * {@link Configuration} as our {@link Abortable}.    * ({@link Object#wait(long)} when passed a<code>0</code> waits for ever).    * @throws IOException    */
name|CatalogTracker
name|createCatalogTracker
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CatalogTracker
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
return|;
block|}
comment|// Check if we should stop every 100ms
specifier|private
name|Sleeper
name|stopSleeper
init|=
operator|new
name|Sleeper
argument_list|(
literal|100
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|private
name|void
name|loop
parameter_list|()
block|{
name|long
name|lastMsgTs
init|=
literal|0l
decl_stmt|;
name|long
name|now
init|=
literal|0l
decl_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|stopped
condition|)
block|{
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|now
operator|-
name|lastMsgTs
operator|)
operator|>=
name|this
operator|.
name|msgInterval
condition|)
block|{
name|doMetrics
argument_list|()
expr_stmt|;
name|lastMsgTs
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|stopSleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Emit the HMaster metrics, such as region in transition metrics.    * Surrounding in a try block just to be sure metrics doesn't abort HMaster.    */
specifier|private
name|void
name|doMetrics
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|assignmentManager
operator|.
name|updateRegionsInTransitionMetrics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't update metrics: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Finish initialization of HMaster after becoming the primary master.    *    *<ol>    *<li>Initialize master components - file system manager, server manager,    *     assignment manager, region server tracker, catalog tracker, etc</li>    *<li>Start necessary service threads - rpc server, info server,    *     executor services, etc</li>    *<li>Set cluster as UP in ZooKeeper</li>    *<li>Wait for RegionServers to check-in</li>    *<li>Split logs and perform data recovery, if necessary</li>    *<li>Ensure assignment of meta regions<li>    *<li>Handle either fresh cluster start or master failover</li>    *</ol>    *    * @param masterRecovery    *    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
specifier|private
name|void
name|finishInitialization
parameter_list|(
name|MonitoredTask
name|status
parameter_list|,
name|boolean
name|masterRecovery
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|isActiveMaster
operator|=
literal|true
expr_stmt|;
comment|/*      * We are active master now... go initialize components we need to run.      * Note, there may be dross in zk from previous runs; it'll get addressed      * below after we determine if cluster startup or failover.      */
name|status
operator|.
name|setStatus
argument_list|(
literal|"Initializing Master file system"
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterActiveTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// TODO: Do this using Dependency Injection, using PicoContainer, Guice or Spring.
name|this
operator|.
name|fileSystemManager
operator|=
operator|new
name|MasterFileSystem
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|masterRecovery
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableDescriptors
operator|=
operator|new
name|FSTableDescriptors
argument_list|(
name|this
operator|.
name|fileSystemManager
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|this
operator|.
name|fileSystemManager
operator|.
name|getRootDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// publish cluster ID
name|status
operator|.
name|setStatus
argument_list|(
literal|"Publishing Cluster ID in ZooKeeper"
argument_list|)
expr_stmt|;
name|ZKClusterId
operator|.
name|setClusterId
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|fileSystemManager
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
name|this
operator|.
name|executorService
operator|=
operator|new
name|ExecutorService
argument_list|(
name|getServerName
argument_list|()
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverManager
operator|=
name|createServerManager
argument_list|(
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|//Initialize table lock manager, and ensure that all write locks held previously
comment|//are invalidated
name|this
operator|.
name|tableLockManager
operator|=
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|conf
argument_list|,
name|zooKeeper
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
name|this
operator|.
name|tableLockManager
operator|.
name|reapWriteLocks
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|setStatus
argument_list|(
literal|"Initializing ZK system trackers"
argument_list|)
expr_stmt|;
name|initializeZKBasedSystemTrackers
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
comment|// initialize master side coprocessors before we start handling requests
name|status
operator|.
name|setStatus
argument_list|(
literal|"Initializing master coprocessors"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpHost
operator|=
operator|new
name|MasterCoprocessorHost
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|spanReceiverHost
operator|=
name|SpanReceiverHost
operator|.
name|getInstance
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// start up all service threads.
name|status
operator|.
name|setStatus
argument_list|(
literal|"Initializing master service threads"
argument_list|)
expr_stmt|;
name|startServiceThreads
argument_list|()
expr_stmt|;
block|}
comment|// Wait for region servers to report in.
name|this
operator|.
name|serverManager
operator|.
name|waitForRegionServers
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// Check zk for region servers that are up but didn't register
for|for
control|(
name|ServerName
name|sn
range|:
name|this
operator|.
name|regionServerTracker
operator|.
name|getOnlineServers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|sn
argument_list|)
operator|&&
name|serverManager
operator|.
name|checkAlreadySameHostPortAndRecordNewServer
argument_list|(
name|sn
argument_list|,
name|ServerLoad
operator|.
name|EMPTY_SERVERLOAD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered server found up in zk but who has not yet "
operator|+
literal|"reported in: "
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
name|this
operator|.
name|assignmentManager
operator|.
name|startTimeOutMonitor
argument_list|()
expr_stmt|;
block|}
comment|// get a list for previously failed RS which need log splitting work
comment|// we recover hbase:meta region servers inside master initialization and
comment|// handle other failed servers in SSH in order to start up master node ASAP
name|Set
argument_list|<
name|ServerName
argument_list|>
name|previouslyFailedServers
init|=
name|this
operator|.
name|fileSystemManager
operator|.
name|getFailedServersFromLogFolders
argument_list|()
decl_stmt|;
comment|// remove stale recovering regions from previous run
name|this
operator|.
name|fileSystemManager
operator|.
name|removeStaleRecoveringRegionsFromZK
argument_list|(
name|previouslyFailedServers
argument_list|)
expr_stmt|;
comment|// log splitting for hbase:meta server
name|ServerName
name|oldMetaServerLocation
init|=
name|this
operator|.
name|catalogTracker
operator|.
name|getMetaLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldMetaServerLocation
operator|!=
literal|null
operator|&&
name|previouslyFailedServers
operator|.
name|contains
argument_list|(
name|oldMetaServerLocation
argument_list|)
condition|)
block|{
name|splitMetaLogBeforeAssignment
argument_list|(
name|oldMetaServerLocation
argument_list|)
expr_stmt|;
comment|// Note: we can't remove oldMetaServerLocation from previousFailedServers list because it
comment|// may also host user regions
block|}
name|Set
argument_list|<
name|ServerName
argument_list|>
name|previouslyFailedMetaRSs
init|=
name|getPreviouselyFailedMetaServersFromZK
argument_list|()
decl_stmt|;
name|this
operator|.
name|initializationBeforeMetaAssignment
operator|=
literal|true
expr_stmt|;
comment|//initialize load balancer
name|this
operator|.
name|balancer
operator|.
name|setClusterStatus
argument_list|(
name|getClusterStatus
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|balancer
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Make sure meta assigned before proceeding.
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning Meta Region"
argument_list|)
expr_stmt|;
name|assignMeta
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// check if master is shutting down because above assignMeta could return even hbase:meta isn't
comment|// assigned when master is shutting down
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
operator|&&
operator|(
operator|!
name|previouslyFailedMetaRSs
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// replay WAL edits mode need new hbase:meta RS is assigned firstly
name|status
operator|.
name|setStatus
argument_list|(
literal|"replaying log for Meta Region"
argument_list|)
expr_stmt|;
comment|// need to use union of previouslyFailedMetaRSs recorded in ZK and previouslyFailedServers
comment|// instead of oldMetaServerLocation to address the following two situations:
comment|// 1) the chained failure situation(recovery failed multiple times in a row).
comment|// 2) master get killed right before it could delete the recovering hbase:meta from ZK while the
comment|// same server still has non-meta wals to be replayed so that
comment|// removeStaleRecoveringRegionsFromZK can't delete the stale hbase:meta region
comment|// Passing more servers into splitMetaLog is all right. If a server doesn't have hbase:meta wal,
comment|// there is no op for the server.
name|previouslyFailedMetaRSs
operator|.
name|addAll
argument_list|(
name|previouslyFailedServers
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystemManager
operator|.
name|splitMetaLog
argument_list|(
name|previouslyFailedMetaRSs
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning System tables"
argument_list|)
expr_stmt|;
comment|// Make sure system tables are assigned before proceeding.
name|assignSystemTables
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|enableServerShutdownHandler
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Submitting log splitting work for previously failed region servers"
argument_list|)
expr_stmt|;
comment|// Master has recovered hbase:meta region server and we put
comment|// other failed region servers in a queue to be handled later by SSH
for|for
control|(
name|ServerName
name|tmpServer
range|:
name|previouslyFailedServers
control|)
block|{
name|this
operator|.
name|serverManager
operator|.
name|processDeadServer
argument_list|(
name|tmpServer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Update meta with new PB serialization if required. i.e migrate all HRI to PB serialization
comment|// in meta. This must happen before we assign all user regions or else the assignment will
comment|// fail.
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaMigrationConvertingToPB
operator|.
name|updateMetaIfNecessary
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Fix up assignment manager status
name|status
operator|.
name|setStatus
argument_list|(
literal|"Starting assignment manager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|.
name|joinCluster
argument_list|()
expr_stmt|;
comment|//set cluster status again after user regions are assigned
name|this
operator|.
name|balancer
operator|.
name|setClusterStatus
argument_list|(
name|getClusterStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
comment|// Start balancer and meta catalog janitor after meta and regions have
comment|// been assigned.
name|status
operator|.
name|setStatus
argument_list|(
literal|"Starting balancer and catalog janitor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterStatusChore
operator|=
name|getAndStartClusterStatusChore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|balancerChore
operator|=
name|getAndStartBalancerChore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalogJanitorChore
operator|=
operator|new
name|CatalogJanitor
argument_list|(
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespaceJanitorChore
operator|=
operator|new
name|NamespaceJanitor
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|startCatalogJanitorChore
argument_list|()
expr_stmt|;
name|startNamespaceJanitorChore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cpHost
operator|.
name|preMasterInitialization
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Coprocessor preMasterInitialization() hook failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|status
operator|.
name|markComplete
argument_list|(
literal|"Initialization successful"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Master has completed initialization"
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
comment|// clear the dead servers with same host name and port of online server because we are not
comment|// removing dead server with same hostname and port of rs which is trying to check in before
comment|// master initialization. See HBASE-5916.
name|this
operator|.
name|serverManager
operator|.
name|clearDeadServersWithSameHostNameAndPortOfOnlineServer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|masterRecovery
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
comment|// don't let cp initialization errors kill the master
try|try
block|{
name|this
operator|.
name|cpHost
operator|.
name|postStartMaster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Coprocessor postStartMaster() hook failed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Useful for testing purpose also where we have    * master restart scenarios.    */
specifier|protected
name|void
name|startCatalogJanitorChore
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|catalogJanitorChore
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Useful for testing purpose also where we have    * master restart scenarios.    */
specifier|protected
name|void
name|startNamespaceJanitorChore
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|namespaceJanitorChore
operator|.
name|getThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a {@link ServerManager} instance.    * @param master    * @param services    * @return An instance of {@link ServerManager}    * @throws org.apache.hadoop.hbase.ZooKeeperConnectionException    * @throws IOException    */
name|ServerManager
name|createServerManager
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|MasterServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We put this out here in a method so can do a Mockito.spy and stub it out
comment|// w/ a mocked up ServerManager.
return|return
operator|new
name|ServerManager
argument_list|(
name|master
argument_list|,
name|services
argument_list|)
return|;
block|}
comment|/**    * If ServerShutdownHandler is disabled, we enable it and expire those dead    * but not expired servers.    */
specifier|private
name|void
name|enableServerShutdownHandler
parameter_list|()
block|{
if|if
condition|(
operator|!
name|serverShutdownHandlerEnabled
condition|)
block|{
name|serverShutdownHandlerEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|serverManager
operator|.
name|processQueuedDeadServers
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Check<code>hbase:meta</code> is assigned. If not, assign it.    * @param status MonitoredTask    * @throws InterruptedException    * @throws IOException    * @throws KeeperException    */
name|void
name|assignMeta
parameter_list|(
name|MonitoredTask
name|status
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
comment|// Work on meta region
name|int
name|assigned
init|=
literal|0
decl_stmt|;
name|long
name|timeout
init|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.catalog.verification.timeout"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|boolean
name|beingExpired
init|=
literal|false
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning hbase:meta region"
argument_list|)
expr_stmt|;
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|createRegionState
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|boolean
name|rit
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|processRegionInTransitionAndBlockUntilAssigned
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
decl_stmt|;
name|boolean
name|metaRegionLocation
init|=
name|this
operator|.
name|catalogTracker
operator|.
name|verifyMetaRegionLocation
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rit
operator|&&
operator|!
name|metaRegionLocation
condition|)
block|{
name|ServerName
name|currentMetaServer
init|=
name|this
operator|.
name|catalogTracker
operator|.
name|getMetaLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentMetaServer
operator|!=
literal|null
condition|)
block|{
name|beingExpired
operator|=
name|expireIfOnline
argument_list|(
name|currentMetaServer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beingExpired
condition|)
block|{
name|splitMetaLogBeforeAssignment
argument_list|(
name|currentMetaServer
argument_list|)
expr_stmt|;
block|}
name|assignmentManager
operator|.
name|assignMeta
argument_list|()
expr_stmt|;
comment|// Make sure a hbase:meta location is set.
name|enableSSHandWaitForMeta
argument_list|()
expr_stmt|;
name|assigned
operator|++
expr_stmt|;
if|if
condition|(
name|beingExpired
operator|&&
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
comment|// In Replay WAL Mode, we need the new hbase:meta server online
name|this
operator|.
name|fileSystemManager
operator|.
name|splitMetaLog
argument_list|(
name|currentMetaServer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rit
operator|&&
operator|!
name|metaRegionLocation
condition|)
block|{
comment|// Make sure a hbase:meta location is set.
name|enableSSHandWaitForMeta
argument_list|()
expr_stmt|;
name|assigned
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// Region already assigned. We didn't assign it. Add to in-memory state.
name|this
operator|.
name|assignmentManager
operator|.
name|regionOnline
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|this
operator|.
name|catalogTracker
operator|.
name|getMetaLocation
argument_list|()
argument_list|)
expr_stmt|;
name|enableSSHandWaitForMeta
argument_list|()
expr_stmt|;
block|}
name|enableMeta
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase:meta assigned="
operator|+
name|assigned
operator|+
literal|", rit="
operator|+
name|rit
operator|+
literal|", location="
operator|+
name|catalogTracker
operator|.
name|getMetaLocation
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"META assigned."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|splitMetaLogBeforeAssignment
parameter_list|(
name|ServerName
name|currentMetaServer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
comment|// In log replay mode, we mark hbase:meta region as recovering in ZK
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystemManager
operator|.
name|prepareLogReplay
argument_list|(
name|currentMetaServer
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In recovered.edits mode: create recovered edits file for hbase:meta server
name|this
operator|.
name|fileSystemManager
operator|.
name|splitMetaLog
argument_list|(
name|currentMetaServer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|splitLogBeforeAssignment
parameter_list|(
name|ServerName
name|currentServer
parameter_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|this
operator|.
name|fileSystemManager
operator|.
name|prepareLogReplay
argument_list|(
name|currentServer
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In recovered.edits mode: create recovered edits file for region server
name|this
operator|.
name|fileSystemManager
operator|.
name|splitLog
argument_list|(
name|currentServer
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|assignSystemTables
parameter_list|(
name|MonitoredTask
name|status
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
comment|// Skip assignment for regions of tables in DISABLING state because during clean cluster startup
comment|// no RS is alive and regions map also doesn't have any information about the regions.
comment|// See HBASE-6281.
name|Set
argument_list|<
name|TableName
argument_list|>
name|disabledOrDisablingOrEnabling
init|=
name|ZKTable
operator|.
name|getDisabledOrDisablingTables
argument_list|(
name|zooKeeper
argument_list|)
decl_stmt|;
name|disabledOrDisablingOrEnabling
operator|.
name|addAll
argument_list|(
name|ZKTable
operator|.
name|getEnablingTables
argument_list|(
name|zooKeeper
argument_list|)
argument_list|)
expr_stmt|;
comment|// Scan hbase:meta for all system regions, skipping any disabled tables
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|allRegions
init|=
name|MetaReader
operator|.
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|disabledOrDisablingOrEnabling
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|HRegionInfo
argument_list|>
name|iter
init|=
name|allRegions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|beingExpired
init|=
literal|false
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Assigning System Regions"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|allRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|currServer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|createRegionState
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
name|boolean
name|rit
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|processRegionInTransitionAndBlockUntilAssigned
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|boolean
name|regionLocation
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|currServer
operator|!=
literal|null
condition|)
block|{
name|regionLocation
operator|=
name|verifyRegionLocation
argument_list|(
name|currServer
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rit
operator|&&
operator|!
name|regionLocation
condition|)
block|{
name|beingExpired
operator|=
name|expireIfOnline
argument_list|(
name|currServer
argument_list|)
expr_stmt|;
if|if
condition|(
name|beingExpired
condition|)
block|{
name|splitLogBeforeAssignment
argument_list|(
name|currServer
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignmentManager
operator|.
name|assign
argument_list|(
name|regionInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure a region location is set.
name|this
operator|.
name|assignmentManager
operator|.
name|waitForAssignment
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|beingExpired
operator|&&
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
comment|// In Replay WAL Mode, we need the new region server online
name|this
operator|.
name|fileSystemManager
operator|.
name|splitLog
argument_list|(
name|currServer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rit
operator|&&
operator|!
name|regionLocation
condition|)
block|{
if|if
condition|(
operator|!
name|waitVerifiedRegionLocation
argument_list|(
name|regionInfo
argument_list|)
condition|)
return|return;
block|}
else|else
block|{
comment|// Region already assigned. We didn't assign it. Add to in-memory state.
name|this
operator|.
name|assignmentManager
operator|.
name|regionOnline
argument_list|(
name|regionInfo
argument_list|,
name|currServer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|regionInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|assignmentManager
operator|.
name|setEnabledTable
argument_list|(
name|regionInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"System region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" assigned, rit="
operator|+
name|rit
operator|+
literal|", location="
operator|+
name|catalogTracker
operator|.
name|getMetaLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setStatus
argument_list|(
literal|"System Regions assigned."
argument_list|)
expr_stmt|;
name|initNamespace
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|enableSSHandWaitForMeta
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|enableServerShutdownHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|catalogTracker
operator|.
name|waitForMeta
argument_list|()
expr_stmt|;
comment|// Above check waits for general meta availability but this does not
comment|// guarantee that the transition has completed
name|this
operator|.
name|assignmentManager
operator|.
name|waitForAssignment
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|waitVerifiedRegionLocation
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|stopped
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|catalogTracker
argument_list|,
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyRegionLocation
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
argument_list|,
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
condition|)
break|break;
block|}
comment|// We got here because we came of above loop.
return|return
operator|!
name|this
operator|.
name|stopped
return|;
block|}
specifier|private
name|boolean
name|verifyRegionLocation
parameter_list|(
name|ServerName
name|currServer
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
try|try
block|{
return|return
name|ProtobufUtil
operator|.
name|getRegionInfo
argument_list|(
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
operator|.
name|getAdmin
argument_list|(
name|currServer
argument_list|)
argument_list|,
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed verifying location="
operator|+
name|currServer
operator|+
literal|", exception="
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|enableMeta
parameter_list|(
name|TableName
name|metaTableName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|assignmentManager
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|metaTableName
argument_list|)
condition|)
block|{
name|this
operator|.
name|assignmentManager
operator|.
name|setEnabledTable
argument_list|(
name|metaTableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expire a server if we find it is one of the online servers.    * @param sn ServerName to check.    * @return true when server<code>sn<code> is being expired by the function.    * @throws IOException    */
specifier|private
name|boolean
name|expireIfOnline
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sn
operator|==
literal|null
operator|||
operator|!
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|sn
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Forcing expire of "
operator|+
name|sn
argument_list|)
expr_stmt|;
name|serverManager
operator|.
name|expireServer
argument_list|(
name|sn
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|void
name|initNamespace
parameter_list|()
throws|throws
name|IOException
block|{
comment|//create namespace manager
name|tableNamespaceManager
operator|=
operator|new
name|TableNamespaceManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tableNamespaceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * This function returns a set of region server names under hbase:meta recovering region ZK node    * @return Set of meta server names which were recorded in ZK    * @throws KeeperException    */
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getPreviouselyFailedMetaServersFromZK
parameter_list|()
throws|throws
name|KeeperException
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|metaRecoveringZNode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zooKeeper
operator|.
name|recoveringRegionsZNode
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|regionFailedServers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zooKeeper
argument_list|,
name|metaRecoveringZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionFailedServers
operator|==
literal|null
condition|)
return|return
name|result
return|;
for|for
control|(
name|String
name|failedServer
range|:
name|regionFailedServers
control|)
block|{
name|ServerName
name|server
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|failedServer
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptors
name|getTableDescriptors
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDescriptors
return|;
block|}
comment|/** @return InfoServer object. Maybe null.*/
specifier|public
name|InfoServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|infoServer
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerManager
name|getServerManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|this
operator|.
name|executorService
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterFileSystem
name|getMasterFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileSystemManager
return|;
block|}
comment|/**    * Get the ZK wrapper object - needed by master_jsp.java    * @return the zookeeper wrapper    */
specifier|public
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|zooKeeper
return|;
block|}
specifier|public
name|ActiveMasterManager
name|getActiveMasterManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|activeMasterManager
return|;
block|}
specifier|public
name|MasterAddressTracker
name|getMasterAddressManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|masterAddressManager
return|;
block|}
comment|/*    * Start up all services. If any of these threads gets an unhandled exception    * then they just die with a logged message.  This should be fine because    * in general, we do not expect the master to get such unhandled exceptions    *  as OOMEs; it should be lightly loaded. See what HRegionServer does if    *  need to install an unexpected exception handler.    */
name|void
name|startServiceThreads
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Start the executor service pools
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_OPEN_REGION
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.executor.openregion.threads"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_CLOSE_REGION
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.executor.closeregion.threads"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_SERVER_OPERATIONS
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.executor.serverops.threads"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_META_SERVER_OPERATIONS
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.executor.serverops.threads"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|M_LOG_REPLAY_OPS
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.executor.logreplayops.threads"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// We depend on there being only one instance of this executor running
comment|// at a time.  To do concurrency, would need fencing of enable/disable of
comment|// tables.
name|this
operator|.
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_TABLE_OPERATIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Start log cleaner thread
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|cleanerInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.cleaner.interval"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|this
operator|.
name|logCleaner
operator|=
operator|new
name|LogCleaner
argument_list|(
name|cleanerInterval
argument_list|,
name|this
argument_list|,
name|conf
argument_list|,
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|getMasterFileSystem
argument_list|()
operator|.
name|getOldLogDir
argument_list|()
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|logCleaner
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".oldLogCleaner"
argument_list|)
expr_stmt|;
comment|//start the hfile archive cleaner thread
name|Path
name|archiveDir
init|=
name|HFileArchiveUtil
operator|.
name|getArchivePath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|hfileCleaner
operator|=
operator|new
name|HFileCleaner
argument_list|(
name|cleanerInterval
argument_list|,
name|this
argument_list|,
name|conf
argument_list|,
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|archiveDir
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|hfileCleaner
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".archivedHFileCleaner"
argument_list|)
expr_stmt|;
comment|// Start the health checker
if|if
condition|(
name|this
operator|.
name|healthCheckChore
operator|!=
literal|null
condition|)
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|healthCheckChore
operator|.
name|getThread
argument_list|()
argument_list|,
name|n
operator|+
literal|".healthChecker"
argument_list|)
expr_stmt|;
block|}
comment|// Start allowing requests to happen.
name|this
operator|.
name|rpcServer
operator|.
name|openServer
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcServerOpen
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use this when trying to figure when its ok to send in rpcs.  Used by tests.    * @return True if we have successfully run {@link RpcServer#openServer()}    */
name|boolean
name|isRpcServerOpen
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcServerOpen
return|;
block|}
specifier|private
name|void
name|stopServiceThreads
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping service threads"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|!=
literal|null
condition|)
name|this
operator|.
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcServerOpen
operator|=
literal|false
expr_stmt|;
comment|// Clean up and close up shop
if|if
condition|(
name|this
operator|.
name|logCleaner
operator|!=
literal|null
condition|)
name|this
operator|.
name|logCleaner
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hfileCleaner
operator|!=
literal|null
condition|)
name|this
operator|.
name|hfileCleaner
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|executorService
operator|!=
literal|null
condition|)
name|this
operator|.
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|healthCheckChore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|healthCheckChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Thread
name|getAndStartClusterStatusChore
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
if|if
condition|(
name|master
operator|==
literal|null
operator|||
name|master
operator|.
name|balancer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Chore
name|chore
init|=
operator|new
name|ClusterStatusChore
argument_list|(
name|master
argument_list|,
name|master
operator|.
name|balancer
argument_list|)
decl_stmt|;
return|return
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|chore
operator|.
name|getThread
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Thread
name|getAndStartBalancerChore
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|)
block|{
comment|// Start up the load balancer chore
name|Chore
name|chore
init|=
operator|new
name|BalancerChore
argument_list|(
name|master
argument_list|)
decl_stmt|;
return|return
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|chore
operator|.
name|getThread
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|stopChores
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|balancerChore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|balancerChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|clusterStatusChore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|clusterStatusChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|catalogJanitorChore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|catalogJanitorChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|clusterStatusPublisherChore
operator|!=
literal|null
condition|)
block|{
name|clusterStatusPublisherChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|namespaceJanitorChore
operator|!=
literal|null
condition|)
block|{
name|namespaceJanitorChore
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionServerStartupResponse
name|regionServerStartup
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerStartupRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// Register with server manager
try|try
block|{
name|InetAddress
name|ia
init|=
name|getRemoteInetAddress
argument_list|(
name|request
operator|.
name|getPort
argument_list|()
argument_list|,
name|request
operator|.
name|getServerStartCode
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|rs
init|=
name|this
operator|.
name|serverManager
operator|.
name|regionServerStartup
argument_list|(
name|ia
argument_list|,
name|request
operator|.
name|getPort
argument_list|()
argument_list|,
name|request
operator|.
name|getServerStartCode
argument_list|()
argument_list|,
name|request
operator|.
name|getServerCurrentTime
argument_list|()
argument_list|)
decl_stmt|;
comment|// Send back some config info
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|createConfigurationSubset
argument_list|()
decl_stmt|;
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|HConstants
operator|.
name|KEY_FOR_HOSTNAME_SEEN_BY_MASTER
argument_list|)
operator|.
name|setValue
argument_list|(
name|rs
operator|.
name|getHostname
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Get remote side's InetAddress    * @throws UnknownHostException    */
name|InetAddress
name|getRemoteInetAddress
parameter_list|(
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|long
name|serverStartCode
parameter_list|)
throws|throws
name|UnknownHostException
block|{
comment|// Do it out here in its own little method so can fake an address when
comment|// mocking up in tests.
return|return
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
return|;
block|}
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|protected
name|RegionServerStartupResponse
operator|.
name|Builder
name|createConfigurationSubset
parameter_list|()
block|{
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
init|=
name|addConfig
argument_list|(
name|RegionServerStartupResponse
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
return|return
name|addConfig
argument_list|(
name|resp
argument_list|,
literal|"fs.default.name"
argument_list|)
return|;
block|}
specifier|private
name|RegionServerStartupResponse
operator|.
name|Builder
name|addConfig
parameter_list|(
specifier|final
name|RegionServerStartupResponse
operator|.
name|Builder
name|resp
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|NameStringPair
operator|.
name|Builder
name|entry
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addMapEntries
argument_list|(
name|entry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetLastFlushedSequenceIdResponse
name|getLastFlushedSequenceId
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetLastFlushedSequenceIdRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
name|serverManager
operator|.
name|getLastFlushedSequenceId
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|buildGetLastFlushedSequenceIdResponse
argument_list|(
name|seqId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionServerReportResponse
name|regionServerReport
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RegionServerReportRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ClusterStatusProtos
operator|.
name|ServerLoad
name|sl
init|=
name|request
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|this
operator|.
name|serverManager
operator|.
name|regionServerReport
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ServerLoad
argument_list|(
name|sl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|this
operator|.
name|metricsMaster
operator|!=
literal|null
condition|)
block|{
comment|// Up our metrics.
name|this
operator|.
name|metricsMaster
operator|.
name|incrementRequests
argument_list|(
name|sl
operator|.
name|getTotalNumberOfRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|RegionServerReportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReportRSFatalErrorResponse
name|reportRSFatalError
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReportRSFatalErrorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|String
name|errorText
init|=
name|request
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|request
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Region server "
operator|+
name|sn
operator|+
literal|" reported a fatal error:\n"
operator|+
name|errorText
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|rsFatals
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|ReportRSFatalErrorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
operator|!
name|isStopped
argument_list|()
return|;
block|}
specifier|public
name|IsMasterRunningResponse
name|isMasterRunning
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsMasterRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|IsMasterRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIsMasterRunning
argument_list|(
name|isMasterRunning
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RunCatalogScanResponse
name|runCatalogScan
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|RunCatalogScanRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|ResponseConverter
operator|.
name|buildRunCatalogScanResponse
argument_list|(
name|catalogJanitorChore
operator|.
name|scan
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnableCatalogJanitorResponse
name|enableCatalogJanitor
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|EnableCatalogJanitorRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|EnableCatalogJanitorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevValue
argument_list|(
name|catalogJanitorChore
operator|.
name|setEnabled
argument_list|(
name|req
operator|.
name|getEnable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsCatalogJanitorEnabledResponse
name|isCatalogJanitorEnabled
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|IsCatalogJanitorEnabledRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|boolean
name|isEnabled
init|=
name|catalogJanitorChore
operator|!=
literal|null
condition|?
name|catalogJanitorChore
operator|.
name|getEnabled
argument_list|()
else|:
literal|false
decl_stmt|;
return|return
name|IsCatalogJanitorEnabledResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|isEnabled
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @return Maximum time we should run balancer for    */
specifier|private
name|int
name|getBalancerCutoffTime
parameter_list|()
block|{
name|int
name|balancerCutoffTime
init|=
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.balancer.max.balancing"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|balancerCutoffTime
operator|==
operator|-
literal|1
condition|)
block|{
comment|// No time period set so create one
name|int
name|balancerPeriod
init|=
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.balancer.period"
argument_list|,
literal|300000
argument_list|)
decl_stmt|;
name|balancerCutoffTime
operator|=
name|balancerPeriod
expr_stmt|;
comment|// If nonsense period, set it to balancerPeriod
if|if
condition|(
name|balancerCutoffTime
operator|<=
literal|0
condition|)
name|balancerCutoffTime
operator|=
name|balancerPeriod
expr_stmt|;
block|}
return|return
name|balancerCutoffTime
return|;
block|}
specifier|public
name|boolean
name|balance
parameter_list|()
throws|throws
name|HBaseIOException
block|{
comment|// if master not initialized, don't run balancer.
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master has not been initialized, don't run balancer."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If balance not true, don't run balancer.
if|if
condition|(
operator|!
name|this
operator|.
name|loadBalancerTracker
operator|.
name|isBalancerOn
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Do this call outside of synchronized block.
name|int
name|maximumBalanceTime
init|=
name|getBalancerCutoffTime
argument_list|()
decl_stmt|;
name|boolean
name|balancerRan
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|balancer
init|)
block|{
comment|// Only allow one balance run at at time.
if|if
condition|(
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because "
operator|+
name|regionsInTransition
operator|.
name|size
argument_list|()
operator|+
literal|" region(s) in transition: "
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|regionsInTransition
operator|.
name|toString
argument_list|()
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because processing dead regionserver(s): "
operator|+
name|this
operator|.
name|serverManager
operator|.
name|getDeadServers
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|cpHost
operator|.
name|preBalance
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Coprocessor bypassing balancer request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error invoking master coprocessor preBalance()"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|assignmentsByTable
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getAssignmentsByTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
comment|//Give the balancer the current cluster state.
name|this
operator|.
name|balancer
operator|.
name|setClusterStatus
argument_list|(
name|getClusterStatus
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
range|:
name|assignmentsByTable
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialPlans
init|=
name|this
operator|.
name|balancer
operator|.
name|balanceCluster
argument_list|(
name|assignments
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialPlans
operator|!=
literal|null
condition|)
name|plans
operator|.
name|addAll
argument_list|(
name|partialPlans
argument_list|)
expr_stmt|;
block|}
name|long
name|cutoffTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|maximumBalanceTime
decl_stmt|;
name|int
name|rpCount
init|=
literal|0
decl_stmt|;
comment|// number of RegionPlans balanced so far
name|long
name|totalRegPlanExecTime
init|=
literal|0
decl_stmt|;
name|balancerRan
operator|=
name|plans
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|plans
operator|!=
literal|null
operator|&&
operator|!
name|plans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"balance "
operator|+
name|plan
argument_list|)
expr_stmt|;
name|long
name|balStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//TODO: bulk assign
name|this
operator|.
name|assignmentManager
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|totalRegPlanExecTime
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|balStartTime
expr_stmt|;
name|rpCount
operator|++
expr_stmt|;
if|if
condition|(
name|rpCount
operator|<
name|plans
operator|.
name|size
argument_list|()
operator|&&
comment|// if performing next balance exceeds cutoff time, exit the loop
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
name|totalRegPlanExecTime
operator|/
name|rpCount
operator|)
operator|)
operator|>
name|cutoffTime
condition|)
block|{
comment|//TODO: After balance, there should not be a cutoff time (keeping it as a security net for now)
name|LOG
operator|.
name|debug
argument_list|(
literal|"No more balancing till next balance run; maximumBalanceTime="
operator|+
name|maximumBalanceTime
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cpHost
operator|.
name|postBalance
argument_list|(
name|rpCount
operator|<
name|plans
operator|.
name|size
argument_list|()
condition|?
name|plans
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|rpCount
argument_list|)
else|:
name|plans
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// balancing already succeeded so don't change the result
name|LOG
operator|.
name|error
argument_list|(
literal|"Error invoking master coprocessor postBalance()"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|balancerRan
return|;
block|}
annotation|@
name|Override
specifier|public
name|BalanceResponse
name|balance
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|BalanceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|BalanceResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBalancerRan
argument_list|(
name|balance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HBaseIOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
enum|enum
name|BalanceSwitchMode
block|{
name|SYNC
block|,
name|ASYNC
block|}
comment|/**    * Assigns balancer switch according to BalanceSwitchMode    * @param b new balancer switch    * @param mode BalanceSwitchMode    * @return old balancer switch    */
specifier|public
name|boolean
name|switchBalancer
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|,
name|BalanceSwitchMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|oldValue
init|=
name|this
operator|.
name|loadBalancerTracker
operator|.
name|isBalancerOn
argument_list|()
decl_stmt|;
name|boolean
name|newValue
init|=
name|b
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|newValue
operator|=
name|this
operator|.
name|cpHost
operator|.
name|preBalanceSwitch
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|mode
operator|==
name|BalanceSwitchMode
operator|.
name|SYNC
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|balancer
init|)
block|{
name|this
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|loadBalancerTracker
operator|.
name|setBalancerOn
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" set balanceSwitch="
operator|+
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cpHost
operator|.
name|postBalanceSwitch
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error flipping balance switch"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
comment|/**    * @return Client info for use as prefix on an audit log string; who did an action    */
name|String
name|getClientIdAuditPrefix
parameter_list|()
block|{
return|return
literal|"Client="
operator|+
name|RequestContext
operator|.
name|getRequestUserName
argument_list|()
operator|+
literal|"/"
operator|+
name|RequestContext
operator|.
name|get
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|synchronousBalanceSwitch
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|switchBalancer
argument_list|(
name|b
argument_list|,
name|BalanceSwitchMode
operator|.
name|SYNC
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|balanceSwitch
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|switchBalancer
argument_list|(
name|b
argument_list|,
name|BalanceSwitchMode
operator|.
name|ASYNC
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetBalancerRunningResponse
name|setBalancerRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetBalancerRunningRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|boolean
name|prevValue
init|=
operator|(
name|req
operator|.
name|getSynchronous
argument_list|()
operator|)
condition|?
name|synchronousBalanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
else|:
name|balanceSwitch
argument_list|(
name|req
operator|.
name|getOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SetBalancerRunningResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevBalanceValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Switch for the background CatalogJanitor thread.    * Used for testing.  The thread will continue to run.  It will just be a noop    * if disabled.    * @param b If false, the catalog janitor won't do anything.    */
specifier|public
name|void
name|setCatalogJanitorEnabled
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|catalogJanitorChore
operator|.
name|setEnabled
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DispatchMergingRegionsResponse
name|dispatchMergingRegions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DispatchMergingRegionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|encodedNameOfRegionA
init|=
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodedNameOfRegionB
init|=
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|forcible
init|=
name|request
operator|.
name|getForcible
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|||
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mergeRegions specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: region_a="
operator|+
name|request
operator|.
name|getRegionA
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|", region_b="
operator|+
name|request
operator|.
name|getRegionB
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionState
name|regionStateA
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedNameOfRegionA
argument_list|)
argument_list|)
decl_stmt|;
name|RegionState
name|regionStateB
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedNameOfRegionB
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionStateA
operator|==
literal|null
operator|||
name|regionStateB
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionStateA
operator|==
literal|null
condition|?
name|encodedNameOfRegionA
else|:
name|encodedNameOfRegionB
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|regionStateA
operator|.
name|isOpened
argument_list|()
operator|||
operator|!
name|regionStateB
operator|.
name|isOpened
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|MergeRegionException
argument_list|(
literal|"Unable to merge regions not online "
operator|+
name|regionStateA
operator|+
literal|", "
operator|+
name|regionStateB
argument_list|)
argument_list|)
throw|;
block|}
name|HRegionInfo
name|regionInfoA
init|=
name|regionStateA
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfoB
init|=
name|regionStateB
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfoA
operator|.
name|compareTo
argument_list|(
name|regionInfoB
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|MergeRegionException
argument_list|(
literal|"Unable to merge a region to itself "
operator|+
name|regionInfoA
operator|+
literal|", "
operator|+
name|regionInfoB
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|forcible
operator|&&
operator|!
name|HRegionInfo
operator|.
name|areAdjacent
argument_list|(
name|regionInfoA
argument_list|,
name|regionInfoB
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|MergeRegionException
argument_list|(
literal|"Unable to merge not adjacent regions "
operator|+
name|regionInfoA
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|regionInfoB
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" where forcible = "
operator|+
name|forcible
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|dispatchMergingRegions
argument_list|(
name|regionInfoA
argument_list|,
name|regionInfoB
argument_list|,
name|forcible
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|DispatchMergingRegionsResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispatchMergingRegions
parameter_list|(
specifier|final
name|HRegionInfo
name|region_a
parameter_list|,
specifier|final
name|HRegionInfo
name|region_b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|DispatchMergingRegionHandler
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|catalogJanitorChore
argument_list|,
name|region_a
argument_list|,
name|region_b
argument_list|,
name|forcible
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MoveRegionResponse
name|moveRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MoveRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|encodedRegionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|destServerName
init|=
operator|(
name|req
operator|.
name|hasDestServerName
argument_list|()
operator|)
condition|?
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|req
operator|.
name|getDestServerName
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|MoveRegionResponse
name|mrr
init|=
name|MoveRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|ENCODED_REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|move
argument_list|(
name|encodedRegionName
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseIOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|mrr
return|;
block|}
name|void
name|move
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|destServerName
parameter_list|)
throws|throws
name|HBaseIOException
block|{
name|RegionState
name|regionState
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
throw|;
block|}
name|HRegionInfo
name|hri
init|=
name|regionState
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|ServerName
name|dest
decl_stmt|;
if|if
condition|(
name|destServerName
operator|==
literal|null
operator|||
name|destServerName
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Passed destination servername is null/empty so "
operator|+
literal|"choosing a server at random"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|destServers
init|=
name|this
operator|.
name|serverManager
operator|.
name|createDestinationServersList
argument_list|(
name|regionState
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|dest
operator|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|hri
argument_list|,
name|destServers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|=
operator|new
name|ServerName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|destServerName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|equals
argument_list|(
name|regionState
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping move of region "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because region already assigned to the same server "
operator|+
name|dest
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Now we can do the move
name|RegionPlan
name|rp
init|=
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|regionState
operator|.
name|getServerName
argument_list|()
argument_list|,
name|dest
argument_list|)
decl_stmt|;
try|try
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|cpHost
operator|.
name|preMove
argument_list|(
name|hri
argument_list|,
name|rp
operator|.
name|getSource
argument_list|()
argument_list|,
name|rp
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" move "
operator|+
name|rp
operator|+
literal|", running balancer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|.
name|balance
argument_list|(
name|rp
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cpHost
operator|.
name|postMove
argument_list|(
name|hri
argument_list|,
name|rp
operator|.
name|getSource
argument_list|()
argument_list|,
name|rp
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|instanceof
name|HBaseIOException
condition|)
block|{
throw|throw
operator|(
name|HBaseIOException
operator|)
name|ioe
throw|;
block|}
throw|throw
operator|new
name|HBaseIOException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|hTableDescriptor
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMasterRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
name|String
name|namespace
init|=
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Namespace "
operator|+
name|namespace
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|HRegionInfo
index|[]
name|newRegions
init|=
name|getHRegionInfos
argument_list|(
name|hTableDescriptor
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
name|checkCompression
argument_list|(
name|hTableDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preCreateTable
argument_list|(
name|hTableDescriptor
argument_list|,
name|newRegions
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" create "
operator|+
name|hTableDescriptor
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CreateTableHandler
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|fileSystemManager
argument_list|,
name|hTableDescriptor
argument_list|,
name|conf
argument_list|,
name|newRegions
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCreateTable
argument_list|(
name|hTableDescriptor
argument_list|,
name|newRegions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkCompression
parameter_list|(
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|masterCheckCompression
condition|)
return|return;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|checkCompression
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkCompression
parameter_list|(
specifier|final
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|masterCheckCompression
condition|)
return|return;
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|hcd
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionTest
operator|.
name|testCompression
argument_list|(
name|hcd
operator|.
name|getCompactionCompression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CreateTableResponse
name|createTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CreateTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|HTableDescriptor
name|hTableDescriptor
init|=
name|HTableDescriptor
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|ProtobufUtil
operator|.
name|getSplitKeysArray
argument_list|(
name|req
argument_list|)
decl_stmt|;
try|try
block|{
name|createTable
argument_list|(
name|hTableDescriptor
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|CreateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|HRegionInfo
index|[]
name|getHRegionInfos
parameter_list|(
name|HTableDescriptor
name|hTableDescriptor
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
name|HRegionInfo
index|[]
name|hRegionInfos
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|splitKeys
operator|==
literal|null
operator|||
name|splitKeys
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|hRegionInfos
operator|=
operator|new
name|HRegionInfo
index|[]
block|{
operator|new
name|HRegionInfo
argument_list|(
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|int
name|numRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|hRegionInfos
operator|=
operator|new
name|HRegionInfo
index|[
name|numRegions
index|]
expr_stmt|;
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
name|endKey
operator|=
operator|(
name|i
operator|==
name|splitKeys
operator|.
name|length
operator|)
condition|?
literal|null
else|:
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
name|hRegionInfos
index|[
name|i
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|hTableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|startKey
operator|=
name|endKey
expr_stmt|;
block|}
block|}
return|return
name|hRegionInfos
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isCatalogTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|DeleteTableHandler
argument_list|(
name|tableName
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteTableResponse
name|deleteTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|deleteTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|DeleteTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get the number of regions of the table that have been updated by the alter.    *    * @return Pair indicating the number of regions updated Pair.getFirst is the    *         regions that are yet to be updated Pair.getSecond is the total number    *         of regions of the table    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|GetSchemaAlterStatusResponse
name|getSchemaAlterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetSchemaAlterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// TODO: currently, we query using the table name on the client side. this
comment|// may overlap with other table operations or the table operation may
comment|// have completed before querying this API. We need to refactor to a
comment|// transaction system in the future to avoid these ambiguities.
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getReopenStatus
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetSchemaAlterStatusResponse
operator|.
name|Builder
name|ret
init|=
name|GetSchemaAlterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setYetToUpdateRegions
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTotalRegions
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addColumn
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preAddColumn
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|//TODO: we should process this (and some others) in an executor
operator|new
name|TableAddFamilyHandler
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postAddColumn
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AddColumnResponse
name|addColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|addColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|HColumnDescriptor
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|AddColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyColumn
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|checkCompression
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preModifyColumn
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" modify "
operator|+
name|descriptor
argument_list|)
expr_stmt|;
operator|new
name|TableModifyFamilyHandler
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postModifyColumn
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyColumnResponse
name|modifyColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|modifyColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|HColumnDescriptor
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|ModifyColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteColumn
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preDeleteColumn
argument_list|(
name|tableName
argument_list|,
name|columnName
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|TableDeleteFamilyHandler
argument_list|(
name|tableName
argument_list|,
name|columnName
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDeleteColumn
argument_list|(
name|tableName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteColumnResponse
name|deleteColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteColumnRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|deleteColumn
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getColumnName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|DeleteColumnResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preEnableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" enable "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|EnableTableHandler
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|catalogTracker
argument_list|,
name|assignmentManager
argument_list|,
name|tableLockManager
argument_list|,
literal|false
argument_list|)
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postEnableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EnableTableResponse
name|enableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|EnableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|enableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|EnableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preDisableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" disable "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|DisableTableHandler
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|catalogTracker
argument_list|,
name|assignmentManager
argument_list|,
name|tableLockManager
argument_list|,
literal|false
argument_list|)
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDisableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DisableTableResponse
name|disableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DisableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|disableTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|request
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|DisableTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return the region and current deployment for the region containing    * the given row. If the region cannot be found, returns null. If it    * is found, but not currently deployed, the second element of the pair    * may be null.    */
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getTableRegionForRow
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|rowKey
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|AtomicReference
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|HRegionInfo
operator|.
name|getHRegionInfoAndServerName
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|.
name|set
argument_list|(
name|pair
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
name|rowKey
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|checkCompression
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preModifyTable
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" modify "
operator|+
name|tableName
argument_list|)
expr_stmt|;
operator|new
name|ModifyTableHandler
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
operator|.
name|prepare
argument_list|()
operator|.
name|process
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postModifyTable
argument_list|(
name|tableName
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ModifyTableResponse
name|modifyTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ModifyTableRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|modifyTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|req
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|HTableDescriptor
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getTableSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|ModifyTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkTableModifiable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableNotFoundException
throws|,
name|TableNotDisabledException
block|{
if|if
condition|(
name|isCatalogTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't modify catalog tables"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|getCatalogTracker
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isDisabledTable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotDisabledException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetClusterStatusResponse
name|getClusterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetClusterStatusRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|GetClusterStatusResponse
operator|.
name|Builder
name|response
init|=
name|GetClusterStatusResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setClusterStatus
argument_list|(
name|getClusterStatus
argument_list|()
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @return cluster status    */
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
comment|// Build Set of backup masters from ZK nodes
name|List
argument_list|<
name|String
argument_list|>
name|backupMasterStrings
decl_stmt|;
try|try
block|{
name|backupMasterStrings
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
operator|.
name|zooKeeper
operator|.
name|backupMasterAddressesZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|prefix
argument_list|(
literal|"Unable to list backup servers"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|backupMasterStrings
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|backupMasterStrings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|backupMasterStrings
control|)
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|backupMasterAddressesZNode
argument_list|,
name|s
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|ServerName
name|sn
decl_stmt|;
try|try
block|{
name|sn
operator|=
name|ServerName
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse, skipping registering backup server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|backupMasters
operator|.
name|add
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|prefix
argument_list|(
literal|"Unable to get information about "
operator|+
literal|"backup servers"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|backupMasters
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ServerName
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ServerName
name|s1
parameter_list|,
name|ServerName
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|getServerName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClusterStatus
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|this
operator|.
name|fileSystemManager
operator|.
name|getClusterId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
argument_list|,
name|this
operator|.
name|serverManager
operator|.
name|getDeadServers
argument_list|()
operator|.
name|copyServerNames
argument_list|()
argument_list|,
name|this
operator|.
name|serverName
argument_list|,
name|backupMasters
argument_list|,
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
argument_list|,
name|this
operator|.
name|getCoprocessors
argument_list|()
argument_list|,
name|this
operator|.
name|loadBalancerTracker
operator|.
name|isBalancerOn
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
if|if
condition|(
name|fileSystemManager
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|ClusterId
name|id
init|=
name|fileSystemManager
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The set of loaded coprocessors is stored in a static set. Since it's    * statically allocated, it does not require that HMaster's cpHost be    * initialized prior to accessing it.    * @return a String representation of the set of names of the loaded    * coprocessors.    */
specifier|public
specifier|static
name|String
name|getLoadedCoprocessors
parameter_list|()
block|{
return|return
name|CoprocessorHost
operator|.
name|getLoadedCoprocessors
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return timestamp in millis when HMaster was started.    */
specifier|public
name|long
name|getMasterStartTime
parameter_list|()
block|{
return|return
name|masterStartTime
return|;
block|}
comment|/**    * @return timestamp in millis when HMaster became the active master.    */
specifier|public
name|long
name|getMasterActiveTime
parameter_list|()
block|{
return|return
name|masterActiveTime
return|;
block|}
comment|/**    * @return array of coprocessor SimpleNames.    */
specifier|public
name|String
index|[]
name|getCoprocessors
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|masterCoprocessors
init|=
name|getCoprocessorHost
argument_list|()
operator|.
name|getCoprocessors
argument_list|()
decl_stmt|;
return|return
name|masterCoprocessors
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|masterCoprocessors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
comment|// HBASE-4014: dump a list of loaded coprocessors.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Master server abort: loaded coprocessors are: "
operator|+
name|getLoadedCoprocessors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abortNow
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|abort
operator|=
literal|true
expr_stmt|;
name|stop
argument_list|(
literal|"Aborting"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * We do the following in a different thread.  If it is not completed    * in time, we will time it out and assume it is not easy to recover.    *    * 1. Create a new ZK session. (since our current one is expired)    * 2. Try to become a primary master again    * 3. Initialize all ZK based system trackers.    * 4. Assign meta. (they are already assigned, but we need to update our    * internal memory state to reflect it)    * 5. Process any RIT if any during the process of our recovery.    *    * @return True if we could successfully recover from ZK session expiry.    * @throws InterruptedException    * @throws IOException    * @throws KeeperException    * @throws ExecutionException    */
specifier|private
name|boolean
name|tryRecoveringExpiredZKSession
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|ExecutionException
block|{
name|this
operator|.
name|zooKeeper
operator|.
name|unregisterAllListeners
argument_list|()
expr_stmt|;
comment|// add back listeners which were registered before master initialization
comment|// because they won't be added back in below Master re-initialization code
if|if
condition|(
name|this
operator|.
name|registeredZKListenersBeforeRecovery
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ZooKeeperListener
name|curListener
range|:
name|this
operator|.
name|registeredZKListenersBeforeRecovery
control|)
block|{
name|this
operator|.
name|zooKeeper
operator|.
name|registerListener
argument_list|(
name|curListener
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|zooKeeper
operator|.
name|reconnectAfterExpiration
argument_list|()
expr_stmt|;
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Recovering expired ZK session"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|becomeActiveMaster
argument_list|(
name|status
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|serverShutdownHandlerEnabled
operator|=
literal|false
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
name|finishInitialization
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|!
name|stopped
return|;
block|}
finally|finally
block|{
name|status
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|long
name|timeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.zksession.recover.timeout"
argument_list|,
literal|300000
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
name|executor
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|executor
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|&&
name|result
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|Boolean
name|recovered
init|=
name|result
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|recovered
operator|!=
literal|null
condition|)
block|{
return|return
name|recovered
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Check to see if the current trigger for abort is due to ZooKeeper session    * expiry, and If yes, whether we can recover from ZK session expiry.    *    * @param msg Original abort message    * @param t   The cause for current abort request    * @return true if we should proceed with abort operation, false other wise.    */
specifier|private
name|boolean
name|abortNow
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isActiveMaster
operator|||
name|this
operator|.
name|stopped
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|failFast
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"fail.fast.expired.active.master"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|KeeperException
operator|.
name|SessionExpiredException
operator|&&
operator|!
name|failFast
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Primary Master trying to recover from ZooKeeper session "
operator|+
literal|"expiry."
argument_list|)
expr_stmt|;
return|return
operator|!
name|tryRecoveringExpiredZKSession
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|newT
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Primary master encountered unexpected exception while "
operator|+
literal|"trying to recover from ZooKeeper session"
operator|+
literal|" expiry. Proceeding with server abort."
argument_list|,
name|newT
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zooKeeper
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterCoprocessorHost
name|getCoprocessorHost
parameter_list|()
block|{
return|return
name|cpHost
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverName
return|;
block|}
annotation|@
name|Override
specifier|public
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
name|catalogTracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssignmentManager
name|getAssignmentManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignmentManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableLockManager
name|getTableLockManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableLockManager
return|;
block|}
specifier|public
name|MemoryBoundedLogMessageBuffer
name|getRegionServerFatalLogBuffer
parameter_list|()
block|{
return|return
name|rsFatals
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|spanReceiverHost
operator|!=
literal|null
condition|)
block|{
name|spanReceiverHost
operator|.
name|closeReceivers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cpHost
operator|.
name|preShutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error call master coprocessor preShutdown()"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mxBean
operator|!=
literal|null
condition|)
block|{
name|MBeanUtil
operator|.
name|unregisterMBean
argument_list|(
name|mxBean
argument_list|)
expr_stmt|;
name|mxBean
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|assignmentManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|assignmentManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serverManager
operator|!=
literal|null
condition|)
name|this
operator|.
name|serverManager
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|clusterStatusTracker
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|clusterStatusTracker
operator|.
name|setClusterDown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ZooKeeper exception trying to set cluster as down in ZK"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ShutdownResponse
name|shutdown
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ShutdownRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" shutdown"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|ShutdownResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|void
name|stopMaster
parameter_list|()
block|{
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cpHost
operator|.
name|preStopMaster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error call master coprocessor preStopMaster()"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|stop
argument_list|(
literal|"Stopped by "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StopMasterResponse
name|stopMaster
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|StopMasterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
name|stopMaster
argument_list|()
expr_stmt|;
return|return
name|StopMasterResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
specifier|final
name|String
name|why
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|why
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
comment|// We wake up the stopSleeper to stop immediately
name|stopSleeper
operator|.
name|skipSleepCycle
argument_list|()
expr_stmt|;
comment|// If we are a backup master, we need to interrupt wait
if|if
condition|(
name|this
operator|.
name|activeMasterManager
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|activeMasterManager
operator|.
name|clusterHasActiveMaster
init|)
block|{
name|this
operator|.
name|activeMasterManager
operator|.
name|clusterHasActiveMaster
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// If no region server is online then master may stuck waiting on hbase:meta to come on line.
comment|// See HBASE-8422.
if|if
condition|(
name|this
operator|.
name|catalogTracker
operator|!=
literal|null
operator|&&
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|catalogTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|abort
return|;
block|}
name|void
name|checkInitialized
parameter_list|()
throws|throws
name|PleaseHoldException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|initialized
condition|)
block|{
throw|throw
operator|new
name|PleaseHoldException
argument_list|(
literal|"Master is initializing"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Report whether this master is currently the active master or not.    * If not active master, we are parked on ZK waiting to become active.    *    * This method is used for testing.    *    * @return true if active master, false if not.    */
specifier|public
name|boolean
name|isActiveMaster
parameter_list|()
block|{
return|return
name|isActiveMaster
return|;
block|}
comment|/**    * Report whether this master has completed with its initialization and is    * ready.  If ready, the master is also the active master.  A standby master    * is never ready.    *    * This method is used for testing.    *    * @return true if master is ready to go, false if not.    */
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
comment|/**    * ServerShutdownHandlerEnabled is set false before completing    * assignMeta to prevent processing of ServerShutdownHandler.    * @return true if assignMeta has completed;    */
specifier|public
name|boolean
name|isServerShutdownHandlerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverShutdownHandlerEnabled
return|;
block|}
comment|/**    * Report whether this master has started initialization and is about to do meta region assignment    * @return true if master is in initialization& about to assign hbase:meta regions    */
specifier|public
name|boolean
name|isInitializationStartsMetaRegionAssignment
parameter_list|()
block|{
return|return
name|this
operator|.
name|initializationBeforeMetaAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssignRegionResponse
name|assignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AssignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|AssignRegionResponse
name|arr
init|=
name|AssignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"assignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preAssign
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
return|return
name|arr
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" assign "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assignmentManager
operator|.
name|assign
argument_list|(
name|regionInfo
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postAssign
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|assignRegion
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|assignmentManager
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UnassignRegionResponse
name|unassignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UnassignRegionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|force
init|=
name|req
operator|.
name|getForce
argument_list|()
decl_stmt|;
name|UnassignRegionResponse
name|urr
init|=
name|UnassignRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unassignRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|this
operator|.
name|catalogTracker
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
name|HRegionInfo
name|hri
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
condition|)
block|{
return|return
name|urr
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" unassign "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" in current location if it is online and reassign.force="
operator|+
name|force
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionAssigned
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is not online on any region server, reassigning it."
argument_list|)
expr_stmt|;
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postUnassign
argument_list|(
name|hri
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
return|return
name|urr
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get list of TableDescriptors for requested tables.    * @param controller Unused (set to null).    * @param req GetTableDescriptorsRequest that contains:    * - tableNames: requested tables, or if empty, all are requested    * @return GetTableDescriptorsResponse    * @throws ServiceException    */
specifier|public
name|GetTableDescriptorsResponse
name|getTableDescriptors
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTableDescriptorsRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ArrayList
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
range|:
name|req
operator|.
name|getTableNamesList
argument_list|()
control|)
block|{
name|tableNameList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableNamePB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bypass
operator|=
name|this
operator|.
name|cpHost
operator|.
name|preGetTableDescriptors
argument_list|(
name|tableNameList
argument_list|,
name|descriptors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|bypass
condition|)
block|{
if|if
condition|(
name|req
operator|.
name|getTableNamesCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// request for all TableDescriptors
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|descriptorMap
init|=
literal|null
decl_stmt|;
try|try
block|{
name|descriptorMap
operator|=
name|this
operator|.
name|tableDescriptors
operator|.
name|getAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed getting all descriptors"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descriptorMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HTableDescriptor
name|desc
range|:
name|descriptorMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|TableName
name|s
range|:
name|tableNameList
control|)
block|{
try|try
block|{
name|HTableDescriptor
name|desc
init|=
name|this
operator|.
name|tableDescriptors
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed getting descriptor for "
operator|+
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|cpHost
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cpHost
operator|.
name|postGetTableDescriptors
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
name|GetTableDescriptorsResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|descriptors
control|)
block|{
name|builder
operator|.
name|addTableSchema
argument_list|(
name|htd
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get list of userspace table names    * @param controller Unused (set to null).    * @param req GetTableNamesRequest    * @return GetTableNamesResponse    * @throws ServiceException    */
specifier|public
name|GetTableNamesResponse
name|getTableNames
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTableNamesRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Collection
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
init|=
name|this
operator|.
name|tableDescriptors
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|GetTableNamesResponse
operator|.
name|Builder
name|builder
init|=
name|GetTableNamesResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|builder
operator|.
name|addTableNames
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|descriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compute the average load across all region servers.    * Currently, this uses a very naive computation - just uses the number of    * regions being served, ignoring stats about number of requests.    * @return the average load    */
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|assignmentManager
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|RegionStates
name|regionStates
init|=
name|this
operator|.
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionStates
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|regionStates
operator|.
name|getAverageLoad
argument_list|()
return|;
block|}
comment|/**    * Offline specified region from master's in-memory state. It will not attempt to    * reassign the region as in unassign.    *    * This is a special method that should be used by experts or hbck.    *    */
annotation|@
name|Override
specifier|public
name|OfflineRegionResponse
name|offlineRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|OfflineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|regionName
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|RegionSpecifierType
operator|.
name|REGION_NAME
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"moveRegion specifier type: expected: "
operator|+
name|RegionSpecifierType
operator|.
name|REGION_NAME
operator|+
literal|" actual: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaReader
operator|.
name|getRegion
argument_list|(
name|this
operator|.
name|catalogTracker
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
name|HRegionInfo
name|hri
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" offline "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|.
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postRegionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|OfflineRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|registerService
parameter_list|(
name|Service
name|instance
parameter_list|)
block|{
comment|/*      * No stacking of instances is allowed for a single service name      */
name|Descriptors
operator|.
name|ServiceDescriptor
name|serviceDesc
init|=
name|instance
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
if|if
condition|(
name|coprocessorServiceHandlers
operator|.
name|containsKey
argument_list|(
name|serviceDesc
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Coprocessor service "
operator|+
name|serviceDesc
operator|.
name|getFullName
argument_list|()
operator|+
literal|" already registered, rejecting request from "
operator|+
name|instance
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|coprocessorServiceHandlers
operator|.
name|put
argument_list|(
name|serviceDesc
operator|.
name|getFullName
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered master coprocessor service: service="
operator|+
name|serviceDesc
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|execMasterService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ServerRpcController
name|execController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CoprocessorServiceCall
name|call
init|=
name|request
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|call
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|call
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|coprocessorServiceHandlers
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
literal|null
argument_list|,
literal|"No registered master coprocessor service found for name "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
name|Service
name|service
init|=
name|coprocessorServiceHandlers
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|Descriptors
operator|.
name|ServiceDescriptor
name|serviceDesc
init|=
name|service
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDesc
init|=
name|serviceDesc
operator|.
name|findMethodByName
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
name|service
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"Unknown method "
operator|+
name|methodName
operator|+
literal|" called on master service "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
comment|//invoke the method
name|Message
name|execRequest
init|=
name|service
operator|.
name|getRequestPrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|call
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Message
operator|.
name|Builder
name|responseBuilder
init|=
name|service
operator|.
name|getResponsePrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|service
operator|.
name|callMethod
argument_list|(
name|methodDesc
argument_list|,
name|execController
argument_list|,
name|execRequest
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|Message
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|responseBuilder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Message
name|execResult
init|=
name|responseBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|execController
operator|.
name|getFailedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|execController
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|builder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|execResult
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|execResult
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Utility for constructing an instance of the passed HMaster class.    * @param masterClass    * @param conf    * @return HMaster instance.    */
specifier|public
specifier|static
name|HMaster
name|constructMaster
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|c
init|=
name|masterClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|Throwable
name|target
init|=
name|ite
operator|.
name|getTargetException
argument_list|()
operator|!=
literal|null
condition|?
name|ite
operator|.
name|getTargetException
argument_list|()
else|:
name|ite
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
name|target
operator|=
name|target
operator|.
name|getCause
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed construction of Master: "
operator|+
name|masterClass
operator|.
name|toString
argument_list|()
argument_list|,
name|target
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed construction of Master: "
operator|+
name|masterClass
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @see org.apache.hadoop.hbase.master.HMasterCommandLine    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|VersionInfo
operator|.
name|logVersion
argument_list|()
expr_stmt|;
operator|new
name|HMasterCommandLine
argument_list|(
name|HMaster
operator|.
name|class
argument_list|)
operator|.
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HFileCleaner
name|getHFileCleaner
parameter_list|()
block|{
return|return
name|this
operator|.
name|hfileCleaner
return|;
block|}
comment|/**    * Exposed for TESTING!    * @return the underlying snapshot manager    */
specifier|public
name|SnapshotManager
name|getSnapshotManagerForTesting
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotManager
return|;
block|}
comment|/**    * Triggers an asynchronous attempt to take a snapshot.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|SnapshotResponse
name|snapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|this
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" snapshot request for:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the snapshot information
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescriptionUtils
operator|.
name|validate
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|snapshotManager
operator|.
name|takeSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// send back the max amount of time the client should wait for the snapshot to complete
name|long
name|waitTime
init|=
name|SnapshotDescriptionUtils
operator|.
name|getMaxMasterTimeout
argument_list|(
name|conf
argument_list|,
name|snapshot
operator|.
name|getType
argument_list|()
argument_list|,
name|SnapshotDescriptionUtils
operator|.
name|DEFAULT_MAX_WAIT_TIME
argument_list|)
decl_stmt|;
return|return
name|SnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExpectedTimeout
argument_list|(
name|waitTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * List the currently available/stored snapshots. Any in-progress snapshots are ignored    */
annotation|@
name|Override
specifier|public
name|GetCompletedSnapshotsResponse
name|getCompletedSnapshots
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetCompletedSnapshotsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|GetCompletedSnapshotsResponse
operator|.
name|Builder
name|builder
init|=
name|GetCompletedSnapshotsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
decl_stmt|;
comment|// convert to protobuf
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
name|builder
operator|.
name|addSnapshots
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute Delete Snapshot operation.    * @return DeleteSnapshotResponse (a protobuf wrapped void) if the snapshot existed and was    *    deleted properly.    * @throws ServiceException wrapping SnapshotDoesNotExistException if specified snapshot did not    *    exist.    */
annotation|@
name|Override
specifier|public
name|DeleteSnapshotResponse
name|deleteSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DeleteSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|this
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotManager
operator|.
name|deleteSnapshot
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DeleteSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified snapshot is done.    * @return true if the snapshot is in file system ready to use,    *   false if the snapshot is in the process of completing    * @throws ServiceException wrapping UnknownSnapshotException if invalid snapshot, or    *  a wrapped HBaseSnapshotException with progress failure reason.    */
annotation|@
name|Override
specifier|public
name|IsSnapshotDoneResponse
name|isSnapshotDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsSnapshotDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking to see if snapshot from request:"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
operator|+
literal|" is done"
argument_list|)
expr_stmt|;
try|try
block|{
name|IsSnapshotDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsSnapshotDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|snapshotManager
operator|.
name|isSnapshotDone
argument_list|(
name|request
operator|.
name|getSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Execute Restore/Clone snapshot operation.    *    *<p>If the specified table exists a "Restore" is executed, replacing the table    * schema and directory data with the content of the snapshot.    * The table must be disabled, or a UnsupportedOperationException will be thrown.    *    *<p>If the table doesn't exist a "Clone" is executed, a new table is created    * using the schema at the time of the snapshot, and the content of the snapshot.    *    *<p>The restore/clone operation does not require copying HFiles. Since HFiles    * are immutable the table can point to and use the same files as the original one.    */
annotation|@
name|Override
specifier|public
name|RestoreSnapshotResponse
name|restoreSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RestoreSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|this
operator|.
name|snapshotManager
operator|.
name|checkSnapshotSupport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|SnapshotDescription
name|reqSnapshot
init|=
name|request
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|snapshotManager
operator|.
name|restoreSnapshot
argument_list|(
name|reqSnapshot
argument_list|)
expr_stmt|;
return|return
name|RestoreSnapshotResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the status of the requested snapshot restore/clone operation.    * This method is not exposed to the user, it is just used internally by HBaseAdmin    * to verify if the restore is completed.    *    * No exceptions are thrown if the restore is not running, the result will be "done".    *    * @return done<tt>true</tt> if the restore/clone operation is completed.    * @throws ServiceException if the operation failed.    */
annotation|@
name|Override
specifier|public
name|IsRestoreSnapshotDoneResponse
name|isRestoreSnapshotDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsRestoreSnapshotDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|SnapshotDescription
name|snapshot
init|=
name|request
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|IsRestoreSnapshotDoneResponse
operator|.
name|Builder
name|builder
init|=
name|IsRestoreSnapshotDoneResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
name|snapshotManager
operator|.
name|isRestoreDone
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDone
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|ModifyNamespaceResponse
name|modifyNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|ModifyNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|modifyNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|MasterAdminProtos
operator|.
name|ModifyNamespaceResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|CreateNamespaceResponse
name|createNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|CreateNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|createNamespace
argument_list|(
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|MasterAdminProtos
operator|.
name|CreateNamespaceResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|DeleteNamespaceResponse
name|deleteNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|DeleteNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|deleteNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MasterAdminProtos
operator|.
name|DeleteNamespaceResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|GetNamespaceDescriptorResponse
name|getNamespaceDescriptor
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|GetNamespaceDescriptorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|MasterAdminProtos
operator|.
name|GetNamespaceDescriptorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|getNamespaceDescriptor
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|ListNamespaceDescriptorsResponse
name|listNamespaceDescriptors
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|ListNamespaceDescriptorsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|MasterAdminProtos
operator|.
name|ListNamespaceDescriptorsResponse
operator|.
name|Builder
name|response
init|=
name|MasterAdminProtos
operator|.
name|ListNamespaceDescriptorsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|listNamespaceDescriptors
argument_list|()
control|)
block|{
name|response
operator|.
name|addNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
name|listTableDescriptorsByNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|ListTableDescriptorsByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|MasterAdminProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|MasterAdminProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|listTableDescriptorsByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableSchema
argument_list|(
name|htd
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MasterAdminProtos
operator|.
name|ListTableNamesByNamespaceResponse
name|listTableNamesByNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterAdminProtos
operator|.
name|ListTableNamesByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|MasterAdminProtos
operator|.
name|ListTableNamesByNamespaceResponse
operator|.
name|Builder
name|b
init|=
name|MasterAdminProtos
operator|.
name|ListTableNamesByNamespaceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|listTableNamesByNamespace
argument_list|(
name|request
operator|.
name|getNamespaceName
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|addTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isHealthCheckerConfigured
parameter_list|()
block|{
name|String
name|healthScriptLocation
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HEALTH_SCRIPT_LOC
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|healthScriptLocation
argument_list|)
return|;
block|}
specifier|public
name|void
name|createNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
operator|.
name|isLegalNamespaceName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preCreateNamespace
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" creating "
operator|+
name|descriptor
argument_list|)
expr_stmt|;
name|tableNamespaceManager
operator|.
name|create
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postCreateNamespace
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|modifyNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
operator|.
name|isLegalNamespaceName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preModifyNamespace
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" modify "
operator|+
name|descriptor
argument_list|)
expr_stmt|;
name|tableNamespaceManager
operator|.
name|update
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postModifyNamespace
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cpHost
operator|.
name|preDeleteNamespace
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getClientIdAuditPrefix
argument_list|()
operator|+
literal|" delete "
operator|+
name|name
argument_list|)
expr_stmt|;
name|tableNamespaceManager
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postDeleteNamespace
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NamespaceDescriptor
name|getNamespaceDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tableNamespaceManager
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|listNamespaceDescriptors
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|tableNamespaceManager
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|listTableDescriptorsByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|tableDescriptors
operator|.
name|getByNamespace
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|listTableNamesByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|descriptor
range|:
name|tableDescriptors
operator|.
name|getByNamespace
argument_list|(
name|name
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|descriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
block|}
end_class

end_unit

