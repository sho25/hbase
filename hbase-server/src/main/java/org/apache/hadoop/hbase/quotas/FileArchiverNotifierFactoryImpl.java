begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A factory for getting instances of {@link FileArchiverNotifier}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FileArchiverNotifierFactoryImpl
implements|implements
name|FileArchiverNotifierFactory
block|{
specifier|private
specifier|static
specifier|final
name|FileArchiverNotifierFactoryImpl
name|DEFAULT_INSTANCE
init|=
operator|new
name|FileArchiverNotifierFactoryImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|FileArchiverNotifierFactory
name|CURRENT_INSTANCE
init|=
name|DEFAULT_INSTANCE
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|TableName
argument_list|,
name|FileArchiverNotifier
argument_list|>
name|CACHE
decl_stmt|;
specifier|private
name|FileArchiverNotifierFactoryImpl
parameter_list|()
block|{
name|CACHE
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|FileArchiverNotifierFactory
name|getInstance
parameter_list|()
block|{
return|return
name|CURRENT_INSTANCE
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|setInstance
parameter_list|(
name|FileArchiverNotifierFactory
name|inst
parameter_list|)
block|{
name|CURRENT_INSTANCE
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|inst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|CURRENT_INSTANCE
operator|=
name|DEFAULT_INSTANCE
expr_stmt|;
block|}
comment|/**    * Returns the {@link FileArchiverNotifier} instance for the given {@link TableName}.    *    * @param tn The table to obtain a notifier for    * @return The notifier for the given {@code tablename}.    */
specifier|public
name|FileArchiverNotifier
name|get
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
comment|// Ensure that only one instance is exposed to callers
specifier|final
name|FileArchiverNotifier
name|newMapping
init|=
operator|new
name|FileArchiverNotifierImpl
argument_list|(
name|conn
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|tn
argument_list|)
decl_stmt|;
specifier|final
name|FileArchiverNotifier
name|previousMapping
init|=
name|CACHE
operator|.
name|putIfAbsent
argument_list|(
name|tn
argument_list|,
name|newMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousMapping
operator|==
literal|null
condition|)
block|{
return|return
name|newMapping
return|;
block|}
return|return
name|previousMapping
return|;
block|}
specifier|public
name|int
name|getCacheSize
parameter_list|()
block|{
return|return
name|CACHE
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
class|class
name|CacheKey
block|{
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|final
name|TableName
name|tn
decl_stmt|;
name|CacheKey
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|tn
operator|=
name|tn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CacheKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheKey
name|other
init|=
operator|(
name|CacheKey
operator|)
name|o
decl_stmt|;
comment|// TableName should be the only thing differing..
return|return
name|tn
operator|.
name|equals
argument_list|(
name|other
operator|.
name|tn
argument_list|)
operator|&&
name|conn
operator|.
name|equals
argument_list|(
name|other
operator|.
name|conn
argument_list|)
operator|&&
name|conf
operator|.
name|equals
argument_list|(
name|other
operator|.
name|conf
argument_list|)
operator|&&
name|fs
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|conn
argument_list|)
operator|.
name|append
argument_list|(
name|conf
argument_list|)
operator|.
name|append
argument_list|(
name|fs
argument_list|)
operator|.
name|append
argument_list|(
name|tn
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CacheKey[TableName="
operator|+
name|tn
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

