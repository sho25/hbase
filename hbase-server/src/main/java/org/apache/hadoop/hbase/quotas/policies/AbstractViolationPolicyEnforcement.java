begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceLimitingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceViolationPolicyEnforcement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Abstract implementation for {@link SpaceViolationPolicyEnforcement}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|AbstractViolationPolicyEnforcement
implements|implements
name|SpaceViolationPolicyEnforcement
block|{
name|RegionServerServices
name|rss
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|SpaceQuotaSnapshot
name|quotaSnapshot
decl_stmt|;
specifier|public
name|void
name|setRegionServerServices
parameter_list|(
name|RegionServerServices
name|rss
parameter_list|)
block|{
name|this
operator|.
name|rss
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rss
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|RegionServerServices
name|getRegionServerServices
parameter_list|()
block|{
return|return
name|this
operator|.
name|rss
return|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|public
name|void
name|setQuotaSnapshot
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|quotaSnapshot
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SpaceQuotaSnapshot
name|getQuotaSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|quotaSnapshot
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|RegionServerServices
name|rss
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|setRegionServerServices
argument_list|(
name|rss
argument_list|)
expr_stmt|;
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|setQuotaSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|areCompactionsDisabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Computes the size of a single file on the filesystem. If the size cannot be computed for some    * reason, a {@link SpaceLimitingException} is thrown, as the file may violate a quota. If the    * provided path does not reference a file, an {@link IllegalArgumentException} is thrown.    *    * @param fs The FileSystem which the path refers to a file upon    * @param path The path on the {@code fs} to a file whose size is being checked    * @return The size in bytes of the file    */
name|long
name|getFileSize
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SpaceLimitingException
block|{
specifier|final
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpaceLimitingException
argument_list|(
name|getPolicyName
argument_list|()
argument_list|,
literal|"Could not verify length of file to bulk load: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|path
operator|+
literal|" is not a file."
argument_list|)
throw|;
block|}
return|return
name|status
operator|.
name|getLen
argument_list|()
return|;
block|}
block|}
end_class

end_unit

