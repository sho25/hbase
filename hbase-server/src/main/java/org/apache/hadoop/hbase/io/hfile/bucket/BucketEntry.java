begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBuffAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
operator|.
name|MemoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializerIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|HBaseReferenceCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|RefCnt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IdReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Item in cache. We expect this to be where most memory goes. Java uses 8 bytes just for object  * headers; after this, we want to use as little as possible - so we only use 8 bytes, but in order  * to do so we end up messing around with all this Java casting stuff. Offset stored as 5 bytes that  * make up the long. Doubt we'll see devices this big for ages. Offsets are divided by 256. So 5  * bytes gives us 256TB or so.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BucketEntry
implements|implements
name|HBaseReferenceCounted
block|{
comment|// access counter comparator, descending order
specifier|static
specifier|final
name|Comparator
argument_list|<
name|BucketEntry
argument_list|>
name|COMPARATOR
init|=
name|Comparator
operator|.
name|comparingLong
argument_list|(
name|BucketEntry
operator|::
name|getAccessCounter
argument_list|)
operator|.
name|reversed
argument_list|()
decl_stmt|;
specifier|private
name|int
name|offsetBase
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
specifier|private
name|byte
name|offset1
decl_stmt|;
comment|/**    * The index of the deserializer that can deserialize this BucketEntry content. See    * {@link CacheableDeserializerIdManager} for hosting of index to serializers.    */
name|byte
name|deserializerIndex
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|accessCounter
decl_stmt|;
specifier|private
name|BlockPriority
name|priority
decl_stmt|;
comment|/**    * The RefCnt means how many paths are referring the {@link BucketEntry}, each RPC reading path is    * considering as one path, the {@link BucketCache#backingMap} reference is also considered a    * path. NOTICE that if two read RPC path hit the same {@link BucketEntry}, then the HFileBlocks    * the two RPC referred will share the same refCnt instance with the BucketEntry. so the refCnt    * will increase or decrease as the following:<br>    * 1. when writerThread flush the block into IOEngine and add the bucketEntry into backingMap, the    * refCnt ++;<br>    * 2. If BucketCache evict the block and move the bucketEntry out of backingMap, the refCnt--; it    * usually happen when HFile is closing or someone call the clearBucketCache by force.<br>    * 3. The read RPC path start to refer the block which is backend by the memory area in    * bucketEntry, then refCnt ++ ;<br>    * 4. The read RPC patch shipped the response, and release the block. then refCnt--;<br>    * Once the refCnt decrease to zero, then the {@link BucketAllocator} will free the block area.    */
specifier|private
specifier|final
name|RefCnt
name|refCnt
decl_stmt|;
specifier|final
name|AtomicBoolean
name|markedAsEvicted
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffAllocator
name|allocator
decl_stmt|;
comment|/**    * Time this block was cached. Presumes we are created just before we are added to the cache.    */
specifier|private
specifier|final
name|long
name|cachedTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|BucketEntry
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|accessCounter
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|accessCounter
argument_list|,
name|inMemory
argument_list|,
name|RefCnt
operator|.
name|create
argument_list|()
argument_list|,
name|ByteBuffAllocator
operator|.
name|HEAP
argument_list|)
expr_stmt|;
block|}
name|BucketEntry
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|accessCounter
parameter_list|,
name|boolean
name|inMemory
parameter_list|,
name|RefCnt
name|refCnt
parameter_list|,
name|ByteBuffAllocator
name|allocator
parameter_list|)
block|{
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|accessCounter
operator|=
name|accessCounter
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|inMemory
condition|?
name|BlockPriority
operator|.
name|MEMORY
else|:
name|BlockPriority
operator|.
name|MULTI
expr_stmt|;
name|this
operator|.
name|refCnt
operator|=
name|refCnt
expr_stmt|;
name|this
operator|.
name|markedAsEvicted
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
block|}
name|long
name|offset
parameter_list|()
block|{
comment|// Java has no unsigned numbers, so this needs the L cast otherwise it will be sign extended
comment|// as a negative number.
name|long
name|o
init|=
operator|(
operator|(
name|long
operator|)
name|offsetBase
operator|)
operator|&
literal|0xFFFFFFFFL
decl_stmt|;
comment|// The 0xFF here does not need the L cast because it is treated as a positive int.
name|o
operator|+=
operator|(
operator|(
call|(
name|long
call|)
argument_list|(
name|offset1
argument_list|)
operator|)
operator|&
literal|0xFF
operator|)
operator|<<
literal|32
expr_stmt|;
return|return
name|o
operator|<<
literal|8
return|;
block|}
specifier|private
name|void
name|setOffset
parameter_list|(
name|long
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|value
operator|&
literal|0xFF
operator|)
operator|==
literal|0
assert|;
name|value
operator|>>=
literal|8
expr_stmt|;
name|offsetBase
operator|=
operator|(
name|int
operator|)
name|value
expr_stmt|;
name|offset1
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializerReference
parameter_list|()
block|{
return|return
name|CacheableDeserializerIdManager
operator|.
name|getDeserializer
argument_list|(
name|deserializerIndex
argument_list|)
return|;
block|}
name|void
name|setDeserializerReference
parameter_list|(
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializer
parameter_list|)
block|{
name|this
operator|.
name|deserializerIndex
operator|=
operator|(
name|byte
operator|)
name|deserializer
operator|.
name|getDeserializerIdentifier
argument_list|()
expr_stmt|;
block|}
name|long
name|getAccessCounter
parameter_list|()
block|{
return|return
name|accessCounter
return|;
block|}
comment|/**    * Block has been accessed. Update its local access counter.    */
name|void
name|access
parameter_list|(
name|long
name|accessCounter
parameter_list|)
block|{
name|this
operator|.
name|accessCounter
operator|=
name|accessCounter
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|priority
operator|==
name|BlockPriority
operator|.
name|SINGLE
condition|)
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|MULTI
expr_stmt|;
block|}
block|}
specifier|public
name|BlockPriority
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
name|long
name|getCachedTime
parameter_list|()
block|{
return|return
name|cachedTime
return|;
block|}
comment|/**    * The {@link BucketCache} will try to release its reference to this BucketEntry many times. we    * must make sure the idempotent, otherwise it'll decrease the RPC's reference count in advance,    * then for RPC memory leak happen.    * @return true if we deallocate this entry successfully.    */
name|boolean
name|markAsEvicted
parameter_list|()
block|{
if|if
condition|(
name|markedAsEvicted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|release
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Mark as evicted only when NO RPC references. Mainly used for eviction when cache size exceed    * the max acceptable size.    * @return true if we deallocate this entry successfully.    */
name|boolean
name|markStaleAsEvicted
parameter_list|()
block|{
if|if
condition|(
operator|!
name|markedAsEvicted
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|refCnt
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// The only reference was coming from backingMap, now release the stale entry.
return|return
name|this
operator|.
name|markAsEvicted
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check whether have some RPC patch referring this block. There're two case:<br>    * 1. If current refCnt is greater than 1, there must be at least one referring RPC path;<br>    * 2. If current refCnt is equal to 1 and the markedAtEvicted is true, the it means backingMap has    * released its reference, the remaining reference can only be from RPC path.<br>    * We use this check to decide whether we can free the block area: when cached size exceed the    * acceptable size, our eviction policy will choose those stale blocks without any RPC reference    * and the RPC referred block will be excluded.    * @return true to indicate there're some RPC referring the block.    */
name|boolean
name|isRpcRef
parameter_list|()
block|{
name|boolean
name|evicted
init|=
name|markedAsEvicted
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|refCnt
argument_list|()
operator|>
literal|1
operator|||
operator|(
name|evicted
operator|&&
name|refCnt
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
name|Cacheable
name|wrapAsCacheable
parameter_list|(
name|ByteBuffer
index|[]
name|buffers
parameter_list|,
name|MemoryType
name|memoryType
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuff
name|buf
init|=
name|ByteBuff
operator|.
name|wrap
argument_list|(
name|buffers
argument_list|,
name|this
operator|.
name|refCnt
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|deserializerReference
argument_list|()
operator|.
name|deserialize
argument_list|(
name|buf
argument_list|,
name|allocator
argument_list|,
name|memoryType
argument_list|)
return|;
block|}
interface|interface
name|BucketEntryHandler
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|handle
parameter_list|()
function_decl|;
block|}
parameter_list|<
name|T
parameter_list|>
name|T
name|withWriteLock
parameter_list|(
name|IdReadWriteLock
argument_list|<
name|Long
argument_list|>
name|offsetLock
parameter_list|,
name|BucketEntryHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
block|{
name|ReentrantReadWriteLock
name|lock
init|=
name|offsetLock
operator|.
name|getLock
argument_list|(
name|this
operator|.
name|offset
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|handler
operator|.
name|handle
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|refCnt
parameter_list|()
block|{
return|return
name|this
operator|.
name|refCnt
operator|.
name|refCnt
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BucketEntry
name|retain
parameter_list|()
block|{
name|refCnt
operator|.
name|retain
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * We've three cases to release refCnt now:<br>    * 1. BucketCache#evictBlock, it will release the backingMap's reference by force because we're    * closing file or clear the bucket cache or some corruption happen. when all rpc references gone,    * then free the area in bucketAllocator.<br>    * 2. BucketCache#returnBlock . when rpc shipped, we'll release the block, only when backingMap    * also release its refCnt (case.1 will do this) and no other rpc reference, then it will free the    * area in bucketAllocator.<br>    * 3.evict those block without any rpc reference if cache size exceeded. we'll only free those    * blocks with zero rpc reference count, as the {@link BucketEntry#markStaleAsEvicted()} do.    * @return true to indicate we've decreased to zero and do the de-allocation.    */
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|()
block|{
return|return
name|refCnt
operator|.
name|release
argument_list|()
return|;
block|}
block|}
end_class

end_unit

