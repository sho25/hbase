begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * HFileLink cleaner that determines if a hfile should be deleted.  * HFiles can be deleted only if there're no links to them.  *  * When a HFileLink is created a back reference file is created in:  *      /hbase/archive/table/region/cf/.links-hfile/ref-region.ref-table  * To check if the hfile can be deleted the back references folder must be empty.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HFileLinkCleaner
extends|extends
name|BaseHFileCleanerDelegate
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HFileLinkCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isFileDeletable
parameter_list|(
name|FileStatus
name|fStat
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Path
name|filePath
init|=
name|fStat
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// HFile Link is always deletable
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|filePath
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// If the file is inside a link references directory, means that it is a back ref link.
comment|// The back ref can be deleted only if the referenced file doesn't exists.
name|Path
name|parentDir
init|=
name|filePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|HFileLink
operator|.
name|isBackReferencesDir
argument_list|(
name|parentDir
argument_list|)
condition|)
block|{
try|try
block|{
name|Path
name|hfilePath
init|=
name|HFileLink
operator|.
name|getHFileFromBackReference
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
return|return
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hfilePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't verify if the referenced file still exists, keep it just in case"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// HFile is deletable only if has no links
try|try
block|{
name|Path
name|backRefDir
init|=
name|HFileLink
operator|.
name|getBackReferencesDir
argument_list|(
name|parentDir
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|backRefDir
argument_list|)
operator|==
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't get the references, not deleting file, just in case"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// setup filesystem
try|try
block|{
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't instantiate the file system, not deleting file, just in case"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

