begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A mutable segment in memstore, specifically the active segment.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MutableSegment
extends|extends
name|Segment
block|{
specifier|public
specifier|final
specifier|static
name|long
name|DEEP_OVERHEAD
init|=
name|Segment
operator|.
name|DEEP_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP
operator|+
name|ClassSize
operator|.
name|SYNC_TIMERANGE_TRACKER
decl_stmt|;
specifier|protected
name|MutableSegment
parameter_list|(
name|CellSet
name|cellSet
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreLAB
name|memStoreLAB
parameter_list|)
block|{
name|super
argument_list|(
name|cellSet
argument_list|,
name|comparator
argument_list|,
name|memStoreLAB
argument_list|,
name|TimeRangeTracker
operator|.
name|create
argument_list|(
name|TimeRangeTracker
operator|.
name|Type
operator|.
name|SYNC
argument_list|)
argument_list|)
expr_stmt|;
name|incSize
argument_list|(
literal|0
argument_list|,
name|DEEP_OVERHEAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// update the mutable segment metadata
block|}
comment|/**    * Adds the given cell into the segment    * @param cell the cell to add    * @param mslabUsed whether using MSLAB    */
specifier|public
name|void
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|boolean
name|mslabUsed
parameter_list|,
name|MemStoreSizing
name|memStoreSizing
parameter_list|)
block|{
name|internalAdd
argument_list|(
name|cell
argument_list|,
name|mslabUsed
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|upsert
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|readpoint
parameter_list|,
name|MemStoreSizing
name|memStoreSizing
parameter_list|)
block|{
name|internalAdd
argument_list|(
name|cell
argument_list|,
literal|false
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
comment|// Get the Cells for the row/family/qualifier regardless of timestamp.
comment|// For this case we want to clean up any other puts
name|Cell
name|firstCell
init|=
name|PrivateCellUtil
operator|.
name|createFirstOnRowColTS
argument_list|(
name|cell
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Cell
argument_list|>
name|ss
init|=
name|this
operator|.
name|tailSet
argument_list|(
name|firstCell
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|it
init|=
name|ss
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// versions visible to oldest scanner
name|int
name|versionsVisible
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Cell
name|cur
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|==
name|cur
condition|)
block|{
comment|// ignore the one just put in
continue|continue;
block|}
comment|// check that this is the row and column we are interested in, otherwise bail
if|if
condition|(
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|cell
argument_list|,
name|cur
argument_list|)
operator|&&
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|cell
argument_list|,
name|cur
argument_list|)
condition|)
block|{
comment|// only remove Puts that concurrent scanners cannot possibly see
if|if
condition|(
name|cur
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
operator|&&
name|cur
operator|.
name|getSequenceId
argument_list|()
operator|<=
name|readpoint
condition|)
block|{
if|if
condition|(
name|versionsVisible
operator|>=
literal|1
condition|)
block|{
comment|// if we get here we have seen at least one version visible to the oldest scanner,
comment|// which means we can prove that no scanner will see this version
comment|// false means there was a change, so give us the size.
comment|// TODO when the removed cell ie.'cur' having its data in MSLAB, we can not release that
comment|// area. Only the Cell object as such going way. We need to consider cellLen to be
comment|// decreased there as 0 only. Just keeping it as existing code now. We need to know the
comment|// removed cell is from MSLAB or not. Will do once HBASE-16438 is in
name|int
name|cellLen
init|=
name|getCellLength
argument_list|(
name|cur
argument_list|)
decl_stmt|;
name|long
name|heapSize
init|=
name|heapSizeChange
argument_list|(
name|cur
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|offHeapSize
init|=
name|offHeapSizeChange
argument_list|(
name|cur
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|incSize
argument_list|(
operator|-
name|cellLen
argument_list|,
operator|-
name|heapSize
argument_list|,
operator|-
name|offHeapSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|memStoreSizing
operator|!=
literal|null
condition|)
block|{
name|memStoreSizing
operator|.
name|decMemStoreSize
argument_list|(
name|cellLen
argument_list|,
name|heapSize
argument_list|,
name|offHeapSize
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|versionsVisible
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// past the row or column, done
break|break;
block|}
block|}
block|}
comment|/**    * Returns the first cell in the segment    * @return the first cell in the segment    */
annotation|@
name|VisibleForTesting
name|Cell
name|first
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCellSet
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|indexEntrySize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
return|;
block|}
block|}
end_class

end_unit

