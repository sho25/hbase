begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A mutable segment in memstore, specifically the active segment.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MutableSegment
extends|extends
name|Segment
block|{
specifier|protected
name|MutableSegment
parameter_list|(
name|CellSet
name|cellSet
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|MemStoreLAB
name|memStoreLAB
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|cellSet
argument_list|,
name|comparator
argument_list|,
name|memStoreLAB
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds the given cell into the segment    * @return the change in the heap size    */
specifier|public
name|long
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|internalAdd
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * Removes the given cell from the segment    * @return the change in the heap size    */
specifier|public
name|long
name|rollback
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|Cell
name|found
init|=
name|getCellSet
argument_list|()
operator|.
name|get
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
operator|&&
name|found
operator|.
name|getSequenceId
argument_list|()
operator|==
name|cell
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|long
name|sz
init|=
name|AbstractMemStore
operator|.
name|heapSizeChange
argument_list|(
name|cell
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|getCellSet
argument_list|()
operator|.
name|remove
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|incSize
argument_list|(
operator|-
name|sz
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
return|return
literal|0
return|;
block|}
comment|//methods for test
comment|/**    * Returns the first cell in the segment    * @return the first cell in the segment    */
name|Cell
name|first
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCellSet
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
block|}
end_class

end_unit

