begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|StoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_class
specifier|public
class|class
name|TableCfWALEntryFilter
implements|implements
name|WALEntryFilter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableCfWALEntryFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationPeer
name|peer
decl_stmt|;
specifier|public
name|TableCfWALEntryFilter
parameter_list|(
name|ReplicationPeer
name|peer
parameter_list|)
block|{
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|TableName
name|tabName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableCFs
operator|=
name|this
operator|.
name|peer
operator|.
name|getTableCFs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"should not happen: can't get tableCFs for peer "
operator|+
name|peer
operator|.
name|getId
argument_list|()
operator|+
literal|", degenerate as if it's not configured by keeping tableCFs==null"
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|cells
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// If null means user has explicitly not configured any table CFs so all the tables data are
comment|// applicable for replication
if|if
condition|(
name|tableCFs
operator|==
literal|null
condition|)
block|{
return|return
name|entry
return|;
block|}
comment|// return null(prevent replicating) if logKey's table isn't in this peer's
comment|// replicable table list
if|if
condition|(
operator|!
name|tableCFs
operator|.
name|containsKey
argument_list|(
name|tabName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cfs
init|=
name|tableCFs
operator|.
name|get
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// TODO There is a similar logic in ScopeWALEntryFilter but data structures are different so
comment|// cannot refactor into one now, can revisit and see if any way to unify them.
comment|// Filter bulk load entries separately
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
name|Cell
name|filteredBulkLoadEntryCell
init|=
name|filterBulkLoadEntries
argument_list|(
name|cfs
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredBulkLoadEntryCell
operator|!=
literal|null
condition|)
block|{
name|cells
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|filteredBulkLoadEntryCell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cells
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ignore(remove) kv if its cf isn't in the replicable cf list
comment|// (empty cfs means all cfs of this table are replicable)
if|if
condition|(
operator|(
name|cfs
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|cfs
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|cells
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|cells
operator|.
name|size
argument_list|()
operator|<
name|size
operator|/
literal|2
condition|)
block|{
name|cells
operator|.
name|trimToSize
argument_list|()
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|private
name|Cell
name|filterBulkLoadEntries
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cfs
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|fam
decl_stmt|;
name|BulkLoadDescriptor
name|bld
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bld
operator|=
name|WALEdit
operator|.
name|getBulkLoadDescriptor
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get bulk load events information from the WAL file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|storesList
init|=
name|bld
operator|.
name|getStoresList
argument_list|()
decl_stmt|;
comment|// Copy the StoreDescriptor list and update it as storesList is a unmodifiableList
name|List
argument_list|<
name|StoreDescriptor
argument_list|>
name|copiedStoresList
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreDescriptor
argument_list|>
argument_list|(
name|storesList
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|StoreDescriptor
argument_list|>
name|copiedStoresListIterator
init|=
name|copiedStoresList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|anyStoreRemoved
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|copiedStoresListIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StoreDescriptor
name|sd
init|=
name|copiedStoresListIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|fam
operator|=
name|sd
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|cfs
operator|!=
literal|null
operator|&&
operator|!
name|cfs
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fam
argument_list|)
argument_list|)
condition|)
block|{
name|copiedStoresListIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|anyStoreRemoved
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|anyStoreRemoved
condition|)
block|{
return|return
name|cell
return|;
block|}
elseif|else
if|if
condition|(
name|copiedStoresList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BulkLoadDescriptor
operator|.
name|Builder
name|newDesc
init|=
name|BulkLoadDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|bld
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|bld
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
operator|.
name|setBulkloadSeqNum
argument_list|(
name|bld
operator|.
name|getBulkloadSeqNum
argument_list|()
argument_list|)
decl_stmt|;
name|newDesc
operator|.
name|addAllStores
argument_list|(
name|copiedStoresList
argument_list|)
expr_stmt|;
name|BulkLoadDescriptor
name|newBulkLoadDescriptor
init|=
name|newDesc
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|,
name|newBulkLoadDescriptor
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

