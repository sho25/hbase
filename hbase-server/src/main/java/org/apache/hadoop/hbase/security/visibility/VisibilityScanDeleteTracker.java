begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanDeleteTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Similar to ScanDeletTracker but tracks the visibility expression also before  * deciding if a Cell can be considered deleted  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|VisibilityScanDeleteTracker
extends|extends
name|ScanDeleteTracker
block|{
comment|// Its better to track the visibility tags in delete based on each type.  Create individual
comment|// data structures for tracking each of them.  This would ensure that there is no tracking based
comment|// on time and also would handle all cases where deletefamily or deletecolumns is specified with
comment|// Latest_timestamp.  In such cases the ts in the delete marker and the masking
comment|// put will not be same. So going with individual data structures for different delete
comment|// type would solve this problem and also ensure that the combination of different type
comment|// of deletes with diff ts would also work fine
comment|// Track per TS
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|visibilityTagsDeleteFamily
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Delete family version with different ts and different visibility expression could come.
comment|// Need to track it per ts.
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|visibilityTagsDeleteFamilyVersion
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|visibilityTagsDeleteColumns
decl_stmt|;
comment|// Tracking as List<List> is to handle same ts cell but different visibility tag.
comment|// TODO : Need to handle puts with same ts but different vis tags.
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|visiblityTagsDeleteColumnVersion
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|VisibilityScanDeleteTracker
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Cell
name|delCell
parameter_list|)
block|{
comment|//Cannot call super.add because need to find if the delete needs to be considered
name|long
name|timestamp
init|=
name|delCell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|int
name|qualifierOffset
init|=
name|delCell
operator|.
name|getQualifierOffset
argument_list|()
decl_stmt|;
name|int
name|qualifierLength
init|=
name|delCell
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
name|byte
name|type
init|=
name|delCell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|hasFamilyStamp
operator|=
literal|true
expr_stmt|;
comment|//familyStamps.add(delCell.getTimestamp());
name|extractDeleteTags
argument_list|(
name|delCell
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|familyVersionStamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|extractDeleteTags
argument_list|(
name|delCell
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// new column, or more general delete type
if|if
condition|(
name|deleteBuffer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|,
name|delCell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// A case where there are deletes for a column qualifier but there are
comment|// no corresponding puts for them. Rare case.
name|visibilityTagsDeleteColumns
operator|=
literal|null
expr_stmt|;
name|visiblityTagsDeleteColumnVersion
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
operator|&&
operator|(
name|deleteTimestamp
operator|!=
name|timestamp
operator|)
condition|)
block|{
comment|// there is a timestamp change which means we could clear the list
comment|// when ts is same and the vis tags are different we need to collect
comment|// them all. Interesting part is that in the normal case of puts if
comment|// there are 2 cells with same ts and diff vis tags only one of them is
comment|// returned. Handling with a single List<Tag> would mean that only one
comment|// of the cell would be considered. Doing this as a precaution.
comment|// Rare cases.
name|visiblityTagsDeleteColumnVersion
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|deleteBuffer
operator|=
name|delCell
operator|.
name|getQualifierArray
argument_list|()
expr_stmt|;
name|deleteOffset
operator|=
name|qualifierOffset
expr_stmt|;
name|deleteLength
operator|=
name|qualifierLength
expr_stmt|;
name|deleteType
operator|=
name|type
expr_stmt|;
name|deleteTimestamp
operator|=
name|timestamp
expr_stmt|;
name|extractDeleteTags
argument_list|(
name|delCell
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractDeleteTags
parameter_list|(
name|Cell
name|delCell
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
comment|// If tag is present in the delete
if|if
condition|(
name|delCell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DeleteFamily
case|:
name|List
argument_list|<
name|Tag
argument_list|>
name|delTags
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|visibilityTagsDeleteFamily
operator|!=
literal|null
condition|)
block|{
name|VisibilityUtils
operator|.
name|getVisibilityTags
argument_list|(
name|delCell
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|delTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|visibilityTagsDeleteFamily
operator|.
name|put
argument_list|(
name|delCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DeleteFamilyVersion
case|:
name|delTags
operator|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
expr_stmt|;
name|VisibilityUtils
operator|.
name|getVisibilityTags
argument_list|(
name|delCell
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|delTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|visibilityTagsDeleteFamilyVersion
operator|.
name|put
argument_list|(
name|delCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DeleteColumn
case|:
if|if
condition|(
name|visibilityTagsDeleteColumns
operator|==
literal|null
condition|)
block|{
name|visibilityTagsDeleteColumns
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|delTags
operator|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
expr_stmt|;
name|VisibilityUtils
operator|.
name|getVisibilityTags
argument_list|(
name|delCell
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|delTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|visibilityTagsDeleteColumns
operator|.
name|add
argument_list|(
name|delTags
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Delete
case|:
if|if
condition|(
name|visiblityTagsDeleteColumnVersion
operator|==
literal|null
condition|)
block|{
name|visiblityTagsDeleteColumnVersion
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|delTags
operator|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
expr_stmt|;
name|VisibilityUtils
operator|.
name|getVisibilityTags
argument_list|(
name|delCell
argument_list|,
name|delTags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|delTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|visiblityTagsDeleteColumnVersion
operator|.
name|add
argument_list|(
name|delTags
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid delete type"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DeleteFamily
case|:
name|visibilityTagsDeleteFamily
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|DeleteFamilyVersion
case|:
name|visibilityTagsDeleteFamilyVersion
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|DeleteColumn
case|:
name|visibilityTagsDeleteColumns
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|Delete
case|:
name|visiblityTagsDeleteColumnVersion
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid delete type"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeleteResult
name|isDeleted
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|long
name|timestamp
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|int
name|qualifierOffset
init|=
name|cell
operator|.
name|getQualifierOffset
argument_list|()
decl_stmt|;
name|int
name|qualifierLength
init|=
name|cell
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFamilyStamp
condition|)
block|{
if|if
condition|(
name|visibilityTagsDeleteFamily
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|>
name|deleteFamilies
init|=
name|visibilityTagsDeleteFamily
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|deleteFamilies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestamp
operator|<=
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|boolean
name|matchFound
init|=
name|VisibilityUtils
operator|.
name|checkForMatchingVisibilityTags
argument_list|(
name|cell
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchFound
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|FAMILY_VERSION_DELETED
return|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|VisibilityUtils
operator|.
name|isVisibilityTagsPresent
argument_list|(
name|cell
argument_list|)
condition|)
block|{
comment|// No tags
return|return
name|DeleteResult
operator|.
name|FAMILY_VERSION_DELETED
return|;
block|}
block|}
block|}
if|if
condition|(
name|familyVersionStamps
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|timestamp
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|visibilityTagsDeleteFamilyVersion
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|visibilityTagsDeleteFamilyVersion
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|timestamp
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tags
operator|!=
literal|null
condition|)
block|{
name|boolean
name|matchFound
init|=
name|VisibilityUtils
operator|.
name|checkForMatchingVisibilityTags
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchFound
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|FAMILY_VERSION_DELETED
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|VisibilityUtils
operator|.
name|isVisibilityTagsPresent
argument_list|(
name|cell
argument_list|)
condition|)
block|{
comment|// No tags
return|return
name|DeleteResult
operator|.
name|FAMILY_VERSION_DELETED
return|;
block|}
block|}
block|}
if|if
condition|(
name|deleteBuffer
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|deleteType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
condition|)
block|{
if|if
condition|(
name|visibilityTagsDeleteColumns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
range|:
name|visibilityTagsDeleteColumns
control|)
block|{
name|boolean
name|matchFound
init|=
name|VisibilityUtils
operator|.
name|checkForMatchingVisibilityTags
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchFound
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|VERSION_DELETED
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|VisibilityUtils
operator|.
name|isVisibilityTagsPresent
argument_list|(
name|cell
argument_list|)
condition|)
block|{
comment|// No tags
return|return
name|DeleteResult
operator|.
name|VERSION_DELETED
return|;
block|}
block|}
block|}
comment|// Delete (aka DeleteVersion)
comment|// If the timestamp is the same, keep this one
if|if
condition|(
name|timestamp
operator|==
name|deleteTimestamp
condition|)
block|{
if|if
condition|(
name|visiblityTagsDeleteColumnVersion
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
range|:
name|visiblityTagsDeleteColumnVersion
control|)
block|{
name|boolean
name|matchFound
init|=
name|VisibilityUtils
operator|.
name|checkForMatchingVisibilityTags
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchFound
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|VERSION_DELETED
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|VisibilityUtils
operator|.
name|isVisibilityTagsPresent
argument_list|(
name|cell
argument_list|)
condition|)
block|{
comment|// No tags
return|return
name|DeleteResult
operator|.
name|VERSION_DELETED
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
comment|// Next column case.
name|deleteBuffer
operator|=
literal|null
expr_stmt|;
name|visibilityTagsDeleteColumns
operator|=
literal|null
expr_stmt|;
name|visiblityTagsDeleteColumnVersion
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"isDeleted failed: deleteBuffer="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|)
operator|+
literal|", qualifier="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
operator|+
literal|", timestamp="
operator|+
name|timestamp
operator|+
literal|", comparison result: "
operator|+
name|ret
argument_list|)
throw|;
block|}
block|}
return|return
name|DeleteResult
operator|.
name|NOT_DELETED
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|visibilityTagsDeleteColumns
operator|=
literal|null
expr_stmt|;
name|visibilityTagsDeleteFamily
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|visibilityTagsDeleteFamilyVersion
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Tag
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|visiblityTagsDeleteColumnVersion
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

