begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransaction
operator|.
name|LoggingProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_comment
comment|/**  * Executes region merge as a "transaction". It is similar with  * SplitTransaction. Call {@link #prepare(RegionServerServices)} to setup the  * transaction, {@link #execute(Server, RegionServerServices)} to run the  * transaction and {@link #rollback(Server, RegionServerServices)} to cleanup if  * execute fails.  *   *<p>  * Here is an example of how you would use this class:  *   *<pre>  *  RegionMergeTransaction mt = new RegionMergeTransaction(this.conf, parent, midKey)  *  if (!mt.prepare(services)) return;  *  try {  *    mt.execute(server, services);  *  } catch (IOException ioe) {  *    try {  *      mt.rollback(server, services);  *      return;  *    } catch (RuntimeException e) {  *      myAbortable.abort("Failed merge, abort");  *    }  *  }  *</Pre>  *<p>  * This class is not thread safe. Caller needs ensure merge is run by one thread  * only.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionMergeTransaction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionMergeTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Merged region info
specifier|private
name|HRegionInfo
name|mergedRegionInfo
decl_stmt|;
comment|// region_a sorts before region_b
specifier|private
specifier|final
name|HRegion
name|region_a
decl_stmt|;
specifier|private
specifier|final
name|HRegion
name|region_b
decl_stmt|;
comment|// merges dir is under region_a
specifier|private
specifier|final
name|Path
name|mergesdir
decl_stmt|;
specifier|private
name|int
name|znodeVersion
init|=
operator|-
literal|1
decl_stmt|;
comment|// We only merge adjacent regions if forcible is false
specifier|private
specifier|final
name|boolean
name|forcible
decl_stmt|;
comment|/**    * Types to add to the transaction journal. Each enum is a step in the merge    * transaction. Used to figure how much we need to rollback.    */
enum|enum
name|JournalEntry
block|{
comment|/**      * Set region as in transition, set it into MERGING state.      */
name|SET_MERGING_IN_ZK
block|,
comment|/**      * We created the temporary merge data directory.      */
name|CREATED_MERGE_DIR
block|,
comment|/**      * Closed the merging region A.      */
name|CLOSED_REGION_A
block|,
comment|/**      * The merging region A has been taken out of the server's online regions list.      */
name|OFFLINED_REGION_A
block|,
comment|/**      * Closed the merging region B.      */
name|CLOSED_REGION_B
block|,
comment|/**      * The merging region B has been taken out of the server's online regions list.      */
name|OFFLINED_REGION_B
block|,
comment|/**      * Started in on creation of the merged region.      */
name|STARTED_MERGED_REGION_CREATION
block|,
comment|/**      * Point of no return. If we got here, then transaction is not recoverable      * other than by crashing out the regionserver.      */
name|PONR
block|}
comment|/*    * Journal of how far the merge transaction has progressed.    */
specifier|private
specifier|final
name|List
argument_list|<
name|JournalEntry
argument_list|>
name|journal
init|=
operator|new
name|ArrayList
argument_list|<
name|JournalEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|IOException
name|closedByOtherException
init|=
operator|new
name|IOException
argument_list|(
literal|"Failed to close region: already closed by another thread"
argument_list|)
decl_stmt|;
comment|/**    * Constructor    * @param a region a to merge    * @param b region b to merge    * @param forcible if false, we will only merge adjacent regions    */
specifier|public
name|RegionMergeTransaction
parameter_list|(
specifier|final
name|HRegion
name|a
parameter_list|,
specifier|final
name|HRegion
name|b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|region_a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|b
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|region_a
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|a
expr_stmt|;
block|}
name|this
operator|.
name|forcible
operator|=
name|forcible
expr_stmt|;
name|this
operator|.
name|mergesdir
operator|=
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getMergesDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Does checks on merge inputs.    * @param services    * @return<code>true</code> if the regions are mergeable else    *<code>false</code> if they are not (e.g. its already closed, etc.).    */
specifier|public
name|boolean
name|prepare
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|)
block|{
if|if
condition|(
operator|!
name|region_a
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|region_b
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't merge regions "
operator|+
name|region_a
operator|+
literal|","
operator|+
name|region_b
operator|+
literal|" because they do not belong to the same table"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|region_a
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't merge the same region "
operator|+
name|region_a
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|forcible
operator|&&
operator|!
name|HRegionInfo
operator|.
name|areAdjacent
argument_list|(
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Skip merging "
operator|+
name|this
operator|.
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" and "
operator|+
name|this
operator|.
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", because they are not adjacent."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|region_a
operator|.
name|isMergeable
argument_list|()
operator|||
operator|!
name|this
operator|.
name|region_b
operator|.
name|isMergeable
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|boolean
name|regionAHasMergeQualifier
init|=
name|hasMergeQualifierInMeta
argument_list|(
name|services
argument_list|,
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionAHasMergeQualifier
operator|||
name|hasMergeQualifierInMeta
argument_list|(
name|services
argument_list|,
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region "
operator|+
operator|(
name|regionAHasMergeQualifier
condition|?
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
else|:
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|)
operator|+
literal|" is not mergeable because it has merge qualifier in META"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed judging whether merge transaction is available for "
operator|+
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" and "
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// WARN: make sure there is no parent region of the two merging regions in
comment|// hbase:meta If exists, fixing up daughters would cause daughter regions(we
comment|// have merged one) online again when we restart master, so we should clear
comment|// the parent region to prevent the above case
comment|// Since HBASE-7721, we don't need fix up daughters any more. so here do
comment|// nothing
name|this
operator|.
name|mergedRegionInfo
operator|=
name|getMergedRegionInfo
argument_list|(
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Run the transaction.    * @param server Hosting server instance. Can be null when testing (won't try    *          and update in zk if a null server)    * @param services Used to online/offline regions.    * @throws IOException If thrown, transaction failed. Call    *           {@link #rollback(Server, RegionServerServices)}    * @return merged region    * @throws IOException    * @see #rollback(Server, RegionServerServices)    */
specifier|public
name|HRegion
name|execute
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|mergedRegion
init|=
name|createMergedRegion
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
decl_stmt|;
name|openMergedRegion
argument_list|(
name|server
argument_list|,
name|services
argument_list|,
name|mergedRegion
argument_list|)
expr_stmt|;
name|transitionZKNode
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
expr_stmt|;
return|return
name|mergedRegion
return|;
block|}
comment|/**    * Prepare the merged region and region files.    * @param server Hosting server instance. Can be null when testing (won't try    *          and update in zk if a null server)    * @param services Used to online/offline regions.    * @return merged region    * @throws IOException If thrown, transaction failed. Call    *           {@link #rollback(Server, RegionServerServices)}    */
name|HRegion
name|createMergedRegion
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting merge of "
operator|+
name|region_a
operator|+
literal|" and "
operator|+
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", forcible="
operator|+
name|forcible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isStopped
argument_list|()
operator|)
operator|||
operator|(
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|isStopping
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server is stopped or stopping"
argument_list|)
throw|;
block|}
comment|// If true, no cluster to write meta edits to or to update znodes in.
name|boolean
name|testing
init|=
name|server
operator|==
literal|null
condition|?
literal|true
else|:
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.testing.nocluster"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Set ephemeral MERGING znode up in zk. Mocked servers sometimes don't
comment|// have zookeeper so don't do zk stuff if server or zookeeper is null
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getZooKeeper
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|createNodeMerging
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed creating MERGING znode on "
operator|+
name|this
operator|.
name|mergedRegionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|JournalEntry
operator|.
name|SET_MERGING_IN_ZK
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getZooKeeper
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Transition node from MERGING to MERGING after creating the merge
comment|// node. Master will get the callback for node change only if the
comment|// transition is successful.
comment|// Note that if the transition fails then the rollback will delete the
comment|// created znode as the journal entry SET_MERGING_IN_ZK is added.
name|this
operator|.
name|znodeVersion
operator|=
name|transitionNodeMerging
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed setting MERGING znode on "
operator|+
name|this
operator|.
name|mergedRegionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|createMergesDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|JournalEntry
operator|.
name|CREATED_MERGE_DIR
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesOfRegionA
init|=
name|closeAndOfflineRegion
argument_list|(
name|services
argument_list|,
name|this
operator|.
name|region_a
argument_list|,
literal|true
argument_list|,
name|testing
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesOfRegionB
init|=
name|closeAndOfflineRegion
argument_list|(
name|services
argument_list|,
name|this
operator|.
name|region_b
argument_list|,
literal|false
argument_list|,
name|testing
argument_list|)
decl_stmt|;
assert|assert
name|hstoreFilesOfRegionA
operator|!=
literal|null
operator|&&
name|hstoreFilesOfRegionB
operator|!=
literal|null
assert|;
comment|//
comment|// mergeStoreFiles creates merged region dirs under the region_a merges dir
comment|// Nothing to unroll here if failure -- clean up of CREATE_MERGE_DIR will
comment|// clean this up.
name|mergeStoreFiles
argument_list|(
name|hstoreFilesOfRegionA
argument_list|,
name|hstoreFilesOfRegionB
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getZooKeeper
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Do one more check on the merging znode (before it is too late) in case
comment|// any merging region is moved somehow. If so, the znode transition will fail.
name|this
operator|.
name|znodeVersion
operator|=
name|transitionNodeMerging
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|znodeVersion
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed setting MERGING znode on "
operator|+
name|this
operator|.
name|mergedRegionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Log to the journal that we are creating merged region. We could fail
comment|// halfway through. If we do, we could have left
comment|// stuff in fs that needs cleanup -- a storefile or two. Thats why we
comment|// add entry to journal BEFORE rather than AFTER the change.
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|JournalEntry
operator|.
name|STARTED_MERGED_REGION_CREATION
argument_list|)
expr_stmt|;
name|HRegion
name|mergedRegion
init|=
name|createMergedRegionFromMerges
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|this
operator|.
name|region_b
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|)
decl_stmt|;
comment|// This is the point of no return. Similar with SplitTransaction.
comment|// IF we reach the PONR then subsequent failures need to crash out this
comment|// regionserver
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|JournalEntry
operator|.
name|PONR
argument_list|)
expr_stmt|;
comment|// Add merged region and delete region_a and region_b
comment|// as an atomic update. See HBASE-7721. This update to hbase:meta makes the region
comment|// will determine whether the region is merged or not in case of failures.
comment|// If it is successful, master will roll-forward, if not, master will
comment|// rollback
if|if
condition|(
operator|!
name|testing
condition|)
block|{
name|MetaEditor
operator|.
name|mergeRegions
argument_list|(
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|mergedRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mergedRegion
return|;
block|}
comment|/**    * Create a merged region from the merges directory under region a. In order    * to mock it for tests, place it with a new method.    * @param a hri of region a    * @param b hri of region b    * @param mergedRegion hri of merged region    * @return merged HRegion.    * @throws IOException    */
name|HRegion
name|createMergedRegionFromMerges
parameter_list|(
specifier|final
name|HRegion
name|a
parameter_list|,
specifier|final
name|HRegion
name|b
parameter_list|,
specifier|final
name|HRegionInfo
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|a
operator|.
name|createMergedRegionFromMerges
argument_list|(
name|mergedRegion
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**    * Close the merging region and offline it in regionserver    * @param services    * @param region    * @param isRegionA true if it is merging region a, false if it is region b    * @param testing true if it is testing    * @return a map of family name to list of store files    * @throws IOException    */
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|closeAndOfflineRegion
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|,
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|boolean
name|isRegionA
parameter_list|,
specifier|final
name|boolean
name|testing
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesToMerge
init|=
literal|null
decl_stmt|;
name|Exception
name|exceptionToThrow
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hstoreFilesToMerge
operator|=
name|region
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionToThrow
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|==
literal|null
operator|&&
name|hstoreFilesToMerge
operator|==
literal|null
condition|)
block|{
comment|// The region was closed by a concurrent thread. We can't continue
comment|// with the merge, instead we must just abandon the merge. If we
comment|// reopen or merge this could cause problems because the region has
comment|// probably already been moved to a different server, or is in the
comment|// process of moving to a different server.
name|exceptionToThrow
operator|=
name|closedByOtherException
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|!=
name|closedByOtherException
condition|)
block|{
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|isRegionA
condition|?
name|JournalEntry
operator|.
name|CLOSED_REGION_A
else|:
name|JournalEntry
operator|.
name|CLOSED_REGION_B
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptionToThrow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exceptionToThrow
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|exceptionToThrow
throw|;
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptionToThrow
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|testing
condition|)
block|{
name|services
operator|.
name|removeFromOnlineRegions
argument_list|(
name|region
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|journal
operator|.
name|add
argument_list|(
name|isRegionA
condition|?
name|JournalEntry
operator|.
name|OFFLINED_REGION_A
else|:
name|JournalEntry
operator|.
name|OFFLINED_REGION_B
argument_list|)
expr_stmt|;
return|return
name|hstoreFilesToMerge
return|;
block|}
comment|/**    * Get merged region info through the specified two regions    * @param a merging region A    * @param b merging region B    * @return the merged region info    */
specifier|public
specifier|static
name|HRegionInfo
name|getMergedRegionInfo
parameter_list|(
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
block|{
name|long
name|rid
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Regionid is timestamp. Merged region's id can't be less than that of
comment|// merging regions else will insert at wrong location in hbase:meta
if|if
condition|(
name|rid
operator|<
name|a
operator|.
name|getRegionId
argument_list|()
operator|||
name|rid
operator|<
name|b
operator|.
name|getRegionId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clock skew; merging regions id are "
operator|+
name|a
operator|.
name|getRegionId
argument_list|()
operator|+
literal|" and "
operator|+
name|b
operator|.
name|getRegionId
argument_list|()
operator|+
literal|", but current time here is "
operator|+
name|rid
argument_list|)
expr_stmt|;
name|rid
operator|=
name|Math
operator|.
name|max
argument_list|(
name|a
operator|.
name|getRegionId
argument_list|()
argument_list|,
name|b
operator|.
name|getRegionId
argument_list|()
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
literal|null
decl_stmt|;
comment|// Choose the smaller as start key
if|if
condition|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|startKey
operator|=
name|a
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startKey
operator|=
name|b
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
block|}
comment|// Choose the bigger as end key
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
operator|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|b
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|endKey
operator|=
name|a
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|endKey
operator|=
name|b
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
comment|// Merged region is sorted between two merging regions in META
name|HRegionInfo
name|mergedRegionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|a
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|,
name|rid
argument_list|)
decl_stmt|;
return|return
name|mergedRegionInfo
return|;
block|}
comment|/**    * Perform time consuming opening of the merged region.    * @param server Hosting server instance. Can be null when testing (won't try    *          and update in zk if a null server)    * @param services Used to online/offline regions.    * @param merged the merged region    * @throws IOException If thrown, transaction failed. Call    *           {@link #rollback(Server, RegionServerServices)}    */
name|void
name|openMergedRegion
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|HRegion
name|merged
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|stopped
init|=
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isStopped
argument_list|()
decl_stmt|;
name|boolean
name|stopping
init|=
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|isStopping
argument_list|()
decl_stmt|;
if|if
condition|(
name|stopped
operator|||
name|stopping
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not opening merged region  "
operator|+
name|merged
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because stopping="
operator|+
name|stopping
operator|+
literal|", stopped="
operator|+
name|stopped
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRegionInfo
name|hri
init|=
name|merged
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|LoggingProgressable
name|reporter
init|=
name|server
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|LoggingProgressable
argument_list|(
name|hri
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.regionmerge.open.log.interval"
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|merged
operator|.
name|openHRegion
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|services
operator|.
name|postOpenDeployTasks
argument_list|(
name|merged
argument_list|,
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
expr_stmt|;
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Finish off merge transaction, transition the zknode    * @param server Hosting server instance. Can be null when testing (won't try    *          and update in zk if a null server)    * @param services Used to online/offline regions.    * @throws IOException If thrown, transaction failed. Call    *           {@link #rollback(Server, RegionServerServices)}    */
name|void
name|transitionZKNode
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|server
operator|==
literal|null
operator|||
name|server
operator|.
name|getZooKeeper
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Tell master about merge by updating zk. If we fail, abort.
try|try
block|{
name|this
operator|.
name|znodeVersion
operator|=
name|transitionNodeMerge
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|znodeVersion
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|spins
init|=
literal|0
decl_stmt|;
comment|// Now wait for the master to process the merge. We know it's done
comment|// when the znode is deleted. The reason we keep tickling the znode is
comment|// that it's possible for the master to miss an event.
do|do
block|{
if|if
condition|(
name|spins
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Still waiting on the master to process the merge for "
operator|+
name|this
operator|.
name|mergedRegionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|", waited "
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// When this returns -1 it means the znode doesn't exist
name|this
operator|.
name|znodeVersion
operator|=
name|tickleNodeMerge
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|region_a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|this
operator|.
name|znodeVersion
argument_list|)
expr_stmt|;
name|spins
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|this
operator|.
name|znodeVersion
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|services
operator|.
name|isStopping
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed telling master about merge "
operator|+
name|mergedRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Leaving here, the mergedir with its dross will be in place but since the
comment|// merge was successful, just leave it; it'll be cleaned when region_a is
comment|// cleaned up by CatalogJanitor on master
block|}
comment|/**    * Create reference file(s) of merging regions under the region_a merges dir    * @param hstoreFilesOfRegionA    * @param hstoreFilesOfRegionB    * @throws IOException    */
specifier|private
name|void
name|mergeStoreFiles
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesOfRegionA
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|hstoreFilesOfRegionB
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create reference file(s) of region A in mergdir
name|HRegionFileSystem
name|fs_a
init|=
name|this
operator|.
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|entry
range|:
name|hstoreFilesOfRegionA
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFile
name|storeFile
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|fs_a
operator|.
name|mergeStoreFile
argument_list|(
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|familyName
argument_list|,
name|storeFile
argument_list|,
name|this
operator|.
name|mergesdir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create reference file(s) of region B in mergedir
name|HRegionFileSystem
name|fs_b
init|=
name|this
operator|.
name|region_b
operator|.
name|getRegionFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|entry
range|:
name|hstoreFilesOfRegionB
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|familyName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFile
name|storeFile
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|fs_b
operator|.
name|mergeStoreFile
argument_list|(
name|this
operator|.
name|mergedRegionInfo
argument_list|,
name|familyName
argument_list|,
name|storeFile
argument_list|,
name|this
operator|.
name|mergesdir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param server Hosting server instance (May be null when testing).    * @param services Services of regionserver, used to online regions.    * @throws IOException If thrown, rollback failed. Take drastic action.    * @return True if we successfully rolled back, false if we got to the point    *         of no return and so now need to abort the server to minimize    *         damage.    */
specifier|public
name|boolean
name|rollback
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|this
operator|.
name|mergedRegionInfo
operator|!=
literal|null
assert|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|ListIterator
argument_list|<
name|JournalEntry
argument_list|>
name|iterator
init|=
name|this
operator|.
name|journal
operator|.
name|listIterator
argument_list|(
name|this
operator|.
name|journal
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Iterate in reverse.
while|while
condition|(
name|iterator
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|JournalEntry
name|je
init|=
name|iterator
operator|.
name|previous
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|je
condition|)
block|{
case|case
name|SET_MERGING_IN_ZK
case|:
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|getZooKeeper
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cleanZK
argument_list|(
name|server
argument_list|,
name|this
operator|.
name|mergedRegionInfo
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CREATED_MERGE_DIR
case|:
name|this
operator|.
name|region_a
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|region_b
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|cleanupMergesDir
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLOSED_REGION_A
case|:
try|try
block|{
comment|// So, this returns a seqid but if we just closed and then reopened,
comment|// we should be ok. On close, we flushed using sequenceid obtained
comment|// from hosting regionserver so no need to propagate the sequenceid
comment|// returned out of initialize below up into regionserver as we
comment|// normally do.
name|this
operator|.
name|region_a
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed rollbacking CLOSED_REGION_A of region "
operator|+
name|this
operator|.
name|region_a
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|OFFLINED_REGION_A
case|:
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|this
operator|.
name|region_a
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSED_REGION_B
case|:
try|try
block|{
name|this
operator|.
name|region_b
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed rollbacking CLOSED_REGION_A of region "
operator|+
name|this
operator|.
name|region_b
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|OFFLINED_REGION_B
case|:
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
name|services
operator|.
name|addToOnlineRegions
argument_list|(
name|this
operator|.
name|region_b
argument_list|)
expr_stmt|;
break|break;
case|case
name|STARTED_MERGED_REGION_CREATION
case|:
name|this
operator|.
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|cleanupMergedRegion
argument_list|(
name|this
operator|.
name|mergedRegionInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|PONR
case|:
comment|// We got to the point-of-no-return so we need to just abort. Return
comment|// immediately. Do not clean up created merged regions.
return|return
literal|false
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled journal entry: "
operator|+
name|je
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
name|HRegionInfo
name|getMergedRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergedRegionInfo
return|;
block|}
comment|// For unit testing.
name|Path
name|getMergesDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergesdir
return|;
block|}
specifier|private
specifier|static
name|void
name|cleanZK
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
try|try
block|{
comment|// Only delete if its in expected state; could have been hijacked.
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed cleanup zk node of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|server
operator|.
name|abort
argument_list|(
literal|"Failed cleanup zk node of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new ephemeral node in the MERGING state for the merged region.    * Create it ephemeral in case regionserver dies mid-merge.    *     *<p>    * Does not transition nodes from other states. If a node already exists for    * this region, a {@link NodeExistsException} will be thrown.    *    * @param zkw zk reference    * @param region region to be created as offline    * @param serverName server event originates from    * @return Version of znode created.    * @throws KeeperException    * @throws IOException    */
name|int
name|createNodeMerging
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Creating ephemeral node for "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in MERGING state"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|rt
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
comment|// Transition node from MERGING to MERGING and pick up version so we
comment|// can be sure this znode is ours; version is needed deleting.
return|return
name|transitionNodeMerging
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
operator|-
literal|1
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**    * Transitions an existing node for the specified region which is currently in    * the MERGING state to be in the MERGE state. Converts the ephemeral MERGING    * znode to an ephemeral MERGE node. Master cleans up MERGE znode when it    * reads it (or if we crash, zk will clean it up).    *    *<p>    * Does not transition nodes from other states. If for some reason the node    * could not be transitioned, the method returns -1. If the transition is    * successful, the version of the node after transition is returned.    *    *<p>    * This method can fail and return false for three different reasons:    *<ul>    *<li>Node for this region does not exist</li>    *<li>Node for this region is not in MERGING state</li>    *<li>After verifying MERGING state, update fails because of wrong version    * (this should never actually happen since an RS only does this transition    * following a transition to MERGING. if two RS are conflicting, one would    * fail the original transition to MERGING and not this transition)</li>    *</ul>    *    *<p>    * Does not set any watches.    *    *<p>    * This method should only be used by a RegionServer when completing the open    * of merged region.    *    * @param zkw zk reference    * @param merged region to be transitioned to opened    * @param a merging region A    * @param b merging region B    * @param serverName server event originates from    * @param znodeVersion expected version of data before modification    * @return version of node after transition, -1 if unsuccessful transition    * @throws KeeperException if unexpected zookeeper exception    * @throws IOException    */
specifier|private
specifier|static
name|int
name|transitionNodeMerge
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|znodeVersion
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|merged
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|merged
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGED
argument_list|,
name|znodeVersion
argument_list|,
name|payload
argument_list|)
return|;
block|}
comment|/**    *    * @param zkw zk reference    * @param parent region to be transitioned to merging    * @param serverName server event originates from    * @param version znode version    * @return version of node after transition, -1 if unsuccessful transition    * @throws KeeperException    * @throws IOException    */
name|int
name|transitionNodeMerging
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|,
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|parent
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGING
argument_list|,
name|version
argument_list|,
name|payload
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|tickleNodeMerge
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|HRegionInfo
name|merged
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|znodeVersion
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|merged
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGED
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_MERGED
argument_list|,
name|znodeVersion
argument_list|,
name|payload
argument_list|)
return|;
block|}
comment|/**    * Checks if the given region has merge qualifier in hbase:meta    * @param services    * @param regionName name of specified region    * @return true if the given region has merge qualifier in META.(It will be    *         cleaned by CatalogJanitor)    * @throws IOException    */
name|boolean
name|hasMergeQualifierInMeta
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|services
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// Get merge regions if it is a merged region and already has merge
comment|// qualifier
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HRegionInfo
argument_list|>
name|mergeRegions
init|=
name|MetaReader
operator|.
name|getRegionsFromMergeQualifier
argument_list|(
name|services
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeRegions
operator|!=
literal|null
operator|&&
operator|(
name|mergeRegions
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|||
name|mergeRegions
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// It has merge qualifier
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

