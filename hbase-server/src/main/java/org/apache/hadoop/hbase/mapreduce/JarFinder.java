begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_comment
comment|/**  * Finds the Jar for a class. If the class is in a directory in the  * classpath, it creates a Jar on the fly with the contents of the directory  * and returns the path to that Jar. If a Jar is created, it is created in  * the system temporary directory.  *  * This file was forked from hadoop/common/branches/branch-2@1377176.  */
end_comment

begin_class
specifier|public
class|class
name|JarFinder
block|{
specifier|private
specifier|static
name|void
name|copyToZipStream
parameter_list|(
name|File
name|file
parameter_list|,
name|ZipEntry
name|entry
parameter_list|,
name|ZipOutputStream
name|zos
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|zos
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
init|=
name|is
operator|.
name|read
argument_list|(
name|arr
argument_list|)
decl_stmt|;
while|while
condition|(
name|read
operator|>
operator|-
literal|1
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|jarDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|relativePath
parameter_list|,
name|ZipOutputStream
name|zos
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|relativePath
argument_list|,
literal|"relativePath"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zos
argument_list|,
literal|"zos"
argument_list|)
expr_stmt|;
comment|// by JAR spec, if there is a manifest, it must be the first entry in the
comment|// ZIP.
name|File
name|manifestFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
decl_stmt|;
name|ZipEntry
name|manifestEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|manifestFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|zos
operator|.
name|putNextEntry
argument_list|(
name|manifestEntry
argument_list|)
expr_stmt|;
operator|new
name|Manifest
argument_list|()
operator|.
name|write
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|zos
argument_list|)
argument_list|)
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copyToZipStream
argument_list|(
name|manifestFile
argument_list|,
name|manifestEntry
argument_list|,
name|zos
argument_list|)
expr_stmt|;
block|}
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zipDir
argument_list|(
name|dir
argument_list|,
name|relativePath
argument_list|,
name|zos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|zipDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|relativePath
parameter_list|,
name|ZipOutputStream
name|zos
parameter_list|,
name|boolean
name|start
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|dirList
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aDirList
range|:
name|dirList
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|aDirList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isHidden
argument_list|()
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|start
condition|)
block|{
name|ZipEntry
name|dirEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|relativePath
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|dirEntry
argument_list|)
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|String
name|filePath
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|zipDir
argument_list|(
name|file
argument_list|,
name|relativePath
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|,
name|zos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|path
init|=
name|relativePath
operator|+
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
condition|)
block|{
name|ZipEntry
name|anEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|copyToZipStream
argument_list|(
name|f
argument_list|,
name|anEntry
argument_list|,
name|zos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|createJar
parameter_list|(
name|File
name|dir
parameter_list|,
name|File
name|jarFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dir
argument_list|,
literal|"dir"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|jarFile
argument_list|,
literal|"jarFile"
argument_list|)
expr_stmt|;
name|File
name|jarDir
init|=
name|jarFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|jarDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|jarDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"could not create dir [{0}]"
argument_list|,
name|jarDir
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|JarOutputStream
name|zos
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
argument_list|)
decl_stmt|;
name|jarDir
argument_list|(
name|dir
argument_list|,
literal|""
argument_list|,
name|zos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the full path to the Jar containing the class. It always return a    * JAR.    *    * @param klass class.    *    * @return path to the Jar containing the class.    */
specifier|public
specifier|static
name|String
name|getJar
parameter_list|(
name|Class
name|klass
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|klass
argument_list|,
literal|"klass"
argument_list|)
expr_stmt|;
name|ClassLoader
name|loader
init|=
name|klass
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|String
name|class_file
init|=
name|klass
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|itr
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|class_file
argument_list|)
init|;
name|itr
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
operator|(
name|URL
operator|)
name|itr
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|path
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|replaceAll
argument_list|(
literal|"!.*$"
argument_list|,
literal|""
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|klassName
init|=
name|klass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|klassName
operator|=
name|klassName
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|klassName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
argument_list|)
decl_stmt|;
name|testDir
operator|=
name|testDir
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|testDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|tempJar
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadoop-"
argument_list|,
literal|""
argument_list|,
name|testDir
argument_list|)
decl_stmt|;
name|tempJar
operator|=
operator|new
name|File
argument_list|(
name|tempJar
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".jar"
argument_list|)
expr_stmt|;
name|tempJar
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|createJar
argument_list|(
name|baseDir
argument_list|,
name|tempJar
argument_list|)
expr_stmt|;
return|return
name|tempJar
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

