begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|PreUpgradeValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|coprocessor
operator|.
name|CoprocessorViolation
operator|.
name|Severity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|CoprocessorValidator
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoprocessorValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CoprocessorMethods
name|branch1
decl_stmt|;
specifier|private
name|CoprocessorMethods
name|current
decl_stmt|;
specifier|private
name|boolean
name|dieOnWarnings
decl_stmt|;
specifier|private
name|boolean
name|scan
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|args
decl_stmt|;
specifier|public
name|CoprocessorValidator
parameter_list|()
block|{
name|branch1
operator|=
operator|new
name|Branch1CoprocessorMethods
argument_list|()
expr_stmt|;
name|current
operator|=
operator|new
name|CurrentCoprocessorMethods
argument_list|()
expr_stmt|;
block|}
comment|/**    * This classloader implementation calls {@link #resolveClass(Class)}    * method for every loaded class. It means that some extra validation will    * take place<a    * href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.3">    * according to JLS</a>.    */
specifier|private
specifier|static
specifier|final
class|class
name|ResolverUrlClassLoader
extends|extends
name|URLClassLoader
block|{
specifier|private
name|ResolverUrlClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|ResolverUrlClassLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
specifier|private
name|ResolverUrlClassLoader
name|createClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ResolverUrlClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResolverUrlClassLoader
name|run
parameter_list|()
block|{
return|return
operator|new
name|ResolverUrlClassLoader
argument_list|(
name|urls
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|validate
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|className
parameter_list|,
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Validating class '{}'."
argument_list|,
name|className
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Validating method '{}'."
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch1
operator|.
name|hasMethod
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|current
operator|.
name|hasMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|CoprocessorViolation
name|violation
init|=
operator|new
name|CoprocessorViolation
argument_list|(
name|Severity
operator|.
name|WARNING
argument_list|,
literal|"Method '"
operator|+
name|method
operator|+
literal|"' was removed from new coprocessor API, "
operator|+
literal|"so it won't be called by HBase."
argument_list|)
decl_stmt|;
name|violations
operator|.
name|add
argument_list|(
name|violation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|CoprocessorViolation
name|violation
init|=
operator|new
name|CoprocessorViolation
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
literal|"No such class '"
operator|+
name|className
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|violations
operator|.
name|add
argument_list|(
name|violation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|Error
name|e
parameter_list|)
block|{
name|CoprocessorViolation
name|violation
init|=
operator|new
name|CoprocessorViolation
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
literal|"Could not validate class '"
operator|+
name|className
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|violations
operator|.
name|add
argument_list|(
name|violation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|validate
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|classNames
parameter_list|)
block|{
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
name|validate
argument_list|(
name|classLoader
argument_list|,
name|className
argument_list|,
name|violations
argument_list|)
expr_stmt|;
block|}
return|return
name|violations
return|;
block|}
specifier|public
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|validate
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|classNames
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
index|[]
name|urlArray
init|=
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|urls
operator|.
name|toArray
argument_list|(
name|urlArray
argument_list|)
expr_stmt|;
try|try
init|(
name|ResolverUrlClassLoader
name|classLoader
init|=
name|createClassLoader
argument_list|(
name|urlArray
argument_list|)
init|)
block|{
return|return
name|validate
argument_list|(
name|classLoader
argument_list|,
name|classNames
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getJarClasses
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
return|return
name|jarFile
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|JarEntry
operator|::
name|getName
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|name
parameter_list|)
lambda|->
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|name
parameter_list|)
lambda|->
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|filterObservers
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|classNames
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filteredClassNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanning class '{}'."
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|Coprocessor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found coprocessor class '{}'."
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|filteredClassNames
operator|.
name|add
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredClassNames
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|String
name|header
init|=
literal|"hbase "
operator|+
name|PreUpgradeValidator
operator|.
name|TOOL_NAME
operator|+
literal|" "
operator|+
name|PreUpgradeValidator
operator|.
name|VALIDATE_CP_NAME
operator|+
literal|"<jar> -scan|<classes>"
decl_stmt|;
name|printUsage
argument_list|(
name|header
argument_list|,
literal|"Options:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptNoArg
argument_list|(
literal|"e"
argument_list|,
literal|"Treat warnings as errors."
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
literal|"scan"
argument_list|,
literal|"Scan jar for observers."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|scan
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"scan"
argument_list|)
expr_stmt|;
name|dieOnWarnings
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|args
operator|=
name|cmd
operator|.
name|getArgList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Missing jar file."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|String
name|jar
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|scan
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Missing classes or -scan option."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|scan
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Can't use classes with -scan option."
argument_list|)
throw|;
block|}
name|Path
name|jarPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jar
argument_list|)
decl_stmt|;
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[]
block|{
name|jarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
decl_stmt|;
try|try
init|(
name|ResolverUrlClassLoader
name|classLoader
init|=
name|createClassLoader
argument_list|(
name|urls
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classNames
decl_stmt|;
if|if
condition|(
name|scan
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jarClassNames
init|=
name|getJarClasses
argument_list|(
name|jarPath
argument_list|)
decl_stmt|;
name|classNames
operator|=
name|filterObservers
argument_list|(
name|classLoader
argument_list|,
name|jarClassNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classNames
operator|=
name|args
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|violations
operator|=
name|validate
argument_list|(
name|classLoader
argument_list|,
name|classNames
argument_list|)
expr_stmt|;
block|}
name|boolean
name|error
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CoprocessorViolation
name|violation
range|:
name|violations
control|)
block|{
switch|switch
condition|(
name|violation
operator|.
name|getSeverity
argument_list|()
condition|)
block|{
case|case
name|WARNING
case|:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"[WARNING] "
operator|+
name|violation
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dieOnWarnings
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|ERROR
case|:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"[ERROR] "
operator|+
name|violation
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|(
name|error
operator|)
condition|?
name|EXIT_FAILURE
else|:
name|EXIT_SUCCESS
return|;
block|}
block|}
end_class

end_unit

