begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Statics to get access to Http related configuration.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|HttpConfig
block|{
specifier|private
specifier|static
name|Policy
name|policy
decl_stmt|;
specifier|public
enum|enum
name|Policy
block|{
name|HTTP_ONLY
block|,
name|HTTPS_ONLY
block|,
name|HTTP_AND_HTTPS
block|;
specifier|public
specifier|static
name|Policy
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|HTTPS_ONLY
return|;
block|}
elseif|else
if|if
condition|(
name|HTTP_AND_HTTPS
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|HTTP_AND_HTTPS
return|;
block|}
return|return
name|HTTP_ONLY
return|;
block|}
specifier|public
name|boolean
name|isHttpEnabled
parameter_list|()
block|{
return|return
name|this
operator|==
name|HTTP_ONLY
operator|||
name|this
operator|==
name|HTTP_AND_HTTPS
return|;
block|}
specifier|public
name|boolean
name|isHttpsEnabled
parameter_list|()
block|{
return|return
name|this
operator|==
name|HTTPS_ONLY
operator|||
name|this
operator|==
name|HTTP_AND_HTTPS
return|;
block|}
block|}
static|static
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|boolean
name|sslEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ServerConfigurationKeys
operator|.
name|HBASE_SSL_ENABLED_KEY
argument_list|,
name|ServerConfigurationKeys
operator|.
name|HBASE_SSL_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
name|policy
operator|=
name|sslEnabled
condition|?
name|Policy
operator|.
name|HTTPS_ONLY
else|:
name|Policy
operator|.
name|HTTP_ONLY
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setPolicy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|HttpConfig
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
name|policy
operator|==
name|Policy
operator|.
name|HTTPS_ONLY
return|;
block|}
specifier|public
specifier|static
name|String
name|getSchemePrefix
parameter_list|()
block|{
return|return
operator|(
name|isSecure
argument_list|()
operator|)
condition|?
literal|"https://"
else|:
literal|"http://"
return|;
block|}
specifier|public
specifier|static
name|String
name|getScheme
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
return|return
name|policy
operator|==
name|Policy
operator|.
name|HTTPS_ONLY
condition|?
literal|"https://"
else|:
literal|"http://"
return|;
block|}
block|}
end_class

end_unit

