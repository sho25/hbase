begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * A tool to dump the procedures in the HFiles.  *<p/>  * The different between this and {@link org.apache.hadoop.hbase.io.hfile.HFilePrettyPrinter} is  * that, this class will decode the procedure in the cell for better debugging. You are free to use  * {@link org.apache.hadoop.hbase.io.hfile.HFilePrettyPrinter} to dump the same file as well.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HFileProcedurePrettyPrinter
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
name|Long
name|procId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|HFileProcedurePrettyPrinter
parameter_list|()
block|{
name|this
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HFileProcedurePrettyPrinter
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
literal|"w"
argument_list|,
literal|"seekToPid"
argument_list|,
literal|"Seek to this procedure id and print this procedure only"
argument_list|)
expr_stmt|;
name|OptionGroup
name|files
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|files
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"f"
argument_list|,
literal|"file"
argument_list|,
literal|true
argument_list|,
literal|"File to scan. Pass full-path; e.g. hdfs://a:9000/MasterProcs/master/procedure/p/xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"a"
argument_list|,
literal|"all"
argument_list|,
literal|false
argument_list|,
literal|"Scan the whole procedure region."
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAllHFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|masterProcDir
init|=
operator|new
name|Path
argument_list|(
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RegionProcedureStore
operator|.
name|MASTER_PROCEDURE_DIR
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|CommonFSUtils
operator|.
name|getTableDir
argument_list|(
name|masterProcDir
argument_list|,
name|RegionProcedureStore
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tableDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|,
name|p
lambda|->
name|RegionInfo
operator|.
name|isEncodedRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|regionFiles
init|=
name|HFile
operator|.
name|getStoreFiles
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|files
operator|.
name|addAll
argument_list|(
name|regionFiles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"w"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"w"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|procId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row is specified."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
try|try
block|{
name|addAllHFiles
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|printCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"K: "
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|cell
argument_list|,
name|c
lambda|->
name|Long
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|c
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getType
argument_list|()
operator|==
name|Cell
operator|.
name|Type
operator|.
name|Put
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|" V: mark deleted"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|ProcedureUtil
operator|.
name|convertToProcedure
argument_list|(
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|parser
argument_list|()
operator|.
name|parseFrom
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" V: "
operator|+
name|proc
operator|.
name|toStringDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Scanning -> "
operator|+
name|file
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
init|(
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
init|;
name|HFileScanner
name|scanner
operator|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
init|)
block|{
if|if
condition|(
name|procId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scanner
operator|.
name|seekTo
argument_list|(
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|procId
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
do|do
block|{
name|Cell
name|cell
init|=
name|scanner
operator|.
name|getCell
argument_list|()
decl_stmt|;
name|long
name|currentProcId
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentProcId
operator|!=
name|procId
operator|.
name|longValue
argument_list|()
condition|)
block|{
break|break;
block|}
name|printCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|scanner
operator|.
name|seekTo
argument_list|()
condition|)
block|{
do|do
block|{
name|Cell
name|cell
init|=
name|scanner
operator|.
name|getCell
argument_list|()
decl_stmt|;
name|printCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|processFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|HFileProcedurePrettyPrinter
argument_list|()
operator|.
name|doStaticMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

