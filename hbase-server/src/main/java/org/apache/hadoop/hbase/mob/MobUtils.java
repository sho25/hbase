begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * The mob utilities  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MobUtils
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|LOCAL_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Indicates whether the column family is a mob one.    * @param hcd The descriptor of a column family.    * @return True if this column family is a mob one, false if it's not.    */
specifier|public
specifier|static
name|boolean
name|isMobFamily
parameter_list|(
name|HColumnDescriptor
name|hcd
parameter_list|)
block|{
name|byte
index|[]
name|isMob
init|=
name|hcd
operator|.
name|getValue
argument_list|(
name|MobConstants
operator|.
name|IS_MOB
argument_list|)
decl_stmt|;
return|return
name|isMob
operator|!=
literal|null
operator|&&
name|isMob
operator|.
name|length
operator|==
literal|1
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|isMob
argument_list|)
return|;
block|}
comment|/**    * Gets the mob threshold.    * If the size of a cell value is larger than this threshold, it's regarded as a mob.    * The default threshold is 1024*100(100K)B.    * @param hcd The descriptor of a column family.    * @return The threshold.    */
specifier|public
specifier|static
name|long
name|getMobThreshold
parameter_list|(
name|HColumnDescriptor
name|hcd
parameter_list|)
block|{
name|byte
index|[]
name|threshold
init|=
name|hcd
operator|.
name|getValue
argument_list|(
name|MobConstants
operator|.
name|MOB_THRESHOLD
argument_list|)
decl_stmt|;
return|return
name|threshold
operator|!=
literal|null
operator|&&
name|threshold
operator|.
name|length
operator|==
name|Bytes
operator|.
name|SIZEOF_LONG
condition|?
name|Bytes
operator|.
name|toLong
argument_list|(
name|threshold
argument_list|)
else|:
name|MobConstants
operator|.
name|DEFAULT_MOB_THRESHOLD
return|;
block|}
comment|/**    * Formats a date to a string.    * @param date The date.    * @return The string format of the date, it's yyyymmdd.    */
specifier|public
specifier|static
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|LOCAL_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**    * Parses the string to a date.    * @param dateString The string format of a date, it's yyyymmdd.    * @return A date.    * @throws ParseException    */
specifier|public
specifier|static
name|Date
name|parseDate
parameter_list|(
name|String
name|dateString
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|LOCAL_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|dateString
argument_list|)
return|;
block|}
comment|/**    * Whether the current cell is a mob reference cell.    * @param cell The current cell.    * @return True if the cell has a mob reference tag, false if it doesn't.    */
specifier|public
specifier|static
name|boolean
name|isMobReferenceCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Tag
name|tag
init|=
name|Tag
operator|.
name|getTag
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|,
name|TagType
operator|.
name|MOB_REFERENCE_TAG_TYPE
argument_list|)
decl_stmt|;
return|return
name|tag
operator|!=
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Whether the tag list has a mob reference tag.    * @param tags The tag list.    * @return True if the list has a mob reference tag, false if it doesn't.    */
specifier|public
specifier|static
name|boolean
name|hasMobReferenceTag
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|TagType
operator|.
name|MOB_REFERENCE_TAG_TYPE
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Indicates whether it's a raw scan.    * The information is set in the attribute "hbase.mob.scan.raw" of scan.    * For a mob cell, in a normal scan the scanners retrieves the mob cell from the mob file.    * In a raw scan, the scanner directly returns cell in HBase without retrieve the one in    * the mob file.    * @param scan The current scan.    * @return True if it's a raw scan.    */
specifier|public
specifier|static
name|boolean
name|isRawMobScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|raw
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|raw
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|raw
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Indicates whether the scan contains the information of caching blocks.    * The information is set in the attribute "hbase.mob.cache.blocks" of scan.    * @param scan The current scan.    * @return True when the Scan attribute specifies to cache the MOB blocks.    */
specifier|public
specifier|static
name|boolean
name|isCacheMobBlocks
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|cache
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_CACHE_BLOCKS
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|cache
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|cache
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Sets the attribute of caching blocks in the scan.    *    * @param scan    *          The current scan.    * @param cacheBlocks    *          True, set the attribute of caching blocks into the scan, the scanner with this scan    *          caches blocks.    *          False, the scanner doesn't cache blocks for this scan.    */
specifier|public
specifier|static
name|void
name|setCacheMobBlocks
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_CACHE_BLOCKS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cacheBlocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the root dir of the mob files.    * It's {HBASE_DIR}/mobdir.    * @param conf The current configuration.    * @return the root dir of the mob file.    */
specifier|public
specifier|static
name|Path
name|getMobHome
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Path
name|hbaseDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|MobConstants
operator|.
name|MOB_DIR_NAME
argument_list|)
return|;
block|}
comment|/**    * Gets the region dir of the mob files.    * It's {HBASE_DIR}/mobdir/{namespace}/{tableName}/{regionEncodedName}.    * @param conf The current configuration.    * @param tableName The current table name.    * @return The region dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobRegionPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|Path
name|tablePath
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the family dir of the mob files.    * It's {HBASE_DIR}/mobdir/{namespace}/{tableName}/{regionEncodedName}/{columnFamilyName}.    * @param conf The current configuration.    * @param tableName The current table name.    * @param familyName The current family name.    * @return The family dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobFamilyPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMobRegionPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|familyName
argument_list|)
return|;
block|}
comment|/**    * Gets the family dir of the mob files.    * It's {HBASE_DIR}/mobdir/{namespace}/{tableName}/{regionEncodedName}/{columnFamilyName}.    * @param regionPath The path of mob region which is a dummy one.    * @param familyName The current family name.    * @return The family dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobFamilyPath
parameter_list|(
name|Path
name|regionPath
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|regionPath
argument_list|,
name|familyName
argument_list|)
return|;
block|}
comment|/**    * Gets the HRegionInfo of the mob files.    * This is a dummy region. The mob files are not saved in a region in HBase.    * This is only used in mob snapshot. It's internally used only.    * @param tableName    * @return A dummy mob region info.    */
specifier|public
specifier|static
name|HRegionInfo
name|getMobRegionInfo
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|MobConstants
operator|.
name|MOB_REGION_NAME_BYTES
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Creates a mob reference KeyValue.    * The value of the mob reference KeyValue is mobCellValueSize + mobFileName.    * @param kv The original KeyValue.    * @param fileName The mob file name where the mob reference KeyValue is written.    * @param tableNameTag The tag of the current table name. It's very important in    *                        cloning the snapshot.    * @return The mob reference KeyValue.    */
specifier|public
specifier|static
name|KeyValue
name|createMobRefKeyValue
parameter_list|(
name|KeyValue
name|kv
parameter_list|,
name|byte
index|[]
name|fileName
parameter_list|,
name|Tag
name|tableNameTag
parameter_list|)
block|{
comment|// Append the tags to the KeyValue.
comment|// The key is same, the value is the filename of the mob file
name|List
argument_list|<
name|Tag
argument_list|>
name|existingTags
init|=
name|Tag
operator|.
name|asList
argument_list|(
name|kv
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
name|existingTags
operator|.
name|add
argument_list|(
name|MobConstants
operator|.
name|MOB_REF_TAG
argument_list|)
expr_stmt|;
comment|// Add the tag of the source table name, this table is where this mob file is flushed
comment|// from.
comment|// It's very useful in cloning the snapshot. When reading from the cloning table, we need to
comment|// find the original mob files by this table name. For details please see cloning
comment|// snapshot for mob files.
name|existingTags
operator|.
name|add
argument_list|(
name|tableNameTag
argument_list|)
expr_stmt|;
name|int
name|valueLength
init|=
name|kv
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|refValue
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|valueLength
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|KeyValue
name|reference
init|=
operator|new
name|KeyValue
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|refValue
argument_list|,
literal|0
argument_list|,
name|refValue
operator|.
name|length
argument_list|,
name|existingTags
argument_list|)
decl_stmt|;
name|reference
operator|.
name|setSequenceId
argument_list|(
name|kv
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
block|}
end_class

end_unit

