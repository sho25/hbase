begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HFileArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The mob utilities  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|MobUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MobUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|"_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|LOCAL_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Private constructor to keep this class from being instantiated.    */
specifier|private
name|MobUtils
parameter_list|()
block|{   }
comment|/**    * Formats a date to a string.    * @param date The date.    * @return The string format of the date, it's yyyymmdd.    */
specifier|public
specifier|static
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|LOCAL_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**    * Parses the string to a date.    * @param dateString The string format of a date, it's yyyymmdd.    * @return A date.    */
specifier|public
specifier|static
name|Date
name|parseDate
parameter_list|(
name|String
name|dateString
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|LOCAL_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|dateString
argument_list|)
return|;
block|}
comment|/**    * Whether the current cell is a mob reference cell.    * @param cell The current cell.    * @return True if the cell has a mob reference tag, false if it doesn't.    */
specifier|public
specifier|static
name|boolean
name|isMobReferenceCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Optional
argument_list|<
name|Tag
argument_list|>
name|tag
init|=
name|PrivateCellUtil
operator|.
name|getTag
argument_list|(
name|cell
argument_list|,
name|TagType
operator|.
name|MOB_REFERENCE_TAG_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Gets the table name tag.    * @param cell The current cell.    * @return The table name tag.    */
specifier|public
specifier|static
name|Tag
name|getTableNameTag
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Optional
argument_list|<
name|Tag
argument_list|>
name|tag
init|=
name|PrivateCellUtil
operator|.
name|getTag
argument_list|(
name|cell
argument_list|,
name|TagType
operator|.
name|MOB_TABLE_NAME_TAG_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|tag
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Whether the tag list has a mob reference tag.    * @param tags The tag list.    * @return True if the list has a mob reference tag, false if it doesn't.    */
specifier|public
specifier|static
name|boolean
name|hasMobReferenceTag
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|TagType
operator|.
name|MOB_REFERENCE_TAG_TYPE
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Indicates whether it's a raw scan. The information is set in the attribute "hbase.mob.scan.raw"    * of scan. For a mob cell, in a normal scan the scanners retrieves the mob cell from the mob    * file. In a raw scan, the scanner directly returns cell in HBase without retrieve the one in the    * mob file.    * @param scan The current scan.    * @return True if it's a raw scan.    */
specifier|public
specifier|static
name|boolean
name|isRawMobScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|raw
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|raw
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|raw
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Indicates whether it's a reference only scan. The information is set in the attribute    * "hbase.mob.scan.ref.only" of scan. If it's a ref only scan, only the cells with ref tag are    * returned.    * @param scan The current scan.    * @return True if it's a ref only scan.    */
specifier|public
specifier|static
name|boolean
name|isRefOnlyScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|refOnly
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_REF_ONLY
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|refOnly
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|refOnly
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Indicates whether the scan contains the information of caching blocks. The information is set    * in the attribute "hbase.mob.cache.blocks" of scan.    * @param scan The current scan.    * @return True when the Scan attribute specifies to cache the MOB blocks.    */
specifier|public
specifier|static
name|boolean
name|isCacheMobBlocks
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|cache
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_CACHE_BLOCKS
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|cache
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|cache
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Sets the attribute of caching blocks in the scan.    * @param scan The current scan.    * @param cacheBlocks True, set the attribute of caching blocks into the scan, the scanner with    *          this scan caches blocks. False, the scanner doesn't cache blocks for this scan.    */
specifier|public
specifier|static
name|void
name|setCacheMobBlocks
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_CACHE_BLOCKS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cacheBlocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans the expired mob files. Cleans the files whose creation date is older than (current -    * columnFamily.ttl), and the minVersions of that column family is 0.    * @param fs The current file system.    * @param conf The current configuration.    * @param tableName The current table name.    * @param columnDescriptor The descriptor of the current column family.    * @param cacheConfig The cacheConfig that disables the block cache.    * @param current The current time.    */
specifier|public
specifier|static
name|void
name|cleanExpiredMobFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnDescriptor
parameter_list|,
name|CacheConfig
name|cacheConfig
parameter_list|,
name|long
name|current
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|timeToLive
init|=
name|columnDescriptor
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|MAX_VALUE
operator|==
name|timeToLive
condition|)
block|{
comment|// no need to clean, because the TTL is not set.
return|return;
block|}
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|current
operator|-
name|timeToLive
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|expireDate
init|=
name|calendar
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB HFiles older than "
operator|+
name|expireDate
operator|.
name|toGMTString
argument_list|()
operator|+
literal|" will be deleted!"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
literal|null
decl_stmt|;
name|Path
name|mobTableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|columnDescriptor
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find the mob file "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|stats
condition|)
block|{
comment|// no file found
return|return;
block|}
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|filesToClean
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|deletedFileCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|stats
control|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|HFileLink
name|hfileLink
init|=
name|HFileLink
operator|.
name|buildFromHFileLinkPattern
argument_list|(
name|conf
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|hfileLink
operator|.
name|getOriginPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Date
name|fileDate
init|=
name|parseDate
argument_list|(
name|MobFileName
operator|.
name|getDateFromName
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking file {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileDate
operator|.
name|getTime
argument_list|()
operator|<
name|expireDate
operator|.
name|getTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} is an expired file"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|filesToClean
operator|.
name|add
argument_list|(
operator|new
name|HStoreFile
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot parse the fileName "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filesToClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|removeMobFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|mobTableDir
argument_list|,
name|columnDescriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|filesToClean
argument_list|)
expr_stmt|;
name|deletedFileCount
operator|=
name|filesToClean
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete the mob files "
operator|+
name|filesToClean
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} expired mob files are deleted"
argument_list|,
name|deletedFileCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the root dir of the mob files. It's {HBASE_DIR}/mobdir.    * @param conf The current configuration.    * @return the root dir of the mob file.    */
specifier|public
specifier|static
name|Path
name|getMobHome
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Path
name|hbaseDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getMobHome
argument_list|(
name|hbaseDir
argument_list|)
return|;
block|}
comment|/**    * Gets the root dir of the mob files under the qualified HBase root dir. It's {rootDir}/mobdir.    * @param rootDir The qualified path of HBase root directory.    * @return The root dir of the mob file.    */
specifier|public
specifier|static
name|Path
name|getMobHome
parameter_list|(
name|Path
name|rootDir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|MobConstants
operator|.
name|MOB_DIR_NAME
argument_list|)
return|;
block|}
comment|/**    * Gets the qualified root dir of the mob files.    * @param conf The current configuration.    * @return The qualified root dir.    */
specifier|public
specifier|static
name|Path
name|getQualifiedMobRootDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|hbaseDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|mobRootDir
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|MobConstants
operator|.
name|MOB_DIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mobRootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|mobRootDir
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the table dir of the mob files under the qualified HBase root dir. It's    * {rootDir}/mobdir/data/${namespace}/${tableName}    * @param rootDir The qualified path of HBase root directory.    * @param tableName The name of table.    * @return The table dir of the mob file.    */
specifier|public
specifier|static
name|Path
name|getMobTableDir
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|getMobHome
argument_list|(
name|rootDir
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Gets the region dir of the mob files. It's    * {HBASE_DIR}/mobdir/data/{namespace}/{tableName}/{regionEncodedName}.    * @param conf The current configuration.    * @param tableName The current table name.    * @return The region dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobRegionPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|getMobRegionPath
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Gets the region dir of the mob files under the specified root dir. It's    * {rootDir}/mobdir/data/{namespace}/{tableName}/{regionEncodedName}.    * @param rootDir The qualified path of HBase root directory.    * @param tableName The current table name.    * @return The region dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobRegionPath
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|Path
name|tablePath
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|getMobHome
argument_list|(
name|rootDir
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|tablePath
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the family dir of the mob files. It's    * {HBASE_DIR}/mobdir/{namespace}/{tableName}/{regionEncodedName}/{columnFamilyName}.    * @param conf The current configuration.    * @param tableName The current table name.    * @param familyName The current family name.    * @return The family dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobFamilyPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getMobRegionPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|familyName
argument_list|)
return|;
block|}
comment|/**    * Gets the family dir of the mob files. It's    * {HBASE_DIR}/mobdir/{namespace}/{tableName}/{regionEncodedName}/{columnFamilyName}.    * @param regionPath The path of mob region which is a dummy one.    * @param familyName The current family name.    * @return The family dir of the mob files.    */
specifier|public
specifier|static
name|Path
name|getMobFamilyPath
parameter_list|(
name|Path
name|regionPath
parameter_list|,
name|String
name|familyName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|regionPath
argument_list|,
name|familyName
argument_list|)
return|;
block|}
comment|/**    * Gets the RegionInfo of the mob files. This is a dummy region. The mob files are not saved in a    * region in HBase. This is only used in mob snapshot. It's internally used only.    * @param tableName    * @return A dummy mob region info.    */
specifier|public
specifier|static
name|RegionInfo
name|getMobRegionInfo
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|MobConstants
operator|.
name|MOB_REGION_NAME_BYTES
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Gets whether the current RegionInfo is a mob one.    * @param regionInfo The current RegionInfo.    * @return If true, the current RegionInfo is a mob one.    */
specifier|public
specifier|static
name|boolean
name|isMobRegionInfo
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|regionInfo
operator|==
literal|null
condition|?
literal|false
else|:
name|getMobRegionInfo
argument_list|(
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets whether the current region name follows the pattern of a mob region name.    * @param tableName The current table name.    * @param regionName The current region name.    * @return True if the current region name follows the pattern of a mob region name.    */
specifier|public
specifier|static
name|boolean
name|isMobRegionName
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Archives the mob files.    * @param conf The current configuration.    * @param fs The current file system.    * @param tableName The table name.    * @param tableDir The table directory.    * @param family The name of the column family.    * @param storeFiles The files to be deleted.    */
specifier|public
specifier|static
name|void
name|removeMobFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Path
name|tableDir
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|storeFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileArchiver
operator|.
name|archiveStoreFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|tableDir
argument_list|,
name|family
argument_list|,
name|storeFiles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a mob reference KeyValue. The value of the mob reference KeyValue is mobCellValueSize +    * mobFileName.    * @param cell The original Cell.    * @param fileName The mob file name where the mob reference KeyValue is written.    * @param tableNameTag The tag of the current table name. It's very important in cloning the    *          snapshot.    * @return The mob reference KeyValue.    */
specifier|public
specifier|static
name|Cell
name|createMobRefCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|fileName
parameter_list|,
name|Tag
name|tableNameTag
parameter_list|)
block|{
comment|// Append the tags to the KeyValue.
comment|// The key is same, the value is the filename of the mob file
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add the ref tag as the 1st one.
name|tags
operator|.
name|add
argument_list|(
name|MobConstants
operator|.
name|MOB_REF_TAG
argument_list|)
expr_stmt|;
comment|// Add the tag of the source table name, this table is where this mob file is flushed
comment|// from.
comment|// It's very useful in cloning the snapshot. When reading from the cloning table, we need to
comment|// find the original mob files by this table name. For details please see cloning
comment|// snapshot for mob files.
name|tags
operator|.
name|add
argument_list|(
name|tableNameTag
argument_list|)
expr_stmt|;
return|return
name|createMobRefCell
argument_list|(
name|cell
argument_list|,
name|fileName
argument_list|,
name|TagUtil
operator|.
name|fromList
argument_list|(
name|tags
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createMobRefCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|fileName
parameter_list|,
name|byte
index|[]
name|refCellTags
parameter_list|)
block|{
name|byte
index|[]
name|refValue
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
name|PrivateCellUtil
operator|.
name|createCell
argument_list|(
name|cell
argument_list|,
name|refValue
argument_list|,
name|TagUtil
operator|.
name|concatTags
argument_list|(
name|refCellTags
argument_list|,
name|cell
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a writer for the mob file in temp directory.    * @param conf The current configuration.    * @param fs The current file system.    * @param family The descriptor of the current column family.    * @param date The date string, its format is yyyymmmdd.    * @param basePath The basic path for a temp directory.    * @param maxKeyCount The key count.    * @param compression The compression algorithm.    * @param startKey The hex string of the start key.    * @param cacheConfig The current cache config.    * @param cryptoContext The encryption context.    * @param isCompaction If the writer is used in compaction.    * @return The writer for the mob file.    */
specifier|public
specifier|static
name|StoreFileWriter
name|createWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ColumnFamilyDescriptor
name|family
parameter_list|,
name|String
name|date
parameter_list|,
name|Path
name|basePath
parameter_list|,
name|long
name|maxKeyCount
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|String
name|startKey
parameter_list|,
name|CacheConfig
name|cacheConfig
parameter_list|,
name|Encryption
operator|.
name|Context
name|cryptoContext
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|String
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|date
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
return|return
name|createWriter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|family
argument_list|,
name|mobFileName
argument_list|,
name|basePath
argument_list|,
name|maxKeyCount
argument_list|,
name|compression
argument_list|,
name|cacheConfig
argument_list|,
name|cryptoContext
argument_list|,
name|isCompaction
argument_list|)
return|;
block|}
comment|/**    * Creates a writer for the mob file in temp directory.    * @param conf The current configuration.    * @param fs The current file system.    * @param family The descriptor of the current column family.    * @param mobFileName The mob file name.    * @param basePath The basic path for a temp directory.    * @param maxKeyCount The key count.    * @param compression The compression algorithm.    * @param cacheConfig The current cache config.    * @param cryptoContext The encryption context.    * @param isCompaction If the writer is used in compaction.    * @return The writer for the mob file.    */
specifier|public
specifier|static
name|StoreFileWriter
name|createWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ColumnFamilyDescriptor
name|family
parameter_list|,
name|MobFileName
name|mobFileName
parameter_list|,
name|Path
name|basePath
parameter_list|,
name|long
name|maxKeyCount
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|CacheConfig
name|cacheConfig
parameter_list|,
name|Encryption
operator|.
name|Context
name|cryptoContext
parameter_list|,
name|boolean
name|isCompaction
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createWriter
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|family
argument_list|,
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|,
name|maxKeyCount
argument_list|,
name|compression
argument_list|,
name|cacheConfig
argument_list|,
name|cryptoContext
argument_list|,
name|HStore
operator|.
name|getChecksumType
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HStore
operator|.
name|getBytesPerChecksum
argument_list|(
name|conf
argument_list|)
argument_list|,
name|family
operator|.
name|getBlocksize
argument_list|()
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
name|isCompaction
argument_list|)
return|;
block|}
comment|/**    * Creates a writer for the mob file in temp directory.    * @param conf The current configuration.    * @param fs The current file system.    * @param family The descriptor of the current column family.    * @param path The path for a temp directory.    * @param maxKeyCount The key count.    * @param compression The compression algorithm.    * @param cacheConfig The current cache config.    * @param cryptoContext The encryption context.    * @param checksumType The checksum type.    * @param bytesPerChecksum The bytes per checksum.    * @param blocksize The HFile block size.    * @param bloomType The bloom filter type.    * @param isCompaction If the writer is used in compaction.    * @return The writer for the mob file.    */
specifier|public
specifier|static
name|StoreFileWriter
name|createWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ColumnFamilyDescriptor
name|family
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|maxKeyCount
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|CacheConfig
name|cacheConfig
parameter_list|,
name|Encryption
operator|.
name|Context
name|cryptoContext
parameter_list|,
name|ChecksumType
name|checksumType
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|,
name|int
name|blocksize
parameter_list|,
name|BloomType
name|bloomType
parameter_list|,
name|boolean
name|isCompaction
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|compression
operator|==
literal|null
condition|)
block|{
name|compression
operator|=
name|HFile
operator|.
name|DEFAULT_COMPRESSION_ALGORITHM
expr_stmt|;
block|}
specifier|final
name|CacheConfig
name|writerCacheConf
decl_stmt|;
if|if
condition|(
name|isCompaction
condition|)
block|{
name|writerCacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|cacheConfig
argument_list|)
expr_stmt|;
name|writerCacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writerCacheConf
operator|=
name|cacheConfig
expr_stmt|;
block|}
name|HFileContext
name|hFileContext
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withIncludesMvcc
argument_list|(
literal|true
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
literal|true
argument_list|)
operator|.
name|withCompressTags
argument_list|(
name|family
operator|.
name|isCompressTags
argument_list|()
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|checksumType
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|bytesPerChecksum
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|blocksize
argument_list|)
operator|.
name|withHBaseCheckSum
argument_list|(
literal|true
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|family
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|withEncryptionContext
argument_list|(
name|cryptoContext
argument_list|)
operator|.
name|withCreateTime
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|w
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|writerCacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|path
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|maxKeyCount
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|w
return|;
block|}
comment|/**    * Indicates whether the current mob ref cell has a valid value. A mob ref cell has a mob    * reference tag. The value of a mob ref cell consists of two parts, real mob value length and mob    * file name. The real mob value length takes 4 bytes. The remaining part is the mob file name.    * @param cell The mob ref cell.    * @return True if the cell has a valid value.    */
specifier|public
specifier|static
name|boolean
name|hasValidMobRefCellValue
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getValueLength
argument_list|()
operator|>
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
comment|/**    * Gets the mob value length from the mob ref cell. A mob ref cell has a mob reference tag. The    * value of a mob ref cell consists of two parts, real mob value length and mob file name. The    * real mob value length takes 4 bytes. The remaining part is the mob file name.    * @param cell The mob ref cell.    * @return The real mob value length.    */
specifier|public
specifier|static
name|int
name|getMobValueLength
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|PrivateCellUtil
operator|.
name|getValueAsInt
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * Gets the mob file name from the mob ref cell. A mob ref cell has a mob reference tag. The value    * of a mob ref cell consists of two parts, real mob value length and mob file name. The real mob    * value length takes 4 bytes. The remaining part is the mob file name.    * @param cell The mob ref cell.    * @return The mob file name.    */
specifier|public
specifier|static
name|String
name|getMobFileName
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
return|;
block|}
comment|/**    * Checks whether this table has mob-enabled columns.    * @param htd The current table descriptor.    * @return Whether this table has mob-enabled columns.    */
specifier|public
specifier|static
name|boolean
name|hasMobColumns
parameter_list|(
name|TableDescriptor
name|htd
parameter_list|)
block|{
name|ColumnFamilyDescriptor
index|[]
name|hcds
init|=
name|htd
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get list of Mob column families (if any exists)    * @param htd table descriptor    * @return list of Mob column families    */
specifier|public
specifier|static
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|getMobColumnFamilies
parameter_list|(
name|TableDescriptor
name|htd
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|fams
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
index|[]
name|hcds
init|=
name|htd
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|hcds
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|isMobEnabled
argument_list|()
condition|)
block|{
name|fams
operator|.
name|add
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fams
return|;
block|}
comment|/**    * Indicates whether return null value when the mob file is missing or corrupt. The information is    * set in the attribute "empty.value.on.mobcell.miss" of scan.    * @param scan The current scan.    * @return True if the readEmptyValueOnMobCellMiss is enabled.    */
specifier|public
specifier|static
name|boolean
name|isReadEmptyValueOnMobCellMiss
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|byte
index|[]
name|readEmptyValueOnMobCellMiss
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|MobConstants
operator|.
name|EMPTY_VALUE_ON_MOBCELL_MISS
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|readEmptyValueOnMobCellMiss
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|readEmptyValueOnMobCellMiss
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Checks if the mob file is expired.    * @param column The descriptor of the current column family.    * @param current The current time.    * @param fileDate The date string parsed from the mob file name.    * @return True if the mob file is expired.    */
specifier|public
specifier|static
name|boolean
name|isMobFileExpired
parameter_list|(
name|ColumnFamilyDescriptor
name|column
parameter_list|,
name|long
name|current
parameter_list|,
name|String
name|fileDate
parameter_list|)
block|{
if|if
condition|(
name|column
operator|.
name|getMinVersions
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|timeToLive
init|=
name|column
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|MAX_VALUE
operator|==
name|timeToLive
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Date
name|expireDate
init|=
operator|new
name|Date
argument_list|(
name|current
operator|-
name|timeToLive
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|expireDate
operator|=
operator|new
name|Date
argument_list|(
name|expireDate
operator|.
name|getYear
argument_list|()
argument_list|,
name|expireDate
operator|.
name|getMonth
argument_list|()
argument_list|,
name|expireDate
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Date
name|date
init|=
name|parseDate
argument_list|(
name|fileDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|getTime
argument_list|()
operator|<
name|expireDate
operator|.
name|getTime
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse the date "
operator|+
name|fileDate
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get list of referenced MOB files from a given collection of store files    * @param storeFiles store files    * @param mobDir MOB file directory    * @return list of MOB file paths    */
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|getReferencedMobFiles
parameter_list|(
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|storeFiles
parameter_list|,
name|Path
name|mobDir
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|mobSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|storeFiles
control|)
block|{
name|byte
index|[]
name|value
init|=
name|sf
operator|.
name|getMetadataValue
argument_list|(
name|HStoreFile
operator|.
name|MOB_FILE_REFS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
name|s
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
index|[]
name|all
init|=
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|mobSet
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|mobSet
control|)
block|{
name|retList
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|mobDir
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retList
return|;
block|}
block|}
end_class

end_unit

