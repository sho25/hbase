begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SnapshotSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|OperationAttemptTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|TakeSnapshotUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|error
operator|.
name|SnapshotExceptionSnare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|task
operator|.
name|CopyRecoveredEditsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|task
operator|.
name|ReferenceRegionHFilesTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|task
operator|.
name|TableInfoCopyTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Take a snapshot of a disabled table.  *<p>  * Table must exist when taking the snapshot, or results are undefined.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|DisabledTableSnapshotHandler
extends|extends
name|EventHandler
implements|implements
name|SnapshotSentinel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DisabledTableSnapshotHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
specifier|final
name|SnapshotDescription
name|snapshot
decl_stmt|;
specifier|private
specifier|final
name|Path
name|workingDir
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|OperationAttemptTimer
name|timer
decl_stmt|;
specifier|private
specifier|final
name|SnapshotExceptionSnare
name|monitor
decl_stmt|;
specifier|private
specifier|final
name|MasterSnapshotVerifier
name|verify
decl_stmt|;
comment|/**    * @param snapshot descriptor of the snapshot to take    * @param server parent server    * @param masterServices master services provider    * @throws IOException on unexpected error    */
specifier|public
name|DisabledTableSnapshotHandler
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|Server
name|server
parameter_list|,
specifier|final
name|MasterServices
name|masterServices
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
argument_list|,
name|EventType
operator|.
name|C_M_SNAPSHOT_TABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|snapshot
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
operator|new
name|SnapshotExceptionSnare
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|this
operator|.
name|masterServices
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
comment|// prepare the verify
name|this
operator|.
name|verify
operator|=
operator|new
name|MasterSnapshotVerifier
argument_list|(
name|masterServices
argument_list|,
name|snapshot
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
comment|// setup the timer
name|timer
operator|=
name|TakeSnapshotUtils
operator|.
name|getMasterTimerAndBindToMonitor
argument_list|(
name|snapshot
argument_list|,
name|conf
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
block|}
comment|// TODO consider parallelizing these operations since they are independent. Right now its just
comment|// easier to keep them serial though
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running table snapshot operation "
operator|+
name|eventType
operator|+
literal|" on table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// write down the snapshot info in the working directory
name|SnapshotDescriptionUtils
operator|.
name|writeSnapshotInfo
argument_list|(
name|snapshot
argument_list|,
name|workingDir
argument_list|,
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
comment|// 1. get all the regions hosting this table.
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regionsAndLocations
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|regionsAndLocations
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|regionsAndLocations
operator|=
name|MetaReader
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|this
operator|.
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// check to see if we failed, in which case return
if|if
condition|(
name|this
operator|.
name|monitor
operator|.
name|checkForError
argument_list|()
condition|)
return|return;
comment|// otherwise, just reset the interrupt and keep on going
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|// extract each pair to separate lists
name|Set
argument_list|<
name|String
argument_list|>
name|serverNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
range|:
name|regionsAndLocations
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|serverNames
operator|.
name|add
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 2. for each region, write all the info to disk
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting to write region info and WALs for regions for offline snapshot:"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
comment|// 2.1 copy the regionInfo files to the snapshot
name|Path
name|snapshotRegionDir
init|=
name|TakeSnapshotUtils
operator|.
name|getRegionSnapshotDirectory
argument_list|(
name|snapshot
argument_list|,
name|rootDir
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|writeRegioninfoOnFilesystem
argument_list|(
name|regionInfo
argument_list|,
name|snapshotRegionDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// check for error for each region
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
comment|// 2.2 for each region, copy over its recovered.edits directory
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
operator|new
name|CopyRecoveredEditsTask
argument_list|(
name|snapshot
argument_list|,
name|monitor
argument_list|,
name|fs
argument_list|,
name|regionDir
argument_list|,
name|snapshotRegionDir
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
comment|// 2.3 reference all the files in the region
operator|new
name|ReferenceRegionHFilesTask
argument_list|(
name|snapshot
argument_list|,
name|monitor
argument_list|,
name|regionDir
argument_list|,
name|fs
argument_list|,
name|snapshotRegionDir
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
comment|// 3. write the table info to disk
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting to copy tableinfo for offline snapshot:\n"
operator|+
name|snapshot
argument_list|)
expr_stmt|;
name|TableInfoCopyTask
name|tableInfo
init|=
operator|new
name|TableInfoCopyTask
argument_list|(
name|this
operator|.
name|monitor
argument_list|,
name|snapshot
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|tableInfo
operator|.
name|run
argument_list|()
expr_stmt|;
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
comment|// 4. verify the snapshot is valid
name|verify
operator|.
name|verifySnapshot
argument_list|(
name|this
operator|.
name|workingDir
argument_list|,
name|serverNames
argument_list|)
expr_stmt|;
comment|// 5. complete the snapshot
name|SnapshotDescriptionUtils
operator|.
name|completeSnapshot
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|this
operator|.
name|rootDir
argument_list|,
name|this
operator|.
name|workingDir
argument_list|,
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// make sure we capture the exception to propagate back to the client later
name|monitor
operator|.
name|snapshotFailure
argument_list|(
literal|"Failed due to exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|snapshot
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Marking snapshot"
operator|+
name|this
operator|.
name|snapshot
operator|+
literal|" as finished."
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
comment|// 6. mark the timer as finished - even if we got an exception, we don't need to time the
comment|// operation any further
name|timer
operator|.
name|complete
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Launching cleanup of working dir:"
operator|+
name|workingDir
argument_list|)
expr_stmt|;
try|try
block|{
comment|// don't mark the snapshot as a failure if we can't cleanup - the snapshot worked.
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|workingDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete snapshot working directory:"
operator|+
name|workingDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete snapshot working directory:"
operator|+
name|workingDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|SnapshotDescription
name|getSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
return|return;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping disabled snapshot because: "
operator|+
name|why
argument_list|)
expr_stmt|;
comment|// pass along the stop as a failure. This keeps all the 'should I stop running?' logic in a
comment|// single place, though it is technically a little bit of an overload of how the error handler
comment|// should be used.
name|this
operator|.
name|monitor
operator|.
name|snapshotFailure
argument_list|(
literal|"Failing snapshot because server is stopping."
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|HBaseSnapshotException
name|getExceptionIfFailed
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseSnapshotException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

