begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|snapshot
operator|.
name|error
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
operator|.
name|ExceptionSnare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|UnexpectedSnapshotException
import|;
end_import

begin_comment
comment|/**  * {@link ExceptionSnare} for snapshot exceptions, ensuring that only the first exception is  * retained and always returned via {@link #failOnError()}.  *<p>  * Ensures that any generic exceptions received via  * {@link #receiveError(String, HBaseSnapshotException, Object...)} are in fact propagated as  * {@link HBaseSnapshotException}.  */
end_comment

begin_class
specifier|public
class|class
name|SnapshotExceptionSnare
extends|extends
name|ExceptionSnare
argument_list|<
name|HBaseSnapshotException
argument_list|>
implements|implements
name|SnapshotFailureListener
block|{
specifier|private
name|SnapshotDescription
name|snapshot
decl_stmt|;
comment|/**    * Create a snare that expects errors for the passed snapshot. Any untyped exceptions passed to    * {@link #receiveError(String, HBaseSnapshotException, Object...)} are wrapped as an    * {@link UnexpectedSnapshotException} with the passed {@link SnapshotDescription}.    * @param snapshot    */
specifier|public
name|SnapshotExceptionSnare
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshotFailure
parameter_list|(
name|String
name|reason
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|receiveError
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshotFailure
parameter_list|(
name|String
name|reason
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|,
name|Exception
name|t
parameter_list|)
block|{
name|this
operator|.
name|receiveError
argument_list|(
name|reason
argument_list|,
name|t
operator|instanceof
name|HBaseSnapshotException
condition|?
operator|(
name|HBaseSnapshotException
operator|)
name|t
else|:
operator|new
name|UnexpectedSnapshotException
argument_list|(
name|reason
argument_list|,
name|t
argument_list|,
name|snapshot
argument_list|)
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failOnError
parameter_list|()
throws|throws
name|HBaseSnapshotException
block|{
try|try
block|{
name|super
operator|.
name|failOnError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|HBaseSnapshotException
condition|)
block|{
throw|throw
operator|(
name|HBaseSnapshotException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|UnexpectedSnapshotException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|snapshot
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

