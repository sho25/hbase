begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_comment
comment|/**  * A table split corresponds to a key range (low, high) and an optional scanner.  * All references to row below refer to the key of the row.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|TableSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
implements|,
name|Comparable
argument_list|<
name|TableSplit
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableSplit
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// should be< 0 (@see #readFields(DataInput))
comment|// version 1 supports Scan data member
enum|enum
name|Version
block|{
name|UNVERSIONED
argument_list|(
literal|0
argument_list|)
block|,
comment|// Initial number we put on TableSplit when we introduced versioning.
name|INITIAL
argument_list|(
operator|-
literal|1
argument_list|)
block|;
specifier|final
name|int
name|code
decl_stmt|;
specifier|static
specifier|final
name|Version
index|[]
name|byCode
decl_stmt|;
static|static
block|{
name|byCode
operator|=
name|Version
operator|.
name|values
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byCode
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|byCode
index|[
name|i
index|]
operator|.
name|code
operator|!=
operator|-
literal|1
operator|*
name|i
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Values in this enum should be descending by one"
argument_list|)
throw|;
block|}
block|}
block|}
name|Version
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
name|boolean
name|atLeast
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
return|return
name|code
operator|<=
name|other
operator|.
name|code
return|;
block|}
specifier|static
name|Version
name|fromCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|byCode
index|[
name|code
operator|*
operator|-
literal|1
index|]
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Version
name|VERSION
init|=
name|Version
operator|.
name|INITIAL
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|private
name|byte
index|[]
name|endRow
decl_stmt|;
specifier|private
name|String
name|regionLocation
decl_stmt|;
specifier|private
name|String
name|scan
init|=
literal|""
decl_stmt|;
comment|// stores the serialized form of the Scan
specifier|private
name|long
name|length
decl_stmt|;
comment|// Contains estimation of region size in bytes
comment|/** Default constructor. */
specifier|public
name|TableSplit
parameter_list|()
block|{
name|this
argument_list|(
operator|(
name|TableName
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated Since 0.96.0; use {@link TableSplit#TableSplit(TableName, byte[], byte[], String)}    */
annotation|@
name|Deprecated
specifier|public
name|TableSplit
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|scan
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new instance while assigning all variables.    * Length of region is set to 0    *    * @param tableName  The name of the current table.    * @param scan The scan associated with this split.    * @param startRow  The start row of the split.    * @param endRow  The end row of the split.    * @param location  The location of the region.    */
specifier|public
name|TableSplit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|location
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new instance while assigning all variables.    *    * @param tableName  The name of the current table.    * @param scan The scan associated with this split.    * @param startRow  The start row of the split.    * @param endRow  The end row of the split.    * @param location  The location of the region.    */
specifier|public
name|TableSplit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
try|try
block|{
name|this
operator|.
name|scan
operator|=
operator|(
literal|null
operator|==
name|scan
operator|)
condition|?
literal|""
else|:
name|TableMapReduceUtil
operator|.
name|convertScanToString
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to convert Scan to String"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
name|this
operator|.
name|regionLocation
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/**    * @deprecated Since 0.96.0; use {@link TableSplit#TableSplit(TableName, byte[], byte[], String)}    */
annotation|@
name|Deprecated
specifier|public
name|TableSplit
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new instance without a scanner.    *    * @param tableName The name of the current table.    * @param startRow The start row of the split.    * @param endRow The end row of the split.    * @param location The location of the region.    */
specifier|public
name|TableSplit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new instance without a scanner.    *    * @param tableName The name of the current table.    * @param startRow The start row of the split.    * @param endRow The end row of the split.    * @param location The location of the region.    * @param length Size of region in bytes    */
specifier|public
name|TableSplit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|,
name|location
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a Scan object from the stored string representation.    *    * @return Returns a Scan object based on the stored scanner.    * @throws IOException    */
specifier|public
name|Scan
name|getScan
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|TableMapReduceUtil
operator|.
name|convertStringToScan
argument_list|(
name|this
operator|.
name|scan
argument_list|)
return|;
block|}
comment|/**    * Returns the table name converted to a byte array.    * @see #getTable()    * @return The table name.    */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Returns the table name.    *    * @return The table name.    */
specifier|public
name|TableName
name|getTable
parameter_list|()
block|{
comment|// It is ugly that usually to get a TableName, the method is called getTableName.  We can't do
comment|// that in here though because there was an existing getTableName in place already since
comment|// deprecated.
return|return
name|tableName
return|;
block|}
comment|/**    * Returns the start row.    *    * @return The start row.    */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**    * Returns the end row.    *    * @return The end row.    */
specifier|public
name|byte
index|[]
name|getEndRow
parameter_list|()
block|{
return|return
name|endRow
return|;
block|}
comment|/**    * Returns the region location.    *    * @return The region's location.    */
specifier|public
name|String
name|getRegionLocation
parameter_list|()
block|{
return|return
name|regionLocation
return|;
block|}
comment|/**    * Returns the region's location as an array.    *    * @return The array containing the region location.    * @see org.apache.hadoop.mapreduce.InputSplit#getLocations()    */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|regionLocation
block|}
return|;
block|}
comment|/**    * Returns the length of the split.    *    * @return The length of the split.    * @see org.apache.hadoop.mapreduce.InputSplit#getLength()    */
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * Reads the values of each field.    *    * @param in  The input to read from.    * @throws IOException When reading the input fails.    */
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Version
name|version
init|=
name|Version
operator|.
name|UNVERSIONED
decl_stmt|;
comment|// TableSplit was not versioned in the beginning.
comment|// In order to introduce it now, we make use of the fact
comment|// that tableName was written with Bytes.writeByteArray,
comment|// which encodes the array length as a vint which is>= 0.
comment|// Hence if the vint is>= 0 we have an old version and the vint
comment|// encodes the length of tableName.
comment|// If< 0 we just read the version and the next vint is the length.
comment|// @see Bytes#readByteArray(DataInput)
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
comment|// what we just read was the version
name|version
operator|=
name|Version
operator|.
name|fromCode
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|tableNameBytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|tableNameBytes
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameBytes
argument_list|)
expr_stmt|;
name|startRow
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|endRow
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|regionLocation
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|atLeast
argument_list|(
name|Version
operator|.
name|INITIAL
argument_list|)
condition|)
block|{
name|scan
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|length
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes the field values to the output.    *    * @param out  The output to write to.    * @throws IOException When writing the values to the output fails.    */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|VERSION
operator|.
name|code
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionLocation
argument_list|)
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the details about this instance as a string.    *    * @return The values of this instance as a string.    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"HBase table split("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"table name: "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", scan: "
argument_list|)
operator|.
name|append
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", start row: "
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", end row: "
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|endRow
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", region location: "
argument_list|)
operator|.
name|append
argument_list|(
name|regionLocation
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Compares this split against the given one.    *    * @param split  The split to compare to.    * @return The result of the comparison.    * @see java.lang.Comparable#compareTo(java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableSplit
name|split
parameter_list|)
block|{
comment|// If The table name of the two splits is the same then compare start row
comment|// otherwise compare based on table names
name|int
name|tableNameComparison
init|=
name|getTable
argument_list|()
operator|.
name|compareTo
argument_list|(
name|split
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tableNameComparison
operator|!=
literal|0
condition|?
name|tableNameComparison
else|:
name|Bytes
operator|.
name|compareTo
argument_list|(
name|getStartRow
argument_list|()
argument_list|,
name|split
operator|.
name|getStartRow
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TableSplit
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|tableName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TableSplit
operator|)
name|o
operator|)
operator|.
name|tableName
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
operator|(
operator|(
name|TableSplit
operator|)
name|o
operator|)
operator|.
name|startRow
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|endRow
argument_list|,
operator|(
operator|(
name|TableSplit
operator|)
name|o
operator|)
operator|.
name|endRow
argument_list|)
operator|&&
name|regionLocation
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TableSplit
operator|)
name|o
operator|)
operator|.
name|regionLocation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|tableName
operator|!=
literal|null
condition|?
name|tableName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|scan
operator|!=
literal|null
condition|?
name|scan
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|startRow
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|startRow
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|endRow
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|endRow
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|regionLocation
operator|!=
literal|null
condition|?
name|regionLocation
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

