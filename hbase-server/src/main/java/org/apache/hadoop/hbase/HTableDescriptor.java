begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|BytesBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ColumnFamilySchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * HTableDescriptor contains the details about an HBase table  such as the descriptors of  * all the column families, is the table a catalog table,<code> -ROOT-</code> or   *<code> .META.</code>, is the table is read only, the maximum size of the memstore,   * when the region split should occur, coprocessors associated with it etc...  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HTableDescriptor
implements|implements
name|WritableComparable
argument_list|<
name|HTableDescriptor
argument_list|>
block|{
comment|/**    *  Changes prior to version 3 were not recorded here.    *  Version 3 adds metadata as a map where keys and values are byte[].    *  Version 4 adds indexes    *  Version 5 removed transactional pollution -- e.g. indexes    *  Version 6 changed metadata to BytesBytesPair in PB    *  Version 7 adds table-level configuration    */
specifier|private
specifier|static
specifier|final
name|byte
name|TABLE_DESCRIPTOR_VERSION
init|=
literal|7
decl_stmt|;
specifier|private
name|byte
index|[]
name|name
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
name|String
name|nameAsString
init|=
literal|""
decl_stmt|;
comment|/**    * A map which holds the metadata information of the table. This metadata     * includes values like IS_ROOT, IS_META, DEFERRED_LOG_FLUSH, SPLIT_POLICY,    * MAX_FILE_SIZE, READONLY, MEMSTORE_FLUSHSIZE etc...    */
specifier|private
specifier|final
name|Map
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * A map which holds the configuration specific to the table.    * The keys of the map have the same names as config keys and override the defaults with    * table-specific settings. Example usage may be for compactions, etc.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configuration
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SPLIT_POLICY
init|=
literal|"SPLIT_POLICY"
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by HBase Shell interface to access this metadata     * attribute which denotes the maximum size of the store file after which     * a region split occurs    *     * @see #getMaxFileSize()    */
specifier|public
specifier|static
specifier|final
name|String
name|MAX_FILESIZE
init|=
literal|"MAX_FILESIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|MAX_FILESIZE_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MAX_FILESIZE
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"OWNER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ImmutableBytesWritable
name|OWNER_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|OWNER
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by rest interface to access this metadata     * attribute which denotes if the table is Read Only    *     * @see #isReadOnly()    */
specifier|public
specifier|static
specifier|final
name|String
name|READONLY
init|=
literal|"READONLY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|READONLY_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|READONLY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by HBase Shell interface to access this metadata     * attribute which represents the maximum size of the memstore after which     * its contents are flushed onto the disk    *     * @see #getMemStoreFlushSize()    */
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_FLUSHSIZE
init|=
literal|"MEMSTORE_FLUSHSIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|MEMSTORE_FLUSHSIZE_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MEMSTORE_FLUSHSIZE
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by rest interface to access this metadata     * attribute which denotes if the table is a -ROOT- region or not    *     * @see #isRootRegion()    */
specifier|public
specifier|static
specifier|final
name|String
name|IS_ROOT
init|=
literal|"IS_ROOT"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|IS_ROOT_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|IS_ROOT
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by rest interface to access this metadata     * attribute which denotes if it is a catalog table, either    *<code> .META.</code> or<code> -ROOT-</code>    *     * @see #isMetaRegion()    */
specifier|public
specifier|static
specifier|final
name|String
name|IS_META
init|=
literal|"IS_META"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|IS_META_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|IS_META
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    *<em>INTERNAL</em> Used by HBase Shell interface to access this metadata     * attribute which denotes if the deferred log flush option is enabled    */
specifier|public
specifier|static
specifier|final
name|String
name|DEFERRED_LOG_FLUSH
init|=
literal|"DEFERRED_LOG_FLUSH"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|DEFERRED_LOG_FLUSH_KEY
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFERRED_LOG_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
comment|/*    *  The below are ugly but better than creating them each time till we    *  replace booleans being saved as Strings with plain booleans.  Need a    *  migration script to do this.  TODO.    */
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|FALSE
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableBytesWritable
name|TRUE
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_DEFERRED_LOG_FLUSH
init|=
literal|false
decl_stmt|;
comment|/**    * Constant that denotes whether the table is READONLY by default and is false    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_READONLY
init|=
literal|false
decl_stmt|;
comment|/**    * Constant that denotes the maximum default size of the memstore after which     * the contents are flushed to the store files    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MEMSTORE_FLUSH_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|128L
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DEFAULT_VALUES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|RESERVED_KEYWORDS
init|=
operator|new
name|HashSet
argument_list|<
name|ImmutableBytesWritable
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|MAX_FILESIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|READONLY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_READONLY
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|MEMSTORE_FLUSHSIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_MEMSTORE_FLUSH_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|DEFERRED_LOG_FLUSH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_DEFERRED_LOG_FLUSH
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|DEFAULT_VALUES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|RESERVED_KEYWORDS
operator|.
name|add
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RESERVED_KEYWORDS
operator|.
name|add
argument_list|(
name|IS_ROOT_KEY
argument_list|)
expr_stmt|;
name|RESERVED_KEYWORDS
operator|.
name|add
argument_list|(
name|IS_META_KEY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cache of whether this is a meta table or not.    */
specifier|private
specifier|volatile
name|Boolean
name|meta
init|=
literal|null
decl_stmt|;
comment|/**    * Cache of whether this is root table or not.    */
specifier|private
specifier|volatile
name|Boolean
name|root
init|=
literal|null
decl_stmt|;
comment|/**    * Cache of whether deferred logging set.    */
specifier|private
name|Boolean
name|deferredLog
init|=
literal|null
decl_stmt|;
comment|/**    * Maps column family name to the respective HColumnDescriptors    */
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HColumnDescriptor
argument_list|>
name|families
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HColumnDescriptor
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|/**    *<em> INTERNAL</em> Private constructor used internally creating table descriptors for    * catalog tables,<code>.META.</code> and<code>-ROOT-</code>.    */
specifier|protected
name|HTableDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|,
name|HColumnDescriptor
index|[]
name|families
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|setMetaFlags
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|descriptor
range|:
name|families
control|)
block|{
name|this
operator|.
name|families
operator|.
name|put
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<em> INTERNAL</em>Private constructor used internally creating table descriptors for    * catalog tables,<code>.META.</code> and<code>-ROOT-</code>.    */
specifier|protected
name|HTableDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|,
name|HColumnDescriptor
index|[]
name|families
parameter_list|,
name|Map
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|setMetaFlags
argument_list|(
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|descriptor
range|:
name|families
control|)
block|{
name|this
operator|.
name|families
operator|.
name|put
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Default constructor which constructs an empty object.    * For deserializing an HTableDescriptor instance only.    * @see #HTableDescriptor(byte[])    * @deprecated Used by Writables and Writables are going away.    */
annotation|@
name|Deprecated
specifier|public
name|HTableDescriptor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a table descriptor specifying table name.    * @param name Table name.    * @throws IllegalArgumentException if passed a table name    * that is made of other than 'word' characters, underscore or period: i.e.    *<code>[a-zA-Z_0-9.].    * @see<a href="HADOOP-1581">HADOOP-1581 HBASE: Un-openable tablename bug</a>    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table descriptor specifying a byte array table name    * @param name - Table name as a byte array.    * @throws IllegalArgumentException if passed a table name    * that is made of other than 'word' characters, underscore or period: i.e.    *<code>[a-zA-Z_0-9-.].    * @see<a href="HADOOP-1581">HADOOP-1581 HBASE: Un-openable tablename bug</a>    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setMetaFlags
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|this
operator|.
name|isMetaRegion
argument_list|()
condition|?
name|name
else|:
name|isLegalTableName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table descriptor by cloning the descriptor passed as a parameter.    *<p>    * Makes a deep copy of the supplied descriptor.    * Can make a modifiable descriptor from an UnmodifyableHTableDescriptor.    * @param desc The descriptor.    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|HTableDescriptor
name|desc
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|desc
operator|.
name|name
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|setMetaFlags
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|families
operator|.
name|values
argument_list|()
control|)
block|{
name|this
operator|.
name|families
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|desc
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setValue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|desc
operator|.
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|configuration
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Set meta flags on this table.     * IS_ROOT_KEY is set if its a -ROOT- table    * IS_META_KEY is set either if its a -ROOT- or a .META. table     * Called by constructors.    * @param name    */
specifier|private
name|void
name|setMetaFlags
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|)
block|{
name|setRootRegion
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|setMetaRegion
argument_list|(
name|isRootRegion
argument_list|()
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the descriptor represents a<code> -ROOT-</code> region.    *     * @return true if this is a<code> -ROOT-</code> region     */
specifier|public
name|boolean
name|isRootRegion
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|root
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|root
operator|=
name|isSomething
argument_list|(
name|IS_ROOT_KEY
argument_list|,
literal|false
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
return|return
name|this
operator|.
name|root
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**    *<em> INTERNAL</em> Used to denote if the current table represents     *<code> -ROOT-</code> region. This is used internally by the     * HTableDescriptor constructors     *     * @param isRoot true if this is the<code> -ROOT-</code> region     */
specifier|protected
name|void
name|setRootRegion
parameter_list|(
name|boolean
name|isRoot
parameter_list|)
block|{
comment|// TODO: Make the value a boolean rather than String of boolean.
name|setValue
argument_list|(
name|IS_ROOT_KEY
argument_list|,
name|isRoot
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if this table is either<code> -ROOT-</code> or<code> .META.</code>    * region.     *      * @return true if this is either a<code> -ROOT-</code> or<code> .META.</code>     * region     */
specifier|public
name|boolean
name|isMetaRegion
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|meta
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|meta
operator|=
name|calculateIsMetaRegion
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|meta
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|Boolean
name|calculateIsMetaRegion
parameter_list|()
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|IS_META_KEY
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|private
name|boolean
name|isSomething
parameter_list|(
specifier|final
name|ImmutableBytesWritable
name|key
parameter_list|,
specifier|final
name|boolean
name|valueIfNull
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Make value be a boolean rather than String of boolean.
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
return|return
name|valueIfNull
return|;
block|}
comment|/**    *<em> INTERNAL</em> Used to denote if the current table represents     *<code> -ROOT-</code> or<code> .META.</code> region. This is used     * internally by the HTableDescriptor constructors     *     * @param isMeta true if its either<code> -ROOT-</code> or     *<code> .META.</code> region     */
specifier|protected
name|void
name|setMetaRegion
parameter_list|(
name|boolean
name|isMeta
parameter_list|)
block|{
name|setValue
argument_list|(
name|IS_META_KEY
argument_list|,
name|isMeta
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|/**     * Checks if the table is a<code>.META.</code> table     *      * @return true if table is<code> .META.</code> region.    */
specifier|public
name|boolean
name|isMetaTable
parameter_list|()
block|{
return|return
name|isMetaRegion
argument_list|()
operator|&&
operator|!
name|isRootRegion
argument_list|()
return|;
block|}
comment|/**    * Checks of the tableName being passed represents either     *<code> -ROOT-</code> or<code> .META.</code>    *      * @return true if a tablesName is either<code> -ROOT-</code>     * or<code> .META.</code>    */
specifier|public
specifier|static
name|boolean
name|isMetaTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
return|;
block|}
comment|/**    * Check passed byte buffer, "tableName", is legal user-space table name.    * @return Returns passed<code>tableName</code> param    * @throws NullPointerException If passed<code>tableName</code> is null    * @throws IllegalArgumentException if passed a tableName    * that is made of other than 'word' characters or underscores: i.e.    *<code>[a-zA-Z_0-9].    */
specifier|public
specifier|static
name|byte
index|[]
name|isLegalTableName
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
index|[
literal|0
index|]
operator|==
literal|'.'
operator|||
name|tableName
index|[
literal|0
index|]
operator|==
literal|'-'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal first character<"
operator|+
name|tableName
index|[
literal|0
index|]
operator|+
literal|"> at 0. User-space table names can only start with 'word "
operator|+
literal|"characters': i.e. [a-zA-Z_0-9]: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|HConstants
operator|.
name|CLUSTER_ID_FILE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|||
name|HConstants
operator|.
name|SPLIT_LOGDIR_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|||
name|HConstants
operator|.
name|VERSION_FILE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" conflicted with system reserved words"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|tableName
index|[
name|i
index|]
argument_list|)
operator|||
name|tableName
index|[
name|i
index|]
operator|==
literal|'_'
operator|||
name|tableName
index|[
name|i
index|]
operator|==
literal|'-'
operator|||
name|tableName
index|[
name|i
index|]
operator|==
literal|'.'
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal character<"
operator|+
name|tableName
index|[
name|i
index|]
operator|+
literal|"> at "
operator|+
name|i
operator|+
literal|". User-space table names can only contain "
operator|+
literal|"'word characters': i.e. [a-zA-Z_0-9-.]: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|tableName
return|;
block|}
comment|/**    * Getter for accessing the metadata associated with the key    *      * @param key The key.    * @return The value.    * @see #values    */
specifier|public
name|byte
index|[]
name|getValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getValue
parameter_list|(
specifier|final
name|ImmutableBytesWritable
name|key
parameter_list|)
block|{
name|ImmutableBytesWritable
name|ibw
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ibw
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|ibw
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Getter for accessing the metadata associated with the key    *      * @param key The key.    * @return The value.    * @see #values    */
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Getter for fetching an unmodifiable {@link #values} map.    *      * @return unmodifiable map {@link #values}.    * @see #values    */
specifier|public
name|Map
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|getValues
parameter_list|()
block|{
comment|// shallow pointer copy
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|values
argument_list|)
return|;
block|}
comment|/**    * Setter for storing metadata as a (key, value) pair in {@link #values} map    *      * @param key The key.    * @param value The value.    * @see #values    */
specifier|public
name|void
name|setValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param key The key.    * @param value The value.    */
specifier|private
name|void
name|setValue
parameter_list|(
specifier|final
name|ImmutableBytesWritable
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|key
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param key The key.    * @param value The value.    */
specifier|private
name|void
name|setValue
parameter_list|(
specifier|final
name|ImmutableBytesWritable
name|key
parameter_list|,
specifier|final
name|ImmutableBytesWritable
name|value
parameter_list|)
block|{
name|values
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setter for storing metadata as a (key, value) pair in {@link #values} map    *      * @param key The key.    * @param value The value.    * @see #values    */
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove metadata represented by the key from the {@link #values} map    *     * @param key Key whose key and value we're to remove from HTableDescriptor    * parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|remove
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove metadata represented by the key from the {@link #values} map    *    * @param key Key whose key and value we're to remove from HTableDescriptor    * parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|)
block|{
name|values
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the readOnly flag of the table is set. If the readOnly flag is     * set then the contents of the table can only be read from but not modified.    *     * @return true if all columns in the table should be read only    */
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|isSomething
argument_list|(
name|READONLY_KEY
argument_list|,
name|DEFAULT_READONLY
argument_list|)
return|;
block|}
comment|/**    * Setting the table as read only sets all the columns in the table as read    * only. By default all tables are modifiable, but if the readOnly flag is     * set to true then the contents of the table can only be read but not modified.    *      * @param readOnly True if all of the columns in the table should be read    * only.    */
specifier|public
name|void
name|setReadOnly
parameter_list|(
specifier|final
name|boolean
name|readOnly
parameter_list|)
block|{
name|setValue
argument_list|(
name|READONLY_KEY
argument_list|,
name|readOnly
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if deferred log edits are enabled on the table.      *     * @return true if that deferred log flush is enabled on the table    *     * @see #setDeferredLogFlush(boolean)    */
specifier|public
specifier|synchronized
name|boolean
name|isDeferredLogFlush
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|deferredLog
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|deferredLog
operator|=
name|isSomething
argument_list|(
name|DEFERRED_LOG_FLUSH_KEY
argument_list|,
name|DEFAULT_DEFERRED_LOG_FLUSH
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|deferredLog
return|;
block|}
comment|/**    * This is used to defer the log edits syncing to the file system. Everytime     * an edit is sent to the server it is first sync'd to the file system by the     * log writer. This sync is an expensive operation and thus can be deferred so     * that the edits are kept in memory for a specified period of time as represented    * by<code> hbase.regionserver.optionallogflushinterval</code> and not flushed    * for every edit.    *<p>    * NOTE:- This option might result in data loss if the region server crashes    * before these deferred edits in memory are flushed onto the filesystem.     *</p>    *     * @param isDeferredLogFlush    */
specifier|public
specifier|synchronized
name|void
name|setDeferredLogFlush
parameter_list|(
specifier|final
name|boolean
name|isDeferredLogFlush
parameter_list|)
block|{
name|setValue
argument_list|(
name|DEFERRED_LOG_FLUSH_KEY
argument_list|,
name|isDeferredLogFlush
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
name|this
operator|.
name|deferredLog
operator|=
name|isDeferredLogFlush
expr_stmt|;
block|}
comment|/**    * Get the name of the table as a byte array.    *     * @return name of table     */
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Get the name of the table as a String    *     * @return name of table as a String     */
specifier|public
name|String
name|getNameAsString
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameAsString
return|;
block|}
comment|/**    * This get the class associated with the region split policy which     * determines when a region split should occur.  The class used by    * default is defined in {@link org.apache.hadoop.hbase.regionserver.RegionSplitPolicy}    *     * @return the class name of the region split policy for this table.    * If this returns null, the default split policy is used.    */
specifier|public
name|String
name|getRegionSplitPolicyClassName
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
name|SPLIT_POLICY
argument_list|)
return|;
block|}
comment|/**    * Set the name of the table.     *     * @param name name of table     */
specifier|public
name|void
name|setName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|setMetaFlags
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**     * Returns the maximum size upto which a region can grow to after which a region    * split is triggered. The region size is represented by the size of the biggest    * store file in that region.    *    * @return max hregion size for table, -1 if not set.    *    * @see #setMaxFileSize(long)    */
specifier|public
name|long
name|getMaxFileSize
parameter_list|()
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|MAX_FILESIZE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Sets the maximum size upto which a region can grow to after which a region    * split is triggered. The region size is represented by the size of the biggest     * store file in that region, i.e. If the biggest store file grows beyond the     * maxFileSize, then the region split is triggered. This defaults to a value of     * 256 MB.    *<p>    * This is not an absolute value and might vary. Assume that a single row exceeds     * the maxFileSize then the storeFileSize will be greater than maxFileSize since    * a single row cannot be split across multiple regions     *</p>    *     * @param maxFileSize The maximum file size that a store file can grow to    * before a split is triggered.    */
specifier|public
name|void
name|setMaxFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
name|setValue
argument_list|(
name|MAX_FILESIZE_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|maxFileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the size of the memstore after which a flush to filesystem is triggered.    *    * @return memory cache flush size for each hregion, -1 if not set.    *    * @see #setMemStoreFlushSize(long)    */
specifier|public
name|long
name|getMemStoreFlushSize
parameter_list|()
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|MEMSTORE_FLUSHSIZE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Represents the maximum size of the memstore after which the contents of the     * memstore are flushed to the filesystem. This defaults to a size of 64 MB.    *     * @param memstoreFlushSize memory cache flush size for each hregion    */
specifier|public
name|void
name|setMemStoreFlushSize
parameter_list|(
name|long
name|memstoreFlushSize
parameter_list|)
block|{
name|setValue
argument_list|(
name|MEMSTORE_FLUSHSIZE_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|memstoreFlushSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a column family.    * @param family HColumnDescriptor of family to add.    */
specifier|public
name|void
name|addFamily
parameter_list|(
specifier|final
name|HColumnDescriptor
name|family
parameter_list|)
block|{
if|if
condition|(
name|family
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|family
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Family name cannot be null or empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|families
operator|.
name|put
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks to see if this table contains the given column family    * @param familyName Family name or column name.    * @return true if the table contains the specified family name    */
specifier|public
name|boolean
name|hasFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|familyName
parameter_list|)
block|{
return|return
name|families
operator|.
name|containsKey
argument_list|(
name|familyName
argument_list|)
return|;
block|}
comment|/**    * @return Name of this table and then a map of all of the column family    * descriptors.    * @see #getNameAsString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|getValues
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|f
range|:
name|families
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return Name of this table and then a map of all of the column family    * descriptors (with only the non-default column family attributes)    */
specifier|public
name|String
name|toStringCustomizedValues
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|getValues
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|families
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|hcd
operator|.
name|toStringCustomizedValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|StringBuilder
name|getValues
parameter_list|(
name|boolean
name|printDefaults
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// step 1: set partitioning and pruning
name|Set
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|reservedKeys
init|=
operator|new
name|TreeSet
argument_list|<
name|ImmutableBytesWritable
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|userKeys
init|=
operator|new
name|TreeSet
argument_list|<
name|ImmutableBytesWritable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBytesWritable
name|k
range|:
name|values
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|k
operator|==
literal|null
operator|||
name|k
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// in this section, print out reserved keywords + coprocessor info
if|if
condition|(
operator|!
name|RESERVED_KEYWORDS
operator|.
name|contains
argument_list|(
name|k
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"coprocessor$"
argument_list|)
condition|)
block|{
name|userKeys
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// only print out IS_ROOT/IS_META if true
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
name|IS_ROOT
argument_list|)
operator|||
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
name|IS_META
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
continue|continue;
block|}
comment|// see if a reserved key is a default value. may not want to print it out
if|if
condition|(
name|printDefaults
operator|||
operator|!
name|DEFAULT_VALUES
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
operator|!
name|DEFAULT_VALUES
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|reservedKeys
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
comment|// early exit optimization
name|boolean
name|hasAttributes
init|=
operator|!
name|reservedKeys
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|userKeys
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasAttributes
operator|&&
name|configuration
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|s
return|;
name|s
operator|.
name|append
argument_list|(
literal|", {"
argument_list|)
expr_stmt|;
comment|// step 2: printing attributes
if|if
condition|(
name|hasAttributes
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"TABLE_ATTRIBUTES => {"
argument_list|)
expr_stmt|;
comment|// print all reserved keys first
name|boolean
name|printCommaForAttr
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ImmutableBytesWritable
name|k
range|:
name|reservedKeys
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|printCommaForAttr
condition|)
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|printCommaForAttr
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|userKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// print all non-reserved, advanced config keys as a separate subset
if|if
condition|(
name|printCommaForAttr
condition|)
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|printCommaForAttr
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|HConstants
operator|.
name|METADATA
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|boolean
name|printCommaForCfg
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ImmutableBytesWritable
name|k
range|:
name|userKeys
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|printCommaForCfg
condition|)
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|printCommaForCfg
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// step 3: printing all configuration:
if|if
condition|(
operator|!
name|configuration
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasAttributes
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|HConstants
operator|.
name|CONFIGURATION
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|boolean
name|printCommaForConfig
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|printCommaForConfig
condition|)
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|printCommaForConfig
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
comment|// end METHOD
return|return
name|s
return|;
block|}
comment|/**    * Compare the contents of the descriptor with another one passed as a parameter.     * Checks if the obj passed is an instance of HTableDescriptor, if yes then the    * contents of the descriptors are compared.    *     * @return true if the contents of the the two descriptors exactly match    *     * @see java.lang.Object#equals(java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|HTableDescriptor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|HTableDescriptor
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @see java.lang.Object#hashCode()    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
name|result
operator|^=
name|Byte
operator|.
name|valueOf
argument_list|(
name|TABLE_DESCRIPTOR_VERSION
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|families
operator|!=
literal|null
operator|&&
name|this
operator|.
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|this
operator|.
name|families
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|^=
name|e
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|^=
name|values
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|configuration
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    *<em> INTERNAL</em> This method is a part of {@link WritableComparable} interface     * and is used for de-serialization of the HTableDescriptor over RPC    * @deprecated Writables are going away.  Use pb {@link #parseFrom(byte[])} instead.    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"versions< 3 are not supported (and never existed!?)"
argument_list|)
throw|;
comment|// version 3+
name|name
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nameAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|setRootRegion
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|setMetaRegion
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|numVals
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVals
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|value
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|families
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|numFamilies
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
name|i
operator|++
control|)
block|{
name|HColumnDescriptor
name|c
init|=
operator|new
name|HColumnDescriptor
argument_list|()
decl_stmt|;
name|c
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|families
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|7
condition|)
block|{
name|int
name|numConfigs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConfigs
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|value
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|key
operator|.
name|getOffset
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|,
name|value
operator|.
name|getOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    *<em> INTERNAL</em> This method is a part of {@link WritableComparable} interface     * and is used for serialization of the HTableDescriptor over RPC    * @deprecated Writables are going away.    * Use {@link com.google.protobuf.MessageLite#toByteArray} instead.    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|TABLE_DESCRIPTOR_VERSION
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isRootRegion
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isMetaRegion
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|families
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|HColumnDescriptor
argument_list|>
name|it
init|=
name|families
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|HColumnDescriptor
name|family
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|family
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|configuration
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Comparable
comment|/**    * Compares the descriptor with another descriptor which is passed as a parameter.    * This compares the content of the two descriptors and not the reference.    *     * @return 0 if the contents of the descriptors are exactly matching,     * 		 1 if there is a mismatch in the contents     */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|HTableDescriptor
name|other
parameter_list|)
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|families
operator|.
name|size
argument_list|()
operator|-
name|other
operator|.
name|families
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|!=
name|other
operator|.
name|families
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|families
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|other
operator|.
name|families
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|HColumnDescriptor
argument_list|>
name|it
init|=
name|families
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|,
name|it2
init|=
name|other
operator|.
name|families
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|result
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|compareTo
argument_list|(
name|it2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|// punt on comparison for ordering, just calculate difference
name|result
operator|=
name|this
operator|.
name|values
operator|.
name|hashCode
argument_list|()
operator|-
name|other
operator|.
name|values
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
name|result
operator|=
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
name|result
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|configuration
operator|.
name|hashCode
argument_list|()
operator|-
name|other
operator|.
name|configuration
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
name|result
operator|=
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
name|result
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns an unmodifiable collection of all the {@link HColumnDescriptor}     * of all the column families of the table.    *      * @return Immutable collection of {@link HColumnDescriptor} of all the    * column families.     */
specifier|public
name|Collection
argument_list|<
name|HColumnDescriptor
argument_list|>
name|getFamilies
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|families
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns all the column family names of the current table. The map of     * HTableDescriptor contains mapping of family name to HColumnDescriptors.     * This returns all the keys of the family map which represents the column     * family names of the table.     *     * @return Immutable sorted set of the keys of the families.    */
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getFamiliesKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|this
operator|.
name|families
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**     * Returns an array all the {@link HColumnDescriptor} of the column families     * of the table.    *      * @return Array of all the HColumnDescriptors of the current table     *     * @see #getFamilies()    */
specifier|public
name|HColumnDescriptor
index|[]
name|getColumnFamilies
parameter_list|()
block|{
name|Collection
argument_list|<
name|HColumnDescriptor
argument_list|>
name|hColumnDescriptors
init|=
name|getFamilies
argument_list|()
decl_stmt|;
return|return
name|hColumnDescriptors
operator|.
name|toArray
argument_list|(
operator|new
name|HColumnDescriptor
index|[
name|hColumnDescriptors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns the HColumnDescriptor for a specific column family with name as     * specified by the parameter column.    *     * @param column Column family name     * @return Column descriptor for the passed family name or the family on    * passed in column.    */
specifier|public
name|HColumnDescriptor
name|getFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|families
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**    * Removes the HColumnDescriptor with name specified by the parameter column     * from the table descriptor    *     * @param column Name of the column family to be removed.    * @return Column descriptor for the passed family name or the family on    * passed in column.    */
specifier|public
name|HColumnDescriptor
name|removeFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|families
operator|.
name|remove
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**    * Add a table coprocessor to this table. The coprocessor    * type must be {@link org.apache.hadoop.hbase.coprocessor.RegionObserver}    * or Endpoint.    * It won't check if the class can be loaded or not.    * Whether a coprocessor is loadable or not will be determined when    * a region is opened.    * @param className Full class name.    * @throws IOException    */
specifier|public
name|void
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|addCoprocessor
argument_list|(
name|className
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a table coprocessor to this table. The coprocessor    * type must be {@link org.apache.hadoop.hbase.coprocessor.RegionObserver}    * or Endpoint.    * It won't check if the class can be loaded or not.    * Whether a coprocessor is loadable or not will be determined when    * a region is opened.    * @param jarFilePath Path of the jar file. If it's null, the class will be    * loaded from default classloader.    * @param className Full class name.    * @param priority Priority    * @param kvs Arbitrary key-value parameter pairs passed into the coprocessor.    * @throws IOException    */
specifier|public
name|void
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|,
name|Path
name|jarFilePath
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasCoprocessor
argument_list|(
name|className
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Coprocessor "
operator|+
name|className
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
comment|// validate parameter kvs
name|StringBuilder
name|kvString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|kvs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|matches
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_KEY_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal parameter key = "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|matches
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_VALUE_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal parameter ("
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|") value = "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|kvString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|kvString
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|kvString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|kvString
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|kvString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate a coprocessor key
name|int
name|maxCoprocessorNumber
init|=
literal|0
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|maxCoprocessorNumber
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|maxCoprocessorNumber
argument_list|)
expr_stmt|;
block|}
name|maxCoprocessorNumber
operator|++
expr_stmt|;
name|String
name|key
init|=
literal|"coprocessor$"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|maxCoprocessorNumber
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|(
name|jarFilePath
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|jarFilePath
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"|"
operator|+
name|className
operator|+
literal|"|"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|priority
argument_list|)
operator|+
literal|"|"
operator|+
name|kvString
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the table has an attached co-processor represented by the name className    *    * @param className - Class name of the co-processor    * @return true of the table has a co-processor className    */
specifier|public
name|boolean
name|hasCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Matcher
name|keyMatcher
decl_stmt|;
name|Matcher
name|valueMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|valueMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valueMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// get className and compare
name|String
name|clazz
init|=
name|valueMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// classname is the 2nd field
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|className
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Return the list of attached co-processor represented by their name className    *    * @return The list of co-processors classNames    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCoprocessors
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
name|Matcher
name|valueMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|valueMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valueMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|valueMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// classname is the 2nd field
block|}
return|return
name|result
return|;
block|}
comment|/**    * Remove a coprocessor from those set on the table    * @param className Class name of the co-processor    */
specifier|public
name|void
name|removeCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|ImmutableBytesWritable
name|match
init|=
literal|null
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
name|Matcher
name|valueMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|valueMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valueMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// get className and compare
name|String
name|clazz
init|=
name|valueMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// classname is the 2nd field
comment|// remove the CP if it is present
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|className
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// if we found a match, remove it
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
name|remove
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the {@link Path} object representing the table directory under     * path rootdir     *     * @param rootdir qualified path of HBase root directory    * @param tableName name of table    * @return {@link Path} for table    */
specifier|public
specifier|static
name|Path
name|getTableDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/** Table descriptor for<core>-ROOT-</code> catalog table */
specifier|public
specifier|static
specifier|final
name|HTableDescriptor
name|ROOT_TABLEDESC
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
comment|// Ten is arbitrary number.  Keep versions to help debugging.
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|setTimeToLive
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
block|}
argument_list|)
decl_stmt|;
comment|/** Table descriptor for<code>.META.</code> catalog table */
specifier|public
specifier|static
specifier|final
name|HTableDescriptor
name|META_TABLEDESC
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
comment|// Ten is arbitrary number.  Keep versions to help debugging.
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|void
name|setOwner
parameter_list|(
name|User
name|owner
parameter_list|)
block|{
name|setOwnerString
argument_list|(
name|owner
operator|!=
literal|null
condition|?
name|owner
operator|.
name|getShortName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// used by admin.rb:alter(table_name,*args) to update owner.
annotation|@
name|Deprecated
specifier|public
name|void
name|setOwnerString
parameter_list|(
name|String
name|ownerString
parameter_list|)
block|{
if|if
condition|(
name|ownerString
operator|!=
literal|null
condition|)
block|{
name|setValue
argument_list|(
name|OWNER_KEY
argument_list|,
name|ownerString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remove
argument_list|(
name|OWNER_KEY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|String
name|getOwnerString
parameter_list|()
block|{
if|if
condition|(
name|getValue
argument_list|(
name|OWNER_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|getValue
argument_list|(
name|OWNER_KEY
argument_list|)
argument_list|)
return|;
block|}
comment|// Note that every table should have an owner (i.e. should have OWNER_KEY set).
comment|// .META. and -ROOT- should return system user as owner, not null (see
comment|// MasterFileSystem.java:bootstrap()).
return|return
literal|null
return|;
block|}
comment|/**    * @return This instance serialized with pb with pb magic prefix    * @see #parseFrom(byte[])    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|convert
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param bytes A pb serialized {@link HTableDescriptor} instance with pb magic prefix    * @return An instance of {@link HTableDescriptor} made from<code>bytes</code>    * @throws DeserializationException    * @throws IOException     * @see #toByteArray()    */
specifier|public
specifier|static
name|HTableDescriptor
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
return|return
operator|(
name|HTableDescriptor
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|bytes
argument_list|,
operator|new
name|HTableDescriptor
argument_list|()
argument_list|)
return|;
block|}
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|TableSchema
operator|.
name|Builder
name|builder
init|=
name|TableSchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|TableSchema
name|ts
decl_stmt|;
try|try
block|{
name|ts
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|convert
argument_list|(
name|ts
argument_list|)
return|;
block|}
comment|/**    * @return Convert the current {@link HTableDescriptor} into a pb TableSchema instance.    */
specifier|public
name|TableSchema
name|convert
parameter_list|()
block|{
name|TableSchema
operator|.
name|Builder
name|builder
init|=
name|TableSchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BytesBytesPair
operator|.
name|Builder
name|aBuilder
init|=
name|BytesBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|aBuilder
operator|.
name|setFirst
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aBuilder
operator|.
name|setSecond
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttributes
argument_list|(
name|aBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|getColumnFamilies
argument_list|()
control|)
block|{
name|builder
operator|.
name|addColumnFamilies
argument_list|(
name|hcd
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|this
operator|.
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NameStringPair
operator|.
name|Builder
name|aBuilder
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|aBuilder
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|aBuilder
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|aBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @param ts A pb TableSchema instance.    * @return An {@link HTableDescriptor} made from the passed in pb<code>ts</code>.    */
specifier|public
specifier|static
name|HTableDescriptor
name|convert
parameter_list|(
specifier|final
name|TableSchema
name|ts
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnFamilySchema
argument_list|>
name|list
init|=
name|ts
operator|.
name|getColumnFamiliesList
argument_list|()
decl_stmt|;
name|HColumnDescriptor
index|[]
name|hcds
init|=
operator|new
name|HColumnDescriptor
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnFamilySchema
name|cfs
range|:
name|list
control|)
block|{
name|hcds
index|[
name|index
operator|++
index|]
operator|=
name|HColumnDescriptor
operator|.
name|convert
argument_list|(
name|cfs
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|ts
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|hcds
argument_list|)
decl_stmt|;
for|for
control|(
name|BytesBytesPair
name|a
range|:
name|ts
operator|.
name|getAttributesList
argument_list|()
control|)
block|{
name|htd
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getFirst
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|a
operator|.
name|getSecond
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameStringPair
name|a
range|:
name|ts
operator|.
name|getConfigurationList
argument_list|()
control|)
block|{
name|htd
operator|.
name|setConfiguration
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|htd
return|;
block|}
comment|/**    * Getter for accessing the configuration value by key    */
specifier|public
name|String
name|getConfigurationValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Getter for fetching an unmodifiable {@link #configuration} map.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfiguration
parameter_list|()
block|{
comment|// shallow pointer copy
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|configuration
argument_list|)
return|;
block|}
comment|/**    * Setter for storing a configuration setting in {@link #configuration} map.    * @param key Config key. Same as XML config key e.g. hbase.something.or.other.    * @param value String value. If null, removes the setting.    */
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|removeConfiguration
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configuration
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove a config setting represented by the key from the {@link #configuration} map    */
specifier|public
name|void
name|removeConfiguration
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|configuration
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

