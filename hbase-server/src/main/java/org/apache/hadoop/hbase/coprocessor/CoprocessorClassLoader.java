begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * ClassLoader used to load Coprocessor instances.  *   * This ClassLoader always tries to load classes from the Coprocessor jar first   * before delegating to the parent ClassLoader, thus avoiding dependency   * conflicts between HBase's classpath and classes in the coprocessor's jar.    * Certain classes are exempt from being loaded by this ClassLoader because it   * would prevent them from being cast to the equivalent classes in the region   * server.  For example, the Coprocessor interface needs to be loaded by the   * region server's ClassLoader to prevent a ClassCastException when casting the   * coprocessor implementation.  *   * This ClassLoader also handles resource loading.  In most cases this   * ClassLoader will attempt to load resources from the coprocessor jar first   * before delegating to the parent.  However, like in class loading,   * some resources need to be handled differently.  For all of the Hadoop   * default configurations (e.g. hbase-default.xml) we will check the parent   * ClassLoader first to prevent issues such as failing the HBase default   * configuration version check.  */
end_comment

begin_class
specifier|public
class|class
name|CoprocessorClassLoader
extends|extends
name|URLClassLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CoprocessorClassLoader
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * If the class being loaded starts with any of these strings, we will skip    * trying to load it from the coprocessor jar and instead delegate     * directly to the parent ClassLoader.    */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CLASS_PREFIX_EXEMPTIONS
init|=
operator|new
name|String
index|[]
block|{
comment|// Java standard library:
literal|"com.sun."
block|,
literal|"launcher."
block|,
literal|"java."
block|,
literal|"javax."
block|,
literal|"org.ietf"
block|,
literal|"org.omg"
block|,
literal|"org.w3c"
block|,
literal|"org.xml"
block|,
literal|"sunw."
block|,
comment|// Hadoop/HBase:
literal|"org.apache.hadoop"
block|,   }
decl_stmt|;
comment|/**    * If the resource being loaded matches any of these patterns, we will first     * attempt to load the resource with the parent ClassLoader.  Only if the     * resource is not found by the parent do we attempt to load it from the     * coprocessor jar.    */
specifier|private
specifier|static
specifier|final
name|Pattern
index|[]
name|RESOURCE_LOAD_PARENT_FIRST_PATTERNS
init|=
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[^-]+-default\\.xml$"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Creates a CoprocessorClassLoader that loads classes from the given paths.    * @param paths paths from which to load classes.    * @param parent the parent ClassLoader to set.    */
specifier|public
name|CoprocessorClassLoader
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|paths
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[]
block|{}
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|synchronized
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|// Delegate to the parent immediately if this class is exempt
if|if
condition|(
name|isClassExempt
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping exempt class "
operator|+
name|name
operator|+
literal|" - delegating directly to parent"
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// Check whether the class has already been loaded:
name|Class
argument_list|<
name|?
argument_list|>
name|clasz
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class "
operator|+
name|name
operator|+
literal|" already loaded"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|// Try to find this class using the URLs passed to this ClassLoader,
comment|// which includes the coprocessor jar
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finding class: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|clasz
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Class not found using this ClassLoader, so delegate to parent
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class "
operator|+
name|name
operator|+
literal|" not found - delegating to parent"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|clasz
operator|=
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e2
parameter_list|)
block|{
comment|// Class not found in this ClassLoader or in the parent ClassLoader
comment|// Log some debug output before rethrowing ClassNotFoundException
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class "
operator|+
name|name
operator|+
literal|" not found in parent loader"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e2
throw|;
block|}
block|}
block|}
return|return
name|clasz
return|;
block|}
annotation|@
name|Override
specifier|synchronized
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|resource
init|=
literal|null
decl_stmt|;
name|boolean
name|parentLoaded
init|=
literal|false
decl_stmt|;
comment|// Delegate to the parent first if necessary
if|if
condition|(
name|loadResourceUsingParentFirst
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking parent first for resource "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|resource
operator|=
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|parentLoaded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|// Try to find the resource in the coprocessor jar
name|resource
operator|=
name|findResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|resource
operator|==
literal|null
operator|)
operator|&&
operator|!
name|parentLoaded
condition|)
block|{
comment|// Not found in the coprocessor jar and we haven't attempted to load
comment|// the resource in the parent yet; fall back to the parent
name|resource
operator|=
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resource
return|;
block|}
comment|/**    * Determines whether the given class should be exempt from being loaded     * by this ClassLoader.    * @param name the name of the class to test.    * @return true if the class should *not* be loaded by this ClassLoader;     * false otherwise.    */
specifier|protected
name|boolean
name|isClassExempt
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|exemptPrefix
range|:
name|CLASS_PREFIX_EXEMPTIONS
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|exemptPrefix
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Determines whether we should attempt to load the given resource using the      * parent first before attempting to load the resource using this ClassLoader.    * @param name the name of the resource to test.    * @return true if we should attempt to load the resource using the parent     * first; false if we should attempt to load the resource using this     * ClassLoader first.    */
specifier|protected
name|boolean
name|loadResourceUsingParentFirst
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Pattern
name|resourcePattern
range|:
name|RESOURCE_LOAD_PARENT_FIRST_PATTERNS
control|)
block|{
if|if
condition|(
name|resourcePattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

