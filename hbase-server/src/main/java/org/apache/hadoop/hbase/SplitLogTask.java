begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * State of a WAL log split during distributed splitting.  State is kept up in zookeeper.  * Encapsulates protobuf serialization/deserialization so we don't leak generated pb outside of  * this class.  Used by regionserver and master packages.  *<p>Immutable  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitLogTask
block|{
specifier|private
specifier|final
name|ServerName
name|originServer
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
name|state
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
name|mode
decl_stmt|;
specifier|public
specifier|static
class|class
name|Unassigned
extends|extends
name|SplitLogTask
block|{
specifier|public
name|Unassigned
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|originServer
argument_list|,
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Owned
extends|extends
name|SplitLogTask
block|{
specifier|public
name|Owned
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|originServer
argument_list|,
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|OWNED
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Resigned
extends|extends
name|SplitLogTask
block|{
specifier|public
name|Resigned
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|originServer
argument_list|,
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|RESIGNED
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Done
extends|extends
name|SplitLogTask
block|{
specifier|public
name|Done
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|originServer
argument_list|,
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|DONE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Err
extends|extends
name|SplitLogTask
block|{
specifier|public
name|Err
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|originServer
argument_list|,
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|ERR
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
name|SplitLogTask
parameter_list|(
specifier|final
name|ZooKeeperProtos
operator|.
name|SplitLogTask
name|slt
parameter_list|)
block|{
name|this
operator|.
name|originServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|slt
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|slt
operator|.
name|getState
argument_list|()
expr_stmt|;
name|this
operator|.
name|mode
operator|=
operator|(
name|slt
operator|.
name|hasMode
argument_list|()
operator|)
condition|?
name|slt
operator|.
name|getMode
argument_list|()
else|:
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
operator|.
name|UNKNOWN
expr_stmt|;
block|}
name|SplitLogTask
parameter_list|(
specifier|final
name|ServerName
name|originServer
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
name|state
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|originServer
operator|=
name|originServer
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|originServer
return|;
block|}
specifier|public
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mode
return|;
block|}
specifier|public
name|boolean
name|isUnassigned
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|this
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
operator|&&
name|isUnassigned
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUnassigned
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|UNASSIGNED
return|;
block|}
specifier|public
name|boolean
name|isOwned
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|this
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
operator|&&
name|isOwned
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isOwned
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|OWNED
return|;
block|}
specifier|public
name|boolean
name|isResigned
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|this
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
operator|&&
name|isResigned
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isResigned
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|RESIGNED
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|this
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
operator|&&
name|isDone
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|DONE
return|;
block|}
specifier|public
name|boolean
name|isErr
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|this
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
operator|&&
name|isErr
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isErr
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|State
operator|.
name|ERR
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|this
operator|.
name|originServer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SplitLogTask
operator|)
condition|)
return|return
literal|false
return|;
name|SplitLogTask
name|other
init|=
operator|(
name|SplitLogTask
operator|)
name|obj
decl_stmt|;
return|return
name|other
operator|.
name|state
operator|.
name|equals
argument_list|(
name|this
operator|.
name|state
argument_list|)
operator|&&
name|other
operator|.
name|originServer
operator|.
name|equals
argument_list|(
name|this
operator|.
name|originServer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|7
decl_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|this
operator|.
name|state
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
literal|31
operator|*
name|hash
operator|+
name|this
operator|.
name|originServer
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * @param data Serialized date to parse.    * @return An SplitLogTaskState instance made of the passed<code>data</code>    * @throws DeserializationException     * @see #toByteArray()    */
specifier|public
specifier|static
name|SplitLogTask
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|prefixLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|data
argument_list|,
name|prefixLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|prefixLen
argument_list|)
expr_stmt|;
return|return
operator|new
name|SplitLogTask
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return This instance serialized into a byte array    * @see #parseFrom(byte[])    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
comment|// First create a pb ServerName.  Then create a ByteString w/ the TaskState
comment|// bytes in it.  Finally create a SplitLogTaskState passing in the two
comment|// pbs just created.
name|HBaseProtos
operator|.
name|ServerName
name|snpb
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|this
operator|.
name|originServer
argument_list|)
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|SplitLogTask
name|slts
init|=
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServerName
argument_list|(
name|snpb
argument_list|)
operator|.
name|setState
argument_list|(
name|this
operator|.
name|state
argument_list|)
operator|.
name|setMode
argument_list|(
name|this
operator|.
name|mode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|slts
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

