begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TimeoutIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RemoteProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|MasterQuotaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_comment
comment|/**  * Helper to synchronously wait on conditions.  * This will be removed in the future (mainly when the AssignmentManager will be  * replaced with a Procedure version) by using ProcedureYieldException,  * and the queue will handle waiting and scheduling based on events.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|ProcedureSyncWait
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcedureSyncWait
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ProcedureSyncWait
parameter_list|()
block|{}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|Predicate
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|evaluate
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|submitAndWaitProcedure
parameter_list|(
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
parameter_list|,
specifier|final
name|Procedure
name|proc
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
name|proc
argument_list|)
decl_stmt|;
return|return
name|waitForProcedureToComplete
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|waitForProcedureToComplete
parameter_list|(
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|procExec
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
operator|&&
name|procExec
operator|.
name|isRunning
argument_list|()
condition|)
block|{
comment|// TODO: add a config to make it tunable
comment|// Dev Consideration: are we waiting forever, or we can set up some timeout value?
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|ProcedureInfo
name|result
init|=
name|procExec
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
comment|// If the procedure fails, we should always have an exception captured. Throw it.
throw|throw
name|RemoteProcedureException
operator|.
name|fromProto
argument_list|(
name|result
operator|.
name|getForeignExceptionMessage
argument_list|()
operator|.
name|getForeignExchangeMessage
argument_list|()
argument_list|)
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
return|return
name|result
operator|.
name|getResult
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|procExec
operator|.
name|isRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Procedure "
operator|+
name|procId
operator|+
literal|"not found"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The Master is Aborting"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|waitFor
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|String
name|purpose
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|long
name|waitTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.wait.on.region"
argument_list|,
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|long
name|waitingTimeForEvents
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.event.waiting.time"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
return|return
name|waitFor
argument_list|(
name|env
argument_list|,
name|waitTime
argument_list|,
name|waitingTimeForEvents
argument_list|,
name|purpose
argument_list|,
name|predicate
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|waitFor
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|long
name|waitTime
parameter_list|,
name|long
name|waitingTimeForEvents
parameter_list|,
name|String
name|purpose
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|done
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|waitTime
decl_stmt|;
do|do
block|{
name|T
name|result
init|=
name|predicate
operator|.
name|evaluate
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitingTimeForEvents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while sleeping, waiting on "
operator|+
name|purpose
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on "
operator|+
name|purpose
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|done
operator|&&
name|env
operator|.
name|isRunning
argument_list|()
condition|)
do|;
throw|throw
operator|new
name|TimeoutIOException
argument_list|(
literal|"Timed out while waiting on "
operator|+
name|purpose
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|void
name|waitMetaRegions
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|timeout
init|=
name|env
operator|.
name|getMasterConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.client.catalog.timeout"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|waitMetaRegionLocation
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|timeout
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|waitRegionServers
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ServerManager
name|sm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|ProcedureSyncWait
operator|.
name|waitFor
argument_list|(
name|env
argument_list|,
literal|"server to assign region(s)"
argument_list|,
operator|new
name|ProcedureSyncWait
operator|.
name|Predicate
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|sm
operator|.
name|createDestinationServersList
argument_list|()
decl_stmt|;
return|return
name|servers
operator|!=
literal|null
operator|&&
operator|!
name|servers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionsFromMeta
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProcedureSyncWait
operator|.
name|waitFor
argument_list|(
name|env
argument_list|,
literal|"regions of table="
operator|+
name|tableName
operator|+
literal|" from meta"
argument_list|,
operator|new
name|ProcedureSyncWait
operator|.
name|Predicate
argument_list|<
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegions
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
return|;
block|}
return|return
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|void
name|waitRegionInTransition
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
throws|,
name|CoordinatedStateException
block|{
specifier|final
name|AssignmentManager
name|am
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
specifier|final
name|RegionStates
name|states
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|ProcedureSyncWait
operator|.
name|waitFor
argument_list|(
name|env
argument_list|,
literal|"regions "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" in transition"
argument_list|,
operator|new
name|ProcedureSyncWait
operator|.
name|Predicate
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|states
operator|.
name|isRegionInState
argument_list|(
name|region
argument_list|,
name|State
operator|.
name|FAILED_OPEN
argument_list|)
condition|)
block|{
name|am
operator|.
name|regionOffline
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|states
operator|.
name|isRegionInTransition
argument_list|(
name|region
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|MasterQuotaManager
name|getMasterQuotaManager
parameter_list|(
specifier|final
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProcedureSyncWait
operator|.
name|waitFor
argument_list|(
name|env
argument_list|,
literal|"quota manager to be available"
argument_list|,
operator|new
name|ProcedureSyncWait
operator|.
name|Predicate
argument_list|<
name|MasterQuotaManager
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MasterQuotaManager
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

