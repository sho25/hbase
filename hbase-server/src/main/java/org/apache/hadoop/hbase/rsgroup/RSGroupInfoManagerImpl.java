begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CoprocessorDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStateNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|CreateTableProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedureSyncWait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMagic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This is an implementation of {@link RSGroupInfoManager} which makes use of an HBase table as the  * persistence store for the group information. It also makes use of zookeeper to store group  * information needed for bootstrapping during offline mode.  *<h2>Concurrency</h2> RSGroup state is kept locally in Maps. There is a rsgroup name to cached  * RSGroupInfo Map at {@link #rsGroupMap}. These Maps are persisted to the hbase:rsgroup table  * (and cached in zk) on each modification.  *<p/>  * Mutations on state are synchronized but reads can continue without having to wait on an instance  * monitor, mutations do wholesale replace of the Maps on update -- Copy-On-Write; the local Maps of  * state are read-only, just-in-case (see flushConfig).  *<p/>  * Reads must not block else there is a danger we'll deadlock.  *<p/>  * Clients of this class, the {@link RSGroupAdminEndpoint} for example, want to query and then act  * on the results of the query modifying cache in zookeeper without another thread making  * intermediate modifications. These clients synchronize on the 'this' instance so no other has  * access concurrently. Reads must be able to continue concurrently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|final
class|class
name|RSGroupInfoManagerImpl
implements|implements
name|RSGroupInfoManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RSGroupInfoManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Assigned before user tables
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|TableName
name|RSGROUP_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"rsgroup"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
init|=
literal|"should keep at least "
operator|+
literal|"one server in 'default' RSGroup."
decl_stmt|;
comment|/** Define the config key of retries threshold when movements failed */
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|FAILED_MOVE_MAX_RETRY
init|=
literal|"hbase.rsgroup.move.max.retry"
decl_stmt|;
comment|/** Define the default number of retries */
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RETRY_VALUE
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RS_GROUP_ZNODE
init|=
literal|"rsgroup"
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|byte
index|[]
name|META_FAMILY_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|byte
index|[]
name|META_QUALIFIER_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|MIGRATE_THREAD_NAME
init|=
literal|"Migrate-RSGroup-Tables"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_KEY
init|=
block|{
literal|0
block|}
decl_stmt|;
comment|/** Table descriptor for<code>hbase:rsgroup</code> catalog table */
specifier|private
specifier|static
specifier|final
name|TableDescriptor
name|RSGROUP_TABLE_DESC
decl_stmt|;
static|static
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|META_FAMILY_BYTES
argument_list|)
argument_list|)
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCoprocessor
argument_list|(
name|CoprocessorDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setPriority
argument_list|(
name|Coprocessor
operator|.
name|PRIORITY_SYSTEM
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|RSGROUP_TABLE_DESC
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// There two Maps are immutable and wholesale replaced on each modification
comment|// so are safe to access concurrently. See class comment.
specifier|private
specifier|static
specifier|final
class|class
name|RSGroupInfoHolder
block|{
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|groupName2Group
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|TableName
argument_list|,
name|RSGroupInfo
argument_list|>
name|tableName2Group
decl_stmt|;
name|RSGroupInfoHolder
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RSGroupInfoHolder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|group2Name2GroupBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|TableName
argument_list|,
name|RSGroupInfo
argument_list|>
name|tableName2GroupBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rsGroupMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|groupName
parameter_list|,
name|rsGroupInfo
parameter_list|)
lambda|->
block|{
name|group2Name2GroupBuilder
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupName
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|rsGroupInfo
operator|.
name|getTables
argument_list|()
operator|.
name|forEach
argument_list|(
name|tableName
lambda|->
name|tableName2GroupBuilder
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|rsGroupInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupName2Group
operator|=
name|group2Name2GroupBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName2Group
operator|=
name|tableName2GroupBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|volatile
name|RSGroupInfoHolder
name|holder
init|=
operator|new
name|RSGroupInfoHolder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
specifier|final
name|AsyncClusterConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|ZKWatcher
name|watcher
decl_stmt|;
specifier|private
specifier|final
name|RSGroupStartupWorker
name|rsGroupStartupWorker
decl_stmt|;
comment|// contains list of groups that were last flushed to persistent store
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|prevRSGroups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|RSGroupInfoManagerImpl
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|masterServices
operator|.
name|getAsyncClusterConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|rsGroupStartupWorker
operator|=
operator|new
name|RSGroupStartupWorker
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|updateDefaultServers
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating default servers."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|holder
operator|.
name|groupName2Group
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|oldDefaultGroupInfo
init|=
name|getRSGroup
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
assert|assert
name|oldDefaultGroupInfo
operator|!=
literal|null
assert|;
name|RSGroupInfo
name|newDefaultGroupInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|getDefaultServers
argument_list|()
argument_list|)
decl_stmt|;
name|newDefaultGroupInfo
operator|.
name|addAllTables
argument_list|(
name|oldDefaultGroupInfo
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|newDefaultGroupInfo
argument_list|)
expr_stmt|;
comment|// do not need to persist, as we do not persist default group.
name|resetRSGroupMap
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated default servers, {} servers"
argument_list|,
name|newDefaultGroupInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|ServerListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|serverAdded
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|updateDefaultServers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverRemoved
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|updateDefaultServers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|migrate
argument_list|()
expr_stmt|;
block|}
specifier|static
name|RSGroupInfoManager
name|getInstance
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfoManagerImpl
name|instance
init|=
operator|new
name|RSGroupInfoManagerImpl
argument_list|(
name|masterServices
argument_list|)
decl_stmt|;
name|instance
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// create system table of rsgroup
name|rsGroupStartupWorker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addRSGroup
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupName
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
init|=
name|holder
operator|.
name|groupName2Group
decl_stmt|;
if|if
condition|(
name|rsGroupMap
operator|.
name|get
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|||
name|rsGroupInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Group already exists: "
operator|+
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|ConstraintException
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|holder
operator|.
name|groupName2Group
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|rsGroupInfo
return|;
block|}
comment|/**    * @return Set of online Servers named for their hostname and port (not ServerName).    */
specifier|private
name|Set
argument_list|<
name|Address
argument_list|>
name|getOnlineServers
parameter_list|()
block|{
return|return
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ServerName
operator|::
name|getAddress
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Address
argument_list|>
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|srcGroup
parameter_list|,
name|String
name|dstGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|src
init|=
name|getRSGroupInfo
argument_list|(
name|srcGroup
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dst
init|=
name|getRSGroupInfo
argument_list|(
name|dstGroup
argument_list|)
decl_stmt|;
comment|// If destination is 'default' rsgroup, only add servers that are online. If not online, drop
comment|// it. If not 'default' group, add server to 'dst' rsgroup EVEN IF IT IS NOT online (could be a
comment|// rsgroup of dead servers that are to come back later).
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
name|dst
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|?
name|getOnlineServers
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|Address
name|el
range|:
name|servers
control|)
block|{
name|src
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlineServers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping "
operator|+
name|el
operator|+
literal|" during move-to-default rsgroup because not online"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
name|dst
operator|.
name|addServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|holder
operator|.
name|groupName2Group
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
return|return
name|dst
operator|.
name|getServers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupOfServer
parameter_list|(
name|Address
name|serverHostPort
parameter_list|)
block|{
for|for
control|(
name|RSGroupInfo
name|info
range|:
name|holder
operator|.
name|groupName2Group
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|containsServer
argument_list|(
name|serverHostPort
argument_list|)
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
return|return
name|holder
operator|.
name|groupName2Group
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|int
name|serverCount
init|=
name|rsGroupInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" has "
operator|+
name|serverCount
operator|+
literal|" servers; you must remove these servers from the RSGroup before"
operator|+
literal|" the RSGroup can be removed."
argument_list|)
throw|;
block|}
for|for
control|(
name|TableDescriptor
name|td
range|:
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|td
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|map
argument_list|(
name|groupName
operator|::
name|equals
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" is already referenced by "
operator|+
name|td
operator|.
name|getTableName
argument_list|()
operator|+
literal|"; you must remove all the tables from the rsgroup before "
operator|+
literal|"the rsgroup can be removed."
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|masterServices
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
name|String
name|nsGroup
init|=
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsGroup
operator|!=
literal|null
operator|&&
name|nsGroup
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" is referenced by namespace: "
operator|+
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
init|=
name|holder
operator|.
name|groupName2Group
decl_stmt|;
if|if
condition|(
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
operator|||
name|groupName
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist or is a reserved "
operator|+
literal|"group"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|remove
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|listRSGroups
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|holder
operator|.
name|groupName2Group
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|rsGroupStartupWorker
operator|.
name|isOnline
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The set of servers to remove cannot be null or empty."
argument_list|)
throw|;
block|}
comment|// check the set of servers
name|checkForDeadOrOnlineServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Address
name|el
range|:
name|servers
control|)
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupOfServer
argument_list|(
name|el
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|!=
literal|null
condition|)
block|{
name|RSGroupInfo
name|newRsGroupInfo
init|=
name|rsGroupInfos
operator|.
name|get
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRsGroupInfo
operator|==
literal|null
condition|)
block|{
name|rsGroupInfo
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|rsGroupInfos
operator|.
name|put
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRsGroupInfo
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|rsGroupInfos
operator|.
name|put
argument_list|(
name|newRsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|newRsGroupInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server "
operator|+
name|el
operator|+
literal|" does not belong to any rsgroup."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rsGroupInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|holder
operator|.
name|groupName2Group
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|putAll
argument_list|(
name|rsGroupInfos
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove decommissioned servers {} from RSGroup done"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupListFromGroupTable
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|rsGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
init|;
condition|;
control|)
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|)
argument_list|)
decl_stmt|;
name|rsGroupInfoList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toGroupInfo
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rsGroupInfoList
return|;
block|}
specifier|private
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupListFromZookeeper
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|groupBasePath
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|RS_GROUP_ZNODE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|RSGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Overwrite any info stored by table, this takes precedence
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchForNewChildren
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
name|RSGroupInfoList
return|;
block|}
for|for
control|(
name|String
name|znode
range|:
name|children
control|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|watcher
argument_list|,
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|znode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|,
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|RSGroupInfoList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toGroupInfo
argument_list|(
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|bis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read ZK GroupInfo count:"
operator|+
name|RSGroupInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|DeserializationException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|RSGroupInfoList
return|;
block|}
specifier|private
name|void
name|migrate
parameter_list|(
name|Collection
argument_list|<
name|RSGroupInfo
argument_list|>
name|groupList
parameter_list|)
block|{
name|TableDescriptors
name|tds
init|=
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|groupInfo
range|:
name|groupList
control|)
block|{
if|if
condition|(
name|groupInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SortedSet
argument_list|<
name|TableName
argument_list|>
name|failedTables
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|groupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Migrating {} in group {}"
argument_list|,
name|tableName
argument_list|,
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TableDescriptor
name|oldTd
decl_stmt|;
try|try
block|{
name|oldTd
operator|=
name|tds
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to migrate {} in group {}"
argument_list|,
name|tableName
argument_list|,
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failedTables
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|oldTd
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|oldTd
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// either we have already migrated it or that user has set the rs group using the new
comment|// code which will set the group directly on table descriptor, skip.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip migrating {} since it is already in group {}"
argument_list|,
name|tableName
argument_list|,
name|oldTd
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TableDescriptor
name|newTd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|oldTd
argument_list|)
operator|.
name|setRegionServerGroup
argument_list|(
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// This is a bit tricky. Since we know that the region server group config in
comment|// TableDescriptor will only be used at master side, it is fine to just update the table
comment|// descriptor on file system and also the cache, without reopening all the regions. This
comment|// will be much faster than the normal modifyTable. And when upgrading, we will update
comment|// master first and then region server, so after all the region servers has been reopened,
comment|// the new TableDescriptor will be loaded.
try|try
block|{
name|tds
operator|.
name|update
argument_list|(
name|newTd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to migrate {} in group {}"
argument_list|,
name|tableName
argument_list|,
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failedTables
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done migrating {}, failed tables {}"
argument_list|,
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|failedTables
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|RSGroupInfoManagerImpl
operator|.
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
init|=
name|holder
operator|.
name|groupName2Group
decl_stmt|;
name|RSGroupInfo
name|currentInfo
init|=
name|rsGroupMap
operator|.
name|get
argument_list|(
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentInfo
operator|!=
literal|null
condition|)
block|{
name|RSGroupInfo
name|newInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|currentInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|currentInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|failedTables
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|groupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|newInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to persist rs group {}"
argument_list|,
name|newInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Migrate the table rs group info from RSGroupInfo into the table descriptor
comment|// Notice that we do not want to block the initialize so this will be done in background, and
comment|// during the migrating, the rs group info maybe incomplete and cause region to be misplaced.
specifier|private
name|void
name|migrate
parameter_list|()
block|{
name|Thread
name|migrateThread
init|=
operator|new
name|Thread
argument_list|(
name|MIGRATE_THREAD_NAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Start migrating table rs group config"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|RSGroupInfo
argument_list|>
name|groups
init|=
name|holder
operator|.
name|groupName2Group
operator|.
name|values
argument_list|()
decl_stmt|;
name|boolean
name|hasTables
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|r
lambda|->
operator|!
name|r
operator|.
name|getTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasTables
condition|)
block|{
break|break;
block|}
name|migrate
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Done migrating table rs group info"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|migrateThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|migrateThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read rsgroup info from the source of truth, the hbase:rsgroup table. Update zk cache. Called on    * startup of the manager.    */
specifier|private
specifier|synchronized
name|void
name|refresh
parameter_list|(
name|boolean
name|forceOnline
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|groupList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Overwrite anything read from zk, group table is source of truth
comment|// if online read from GROUP table
if|if
condition|(
name|forceOnline
operator|||
name|isOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refreshing in Online mode."
argument_list|)
expr_stmt|;
name|groupList
operator|.
name|addAll
argument_list|(
name|retrieveGroupListFromGroupTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refreshing in Offline mode."
argument_list|)
expr_stmt|;
name|groupList
operator|.
name|addAll
argument_list|(
name|retrieveGroupListFromZookeeper
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This is added to the last of the list so it overwrites the 'default' rsgroup loaded
comment|// from region group table or zk
name|groupList
operator|.
name|add
argument_list|(
operator|new
name|RSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|getDefaultServers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate the data
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupList
control|)
block|{
name|newGroupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|resetRSGroupMap
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|updateCacheOfRSGroups
argument_list|(
name|newGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|flushConfigTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|groupMap
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// populate deletes
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|groupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|// populate puts
for|for
control|(
name|RSGroupInfo
name|gi
range|:
name|groupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|gi
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|gi
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|gi
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mutations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|multiMutate
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|flushConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|flushConfig
argument_list|(
name|holder
operator|.
name|groupName2Group
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|flushConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For offline mode persistence is still unavailable
comment|// We're refreshing in-memory state but only for servers in default group
if|if
condition|(
operator|!
name|isOnline
argument_list|()
condition|)
block|{
if|if
condition|(
name|newGroupMap
operator|==
name|holder
operator|.
name|groupName2Group
condition|)
block|{
comment|// When newGroupMap is this.rsGroupMap itself,
comment|// do not need to check default group and other groups as followed
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|oldGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|holder
operator|.
name|groupName2Group
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|oldDefaultGroup
init|=
name|oldGroupMap
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|newDefaultGroup
init|=
name|newGroupMap
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldGroupMap
operator|.
name|equals
argument_list|(
name|newGroupMap
argument_list|)
comment|/* compare both tables and servers in other groups */
operator|||
operator|!
name|oldDefaultGroup
operator|.
name|getTables
argument_list|()
operator|.
name|equals
argument_list|(
name|newDefaultGroup
operator|.
name|getTables
argument_list|()
argument_list|)
comment|/* compare tables in default group */
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only servers in default group can be updated during offline mode"
argument_list|)
throw|;
block|}
comment|// Restore newGroupMap by putting its default group back
name|newGroupMap
operator|.
name|put
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|newDefaultGroup
argument_list|)
expr_stmt|;
comment|// Refresh rsGroupMap
comment|// according to the inputted newGroupMap (an updated copy of rsGroupMap)
name|this
operator|.
name|holder
operator|=
operator|new
name|RSGroupInfoHolder
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
comment|// Do not need to update tableMap
comment|// because only the update on servers in default group is allowed above,
comment|// or IOException will be thrown
return|return;
block|}
comment|/* For online mode, persist to hbase:rsgroup and Zookeeper */
name|flushConfigTable
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
comment|// Make changes visible after having been persisted to the source of truth
name|resetRSGroupMap
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|saveRSGroupMapToZK
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|updateCacheOfRSGroups
argument_list|(
name|newGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|saveRSGroupMapToZK
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|groupBasePath
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|RS_GROUP_ZNODE
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|,
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtil
operator|.
name|ZKUtilOp
argument_list|>
name|zkOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newGroupMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|newGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|String
name|znode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RSGroupInfo
name|gi
range|:
name|newGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|gi
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|String
name|znode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|gi
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|gi
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|znode
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|znode
argument_list|,
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing ZK GroupInfo count: "
operator|+
name|zkOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|watcher
argument_list|,
name|zkOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|masterServices
operator|.
name|abort
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Make changes visible. Caller must be synchronized on 'this'.    */
specifier|private
name|void
name|resetRSGroupMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newRSGroupMap
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
operator|new
name|RSGroupInfoHolder
argument_list|(
name|newRSGroupMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update cache of rsgroups. Caller must be synchronized on 'this'.    * @param currentGroups Current list of Groups.    */
specifier|private
name|void
name|updateCacheOfRSGroups
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|currentGroups
parameter_list|)
block|{
name|this
operator|.
name|prevRSGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|prevRSGroups
operator|.
name|addAll
argument_list|(
name|currentGroups
argument_list|)
expr_stmt|;
block|}
comment|// Called by ServerEventsListenerThread. Presume it has lock on this manager when it runs.
specifier|private
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|getDefaultServers
parameter_list|()
block|{
comment|// Build a list of servers in other groups than default group, from rsGroupMap
name|Set
argument_list|<
name|Address
argument_list|>
name|serversInOtherGroup
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|listRSGroups
argument_list|()
comment|/* get from rsGroupMap */
control|)
block|{
if|if
condition|(
operator|!
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// not default group
name|serversInOtherGroup
operator|.
name|addAll
argument_list|(
name|group
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get all online servers from Zookeeper and find out servers in default group
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|defaultServers
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Address
name|server
init|=
name|Address
operator|.
name|fromParts
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|,
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serversInOtherGroup
operator|.
name|contains
argument_list|(
name|server
argument_list|)
condition|)
block|{
comment|// not in other groups
name|defaultServers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultServers
return|;
block|}
specifier|private
class|class
name|RSGroupStartupWorker
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|online
init|=
literal|false
decl_stmt|;
name|RSGroupStartupWorker
parameter_list|()
block|{
name|super
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|masterServices
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|waitForGroupTableOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GroupBasedLoadBalancer is now online"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Quit without making region group table online"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|waitForGroupTableOnline
parameter_list|()
block|{
while|while
condition|(
name|isMasterRunning
argument_list|(
name|masterServices
argument_list|)
condition|)
block|{
try|try
block|{
name|TableStateManager
name|tsm
init|=
name|masterServices
operator|.
name|getTableStateManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tsm
operator|.
name|isTablePresent
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
condition|)
block|{
name|createRSGroupTable
argument_list|()
expr_stmt|;
block|}
comment|// try reading from the table
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup table={} is online, refreshing cached information"
argument_list|,
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|online
operator|=
literal|true
expr_stmt|;
comment|// flush any inconsistencies between ZK and HTable
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|flushConfig
argument_list|()
expr_stmt|;
comment|// migrate after we are online.
name|migrate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to perform check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// 100ms is short so let's just ignore the interrupt
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|createRSGroupTable
parameter_list|()
throws|throws
name|IOException
block|{
name|OptionalLong
name|optProcId
init|=
name|masterServices
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|instanceof
name|CreateTableProcedure
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|(
name|CreateTableProcedure
operator|)
name|p
argument_list|)
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|Procedure
operator|::
name|getProcId
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|long
name|procId
decl_stmt|;
if|if
condition|(
name|optProcId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|procId
operator|=
name|optProcId
operator|.
name|getAsLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|procId
operator|=
name|masterServices
operator|.
name|createSystemTable
argument_list|(
name|RSGROUP_TABLE_DESC
argument_list|)
expr_stmt|;
block|}
comment|// wait for region to be online
name|int
name|tries
init|=
literal|600
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
operator|)
operator|&&
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|isRunning
argument_list|()
operator|&&
name|tries
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait interrupted "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|tries
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create group table in a given time."
argument_list|)
throw|;
block|}
else|else
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create group table. "
operator|+
name|MasterProcedureUtil
operator|.
name|unwrapRemoteIOException
argument_list|(
name|result
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|online
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMasterRunning
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
return|return
operator|!
name|masterServices
operator|.
name|isAborted
argument_list|()
operator|&&
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
return|;
block|}
specifier|private
name|void
name|multiMutate
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|MutateRowsRequest
operator|.
name|Builder
name|builder
init|=
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|builder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|builder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"multiMutate doesn't support "
operator|+
name|mutation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|MutateRowsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
decl_stmt|;
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
expr|<
name|MultiRowMutationService
argument_list|,
name|MutateRowsResponse
operator|>
name|coprocessorService
argument_list|(
name|MultiRowMutationService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|done
parameter_list|)
lambda|->
name|stub
operator|.
name|mutateRows
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
argument_list|,
name|ROW_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|ConstraintException
block|{
if|if
condition|(
operator|!
name|groupName
operator|.
name|matches
argument_list|(
literal|"[a-zA-Z0-9_]+"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup name should only contain alphanumeric characters"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupForTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|holder
operator|.
name|tableName2Group
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Check if the set of servers are belong to dead servers list or online servers list.    * @param servers servers to remove    */
specifier|private
name|void
name|checkForDeadOrOnlineServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This uglyness is because we only have Address, not ServerName.
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|drainingServers
init|=
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDrainingServersList
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Only online but not decommissioned servers are really online
if|if
condition|(
operator|!
name|drainingServers
operator|.
name|contains
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|onlineServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Address
argument_list|>
name|deadServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|copyServerNames
argument_list|()
control|)
block|{
name|deadServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Address
name|address
range|:
name|servers
control|)
block|{
if|if
condition|(
name|onlineServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is an online server, not allowed to remove."
argument_list|)
throw|;
block|}
if|if
condition|(
name|deadServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is on the dead servers list,"
operator|+
literal|" Maybe it will come back again, not allowed to remove."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkOnlineServersOnly
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This uglyness is because we only have Address, not ServerName.
comment|// Online servers are keyed by ServerName.
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|onlineServers
operator|.
name|add
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Address
name|address
range|:
name|servers
control|)
block|{
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Server "
operator|+
name|address
operator|+
literal|" is not an online server in 'default' RSGroup."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * @return List of Regions associated with this<code>server</code>.    */
specifier|private
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegions
parameter_list|(
specifier|final
name|Address
name|server
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|el
range|:
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|addRegion
argument_list|(
name|regions
argument_list|,
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RegionStateNode
name|state
range|:
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
if|if
condition|(
name|state
operator|.
name|getRegionLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|state
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|addRegion
argument_list|(
name|regions
argument_list|,
name|state
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|void
name|addRegion
parameter_list|(
specifier|final
name|LinkedList
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|RegionInfo
name|hri
parameter_list|)
block|{
comment|// If meta, move it last otherwise other unassigns fail because meta is not
comment|// online for them to update state in. This is dodgy. Needs to be made more
comment|// robust. See TODO below.
if|if
condition|(
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|regions
operator|.
name|addLast
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regions
operator|.
name|addFirst
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Move every region from servers which are currently located on these servers, but should not be    * located there.    * @param servers the servers that will move to new group    * @param targetGroupName the target group name    * @throws IOException if moving the server and tables fail    */
specifier|private
name|void
name|moveServerRegionsFromGroup
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroupName
parameter_list|)
throws|throws
name|IOException
block|{
name|moveRegionsBetweenGroups
argument_list|(
name|servers
argument_list|,
name|targetGroupName
argument_list|,
name|rs
lambda|->
name|getRegions
argument_list|(
name|rs
argument_list|)
argument_list|,
name|info
lambda|->
block|{
lambda|try
block|{
name|String
name|groupName
init|=
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|masterServices
argument_list|,
name|this
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|RSGroupInfo
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
return|return
name|groupName
operator|.
name|equals
argument_list|(
name|targetGroupName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to test group for region {} and target group {}"
argument_list|,
name|info
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
operator|,
name|rs
lambda|->
name|rs
operator|.
name|getHostname
argument_list|()
block|)
class|;
end_class

begin_function
unit|}    private
parameter_list|<
name|T
parameter_list|>
name|void
name|moveRegionsBetweenGroups
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|regionsOwners
parameter_list|,
name|String
name|targetGroupName
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegionsInfo
parameter_list|,
name|Function
argument_list|<
name|RegionInfo
argument_list|,
name|Boolean
argument_list|>
name|validation
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|getOwnerName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasRegionsToMove
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|allOwners
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|regionsOwners
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedRegions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|IOException
name|toThrow
init|=
literal|null
decl_stmt|;
do|do
block|{
name|hasRegionsToMove
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iter
init|=
name|allOwners
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|T
name|owner
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Get regions that are associated with this server and filter regions by group tables.
for|for
control|(
name|RegionInfo
name|region
range|:
name|getRegionsInfo
operator|.
name|apply
argument_list|(
name|owner
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|validation
operator|.
name|apply
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving region {}, which do not belong to RSGroup {}"
argument_list|,
name|region
operator|.
name|getShortNameToLog
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|move
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|failedRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Move region {} from group failed, will retry, current retry time is {}"
argument_list|,
name|region
operator|.
name|getShortNameToLog
argument_list|()
argument_list|,
name|retry
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|toThrow
operator|=
name|ioe
expr_stmt|;
name|failedRegions
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|region
argument_list|)
operator|.
name|isFailedOpen
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|hasRegionsToMove
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasRegionsToMove
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No more regions to move from {} to RSGroup"
argument_list|,
name|getOwnerName
operator|.
name|apply
argument_list|(
name|owner
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|retry
operator|++
expr_stmt|;
try|try
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|hasRegionsToMove
operator|&&
name|retry
operator|<=
name|masterServices
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|FAILED_MOVE_MAX_RETRY
argument_list|,
name|DEFAULT_MAX_RETRY_VALUE
argument_list|)
condition|)
do|;
comment|//has up to max retry time or there are no more regions to move
if|if
condition|(
name|hasRegionsToMove
condition|)
block|{
comment|// print failed moved regions, for later process conveniently
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"move regions for group %s failed, failed regions: %s"
argument_list|,
name|targetGroupName
argument_list|,
name|failedRegions
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|msg
operator|+
literal|", just record the last failed region's cause, more details in server log"
argument_list|,
name|toThrow
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|isTableInGroup
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tablesInGroupCache
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|RSGroupUtil
operator|.
name|getRSGroupInfo
argument_list|(
name|masterServices
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
operator|.
name|map
argument_list|(
name|RSGroupInfo
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|tablesInGroupCache
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rsGroupGetRegionsInTransition
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rit
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionStateNode
name|regionNode
range|:
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
name|TableName
name|tn
init|=
name|regionNode
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTableInGroup
argument_list|(
name|tn
argument_list|,
name|groupName
argument_list|,
name|tablesInGroupCache
argument_list|)
condition|)
block|{
name|rit
operator|.
name|put
argument_list|(
name|regionNode
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|regionNode
operator|.
name|toRegionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rit
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getRSGroupAssignmentsByTable
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesInGroupCache
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|region
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|ServerName
name|server
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTableInGroup
argument_list|(
name|tn
argument_list|,
name|groupName
argument_list|,
name|tablesInGroupCache
argument_list|)
condition|)
block|{
name|result
operator|.
name|computeIfAbsent
argument_list|(
name|tn
argument_list|,
name|k
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|computeIfAbsent
argument_list|(
name|server
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rsGroupInfo
operator|.
name|containsServer
argument_list|(
name|serverName
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|map
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|serverName
argument_list|,
name|k
lambda|->
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|balanceRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerManager
name|serverManager
init|=
name|masterServices
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|masterServices
operator|.
name|getLoadBalancer
argument_list|()
decl_stmt|;
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|balancer
init|)
block|{
comment|// If balance not true, don't run balancer.
if|if
condition|(
operator|!
name|masterServices
operator|.
name|isBalancerOn
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Only allow one balance run at at time.
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|groupRIT
init|=
name|rsGroupGetRegionsInTransition
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupRIT
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because {} region(s) in transition: {}"
argument_list|,
name|groupRIT
operator|.
name|size
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because processing dead regionserver(s): {}"
argument_list|,
name|serverManager
operator|.
name|getDeadServers
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// We balance per group instead of per table
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|assignmentsByTable
init|=
name|getRSGroupAssignmentsByTable
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|tableMap
range|:
name|assignmentsByTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating partial plan for table {} : {}"
argument_list|,
name|tableMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialPlans
init|=
name|balancer
operator|.
name|balanceCluster
argument_list|(
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partial plan for table {} : {}"
argument_list|,
name|tableMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|partialPlans
argument_list|)
expr_stmt|;
if|if
condition|(
name|partialPlans
operator|!=
literal|null
condition|)
block|{
name|plans
operator|.
name|addAll
argument_list|(
name|partialPlans
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|balancerRan
init|=
operator|!
name|plans
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|balancerRan
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance {} starting with plan count: {}"
argument_list|,
name|groupName
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|masterServices
operator|.
name|executeRegionPlansWithThrottling
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance "
operator|+
name|groupName
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
return|return
name|balancerRan
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|moveTablesAndWait
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|procIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tables
control|)
block|{
name|TableDescriptor
name|oldTd
init|=
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTd
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TableDescriptor
name|newTd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|oldTd
argument_list|)
operator|.
name|setRegionServerGroup
argument_list|(
name|targetGroup
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|masterServices
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|newTd
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|procId
range|:
name|procIds
control|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getProcedure
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ProcedureSyncWait
operator|.
name|waitForProcedureToCompleteIOE
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
name|proc
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setRSGroup
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|moveTablesAndWait
argument_list|(
name|tables
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The list of servers to move cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// For some reason this difference between null servers and isEmpty is important distinction.
comment|// TODO. Why? Stuff breaks if I equate them.
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|targetGroupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup cannot be null."
argument_list|)
throw|;
block|}
name|getRSGroupInfo
argument_list|(
name|targetGroupName
argument_list|)
expr_stmt|;
comment|// Hold a lock on the manager instance while moving servers to prevent
comment|// another writer changing our state while we are working.
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Presume first server's source group. Later ensure all servers are from this group.
name|Address
name|firstServer
init|=
name|servers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|srcGrp
init|=
name|getRSGroupOfServer
argument_list|(
name|firstServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcGrp
operator|==
literal|null
condition|)
block|{
comment|// Be careful. This exception message is tested for in TestRSGroupsBase...
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Source RSGroup for server "
operator|+
name|firstServer
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
comment|// Only move online servers (when moving from 'default') or servers from other
comment|// groups. This prevents bogus servers from entering groups
if|if
condition|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|servers
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
argument_list|)
throw|;
block|}
name|checkOnlineServersOnly
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all servers are of same rsgroup.
for|for
control|(
name|Address
name|server
range|:
name|servers
control|)
block|{
name|String
name|tmpGroup
init|=
name|getRSGroupOfServer
argument_list|(
name|server
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tmpGroup
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Move server request should only come from one source "
operator|+
literal|"RSGroup. Expecting only "
operator|+
name|srcGrp
operator|.
name|getName
argument_list|()
operator|+
literal|" but contains "
operator|+
name|tmpGroup
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|servers
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// check if there are still tables reference this group
for|for
control|(
name|TableDescriptor
name|td
range|:
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|optGroupName
init|=
name|td
operator|.
name|getRegionServerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|optGroupName
operator|.
name|isPresent
argument_list|()
operator|&&
name|optGroupName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Cannot leave a RSGroup "
operator|+
name|srcGrp
operator|.
name|getName
argument_list|()
operator|+
literal|" that contains tables('"
operator|+
name|td
operator|.
name|getTableName
argument_list|()
operator|+
literal|"' at least) without servers to host them."
argument_list|)
throw|;
block|}
block|}
block|}
comment|// MovedServers may be< passed in 'servers'.
name|Set
argument_list|<
name|Address
argument_list|>
name|movedServers
init|=
name|moveServers
argument_list|(
name|servers
argument_list|,
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
decl_stmt|;
name|moveServerRegionsFromGroup
argument_list|(
name|movedServers
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Move servers done: {} => {}"
argument_list|,
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

