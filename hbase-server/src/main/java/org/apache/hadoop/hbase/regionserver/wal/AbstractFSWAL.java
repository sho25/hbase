begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
operator|.
name|WAL_FILE_NAME_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|RingBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TimeoutIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|MemorySizeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
operator|.
name|TraceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALPrettyPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
operator|.
name|WriterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link WAL} to go against {@link FileSystem}; i.e. keep WALs in HDFS. Only one  * WAL is ever being written at a time. When a WAL hits a configured maximum size, it is rolled.  * This is done internal to the implementation.  *<p>  * As data is flushed from the MemStore to other on-disk structures (files sorted by key, hfiles), a  * WAL becomes obsolete. We can let go of all the log edits/entries for a given HRegion-sequence id.  * A bunch of work in the below is done keeping account of these region sequence ids -- what is  * flushed out to hfiles, and what is yet in WAL and in memory only.  *<p>  * It is only practical to delete entire files. Thus, we delete an entire on-disk file  *<code>F</code> when all of the edits in<code>F</code> have a log-sequence-id that's older  * (smaller) than the most-recent flush.  *<p>  * To read an WAL, call  * {@link WALFactory#createReader(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path)}. *  *<h2>Failure Semantic</h2> If an exception on append or sync, roll the WAL because the current WAL  * is now a lame duck; any more appends or syncs will fail also with the same original exception. If  * we have made successful appends to the WAL and we then are unable to sync them, our current  * semantic is to return error to the client that the appends failed but also to abort the current  * context, usually the hosting server. We need to replay the WALs.<br>  * TODO: Change this semantic. A roll of WAL may be sufficient as long as we have flagged client  * that the append failed.<br>  * TODO: replication may pick up these last edits though they have been marked as failed append  * (Need to keep our own file lengths, not rely on HDFS).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|AbstractFSWAL
parameter_list|<
name|W
extends|extends
name|WriterBase
parameter_list|>
implements|implements
name|WAL
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractFSWAL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_SLOW_SYNC_TIME_MS
init|=
literal|100
decl_stmt|;
comment|// in ms
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WAL_SYNC_TIMEOUT_MS
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// in ms, 5min
comment|/**    * file system instance    */
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * WAL directory, where all WAL files would be placed.    */
specifier|protected
specifier|final
name|Path
name|walDir
decl_stmt|;
comment|/**    * dir path where old logs are kept.    */
specifier|protected
specifier|final
name|Path
name|walArchiveDir
decl_stmt|;
comment|/**    * Matches just those wal files that belong to this wal instance.    */
specifier|protected
specifier|final
name|PathFilter
name|ourFiles
decl_stmt|;
comment|/**    * Prefix of a WAL file, usually the region server name it is hosted on.    */
specifier|protected
specifier|final
name|String
name|walFilePrefix
decl_stmt|;
comment|/**    * Suffix included on generated wal file names    */
specifier|protected
specifier|final
name|String
name|walFileSuffix
decl_stmt|;
comment|/**    * Prefix used when checking for wal membership.    */
specifier|protected
specifier|final
name|String
name|prefixPathStr
decl_stmt|;
specifier|protected
specifier|final
name|WALCoprocessorHost
name|coprocessorHost
decl_stmt|;
comment|/**    * conf object    */
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/** Listeners that are called on WAL events. */
specifier|protected
specifier|final
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Class that does accounting of sequenceids in WAL subsystem. Holds oldest outstanding sequence    * id as yet not flushed as well as the most recent edit sequence id appended to the WAL. Has    * facility for answering questions such as "Is it safe to GC a WAL?".    */
specifier|protected
specifier|final
name|SequenceIdAccounting
name|sequenceIdAccounting
init|=
operator|new
name|SequenceIdAccounting
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|long
name|slowSyncNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|walSyncTimeoutNs
decl_stmt|;
comment|// If> than this size, roll the log.
specifier|protected
specifier|final
name|long
name|logrollsize
decl_stmt|;
comment|/*    * If more than this many logs, force flush of oldest region to oldest edit goes to disk. If too    * many and we crash, then will take forever replaying. Keep the number of logs tidy.    */
specifier|protected
specifier|final
name|int
name|maxLogs
decl_stmt|;
comment|/**    * This lock makes sure only one log roll runs at a time. Should not be taken while any other lock    * is held. We don't just use synchronized because that results in bogus and tedious findbugs    * warning when it thinks synchronized controls writer thread safety. It is held when we are    * actually rolling the log. It is checked when we are looking to see if we should roll the log or    * not.    */
specifier|protected
specifier|final
name|ReentrantLock
name|rollWriterLock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// The timestamp (in ms) when the log file was created.
specifier|protected
specifier|final
name|AtomicLong
name|filenum
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Number of transactions in the current Wal.
specifier|protected
specifier|final
name|AtomicInteger
name|numEntries
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The highest known outstanding unsync'd WALEdit transaction id. Usually, we use a queue to pass    * WALEdit to background consumer thread, and the transaction id is the sequence number of the    * corresponding entry in queue.    */
specifier|protected
specifier|volatile
name|long
name|highestUnsyncedTxid
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Updated to the transaction id of the last successful sync call. This can be less than    * {@link #highestUnsyncedTxid} for case where we have an append where a sync has not yet come in    * for it.    */
specifier|protected
specifier|final
name|AtomicLong
name|highestSyncedTxid
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The total size of wal    */
specifier|protected
specifier|final
name|AtomicLong
name|totalLogSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Current log file.    */
specifier|volatile
name|W
name|writer
decl_stmt|;
comment|// Last time to check low replication on hlog's pipeline
specifier|private
name|long
name|lastTimeCheckLowReplication
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|shutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * WAL Comparator; it compares the timestamp (log filenum), present in the log file name. Throws    * an IllegalArgumentException if used to compare paths from different wals.    */
specifier|final
name|Comparator
argument_list|<
name|Path
argument_list|>
name|LOG_NAME_COMPARATOR
init|=
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|Long
operator|.
name|compare
argument_list|(
name|getFileNumFromFileName
argument_list|(
name|o1
argument_list|)
argument_list|,
name|getFileNumFromFileName
argument_list|(
name|o2
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|WalProps
block|{
comment|/**      * Map the encoded region name to the highest sequence id. Contain all the regions it has      * entries of      */
specifier|public
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|encodedName2HighestSequenceId
decl_stmt|;
comment|/**      * The log file size. Notice that the size may not be accurate if we do asynchronous close in      * sub classes.      */
specifier|public
specifier|final
name|long
name|logSize
decl_stmt|;
specifier|public
name|WalProps
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|encodedName2HighestSequenceId
parameter_list|,
name|long
name|logSize
parameter_list|)
block|{
name|this
operator|.
name|encodedName2HighestSequenceId
operator|=
name|encodedName2HighestSequenceId
expr_stmt|;
name|this
operator|.
name|logSize
operator|=
name|logSize
expr_stmt|;
block|}
block|}
comment|/**    * Map of WAL log file to properties. The map is sorted by the log file creation timestamp    * (contained in the log file name).    */
specifier|protected
name|ConcurrentNavigableMap
argument_list|<
name|Path
argument_list|,
name|WalProps
argument_list|>
name|walFile2Props
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|(
name|LOG_NAME_COMPARATOR
argument_list|)
decl_stmt|;
comment|/**    * Map of {@link SyncFuture}s keyed by Handler objects. Used so we reuse SyncFutures.    *<p>    * TODO: Reuse FSWALEntry's rather than create them anew each time as we do SyncFutures here.    *<p>    * TODO: Add a FSWalEntry and SyncFuture as thread locals on handlers rather than have them get    * them from this Map?    */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Thread
argument_list|,
name|SyncFuture
argument_list|>
name|syncFuturesByHandler
decl_stmt|;
comment|/**    * The class name of the runtime implementation, used as prefix for logging/tracing.    *<p>    * Performance testing shows getClass().getSimpleName() might be a bottleneck so we store it here,    * refer to HBASE-17676 for more details    *</p>    */
specifier|protected
specifier|final
name|String
name|implClassName
decl_stmt|;
specifier|public
name|long
name|getFilenum
parameter_list|()
block|{
return|return
name|this
operator|.
name|filenum
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * A log file has a creation timestamp (in ms) in its file name ({@link #filenum}. This helper    * method returns the creation timestamp from a given log file. It extracts the timestamp assuming    * the filename is created with the {@link #computeFilename(long filenum)} method.    * @return timestamp, as in the log file name.    */
specifier|protected
name|long
name|getFileNumFromFileName
parameter_list|(
name|Path
name|fileName
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fileName
argument_list|,
literal|"file name can't be null"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ourFiles
operator|.
name|accept
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The log file "
operator|+
name|fileName
operator|+
literal|" doesn't belong to this WAL. ("
operator|+
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|fileNameString
init|=
name|fileName
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|chompedPath
init|=
name|fileNameString
operator|.
name|substring
argument_list|(
name|prefixPathStr
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|fileNameString
operator|.
name|length
argument_list|()
operator|-
name|walFileSuffix
operator|.
name|length
argument_list|()
operator|)
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|chompedPath
argument_list|)
return|;
block|}
specifier|private
name|int
name|calculateMaxLogFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|logRollSize
parameter_list|)
block|{
name|Pair
argument_list|<
name|Long
argument_list|,
name|MemoryType
argument_list|>
name|globalMemstoreSize
init|=
name|MemorySizeUtil
operator|.
name|getGlobalMemStoreSize
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|globalMemstoreSize
operator|.
name|getFirst
argument_list|()
operator|*
literal|2
operator|)
operator|/
name|logRollSize
argument_list|)
return|;
block|}
comment|// must be power of 2
specifier|protected
specifier|final
name|int
name|getPreallocatedEventCount
parameter_list|()
block|{
comment|// Preallocate objects to use on the ring buffer. The way that appends and syncs work, we will
comment|// be stuck and make no progress if the buffer is filled with appends only and there is no
comment|// sync. If no sync, then the handlers will be outstanding just waiting on sync completion
comment|// before they return.
name|int
name|preallocatedEventCount
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.wal.disruptor.event.count"
argument_list|,
literal|1024
operator|*
literal|16
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|preallocatedEventCount
operator|>=
literal|0
argument_list|,
literal|"hbase.regionserver.wal.disruptor.event.count must> 0"
argument_list|)
expr_stmt|;
name|int
name|floor
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|preallocatedEventCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|floor
operator|==
name|preallocatedEventCount
condition|)
block|{
return|return
name|floor
return|;
block|}
comment|// max capacity is 1<< 30
if|if
condition|(
name|floor
operator|>=
literal|1
operator|<<
literal|29
condition|)
block|{
return|return
literal|1
operator|<<
literal|30
return|;
block|}
return|return
name|floor
operator|<<
literal|1
return|;
block|}
specifier|protected
name|AbstractFSWAL
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|String
name|logDir
parameter_list|,
specifier|final
name|String
name|archiveDir
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
parameter_list|,
specifier|final
name|boolean
name|failIfWALExists
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|FailedLogCloseException
throws|,
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|walDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|walArchiveDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|archiveDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|walDir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|walDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to mkdir "
operator|+
name|walDir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to mkdir "
operator|+
name|this
operator|.
name|walArchiveDir
argument_list|)
throw|;
block|}
block|}
comment|// If prefix is null||empty then just name it wal
name|this
operator|.
name|walFilePrefix
operator|=
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"wal"
else|:
name|URLEncoder
operator|.
name|encode
argument_list|(
name|prefix
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
comment|// we only correctly differentiate suffices when numeric ones start with '.'
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|suffix
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|!
operator|(
name|suffix
operator|.
name|startsWith
argument_list|(
name|WAL_FILE_NAME_DELIMITER
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"WAL suffix must start with '"
operator|+
name|WAL_FILE_NAME_DELIMITER
operator|+
literal|"' but instead was '"
operator|+
name|suffix
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Now that it exists, set the storage policy for the entire directory of wal files related to
comment|// this FSHLog instance
name|CommonFSUtils
operator|.
name|setStoragePolicy
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|walDir
argument_list|,
name|HConstants
operator|.
name|WAL_STORAGE_POLICY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_WAL_STORAGE_POLICY
argument_list|)
expr_stmt|;
name|this
operator|.
name|walFileSuffix
operator|=
operator|(
name|suffix
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|URLEncoder
operator|.
name|encode
argument_list|(
name|suffix
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixPathStr
operator|=
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|walFilePrefix
operator|+
name|WAL_FILE_NAME_DELIMITER
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|ourFiles
operator|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
specifier|final
name|Path
name|fileName
parameter_list|)
block|{
comment|// The path should start with dir/<prefix> and end with our suffix
specifier|final
name|String
name|fileNameString
init|=
name|fileName
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileNameString
operator|.
name|startsWith
argument_list|(
name|prefixPathStr
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|walFileSuffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// in the case of the null suffix, we need to ensure the filename ends with a timestamp.
return|return
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|fileNameString
operator|.
name|substring
argument_list|(
name|prefixPathStr
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fileNameString
operator|.
name|endsWith
argument_list|(
name|walFileSuffix
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
if|if
condition|(
name|failIfWALExists
condition|)
block|{
specifier|final
name|FileStatus
index|[]
name|walFiles
init|=
name|CommonFSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|walDir
argument_list|,
name|ourFiles
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|walFiles
operator|&&
literal|0
operator|!=
name|walFiles
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target WAL already exists within directory "
operator|+
name|walDir
argument_list|)
throw|;
block|}
block|}
comment|// Register listeners. TODO: Should this exist anymore? We have CPs?
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|listeners
control|)
block|{
name|registerWALActionsListener
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|coprocessorHost
operator|=
operator|new
name|WALCoprocessorHost
argument_list|(
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Schedule a WAL roll when the WAL is 50% of the HDFS block size. Scheduling at 50% of block
comment|// size should make it so WAL rolls before we get to the end-of-block (Block transitions cost
comment|// some latency). In hbase-1 we did this differently. We scheduled a roll when we hit 95% of
comment|// the block size but experience from the field has it that this was not enough time for the
comment|// roll to happen before end-of-block. So the new accounting makes WALs of about the same
comment|// size as those made in hbase-1 (to prevent surprise), we now have default block size as
comment|// 2 times the DFS default: i.e. 2 * DFS default block size rolling at 50% full will generally
comment|// make similar size logs to 1 * DFS default block size rolling at 95% full. See HBASE-19148.
specifier|final
name|long
name|blocksize
init|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|CommonFSUtils
operator|.
name|getDefaultBlockSize
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|walDir
argument_list|)
operator|*
literal|2
argument_list|)
decl_stmt|;
name|this
operator|.
name|logrollsize
operator|=
call|(
name|long
call|)
argument_list|(
name|blocksize
operator|*
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regionserver.logroll.multiplier"
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|maxLogsDefined
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|maxLogsDefined
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'hbase.regionserver.maxlogs' was deprecated."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxLogs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|32
argument_list|,
name|calculateMaxLogFiles
argument_list|(
name|conf
argument_list|,
name|logrollsize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WAL configuration: blocksize="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|blocksize
argument_list|)
operator|+
literal|", rollsize="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|this
operator|.
name|logrollsize
argument_list|)
operator|+
literal|", prefix="
operator|+
name|this
operator|.
name|walFilePrefix
operator|+
literal|", suffix="
operator|+
name|walFileSuffix
operator|+
literal|", logDir="
operator|+
name|this
operator|.
name|walDir
operator|+
literal|", archiveDir="
operator|+
name|this
operator|.
name|walArchiveDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|slowSyncNs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.slowsync.ms"
argument_list|,
name|DEFAULT_SLOW_SYNC_TIME_MS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|walSyncTimeoutNs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.sync.timeout"
argument_list|,
name|DEFAULT_WAL_SYNC_TIMEOUT_MS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|maxHandlersCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_COUNT
argument_list|,
literal|200
argument_list|)
decl_stmt|;
comment|// Presize our map of SyncFutures by handler objects.
name|this
operator|.
name|syncFuturesByHandler
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|maxHandlersCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|implClassName
operator|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerWALActionsListener
parameter_list|(
name|WALActionsListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unregisterWALActionsListener
parameter_list|(
name|WALActionsListener
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|WALCoprocessorHost
name|getCoprocessorHost
parameter_list|()
block|{
return|return
name|coprocessorHost
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|startCacheFlush
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|families
parameter_list|)
block|{
return|return
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|startCacheFlush
argument_list|(
name|encodedRegionName
argument_list|,
name|families
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|startCacheFlush
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|familyToSeq
parameter_list|)
block|{
return|return
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|startCacheFlush
argument_list|(
name|encodedRegionName
argument_list|,
name|familyToSeq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completeCacheFlush
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|completeCacheFlush
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortCacheFlush
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|abortCacheFlush
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEarliestMemStoreSeqNum
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
block|{
comment|// Used by tests. Deprecated as too subtle for general usage.
return|return
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|getLowestSequenceId
argument_list|(
name|encodedRegionName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEarliestMemStoreSeqNum
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|familyName
parameter_list|)
block|{
comment|// This method is used by tests and for figuring if we should flush or not because our
comment|// sequenceids are too old. It is also used reporting the master our oldest sequenceid for use
comment|// figuring what edits can be skipped during log recovery. getEarliestMemStoreSequenceId
comment|// from this.sequenceIdAccounting is looking first in flushingOldestStoreSequenceIds, the
comment|// currently flushing sequence ids, and if anything found there, it is returning these. This is
comment|// the right thing to do for the reporting oldest sequenceids to master; we won't skip edits if
comment|// we crash during the flush. For figuring what to flush, we might get requeued if our sequence
comment|// id is old even though we are currently flushing. This may mean we do too much flushing.
return|return
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|getLowestSequenceId
argument_list|(
name|encodedRegionName
argument_list|,
name|familyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
index|[]
name|rollWriter
parameter_list|()
throws|throws
name|FailedLogCloseException
throws|,
name|IOException
block|{
return|return
name|rollWriter
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * This is a convenience method that computes a new filename with a given file-number.    * @param filenum to use    * @return Path    */
specifier|protected
name|Path
name|computeFilename
parameter_list|(
specifier|final
name|long
name|filenum
parameter_list|)
block|{
if|if
condition|(
name|filenum
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WAL file number can't be< 0"
argument_list|)
throw|;
block|}
name|String
name|child
init|=
name|walFilePrefix
operator|+
name|WAL_FILE_NAME_DELIMITER
operator|+
name|filenum
operator|+
name|walFileSuffix
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|child
argument_list|)
return|;
block|}
comment|/**    * This is a convenience method that computes a new filename with a given using the current WAL    * file-number    * @return Path    */
specifier|public
name|Path
name|getCurrentFileName
parameter_list|()
block|{
return|return
name|computeFilename
argument_list|(
name|this
operator|.
name|filenum
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * retrieve the next path to use for writing. Increments the internal filenum.    */
specifier|private
name|Path
name|getNewPath
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|filenum
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|newPath
init|=
name|getCurrentFileName
argument_list|()
decl_stmt|;
while|while
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|newPath
argument_list|)
condition|)
block|{
name|this
operator|.
name|filenum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|newPath
operator|=
name|getCurrentFileName
argument_list|()
expr_stmt|;
block|}
return|return
name|newPath
return|;
block|}
annotation|@
name|VisibleForTesting
name|Path
name|getOldPath
parameter_list|()
block|{
name|long
name|currentFilenum
init|=
name|this
operator|.
name|filenum
operator|.
name|get
argument_list|()
decl_stmt|;
name|Path
name|oldPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentFilenum
operator|>
literal|0
condition|)
block|{
comment|// ComputeFilename will take care of meta wal filename
name|oldPath
operator|=
name|computeFilename
argument_list|(
name|currentFilenum
argument_list|)
expr_stmt|;
block|}
comment|// I presume if currentFilenum is<= 0, this is first file and null for oldPath if fine?
return|return
name|oldPath
return|;
block|}
comment|/**    * Tell listeners about pre log roll.    */
specifier|private
name|void
name|tellListenersAboutPreLogRoll
parameter_list|(
specifier|final
name|Path
name|oldPath
parameter_list|,
specifier|final
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|coprocessorHost
operator|.
name|preWALRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|preLogRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tell listeners about post log roll.    */
specifier|private
name|void
name|tellListenersAboutPostLogRoll
parameter_list|(
specifier|final
name|Path
name|oldPath
parameter_list|,
specifier|final
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|postLogRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
name|coprocessorHost
operator|.
name|postWALRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
comment|// public only until class moves to o.a.h.h.wal
comment|/** @return the number of rolled log files */
specifier|public
name|int
name|getNumRolledLogFiles
parameter_list|()
block|{
return|return
name|walFile2Props
operator|.
name|size
argument_list|()
return|;
block|}
comment|// public only until class moves to o.a.h.h.wal
comment|/** @return the number of log files in use */
specifier|public
name|int
name|getNumLogFiles
parameter_list|()
block|{
comment|// +1 for current use log
return|return
name|getNumRolledLogFiles
argument_list|()
operator|+
literal|1
return|;
block|}
comment|/**    * If the number of un-archived WAL files is greater than maximum allowed, check the first    * (oldest) WAL file, and returns those regions which should be flushed so that it can be    * archived.    * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.    */
name|byte
index|[]
index|[]
name|findRegionsToForceFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|regions
init|=
literal|null
decl_stmt|;
name|int
name|logCount
init|=
name|getNumRolledLogFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|logCount
operator|>
name|this
operator|.
name|maxLogs
operator|&&
name|logCount
operator|>
literal|0
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|WalProps
argument_list|>
name|firstWALEntry
init|=
name|this
operator|.
name|walFile2Props
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|regions
operator|=
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|findLower
argument_list|(
name|firstWALEntry
operator|.
name|getValue
argument_list|()
operator|.
name|encodedName2HighestSequenceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Too many WALs; count="
operator|+
name|logCount
operator|+
literal|", max="
operator|+
name|this
operator|.
name|maxLogs
operator|+
literal|"; forcing flush of "
operator|+
name|regions
operator|.
name|length
operator|+
literal|" regions(s): "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/**    * Archive old logs. A WAL is eligible for archiving if all its WALEdits have been flushed.    */
specifier|private
name|void
name|cleanOldLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
argument_list|>
name|logsToArchive
init|=
literal|null
decl_stmt|;
comment|// For each log file, look at its Map of regions to highest sequence id; if all sequence ids
comment|// are older than what is currently in memory, the WAL can be GC'd.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|WalProps
argument_list|>
name|e
range|:
name|this
operator|.
name|walFile2Props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|log
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|sequenceNums
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|encodedName2HighestSequenceId
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|areAllLower
argument_list|(
name|sequenceNums
argument_list|)
condition|)
block|{
if|if
condition|(
name|logsToArchive
operator|==
literal|null
condition|)
block|{
name|logsToArchive
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|logsToArchive
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|log
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|logSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"WAL file ready for archiving "
operator|+
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|logsToArchive
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
name|logAndSize
range|:
name|logsToArchive
control|)
block|{
name|this
operator|.
name|totalLogSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|logAndSize
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|archiveLogFile
argument_list|(
name|logAndSize
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|walFile2Props
operator|.
name|remove
argument_list|(
name|logAndSize
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * only public so WALSplitter can use.    * @return archived location of a WAL file with the given path p    */
specifier|public
specifier|static
name|Path
name|getWALArchivePath
parameter_list|(
name|Path
name|archiveDir
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|archiveDir
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|archiveLogFile
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|newPath
init|=
name|getWALArchivePath
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// Tell our listeners that a log is going to be archived.
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|preLogArchive
argument_list|(
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Archiving "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|CommonFSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
throw|;
block|}
comment|// Tell our listeners that a log has been archived.
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|postLogArchive
argument_list|(
name|p
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|logRollAndSetupWalProps
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|,
name|long
name|oldFileLen
parameter_list|)
block|{
name|int
name|oldNumEntries
init|=
name|this
operator|.
name|numEntries
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|newPathString
init|=
name|newPath
operator|!=
literal|null
condition|?
name|CommonFSUtils
operator|.
name|getPath
argument_list|(
name|newPath
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|oldPath
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|walFile2Props
operator|.
name|put
argument_list|(
name|oldPath
argument_list|,
operator|new
name|WalProps
argument_list|(
name|this
operator|.
name|sequenceIdAccounting
operator|.
name|resetHighest
argument_list|()
argument_list|,
name|oldFileLen
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalLogSize
operator|.
name|addAndGet
argument_list|(
name|oldFileLen
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolled WAL {} with entries={}, filesize={}; new WAL {}"
argument_list|,
name|CommonFSUtils
operator|.
name|getPath
argument_list|(
name|oldPath
argument_list|)
argument_list|,
name|oldNumEntries
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|oldFileLen
argument_list|)
argument_list|,
name|newPathString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New WAL {}"
argument_list|,
name|newPathString
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<p>    * Cleans up current writer closing it and then puts in place the passed in    *<code>nextWriter</code>.    *</p>    *<p>    *<ul>    *<li>In the case of creating a new WAL, oldPath will be null.</li>    *<li>In the case of rolling over from one file to the next, none of the parameters will be null.    *</li>    *<li>In the case of closing out this FSHLog with no further use newPath and nextWriter will be    * null.</li>    *</ul>    *</p>    * @param oldPath may be null    * @param newPath may be null    * @param nextWriter may be null    * @return the passed in<code>newPath</code>    * @throws IOException if there is a problem flushing or closing the underlying FS    */
annotation|@
name|VisibleForTesting
name|Path
name|replaceWriter
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|,
name|W
name|nextWriter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|TraceScope
name|scope
init|=
name|TraceUtil
operator|.
name|createTrace
argument_list|(
literal|"FSHFile.replaceWriter"
argument_list|)
init|)
block|{
name|doReplaceWriter
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|,
name|nextWriter
argument_list|)
expr_stmt|;
return|return
name|newPath
return|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|blockOnSync
parameter_list|(
name|SyncFuture
name|syncFuture
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now we have published the ringbuffer, halt the current thread until we get an answer back.
try|try
block|{
if|if
condition|(
name|syncFuture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"WAL has been closed"
argument_list|)
throw|;
block|}
else|else
block|{
name|syncFuture
operator|.
name|get
argument_list|(
name|walSyncTimeoutNs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TimeoutIOException
name|tioe
parameter_list|)
block|{
comment|// SyncFuture reuse by thread, if TimeoutIOException happens, ringbuffer
comment|// still refer to it, so if this thread use it next time may get a wrong
comment|// result.
name|this
operator|.
name|syncFuturesByHandler
operator|.
name|remove
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|tioe
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|convertInterruptedExceptionToIOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
name|ensureIOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|IOException
name|ensureIOException
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|instanceof
name|IOException
operator|)
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|private
name|IOException
name|convertInterruptedExceptionToIOException
parameter_list|(
specifier|final
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|IOException
name|ioe
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
return|return
name|ioe
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
index|[]
name|rollWriter
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|FailedLogCloseException
throws|,
name|IOException
block|{
name|rollWriterLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Return if nothing to flush.
if|if
condition|(
operator|!
name|force
operator|&&
name|this
operator|.
name|writer
operator|!=
literal|null
operator|&&
name|this
operator|.
name|numEntries
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"WAL closed. Skipping rolling of writer"
argument_list|)
expr_stmt|;
return|return
name|regionsToFlush
return|;
block|}
try|try
init|(
name|TraceScope
name|scope
init|=
name|TraceUtil
operator|.
name|createTrace
argument_list|(
literal|"FSHLog.rollWriter"
argument_list|)
init|)
block|{
name|Path
name|oldPath
init|=
name|getOldPath
argument_list|()
decl_stmt|;
name|Path
name|newPath
init|=
name|getNewPath
argument_list|()
decl_stmt|;
comment|// Any exception from here on is catastrophic, non-recoverable so we currently abort.
name|W
name|nextWriter
init|=
name|this
operator|.
name|createWriterInstance
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
name|tellListenersAboutPreLogRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
comment|// NewPath could be equal to oldPath if replaceWriter fails.
name|newPath
operator|=
name|replaceWriter
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|,
name|nextWriter
argument_list|)
expr_stmt|;
name|tellListenersAboutPostLogRoll
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create new "
operator|+
name|implClassName
operator|+
literal|" writer with pipeline: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Can we delete any of the old log files?
if|if
condition|(
name|getNumRolledLogFiles
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cleanOldLogs
argument_list|()
expr_stmt|;
name|regionsToFlush
operator|=
name|findRegionsToForceFlush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommonFSUtils
operator|.
name|StreamLacksCapabilityException
name|exception
parameter_list|)
block|{
comment|// If the underlying FileSystem can't do what we ask, treat as IO failure so
comment|// we'll abort.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Underlying FileSystem can't meet stream requirements. See RS log "
operator|+
literal|"for details."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
return|return
name|regionsToFlush
return|;
block|}
finally|finally
block|{
name|rollWriterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// public only until class moves to o.a.h.h.wal
comment|/** @return the size of log files in use */
specifier|public
name|long
name|getLogFileSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalLogSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|// public only until class moves to o.a.h.h.wal
specifier|public
name|void
name|requestLogRoll
parameter_list|()
block|{
name|requestLogRoll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the backing files associated with this WAL.    * @return may be null if there are no files.    */
annotation|@
name|VisibleForTesting
name|FileStatus
index|[]
name|getFiles
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|CommonFSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|walDir
argument_list|,
name|ourFiles
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|shutdown
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
comment|// Tell our listeners that the log is closing
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|logCloseRequested
argument_list|()
expr_stmt|;
block|}
block|}
name|rollWriterLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doShutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollWriterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
argument_list|()
expr_stmt|;
specifier|final
name|FileStatus
index|[]
name|files
init|=
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|files
operator|&&
literal|0
operator|!=
name|files
operator|.
name|length
condition|)
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|Path
name|p
init|=
name|getWALArchivePath
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Tell our listeners that a log is going to be archived.
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|preLogArchive
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|CommonFSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|p
argument_list|)
throw|;
block|}
comment|// Tell our listeners that a log was archived.
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|postLogArchive
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moved "
operator|+
name|files
operator|.
name|length
operator|+
literal|" WAL file(s) to "
operator|+
name|CommonFSUtils
operator|.
name|getPath
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed WAL: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * updates the sequence number of a specific store. depending on the flag: replaces current seq    * number if the given seq id is bigger, or even if it is lower than existing one    * @param encodedRegionName    * @param familyName    * @param sequenceid    * @param onlyIfGreater    */
annotation|@
name|Override
specifier|public
name|void
name|updateStore
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|familyName
parameter_list|,
name|Long
name|sequenceid
parameter_list|,
name|boolean
name|onlyIfGreater
parameter_list|)
block|{
name|sequenceIdAccounting
operator|.
name|updateStore
argument_list|(
name|encodedRegionName
argument_list|,
name|familyName
argument_list|,
name|sequenceid
argument_list|,
name|onlyIfGreater
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|SyncFuture
name|getSyncFuture
parameter_list|(
name|long
name|sequence
parameter_list|)
block|{
return|return
name|CollectionUtils
operator|.
name|computeIfAbsent
argument_list|(
name|syncFuturesByHandler
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|SyncFuture
operator|::
operator|new
argument_list|)
operator|.
name|reset
argument_list|(
name|sequence
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|void
name|requestLogRoll
parameter_list|(
name|boolean
name|tooFewReplicas
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|i
operator|.
name|logRollRequested
argument_list|(
name|tooFewReplicas
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|getUnflushedEntriesCount
parameter_list|()
block|{
name|long
name|highestSynced
init|=
name|this
operator|.
name|highestSyncedTxid
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|highestUnsynced
init|=
name|this
operator|.
name|highestUnsyncedTxid
decl_stmt|;
return|return
name|highestSynced
operator|>=
name|highestUnsynced
condition|?
literal|0
else|:
name|highestUnsynced
operator|-
name|highestSynced
return|;
block|}
name|boolean
name|isUnflushedEntries
parameter_list|()
block|{
return|return
name|getUnflushedEntriesCount
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**    * Exposed for testing only. Use to tricks like halt the ring buffer appending.    */
annotation|@
name|VisibleForTesting
name|void
name|atHeadOfRingBufferEventHandlerAppend
parameter_list|()
block|{
comment|// Noop
block|}
specifier|protected
specifier|final
name|boolean
name|append
parameter_list|(
name|W
name|writer
parameter_list|,
name|FSWALEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: WORK ON MAKING THIS APPEND FASTER. DOING WAY TOO MUCH WORK WITH CPs, PBing, etc.
name|atHeadOfRingBufferEventHandlerAppend
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedRegionName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|long
name|regionSequenceId
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSequenceId
argument_list|()
decl_stmt|;
comment|// Edits are empty, there is nothing to append. Maybe empty when we are looking for a
comment|// region sequence id only, a region edit/sequence id that is not associated with an actual
comment|// edit. It has to go through all the rigmarole to be sure we have the right ordering.
if|if
condition|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Coprocessor hook.
name|coprocessorHost
operator|.
name|preWALWrite
argument_list|(
name|entry
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|i
range|:
name|listeners
control|)
block|{
name|i
operator|.
name|visitLogEntryBeforeWrite
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|doAppend
argument_list|(
name|writer
argument_list|,
name|entry
argument_list|)
expr_stmt|;
assert|assert
name|highestUnsyncedTxid
operator|<
name|entry
operator|.
name|getTxid
argument_list|()
assert|;
name|highestUnsyncedTxid
operator|=
name|entry
operator|.
name|getTxid
argument_list|()
expr_stmt|;
name|sequenceIdAccounting
operator|.
name|update
argument_list|(
name|encodedRegionName
argument_list|,
name|entry
operator|.
name|getFamilyNames
argument_list|()
argument_list|,
name|regionSequenceId
argument_list|,
name|entry
operator|.
name|isInMemStore
argument_list|()
argument_list|)
expr_stmt|;
name|coprocessorHost
operator|.
name|postWALWrite
argument_list|(
name|entry
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update metrics.
name|postAppend
argument_list|(
name|entry
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|numEntries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|long
name|postAppend
parameter_list|(
specifier|final
name|Entry
name|e
parameter_list|,
specifier|final
name|long
name|elapsedTime
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|e
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|len
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WALActionsListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|postAppend
argument_list|(
name|len
argument_list|,
name|elapsedTime
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
specifier|protected
specifier|final
name|void
name|postSync
parameter_list|(
specifier|final
name|long
name|timeInNanos
parameter_list|,
specifier|final
name|int
name|handlerSyncs
parameter_list|)
block|{
if|if
condition|(
name|timeInNanos
operator|>
name|this
operator|.
name|slowSyncNs
condition|)
block|{
name|String
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Slow sync cost: "
argument_list|)
operator|.
name|append
argument_list|(
name|timeInNanos
operator|/
literal|1000000
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms, current pipeline: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TraceUtil
operator|.
name|addTimelineAnnotation
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WALActionsListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|postSync
argument_list|(
name|timeInNanos
argument_list|,
name|handlerSyncs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|long
name|stampSequenceIdAndPublishToRingBuffer
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|WALKeyImpl
name|key
parameter_list|,
name|WALEdit
name|edits
parameter_list|,
name|boolean
name|inMemstore
parameter_list|,
name|RingBuffer
argument_list|<
name|RingBufferTruck
argument_list|>
name|ringBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append; log is closed, regionName = "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|MutableLong
name|txidHolder
init|=
operator|new
name|MutableLong
argument_list|()
decl_stmt|;
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|we
init|=
name|key
operator|.
name|getMvcc
argument_list|()
operator|.
name|begin
argument_list|(
parameter_list|()
lambda|->
block|{
name|txidHolder
operator|.
name|setValue
argument_list|(
name|ringBuffer
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
name|txidHolder
operator|.
name|longValue
argument_list|()
decl_stmt|;
try|try
init|(
name|TraceScope
name|scope
init|=
name|TraceUtil
operator|.
name|createTrace
argument_list|(
name|implClassName
operator|+
literal|".append"
argument_list|)
init|)
block|{
name|FSWALEntry
name|entry
init|=
operator|new
name|FSWALEntry
argument_list|(
name|txid
argument_list|,
name|key
argument_list|,
name|edits
argument_list|,
name|hri
argument_list|,
name|inMemstore
argument_list|)
decl_stmt|;
name|entry
operator|.
name|stampRegionSequenceId
argument_list|(
name|we
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|get
argument_list|(
name|txid
argument_list|)
operator|.
name|load
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ringBuffer
operator|.
name|publish
argument_list|(
name|txid
argument_list|)
expr_stmt|;
block|}
return|return
name|txid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|implClassName
operator|+
literal|" "
operator|+
name|walFilePrefix
operator|+
literal|":"
operator|+
name|walFileSuffix
operator|+
literal|"(num "
operator|+
name|filenum
operator|+
literal|")"
return|;
block|}
comment|/**    * if the given {@code path} is being written currently, then return its length.    *<p>    * This is used by replication to prevent replicating unacked log entries. See    * https://issues.apache.org/jira/browse/HBASE-14004 for more details.    */
annotation|@
name|Override
specifier|public
name|OptionalLong
name|getLogFileSizeIfBeingWritten
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|rollWriterLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Path
name|currentPath
init|=
name|getOldPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|currentPath
argument_list|)
condition|)
block|{
name|W
name|writer
init|=
name|this
operator|.
name|writer
decl_stmt|;
return|return
name|writer
operator|!=
literal|null
condition|?
name|OptionalLong
operator|.
name|of
argument_list|(
name|writer
operator|.
name|getLength
argument_list|()
argument_list|)
else|:
name|OptionalLong
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|OptionalLong
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|rollWriterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * NOTE: This append, at a time that is usually after this call returns, starts an mvcc    * transaction by calling 'begin' wherein which we assign this update a sequenceid. At assignment    * time, we stamp all the passed in Cells inside WALEdit with their sequenceId. You must    * 'complete' the transaction this mvcc transaction by calling    * MultiVersionConcurrencyControl#complete(...) or a variant otherwise mvcc will get stuck. Do it    * in the finally of a try/finally block within which this append lives and any subsequent    * operations like sync or update of memstore, etc. Get the WriteEntry to pass mvcc out of the    * passed in WALKey<code>walKey</code> parameter. Be warned that the WriteEntry is not    * immediately available on return from this method. It WILL be available subsequent to a sync of    * this append; otherwise, you will just have to wait on the WriteEntry to get filled in.    */
annotation|@
name|Override
specifier|public
specifier|abstract
name|long
name|append
parameter_list|(
name|RegionInfo
name|info
parameter_list|,
name|WALKeyImpl
name|key
parameter_list|,
name|WALEdit
name|edits
parameter_list|,
name|boolean
name|inMemstore
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doAppend
parameter_list|(
name|W
name|writer
parameter_list|,
name|FSWALEntry
name|entry
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|W
name|createWriterInstance
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommonFSUtils
operator|.
name|StreamLacksCapabilityException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doReplaceWriter
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|,
name|W
name|nextWriter
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doShutdown
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|doCheckLogLowReplication
parameter_list|()
function_decl|;
specifier|public
name|void
name|checkLogLowReplication
parameter_list|(
name|long
name|checkInterval
parameter_list|)
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|lastTimeCheckLowReplication
operator|<
name|checkInterval
condition|)
block|{
return|return;
block|}
comment|// Will return immediately if we are in the middle of a WAL log roll currently.
if|if
condition|(
operator|!
name|rollWriterLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|lastTimeCheckLowReplication
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|doCheckLogLowReplication
argument_list|()
condition|)
block|{
name|requestLogRoll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rollWriterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This method gets the pipeline for the current WAL.    */
annotation|@
name|VisibleForTesting
specifier|abstract
name|DatanodeInfo
index|[]
name|getPipeline
parameter_list|()
function_decl|;
comment|/**    * This method gets the datanode replication count for the current WAL.    */
annotation|@
name|VisibleForTesting
specifier|abstract
name|int
name|getLogReplication
parameter_list|()
function_decl|;
specifier|private
specifier|static
name|void
name|split
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|p
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|baseDir
init|=
name|FSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|archiveDir
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|AbstractFSWALProvider
operator|.
name|SEPARATE_OLDLOGDIR
argument_list|,
name|AbstractFSWALProvider
operator|.
name|DEFAULT_SEPARATE_OLDLOGDIR
argument_list|)
condition|)
block|{
name|archiveDir
operator|=
operator|new
name|Path
argument_list|(
name|archiveDir
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WALSplitter
operator|.
name|split
argument_list|(
name|baseDir
argument_list|,
name|p
argument_list|,
name|archiveDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|WALFactory
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: AbstractFSWAL<ARGS>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Arguments:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" --dump  Dump textual representation of passed one or more files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"         For example: "
operator|+
literal|"AbstractFSWAL --dump hdfs://example.com:9000/hbase/WALs/MACHINE/LOGFILE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" --split Split the passed directory of WAL logs"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"         For example: AbstractFSWAL --split hdfs://example.com:9000/hbase/WALs/DIR"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass one or more log file names and it will either dump out a text version on    *<code>stdout</code> or split the specified log files.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// either dump using the WALPrettyPrinter or split, depending on args
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"--dump"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|WALPrettyPrinter
operator|.
name|run
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"--perf"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Please use the WALPerformanceEvaluation tool instead. i.e.:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"\thbase org.apache.hadoop.hbase.wal.WALPerformanceEvaluation --iterations "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"--split"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|conf
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|conf
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

