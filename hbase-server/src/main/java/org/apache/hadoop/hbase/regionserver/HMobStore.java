begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobCacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobZookeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * The store implementation to save MOBs (medium objects), it extends the HStore.  * When a descriptor of a column family has the value "IS_MOB", it means this column family  * is a mob one. When a HRegion instantiate a store for this column family, the HMobStore is  * created.  * HMobStore is almost the same with the HStore except using different types of scanners.  * In the method of getScanner, the MobStoreScanner and MobReversedStoreScanner are returned.  * In these scanners, a additional seeks in the mob files should be performed after the seek  * to HBase is done.  * The store implements how we save MOBs by extending HStore. When a descriptor  * of a column family has the value "IS_MOB", it means this column family is a mob one. When a  * HRegion instantiate a store for this column family, the HMobStore is created. HMobStore is  * almost the same with the HStore except using different types of scanners. In the method of  * getScanner, the MobStoreScanner and MobReversedStoreScanner are returned. In these scanners, a  * additional seeks in the mob files should be performed after the seek in HBase is done.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HMobStore
extends|extends
name|HStore
block|{
specifier|private
name|MobCacheConfig
name|mobCacheConfig
decl_stmt|;
specifier|private
name|Path
name|homePath
decl_stmt|;
specifier|private
name|Path
name|mobFamilyPath
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobCompactedIntoMobCellsCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobCompactedFromMobCellsCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobCompactedIntoMobCellsSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobCompactedFromMobCellsSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobFlushCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobFlushedCellsCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobFlushedCellsSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobScanCellsCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|mobScanCellsSize
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|mobDirLocations
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|family
decl_stmt|;
specifier|public
name|HMobStore
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|HColumnDescriptor
name|family
parameter_list|,
specifier|final
name|Configuration
name|confParam
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|region
argument_list|,
name|family
argument_list|,
name|confParam
argument_list|)
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|mobCacheConfig
operator|=
operator|(
name|MobCacheConfig
operator|)
name|cacheConf
expr_stmt|;
name|this
operator|.
name|homePath
operator|=
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|mobFamilyPath
operator|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|getTableName
argument_list|()
argument_list|,
name|family
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|mobDirLocations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
name|mobDirLocations
operator|.
name|add
argument_list|(
name|mobFamilyPath
argument_list|)
expr_stmt|;
name|TableName
name|tn
init|=
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|mobDirLocations
operator|.
name|add
argument_list|(
name|HFileArchiveUtil
operator|.
name|getStoreArchivePath
argument_list|(
name|conf
argument_list|,
name|tn
argument_list|,
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tn
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the mob cache config.    */
annotation|@
name|Override
specifier|protected
name|void
name|createCacheConf
parameter_list|(
name|HColumnDescriptor
name|family
parameter_list|)
block|{
name|cacheConf
operator|=
operator|new
name|MobCacheConfig
argument_list|(
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets current config.    */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Gets the MobStoreScanner or MobReversedStoreScanner. In these scanners, a additional seeks in    * the mob files should be performed after the seek in HBase is done.    */
annotation|@
name|Override
specifier|protected
name|KeyValueScanner
name|createScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|targetCols
parameter_list|,
name|long
name|readPt
parameter_list|,
name|KeyValueScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|MobUtils
operator|.
name|isRefOnlyScan
argument_list|(
name|scan
argument_list|)
condition|)
block|{
name|Filter
name|refOnlyFilter
init|=
operator|new
name|MobReferenceOnlyFilter
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|scan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
name|filter
argument_list|,
name|refOnlyFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setFilter
argument_list|(
name|refOnlyFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|=
name|scan
operator|.
name|isReversed
argument_list|()
condition|?
operator|new
name|ReversedMobStoreScanner
argument_list|(
name|this
argument_list|,
name|getScanInfo
argument_list|()
argument_list|,
name|scan
argument_list|,
name|targetCols
argument_list|,
name|readPt
argument_list|)
else|:
operator|new
name|MobStoreScanner
argument_list|(
name|this
argument_list|,
name|getScanInfo
argument_list|()
argument_list|,
name|scan
argument_list|,
name|targetCols
argument_list|,
name|readPt
argument_list|)
expr_stmt|;
block|}
return|return
name|scanner
return|;
block|}
comment|/**    * Creates the mob store engine.    */
annotation|@
name|Override
specifier|protected
name|StoreEngine
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|createStoreEngine
parameter_list|(
name|Store
name|store
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|KVComparator
name|kvComparator
parameter_list|)
throws|throws
name|IOException
block|{
name|MobStoreEngine
name|engine
init|=
operator|new
name|MobStoreEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|createComponents
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|kvComparator
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
comment|/**    * Gets the temp directory.    * @return The temp directory.    */
specifier|private
name|Path
name|getTempDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|homePath
argument_list|,
name|MobConstants
operator|.
name|TEMP_DIR_NAME
argument_list|)
return|;
block|}
comment|/**    * Creates the temp directory of mob files for flushing.    * @param date The latest date of cells in the flushing.    * @param maxKeyCount The key count.    * @param compression The compression algorithm.    * @param startKey The start key.    * @return The writer for the mob file.    * @throws IOException    */
specifier|public
name|StoreFile
operator|.
name|Writer
name|createWriterInTmp
parameter_list|(
name|Date
name|date
parameter_list|,
name|long
name|maxKeyCount
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|startKey
operator|==
literal|null
condition|)
block|{
name|startKey
operator|=
name|HConstants
operator|.
name|EMPTY_START_ROW
expr_stmt|;
block|}
name|Path
name|path
init|=
name|getTempDir
argument_list|()
decl_stmt|;
return|return
name|createWriterInTmp
argument_list|(
name|MobUtils
operator|.
name|formatDate
argument_list|(
name|date
argument_list|)
argument_list|,
name|path
argument_list|,
name|maxKeyCount
argument_list|,
name|compression
argument_list|,
name|startKey
argument_list|)
return|;
block|}
comment|/**    * Creates the temp directory of mob files for flushing.    * @param date The date string, its format is yyyymmmdd.    * @param basePath The basic path for a temp directory.    * @param maxKeyCount The key count.    * @param compression The compression algorithm.    * @param startKey The start key.    * @return The writer for the mob file.    * @throws IOException    */
specifier|public
name|StoreFile
operator|.
name|Writer
name|createWriterInTmp
parameter_list|(
name|String
name|date
parameter_list|,
name|Path
name|basePath
parameter_list|,
name|long
name|maxKeyCount
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|date
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CacheConfig
name|writerCacheConf
init|=
name|mobCacheConfig
decl_stmt|;
name|HFileContext
name|hFileContext
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withIncludesMvcc
argument_list|(
literal|false
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
literal|true
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|HFile
operator|.
name|DEFAULT_CHECKSUM_TYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|HFile
operator|.
name|DEFAULT_BYTES_PER_CHECKSUM
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|getFamily
argument_list|()
operator|.
name|getBlocksize
argument_list|()
argument_list|)
operator|.
name|withHBaseCheckSum
argument_list|(
literal|true
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|getFamily
argument_list|()
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|w
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|conf
argument_list|,
name|writerCacheConf
argument_list|,
name|region
operator|.
name|getFilesystem
argument_list|()
argument_list|)
operator|.
name|withFilePath
argument_list|(
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withComparator
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|maxKeyCount
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|w
return|;
block|}
comment|/**    * Commits the mob file.    * @param sourceFile The source file.    * @param targetPath The directory path where the source file is renamed to.    * @throws IOException    */
specifier|public
name|void
name|commitFile
parameter_list|(
specifier|final
name|Path
name|sourceFile
parameter_list|,
name|Path
name|targetPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|targetPath
argument_list|,
name|sourceFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|validateMobFile
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Renaming flushed file from "
operator|+
name|sourceFile
operator|+
literal|" to "
operator|+
name|dstPath
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|dstPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|region
operator|.
name|getFilesystem
argument_list|()
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|region
operator|.
name|getFilesystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|region
operator|.
name|getFilesystem
argument_list|()
operator|.
name|rename
argument_list|(
name|sourceFile
argument_list|,
name|dstPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed rename of "
operator|+
name|sourceFile
operator|+
literal|" to "
operator|+
name|dstPath
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates a mob file by opening and closing it.    *    * @param path the path to the mob file    */
specifier|private
name|void
name|validateMobFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFile
name|storeFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|storeFile
operator|=
operator|new
name|StoreFile
argument_list|(
name|region
operator|.
name|getFilesystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|mobCacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|storeFile
operator|.
name|createReader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to open mob file["
operator|+
name|path
operator|+
literal|"], keep it in temp directory."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|storeFile
operator|!=
literal|null
condition|)
block|{
name|storeFile
operator|.
name|closeReader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reads the cell from the mob file.    * @param reference The cell found in the HBase, its value is a path to a mob file.    * @param cacheBlocks Whether the scanner should cache blocks.    * @return The cell found in the mob file.    * @throws IOException    */
specifier|public
name|Cell
name|resolve
parameter_list|(
name|Cell
name|reference
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|MobUtils
operator|.
name|hasValidMobRefCellValue
argument_list|(
name|reference
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|result
operator|=
name|readCell
argument_list|(
name|mobDirLocations
argument_list|,
name|fileName
argument_list|,
name|reference
argument_list|,
name|cacheBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|readClonedCell
argument_list|(
name|fileName
argument_list|,
name|reference
argument_list|,
name|cacheBlocks
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The KeyValue result is null, assemble a new KeyValue with the same row,family,"
operator|+
literal|"qualifier,timestamp,type and tags but with an empty value to return."
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|KeyValue
argument_list|(
name|reference
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|reference
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|reference
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|reference
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|reference
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|reference
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|reference
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|reference
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|reference
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|reference
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|Type
operator|.
name|codeToType
argument_list|(
name|reference
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|reference
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|reference
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|reference
operator|.
name|getTagsLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Reads the cell from a mob file.    * The mob file might be located in different directories.    * 1. The working directory.    * 2. The archive directory.    * Reads the cell from the files located in both of the above directories.    * @param locations The possible locations where the mob files are saved.    * @param fileName The file to be read.    * @param search The cell to be searched.    * @param cacheMobBlocks Whether the scanner should cache blocks.    * @return The found cell. Null if there's no such a cell.    * @throws IOException    */
specifier|private
name|Cell
name|readCell
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|locations
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Cell
name|search
parameter_list|,
name|boolean
name|cacheMobBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|location
range|:
name|locations
control|)
block|{
name|MobFile
name|file
init|=
literal|null
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|file
operator|=
name|mobCacheConfig
operator|.
name|getMobFileCache
argument_list|()
operator|.
name|openFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|mobCacheConfig
argument_list|)
expr_stmt|;
return|return
name|file
operator|.
name|readCell
argument_list|(
name|search
argument_list|,
name|cacheMobBlocks
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|mobCacheConfig
operator|.
name|getMobFileCache
argument_list|()
operator|.
name|evictFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to read the cell, the mob file "
operator|+
name|path
operator|+
literal|" doesn't exist"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|mobCacheConfig
operator|.
name|getMobFileCache
argument_list|()
operator|.
name|closeFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"The mob file "
operator|+
name|fileName
operator|+
literal|" could not be found in the locations "
operator|+
name|mobDirLocations
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Reads the cell from a mob file of source table.    * The table might be cloned, in this case only hfile link is created in the new table,    * and the mob file is located in the source table directories.    * 1. The working directory of the source table.    * 2. The archive directory of the source table.    * Reads the cell from the files located in both of the above directories.    * @param fileName The file to be read.    * @param search The cell to be searched.    * @param cacheMobBlocks Whether the scanner should cache blocks.    * @return The found cell. Null if there's no such a cell.    * @throws IOException    */
specifier|private
name|Cell
name|readClonedCell
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Cell
name|search
parameter_list|,
name|boolean
name|cacheMobBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|Tag
name|tableNameTag
init|=
name|MobUtils
operator|.
name|getTableNameTag
argument_list|(
name|search
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNameTag
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|tableName
init|=
name|tableNameTag
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// the possible locations in the source table.
name|List
argument_list|<
name|Path
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tn
argument_list|,
name|family
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|HFileArchiveUtil
operator|.
name|getStoreArchivePath
argument_list|(
name|conf
argument_list|,
name|tn
argument_list|,
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tn
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the cell from the source table.
return|return
name|readCell
argument_list|(
name|locations
argument_list|,
name|fileName
argument_list|,
name|search
argument_list|,
name|cacheMobBlocks
argument_list|)
return|;
block|}
comment|/**    * Gets the mob file path.    * @return The mob file path.    */
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|mobFamilyPath
return|;
block|}
comment|/**    * The compaction in the store of mob.    * The cells in this store contains the path of the mob files. There might be race    * condition between the major compaction and the sweeping in mob files.    * In order to avoid this, we need mutually exclude the running of the major compaction and    * sweeping in mob files.    * The minor compaction is not affected.    * The major compaction is marked as retainDeleteMarkers when a sweeping is in progress.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|compact
parameter_list|(
name|CompactionContext
name|compaction
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If it's major compaction, try to find whether there's a sweeper is running
comment|// If yes, mark the major compaction as retainDeleteMarkers
if|if
condition|(
name|compaction
operator|.
name|getRequest
argument_list|()
operator|.
name|isAllFiles
argument_list|()
condition|)
block|{
comment|// Use the Zookeeper to coordinate.
comment|// 1. Acquire a operation lock.
comment|//   1.1. If no, mark the major compaction as retainDeleteMarkers and continue the compaction.
comment|//   1.2. If the lock is obtained, search the node of sweeping.
comment|//      1.2.1. If the node is there, the sweeping is in progress, mark the major
comment|//             compaction as retainDeleteMarkers and continue the compaction.
comment|//      1.2.2. If the node is not there, add a child to the major compaction node, and
comment|//             run the compaction directly.
name|String
name|compactionName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|MobZookeeper
name|zk
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zk
operator|=
name|MobZookeeper
operator|.
name|newInstance
argument_list|(
name|region
operator|.
name|getBaseConf
argument_list|()
argument_list|,
name|compactionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot connect to the zookeeper, forcing the delete markers to be retained"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|compaction
operator|.
name|getRequest
argument_list|()
operator|.
name|forceRetainDeleteMarkers
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|compact
argument_list|(
name|compaction
argument_list|)
return|;
block|}
name|boolean
name|keepDeleteMarkers
init|=
literal|true
decl_stmt|;
name|boolean
name|majorCompactNodeAdded
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// try to acquire the operation lock.
if|if
condition|(
name|zk
operator|.
name|lockColumnFamily
argument_list|(
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Obtain the lock for the store["
operator|+
name|this
operator|+
literal|"], forcing the delete markers to be retained"
argument_list|)
expr_stmt|;
comment|// check the sweeping node to find out whether the sweeping is in progress.
name|boolean
name|hasSweeper
init|=
name|zk
operator|.
name|isSweeperZNodeExist
argument_list|(
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasSweeper
condition|)
block|{
comment|// if not, add a child to the major compaction node of this store.
name|majorCompactNodeAdded
operator|=
name|zk
operator|.
name|addMajorCompactionZNode
argument_list|(
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|compactionName
argument_list|)
expr_stmt|;
comment|// If we failed to add the major compact node, go with keep delete markers mode.
name|keepDeleteMarkers
operator|=
operator|!
name|majorCompactNodeAdded
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to handle the Zookeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// release the operation lock
name|zk
operator|.
name|unlockColumnFamily
argument_list|(
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|keepDeleteMarkers
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot obtain the lock or a sweep tool is running on this store["
operator|+
name|this
operator|+
literal|"], forcing the delete markers to be retained"
argument_list|)
expr_stmt|;
name|compaction
operator|.
name|getRequest
argument_list|()
operator|.
name|forceRetainDeleteMarkers
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|compact
argument_list|(
name|compaction
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|majorCompactNodeAdded
condition|)
block|{
try|try
block|{
name|zk
operator|.
name|deleteMajorCompactionZNode
argument_list|(
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|compactionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to delete the compaction znode"
operator|+
name|compactionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If it's not a major compaction, continue the compaction.
return|return
name|super
operator|.
name|compact
argument_list|(
name|compaction
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|updateMobCompactedIntoMobCellsCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|mobCompactedIntoMobCellsCount
operator|+=
name|count
expr_stmt|;
block|}
specifier|public
name|long
name|getMobCompactedIntoMobCellsCount
parameter_list|()
block|{
return|return
name|mobCompactedIntoMobCellsCount
return|;
block|}
specifier|public
name|void
name|updateMobCompactedFromMobCellsCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|mobCompactedFromMobCellsCount
operator|+=
name|count
expr_stmt|;
block|}
specifier|public
name|long
name|getMobCompactedFromMobCellsCount
parameter_list|()
block|{
return|return
name|mobCompactedFromMobCellsCount
return|;
block|}
specifier|public
name|void
name|updateMobCompactedIntoMobCellsSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|mobCompactedIntoMobCellsSize
operator|+=
name|size
expr_stmt|;
block|}
specifier|public
name|long
name|getMobCompactedIntoMobCellsSize
parameter_list|()
block|{
return|return
name|mobCompactedIntoMobCellsSize
return|;
block|}
specifier|public
name|void
name|updateMobCompactedFromMobCellsSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|mobCompactedFromMobCellsSize
operator|+=
name|size
expr_stmt|;
block|}
specifier|public
name|long
name|getMobCompactedFromMobCellsSize
parameter_list|()
block|{
return|return
name|mobCompactedFromMobCellsSize
return|;
block|}
specifier|public
name|void
name|updateMobFlushCount
parameter_list|()
block|{
name|mobFlushCount
operator|++
expr_stmt|;
block|}
specifier|public
name|long
name|getMobFlushCount
parameter_list|()
block|{
return|return
name|mobFlushCount
return|;
block|}
specifier|public
name|void
name|updateMobFlushedCellsCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|mobFlushedCellsCount
operator|+=
name|count
expr_stmt|;
block|}
specifier|public
name|long
name|getMobFlushedCellsCount
parameter_list|()
block|{
return|return
name|mobFlushedCellsCount
return|;
block|}
specifier|public
name|void
name|updateMobFlushedCellsSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|mobFlushedCellsSize
operator|+=
name|size
expr_stmt|;
block|}
specifier|public
name|long
name|getMobFlushedCellsSize
parameter_list|()
block|{
return|return
name|mobFlushedCellsSize
return|;
block|}
specifier|public
name|void
name|updateMobScanCellsCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|mobScanCellsCount
operator|+=
name|count
expr_stmt|;
block|}
specifier|public
name|long
name|getMobScanCellsCount
parameter_list|()
block|{
return|return
name|mobScanCellsCount
return|;
block|}
specifier|public
name|void
name|updateMobScanCellsSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|mobScanCellsSize
operator|+=
name|size
expr_stmt|;
block|}
specifier|public
name|long
name|getMobScanCellsSize
parameter_list|()
block|{
return|return
name|mobScanCellsSize
return|;
block|}
block|}
end_class

end_unit

