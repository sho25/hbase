begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining the various regionserver's heap memory manager statistics and  * publishing them through the metrics interfaces.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsHeapMemoryManager
block|{
specifier|private
specifier|final
name|MetricsHeapMemoryManagerSource
name|source
decl_stmt|;
specifier|public
name|MetricsHeapMemoryManager
parameter_list|()
block|{
name|this
argument_list|(
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsRegionServerSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|getHeapMemoryManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetricsHeapMemoryManager
parameter_list|(
name|MetricsHeapMemoryManagerSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|MetricsHeapMemoryManagerSource
name|getMetricsSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**    * Update/Set the blocked flush count histogram/gauge    * @param blockedFlushCount the number of blocked memstore flush since last tuning.    */
specifier|public
name|void
name|updateBlockedFlushCount
parameter_list|(
specifier|final
name|long
name|blockedFlushCount
parameter_list|)
block|{
name|source
operator|.
name|updateBlockedFlushCount
argument_list|(
name|blockedFlushCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update/Set the unblocked flush count histogram/gauge    * @param unblockedFlushCount the number of unblocked memstore flush since last tuning.    */
specifier|public
name|void
name|updateUnblockedFlushCount
parameter_list|(
specifier|final
name|long
name|unblockedFlushCount
parameter_list|)
block|{
name|source
operator|.
name|updateUnblockedFlushCount
argument_list|(
name|unblockedFlushCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the current blockcache size used gauge    * @param blockCacheSize the current memory usage in blockcache, in bytes.    */
specifier|public
name|void
name|setCurBlockCacheSizeGauge
parameter_list|(
specifier|final
name|long
name|blockCacheSize
parameter_list|)
block|{
name|source
operator|.
name|setCurBlockCacheSizeGauge
argument_list|(
name|blockCacheSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the current global memstore size used gauge    * @param memStoreSize the current memory usage in memstore, in bytes.    */
specifier|public
name|void
name|setCurMemStoreSizeGauge
parameter_list|(
specifier|final
name|long
name|memStoreSize
parameter_list|)
block|{
name|source
operator|.
name|setCurMemStoreSizeGauge
argument_list|(
name|memStoreSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the increase/decrease memstore size histogram    * @param memStoreDeltaSize the tuning result of memstore.    */
specifier|public
name|void
name|updateMemStoreDeltaSizeHistogram
parameter_list|(
specifier|final
name|int
name|memStoreDeltaSize
parameter_list|)
block|{
name|source
operator|.
name|updateMemStoreDeltaSizeHistogram
argument_list|(
name|memStoreDeltaSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the increase/decrease blockcache size histogram    * @param blockCacheDeltaSize the tuning result of blockcache.    */
specifier|public
name|void
name|updateBlockCacheDeltaSizeHistogram
parameter_list|(
specifier|final
name|int
name|blockCacheDeltaSize
parameter_list|)
block|{
name|source
operator|.
name|updateBlockCacheDeltaSizeHistogram
argument_list|(
name|blockCacheDeltaSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increase the counter for tuner neither expanding memstore global size limit nor expanding    * blockcache max size.    */
specifier|public
name|void
name|increaseTunerDoNothingCounter
parameter_list|()
block|{
name|source
operator|.
name|increaseTunerDoNothingCounter
argument_list|()
expr_stmt|;
block|}
comment|/**    * Increase the counter for heap occupancy percent above low watermark    */
specifier|public
name|void
name|increaseAboveHeapOccupancyLowWatermarkCounter
parameter_list|()
block|{
name|source
operator|.
name|increaseAboveHeapOccupancyLowWatermarkCounter
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

