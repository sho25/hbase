begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|// imports for classes still in regionserver.wal
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_comment
comment|/**  * A WAL Provider that pre-creates N WALProviders and then limits our grouping strategy to them.  * Control the number of delegate providers via "hbase.wal.regiongrouping.numgroups." Control  * the choice of delegate provider implementation and the grouping strategy the same as  * {@link RegionGroupingProvider}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BoundedRegionGroupingProvider
extends|extends
name|RegionGroupingProvider
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BoundedRegionGroupingProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|NUM_REGION_GROUPS
init|=
literal|"hbase.wal.regiongrouping.numgroups"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_REGION_GROUPS
init|=
literal|2
decl_stmt|;
specifier|private
name|WALProvider
index|[]
name|delegates
decl_stmt|;
specifier|private
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|WALFactory
name|factory
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
parameter_list|,
specifier|final
name|String
name|providerId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|(
name|factory
argument_list|,
name|conf
argument_list|,
name|listeners
argument_list|,
name|providerId
argument_list|)
expr_stmt|;
comment|// no need to check for and close down old providers; our parent class will throw on re-invoke
name|delegates
operator|=
operator|new
name|WALProvider
index|[
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|DEFAULT_NUM_REGION_GROUPS
argument_list|)
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|delegates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|delegates
index|[
name|i
index|]
operator|=
name|factory
operator|.
name|getProvider
argument_list|(
name|DELEGATE_PROVIDER
argument_list|,
name|DEFAULT_DELEGATE_PROVIDER
argument_list|,
name|listeners
argument_list|,
name|providerId
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured to run with "
operator|+
name|delegates
operator|.
name|length
operator|+
literal|" delegate WAL providers."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|WALProvider
name|populateCache
parameter_list|(
specifier|final
name|byte
index|[]
name|group
parameter_list|)
block|{
specifier|final
name|WALProvider
name|temp
init|=
name|delegates
index|[
name|counter
operator|.
name|getAndIncrement
argument_list|()
operator|%
name|delegates
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|WALProvider
name|extant
init|=
name|cached
operator|.
name|putIfAbsent
argument_list|(
name|group
argument_list|,
name|temp
argument_list|)
decl_stmt|;
comment|// if someone else beat us to initializing, just take what they set.
comment|// note that in such a case we skew load away from the provider we picked at first
return|return
name|extant
operator|==
literal|null
condition|?
name|temp
else|:
name|extant
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// save the last exception and rethrow
name|IOException
name|failure
init|=
literal|null
decl_stmt|;
for|for
control|(
name|WALProvider
name|provider
range|:
name|delegates
control|)
block|{
try|try
block|{
name|provider
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem shutting down provider '"
operator|+
name|provider
operator|+
literal|"': "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Details of problem shutting down provider '"
operator|+
name|provider
operator|+
literal|"'"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|failure
operator|=
name|exception
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
name|failure
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// save the last exception and rethrow
name|IOException
name|failure
init|=
literal|null
decl_stmt|;
for|for
control|(
name|WALProvider
name|provider
range|:
name|delegates
control|)
block|{
try|try
block|{
name|provider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem closing provider '"
operator|+
name|provider
operator|+
literal|"': "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Details of problem shutting down provider '"
operator|+
name|provider
operator|+
literal|"'"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|failure
operator|=
name|exception
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
name|failure
throw|;
block|}
block|}
block|}
end_class

end_unit

