begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RowResource
extends|extends
name|ResourceBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RowResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|CHECK_PUT
init|=
literal|"put"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CHECK_DELETE
init|=
literal|"delete"
decl_stmt|;
name|TableResource
name|tableResource
decl_stmt|;
name|RowSpec
name|rowspec
decl_stmt|;
specifier|private
name|String
name|check
init|=
literal|null
decl_stmt|;
comment|/**    * Constructor    * @param tableResource    * @param rowspec    * @param versions    * @throws IOException    */
specifier|public
name|RowResource
parameter_list|(
name|TableResource
name|tableResource
parameter_list|,
name|String
name|rowspec
parameter_list|,
name|String
name|versions
parameter_list|,
name|String
name|check
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableResource
operator|=
name|tableResource
expr_stmt|;
name|this
operator|.
name|rowspec
operator|=
operator|new
name|RowSpec
argument_list|(
name|rowspec
argument_list|)
expr_stmt|;
if|if
condition|(
name|versions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rowspec
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|versions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|check
operator|=
name|check
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GET "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|ResultGenerator
name|generator
init|=
name|ResultGenerator
operator|.
name|fromRowSpec
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|,
name|rowspec
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Not found"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|KeyValue
name|value
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|value
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowKey
argument_list|)
condition|)
block|{
name|model
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowKey
operator|=
name|value
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|value
operator|.
name|getFamily
argument_list|()
argument_list|,
name|value
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|value
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|count
operator|>
name|rowspec
operator|.
name|getMaxValues
argument_list|()
condition|)
block|{
break|break;
block|}
name|value
operator|=
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|value
operator|!=
literal|null
condition|)
do|;
name|model
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|model
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TableNotFoundException
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Not found"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MIMETYPE_BINARY
argument_list|)
specifier|public
name|Response
name|getBinary
parameter_list|(
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GET "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" as "
operator|+
name|MIMETYPE_BINARY
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// doesn't make sense to use a non specific coordinate as this can only
comment|// return a single cell
if|if
condition|(
operator|!
name|rowspec
operator|.
name|hasColumns
argument_list|()
operator|||
name|rowspec
operator|.
name|getColumns
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|ResultGenerator
name|generator
init|=
name|ResultGenerator
operator|.
name|fromRowSpec
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|,
name|rowspec
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Not found"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|KeyValue
name|value
init|=
name|generator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"X-Timestamp"
argument_list|,
name|value
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|Response
name|update
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|servlet
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Forbidden"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|CHECK_PUT
operator|.
name|equalsIgnoreCase
argument_list|(
name|check
argument_list|)
condition|)
block|{
return|return
name|checkAndPut
argument_list|(
name|model
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|CHECK_DELETE
operator|.
name|equalsIgnoreCase
argument_list|(
name|check
argument_list|)
condition|)
block|{
return|return
name|checkAndDelete
argument_list|(
name|model
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|check
operator|!=
literal|null
operator|&&
name|check
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown check value: "
operator|+
name|check
operator|+
literal|", ignored"
argument_list|)
expr_stmt|;
block|}
name|HTablePool
name|pool
init|=
name|servlet
operator|.
name|getTablePool
argument_list|()
decl_stmt|;
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RowModel
argument_list|>
name|rows
init|=
name|model
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RowModel
name|row
range|:
name|rows
control|)
block|{
name|byte
index|[]
name|key
init|=
name|row
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|rowspec
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CellModel
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
block|{
name|byte
index|[]
name|col
init|=
name|cell
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
try|try
block|{
name|col
operator|=
name|rowspec
operator|.
name|getColumns
argument_list|()
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|col
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|byte
index|[]
index|[]
name|parts
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
operator|&&
name|parts
index|[
literal|1
index|]
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT "
operator|+
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception received while closing the table"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// This currently supports only update of one row at a time.
name|Response
name|updateBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
name|HttpHeaders
name|headers
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|servlet
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Forbidden"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|HTablePool
name|pool
init|=
name|servlet
operator|.
name|getTablePool
argument_list|()
decl_stmt|;
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|row
init|=
name|rowspec
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
name|rowspec
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|byte
index|[]
name|column
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
name|column
operator|=
name|columns
index|[
literal|0
index|]
expr_stmt|;
block|}
name|long
name|timestamp
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
literal|"X-Row"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
operator|!
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|vals
operator|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
literal|"X-Column"
argument_list|)
expr_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
operator|!
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|column
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|vals
operator|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
literal|"X-Timestamp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
operator|!
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
name|parts
index|[]
index|[]
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
operator|&&
name|parts
index|[
literal|1
index|]
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT "
operator|+
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{ }
block|}
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|put
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" "
operator|+
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|update
argument_list|(
name|model
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
name|MIMETYPE_BINARY
argument_list|)
specifier|public
name|Response
name|putBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" as "
operator|+
name|MIMETYPE_BINARY
argument_list|)
expr_stmt|;
block|}
return|return
name|updateBinary
argument_list|(
name|message
argument_list|,
name|headers
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|post
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"POST "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" "
operator|+
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|update
argument_list|(
name|model
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MIMETYPE_BINARY
argument_list|)
specifier|public
name|Response
name|postBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"POST "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" as "
operator|+
name|MIMETYPE_BINARY
argument_list|)
expr_stmt|;
block|}
return|return
name|updateBinary
argument_list|(
name|message
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|DELETE
specifier|public
name|Response
name|delete
parameter_list|(
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETE "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|servlet
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Forbidden"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rowspec
operator|.
name|hasTimestamp
argument_list|()
condition|)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|rowspec
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowspec
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|rowspec
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|rowspec
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|split
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowspec
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
operator|&&
name|split
index|[
literal|1
index|]
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|,
name|rowspec
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|rowspec
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
operator|&&
name|split
index|[
literal|1
index|]
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HTablePool
name|pool
init|=
name|servlet
operator|.
name|getTablePool
argument_list|()
decl_stmt|;
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulDeleteRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETE "
operator|+
name|delete
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedDeleteRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{ }
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Validates the input request parameters, parses columns from CellSetModel,    * and invokes checkAndPut on HTable.    *    * @param model instance of CellSetModel    * @return Response 200 OK, 304 Not modified, 400 Bad request    */
name|Response
name|checkAndPut
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|)
block|{
name|HTablePool
name|pool
init|=
name|servlet
operator|.
name|getTablePool
argument_list|()
decl_stmt|;
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|RowModel
name|rowModel
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|rowModel
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|rowspec
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|CellModel
argument_list|>
name|cellModels
init|=
name|rowModel
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|int
name|cellModelCount
init|=
name|cellModels
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
operator|||
name|cellModelCount
operator|<=
literal|1
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|CellModel
name|valueToCheckCell
init|=
name|cellModels
operator|.
name|get
argument_list|(
name|cellModelCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueToCheckColumn
init|=
name|valueToCheckCell
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|valueToPutParts
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|valueToCheckColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueToPutParts
operator|.
name|length
operator|==
literal|2
operator|&&
name|valueToPutParts
index|[
literal|1
index|]
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|CellModel
name|valueToPutCell
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|cellModelCount
operator|-
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cellModels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|valueToCheckCell
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|valueToPutCell
operator|=
name|cellModels
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|valueToPutCell
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|valueToPutParts
index|[
literal|0
index|]
argument_list|,
name|valueToPutParts
index|[
literal|1
index|]
argument_list|,
name|valueToPutCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|valueToPutCell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|this
operator|.
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|retValue
init|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|key
argument_list|,
name|valueToPutParts
index|[
literal|0
index|]
argument_list|,
name|valueToPutParts
index|[
literal|1
index|]
argument_list|,
name|valueToCheckCell
operator|.
name|getValue
argument_list|()
argument_list|,
name|put
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CHECK-AND-PUT "
operator|+
name|put
operator|.
name|toString
argument_list|()
operator|+
literal|", returns "
operator|+
name|retValue
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|retValue
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
literal|304
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{ }
block|}
block|}
comment|/**    * Validates the input request parameters, parses columns from CellSetModel,    * and invokes checkAndDelete on HTable.    *    * @param model instance of CellSetModel    * @return Response 200 OK, 304 Not modified, 400 Bad request    */
name|Response
name|checkAndDelete
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|)
block|{
name|HTablePool
name|pool
init|=
name|servlet
operator|.
name|getTablePool
argument_list|()
decl_stmt|;
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|RowModel
name|rowModel
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|rowModel
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
name|rowspec
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|CellModel
name|valueToDeleteCell
init|=
name|rowModel
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueToDeleteColumn
init|=
name|valueToDeleteCell
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueToDeleteColumn
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|valueToDeleteColumn
operator|=
name|rowspec
operator|.
name|getColumns
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|byte
index|[]
index|[]
name|parts
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|valueToDeleteColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
operator|&&
name|parts
index|[
literal|1
index|]
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Bad request"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|retValue
init|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|key
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|valueToDeleteCell
operator|.
name|getValue
argument_list|()
argument_list|,
name|delete
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CHECK-AND-DELETE "
operator|+
name|delete
operator|.
name|toString
argument_list|()
operator|+
literal|", returns "
operator|+
name|retValue
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|retValue
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
literal|304
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Unavailable"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception received while closing the table"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

