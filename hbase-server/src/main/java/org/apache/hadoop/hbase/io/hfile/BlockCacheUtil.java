begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|core
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|core
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import

begin_comment
comment|/**  * Utilty for aggregating counts in CachedBlocks and toString/toJSON CachedBlocks and BlockCaches.  * No attempt has been made at making this thread safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BlockCacheUtil
block|{
comment|/**    * Needed making histograms.    */
specifier|private
specifier|static
specifier|final
name|MetricsRegistry
name|METRICS
init|=
operator|new
name|MetricsRegistry
argument_list|()
decl_stmt|;
comment|/**    * Needed generating JSON.    */
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
static|static
block|{
name|MAPPER
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_EMPTY_BEANS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MAPPER
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|FLUSH_AFTER_WRITE_VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MAPPER
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|INDENT_OUTPUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cb    * @return The block content as String.    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|CachedBlock
name|cb
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
return|return
literal|"filename="
operator|+
name|cb
operator|.
name|getFilename
argument_list|()
operator|+
literal|", "
operator|+
name|toStringMinusFileName
argument_list|(
name|cb
argument_list|,
name|now
argument_list|)
return|;
block|}
comment|/**    * Little data structure to hold counts for a file.    * Used doing a toJSON.    */
specifier|static
class|class
name|CachedBlockCountsPerFile
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|countData
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|sizeData
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|String
name|filename
decl_stmt|;
name|CachedBlockCountsPerFile
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|int
name|getCountData
parameter_list|()
block|{
return|return
name|countData
return|;
block|}
specifier|public
name|long
name|getSizeData
parameter_list|()
block|{
return|return
name|sizeData
return|;
block|}
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|filename
return|;
block|}
block|}
comment|/**    * @param filename    * @param blocks    * @return A JSON String of<code>filename</code> and counts of<code>blocks</code>    * @throws JsonGenerationException    * @throws JsonMappingException    * @throws IOException    */
specifier|public
specifier|static
name|String
name|toJSON
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|CachedBlock
argument_list|>
name|blocks
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|JsonMappingException
throws|,
name|IOException
block|{
name|CachedBlockCountsPerFile
name|counts
init|=
operator|new
name|CachedBlockCountsPerFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
for|for
control|(
name|CachedBlock
name|cb
range|:
name|blocks
control|)
block|{
name|counts
operator|.
name|count
operator|++
expr_stmt|;
name|counts
operator|.
name|size
operator|+=
name|cb
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|BlockType
name|bt
init|=
name|cb
operator|.
name|getBlockType
argument_list|()
decl_stmt|;
if|if
condition|(
name|bt
operator|!=
literal|null
operator|&&
name|bt
operator|.
name|isData
argument_list|()
condition|)
block|{
name|counts
operator|.
name|countData
operator|++
expr_stmt|;
name|counts
operator|.
name|sizeData
operator|+=
name|cb
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|counts
argument_list|)
return|;
block|}
comment|/**    * @param cbsbf    * @return JSON string of<code>cbsf</code> aggregated    * @throws JsonGenerationException    * @throws JsonMappingException    * @throws IOException    */
specifier|public
specifier|static
name|String
name|toJSON
parameter_list|(
specifier|final
name|CachedBlocksByFile
name|cbsbf
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|JsonMappingException
throws|,
name|IOException
block|{
return|return
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|cbsbf
argument_list|)
return|;
block|}
comment|/**    * @param bc    * @return JSON string of<code>bc</code> content.    * @throws JsonGenerationException    * @throws JsonMappingException    * @throws IOException    */
specifier|public
specifier|static
name|String
name|toJSON
parameter_list|(
specifier|final
name|BlockCache
name|bc
parameter_list|)
throws|throws
name|JsonGenerationException
throws|,
name|JsonMappingException
throws|,
name|IOException
block|{
return|return
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|bc
argument_list|)
return|;
block|}
comment|/**    * @param cb    * @return The block content of<code>bc</code> as a String minus the filename.    */
specifier|public
specifier|static
name|String
name|toStringMinusFileName
parameter_list|(
specifier|final
name|CachedBlock
name|cb
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
return|return
literal|"offset="
operator|+
name|cb
operator|.
name|getOffset
argument_list|()
operator|+
literal|", size="
operator|+
name|cb
operator|.
name|getSize
argument_list|()
operator|+
literal|", age="
operator|+
operator|(
name|now
operator|-
name|cb
operator|.
name|getCachedTime
argument_list|()
operator|)
operator|+
literal|", type="
operator|+
name|cb
operator|.
name|getBlockType
argument_list|()
operator|+
literal|", priority="
operator|+
name|cb
operator|.
name|getBlockPriority
argument_list|()
return|;
block|}
comment|/**    * Get a {@link CachedBlocksByFile} instance and load it up by iterating content in    * {@link BlockCache}.    * @param conf Used to read configurations    * @param bc Block Cache to iterate.    * @return Laoded up instance of CachedBlocksByFile    */
specifier|public
specifier|static
name|CachedBlocksByFile
name|getLoadedCachedBlocksByFile
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|BlockCache
name|bc
parameter_list|)
block|{
name|CachedBlocksByFile
name|cbsbf
init|=
operator|new
name|CachedBlocksByFile
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|CachedBlock
name|cb
range|:
name|bc
control|)
block|{
if|if
condition|(
name|cbsbf
operator|.
name|update
argument_list|(
name|cb
argument_list|)
condition|)
break|break;
block|}
return|return
name|cbsbf
return|;
block|}
comment|/**    * Use one of these to keep a running account of cached blocks by file.  Throw it away when done.    * This is different than metrics in that it is stats on current state of a cache.    * See getLoadedCachedBlocksByFile    */
annotation|@
name|JsonIgnoreProperties
argument_list|(
block|{
literal|"cachedBlockStatsByFile"
block|}
argument_list|)
specifier|public
specifier|static
class|class
name|CachedBlocksByFile
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|int
name|dataBlockCount
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|long
name|dataSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX
init|=
literal|100000
decl_stmt|;
name|CachedBlocksByFile
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|CachedBlocksByFile
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|c
operator|==
literal|null
condition|?
name|DEFAULT_MAX
else|:
name|c
operator|.
name|getInt
argument_list|(
literal|"hbase.ui.blockcache.by.file.max"
argument_list|,
name|DEFAULT_MAX
argument_list|)
expr_stmt|;
block|}
comment|/**      * Map by filename. use concurent utils because we want our Map and contained blocks sorted.      */
specifier|private
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|NavigableSet
argument_list|<
name|CachedBlock
argument_list|>
argument_list|>
name|cachedBlockByFile
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|NavigableSet
argument_list|<
name|CachedBlock
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Histogram
name|age
init|=
name|METRICS
operator|.
name|newHistogram
argument_list|(
name|CachedBlocksByFile
operator|.
name|class
argument_list|,
literal|"age"
argument_list|)
decl_stmt|;
comment|/**      * @param cb      * @return True if full.... if we won't be adding any more.      */
specifier|public
name|boolean
name|update
parameter_list|(
specifier|final
name|CachedBlock
name|cb
parameter_list|)
block|{
if|if
condition|(
name|isFull
argument_list|()
condition|)
return|return
literal|true
return|;
name|NavigableSet
argument_list|<
name|CachedBlock
argument_list|>
name|set
init|=
name|this
operator|.
name|cachedBlockByFile
operator|.
name|get
argument_list|(
name|cb
operator|.
name|getFilename
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|CachedBlock
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|cachedBlockByFile
operator|.
name|put
argument_list|(
name|cb
operator|.
name|getFilename
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|cb
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|+=
name|cb
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|count
operator|++
expr_stmt|;
name|BlockType
name|bt
init|=
name|cb
operator|.
name|getBlockType
argument_list|()
decl_stmt|;
if|if
condition|(
name|bt
operator|!=
literal|null
operator|&&
name|bt
operator|.
name|isData
argument_list|()
condition|)
block|{
name|this
operator|.
name|dataBlockCount
operator|++
expr_stmt|;
name|this
operator|.
name|dataSize
operator|+=
name|cb
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|long
name|age
init|=
name|this
operator|.
name|now
operator|-
name|cb
operator|.
name|getCachedTime
argument_list|()
decl_stmt|;
name|this
operator|.
name|age
operator|.
name|update
argument_list|(
name|age
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * @return True if full; i.e. there are more items in the cache but we only loaded up      * the maximum set in configuration<code>hbase.ui.blockcache.by.file.max</code>      * (Default: DEFAULT_MAX).      */
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|this
operator|.
name|count
operator|>=
name|this
operator|.
name|max
return|;
block|}
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|NavigableSet
argument_list|<
name|CachedBlock
argument_list|>
argument_list|>
name|getCachedBlockStatsByFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|cachedBlockByFile
return|;
block|}
comment|/**      * @return count of blocks in the cache      */
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getDataCount
parameter_list|()
block|{
return|return
name|dataBlockCount
return|;
block|}
comment|/**      * @return size of blocks in the cache      */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * @return Size of data.      */
specifier|public
name|long
name|getDataSize
parameter_list|()
block|{
return|return
name|dataSize
return|;
block|}
specifier|public
name|AgeSnapshot
name|getAgeInCacheSnapshot
parameter_list|()
block|{
return|return
operator|new
name|AgeSnapshot
argument_list|(
name|this
operator|.
name|age
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Snapshot
name|snapshot
init|=
name|this
operator|.
name|age
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
return|return
literal|"count="
operator|+
name|count
operator|+
literal|", dataBlockCount="
operator|+
name|this
operator|.
name|dataBlockCount
operator|+
literal|", size="
operator|+
name|size
operator|+
literal|", dataSize="
operator|+
name|getDataSize
argument_list|()
operator|+
literal|", mean age="
operator|+
name|this
operator|.
name|age
operator|.
name|mean
argument_list|()
operator|+
literal|", stddev age="
operator|+
name|this
operator|.
name|age
operator|.
name|stdDev
argument_list|()
operator|+
literal|", min age="
operator|+
name|this
operator|.
name|age
operator|.
name|min
argument_list|()
operator|+
literal|", max age="
operator|+
name|this
operator|.
name|age
operator|.
name|max
argument_list|()
operator|+
literal|", 95th percentile age="
operator|+
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
operator|+
literal|", 99th percentile age="
operator|+
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

