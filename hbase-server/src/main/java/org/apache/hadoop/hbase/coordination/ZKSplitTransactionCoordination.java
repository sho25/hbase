begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REGION_SPLIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
operator|.
name|RS_ZK_REQUEST_REGION_SPLIT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|SplitTransactionCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_class
specifier|public
class|class
name|ZKSplitTransactionCoordination
implements|implements
name|SplitTransactionCoordination
block|{
specifier|private
name|CoordinatedStateManager
name|coordinationManager
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKSplitTransactionCoordination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ZKSplitTransactionCoordination
parameter_list|(
name|CoordinatedStateManager
name|coordinationProvider
parameter_list|,
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
name|this
operator|.
name|coordinationManager
operator|=
name|coordinationProvider
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
block|}
comment|/**    * Creates a new ephemeral node in the PENDING_SPLIT state for the specified region. Create it    * ephemeral in case regionserver dies mid-split.    *<p>    * Does not transition nodes from other states. If a node already exists for this region, an    * Exception will be thrown.    * @param parent region to be created as offline    * @param serverName server event originates from    * @param hri_a daughter region    * @param hri_b daughter region    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|startSplitTransaction
parameter_list|(
name|HRegion
name|parent
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|HRegionInfo
name|hri_a
parameter_list|,
name|HRegionInfo
name|hri_b
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|region
init|=
name|parent
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|watcher
operator|.
name|prefix
argument_list|(
literal|"Creating ephemeral node for "
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" in PENDING_SPLIT state"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|hri_a
argument_list|,
name|hri_b
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|createRegionTransition
argument_list|(
name|RS_ZK_REQUEST_REGION_SPLIT
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|watcher
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
name|rt
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed creating PENDING_SPLIT znode on "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Transitions an existing ephemeral node for the specified region which is currently in the begin    * state to be in the end state. Master cleans up the final SPLIT znode when it reads it (or if we    * crash, zk will clean it up).    *<p>    * Does not transition nodes from other states. If for some reason the node could not be    * transitioned, the method returns -1. If the transition is successful, the version of the node    * after transition is returned.    *<p>    * This method can fail and return false for three different reasons:    *<ul>    *<li>Node for this region does not exist</li>    *<li>Node for this region is not in the begin state</li>    *<li>After verifying the begin state, update fails because of wrong version (this should never    * actually happen since an RS only does this transition following a transition to the begin    * state. If two RS are conflicting, one would fail the original transition to the begin state and    * not this transition)</li>    *</ul>    *<p>    * Does not set any watches.    *<p>    * This method should only be used by a RegionServer when splitting a region.    * @param parent region to be transitioned to opened    * @param a Daughter a of split    * @param b Daughter b of split    * @param serverName server event originates from    * @param std split transaction details    * @param beginState the expected current state the znode should be    * @param endState the state to be transition to    * @return version of node after transition, -1 if unsuccessful transition    * @throws IOException    */
specifier|private
name|int
name|transitionSplittingNode
parameter_list|(
name|HRegionInfo
name|parent
parameter_list|,
name|HRegionInfo
name|a
parameter_list|,
name|HRegionInfo
name|b
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|SplitTransactionDetails
name|std
parameter_list|,
specifier|final
name|EventType
name|beginState
parameter_list|,
specifier|final
name|EventType
name|endState
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkSplitTransactionDetails
name|zstd
init|=
operator|(
name|ZkSplitTransactionDetails
operator|)
name|std
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|HRegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|watcher
argument_list|,
name|parent
argument_list|,
name|serverName
argument_list|,
name|beginState
argument_list|,
name|endState
argument_list|,
name|zstd
operator|.
name|getZnodeVersion
argument_list|()
argument_list|,
name|payload
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed transition of splitting node "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Wait for the splitting node to be transitioned from pending_split to splitting by master.    * That's how we are sure master has processed the event and is good with us to move on. If we    * don't get any update, we periodically transition the node so that master gets the callback. If    * the node is removed or is not in pending_split state any more, we abort the split.    */
annotation|@
name|Override
specifier|public
name|void
name|waitForSplitTransaction
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|HRegion
name|parent
parameter_list|,
name|HRegionInfo
name|hri_a
parameter_list|,
name|HRegionInfo
name|hri_b
parameter_list|,
name|SplitTransactionDetails
name|sptd
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkSplitTransactionDetails
name|zstd
init|=
operator|(
name|ZkSplitTransactionDetails
operator|)
name|sptd
decl_stmt|;
comment|// After creating the split node, wait for master to transition it
comment|// from PENDING_SPLIT to SPLITTING so that we can move on. We want master
comment|// knows about it and won't transition any region which is splitting.
try|try
block|{
name|int
name|spins
init|=
literal|0
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ServerName
name|expectedServer
init|=
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|node
init|=
name|parent
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|isStopped
argument_list|()
operator|||
name|services
operator|.
name|isStopping
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|spins
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Still waiting for master to process "
operator|+
literal|"the pending_split for "
operator|+
name|node
argument_list|)
expr_stmt|;
name|SplitTransactionDetails
name|temp
init|=
name|getDefaultDetails
argument_list|()
decl_stmt|;
name|transitionSplittingNode
argument_list|(
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|,
name|expectedServer
argument_list|,
name|temp
argument_list|,
name|RS_ZK_REQUEST_REGION_SPLIT
argument_list|,
name|RS_ZK_REQUEST_REGION_SPLIT
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|spins
operator|++
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKAssign
operator|.
name|getDataNoWatch
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data is null, splitting node "
operator|+
name|node
operator|+
literal|" no longer exists"
argument_list|)
throw|;
block|}
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|EventType
name|et
init|=
name|rt
operator|.
name|getEventType
argument_list|()
decl_stmt|;
if|if
condition|(
name|et
operator|==
name|RS_ZK_REGION_SPLITTING
condition|)
block|{
name|ServerName
name|serverName
init|=
name|rt
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serverName
operator|.
name|equals
argument_list|(
name|expectedServer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Splitting node "
operator|+
name|node
operator|+
literal|" is for "
operator|+
name|serverName
operator|+
literal|", not us "
operator|+
name|expectedServer
argument_list|)
throw|;
block|}
name|byte
index|[]
name|payloadOfSplitting
init|=
name|rt
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|splittingRegions
init|=
name|HRegionInfo
operator|.
name|parseDelimitedFrom
argument_list|(
name|payloadOfSplitting
argument_list|,
literal|0
argument_list|,
name|payloadOfSplitting
operator|.
name|length
argument_list|)
decl_stmt|;
assert|assert
name|splittingRegions
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
name|HRegionInfo
name|a
init|=
name|splittingRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|b
init|=
name|splittingRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|hri_a
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
name|hri_b
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Splitting node "
operator|+
name|node
operator|+
literal|" is for "
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
operator|+
literal|", not expected daughters: "
operator|+
name|hri_a
operator|+
literal|", "
operator|+
name|hri_b
argument_list|)
throw|;
block|}
comment|// Master has processed it.
name|zstd
operator|.
name|setZnodeVersion
argument_list|(
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|et
operator|!=
name|RS_ZK_REQUEST_REGION_SPLIT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Splitting node "
operator|+
name|node
operator|+
literal|" moved out of splitting to "
operator|+
name|et
argument_list|)
throw|;
block|}
block|}
comment|// Server is stopping/stopped
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server is "
operator|+
operator|(
name|services
operator|.
name|isStopping
argument_list|()
condition|?
literal|"stopping"
else|:
literal|"stopped"
operator|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed getting SPLITTING znode on "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Finish off split transaction, transition the zknode    * @param services Used to online/offline regions.    * @param a daughter region    * @param b daughter region    * @param std split transaction details    * @param parent    * @throws IOException If thrown, transaction failed. Call    *           {@link SplitTransaction#rollback(Server, RegionServerServices)}    */
annotation|@
name|Override
specifier|public
name|void
name|completeSplitTransaction
parameter_list|(
specifier|final
name|RegionServerServices
name|services
parameter_list|,
name|HRegion
name|a
parameter_list|,
name|HRegion
name|b
parameter_list|,
name|SplitTransactionDetails
name|std
parameter_list|,
name|HRegion
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|ZkSplitTransactionDetails
name|zstd
init|=
operator|(
name|ZkSplitTransactionDetails
operator|)
name|std
decl_stmt|;
comment|// Tell master about split by updating zk. If we fail, abort.
if|if
condition|(
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zstd
operator|.
name|setZnodeVersion
argument_list|(
name|transitionSplittingNode
argument_list|(
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|zstd
argument_list|,
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|RS_ZK_REGION_SPLIT
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|spins
init|=
literal|0
decl_stmt|;
comment|// Now wait for the master to process the split. We know it's done
comment|// when the znode is deleted. The reason we keep tickling the znode is
comment|// that it's possible for the master to miss an event.
do|do
block|{
if|if
condition|(
name|spins
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Still waiting on the master to process the split for "
operator|+
name|parent
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// When this returns -1 it means the znode doesn't exist
name|zstd
operator|.
name|setZnodeVersion
argument_list|(
name|transitionSplittingNode
argument_list|(
name|parent
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|a
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|b
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|zstd
argument_list|,
name|RS_ZK_REGION_SPLIT
argument_list|,
name|RS_ZK_REGION_SPLIT
argument_list|)
argument_list|)
expr_stmt|;
name|spins
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|zstd
operator|.
name|getZnodeVersion
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|services
operator|.
name|isStopping
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed telling master about split"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Leaving here, the splitdir with its dross will be in place but since the
comment|// split was successful, just leave it; it'll be cleaned when parent is
comment|// deleted and cleaned up.
block|}
annotation|@
name|Override
specifier|public
name|void
name|clean
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
try|try
block|{
comment|// Only delete if its in expected state; could have been hijacked.
if|if
condition|(
operator|!
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|RS_ZK_REQUEST_REGION_SPLIT
argument_list|,
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|ZKAssign
operator|.
name|deleteNode
argument_list|(
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed cleanup zk node of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|coordinationManager
operator|.
name|getServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Failed cleanup of "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ZK-based implementation. Has details about whether the state transition should be reflected in    * ZK, as well as expected version of znode.    */
specifier|public
specifier|static
class|class
name|ZkSplitTransactionDetails
implements|implements
name|SplitTransactionCoordination
operator|.
name|SplitTransactionDetails
block|{
specifier|private
name|int
name|znodeVersion
decl_stmt|;
specifier|public
name|ZkSplitTransactionDetails
parameter_list|()
block|{     }
comment|/**      * @return znode current version      */
specifier|public
name|int
name|getZnodeVersion
parameter_list|()
block|{
return|return
name|znodeVersion
return|;
block|}
comment|/**      * @param znodeVersion znode new version      */
specifier|public
name|void
name|setZnodeVersion
parameter_list|(
name|int
name|znodeVersion
parameter_list|)
block|{
name|this
operator|.
name|znodeVersion
operator|=
name|znodeVersion
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SplitTransactionDetails
name|getDefaultDetails
parameter_list|()
block|{
name|ZkSplitTransactionDetails
name|zstd
init|=
operator|new
name|ZkSplitTransactionDetails
argument_list|()
decl_stmt|;
name|zstd
operator|.
name|setZnodeVersion
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|zstd
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|processTransition
parameter_list|(
name|HRegionInfo
name|p
parameter_list|,
name|HRegionInfo
name|hri_a
parameter_list|,
name|HRegionInfo
name|hri_b
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|SplitTransactionDetails
name|std
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|transitionSplittingNode
argument_list|(
name|p
argument_list|,
name|hri_a
argument_list|,
name|hri_b
argument_list|,
name|sn
argument_list|,
name|std
argument_list|,
name|RS_ZK_REQUEST_REGION_SPLIT
argument_list|,
name|RS_ZK_REGION_SPLITTING
argument_list|)
return|;
block|}
block|}
end_class

end_unit

