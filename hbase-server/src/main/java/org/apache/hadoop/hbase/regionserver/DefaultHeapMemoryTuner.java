begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|MEMSTORE_SIZE_MAX_RANGE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|MEMSTORE_SIZE_MIN_RANGE_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|TunerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HeapMemoryManager
operator|.
name|TunerResult
import|;
end_import

begin_comment
comment|/**  * The default implementation for the HeapMemoryTuner. This will do simple checks to decide  * whether there should be changes in the heap size of memstore/block cache. When there is no block  * cache eviction at all but there are flushes because of global heap pressure, it will increase the  * memstore heap size and decrease block cache size. The step value for this heap size change can be  * specified using the config<i>hbase.regionserver.heapmemory.autotuner.step</i>. When there is no  * memstore flushes because of heap pressure but there is block cache evictions it will increase the  * block cache heap.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|DefaultHeapMemoryTuner
implements|implements
name|HeapMemoryTuner
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STEP_KEY
init|=
literal|"hbase.regionserver.heapmemory.autotuner.step"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_STEP_VALUE
init|=
literal|0.02f
decl_stmt|;
comment|// 2%
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|float
name|step
init|=
name|DEFAULT_STEP_VALUE
decl_stmt|;
specifier|private
name|float
name|globalMemStorePercentMinRange
decl_stmt|;
specifier|private
name|float
name|globalMemStorePercentMaxRange
decl_stmt|;
specifier|private
name|float
name|blockCachePercentMinRange
decl_stmt|;
specifier|private
name|float
name|blockCachePercentMaxRange
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TunerResult
name|tune
parameter_list|(
name|TunerContext
name|context
parameter_list|)
block|{
name|long
name|blockedFlushCount
init|=
name|context
operator|.
name|getBlockedFlushCount
argument_list|()
decl_stmt|;
name|long
name|unblockedFlushCount
init|=
name|context
operator|.
name|getUnblockedFlushCount
argument_list|()
decl_stmt|;
name|long
name|evictCount
init|=
name|context
operator|.
name|getEvictCount
argument_list|()
decl_stmt|;
name|boolean
name|memstoreSufficient
init|=
name|blockedFlushCount
operator|==
literal|0
operator|&&
name|unblockedFlushCount
operator|==
literal|0
decl_stmt|;
name|boolean
name|blockCacheSufficient
init|=
name|evictCount
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|memstoreSufficient
operator|&&
name|blockCacheSufficient
condition|)
block|{
return|return
operator|new
name|TunerResult
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|TunerResult
name|result
init|=
operator|new
name|TunerResult
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|float
name|newMemstoreSize
decl_stmt|;
name|float
name|newBlockCacheSize
decl_stmt|;
if|if
condition|(
name|memstoreSufficient
condition|)
block|{
comment|// Increase the block cache size and corresponding decrease in memstore size
name|newBlockCacheSize
operator|=
name|context
operator|.
name|getCurBlockCacheSize
argument_list|()
operator|+
name|step
expr_stmt|;
name|newMemstoreSize
operator|=
name|context
operator|.
name|getCurMemStoreSize
argument_list|()
operator|-
name|step
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockCacheSufficient
condition|)
block|{
comment|// Increase the memstore size and corresponding decrease in block cache size
name|newBlockCacheSize
operator|=
name|context
operator|.
name|getCurBlockCacheSize
argument_list|()
operator|-
name|step
expr_stmt|;
name|newMemstoreSize
operator|=
name|context
operator|.
name|getCurMemStoreSize
argument_list|()
operator|+
name|step
expr_stmt|;
block|}
else|else
block|{
return|return
operator|new
name|TunerResult
argument_list|(
literal|false
argument_list|)
return|;
comment|// As of now not making any tuning in write/read heavy scenario.
block|}
if|if
condition|(
name|newMemstoreSize
operator|>
name|globalMemStorePercentMaxRange
condition|)
block|{
name|newMemstoreSize
operator|=
name|globalMemStorePercentMaxRange
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newMemstoreSize
operator|<
name|globalMemStorePercentMinRange
condition|)
block|{
name|newMemstoreSize
operator|=
name|globalMemStorePercentMinRange
expr_stmt|;
block|}
if|if
condition|(
name|newBlockCacheSize
operator|>
name|blockCachePercentMaxRange
condition|)
block|{
name|newBlockCacheSize
operator|=
name|blockCachePercentMaxRange
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newBlockCacheSize
operator|<
name|blockCachePercentMinRange
condition|)
block|{
name|newBlockCacheSize
operator|=
name|blockCachePercentMinRange
expr_stmt|;
block|}
name|result
operator|.
name|setBlockCacheSize
argument_list|(
name|newBlockCacheSize
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMemstoreSize
argument_list|(
name|newMemstoreSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|step
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|STEP_KEY
argument_list|,
name|DEFAULT_STEP_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockCachePercentMinRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MIN_RANGE_KEY
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockCachePercentMaxRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BLOCK_CACHE_SIZE_MAX_RANGE_KEY
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|globalMemStorePercentMinRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_MIN_RANGE_KEY
argument_list|,
name|MemStoreFlusher
operator|.
name|getGlobalMemStorePercent
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|globalMemStorePercentMaxRange
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_MAX_RANGE_KEY
argument_list|,
name|MemStoreFlusher
operator|.
name|getGlobalMemStorePercent
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

