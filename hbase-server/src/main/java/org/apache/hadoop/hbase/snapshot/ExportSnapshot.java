begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|FileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HLogLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|JobUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|util
operator|.
name|ThrottledInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Export the specified snapshot to a given FileSystem.  *  * The .snapshot/name folder is copied to the destination cluster  * and then all the hfiles/hlogs are copied using a Map-Reduce Job in the .archive/ location.  * When everything is done, the second cluster can restore the snapshot.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|ExportSnapshot
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExportSnapshot
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_FILES_USER
init|=
literal|"snapshot.export.files.attributes.user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_FILES_GROUP
init|=
literal|"snapshot.export.files.attributes.group"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_FILES_MODE
init|=
literal|"snapshot.export.files.attributes.mode"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_CHECKSUM_VERIFY
init|=
literal|"snapshot.export.checksum.verify"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_OUTPUT_ROOT
init|=
literal|"snapshot.export.output.root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_INPUT_ROOT
init|=
literal|"snapshot.export.input.root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_BUFFER_SIZE
init|=
literal|"snapshot.export.buffer.size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_MAP_GROUP
init|=
literal|"snapshot.export.default.map.group"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_BANDWIDTH_MB
init|=
literal|"snapshot.export.map.bandwidth.mb"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CONF_SKIP_TMP
init|=
literal|"snapshot.export.skip.tmp"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONF_TEST_FAILURE
init|=
literal|"test.snapshot.export.failure"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONF_TEST_RETRY
init|=
literal|"test.snapshot.export.failure.retry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_FOLDER_PREFIX
init|=
literal|"export-files."
decl_stmt|;
comment|// Export Map-Reduce Counters, to keep track of the progress
specifier|public
enum|enum
name|Counter
block|{
name|MISSING_FILES
block|,
name|COPY_FAILED
block|,
name|BYTES_EXPECTED
block|,
name|BYTES_COPIED
block|,
name|FILES_COPIED
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|ExportMapper
extends|extends
name|Mapper
argument_list|<
name|BytesWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
specifier|final
specifier|static
name|int
name|REPORT_SIZE
init|=
literal|1
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
specifier|static
name|int
name|BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
name|boolean
name|testFailures
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
specifier|private
name|boolean
name|verifyChecksum
decl_stmt|;
specifier|private
name|String
name|filesGroup
decl_stmt|;
specifier|private
name|String
name|filesUser
decl_stmt|;
specifier|private
name|short
name|filesMode
decl_stmt|;
specifier|private
name|int
name|bufferSize
decl_stmt|;
specifier|private
name|FileSystem
name|outputFs
decl_stmt|;
specifier|private
name|Path
name|outputArchive
decl_stmt|;
specifier|private
name|Path
name|outputRoot
decl_stmt|;
specifier|private
name|FileSystem
name|inputFs
decl_stmt|;
specifier|private
name|Path
name|inputArchive
decl_stmt|;
specifier|private
name|Path
name|inputRoot
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|verifyChecksum
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CONF_CHECKSUM_VERIFY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesGroup
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_FILES_GROUP
argument_list|)
expr_stmt|;
name|filesUser
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_FILES_USER
argument_list|)
expr_stmt|;
name|filesMode
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|CONF_FILES_MODE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|outputRoot
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CONF_OUTPUT_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|inputRoot
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CONF_INPUT_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|inputArchive
operator|=
operator|new
name|Path
argument_list|(
name|inputRoot
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
expr_stmt|;
name|outputArchive
operator|=
operator|new
name|Path
argument_list|(
name|outputRoot
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
expr_stmt|;
name|testFailures
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CONF_TEST_FAILURE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|inputFs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|inputRoot
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get the input FileSystem with root="
operator|+
name|inputRoot
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|outputFs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|outputRoot
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get the output FileSystem with root="
operator|+
name|outputRoot
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Use the default block size of the outputFs if bigger
name|int
name|defaultBlockSize
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|outputFs
operator|.
name|getDefaultBlockSize
argument_list|(
name|outputRoot
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
decl_stmt|;
name|bufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CONF_BUFFER_SIZE
argument_list|,
name|defaultBlockSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using bufferSize="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|SnapshotFileInfo
name|inputInfo
init|=
name|SnapshotFileInfo
operator|.
name|parseFrom
argument_list|(
name|key
operator|.
name|copyBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|outputPath
init|=
name|getOutputPath
argument_list|(
name|inputInfo
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|context
argument_list|,
name|inputInfo
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the location where the inputPath will be copied.      */
specifier|private
name|Path
name|getOutputPath
parameter_list|(
specifier|final
name|SnapshotFileInfo
name|inputInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|inputInfo
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HFILE
case|:
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|inputInfo
operator|.
name|getHfile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|family
init|=
name|inputPath
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TableName
name|table
init|=
name|HFileLink
operator|.
name|getReferencedTableName
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|HFileLink
operator|.
name|getReferencedRegionName
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hfile
init|=
name|HFileLink
operator|.
name|getReferencedHFileName
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getTableDir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"./"
argument_list|)
argument_list|,
name|table
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|region
argument_list|,
operator|new
name|Path
argument_list|(
name|family
argument_list|,
name|hfile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAL
case|:
name|Path
name|oldLogsDir
init|=
operator|new
name|Path
argument_list|(
name|outputRoot
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|oldLogsDir
argument_list|,
name|inputInfo
operator|.
name|getWalName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid File Type: "
operator|+
name|inputInfo
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|outputArchive
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/*      * Used by TestExportSnapshot to simulate a failure      */
specifier|private
name|void
name|injectTestFailure
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|,
specifier|final
name|SnapshotFileInfo
name|inputInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|testFailures
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|CONF_TEST_RETRY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
comment|// FLAKY-TEST-WARN: lower is better, we can get some runs without the
comment|// retry, but at least we reduce the number of test failures due to
comment|// this test exception from the same map task.
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
literal|0.03
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TEST RETRY FAILURE: Unable to copy input="
operator|+
name|inputInfo
operator|+
literal|" time="
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|COPY_FAILED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TEST FAILURE: Unable to copy input="
operator|+
name|inputInfo
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|copyFile
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|,
specifier|final
name|SnapshotFileInfo
name|inputInfo
parameter_list|,
specifier|final
name|Path
name|outputPath
parameter_list|)
throws|throws
name|IOException
block|{
name|injectTestFailure
argument_list|(
name|context
argument_list|,
name|inputInfo
argument_list|)
expr_stmt|;
comment|// Get the file information
name|FileStatus
name|inputStat
init|=
name|getSourceFileStatus
argument_list|(
name|context
argument_list|,
name|inputInfo
argument_list|)
decl_stmt|;
comment|// Verify if the output file exists and is the same that we want to copy
if|if
condition|(
name|outputFs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
condition|)
block|{
name|FileStatus
name|outputStat
init|=
name|outputFs
operator|.
name|getFileStatus
argument_list|(
name|outputPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputStat
operator|!=
literal|null
operator|&&
name|sameFile
argument_list|(
name|inputStat
argument_list|,
name|outputStat
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip copy "
operator|+
name|inputStat
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|outputPath
operator|+
literal|", same file."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|InputStream
name|in
init|=
name|openSourceFile
argument_list|(
name|context
argument_list|,
name|inputInfo
argument_list|)
decl_stmt|;
name|int
name|bandwidthMB
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|CONF_BANDWIDTH_MB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|MAX_VALUE
operator|!=
name|bandwidthMB
condition|)
block|{
name|in
operator|=
operator|new
name|ThrottledInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
argument_list|,
name|bandwidthMB
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|BYTES_EXPECTED
argument_list|)
operator|.
name|increment
argument_list|(
name|inputStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the output folder is there and copy the file
name|outputFs
operator|.
name|mkdirs
argument_list|(
name|outputPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|outputFs
operator|.
name|create
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|copyData
argument_list|(
name|context
argument_list|,
name|inputStat
operator|.
name|getPath
argument_list|()
argument_list|,
name|in
argument_list|,
name|outputPath
argument_list|,
name|out
argument_list|,
name|inputStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Try to Preserve attributes
if|if
condition|(
operator|!
name|preserveAttributes
argument_list|(
name|outputPath
argument_list|,
name|inputStat
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You may have to run manually chown on: "
operator|+
name|outputPath
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Try to Preserve the files attribute selected by the user copying them from the source file      * This is only required when you are exporting as a different user than "hbase" or on a system      * that doesn't have the "hbase" user.      *      * This is not considered a blocking failure since the user can force a chmod with the user      * that knows is available on the system.      */
specifier|private
name|boolean
name|preserveAttributes
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FileStatus
name|refStat
parameter_list|)
block|{
name|FileStatus
name|stat
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|outputFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get the status for file="
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|filesMode
operator|>
literal|0
operator|&&
name|stat
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|!=
name|filesMode
condition|)
block|{
name|outputFs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|filesMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|refStat
operator|!=
literal|null
operator|&&
operator|!
name|stat
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|refStat
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
name|outputFs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|refStat
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to set the permission for file="
operator|+
name|stat
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|hasRefStat
init|=
operator|(
name|refStat
operator|!=
literal|null
operator|)
decl_stmt|;
name|String
name|user
init|=
name|stringIsNotEmpty
argument_list|(
name|filesUser
argument_list|)
operator|||
operator|!
name|hasRefStat
condition|?
name|filesUser
else|:
name|refStat
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|stringIsNotEmpty
argument_list|(
name|filesGroup
argument_list|)
operator|||
operator|!
name|hasRefStat
condition|?
name|filesGroup
else|:
name|refStat
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringIsNotEmpty
argument_list|(
name|user
argument_list|)
operator|||
name|stringIsNotEmpty
argument_list|(
name|group
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|user
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|&&
name|group
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|outputFs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|user
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to set the owner/group for file="
operator|+
name|stat
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The user/group may not exist on the destination cluster: user="
operator|+
name|user
operator|+
literal|" group="
operator|+
name|group
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|stringIsNotEmpty
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|private
name|void
name|copyData
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|,
specifier|final
name|Path
name|inputPath
parameter_list|,
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|Path
name|outputPath
parameter_list|,
specifier|final
name|FSDataOutputStream
name|out
parameter_list|,
specifier|final
name|long
name|inputFileSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|statusMessage
init|=
literal|"copied %s/"
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|inputFileSize
argument_list|)
operator|+
literal|" (%.1f%%)"
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|long
name|totalBytesWritten
init|=
literal|0
decl_stmt|;
name|int
name|reportBytes
init|=
literal|0
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
name|long
name|stime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|totalBytesWritten
operator|+=
name|bytesRead
expr_stmt|;
name|reportBytes
operator|+=
name|bytesRead
expr_stmt|;
if|if
condition|(
name|reportBytes
operator|>=
name|REPORT_SIZE
condition|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|BYTES_COPIED
argument_list|)
operator|.
name|increment
argument_list|(
name|reportBytes
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statusMessage
argument_list|,
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|totalBytesWritten
argument_list|)
argument_list|,
operator|(
name|totalBytesWritten
operator|/
operator|(
name|float
operator|)
name|inputFileSize
operator|)
operator|*
literal|100.0f
argument_list|)
operator|+
literal|" from "
operator|+
name|inputPath
operator|+
literal|" to "
operator|+
name|outputPath
argument_list|)
expr_stmt|;
name|reportBytes
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|long
name|etime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|BYTES_COPIED
argument_list|)
operator|.
name|increment
argument_list|(
name|reportBytes
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statusMessage
argument_list|,
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|totalBytesWritten
argument_list|)
argument_list|,
operator|(
name|totalBytesWritten
operator|/
operator|(
name|float
operator|)
name|inputFileSize
operator|)
operator|*
literal|100.0f
argument_list|)
operator|+
literal|" from "
operator|+
name|inputPath
operator|+
literal|" to "
operator|+
name|outputPath
argument_list|)
expr_stmt|;
comment|// Verify that the written size match
if|if
condition|(
name|totalBytesWritten
operator|!=
name|inputFileSize
condition|)
block|{
name|String
name|msg
init|=
literal|"number of bytes copied not matching copied="
operator|+
name|totalBytesWritten
operator|+
literal|" expected="
operator|+
name|inputFileSize
operator|+
literal|" for file="
operator|+
name|inputPath
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"copy completed for input="
operator|+
name|inputPath
operator|+
literal|" output="
operator|+
name|outputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|totalBytesWritten
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|totalBytesWritten
argument_list|)
operator|+
literal|")"
operator|+
literal|" time="
operator|+
name|StringUtils
operator|.
name|formatTimeDiff
argument_list|(
name|etime
argument_list|,
name|stime
argument_list|)
operator|+
name|String
operator|.
name|format
argument_list|(
literal|" %.3fM/sec"
argument_list|,
operator|(
name|totalBytesWritten
operator|/
operator|(
operator|(
name|etime
operator|-
name|stime
operator|)
operator|/
literal|1000.0
operator|)
operator|)
operator|/
literal|1048576.0
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|FILES_COPIED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error copying "
operator|+
name|inputPath
operator|+
literal|" to "
operator|+
name|outputPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|COPY_FAILED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Try to open the "source" file.      * Throws an IOException if the communication with the inputFs fail or      * if the file is not found.      */
specifier|private
name|FSDataInputStream
name|openSourceFile
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|SnapshotFileInfo
name|fileInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileLink
name|link
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|fileInfo
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HFILE
case|:
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|fileInfo
operator|.
name|getHfile
argument_list|()
argument_list|)
decl_stmt|;
name|link
operator|=
operator|new
name|HFileLink
argument_list|(
name|inputRoot
argument_list|,
name|inputArchive
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAL
case|:
name|String
name|serverName
init|=
name|fileInfo
operator|.
name|getWalServer
argument_list|()
decl_stmt|;
name|String
name|logName
init|=
name|fileInfo
operator|.
name|getWalName
argument_list|()
decl_stmt|;
name|link
operator|=
operator|new
name|HLogLink
argument_list|(
name|inputRoot
argument_list|,
name|serverName
argument_list|,
name|logName
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid File Type: "
operator|+
name|fileInfo
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|link
operator|.
name|open
argument_list|(
name|inputFs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MISSING_FILES
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to open source file="
operator|+
name|fileInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|FileStatus
name|getSourceFileStatus
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|SnapshotFileInfo
name|fileInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileLink
name|link
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|fileInfo
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HFILE
case|:
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|fileInfo
operator|.
name|getHfile
argument_list|()
argument_list|)
decl_stmt|;
name|link
operator|=
operator|new
name|HFileLink
argument_list|(
name|inputRoot
argument_list|,
name|inputArchive
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAL
case|:
name|link
operator|=
operator|new
name|HLogLink
argument_list|(
name|inputRoot
argument_list|,
name|fileInfo
operator|.
name|getWalServer
argument_list|()
argument_list|,
name|fileInfo
operator|.
name|getWalName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid File Type: "
operator|+
name|fileInfo
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|link
operator|.
name|getFileStatus
argument_list|(
name|inputFs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|MISSING_FILES
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get the status for source file="
operator|+
name|fileInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get the status for source file="
operator|+
name|fileInfo
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get checksum for file="
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Check if the two files are equal by looking at the file length,      * and at the checksum (if user has specified the verifyChecksum flag).      */
specifier|private
name|boolean
name|sameFile
parameter_list|(
specifier|final
name|FileStatus
name|inputStat
parameter_list|,
specifier|final
name|FileStatus
name|outputStat
parameter_list|)
block|{
comment|// Not matching length
if|if
condition|(
name|inputStat
operator|.
name|getLen
argument_list|()
operator|!=
name|outputStat
operator|.
name|getLen
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Mark files as equals, since user asked for no checksum verification
if|if
condition|(
operator|!
name|verifyChecksum
condition|)
return|return
literal|true
return|;
comment|// If checksums are not available, files are not the same.
name|FileChecksum
name|inChecksum
init|=
name|getFileChecksum
argument_list|(
name|inputFs
argument_list|,
name|inputStat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inChecksum
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|FileChecksum
name|outChecksum
init|=
name|getFileChecksum
argument_list|(
name|outputFs
argument_list|,
name|outputStat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outChecksum
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|inChecksum
operator|.
name|equals
argument_list|(
name|outChecksum
argument_list|)
return|;
block|}
block|}
comment|/**    * Extract the list of files (HFiles/HLogs) to copy using Map-Reduce.    * @return list of files referenced by the snapshot (pair of path and size)    */
specifier|private
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getSnapshotFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// Get snapshot files
name|SnapshotReferenceUtil
operator|.
name|visitReferencedFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|SnapshotVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storeFile
operator|.
name|hasReference
argument_list|()
condition|)
block|{
comment|// copied as part of the manifest
block|}
else|else
block|{
name|String
name|region
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|String
name|hfile
init|=
name|storeFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|HFileLink
operator|.
name|createPath
argument_list|(
name|table
argument_list|,
name|region
argument_list|,
name|family
argument_list|,
name|hfile
argument_list|)
decl_stmt|;
name|SnapshotFileInfo
name|fileInfo
init|=
name|SnapshotFileInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|SnapshotFileInfo
operator|.
name|Type
operator|.
name|HFILE
argument_list|)
operator|.
name|setHfile
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|size
init|=
operator|new
name|HFileLink
argument_list|(
name|conf
argument_list|,
name|path
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|fs
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|(
name|fileInfo
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|logFile
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotFileInfo
name|fileInfo
init|=
name|SnapshotFileInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|SnapshotFileInfo
operator|.
name|Type
operator|.
name|WAL
argument_list|)
operator|.
name|setWalServer
argument_list|(
name|server
argument_list|)
operator|.
name|setWalName
argument_list|(
name|logfile
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|size
init|=
operator|new
name|HLogLink
argument_list|(
name|conf
argument_list|,
name|server
argument_list|,
name|logfile
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|fs
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|(
name|fileInfo
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
comment|/**    * Given a list of file paths and sizes, create around ngroups in as balanced a way as possible.    * The groups created will have similar amounts of bytes.    *<p>    * The algorithm used is pretty straightforward; the file list is sorted by size,    * and then each group fetch the bigger file available, iterating through groups    * alternating the direction.    */
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
argument_list|>
name|getBalancedSplits
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|files
parameter_list|,
specifier|final
name|int
name|ngroups
parameter_list|)
block|{
comment|// Sort files by size, from small to big
name|Collections
operator|.
name|sort
argument_list|(
name|files
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
name|a
parameter_list|,
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
name|b
parameter_list|)
block|{
name|long
name|r
init|=
name|a
operator|.
name|getSecond
argument_list|()
operator|-
name|b
operator|.
name|getSecond
argument_list|()
decl_stmt|;
return|return
operator|(
name|r
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|r
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// create balanced groups
name|List
argument_list|<
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
argument_list|>
name|fileGroups
init|=
operator|new
name|LinkedList
argument_list|<
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|long
index|[]
name|sizeGroups
init|=
operator|new
name|long
index|[
name|ngroups
index|]
decl_stmt|;
name|int
name|hi
init|=
name|files
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|lo
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
name|group
decl_stmt|;
name|int
name|dir
init|=
literal|1
decl_stmt|;
name|int
name|g
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
if|if
condition|(
name|g
operator|==
name|fileGroups
operator|.
name|size
argument_list|()
condition|)
block|{
name|group
operator|=
operator|new
name|LinkedList
argument_list|<
name|SnapshotFileInfo
argument_list|>
argument_list|()
expr_stmt|;
name|fileGroups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group
operator|=
name|fileGroups
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
name|fileInfo
init|=
name|files
operator|.
name|get
argument_list|(
name|hi
operator|--
argument_list|)
decl_stmt|;
comment|// add the hi one
name|sizeGroups
index|[
name|g
index|]
operator|+=
name|fileInfo
operator|.
name|getSecond
argument_list|()
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|fileInfo
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
comment|// change direction when at the end or the beginning
name|g
operator|+=
name|dir
expr_stmt|;
if|if
condition|(
name|g
operator|==
name|ngroups
condition|)
block|{
name|dir
operator|=
operator|-
literal|1
expr_stmt|;
name|g
operator|=
name|ngroups
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|g
operator|<
literal|0
condition|)
block|{
name|dir
operator|=
literal|1
expr_stmt|;
name|g
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizeGroups
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"export split="
operator|+
name|i
operator|+
literal|" size="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|sizeGroups
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileGroups
return|;
block|}
specifier|private
specifier|static
name|Path
name|getInputFolderPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|stagingDir
init|=
name|JobUtil
operator|.
name|getStagingDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|stagingDir
argument_list|,
name|INPUT_FOLDER_PREFIX
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create the input files, with the path to copy, for the MR job.    * Each input files contains n files, and each input file has a similar amount data to copy.    * The number of input files created are based on the number of mappers provided as argument    * and the number of the files to copy.    */
specifier|private
specifier|static
name|Path
index|[]
name|createInputFiles
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|inputFolderPath
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|snapshotFiles
parameter_list|,
name|int
name|mappers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FileSystem
name|fs
init|=
name|inputFolderPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Input folder location: "
operator|+
name|inputFolderPath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
argument_list|>
name|splits
init|=
name|getBalancedSplits
argument_list|(
name|snapshotFiles
argument_list|,
name|mappers
argument_list|)
decl_stmt|;
name|Path
index|[]
name|inputFiles
init|=
operator|new
name|Path
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|BytesWritable
name|key
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|SnapshotFileInfo
argument_list|>
name|files
init|=
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|inputFiles
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|inputFolderPath
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"export-%d.seq"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|inputFiles
index|[
name|i
index|]
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Input split: "
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|SnapshotFileInfo
name|file
range|:
name|files
control|)
block|{
name|byte
index|[]
name|pbFileInfo
init|=
name|file
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|key
operator|.
name|set
argument_list|(
name|pbFileInfo
argument_list|,
literal|0
argument_list|,
name|pbFileInfo
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|inputFiles
return|;
block|}
comment|/**    * Run Map-Reduce Job to perform the files copy.    */
specifier|private
name|void
name|runCopyJob
parameter_list|(
specifier|final
name|Path
name|inputRoot
parameter_list|,
specifier|final
name|Path
name|outputRoot
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|snapshotFiles
parameter_list|,
specifier|final
name|boolean
name|verifyChecksum
parameter_list|,
specifier|final
name|String
name|filesUser
parameter_list|,
specifier|final
name|String
name|filesGroup
parameter_list|,
specifier|final
name|int
name|filesMode
parameter_list|,
specifier|final
name|int
name|mappers
parameter_list|,
specifier|final
name|int
name|bandwidthMB
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesGroup
operator|!=
literal|null
condition|)
name|conf
operator|.
name|set
argument_list|(
name|CONF_FILES_GROUP
argument_list|,
name|filesGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesUser
operator|!=
literal|null
condition|)
name|conf
operator|.
name|set
argument_list|(
name|CONF_FILES_USER
argument_list|,
name|filesUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CONF_FILES_MODE
argument_list|,
name|filesMode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CONF_CHECKSUM_VERIFY
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONF_OUTPUT_ROOT
argument_list|,
name|outputRoot
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONF_INPUT_ROOT
argument_list|,
name|inputRoot
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CONF_BANDWIDTH_MB
argument_list|,
name|bandwidthMB
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"ExportSnapshot"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|ExportSnapshot
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|ExportMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Create MR Input
name|Path
name|inputFolderPath
init|=
name|getInputFolderPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|createInputFiles
argument_list|(
name|conf
argument_list|,
name|inputFolderPath
argument_list|,
name|snapshotFiles
argument_list|,
name|mappers
argument_list|)
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add Input Path="
operator|+
name|path
argument_list|)
expr_stmt|;
name|SequenceFileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Acquire the delegation Tokens
name|TokenCache
operator|.
name|obtainTokensForNamenodes
argument_list|(
name|job
operator|.
name|getCredentials
argument_list|()
argument_list|,
operator|new
name|Path
index|[]
block|{
name|inputRoot
block|,
name|outputRoot
block|}
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Run the MR Job
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
comment|// TODO: Replace the fixed string with job.getStatus().getFailureInfo()
comment|// when it will be available on all the supported versions.
throw|throw
operator|new
name|ExportSnapshotException
argument_list|(
literal|"Copy Files Map-Reduce Job failed"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// Remove MR Input
try|try
block|{
name|inputFolderPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|inputFolderPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to remove MR input folder: "
operator|+
name|inputFolderPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|verifySnapshot
parameter_list|(
specifier|final
name|Configuration
name|baseConf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Update the conf with the current root dir, since may be a different cluster
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|baseConf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|conf
argument_list|,
name|snapshotDir
argument_list|)
expr_stmt|;
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|verifySnapshot
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the export snapshot by copying the snapshot metadata, hfiles and hlogs.    * @return 0 on success, and != 0 upon failure.    */
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|verifyTarget
init|=
literal|true
decl_stmt|;
name|boolean
name|verifyChecksum
init|=
literal|true
decl_stmt|;
name|String
name|snapshotName
init|=
literal|null
decl_stmt|;
name|String
name|targetName
init|=
literal|null
decl_stmt|;
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
name|String
name|filesGroup
init|=
literal|null
decl_stmt|;
name|String
name|filesUser
init|=
literal|null
decl_stmt|;
name|Path
name|outputRoot
init|=
literal|null
decl_stmt|;
name|int
name|bandwidthMB
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|filesMode
init|=
literal|0
decl_stmt|;
name|int
name|mappers
init|=
literal|0
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// Process command line args
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-snapshot"
argument_list|)
condition|)
block|{
name|snapshotName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-target"
argument_list|)
condition|)
block|{
name|targetName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-copy-to"
argument_list|)
condition|)
block|{
name|outputRoot
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-copy-from"
argument_list|)
condition|)
block|{
name|Path
name|sourceDir
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
decl_stmt|;
name|URI
name|defaultFs
init|=
name|sourceDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|defaultFs
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|sourceDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-no-checksum-verify"
argument_list|)
condition|)
block|{
name|verifyChecksum
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-no-target-verify"
argument_list|)
condition|)
block|{
name|verifyTarget
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-mappers"
argument_list|)
condition|)
block|{
name|mappers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chuser"
argument_list|)
condition|)
block|{
name|filesUser
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chgroup"
argument_list|)
condition|)
block|{
name|filesGroup
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-bandwidth"
argument_list|)
condition|)
block|{
name|bandwidthMB
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chmod"
argument_list|)
condition|)
block|{
name|filesMode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-overwrite"
argument_list|)
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UNEXPECTED: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check user options
if|if
condition|(
name|snapshotName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Snapshot name not provided."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outputRoot
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Destination file-system not provided."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|targetName
operator|==
literal|null
condition|)
block|{
name|targetName
operator|=
name|snapshotName
expr_stmt|;
block|}
name|Path
name|inputRoot
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|inputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|inputRoot
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"inputFs="
operator|+
name|inputFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" inputRoot="
operator|+
name|inputRoot
argument_list|)
expr_stmt|;
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|outputRoot
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"outputFs="
operator|+
name|outputFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" outputRoot="
operator|+
name|outputRoot
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|skipTmp
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CONF_SKIP_TMP
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|inputRoot
argument_list|)
decl_stmt|;
name|Path
name|snapshotTmpDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|targetName
argument_list|,
name|outputRoot
argument_list|)
decl_stmt|;
name|Path
name|outputSnapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|targetName
argument_list|,
name|outputRoot
argument_list|)
decl_stmt|;
name|Path
name|initialOutputSnapshotDir
init|=
name|skipTmp
condition|?
name|outputSnapshotDir
else|:
name|snapshotTmpDir
decl_stmt|;
comment|// Check if the snapshot already exists
if|if
condition|(
name|outputFs
operator|.
name|exists
argument_list|(
name|outputSnapshotDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
if|if
condition|(
operator|!
name|outputFs
operator|.
name|delete
argument_list|(
name|outputSnapshotDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to remove existing snapshot directory: "
operator|+
name|outputSnapshotDir
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The snapshot '"
operator|+
name|targetName
operator|+
literal|"' already exists in the destination: "
operator|+
name|outputSnapshotDir
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
operator|!
name|skipTmp
condition|)
block|{
comment|// Check if the snapshot already in-progress
if|if
condition|(
name|outputFs
operator|.
name|exists
argument_list|(
name|snapshotTmpDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
if|if
condition|(
operator|!
name|outputFs
operator|.
name|delete
argument_list|(
name|snapshotTmpDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to remove existing snapshot tmp directory: "
operator|+
name|snapshotTmpDir
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"A snapshot with the same name '"
operator|+
name|targetName
operator|+
literal|"' may be in-progress"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please check "
operator|+
name|snapshotTmpDir
operator|+
literal|". If the snapshot has completed, "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"consider removing "
operator|+
name|snapshotTmpDir
operator|+
literal|" by using the -overwrite option"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
block|}
comment|// Step 0 - Extract snapshot files to copy
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading Snapshot hfile list"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|files
init|=
name|getSnapshotFiles
argument_list|(
name|inputFs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|0
operator|&&
name|files
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mappers
operator|=
literal|1
operator|+
operator|(
name|files
operator|.
name|size
argument_list|()
operator|/
name|conf
operator|.
name|getInt
argument_list|(
name|CONF_MAP_GROUP
argument_list|,
literal|10
argument_list|)
operator|)
expr_stmt|;
name|mappers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|mappers
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Step 1 - Copy fs1:/.snapshot/<snapshot> to  fs2:/.snapshot/.tmp/<snapshot>
comment|// The snapshot references must be copied before the hfiles otherwise the cleaner
comment|// will remove them because they are unreferenced.
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copy Snapshot Manifest"
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|inputFs
argument_list|,
name|snapshotDir
argument_list|,
name|outputFs
argument_list|,
name|initialOutputSnapshotDir
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExportSnapshotException
argument_list|(
literal|"Failed to copy the snapshot directory: from="
operator|+
name|snapshotDir
operator|+
literal|" to="
operator|+
name|initialOutputSnapshotDir
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Write a new .snapshotinfo if the target name is different from the source name
if|if
condition|(
operator|!
name|targetName
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|inputFs
argument_list|,
name|snapshotDir
argument_list|)
operator|.
name|toBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|targetName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|writeSnapshotInfo
argument_list|(
name|snapshotDesc
argument_list|,
name|snapshotTmpDir
argument_list|,
name|outputFs
argument_list|)
expr_stmt|;
block|}
comment|// Step 2 - Start MR Job to copy files
comment|// The snapshot references must be copied before the files otherwise the files gets removed
comment|// by the HFileArchiver, since they have no references.
try|try
block|{
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There are 0 store file to be copied. There may be no data in the table."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runCopyJob
argument_list|(
name|inputRoot
argument_list|,
name|outputRoot
argument_list|,
name|files
argument_list|,
name|verifyChecksum
argument_list|,
name|filesUser
argument_list|,
name|filesGroup
argument_list|,
name|filesMode
argument_list|,
name|mappers
argument_list|,
name|bandwidthMB
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalize the Snapshot Export"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipTmp
condition|)
block|{
comment|// Step 3 - Rename fs2:/.snapshot/.tmp/<snapshot> fs2:/.snapshot/<snapshot>
if|if
condition|(
operator|!
name|outputFs
operator|.
name|rename
argument_list|(
name|snapshotTmpDir
argument_list|,
name|outputSnapshotDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExportSnapshotException
argument_list|(
literal|"Unable to rename snapshot directory from="
operator|+
name|snapshotTmpDir
operator|+
literal|" to="
operator|+
name|outputSnapshotDir
argument_list|)
throw|;
block|}
block|}
comment|// Step 4 - Verify snapshot integrity
if|if
condition|(
name|verifyTarget
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify snapshot integrity"
argument_list|)
expr_stmt|;
name|verifySnapshot
argument_list|(
name|conf
argument_list|,
name|outputFs
argument_list|,
name|outputRoot
argument_list|,
name|outputSnapshotDir
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Export Completed: "
operator|+
name|targetName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot export failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipTmp
condition|)
block|{
name|outputFs
operator|.
name|delete
argument_list|(
name|snapshotTmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|outputFs
operator|.
name|delete
argument_list|(
name|outputSnapshotDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|// ExportSnapshot
specifier|private
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Usage: bin/hbase %s [options]%n"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" where [options] are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -h|-help                Show this help and exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -snapshot NAME          Snapshot to restore."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -copy-to NAME           Remote destination hdfs://"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -copy-from NAME         Input folder hdfs:// (default hbase.rootdir)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -no-checksum-verify     Do not verify checksum, use name+length only."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -no-target-verify       Do not verify the integrity of the \\"
operator|+
literal|"exported snapshot."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -overwrite              Rewrite the snapshot manifest if already exists"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -chuser USERNAME        Change the owner of the files "
operator|+
literal|"to the specified one."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -chgroup GROUP          Change the group of the files to "
operator|+
literal|"the specified one."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -chmod MODE             Change the permission of the files "
operator|+
literal|"to the specified one."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -mappers                Number of mappers to use during the "
operator|+
literal|"copy (mapreduce.job.maps)."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  hbase "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -snapshot MySnapshot -copy-to hdfs://srv2:8082/hbase \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -chuser MyUser -chgroup MyGroup -chmod 700 -mappers 16"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  hbase "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -snapshot MySnapshot -copy-from hdfs://srv2:8082/hbase \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -copy-to hdfs://srv1:50070/hbase \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * The guts of the {@link #main} method.    * Call this method to avoid the {@link #main(String[])} System.exit.    * @param args    * @return errCode    * @throws Exception    */
specifier|static
name|int
name|innerMain
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|ExportSnapshot
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|innerMain
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

