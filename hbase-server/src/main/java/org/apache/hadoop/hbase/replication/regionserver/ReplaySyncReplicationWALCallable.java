begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RSProcedureCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ReplicationProtbufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|KeyLocker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ReplicateWALEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|ReplaySyncReplicationWALParameter
import|;
end_import

begin_comment
comment|/**  * This callable executed at RS side to replay sync replication wal.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplaySyncReplicationWALCallable
implements|implements
name|RSProcedureCallable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplaySyncReplicationWALCallable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPLAY_SYNC_REPLICATION_WAL_BATCH_SIZE
init|=
literal|"hbase.replay.sync.replication.wal.batch.size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_REPLAY_SYNC_REPLICATION_WAL_BATCH_SIZE
init|=
literal|8
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
name|HRegionServer
name|rs
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|String
name|peerId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|wals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Exception
name|initError
decl_stmt|;
specifier|private
name|long
name|batchSize
decl_stmt|;
specifier|private
specifier|final
name|KeyLocker
argument_list|<
name|String
argument_list|>
name|peersLock
init|=
operator|new
name|KeyLocker
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|initError
operator|!=
literal|null
condition|)
block|{
throw|throw
name|initError
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Received a replay sync replication wals {} event, peerId={}"
argument_list|,
name|wals
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getReplicationSinkService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Lock
name|peerLock
init|=
name|peersLock
operator|.
name|acquireLock
argument_list|(
name|wals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|wal
range|:
name|wals
control|)
block|{
name|replayWAL
argument_list|(
name|wal
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|peerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|byte
index|[]
name|parameter
parameter_list|,
name|HRegionServer
name|rs
parameter_list|)
block|{
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|rs
operator|.
name|getWALFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|rs
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|ReplaySyncReplicationWALParameter
name|param
init|=
name|ReplaySyncReplicationWALParameter
operator|.
name|parseFrom
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
name|this
operator|.
name|peerId
operator|=
name|param
operator|.
name|getPeerId
argument_list|()
expr_stmt|;
name|param
operator|.
name|getWalList
argument_list|()
operator|.
name|forEach
argument_list|(
name|this
operator|.
name|wals
operator|::
name|add
argument_list|)
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
name|rs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|REPLAY_SYNC_REPLICATION_WAL_BATCH_SIZE
argument_list|,
name|DEFAULT_REPLAY_SYNC_REPLICATION_WAL_BATCH_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|initError
operator|=
name|e
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
return|return
name|EventType
operator|.
name|RS_REPLAY_SYNC_REPLICATION_WAL
return|;
block|}
specifier|private
name|void
name|replayWAL
parameter_list|(
name|String
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Reader
name|reader
init|=
name|getReader
argument_list|(
name|wal
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|readWALEntries
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|AdminProtos
operator|.
name|ReplicateWALEntryRequest
argument_list|,
name|CellScanner
argument_list|>
name|pair
init|=
name|ReplicationProtbufUtil
operator|.
name|buildReplicateWALEntryRequest
argument_list|(
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicateWALEntryRequest
name|request
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|rs
operator|.
name|getReplicationSinkService
argument_list|()
operator|.
name|replicateLogEntries
argument_list|(
name|request
operator|.
name|getEntryList
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|request
operator|.
name|getReplicationClusterId
argument_list|()
argument_list|,
name|request
operator|.
name|getSourceBaseNamespaceDirPath
argument_list|()
argument_list|,
name|request
operator|.
name|getSourceHFileArchiveDirPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read next entries.
name|entries
operator|=
name|readWALEntries
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Reader
name|getReader
parameter_list|(
name|String
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|rs
operator|.
name|getWALRootDir
argument_list|()
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|rs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
try|try
block|{
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
operator|.
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|WALFactory
operator|.
name|createReader
argument_list|(
name|rs
operator|.
name|getWALFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|rs
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File is empty. Could not open {} for reading because {}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|// return whether we should include this entry.
specifier|private
name|boolean
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|WALUtil
operator|.
name|filterCells
argument_list|(
name|edit
argument_list|,
name|c
lambda|->
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|c
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
condition|?
literal|null
else|:
name|c
argument_list|)
expr_stmt|;
return|return
operator|!
name|edit
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|readWALEntries
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return
name|entries
return|;
block|}
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|filter
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|size
operator|+=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
name|batchSize
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|entries
return|;
block|}
block|}
end_class

end_unit

