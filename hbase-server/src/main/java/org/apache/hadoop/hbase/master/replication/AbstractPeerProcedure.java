begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|PeerProcedureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedurePrepareLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The base class for all replication peer related procedure.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|AbstractPeerProcedure
parameter_list|<
name|TState
parameter_list|>
extends|extends
name|AbstractPeerNoLockProcedure
argument_list|<
name|TState
argument_list|>
implements|implements
name|PeerProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractPeerProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|UPDATE_LAST_SEQ_ID_BATCH_SIZE
init|=
literal|1000
decl_stmt|;
comment|// The sleep interval when waiting table to be enabled or disabled.
specifier|protected
specifier|static
specifier|final
name|int
name|SLEEP_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|// used to keep compatible with old client where we can only returns after updateStorage.
specifier|protected
name|ProcedurePrepareLatch
name|latch
decl_stmt|;
specifier|protected
name|AbstractPeerProcedure
parameter_list|()
block|{   }
specifier|protected
name|AbstractPeerProcedure
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|super
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|ProcedurePrepareLatch
operator|.
name|createLatch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedurePrepareLatch
name|getLatch
parameter_list|()
block|{
return|return
name|latch
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LockState
name|acquireLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|waitPeerExclusiveLock
argument_list|(
name|this
argument_list|,
name|peerId
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_EVENT_WAIT
return|;
block|}
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
name|env
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|wakePeerExclusiveLock
argument_list|(
name|this
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|holdLock
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|protected
specifier|final
name|void
name|refreshPeer
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|PeerOperationType
name|type
parameter_list|)
block|{
name|addChildProcedure
argument_list|(
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|sn
lambda|->
operator|new
name|RefreshPeerProcedure
argument_list|(
name|peerId
argument_list|,
name|type
argument_list|,
name|sn
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|RefreshPeerProcedure
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// will be override in test to simulate error
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|enablePeer
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|enablePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|,
name|String
name|encodedRegionName
parameter_list|,
name|long
name|barrier
parameter_list|,
name|ReplicationQueueStorage
name|queueStorage
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|barrier
operator|>=
literal|0
condition|)
block|{
name|lastSeqIds
operator|.
name|put
argument_list|(
name|encodedRegionName
argument_list|,
name|barrier
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSeqIds
operator|.
name|size
argument_list|()
operator|>=
name|UPDATE_LAST_SEQ_ID_BATCH_SIZE
condition|)
block|{
name|queueStorage
operator|.
name|setLastSequenceIds
argument_list|(
name|peerId
argument_list|,
name|lastSeqIds
argument_list|)
expr_stmt|;
name|lastSeqIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|setLastPushedSequenceId
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|td
range|:
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|td
operator|.
name|hasGlobalReplicationScope
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|TableName
name|tn
init|=
name|td
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ReplicationUtils
operator|.
name|contains
argument_list|(
name|peerConfig
argument_list|,
name|tn
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|setLastPushedSequenceIdForTable
argument_list|(
name|env
argument_list|,
name|tn
argument_list|,
name|lastSeqIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lastSeqIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|getQueueStorage
argument_list|()
operator|.
name|setLastSequenceIds
argument_list|(
name|peerId
argument_list|,
name|lastSeqIds
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If the table is currently disabling, then we need to wait until it is disabled.We will write
comment|// replication barrier for a disabled table. And return whether we need to update the last pushed
comment|// sequence id, if the table has been deleted already, i.e, we hit TableStateNotFoundException,
comment|// then we do not need to update last pushed sequence id for this table.
specifier|private
name|boolean
name|needSetLastPushedSequenceId
parameter_list|(
name|TableStateManager
name|tsm
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|tsm
operator|.
name|getTableState
argument_list|(
name|tn
argument_list|)
operator|.
name|isDisabling
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Will put the encodedRegionName->lastPushedSeqId pair into the map passed in, if the map is
comment|// large enough we will call queueStorage.setLastSequenceIds and clear the map. So the caller
comment|// should not forget to check whether the map is empty at last, if not you should call
comment|// queueStorage.setLastSequenceIds to write out the remaining entries in the map.
specifier|protected
specifier|final
name|void
name|setLastPushedSequenceIdForTable
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|TableStateManager
name|tsm
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
decl_stmt|;
name|ReplicationQueueStorage
name|queueStorage
init|=
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|getQueueStorage
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|env
operator|.
name|getMasterServices
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|needSetLastPushedSequenceId
argument_list|(
name|tsm
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip settting last pushed sequence id for {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|name2Barrier
range|:
name|MetaTableAccessor
operator|.
name|getTableEncodedRegionNameAndLastBarrier
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|)
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Update last pushed sequence id for {}, {}"
argument_list|,
name|tableName
argument_list|,
name|name2Barrier
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|lastSeqIds
argument_list|,
name|name2Barrier
operator|.
name|getFirst
argument_list|()
argument_list|,
name|name2Barrier
operator|.
name|getSecond
argument_list|()
operator|.
name|longValue
argument_list|()
operator|-
literal|1
argument_list|,
name|queueStorage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

