begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AdminProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStatusService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionServerStatusProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VersionMismatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VersionedWritable
import|;
end_import

begin_comment
comment|/** A method invocation, including the method name and its parameters.*/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Invocation
extends|extends
name|VersionedWritable
implements|implements
name|Configurable
block|{
specifier|protected
name|String
name|methodName
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|Class
index|[]
name|parameterClasses
decl_stmt|;
specifier|protected
name|Object
index|[]
name|parameters
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|long
name|clientVersion
decl_stmt|;
specifier|private
name|int
name|clientMethodsHash
decl_stmt|;
comment|// For generated protocol classes which don't have VERSION field,
comment|// such as protobuf interfaces.
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
name|PROTOCOL_VERSION
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PROTOCOL_VERSION
operator|.
name|put
argument_list|(
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|ClientProtocol
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|PROTOCOL_VERSION
operator|.
name|put
argument_list|(
name|AdminService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|AdminProtocol
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|PROTOCOL_VERSION
operator|.
name|put
argument_list|(
name|RegionServerStatusService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|RegionServerStatusProtocol
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// For protobuf protocols, which use ServiceException, instead of IOException
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PROTOBUF_PROTOCOLS
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PROTOBUF_PROTOCOLS
operator|.
name|add
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|PROTOBUF_PROTOCOLS
operator|.
name|add
argument_list|(
name|AdminProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|PROTOBUF_PROTOCOLS
operator|.
name|add
argument_list|(
name|RegionServerStatusProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
name|RPC_VERSION
init|=
literal|1
decl_stmt|;
specifier|public
name|Invocation
parameter_list|()
block|{}
specifier|public
name|Invocation
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameterClasses
operator|=
name|method
operator|.
name|getParameterTypes
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|declaringClass
operator|.
name|equals
argument_list|(
name|VersionedProtocol
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//VersionedProtocol is exempted from version check.
name|clientVersion
operator|=
literal|0
expr_stmt|;
name|clientMethodsHash
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Long
name|version
init|=
name|PROTOCOL_VERSION
operator|.
name|get
argument_list|(
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|clientVersion
operator|=
name|version
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Field
name|versionField
init|=
name|declaringClass
operator|.
name|getField
argument_list|(
literal|"VERSION"
argument_list|)
decl_stmt|;
name|versionField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientVersion
operator|=
name|versionField
operator|.
name|getLong
argument_list|(
name|declaringClass
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The "
operator|+
name|declaringClass
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|this
operator|.
name|clientMethodsHash
operator|=
name|ProtocolSignature
operator|.
name|getFingerprint
argument_list|(
name|declaringClass
operator|.
name|getMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return The name of the method invoked. */
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/** @return The parameter classes. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|Class
index|[]
name|getParameterClasses
parameter_list|()
block|{
return|return
name|parameterClasses
return|;
block|}
comment|/** @return The parameter instances. */
specifier|public
name|Object
index|[]
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
name|long
name|getProtocolVersion
parameter_list|()
block|{
return|return
name|clientVersion
return|;
block|}
specifier|protected
name|int
name|getClientMethodsHash
parameter_list|()
block|{
return|return
name|clientMethodsHash
return|;
block|}
comment|/**    * Returns the rpc version used by the client.    * @return rpcVersion    */
specifier|public
name|long
name|getRpcVersion
parameter_list|()
block|{
return|return
name|RPC_VERSION
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|methodName
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|clientVersion
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|clientMethodsHash
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionMismatchException
name|e
parameter_list|)
block|{
comment|// VersionMismatchException doesn't provide an API to access
comment|// expectedVersion and foundVersion.  This is really sad.
if|if
condition|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"found v0"
argument_list|)
condition|)
block|{
comment|// Try to be a bit backwards compatible.  In previous versions of
comment|// HBase (before HBASE-3939 in 0.92) Invocation wasn't a
comment|// VersionedWritable and thus the first thing on the wire was always
comment|// the 2-byte length of the method name.  Because no method name is
comment|// longer than 255 characters, and all method names are in ASCII,
comment|// The following code is equivalent to `in.readUTF()', which we can't
comment|// call again here, because `super.readFields(in)' already consumed
comment|// the first byte of input, which can't be "unread" back into `in'.
specifier|final
name|short
name|len
init|=
call|(
name|short
call|)
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
operator|&
literal|0xFF
argument_list|)
decl_stmt|;
comment|// Unsigned byte.
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|methodName
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
name|parameters
operator|=
operator|new
name|Object
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
name|parameterClasses
operator|=
operator|new
name|Class
index|[
name|parameters
operator|.
name|length
index|]
expr_stmt|;
name|HbaseObjectWritable
name|objectWritable
init|=
operator|new
name|HbaseObjectWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|objectWritable
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|parameterClasses
index|[
name|i
index|]
operator|=
name|objectWritable
operator|.
name|getDeclaredClass
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|methodName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|clientVersion
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|clientMethodsHash
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|parameterClasses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|parameters
index|[
name|i
index|]
argument_list|,
name|parameterClasses
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", rpc version="
operator|+
name|RPC_VERSION
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", client version="
operator|+
name|clientVersion
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", methodsFingerPrint="
operator|+
name|clientMethodsHash
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|RPC_VERSION
return|;
block|}
block|}
end_class

end_unit

