begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|IllegalArgumentIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IdReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IdReadWriteLockWithObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ZKDataMigrator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This is a helper class used to manage table states. This class uses hbase:meta as its store for  * table state so hbase:meta must be online before {@link #start()} is called.  */
end_comment

begin_comment
comment|// TODO: Make this a guava Service
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableStateManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableStateManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set this key to false in Configuration to disable migrating table state from zookeeper so    * hbase:meta table.    */
specifier|private
specifier|static
specifier|final
name|String
name|MIGRATE_TABLE_STATE_FROM_ZK_KEY
init|=
literal|"hbase.migrate.table.state.from.zookeeper"
decl_stmt|;
specifier|private
specifier|final
name|IdReadWriteLock
argument_list|<
name|TableName
argument_list|>
name|tnLock
init|=
operator|new
name|IdReadWriteLockWithObjectPool
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|MasterServices
name|master
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|TableName
argument_list|,
name|TableState
operator|.
name|State
argument_list|>
name|tableName2State
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableStateManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
block|}
comment|/**    * Set table state to provided. Caller should lock table on write.    * @param tableName table to change state for    * @param newState new state    */
specifier|public
name|void
name|setTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableState
operator|.
name|State
name|newState
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadWriteLock
name|lock
init|=
name|tnLock
operator|.
name|getLock
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|updateMetaState
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableState
operator|.
name|State
modifier|...
name|states
parameter_list|)
block|{
try|try
block|{
name|TableState
name|tableState
init|=
name|getTableState
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|tableState
operator|.
name|isInStates
argument_list|(
name|states
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get table "
operator|+
name|tableName
operator|+
literal|" state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// XXX: is it safe to just return false here?
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setDeletedTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// Can't delete the hbase:meta table.
return|return;
block|}
name|ReadWriteLock
name|lock
init|=
name|tnLock
operator|.
name|getLock
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|MetaTableAccessor
operator|.
name|deleteTableState
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|metaStateDeleted
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableName2State
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isTablePresent
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadWriteLock
name|lock
init|=
name|tnLock
operator|.
name|getLock
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readMetaState
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return all tables in given states.    * @param states filter by states    * @return tables in given states    */
name|Set
argument_list|<
name|TableName
argument_list|>
name|getTablesInStates
parameter_list|(
name|TableState
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only be called in region normalizer, will not use cache.
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|rv
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanTables
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
operator|new
name|MetaTableAccessor
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|TableState
name|tableState
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|!=
literal|null
operator|&&
name|tableState
operator|.
name|inStates
argument_list|(
name|states
argument_list|)
condition|)
block|{
name|rv
operator|.
name|add
argument_list|(
name|tableState
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
block|}
annotation|@
name|NonNull
specifier|public
name|TableState
name|getTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadWriteLock
name|lock
init|=
name|tnLock
operator|.
name|getLock
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TableState
name|currentState
init|=
name|readMetaState
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"No state found for "
operator|+
name|tableName
argument_list|)
throw|;
block|}
return|return
name|currentState
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateMetaState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableState
operator|.
name|State
name|newState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|TableState
operator|.
name|State
operator|.
name|DISABLING
operator|.
name|equals
argument_list|(
name|newState
argument_list|)
operator|||
name|TableState
operator|.
name|State
operator|.
name|DISABLED
operator|.
name|equals
argument_list|(
name|newState
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentIOException
argument_list|(
literal|"Cannot disable meta table; "
operator|+
name|newState
argument_list|)
throw|;
block|}
comment|// Otherwise, just return; no need to set ENABLED on meta -- it is always ENABLED.
return|return;
block|}
name|boolean
name|succ
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MetaTableAccessor
operator|.
name|updateTableState
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|tableName2State
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succ
condition|)
block|{
name|this
operator|.
name|tableName2State
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
name|metaStateUpdated
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|metaStateUpdated
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableState
operator|.
name|State
name|newState
parameter_list|)
throws|throws
name|IOException
block|{   }
specifier|protected
name|void
name|metaStateDeleted
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Nullable
specifier|private
name|TableState
name|readMetaState
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableState
operator|.
name|State
name|state
init|=
name|tableName2State
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
return|;
block|}
name|TableState
name|tableState
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|!=
literal|null
condition|)
block|{
name|tableName2State
operator|.
name|putIfAbsent
argument_list|(
name|tableName
argument_list|,
name|tableState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableState
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|migrateZooKeeper
argument_list|()
expr_stmt|;
name|fixTableStates
argument_list|(
name|master
operator|.
name|getTableDescriptors
argument_list|()
argument_list|,
name|master
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fixTableStates
parameter_list|(
name|TableDescriptors
name|tableDescriptors
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TableState
argument_list|>
name|states
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// NOTE: Full hbase:meta table scan!
name|MetaTableAccessor
operator|.
name|fullScanTables
argument_list|(
name|connection
argument_list|,
operator|new
name|MetaTableAccessor
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|TableState
name|state
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|states
operator|.
name|put
argument_list|(
name|state
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|TableDescriptor
name|tableDesc
range|:
name|tableDescriptors
operator|.
name|getAll
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TableName
name|tableName
init|=
name|tableDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// This table is always enabled. No fixup needed. No entry in hbase:meta needed.
comment|// Call through to fixTableState though in case a super class wants to do something.
name|fixTableState
argument_list|(
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TableState
name|tableState
init|=
name|states
operator|.
name|get
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|tableName
operator|+
literal|" has no table state in hbase:meta, assuming ENABLED"
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|updateTableState
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|fixTableState
argument_list|(
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|tableName2State
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fixTableState
argument_list|(
name|tableState
argument_list|)
expr_stmt|;
name|tableName2State
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * For subclasses in case they want to do fixup post hbase:meta.    */
specifier|protected
name|void
name|fixTableState
parameter_list|(
name|TableState
name|tableState
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * This code is for case where a hbase2 Master is starting for the first time. ZooKeeper is where    * we used to keep table state. On first startup, read zookeeper and update hbase:meta with the    * table states found in zookeeper. This is tricky as we'll do this check every time we startup    * until mirroring is disabled. See the {@link #MIGRATE_TABLE_STATE_FROM_ZK_KEY} flag. Original    * form of this migration came in with HBASE-13032. It deleted all znodes when done. We can't do    * that if we want to support hbase-1.x clients who need to be able to read table state out of zk.    * See {@link MirroringTableStateManager}.    * @deprecated Since 2.0.0. Remove in hbase-3.0.0.    */
annotation|@
name|Deprecated
specifier|private
name|void
name|migrateZooKeeper
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|MIGRATE_TABLE_STATE_FROM_ZK_KEY
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|TableState
operator|.
name|State
argument_list|>
name|entry
range|:
name|ZKDataMigrator
operator|.
name|queryForTableStates
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|deleteZooKeeper
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Purged table state entry from zookeepr for table not in hbase:meta: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TableState
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ts
operator|=
name|getTableState
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// This can happen; table exists but no TableState.
block|}
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
name|TableState
operator|.
name|State
name|zkstate
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Only migrate if it is an enable or disabled table. If in-between -- ENABLING or
comment|// DISABLING then we have a problem; we are starting up an hbase-2 on a cluster with
comment|// RIT. It is going to be rough!
if|if
condition|(
name|zkstate
operator|.
name|equals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
operator|||
name|zkstate
operator|.
name|equals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating table state from zookeeper to hbase:meta; tableName="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", state="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|updateMetaState
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table={} has no state and zookeeper state is in-between={} (neither "
operator|+
literal|"ENABLED or DISABLED); NOT MIGRATING table state"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|zkstate
argument_list|)
expr_stmt|;
block|}
block|}
comment|// What if the table states disagree? Defer to the hbase:meta setting rather than have the
comment|// hbase-1.x support prevail.
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed reading table state from zookeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Utility method that knows how to delete the old hbase-1.x table state znode. Used also by the    * Mirroring subclass.    * @deprecated Since 2.0.0. To be removed in hbase-3.0.0.    */
annotation|@
name|Deprecated
specifier|protected
name|void
name|deleteZooKeeper
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
try|try
block|{
comment|// Delete from ZooKeeper
name|String
name|znode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting table state from zookeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

