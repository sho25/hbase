begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Key for WAL Entry.  * Read-only. No Setters. For limited audience such as Coprocessors.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HBaseInterfaceAudience
operator|.
name|REPLICATION
block|,
name|HBaseInterfaceAudience
operator|.
name|COPROC
block|}
argument_list|)
specifier|public
interface|interface
name|WALKey
extends|extends
name|SequenceId
extends|,
name|Comparable
argument_list|<
name|WALKey
argument_list|>
block|{
comment|/**    * Unmodifiable empty list of UUIDs.    */
name|List
argument_list|<
name|UUID
argument_list|>
name|EMPTY_UUIDS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|UUID
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|default
name|long
name|estimatedSerializedSizeOf
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**    * @return encoded region name    */
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
function_decl|;
comment|/**    * @return table name    */
name|TableName
name|getTablename
parameter_list|()
function_decl|;
comment|/**    * @return the write time    */
name|long
name|getWriteTime
parameter_list|()
function_decl|;
comment|/**    * @return The nonce group    */
specifier|default
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
comment|/**    * @return The nonce    */
specifier|default
name|long
name|getNonce
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
name|UUID
name|getOriginatingClusterId
parameter_list|()
function_decl|;
comment|/**    * Return a positive long if current WALKeyImpl is created from a replay edit; a replay edit is an    * edit that came in when replaying WALs of a crashed server.    * @return original sequence number of the WALEdit    */
name|long
name|getOrigLogSeqNum
parameter_list|()
function_decl|;
comment|/**    * Produces a string map for this key. Useful for programmatic use and    * manipulation of the data stored in an WALKeyImpl, for example, printing    * as JSON.    *    * @return a Map containing data from this key    */
specifier|default
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toStringMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"region"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stringMap
operator|.
name|put
argument_list|(
literal|"sequence"
argument_list|,
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stringMap
return|;
block|}
block|}
end_interface

end_unit

