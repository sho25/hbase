begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|BackupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * This class provides API to access backup system table<br>  *  * Backup system table schema:<br>  *<p><ul>  *<li>1. Backup sessions rowkey= "session:"+backupId; value =serialized BackupInfo</li>  *<li>2. Backup start code rowkey = "startcode:"+backupRoot; value = startcode</li>  *<li>3. Incremental backup set rowkey="incrbackupset:"+backupRoot; value=[list of tables]</li>  *<li>4. Table-RS-timestamp map rowkey="trslm:"+backupRoot+table_name;  * value = map[RS-> last WAL timestamp]</li>  *<li>5. RS - WAL ts map rowkey="rslogts:"+backupRoot +server; value = last WAL timestamp</li>  *<li>6. WALs recorded rowkey="wals:"+WAL unique file name;  * value = backupId and full WAL file name</li>  *</ul></p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|BackupSystemTable
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupSystemTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|WALItem
block|{
name|String
name|backupId
decl_stmt|;
name|String
name|walFile
decl_stmt|;
name|String
name|backupRoot
decl_stmt|;
name|WALItem
parameter_list|(
name|String
name|backupId
parameter_list|,
name|String
name|walFile
parameter_list|,
name|String
name|backupRoot
parameter_list|)
block|{
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
name|this
operator|.
name|walFile
operator|=
name|walFile
expr_stmt|;
name|this
operator|.
name|backupRoot
operator|=
name|backupRoot
expr_stmt|;
block|}
specifier|public
name|String
name|getBackupId
parameter_list|()
block|{
return|return
name|backupId
return|;
block|}
specifier|public
name|String
name|getWalFile
parameter_list|()
block|{
return|return
name|walFile
return|;
block|}
specifier|public
name|String
name|getBackupRoot
parameter_list|()
block|{
return|return
name|backupRoot
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Path
operator|.
name|SEPARATOR
operator|+
name|backupRoot
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|backupId
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|walFile
return|;
block|}
block|}
specifier|private
name|TableName
name|tableName
decl_stmt|;
comment|/**    *  Stores backup sessions (contexts)    */
specifier|final
specifier|static
name|byte
index|[]
name|SESSIONS_FAMILY
init|=
literal|"session"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|/**    * Stores other meta    */
specifier|final
specifier|static
name|byte
index|[]
name|META_FAMILY
init|=
literal|"meta"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|BULK_LOAD_FAMILY
init|=
literal|"bulk"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|/**    *  Connection to HBase cluster, shared among all instances    */
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|BACKUP_INFO_PREFIX
init|=
literal|"session:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|START_CODE_ROW
init|=
literal|"startcode:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ACTIVE_SESSION_ROW
init|=
literal|"activesession:"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ACTIVE_SESSION_COL
init|=
literal|"c"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ACTIVE_SESSION_YES
init|=
literal|"yes"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ACTIVE_SESSION_NO
init|=
literal|"no"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INCR_BACKUP_SET
init|=
literal|"incrbackupset:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_RS_LOG_MAP_PREFIX
init|=
literal|"trslm:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RS_LOG_TS_PREFIX
init|=
literal|"rslogts:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|BULK_LOAD_PREFIX
init|=
literal|"bulk:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|BULK_LOAD_PREFIX_BYTES
init|=
name|BULK_LOAD_PREFIX
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|DELETE_OP_ROW
init|=
literal|"delete_op_row"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|TBL_COL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tbl"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|FAM_COL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|PATH_COL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|STATE_COL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
comment|// the two states a bulk loaded file can be
specifier|final
specifier|static
name|byte
index|[]
name|BL_PREPARE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|BL_COMMIT
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|WALS_PREFIX
init|=
literal|"wals:"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SET_KEY_PREFIX
init|=
literal|"backupset:"
decl_stmt|;
comment|// separator between BULK_LOAD_PREFIX and ordinals
specifier|protected
specifier|final
specifier|static
name|String
name|BLK_LD_DELIM
init|=
literal|":"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|EMPTY_VALUE
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
comment|// Safe delimiter in a string
specifier|private
specifier|final
specifier|static
name|String
name|NULL
init|=
literal|"\u0000"
decl_stmt|;
specifier|public
name|BackupSystemTable
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|connection
operator|=
name|conn
expr_stmt|;
name|tableName
operator|=
name|BackupSystemTable
operator|.
name|getTableName
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|checkSystemTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkSystemTable
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
name|verifyNamespaceExists
argument_list|(
name|admin
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|backupHTD
init|=
name|BackupSystemTable
operator|.
name|getSystemTableDescriptor
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|backupHTD
argument_list|)
expr_stmt|;
block|}
name|waitForSystemTable
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyNamespaceExists
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespaceName
init|=
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|ns
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
index|[]
name|list
init|=
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|nsd
range|:
name|list
control|)
block|{
if|if
condition|(
name|nsd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForSystemTable
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|TIMEOUT
init|=
literal|60000
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|||
operator|!
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|>
name|TIMEOUT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create backup system table after "
operator|+
name|TIMEOUT
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup table exists and available"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// do nothing
block|}
comment|/**    * Updates status (state) of a backup session in backup system table table    * @param info backup info    * @throws IOException exception    */
specifier|public
name|void
name|updateBackupInfo
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"update backup status in backup system table for: "
operator|+
name|info
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" set status="
operator|+
name|info
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForBackupInfo
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * @param backupId the backup Id    * @return Map of rows to path of bulk loaded hfile    */
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|readBulkLoadedFiles
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
name|BackupSystemTable
operator|.
name|createScanForBulkLoadedFiles
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|res
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|res
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
block|}
comment|/*    * Used during restore    * @param backupId the backup Id    * @param sTableList List of tables    * @return array of Map of family to List of Paths    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
index|[]
name|readBulkLoadedFiles
parameter_list|(
name|String
name|backupId
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|sTableList
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
name|BackupSystemTable
operator|.
name|createScanForBulkLoadedFiles
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
index|[]
name|mapForSrc
init|=
operator|new
name|Map
index|[
name|sTableList
operator|==
literal|null
condition|?
literal|1
else|:
name|sTableList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|TableName
name|tbl
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|res
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|TBL_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|TBL_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|tbl
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|FAM_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|FAM_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fam
operator|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|path
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|srcIdx
init|=
name|IncrementalTableBackupClient
operator|.
name|getIndex
argument_list|(
name|tbl
argument_list|,
name|sTableList
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcIdx
operator|==
operator|-
literal|1
condition|)
block|{
comment|// the table is not among the query
continue|continue;
block|}
if|if
condition|(
name|mapForSrc
index|[
name|srcIdx
index|]
operator|==
literal|null
condition|)
block|{
name|mapForSrc
index|[
name|srcIdx
index|]
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
operator|!
name|mapForSrc
index|[
name|srcIdx
index|]
operator|.
name|containsKey
argument_list|(
name|fam
argument_list|)
condition|)
block|{
name|files
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
name|mapForSrc
index|[
name|srcIdx
index|]
operator|.
name|put
argument_list|(
name|fam
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
name|mapForSrc
index|[
name|srcIdx
index|]
operator|.
name|get
argument_list|(
name|fam
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"found bulk loaded file : "
operator|+
name|tbl
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|fam
argument_list|)
operator|+
literal|" "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
return|return
name|mapForSrc
return|;
block|}
block|}
comment|/*    * @param map Map of row keys to path of bulk loaded hfile    */
name|void
name|deleteBulkLoadedFiles
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|dels
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|dels
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes backup status from backup system table table    * @param backupId backup id    * @throws IOException exception    */
specifier|public
name|void
name|deleteBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"delete backup status in backup system table for "
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Delete
name|del
init|=
name|createDeleteForBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * For postBulkLoadHFile() hook.    * @param tabName table name    * @param region the region receiving hfile    * @param finalPaths family and associated hfiles    */
specifier|public
name|void
name|writePathsPostBulkLoad
parameter_list|(
name|TableName
name|tabName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|finalPaths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write bulk load descriptor to backup "
operator|+
name|tabName
operator|+
literal|" with "
operator|+
name|finalPaths
operator|.
name|size
argument_list|()
operator|+
literal|" entries"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|BackupSystemTable
operator|.
name|createPutForCommittedBulkload
argument_list|(
name|tabName
argument_list|,
name|region
argument_list|,
name|finalPaths
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"written "
operator|+
name|puts
operator|.
name|size
argument_list|()
operator|+
literal|" rows for bulk load of "
operator|+
name|tabName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * For preCommitStoreFile() hook    * @param tabName table name    * @param region the region receiving hfile    * @param family column family    * @param pairs list of paths for hfiles    */
specifier|public
name|void
name|writeFilesForBulkLoadPreCommit
parameter_list|(
name|TableName
name|tabName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write bulk load descriptor to backup "
operator|+
name|tabName
operator|+
literal|" with "
operator|+
name|pairs
operator|.
name|size
argument_list|()
operator|+
literal|" entries"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|BackupSystemTable
operator|.
name|createPutForPreparedBulkload
argument_list|(
name|tabName
argument_list|,
name|region
argument_list|,
name|family
argument_list|,
name|pairs
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"written "
operator|+
name|puts
operator|.
name|size
argument_list|()
operator|+
literal|" rows for bulk load of "
operator|+
name|tabName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Removes rows recording bulk loaded hfiles from backup table    * @param lst list of table names    * @param rows the rows to be deleted    */
specifier|public
name|void
name|removeBulkLoadedRows
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|lst
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|lstDels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|rows
control|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|lstDels
operator|.
name|add
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"orig deleting the row: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|lstDels
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted "
operator|+
name|rows
operator|.
name|size
argument_list|()
operator|+
literal|" original bulkload rows for "
operator|+
name|lst
operator|.
name|size
argument_list|()
operator|+
literal|" tables"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Reads the rows from backup table recording bulk loaded hfiles    * @param tableList list of table names    * @return The keys of the Map are table, region and column family.    *  Value of the map reflects whether the hfile was recorded by preCommitStoreFile hook (true)    */
specifier|public
name|Pair
argument_list|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|readBulkloadRows
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tTable
range|:
name|tableList
control|)
block|{
name|Scan
name|scan
init|=
name|BackupSystemTable
operator|.
name|createScanForOrigBulkLoadedFiles
argument_list|(
name|tTable
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|tblMap
init|=
name|map
operator|.
name|get
argument_list|(
name|tTable
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|String
name|fam
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|boolean
name|raw
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|row
init|=
literal|null
decl_stmt|;
name|String
name|region
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|res
operator|.
name|listCells
argument_list|()
control|)
block|{
name|row
operator|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
name|rowStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|region
operator|=
name|BackupSystemTable
operator|.
name|getRegionNameFromOrigBulkLoadRow
argument_list|(
name|rowStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|FAM_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|FAM_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fam
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|PATH_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|path
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CellComparator
operator|.
name|compareQualifiers
argument_list|(
name|cell
argument_list|,
name|BackupSystemTable
operator|.
name|STATE_COL
argument_list|,
literal|0
argument_list|,
name|BackupSystemTable
operator|.
name|STATE_COL
operator|.
name|length
argument_list|)
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|state
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|BackupSystemTable
operator|.
name|BL_PREPARE
argument_list|,
name|state
argument_list|)
condition|)
block|{
name|raw
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|raw
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|tTable
argument_list|)
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|tTable
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tblMap
operator|=
name|map
operator|.
name|get
argument_list|(
name|tTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
operator|==
literal|null
condition|)
block|{
name|tblMap
operator|.
name|put
argument_list|(
name|region
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|>
name|famMap
init|=
name|tblMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|famMap
operator|.
name|get
argument_list|(
name|fam
argument_list|)
operator|==
literal|null
condition|)
block|{
name|famMap
operator|.
name|put
argument_list|(
name|fam
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|famMap
operator|.
name|get
argument_list|(
name|fam
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|path
argument_list|,
name|raw
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found orig "
operator|+
name|path
operator|+
literal|" for "
operator|+
name|fam
operator|+
literal|" of table "
operator|+
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|map
argument_list|,
name|rows
argument_list|)
return|;
block|}
comment|/*    * @param sTableList List of tables    * @param maps array of Map of family to List of Paths    * @param backupId the backup Id    */
specifier|public
name|void
name|writeBulkLoadedFiles
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|sTableList
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
index|[]
name|maps
parameter_list|,
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|maps
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|maps
index|[
name|idx
index|]
decl_stmt|;
name|TableName
name|tn
init|=
name|sTableList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|fam
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|Put
name|put
init|=
name|BackupSystemTable
operator|.
name|createPutForBulkLoadedFile
argument_list|(
name|tn
argument_list|,
name|fam
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|backupId
argument_list|,
name|ts
argument_list|,
name|cnt
operator|++
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reads backup status object (instance of backup info) from backup system table table    * @param backupId backup id    * @return Current status of backup session or null    */
specifier|public
name|BackupInfo
name|readBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"read backup status from backup system table for: "
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Get
name|get
init|=
name|createGetForBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|resultToBackupInfo
argument_list|(
name|res
argument_list|)
return|;
block|}
block|}
comment|/**    * Read the last backup start code (timestamp) of last successful backup. Will return null if    * there is no start code stored on hbase or the value is of length 0. These two cases indicate    * there is no successful backup completed so far.    * @param backupRoot directory path to backup destination    * @return the timestamp of last successful backup    * @throws IOException exception    */
specifier|public
name|String
name|readBackupStartCode
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"read backup start code from backup system table"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Get
name|get
init|=
name|createGetForStartCode
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Cell
name|cell
init|=
name|res
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|val
argument_list|)
return|;
block|}
block|}
comment|/**    * Write the start code (timestamp) to backup system table. If passed in null, then write 0 byte.    * @param startCode start code    * @param backupRoot root directory path to backup    * @throws IOException exception    */
specifier|public
name|void
name|writeBackupStartCode
parameter_list|(
name|Long
name|startCode
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"write backup start code to backup system table "
operator|+
name|startCode
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForStartCode
argument_list|(
name|startCode
operator|.
name|toString
argument_list|()
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startBackupSession
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Start new backup session"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForStartBackupSession
argument_list|()
decl_stmt|;
comment|//First try to put if row does not exist
if|if
condition|(
operator|!
name|table
operator|.
name|checkAndPut
argument_list|(
name|ACTIVE_SESSION_ROW
argument_list|,
name|SESSIONS_FAMILY
argument_list|,
name|ACTIVE_SESSION_COL
argument_list|,
literal|null
argument_list|,
name|put
argument_list|)
condition|)
block|{
comment|// Row exists, try to put if value == ACTIVE_SESSION_NO
if|if
condition|(
operator|!
name|table
operator|.
name|checkAndPut
argument_list|(
name|ACTIVE_SESSION_ROW
argument_list|,
name|SESSIONS_FAMILY
argument_list|,
name|ACTIVE_SESSION_COL
argument_list|,
name|ACTIVE_SESSION_NO
argument_list|,
name|put
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is an active backup session"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|Put
name|createPutForStartBackupSession
parameter_list|()
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ACTIVE_SESSION_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|SESSIONS_FAMILY
argument_list|,
name|ACTIVE_SESSION_COL
argument_list|,
name|ACTIVE_SESSION_YES
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
specifier|public
name|void
name|finishBackupSession
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Stop backup session"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForStopBackupSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|checkAndPut
argument_list|(
name|ACTIVE_SESSION_ROW
argument_list|,
name|SESSIONS_FAMILY
argument_list|,
name|ACTIVE_SESSION_COL
argument_list|,
name|ACTIVE_SESSION_YES
argument_list|,
name|put
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no active backup session"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Put
name|createPutForStopBackupSession
parameter_list|()
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ACTIVE_SESSION_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|SESSIONS_FAMILY
argument_list|,
name|ACTIVE_SESSION_COL
argument_list|,
name|ACTIVE_SESSION_NO
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Get the Region Servers log information after the last log roll from backup system table.    * @param backupRoot root directory path to backup    * @return RS log info    * @throws IOException exception    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|readRegionServerLastLogRollResult
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"read region server last roll log result to backup system table"
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
name|createScanForReadRegionServerLastLogRollResult
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rsTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|cell
init|=
name|res
operator|.
name|current
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|server
init|=
name|getServerNameForReadRegionServerLastLogRollResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|rsTimestampMap
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rsTimestampMap
return|;
block|}
block|}
comment|/**    * Writes Region Server last roll log result (timestamp) to backup system table table    * @param server Region Server name    * @param ts last log timestamp    * @param backupRoot root directory path to backup    * @throws IOException exception    */
specifier|public
name|void
name|writeRegionServerLastLogRollResult
parameter_list|(
name|String
name|server
parameter_list|,
name|Long
name|ts
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"write region server last roll log result to backup system table"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForRegionServerLastLogRollResult
argument_list|(
name|server
argument_list|,
name|ts
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get all completed backup information (in desc order by time)    * @param onlyCompleted true, if only successfully completed sessions    * @return history info of BackupCompleteData    * @throws IOException exception    */
specifier|public
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupHistory
parameter_list|(
name|boolean
name|onlyCompleted
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"get backup history from backup system table"
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|list
decl_stmt|;
name|BackupState
name|state
init|=
name|onlyCompleted
condition|?
name|BackupState
operator|.
name|COMPLETE
else|:
name|BackupState
operator|.
name|ANY
decl_stmt|;
name|list
operator|=
name|getBackupInfos
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|BackupUtils
operator|.
name|sortHistoryListDesc
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**    * Get all backups history    * @return list of backup info    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupHistory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getBackupHistory
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get first n backup history records    * @param n number of records    * @return list of records    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getHistory
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|getBackupHistory
argument_list|()
decl_stmt|;
if|if
condition|(
name|history
operator|.
name|size
argument_list|()
operator|<=
name|n
condition|)
return|return
name|history
return|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Get backup history records filtered by list of filters.    * @param n max number of records    * @param filters list of filters    * @return backup records    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupHistory
parameter_list|(
name|int
name|n
parameter_list|,
name|BackupInfo
operator|.
name|Filter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filters
operator|.
name|length
operator|==
literal|0
condition|)
return|return
name|getHistory
argument_list|(
name|n
argument_list|)
return|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|getBackupHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|bi
range|:
name|history
control|)
block|{
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
name|n
condition|)
break|break;
name|boolean
name|passed
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|filters
index|[
name|i
index|]
operator|.
name|apply
argument_list|(
name|bi
argument_list|)
condition|)
block|{
name|passed
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|passed
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * Retrieve TableName's for completed backup of given type    * @param type backup type    * @return List of table names    */
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|getTablesForBackupType
parameter_list|(
name|BackupType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|infos
init|=
name|getBackupHistory
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
name|names
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/**    * Get history for backup destination    * @param backupRoot backup destination path    * @return List of backup info    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupHistory
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|getBackupHistory
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|BackupInfo
argument_list|>
name|iterator
init|=
name|history
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackupInfo
name|info
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|backupRoot
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|history
return|;
block|}
comment|/**    * Get history for a table    * @param name table name    * @return history for a table    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupHistoryForTable
parameter_list|(
name|TableName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|getBackupHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|tableHistory
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|history
control|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|tables
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tableHistory
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableHistory
return|;
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|>
name|getBackupHistoryForTableSet
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|set
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|getBackupHistory
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|>
name|tableHistoryMap
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|BackupInfo
argument_list|>
name|iterator
init|=
name|history
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackupInfo
name|info
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|backupRoot
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tables
control|)
block|{
if|if
condition|(
name|set
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
name|tableHistoryMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
expr_stmt|;
name|tableHistoryMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tableHistoryMap
return|;
block|}
comment|/**    * Get all backup sessions with a given state (in descending order by time)    * @param state backup session state    * @return history info of backup info objects    * @throws IOException exception    */
specifier|public
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|getBackupInfos
parameter_list|(
name|BackupState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"get backup infos from backup system table"
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
name|createScanForBackupHistory
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|BackupInfo
name|context
init|=
name|cellToBackupInfo
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|BackupState
operator|.
name|ANY
operator|&&
name|context
operator|.
name|getState
argument_list|()
operator|!=
name|state
condition|)
block|{
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
comment|/**    * Write the current timestamps for each regionserver to backup system table after a successful    * full or incremental backup. The saved timestamp is of the last log file that was backed up    * already.    * @param tables tables    * @param newTimestamps timestamps    * @param backupRoot root directory path to backup    * @throws IOException exception    */
specifier|public
name|void
name|writeRegionServerLogTimestamp
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|newTimestamps
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"write RS log time stamps to backup system table for tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|byte
index|[]
name|smapData
init|=
name|toTableServerTimestampProto
argument_list|(
name|table
argument_list|,
name|newTimestamps
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
name|createPutForWriteRegionServerLogTimestamp
argument_list|(
name|table
argument_list|,
name|smapData
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read the timestamp for each region server log after the last successful backup. Each table has    * its own set of the timestamps. The info is stored for each table as a concatenated string of    * rs->timestapmp    * @param backupRoot root directory path to backup    * @return the timestamp for each region server. key: tableName value:    *         RegionServer,PreviousTimeStamp    * @throws IOException exception    */
specifier|public
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|readLogTimestampMap
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"read RS log ts from backup system table for root="
operator|+
name|backupRoot
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|tableTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
name|createScanForReadLogTimestampMap
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|cell
init|=
name|res
operator|.
name|current
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|tabName
init|=
name|getTableNameForReadLogTimestampMap
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data of last backup data from backup system table "
operator|+
literal|"is empty. Create a backup first."
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastBackup
init|=
name|fromTableServerTimestampProto
argument_list|(
name|BackupProtos
operator|.
name|TableServerTimestamp
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|tableTimestampMap
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|lastBackup
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableTimestampMap
return|;
block|}
block|}
specifier|private
name|BackupProtos
operator|.
name|TableServerTimestamp
name|toTableServerTimestampProto
parameter_list|(
name|TableName
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
parameter_list|)
block|{
name|BackupProtos
operator|.
name|TableServerTimestamp
operator|.
name|Builder
name|tstBuilder
init|=
name|BackupProtos
operator|.
name|TableServerTimestamp
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tstBuilder
operator|.
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BackupProtos
operator|.
name|ServerTimestamp
operator|.
name|Builder
name|builder
init|=
name|BackupProtos
operator|.
name|ServerTimestamp
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|snBuilder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|snBuilder
operator|.
name|setHostName
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|snBuilder
operator|.
name|setPort
argument_list|(
name|sn
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setServerName
argument_list|(
name|snBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|tstBuilder
operator|.
name|addServerTimestamp
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tstBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|fromTableServerTimestampProto
parameter_list|(
name|BackupProtos
operator|.
name|TableServerTimestamp
name|proto
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupProtos
operator|.
name|ServerTimestamp
argument_list|>
name|list
init|=
name|proto
operator|.
name|getServerTimestampList
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupProtos
operator|.
name|ServerTimestamp
name|st
range|:
name|list
control|)
block|{
name|ServerName
name|sn
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|st
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|st
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Return the current tables covered by incremental backup.    * @param backupRoot root directory path to backup    * @return set of tableNames    * @throws IOException exception    */
specifier|public
name|Set
argument_list|<
name|TableName
argument_list|>
name|getIncrementalBackupTableSet
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"get incremental backup table set from backup system table"
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|TableName
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Get
name|get
init|=
name|createGetForIncrBackupTableSet
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|set
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|res
operator|.
name|listCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
comment|// qualifier = table name - we use table names as qualifiers
name|set
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
block|}
comment|/**    * Add tables to global incremental backup set    * @param tables set of tables    * @param backupRoot root directory path to backup    * @throws IOException exception    */
specifier|public
name|void
name|addIncrementalBackupTableSet
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Add incremental backup table set to backup system table. ROOT="
operator|+
name|backupRoot
operator|+
literal|" tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|createPutForIncrBackupTableSet
argument_list|(
name|tables
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes incremental backup set for a backup destination    * @param backupRoot backup root    */
specifier|public
name|void
name|deleteIncrementalBackupTableSet
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delete incremental backup table set to backup system table. ROOT="
operator|+
name|backupRoot
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Delete
name|delete
init|=
name|createDeleteForIncrBackupTableSet
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register WAL files as eligible for deletion    * @param files files    * @param backupId backup id    * @param backupRoot root directory path to backup destination    * @throws IOException exception    */
specifier|public
name|void
name|addWALFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"add WAL files to backup system table: "
operator|+
name|backupId
operator|+
literal|" "
operator|+
name|backupRoot
operator|+
literal|" files ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|files
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"add :"
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|createPutsForAddWALFiles
argument_list|(
name|files
argument_list|,
name|backupId
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register WAL files as eligible for deletion    * @param backupRoot root directory path to backup    * @throws IOException exception    */
specifier|public
name|Iterator
argument_list|<
name|WALItem
argument_list|>
name|getWALFilesIterator
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"get WAL files from backup system table"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
name|createScanForGetWALs
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
specifier|final
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Result
argument_list|>
name|it
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|WALItem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|next
init|=
name|it
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|next
condition|)
block|{
comment|// close all
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close WAL Iterator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Override
specifier|public
name|WALItem
name|next
parameter_list|()
block|{
name|Result
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|next
operator|.
name|listCells
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValueArray
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValueOffset
argument_list|()
decl_stmt|;
name|String
name|backupId
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|buf
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValueArray
argument_list|()
expr_stmt|;
name|len
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
name|offset
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValueOffset
argument_list|()
expr_stmt|;
name|String
name|walFile
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|buf
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValueArray
argument_list|()
expr_stmt|;
name|len
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
name|offset
operator|=
name|cells
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValueOffset
argument_list|()
expr_stmt|;
name|String
name|backupRoot
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALItem
argument_list|(
name|backupId
argument_list|,
name|walFile
argument_list|,
name|backupRoot
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// not implemented
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"remove is not supported"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Check if WAL file is eligible for deletion Future: to support all backup destinations    * @param file name of a file to check    * @return true, if deletable, false otherwise.    * @throws IOException exception    */
specifier|public
name|boolean
name|isWALFileDeletable
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Check if WAL file has been already backed up in backup system table "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Get
name|get
init|=
name|createGetForCheckWALFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Checks if we have at least one backup session in backup system table This API is used by    * BackupLogCleaner    * @return true, if - at least one session exists in backup system table table    * @throws IOException exception    */
specifier|public
name|boolean
name|hasBackupSessions
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Has backup sessions from backup system table"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|Scan
name|scan
init|=
name|createScanForBackupHistory
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
if|if
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * BACKUP SETS    */
comment|/**    * Get backup set list    * @return backup set list    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listBackupSets
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|" Backup set list"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|createScanForBackupSetList
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|cellKeyToBackupSetName
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get backup set description (list of tables)    * @param name set's name    * @return list of tables in a backup set    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|describeBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|" Backup set describe: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|createGetForBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|String
index|[]
name|tables
init|=
name|cellValueToBackupSet
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|toList
argument_list|(
name|tables
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|TableName
argument_list|>
name|toList
parameter_list|(
name|String
index|[]
name|tables
parameter_list|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|tables
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Add backup set (list of tables)    * @param name set name    * @param newTables list of tables, comma-separated    * @throws IOException    */
specifier|public
name|void
name|addToBackupSet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|newTables
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Backup set add: "
operator|+
name|name
operator|+
literal|" tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|newTables
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|union
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|createGetForBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|union
operator|=
name|newTables
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|String
index|[]
name|tables
init|=
name|cellValueToBackupSet
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
name|union
operator|=
name|merge
argument_list|(
name|tables
argument_list|,
name|newTables
argument_list|)
expr_stmt|;
block|}
name|Put
name|put
init|=
name|createPutForBackupSet
argument_list|(
name|name
argument_list|,
name|union
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
index|[]
name|merge
parameter_list|(
name|String
index|[]
name|tables
parameter_list|,
name|String
index|[]
name|newTables
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add all from tables
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nt
range|:
name|newTables
control|)
block|{
if|if
condition|(
name|list
operator|.
name|contains
argument_list|(
name|nt
argument_list|)
condition|)
continue|continue;
name|list
operator|.
name|add
argument_list|(
name|nt
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|list
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**    * Remove tables from backup set (list of tables)    * @param name set name    * @param toRemove list of tables    * @throws IOException    */
specifier|public
name|void
name|removeFromBackupSet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|toRemove
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|" Backup set remove from : "
operator|+
name|name
operator|+
literal|" tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|toRemove
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|disjoint
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|createGetForBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Backup set '"
operator|+
name|name
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|tables
operator|=
name|cellValueToBackupSet
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|disjoint
operator|=
name|disjoin
argument_list|(
name|tables
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|disjoint
operator|.
name|length
operator|>
literal|0
operator|&&
name|disjoint
operator|.
name|length
operator|!=
name|tables
operator|.
name|length
condition|)
block|{
name|Put
name|put
init|=
name|createPutForBackupSet
argument_list|(
name|name
argument_list|,
name|disjoint
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|disjoint
operator|.
name|length
operator|==
name|tables
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Backup set '"
operator|+
name|name
operator|+
literal|"' does not contain tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|toRemove
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// disjoint.length == 0 and tables.length>0
comment|// Delete  backup set
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup set '"
operator|+
name|name
operator|+
literal|"' is empty. Deleting."
argument_list|)
expr_stmt|;
name|deleteBackupSet
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
index|[]
name|disjoin
parameter_list|(
name|String
index|[]
name|tables
parameter_list|,
name|String
index|[]
name|toRemove
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add all from tables
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nt
range|:
name|toRemove
control|)
block|{
if|if
condition|(
name|list
operator|.
name|contains
argument_list|(
name|nt
argument_list|)
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|nt
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|list
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**    * Delete backup set    * @param name set's name    * @throws IOException    */
specifier|public
name|void
name|deleteBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|" Backup set delete: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
name|createDeleteForBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get backup system table descriptor    * @return table's descriptor    */
specifier|public
specifier|static
name|HTableDescriptor
name|getSystemTableDescriptor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getTableName
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|colSessionsDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|SESSIONS_FAMILY
argument_list|)
decl_stmt|;
name|colSessionsDesc
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Time to keep backup sessions (secs)
name|Configuration
name|config
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|ttl
init|=
name|config
operator|.
name|getInt
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_SYSTEM_TTL_KEY
argument_list|,
name|BackupRestoreConstants
operator|.
name|BACKUP_SYSTEM_TTL_DEFAULT
argument_list|)
decl_stmt|;
name|colSessionsDesc
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
name|colSessionsDesc
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|colMetaDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|META_FAMILY
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
name|colMetaDesc
argument_list|)
expr_stmt|;
return|return
name|tableDesc
return|;
block|}
specifier|public
specifier|static
name|TableName
name|getTableName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|name
init|=
name|conf
operator|.
name|get
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_SYSTEM_TABLE_NAME_KEY
argument_list|,
name|BackupRestoreConstants
operator|.
name|BACKUP_SYSTEM_TABLE_NAME_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getTableNameAsString
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getTableName
argument_list|(
name|conf
argument_list|)
operator|.
name|getNameAsString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getSnapshotName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|"snapshot_"
operator|+
name|getTableNameAsString
argument_list|(
name|conf
argument_list|)
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
comment|/**    * Creates Put operation for a given backup info object    * @param context backup info    * @return put operation    * @throws IOException exception    */
specifier|private
name|Put
name|createPutForBackupInfo
parameter_list|(
name|BackupInfo
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|BACKUP_INFO_PREFIX
argument_list|,
name|context
operator|.
name|getBackupId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|SESSIONS_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|context
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Creates Get operation for a given backup id    * @param backupId backup's ID    * @return get operation    * @throws IOException exception    */
specifier|private
name|Get
name|createGetForBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|(
name|BACKUP_INFO_PREFIX
argument_list|,
name|backupId
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|SESSIONS_FAMILY
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
comment|/**    * Creates Delete operation for a given backup id    * @param backupId backup's ID    * @return delete operation    * @throws IOException exception    */
specifier|private
name|Delete
name|createDeleteForBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|rowkey
argument_list|(
name|BACKUP_INFO_PREFIX
argument_list|,
name|backupId
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|SESSIONS_FAMILY
argument_list|)
expr_stmt|;
return|return
name|del
return|;
block|}
comment|/**    * Converts Result to BackupInfo    * @param res HBase result    * @return backup info instance    * @throws IOException exception    */
specifier|private
name|BackupInfo
name|resultToBackupInfo
parameter_list|(
name|Result
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|cell
init|=
name|res
operator|.
name|current
argument_list|()
decl_stmt|;
return|return
name|cellToBackupInfo
argument_list|(
name|cell
argument_list|)
return|;
block|}
comment|/**    * Creates Get operation to retrieve start code from backup system table    * @return get operation    * @throws IOException exception    */
specifier|private
name|Get
name|createGetForStartCode
parameter_list|(
name|String
name|rootPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|(
name|START_CODE_ROW
argument_list|,
name|rootPath
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
comment|/**    * Creates Put operation to store start code to backup system table    * @return put operation    * @throws IOException exception    */
specifier|private
name|Put
name|createPutForStartCode
parameter_list|(
name|String
name|startCode
parameter_list|,
name|String
name|rootPath
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|START_CODE_ROW
argument_list|,
name|rootPath
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"startcode"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startCode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Creates Get to retrieve incremental backup table set from backup system table    * @return get operation    * @throws IOException exception    */
specifier|private
name|Get
name|createGetForIncrBackupTableSet
parameter_list|(
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|(
name|INCR_BACKUP_SET
argument_list|,
name|backupRoot
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
comment|/**    * Creates Put to store incremental backup table set    * @param tables tables    * @return put operation    */
specifier|private
name|Put
name|createPutForIncrBackupTableSet
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|backupRoot
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|INCR_BACKUP_SET
argument_list|,
name|backupRoot
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Creates Delete for incremental backup table set    * @param backupRoot backup root    * @return delete operation    */
specifier|private
name|Delete
name|createDeleteForIncrBackupTableSet
parameter_list|(
name|String
name|backupRoot
parameter_list|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowkey
argument_list|(
name|INCR_BACKUP_SET
argument_list|,
name|backupRoot
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|delete
return|;
block|}
comment|/**    * Creates Scan operation to load backup history    * @return scan operation    */
specifier|private
name|Scan
name|createScanForBackupHistory
parameter_list|()
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|BACKUP_INFO_PREFIX
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|SESSIONS_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Converts cell to backup info instance.    * @param current current cell    * @return backup backup info instance    * @throws IOException exception    */
specifier|private
name|BackupInfo
name|cellToBackupInfo
parameter_list|(
name|Cell
name|current
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|current
argument_list|)
decl_stmt|;
return|return
name|BackupInfo
operator|.
name|fromByteArray
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * Creates Put to write RS last roll log timestamp map    * @param table table    * @param smap map, containing RS:ts    * @return put operation    */
specifier|private
name|Put
name|createPutForWriteRegionServerLogTimestamp
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|smap
parameter_list|,
name|String
name|backupRoot
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|TABLE_RS_LOG_MAP_PREFIX
argument_list|,
name|backupRoot
argument_list|,
name|NULL
argument_list|,
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"log-roll-map"
argument_list|)
argument_list|,
name|smap
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Creates Scan to load table-> { RS -> ts} map of maps    * @return scan operation    */
specifier|private
name|Scan
name|createScanForReadLogTimestampMap
parameter_list|(
name|String
name|backupRoot
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|rowkey
argument_list|(
name|TABLE_RS_LOG_MAP_PREFIX
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Get table name from rowkey    * @param cloneRow rowkey    * @return table name    */
specifier|private
name|String
name|getTableNameForReadLogTimestampMap
parameter_list|(
name|byte
index|[]
name|cloneRow
parameter_list|)
block|{
name|String
name|s
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cloneRow
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
name|NULL
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Creates Put to store RS last log result    * @param server server name    * @param timestamp log roll result (timestamp)    * @return put operation    */
specifier|private
name|Put
name|createPutForRegionServerLastLogRollResult
parameter_list|(
name|String
name|server
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|String
name|backupRoot
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|RS_LOG_TS_PREFIX
argument_list|,
name|backupRoot
argument_list|,
name|NULL
argument_list|,
name|server
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rs-log-ts"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Creates Scan operation to load last RS log roll results    * @return scan operation    */
specifier|private
name|Scan
name|createScanForReadRegionServerLastLogRollResult
parameter_list|(
name|String
name|backupRoot
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|rowkey
argument_list|(
name|RS_LOG_TS_PREFIX
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Get server's name from rowkey    * @param row rowkey    * @return server's name    */
specifier|private
name|String
name|getServerNameForReadRegionServerLastLogRollResult
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|String
name|s
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
name|NULL
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/*    * Creates Put's for bulk load resulting from running LoadIncrementalHFiles    */
specifier|static
name|List
argument_list|<
name|Put
argument_list|>
name|createPutForCommittedBulkload
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|finalPaths
parameter_list|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|finalPaths
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|file
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|lastSlash
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|file
operator|.
name|substring
argument_list|(
name|lastSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|,
name|BLK_LD_DELIM
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|,
name|BLK_LD_DELIM
argument_list|,
name|filename
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|TBL_COL
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|FAM_COL
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|PATH_COL
argument_list|,
name|file
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|STATE_COL
argument_list|,
name|BL_COMMIT
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing done bulk path "
operator|+
name|file
operator|+
literal|" for "
operator|+
name|table
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|puts
return|;
block|}
specifier|public
specifier|static
name|void
name|snapshot
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|BackupSystemTable
operator|.
name|getSnapshotName
argument_list|(
name|conf
argument_list|)
argument_list|,
name|BackupSystemTable
operator|.
name|getTableName
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|restoreFromSnapshot
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restoring "
operator|+
name|BackupSystemTable
operator|.
name|getTableNameAsString
argument_list|(
name|conf
argument_list|)
operator|+
literal|" from snapshot"
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
name|String
name|snapshotName
init|=
name|BackupSystemTable
operator|.
name|getSnapshotName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotExists
argument_list|(
name|admin
argument_list|,
name|snapshotName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done restoring backup system table"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Snapshot does not exists, i.e completeBackup failed after
comment|// deleting backup system table snapshot
comment|// In this case we log WARN and proceed
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not restore backup system table. Snapshot "
operator|+
name|snapshotName
operator|+
literal|" does not exists."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|boolean
name|snapshotExists
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|list
init|=
name|admin
operator|.
name|listSnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|desc
range|:
name|list
control|)
block|{
if|if
condition|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|snapshotExists
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|snapshotExists
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|getSnapshotName
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|deleteSnapshot
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|BackupSystemTable
operator|.
name|getSnapshotName
argument_list|(
name|conf
argument_list|)
operator|+
literal|" from the system"
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
name|String
name|snapshotName
init|=
name|BackupSystemTable
operator|.
name|getSnapshotName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotExists
argument_list|(
name|admin
argument_list|,
name|snapshotName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done deleting backup system table snapshot"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot "
operator|+
name|snapshotName
operator|+
literal|" does not exists"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Creates Put's for bulk load resulting from running LoadIncrementalHFiles    */
specifier|static
name|List
argument_list|<
name|Put
argument_list|>
name|createPutForPreparedBulkload
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|Path
name|path
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|String
name|file
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|lastSlash
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|file
operator|.
name|substring
argument_list|(
name|lastSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|,
name|BLK_LD_DELIM
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|,
name|BLK_LD_DELIM
argument_list|,
name|filename
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|TBL_COL
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|FAM_COL
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|PATH_COL
argument_list|,
name|file
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|STATE_COL
argument_list|,
name|BL_PREPARE
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing raw bulk path "
operator|+
name|file
operator|+
literal|" for "
operator|+
name|table
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Delete
argument_list|>
name|createDeleteForOrigBulkLoad
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|lst
parameter_list|)
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|lstDels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|lst
control|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|,
name|BLK_LD_DELIM
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|lstDels
operator|.
name|add
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
return|return
name|lstDels
return|;
block|}
specifier|private
name|Put
name|createPutForDeleteOperation
parameter_list|(
name|String
index|[]
name|backupIdList
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIdList
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|DELETE_OP_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|META_FAMILY
argument_list|,
name|FAM_COL
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
specifier|private
name|Delete
name|createDeleteForBackupDeleteOperation
parameter_list|()
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|DELETE_OP_ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|delete
return|;
block|}
specifier|private
name|Get
name|createGetForDeleteOperation
parameter_list|()
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|DELETE_OP_ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
specifier|public
name|void
name|startDeleteOperation
parameter_list|(
name|String
index|[]
name|backupIdList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Start delete operation for backups: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIdList
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Put
name|put
init|=
name|createPutForDeleteOperation
argument_list|(
name|backupIdList
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finishDeleteOperation
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finsih delete operation for backup ids "
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
name|createDeleteForBackupDeleteOperation
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|getListOfBackupIdsFromDeleteOperation
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Get delete operation for backup ids "
argument_list|)
expr_stmt|;
block|}
name|Get
name|get
init|=
name|createGetForDeleteOperation
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Cell
name|cell
init|=
name|res
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
block|}
specifier|static
name|Scan
name|createScanForOrigBulkLoadedFiles
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|,
name|BLK_LD_DELIM
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
specifier|static
name|String
name|getTableNameFromOrigBulkLoadRow
parameter_list|(
name|String
name|rowStr
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|rowStr
operator|.
name|split
argument_list|(
name|BLK_LD_DELIM
argument_list|)
decl_stmt|;
return|return
name|parts
index|[
literal|1
index|]
return|;
block|}
specifier|static
name|String
name|getRegionNameFromOrigBulkLoadRow
parameter_list|(
name|String
name|rowStr
parameter_list|)
block|{
comment|// format is bulk : namespace : table : region : file
name|String
index|[]
name|parts
init|=
name|rowStr
operator|.
name|split
argument_list|(
name|BLK_LD_DELIM
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|3
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|4
condition|)
block|{
comment|// the table is in default namespace
name|idx
operator|=
literal|2
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"bulk row string "
operator|+
name|rowStr
operator|+
literal|" region "
operator|+
name|parts
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
return|return
name|parts
index|[
name|idx
index|]
return|;
block|}
comment|/*    * Used to query bulk loaded hfiles which have been copied by incremental backup    * @param backupId the backup Id. It can be null when querying for all tables    * @return the Scan object    */
specifier|static
name|Scan
name|createScanForBulkLoadedFiles
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|backupId
operator|==
literal|null
condition|?
name|BULK_LOAD_PREFIX_BYTES
else|:
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|backupId
operator|+
name|BLK_LD_DELIM
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
comment|//scan.setTimeRange(lower, Long.MAX_VALUE);
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
specifier|static
name|Put
name|createPutForBulkLoadedFile
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|String
name|p
parameter_list|,
name|String
name|backupId
parameter_list|,
name|long
name|ts
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|BULK_LOAD_PREFIX
argument_list|,
name|backupId
operator|+
name|BLK_LD_DELIM
operator|+
name|ts
operator|+
name|BLK_LD_DELIM
operator|+
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|TBL_COL
argument_list|,
name|tn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|FAM_COL
argument_list|,
name|fam
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|PATH_COL
argument_list|,
name|p
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Creates put list for list of WAL files    * @param files list of WAL file paths    * @param backupId backup id    * @return put list    * @throws IOException exception    */
specifier|private
name|List
argument_list|<
name|Put
argument_list|>
name|createPutsForAddWALFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|WALS_PREFIX
argument_list|,
name|BackupUtils
operator|.
name|getUniqueWALFileNamePart
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"backupId"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"file"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"root"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|backupRoot
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
comment|/**    * Creates Scan operation to load WALs    * @param backupRoot path to backup destination    * @return scan operation    */
specifier|private
name|Scan
name|createScanForGetWALs
parameter_list|(
name|String
name|backupRoot
parameter_list|)
block|{
comment|// TODO: support for backupRoot
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|WALS_PREFIX
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Creates Get operation for a given wal file name TODO: support for backup destination    * @param file file    * @return get operation    * @throws IOException exception    */
specifier|private
name|Get
name|createGetForCheckWALFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|(
name|WALS_PREFIX
argument_list|,
name|BackupUtils
operator|.
name|getUniqueWALFileNamePart
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// add backup root column
name|get
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
comment|/**    * Creates Scan operation to load backup set list    * @return scan operation    */
specifier|private
name|Scan
name|createScanForBackupSetList
parameter_list|()
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SET_KEY_PREFIX
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
decl_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Creates Get operation to load backup set content    * @return get operation    */
specifier|private
name|Get
name|createGetForBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|(
name|SET_KEY_PREFIX
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
comment|/**    * Creates Delete operation to delete backup set content    * @param name backup set's name    * @return delete operation    */
specifier|private
name|Delete
name|createDeleteForBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|rowkey
argument_list|(
name|SET_KEY_PREFIX
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|)
expr_stmt|;
return|return
name|del
return|;
block|}
comment|/**    * Creates Put operation to update backup set content    * @param name backup set's name    * @param tables list of tables    * @return put operation    */
specifier|private
name|Put
name|createPutForBackupSet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|tables
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|(
name|SET_KEY_PREFIX
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|convertToByteArray
argument_list|(
name|tables
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BackupSystemTable
operator|.
name|META_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tables"
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
specifier|private
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|String
index|[]
name|tables
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
literal|","
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Converts cell to backup set list.    * @param current current cell    * @return backup set as array of table names    * @throws IOException    */
specifier|private
name|String
index|[]
name|cellValueToBackupSet
parameter_list|(
name|Cell
name|current
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**    * Converts cell key to backup set name.    * @param current current cell    * @return backup set name    * @throws IOException    */
specifier|private
name|String
name|cellKeyToBackupSetName
parameter_list|(
name|Cell
name|current
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|current
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|.
name|substring
argument_list|(
name|SET_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|rowkey
parameter_list|(
name|String
name|s
parameter_list|,
name|String
modifier|...
name|other
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ss
range|:
name|other
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
end_class

end_unit

