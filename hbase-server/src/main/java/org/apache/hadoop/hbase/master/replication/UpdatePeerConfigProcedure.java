begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|UpdatePeerConfigStateData
import|;
end_import

begin_comment
comment|/**  * The procedure for updating the config for a replication peer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|UpdatePeerConfigProcedure
extends|extends
name|ModifyPeerProcedure
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UpdatePeerConfigProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ReplicationPeerConfig
name|peerConfig
decl_stmt|;
specifier|private
name|ReplicationPeerConfig
name|oldPeerConfig
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
specifier|public
name|UpdatePeerConfigProcedure
parameter_list|()
block|{   }
specifier|public
name|UpdatePeerConfigProcedure
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
block|{
name|super
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerConfig
operator|=
name|peerConfig
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PeerOperationType
name|getPeerOperationType
parameter_list|()
block|{
return|return
name|PeerOperationType
operator|.
name|UPDATE_CONFIG
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|reopenRegionsAfterRefresh
parameter_list|()
block|{
comment|// If we remove some tables from the peer config then we do not need to enter the extra states
comment|// for serial replication. Could try to optimize later since it is not easy to determine this...
return|return
name|peerConfig
operator|.
name|isSerial
argument_list|()
operator|&&
operator|(
operator|!
name|oldPeerConfig
operator|.
name|isSerial
argument_list|()
operator|||
operator|!
name|ReplicationUtils
operator|.
name|isNamespacesAndTableCFsEqual
argument_list|(
name|peerConfig
argument_list|,
name|oldPeerConfig
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|enablePeerBeforeFinish
parameter_list|()
block|{
comment|// do not need to test reopenRegionsAfterRefresh since we can only enter here if
comment|// reopenRegionsAfterRefresh returns true.
return|return
name|enabled
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ReplicationPeerConfig
name|getOldPeerConfig
parameter_list|()
block|{
return|return
name|oldPeerConfig
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ReplicationPeerConfig
name|getNewPeerConfig
parameter_list|()
block|{
return|return
name|peerConfig
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|prePeerModification
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|preUpdateReplicationPeerConfig
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
block|}
name|ReplicationPeerDescription
name|desc
init|=
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|preUpdatePeerConfig
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
decl_stmt|;
name|oldPeerConfig
operator|=
name|desc
operator|.
name|getPeerConfig
argument_list|()
expr_stmt|;
name|enabled
operator|=
name|desc
operator|.
name|isEnabled
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updatePeerStorage
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|updatePeerConfig
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
operator|&&
name|reopenRegionsAfterRefresh
argument_list|()
condition|)
block|{
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|disablePeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postPeerModification
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
if|if
condition|(
name|oldPeerConfig
operator|.
name|isSerial
argument_list|()
operator|&&
operator|!
name|peerConfig
operator|.
name|isSerial
argument_list|()
condition|)
block|{
name|env
operator|.
name|getReplicationPeerManager
argument_list|()
operator|.
name|removeAllLastPushedSeqIds
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully updated peer config of {} to {}"
argument_list|,
name|peerId
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|env
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpHost
operator|!=
literal|null
condition|)
block|{
name|cpHost
operator|.
name|postUpdateReplicationPeerConfig
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|UpdatePeerConfigStateData
operator|.
name|Builder
name|builder
init|=
name|UpdatePeerConfigStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPeerConfig
argument_list|(
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|peerConfig
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPeerConfig
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOldPeerConfig
argument_list|(
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|oldPeerConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|serialize
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|UpdatePeerConfigStateData
name|data
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|UpdatePeerConfigStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|peerConfig
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|data
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasOldPeerConfig
argument_list|()
condition|)
block|{
name|oldPeerConfig
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|data
operator|.
name|getOldPeerConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldPeerConfig
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

