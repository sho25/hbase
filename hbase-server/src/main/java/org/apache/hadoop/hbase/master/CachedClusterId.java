begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Caches the cluster ID of the cluster. For standby masters, this is used to serve the client  * RPCs that fetch the cluster ID. ClusterID is only created by an active master if one does not  * already exist. Standby masters just read the information from the file system. This class is  * thread-safe.  *  * TODO: Make it a singleton without affecting concurrent junit tests.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CachedClusterId
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedClusterId
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FETCH_TIMEOUT_MS
init|=
literal|10000
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|// When true, indicates that a FileSystem fetch of ClusterID is in progress. This is used to
comment|// avoid multiple fetches from FS and let only one thread fetch the information.
name|AtomicBoolean
name|fetchInProgress
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// When true, it means that the cluster ID has been fetched successfully from fs.
specifier|private
name|AtomicBoolean
name|isClusterIdSet
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Immutable once set and read multiple times.
specifier|private
name|ClusterId
name|clusterId
decl_stmt|;
comment|// cache stats for testing.
specifier|private
name|AtomicInteger
name|cacheMisses
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|CachedClusterId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Succeeds only once, when setting to a non-null value. Overwrites are not allowed.    */
specifier|private
name|void
name|setClusterId
parameter_list|(
name|ClusterId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|isClusterIdSet
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|clusterId
operator|=
name|id
expr_stmt|;
name|isClusterIdSet
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a cached copy of the cluster ID. null if the cache is not populated.    */
specifier|private
name|String
name|getClusterId
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isClusterIdSet
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// It is ok to read without a lock since clusterId is immutable once set.
return|return
name|clusterId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Attempts to fetch the cluster ID from the file system. If no attempt is already in progress,    * synchronously fetches the cluster ID and sets it. If an attempt is already in progress,    * returns right away and the caller is expected to wait for the fetch to finish.    * @return true if the attempt is done, false if another thread is already fetching it.    */
specifier|private
name|boolean
name|attemptFetch
parameter_list|()
block|{
if|if
condition|(
name|fetchInProgress
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// A fetch is not in progress, so try fetching the cluster ID synchronously and then notify
comment|// the waiting threads.
try|try
block|{
name|cacheMisses
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|setClusterId
argument_list|(
name|FSUtils
operator|.
name|getClusterId
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error fetching cluster ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fetchInProgress
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|fetchInProgress
init|)
block|{
name|fetchInProgress
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|waitForFetchToFinish
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|fetchInProgress
init|)
block|{
while|while
condition|(
name|fetchInProgress
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// We don't want the fetches to block forever, for example if there are bugs
comment|// of missing notifications.
name|fetchInProgress
operator|.
name|wait
argument_list|(
name|MAX_FETCH_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Fetches the ClusterId from FS if it is not cached locally. Atomically updates the cached    * copy and is thread-safe. Optimized to do a single fetch when there are multiple threads are    * trying get from a clean cache.    *    * @return ClusterId by reading from FileSystem or null in any error case or cluster ID does    *     not exist on the file system.    */
specifier|public
name|String
name|getFromCacheOrFetch
parameter_list|()
block|{
name|String
name|id
init|=
name|getClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
block|}
if|if
condition|(
operator|!
name|attemptFetch
argument_list|()
condition|)
block|{
comment|// A fetch is in progress.
try|try
block|{
name|waitForFetchToFinish
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// pass and return whatever is in the cache.
block|}
block|}
return|return
name|getClusterId
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getCacheStats
parameter_list|()
block|{
return|return
name|cacheMisses
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

