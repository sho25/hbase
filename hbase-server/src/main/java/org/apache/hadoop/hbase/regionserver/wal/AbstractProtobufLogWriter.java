begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|ProtobufLogReader
operator|.
name|DEFAULT_WAL_TRAILER_WARN_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|ProtobufLogReader
operator|.
name|WAL_TRAILER_WARN_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|LRUDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|WALTrailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * Base class for Protobuf log writer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractProtobufLogWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractProtobufLogWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|CompressionContext
name|compressionContext
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|Codec
operator|.
name|Encoder
name|cellEncoder
decl_stmt|;
specifier|protected
name|WALCellCodec
operator|.
name|ByteStringCompressor
name|compressor
decl_stmt|;
specifier|protected
name|boolean
name|trailerWritten
decl_stmt|;
specifier|protected
name|WALTrailer
name|trailer
decl_stmt|;
comment|// maximum size of the wal Trailer in bytes. If a user writes/reads a trailer with size larger
comment|// than this size, it is written/read respectively, with a WARN message in the log.
specifier|protected
name|int
name|trailerWarnSize
decl_stmt|;
specifier|protected
name|AtomicLong
name|length
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|WALCellCodec
name|getCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CompressionContext
name|compressionContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WALCellCodec
operator|.
name|create
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|compressionContext
argument_list|)
return|;
block|}
specifier|protected
name|WALHeader
name|buildWALHeader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|WALHeader
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|builder
operator|.
name|hasWriterClsName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setWriterClsName
argument_list|(
name|ProtobufLogWriter
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|builder
operator|.
name|hasCellCodecClsName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCellCodecClsName
argument_list|(
name|WALCellCodec
operator|.
name|getWALCellCodecClass
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|initializeCompressionContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|doCompress
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_WAL_COMPRESSION
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|doCompress
condition|)
block|{
try|try
block|{
name|this
operator|.
name|compressionContext
operator|=
operator|new
name|CompressionContext
argument_list|(
name|LRUDictionary
operator|.
name|class
argument_list|,
name|FSUtils
operator|.
name|isRecoveredEdits
argument_list|(
name|path
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CompressionContext
operator|.
name|ENABLE_WAL_TAGS_COMPRESSION
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initiate CompressionContext"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|doCompress
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|overwritable
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|boolean
name|doCompress
init|=
name|initializeCompressionContext
argument_list|(
name|conf
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|this
operator|.
name|trailerWarnSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WAL_TRAILER_WARN_SIZE
argument_list|,
name|DEFAULT_WAL_TRAILER_WARN_SIZE
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
name|FSUtils
operator|.
name|getDefaultBufferSize
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.replication"
argument_list|,
name|FSUtils
operator|.
name|getDefaultReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|FSUtils
operator|.
name|getDefaultBlockSize
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|initOutput
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|overwritable
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|boolean
name|doTagCompress
init|=
name|doCompress
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|CompressionContext
operator|.
name|ENABLE_WAL_TAGS_COMPRESSION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|length
operator|.
name|set
argument_list|(
name|writeMagicAndWALHeader
argument_list|(
name|ProtobufLogReader
operator|.
name|PB_WAL_MAGIC
argument_list|,
name|buildWALHeader
argument_list|(
name|conf
argument_list|,
name|WALHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHasCompression
argument_list|(
name|doCompress
argument_list|)
operator|.
name|setHasTagCompression
argument_list|(
name|doTagCompress
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|initAfterHeader
argument_list|(
name|doCompress
argument_list|)
expr_stmt|;
comment|// instantiate trailer to default value.
name|trailer
operator|=
name|WALTrailer
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Initialized protobuf WAL="
operator|+
name|path
operator|+
literal|", compression="
operator|+
name|doCompress
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initAfterHeader
parameter_list|(
name|boolean
name|doCompress
parameter_list|)
throws|throws
name|IOException
block|{
name|WALCellCodec
name|codec
init|=
name|getCodec
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|compressionContext
argument_list|)
decl_stmt|;
name|this
operator|.
name|cellEncoder
operator|=
name|codec
operator|.
name|getEncoder
argument_list|(
name|getOutputStreamForCellEncoder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCompress
condition|)
block|{
name|this
operator|.
name|compressor
operator|=
name|codec
operator|.
name|getByteStringCompressor
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|setWALTrailer
parameter_list|(
name|WALTrailer
name|walTrailer
parameter_list|)
block|{
name|this
operator|.
name|trailer
operator|=
name|walTrailer
expr_stmt|;
block|}
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|WALTrailer
name|buildWALTrailer
parameter_list|(
name|WALTrailer
operator|.
name|Builder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|void
name|writeWALTrailer
parameter_list|()
block|{
try|try
block|{
name|int
name|trailerSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|trailer
operator|==
literal|null
condition|)
block|{
comment|// use default trailer.
name|LOG
operator|.
name|warn
argument_list|(
literal|"WALTrailer is null. Continuing with default."
argument_list|)
expr_stmt|;
name|this
operator|.
name|trailer
operator|=
name|buildWALTrailer
argument_list|(
name|WALTrailer
operator|.
name|newBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|trailerSize
operator|=
name|this
operator|.
name|trailer
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|trailerSize
operator|=
name|this
operator|.
name|trailer
operator|.
name|getSerializedSize
argument_list|()
operator|)
operator|>
name|this
operator|.
name|trailerWarnSize
condition|)
block|{
comment|// continue writing after warning the user.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Please investigate WALTrailer usage. Trailer size> maximum size : "
operator|+
name|trailerSize
operator|+
literal|"> "
operator|+
name|this
operator|.
name|trailerWarnSize
argument_list|)
expr_stmt|;
block|}
name|length
operator|.
name|set
argument_list|(
name|writeWALTrailerAndMagic
argument_list|(
name|trailer
argument_list|,
name|ProtobufLogReader
operator|.
name|PB_WAL_COMPLETE_MAGIC
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|trailerWritten
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to write trailer, non-fatal, continuing..."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|initOutput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|overwritable
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * return the file length after written.    */
specifier|protected
specifier|abstract
name|long
name|writeMagicAndWALHeader
parameter_list|(
name|byte
index|[]
name|magic
parameter_list|,
name|WALHeader
name|header
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|long
name|writeWALTrailerAndMagic
parameter_list|(
name|WALTrailer
name|trailer
parameter_list|,
name|byte
index|[]
name|magic
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|OutputStream
name|getOutputStreamForCellEncoder
parameter_list|()
function_decl|;
block|}
end_class

end_unit

