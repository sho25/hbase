begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Balanced queue executor with a fastpath. Because this is FIFO, it has no respect for  * ordering so a fast path skipping the queuing of Calls if an Handler is available, is possible.  * Just pass the Call direct to waiting Handler thread. Try to keep the hot Handlers bubbling  * rather than let them go cold and lose context. Idea taken from Apace Kudu (incubating). See  * https://gerrit.cloudera.org/#/c/2938/7/src/kudu/rpc/service_queue.h  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FastPathBalancedQueueRpcExecutor
extends|extends
name|BalancedQueueRpcExecutor
block|{
comment|// Depends on default behavior of BalancedQueueRpcExecutor being FIFO!
comment|/*    * Stack of Handlers waiting for work.    */
specifier|private
specifier|final
name|Deque
argument_list|<
name|FastPathHandler
argument_list|>
name|fastPathHandlerStack
init|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|FastPathBalancedQueueRpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|handlerCount
argument_list|,
name|maxQueueLength
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FastPathBalancedQueueRpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|String
name|callQueueType
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|handlerCount
argument_list|,
name|callQueueType
argument_list|,
name|maxQueueLength
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Handler
name|getHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|handlerFailureThreshhold
parameter_list|,
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|q
parameter_list|,
name|AtomicInteger
name|activeHandlerCount
parameter_list|)
block|{
return|return
operator|new
name|FastPathHandler
argument_list|(
name|name
argument_list|,
name|handlerFailureThreshhold
argument_list|,
name|q
argument_list|,
name|activeHandlerCount
argument_list|,
name|fastPathHandlerStack
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dispatch
parameter_list|(
name|CallRunner
name|callTask
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|FastPathHandler
name|handler
init|=
name|popReadyHandler
argument_list|()
decl_stmt|;
return|return
name|handler
operator|!=
literal|null
condition|?
name|handler
operator|.
name|loadCallRunner
argument_list|(
name|callTask
argument_list|)
else|:
name|super
operator|.
name|dispatch
argument_list|(
name|callTask
argument_list|)
return|;
block|}
comment|/**    * @return Pop a Handler instance if one available ready-to-go or else return null.    */
specifier|private
name|FastPathHandler
name|popReadyHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|fastPathHandlerStack
operator|.
name|poll
argument_list|()
return|;
block|}
class|class
name|FastPathHandler
extends|extends
name|Handler
block|{
comment|// Below are for fast-path support. Push this Handler on to the fastPathHandlerStack Deque
comment|// if an empty queue of CallRunners so we are available for direct handoff when one comes in.
specifier|final
name|Deque
argument_list|<
name|FastPathHandler
argument_list|>
name|fastPathHandlerStack
decl_stmt|;
comment|// Semaphore to coordinate loading of fastpathed loadedTask and our running it.
comment|// UNFAIR synchronization.
specifier|private
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The task we get when fast-pathing.
specifier|private
name|CallRunner
name|loadedCallRunner
decl_stmt|;
name|FastPathHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|handlerFailureThreshhold
parameter_list|,
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|q
parameter_list|,
specifier|final
name|AtomicInteger
name|activeHandlerCount
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|FastPathHandler
argument_list|>
name|fastPathHandlerStack
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|handlerFailureThreshhold
argument_list|,
name|q
argument_list|,
name|activeHandlerCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|fastPathHandlerStack
operator|=
name|fastPathHandlerStack
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CallRunner
name|getCallRunner
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Get a callrunner if one in the Q.
name|CallRunner
name|cr
init|=
name|this
operator|.
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
comment|// Else, if a fastPathHandlerStack present and no callrunner in Q, register ourselves for
comment|// the fastpath handoff done via fastPathHandlerStack.
if|if
condition|(
name|this
operator|.
name|fastPathHandlerStack
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fastPathHandlerStack
operator|.
name|push
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|cr
operator|=
name|this
operator|.
name|loadedCallRunner
expr_stmt|;
name|this
operator|.
name|loadedCallRunner
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// No fastpath available. Block until a task comes available.
name|cr
operator|=
name|super
operator|.
name|getCallRunner
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|cr
return|;
block|}
comment|/**      * @param cr Task gotten via fastpath.      * @return True if we successfully loaded our task      */
name|boolean
name|loadCallRunner
parameter_list|(
specifier|final
name|CallRunner
name|cr
parameter_list|)
block|{
name|this
operator|.
name|loadedCallRunner
operator|=
name|cr
expr_stmt|;
name|this
operator|.
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

