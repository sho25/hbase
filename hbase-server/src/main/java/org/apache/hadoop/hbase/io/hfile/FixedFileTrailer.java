begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
operator|.
name|MetaCellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HFileProtos
import|;
end_import

begin_comment
comment|/**  * The {@link HFile} has a fixed trailer which contains offsets to other  * variable parts of the file. Also includes basic metadata on this file. The  * trailer size is fixed within a given {@link HFile} format version only, but  * we always store the version number as the last four-byte integer of the file.  * The version number itself is split into two portions, a major  * version and a minor version. The last three bytes of a file are the major  * version and a single preceding byte is the minor number. The major version  * determines which readers/writers to use to read/write a hfile while a minor  * version determines smaller changes in hfile format that do not need a new  * reader/writer type.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FixedFileTrailer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FixedFileTrailer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * We store the comparator class name as a fixed-length field in the trailer.    */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COMPARATOR_NAME_LENGTH
init|=
literal|128
decl_stmt|;
comment|/**    * Offset to the fileinfo data, a small block of vitals. Necessary in v1 but    * only potentially useful for pretty-printing in v2.    */
specifier|private
name|long
name|fileInfoOffset
decl_stmt|;
comment|/**    * In version 1, the offset to the data block index. Starting from version 2,    * the meaning of this field is the offset to the section of the file that    * should be loaded at the time the file is being opened: i.e. on open we load    * the root index, file info, etc. See http://hbase.apache.org/book.html#_hfile_format_2    * in the reference guide.    */
specifier|private
name|long
name|loadOnOpenDataOffset
decl_stmt|;
comment|/**    * The number of entries in the root data index.    */
specifier|private
name|int
name|dataIndexCount
decl_stmt|;
comment|/**    * Total uncompressed size of all blocks of the data index    */
specifier|private
name|long
name|uncompressedDataIndexSize
decl_stmt|;
comment|/**    * The number of entries in the meta index    */
specifier|private
name|int
name|metaIndexCount
decl_stmt|;
comment|/**    * The total uncompressed size of keys/values stored in the file.    */
specifier|private
name|long
name|totalUncompressedBytes
decl_stmt|;
comment|/**    * The number of key/value pairs in the file. This field was int in version 1,    * but is now long.    */
specifier|private
name|long
name|entryCount
decl_stmt|;
comment|/**    * The compression codec used for all blocks.    */
specifier|private
name|Compression
operator|.
name|Algorithm
name|compressionCodec
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
decl_stmt|;
comment|/**    * The number of levels in the potentially multi-level data index. Used from    * version 2 onwards.    */
specifier|private
name|int
name|numDataIndexLevels
decl_stmt|;
comment|/**    * The offset of the first data block.    */
specifier|private
name|long
name|firstDataBlockOffset
decl_stmt|;
comment|/**    * It is guaranteed that no key/value data blocks start after this offset in    * the file.    */
specifier|private
name|long
name|lastDataBlockOffset
decl_stmt|;
comment|/**    * Raw key comparator class name in version 3    */
comment|// We could write the actual class name from 2.0 onwards and handle BC
specifier|private
name|String
name|comparatorClassName
init|=
name|CellComparator
operator|.
name|getInstance
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**    * The encryption key    */
specifier|private
name|byte
index|[]
name|encryptionKey
decl_stmt|;
comment|/**    * The {@link HFile} format major version.    */
specifier|private
specifier|final
name|int
name|majorVersion
decl_stmt|;
comment|/**    * The {@link HFile} format minor version.    */
specifier|private
specifier|final
name|int
name|minorVersion
decl_stmt|;
name|FixedFileTrailer
parameter_list|(
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|)
block|{
name|this
operator|.
name|majorVersion
operator|=
name|majorVersion
expr_stmt|;
name|this
operator|.
name|minorVersion
operator|=
name|minorVersion
expr_stmt|;
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|computeTrailerSizeByVersion
parameter_list|()
block|{
name|int
index|[]
name|versionToSize
init|=
operator|new
name|int
index|[
name|HFile
operator|.
name|MAX_FORMAT_VERSION
operator|+
literal|1
index|]
decl_stmt|;
comment|// We support only 2 major versions now. ie. V2, V3
name|versionToSize
index|[
literal|2
index|]
operator|=
literal|212
expr_stmt|;
for|for
control|(
name|int
name|version
init|=
literal|3
init|;
name|version
operator|<=
name|HFile
operator|.
name|MAX_FORMAT_VERSION
condition|;
name|version
operator|++
control|)
block|{
comment|// Max FFT size for V3 and above is taken as 4KB for future enhancements
comment|// if any.
comment|// Unless the trailer size exceeds 4K this can continue
name|versionToSize
index|[
name|version
index|]
operator|=
literal|1024
operator|*
literal|4
expr_stmt|;
block|}
return|return
name|versionToSize
return|;
block|}
specifier|private
specifier|static
name|int
name|getMaxTrailerSize
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|version
init|=
name|HFile
operator|.
name|MIN_FORMAT_VERSION
init|;
name|version
operator|<=
name|HFile
operator|.
name|MAX_FORMAT_VERSION
condition|;
operator|++
name|version
control|)
block|{
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|getTrailerSize
argument_list|(
name|version
argument_list|)
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
return|return
name|maxSize
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|TRAILER_SIZE
init|=
name|computeTrailerSizeByVersion
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TRAILER_SIZE
init|=
name|getMaxTrailerSize
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NOT_PB_SIZE
init|=
name|BlockType
operator|.
name|MAGIC_LENGTH
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
specifier|static
name|int
name|getTrailerSize
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
name|TRAILER_SIZE
index|[
name|version
index|]
return|;
block|}
specifier|public
name|int
name|getTrailerSize
parameter_list|()
block|{
return|return
name|getTrailerSize
argument_list|(
name|majorVersion
argument_list|)
return|;
block|}
comment|/**    * Write the trailer to a data stream. We support writing version 1 for    * testing and for determining version 1 trailer size. It is also easy to see    * what fields changed in version 2.    */
name|void
name|serialize
parameter_list|(
name|DataOutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|baosDos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|BlockType
operator|.
name|TRAILER
operator|.
name|write
argument_list|(
name|baosDos
argument_list|)
expr_stmt|;
name|serializeAsPB
argument_list|(
name|baosDos
argument_list|)
expr_stmt|;
comment|// The last 4 bytes of the file encode the major and minor version universally
name|baosDos
operator|.
name|writeInt
argument_list|(
name|materializeVersion
argument_list|(
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|writeTo
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
name|HFileProtos
operator|.
name|FileTrailerProto
name|toProtobuf
parameter_list|()
block|{
name|HFileProtos
operator|.
name|FileTrailerProto
operator|.
name|Builder
name|builder
init|=
name|HFileProtos
operator|.
name|FileTrailerProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFileInfoOffset
argument_list|(
name|fileInfoOffset
argument_list|)
operator|.
name|setLoadOnOpenDataOffset
argument_list|(
name|loadOnOpenDataOffset
argument_list|)
operator|.
name|setUncompressedDataIndexSize
argument_list|(
name|uncompressedDataIndexSize
argument_list|)
operator|.
name|setTotalUncompressedBytes
argument_list|(
name|totalUncompressedBytes
argument_list|)
operator|.
name|setDataIndexCount
argument_list|(
name|dataIndexCount
argument_list|)
operator|.
name|setMetaIndexCount
argument_list|(
name|metaIndexCount
argument_list|)
operator|.
name|setEntryCount
argument_list|(
name|entryCount
argument_list|)
operator|.
name|setNumDataIndexLevels
argument_list|(
name|numDataIndexLevels
argument_list|)
operator|.
name|setFirstDataBlockOffset
argument_list|(
name|firstDataBlockOffset
argument_list|)
operator|.
name|setLastDataBlockOffset
argument_list|(
name|lastDataBlockOffset
argument_list|)
operator|.
name|setComparatorClassName
argument_list|(
name|getHBase1CompatibleName
argument_list|(
name|comparatorClassName
argument_list|)
argument_list|)
operator|.
name|setCompressionCodec
argument_list|(
name|compressionCodec
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|encryptionKey
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncryptionKey
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|encryptionKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Write trailer data as protobuf.    * NOTE: we run a translation on the comparator name and will serialize the old hbase-1.x where    * it makes sense. See {@link #getHBase1CompatibleName(String)}.    */
name|void
name|serializeAsPB
parameter_list|(
name|DataOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// We need this extra copy unfortunately to determine the final size of the
comment|// delimited output, see use of baos.size() below.
name|toProtobuf
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// Pad to make up the difference between variable PB encoding length and the
comment|// length when encoded as writable under earlier V2 formats. Failure to pad
comment|// properly or if the PB encoding is too big would mean the trailer wont be read
comment|// in properly by HFile.
name|int
name|padding
init|=
name|getTrailerSize
argument_list|()
operator|-
name|NOT_PB_SIZE
operator|-
name|baos
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|padding
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Pbuf encoding size exceeded fixed trailer size limit"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|padding
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deserialize the fixed file trailer from the given stream. The version needs    * to already be specified. Make sure this is consistent with    * {@link #serialize(DataOutputStream)}.    */
name|void
name|deserialize
parameter_list|(
name|DataInputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
name|BlockType
operator|.
name|TRAILER
operator|.
name|readAndCheck
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|>
literal|2
operator|||
operator|(
name|majorVersion
operator|==
literal|2
operator|&&
name|minorVersion
operator|>=
name|HFileReaderImpl
operator|.
name|PBUF_TRAILER_MINOR_VERSION
operator|)
condition|)
block|{
name|deserializeFromPB
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeFromWritable
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
comment|// The last 4 bytes of the file encode the major and minor version universally
name|int
name|version
init|=
name|inputStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|expectMajorVersion
argument_list|(
name|extractMajorVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|expectMinorVersion
argument_list|(
name|extractMinorVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize the file trailer as protobuf    */
name|void
name|deserializeFromPB
parameter_list|(
name|DataInputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read PB and skip padding
name|int
name|start
init|=
name|inputStream
operator|.
name|available
argument_list|()
decl_stmt|;
name|HFileProtos
operator|.
name|FileTrailerProto
name|trailerProto
init|=
name|HFileProtos
operator|.
name|FileTrailerProto
operator|.
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|start
operator|-
name|inputStream
operator|.
name|available
argument_list|()
decl_stmt|;
name|inputStream
operator|.
name|skip
argument_list|(
name|getTrailerSize
argument_list|()
operator|-
name|NOT_PB_SIZE
operator|-
name|size
argument_list|)
expr_stmt|;
comment|// process the PB
if|if
condition|(
name|trailerProto
operator|.
name|hasFileInfoOffset
argument_list|()
condition|)
block|{
name|fileInfoOffset
operator|=
name|trailerProto
operator|.
name|getFileInfoOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasLoadOnOpenDataOffset
argument_list|()
condition|)
block|{
name|loadOnOpenDataOffset
operator|=
name|trailerProto
operator|.
name|getLoadOnOpenDataOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasUncompressedDataIndexSize
argument_list|()
condition|)
block|{
name|uncompressedDataIndexSize
operator|=
name|trailerProto
operator|.
name|getUncompressedDataIndexSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasTotalUncompressedBytes
argument_list|()
condition|)
block|{
name|totalUncompressedBytes
operator|=
name|trailerProto
operator|.
name|getTotalUncompressedBytes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasDataIndexCount
argument_list|()
condition|)
block|{
name|dataIndexCount
operator|=
name|trailerProto
operator|.
name|getDataIndexCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasMetaIndexCount
argument_list|()
condition|)
block|{
name|metaIndexCount
operator|=
name|trailerProto
operator|.
name|getMetaIndexCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasEntryCount
argument_list|()
condition|)
block|{
name|entryCount
operator|=
name|trailerProto
operator|.
name|getEntryCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasNumDataIndexLevels
argument_list|()
condition|)
block|{
name|numDataIndexLevels
operator|=
name|trailerProto
operator|.
name|getNumDataIndexLevels
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasFirstDataBlockOffset
argument_list|()
condition|)
block|{
name|firstDataBlockOffset
operator|=
name|trailerProto
operator|.
name|getFirstDataBlockOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasLastDataBlockOffset
argument_list|()
condition|)
block|{
name|lastDataBlockOffset
operator|=
name|trailerProto
operator|.
name|getLastDataBlockOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasComparatorClassName
argument_list|()
condition|)
block|{
name|setComparatorClass
argument_list|(
name|getComparatorClass
argument_list|(
name|trailerProto
operator|.
name|getComparatorClassName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasCompressionCodec
argument_list|()
condition|)
block|{
name|compressionCodec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|values
argument_list|()
index|[
name|trailerProto
operator|.
name|getCompressionCodec
argument_list|()
index|]
expr_stmt|;
block|}
else|else
block|{
name|compressionCodec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
expr_stmt|;
block|}
if|if
condition|(
name|trailerProto
operator|.
name|hasEncryptionKey
argument_list|()
condition|)
block|{
name|encryptionKey
operator|=
name|trailerProto
operator|.
name|getEncryptionKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deserialize the file trailer as writable data    */
name|void
name|deserializeFromWritable
parameter_list|(
name|DataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|fileInfoOffset
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|loadOnOpenDataOffset
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|dataIndexCount
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|uncompressedDataIndexSize
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|metaIndexCount
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|totalUncompressedBytes
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entryCount
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|compressionCodec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|values
argument_list|()
index|[
name|input
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
name|numDataIndexLevels
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|firstDataBlockOffset
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|lastDataBlockOffset
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// TODO this is a classname encoded into an  HFile's trailer. We are going to need to have
comment|// some compat code here.
name|setComparatorClass
argument_list|(
name|getComparatorClass
argument_list|(
name|Bytes
operator|.
name|readStringFixedSize
argument_list|(
name|input
argument_list|,
name|MAX_COMPARATOR_NAME_LENGTH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"fileinfoOffset="
operator|+
name|fileInfoOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"loadOnOpenDataOffset="
operator|+
name|loadOnOpenDataOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"dataIndexCount="
operator|+
name|dataIndexCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"metaIndexCount="
operator|+
name|metaIndexCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"totalUncomressedBytes="
operator|+
name|totalUncompressedBytes
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"entryCount="
operator|+
name|entryCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"compressionCodec="
operator|+
name|compressionCodec
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"uncompressedDataIndexSize="
operator|+
name|uncompressedDataIndexSize
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"numDataIndexLevels="
operator|+
name|numDataIndexLevels
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"firstDataBlockOffset="
operator|+
name|firstDataBlockOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"lastDataBlockOffset="
operator|+
name|lastDataBlockOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"comparatorClassName="
operator|+
name|comparatorClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|>=
literal|3
condition|)
block|{
name|append
argument_list|(
name|sb
argument_list|,
literal|"encryptionKey="
operator|+
operator|(
name|encryptionKey
operator|!=
literal|null
condition|?
literal|"PRESENT"
else|:
literal|"NONE"
operator|)
argument_list|)
expr_stmt|;
block|}
name|append
argument_list|(
name|sb
argument_list|,
literal|"majorVersion="
operator|+
name|majorVersion
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"minorVersion="
operator|+
name|minorVersion
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Reads a file trailer from the given file.    *    * @param istream  the input stream with the ability to seek. Does not have to    *                 be buffered, as only one read operation is made.    * @param fileSize the file size. Can be obtained using    *                 {@link org.apache.hadoop.fs.FileSystem#getFileStatus(    *org.apache.hadoop.fs.Path)}.    * @return the fixed file trailer read    * @throws IOException if failed to read from the underlying stream, or the    *                     trailer is corrupted, or the version of the trailer is    *                     unsupported    */
specifier|public
specifier|static
name|FixedFileTrailer
name|readFromStream
parameter_list|(
name|FSDataInputStream
name|istream
parameter_list|,
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|MAX_TRAILER_SIZE
decl_stmt|;
name|long
name|seekPoint
init|=
name|fileSize
operator|-
name|bufferSize
decl_stmt|;
if|if
condition|(
name|seekPoint
operator|<
literal|0
condition|)
block|{
comment|// It is hard to imagine such a small HFile.
name|seekPoint
operator|=
literal|0
expr_stmt|;
name|bufferSize
operator|=
operator|(
name|int
operator|)
name|fileSize
expr_stmt|;
block|}
name|HFileUtil
operator|.
name|seekOnMultipleSources
argument_list|(
name|istream
argument_list|,
name|seekPoint
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|istream
operator|.
name|readFully
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the version from the last int of the file.
name|buf
operator|.
name|position
argument_list|(
name|buf
operator|.
name|limit
argument_list|()
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|buf
operator|.
name|getInt
argument_list|()
decl_stmt|;
comment|// Extract the major and minor versions.
name|int
name|majorVersion
init|=
name|extractMajorVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|int
name|minorVersion
init|=
name|extractMinorVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
comment|// throws IAE if invalid
name|int
name|trailerSize
init|=
name|getTrailerSize
argument_list|(
name|majorVersion
argument_list|)
decl_stmt|;
name|FixedFileTrailer
name|fft
init|=
operator|new
name|FixedFileTrailer
argument_list|(
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
decl_stmt|;
name|fft
operator|.
name|deserialize
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|bufferSize
operator|-
name|trailerSize
argument_list|,
name|trailerSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fft
return|;
block|}
specifier|public
name|void
name|expectMajorVersion
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
name|majorVersion
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile major version: "
operator|+
name|majorVersion
operator|+
literal|" (expected: "
operator|+
name|expected
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|expectMinorVersion
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
name|minorVersion
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile minor version: "
operator|+
name|minorVersion
operator|+
literal|" (expected: "
operator|+
name|expected
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|expectAtLeastMajorVersion
parameter_list|(
name|int
name|lowerBound
parameter_list|)
block|{
if|if
condition|(
name|majorVersion
operator|<
name|lowerBound
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile major version: "
operator|+
name|majorVersion
operator|+
literal|" (expected: "
operator|+
name|lowerBound
operator|+
literal|" or higher)."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getFileInfoOffset
parameter_list|()
block|{
return|return
name|fileInfoOffset
return|;
block|}
specifier|public
name|void
name|setFileInfoOffset
parameter_list|(
name|long
name|fileInfoOffset
parameter_list|)
block|{
name|this
operator|.
name|fileInfoOffset
operator|=
name|fileInfoOffset
expr_stmt|;
block|}
specifier|public
name|long
name|getLoadOnOpenDataOffset
parameter_list|()
block|{
return|return
name|loadOnOpenDataOffset
return|;
block|}
specifier|public
name|void
name|setLoadOnOpenOffset
parameter_list|(
name|long
name|loadOnOpenDataOffset
parameter_list|)
block|{
name|this
operator|.
name|loadOnOpenDataOffset
operator|=
name|loadOnOpenDataOffset
expr_stmt|;
block|}
specifier|public
name|int
name|getDataIndexCount
parameter_list|()
block|{
return|return
name|dataIndexCount
return|;
block|}
specifier|public
name|void
name|setDataIndexCount
parameter_list|(
name|int
name|dataIndexCount
parameter_list|)
block|{
name|this
operator|.
name|dataIndexCount
operator|=
name|dataIndexCount
expr_stmt|;
block|}
specifier|public
name|int
name|getMetaIndexCount
parameter_list|()
block|{
return|return
name|metaIndexCount
return|;
block|}
specifier|public
name|void
name|setMetaIndexCount
parameter_list|(
name|int
name|metaIndexCount
parameter_list|)
block|{
name|this
operator|.
name|metaIndexCount
operator|=
name|metaIndexCount
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalUncompressedBytes
parameter_list|()
block|{
return|return
name|totalUncompressedBytes
return|;
block|}
specifier|public
name|void
name|setTotalUncompressedBytes
parameter_list|(
name|long
name|totalUncompressedBytes
parameter_list|)
block|{
name|this
operator|.
name|totalUncompressedBytes
operator|=
name|totalUncompressedBytes
expr_stmt|;
block|}
specifier|public
name|long
name|getEntryCount
parameter_list|()
block|{
return|return
name|entryCount
return|;
block|}
specifier|public
name|void
name|setEntryCount
parameter_list|(
name|long
name|newEntryCount
parameter_list|)
block|{
name|entryCount
operator|=
name|newEntryCount
expr_stmt|;
block|}
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompressionCodec
parameter_list|()
block|{
return|return
name|compressionCodec
return|;
block|}
specifier|public
name|void
name|setCompressionCodec
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|compressionCodec
parameter_list|)
block|{
name|this
operator|.
name|compressionCodec
operator|=
name|compressionCodec
expr_stmt|;
block|}
specifier|public
name|int
name|getNumDataIndexLevels
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|numDataIndexLevels
return|;
block|}
specifier|public
name|void
name|setNumDataIndexLevels
parameter_list|(
name|int
name|numDataIndexLevels
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDataIndexLevels
operator|=
name|numDataIndexLevels
expr_stmt|;
block|}
specifier|public
name|long
name|getLastDataBlockOffset
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|lastDataBlockOffset
return|;
block|}
specifier|public
name|void
name|setLastDataBlockOffset
parameter_list|(
name|long
name|lastDataBlockOffset
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastDataBlockOffset
operator|=
name|lastDataBlockOffset
expr_stmt|;
block|}
specifier|public
name|long
name|getFirstDataBlockOffset
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|firstDataBlockOffset
return|;
block|}
specifier|public
name|void
name|setFirstDataBlockOffset
parameter_list|(
name|long
name|firstDataBlockOffset
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstDataBlockOffset
operator|=
name|firstDataBlockOffset
expr_stmt|;
block|}
specifier|public
name|String
name|getComparatorClassName
parameter_list|()
block|{
return|return
name|comparatorClassName
return|;
block|}
comment|/**    * Returns the major version of this HFile format    */
specifier|public
name|int
name|getMajorVersion
parameter_list|()
block|{
return|return
name|majorVersion
return|;
block|}
comment|/**    * Returns the minor version of this HFile format    */
specifier|public
name|int
name|getMinorVersion
parameter_list|()
block|{
return|return
name|minorVersion
return|;
block|}
specifier|public
name|void
name|setComparatorClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CellComparator
argument_list|>
name|klass
parameter_list|)
block|{
comment|// Is the comparator instantiable?
try|try
block|{
comment|// If null, it should be the Bytes.BYTES_RAWCOMPARATOR
if|if
condition|(
name|klass
operator|!=
literal|null
condition|)
block|{
name|CellComparator
name|comp
init|=
name|klass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// if the name wasn't one of the legacy names, maybe its a legit new
comment|// kind of comparator.
name|this
operator|.
name|comparatorClassName
operator|=
name|klass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Comparator class "
operator|+
name|klass
operator|.
name|getName
argument_list|()
operator|+
literal|" is not instantiable"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * If a 'standard' Comparator, write the old name for the Comparator when we serialize rather    * than the new name; writing the new name will make it so newly-written hfiles are not parseable    * by hbase-1.x, a facility we'd like to preserve across rolling upgrade and hbase-1.x clusters    * reading hbase-2.x produce.    *<p>    * The Comparators in hbase-2.x work the same as they did in hbase-1.x; they compare    * KeyValues. In hbase-2.x they were renamed making use of the more generic 'Cell'    * nomenclature to indicate that we intend to move away from KeyValues post hbase-2. A naming    * change is not reason enough to make it so hbase-1.x cannot read hbase-2.x files given the    * structure goes unchanged (hfile v3). So, lets write the old names for Comparators into the    * hfile tails in hbase-2. Here is where we do the translation.    * {@link #getComparatorClass(String)} does translation going the other way.    *    *<p>The translation is done on the serialized Protobuf only.</p>    *    * @param comparator String class name of the Comparator used in this hfile.    * @return What to store in the trailer as our comparator name.    * @see #getComparatorClass(String)    * @since hbase-2.0.0.    * @deprecated Since hbase-2.0.0. Will be removed in hbase-3.0.0.    */
annotation|@
name|Deprecated
specifier|private
name|String
name|getHBase1CompatibleName
parameter_list|(
specifier|final
name|String
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|comparator
operator|.
name|equals
argument_list|(
name|CellComparatorImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|comparator
operator|.
name|equals
argument_list|(
name|MetaCellComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|KeyValue
operator|.
name|META_COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|comparator
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|CellComparator
argument_list|>
name|getComparatorClass
parameter_list|(
name|String
name|comparatorClassName
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CellComparator
argument_list|>
name|comparatorKlass
decl_stmt|;
comment|// for BC
if|if
condition|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|getLegacyKeyComparatorName
argument_list|()
argument_list|)
operator|||
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hbase.CellComparator"
argument_list|)
operator|)
condition|)
block|{
name|comparatorKlass
operator|=
name|CellComparatorImpl
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|KeyValue
operator|.
name|META_COMPARATOR
operator|.
name|getLegacyKeyComparatorName
argument_list|()
argument_list|)
operator|||
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|KeyValue
operator|.
name|META_COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hbase.CellComparator$MetaCellComparator"
argument_list|)
operator|)
condition|)
block|{
name|comparatorKlass
operator|=
name|MetaCellComparator
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hbase.KeyValue$RawBytesComparator"
argument_list|)
operator|||
name|comparatorClassName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hbase.util.Bytes$ByteArrayComparator"
argument_list|)
condition|)
block|{
comment|// When the comparator to be used is Bytes.BYTES_RAWCOMPARATOR, we just return null from here
comment|// Bytes.BYTES_RAWCOMPARATOR is not a CellComparator
name|comparatorKlass
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// if the name wasn't one of the legacy names, maybe its a legit new kind of comparator.
try|try
block|{
name|comparatorKlass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CellComparator
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|comparatorClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|comparatorKlass
return|;
block|}
specifier|static
name|CellComparator
name|createComparator
parameter_list|(
name|String
name|comparatorClassName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|CellComparatorImpl
operator|.
name|COMPARATOR
return|;
block|}
elseif|else
if|if
condition|(
name|comparatorClassName
operator|.
name|equals
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CellComparator
argument_list|>
name|comparatorClass
init|=
name|getComparatorClass
argument_list|(
name|comparatorClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparatorClass
operator|!=
literal|null
condition|)
block|{
return|return
name|comparatorClass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"No Comparator class for "
operator|+
name|comparatorClassName
operator|+
literal|". Returning Null."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Comparator class "
operator|+
name|comparatorClassName
operator|+
literal|" is not instantiable"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|CellComparator
name|createComparator
parameter_list|()
throws|throws
name|IOException
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|createComparator
argument_list|(
name|comparatorClassName
argument_list|)
return|;
block|}
specifier|public
name|long
name|getUncompressedDataIndexSize
parameter_list|()
block|{
return|return
name|uncompressedDataIndexSize
return|;
block|}
specifier|public
name|void
name|setUncompressedDataIndexSize
parameter_list|(
name|long
name|uncompressedDataIndexSize
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|uncompressedDataIndexSize
operator|=
name|uncompressedDataIndexSize
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getEncryptionKey
parameter_list|()
block|{
comment|// This is a v3 feature but if reading a v2 file the encryptionKey will just be null which
comment|// if fine for this feature.
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|encryptionKey
return|;
block|}
specifier|public
name|void
name|setEncryptionKey
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|)
block|{
name|this
operator|.
name|encryptionKey
operator|=
name|keyBytes
expr_stmt|;
block|}
comment|/**    * Extracts the major version for a 4-byte serialized version data.    * The major version is the 3 least significant bytes    */
specifier|private
specifier|static
name|int
name|extractMajorVersion
parameter_list|(
name|int
name|serializedVersion
parameter_list|)
block|{
return|return
operator|(
name|serializedVersion
operator|&
literal|0x00ffffff
operator|)
return|;
block|}
comment|/**    * Extracts the minor version for a 4-byte serialized version data.    * The major version are the 3 the most significant bytes    */
specifier|private
specifier|static
name|int
name|extractMinorVersion
parameter_list|(
name|int
name|serializedVersion
parameter_list|)
block|{
return|return
operator|(
name|serializedVersion
operator|>>>
literal|24
operator|)
return|;
block|}
comment|/**    * Create a 4 byte serialized version number by combining the    * minor and major version numbers.    */
specifier|static
name|int
name|materializeVersion
parameter_list|(
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|majorVersion
operator|&
literal|0x00ffffff
operator|)
operator||
operator|(
name|minorVersion
operator|<<
literal|24
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

