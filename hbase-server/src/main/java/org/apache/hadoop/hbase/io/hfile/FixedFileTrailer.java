begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|MAX_FORMAT_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
operator|.
name|MIN_FORMAT_VERSION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|NullOutputStream
import|;
end_import

begin_comment
comment|/**  * The {@link HFile} has a fixed trailer which contains offsets to other  * variable parts of the file. Also includes basic metadata on this file. The  * trailer size is fixed within a given {@link HFile} format version only, but  * we always store the version number as the last four-byte integer of the file.  * The version number itself is split into two portions, a major   * version and a minor version.   * The last three bytes of a file is the major  * version and a single preceding byte is the minor number. The major version  * determines which readers/writers to use to read/write a hfile while a minor  * version determines smaller changes in hfile format that do not need a new  * reader/writer type.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FixedFileTrailer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FixedFileTrailer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * We store the comparator class name as a fixed-length field in the trailer.    */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COMPARATOR_NAME_LENGTH
init|=
literal|128
decl_stmt|;
comment|/**    * Offset to the fileinfo data, a small block of vitals. Necessary in v1 but    * only potentially useful for pretty-printing in v2.    */
specifier|private
name|long
name|fileInfoOffset
decl_stmt|;
comment|/**    * In version 1, the offset to the data block index. Starting from version 2,    * the meaning of this field is the offset to the section of the file that    * should be loaded at the time the file is being opened, and as of the time    * of writing, this happens to be the offset of the file info section.    */
specifier|private
name|long
name|loadOnOpenDataOffset
decl_stmt|;
comment|/** The number of entries in the root data index. */
specifier|private
name|int
name|dataIndexCount
decl_stmt|;
comment|/** Total uncompressed size of all blocks of the data index */
specifier|private
name|long
name|uncompressedDataIndexSize
decl_stmt|;
comment|/** The number of entries in the meta index */
specifier|private
name|int
name|metaIndexCount
decl_stmt|;
comment|/** The total uncompressed size of keys/values stored in the file. */
specifier|private
name|long
name|totalUncompressedBytes
decl_stmt|;
comment|/**    * The number of key/value pairs in the file. This field was int in version 1,    * but is now long.    */
specifier|private
name|long
name|entryCount
decl_stmt|;
comment|/** The compression codec used for all blocks. */
specifier|private
name|Compression
operator|.
name|Algorithm
name|compressionCodec
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
decl_stmt|;
comment|/**    * The number of levels in the potentially multi-level data index. Used from    * version 2 onwards.    */
specifier|private
name|int
name|numDataIndexLevels
decl_stmt|;
comment|/** The offset of the first data block. */
specifier|private
name|long
name|firstDataBlockOffset
decl_stmt|;
comment|/**    * It is guaranteed that no key/value data blocks start after this offset in    * the file.    */
specifier|private
name|long
name|lastDataBlockOffset
decl_stmt|;
comment|/** Raw key comparator class name in version 2 */
specifier|private
name|String
name|comparatorClassName
init|=
name|RawComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/** The {@link HFile} format major version. */
specifier|private
specifier|final
name|int
name|majorVersion
decl_stmt|;
comment|/** The {@link HFile} format minor version. */
specifier|private
specifier|final
name|int
name|minorVersion
decl_stmt|;
name|FixedFileTrailer
parameter_list|(
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|)
block|{
name|this
operator|.
name|majorVersion
operator|=
name|majorVersion
expr_stmt|;
name|this
operator|.
name|minorVersion
operator|=
name|minorVersion
expr_stmt|;
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|computeTrailerSizeByVersion
parameter_list|()
block|{
name|int
name|versionToSize
index|[]
init|=
operator|new
name|int
index|[
name|HFile
operator|.
name|MAX_FORMAT_VERSION
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|version
init|=
name|MIN_FORMAT_VERSION
init|;
name|version
operator|<=
name|MAX_FORMAT_VERSION
condition|;
operator|++
name|version
control|)
block|{
name|FixedFileTrailer
name|fft
init|=
operator|new
name|FixedFileTrailer
argument_list|(
name|version
argument_list|,
name|HFileBlock
operator|.
name|MINOR_VERSION_NO_CHECKSUM
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fft
operator|.
name|serialize
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// The above has no reason to fail.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|versionToSize
index|[
name|version
index|]
operator|=
name|dos
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|versionToSize
return|;
block|}
specifier|private
specifier|static
name|int
name|getMaxTrailerSize
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|version
init|=
name|MIN_FORMAT_VERSION
init|;
name|version
operator|<=
name|MAX_FORMAT_VERSION
condition|;
operator|++
name|version
control|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|getTrailerSize
argument_list|(
name|version
argument_list|)
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
return|return
name|maxSize
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|TRAILER_SIZE
index|[]
init|=
name|computeTrailerSizeByVersion
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TRAILER_SIZE
init|=
name|getMaxTrailerSize
argument_list|()
decl_stmt|;
specifier|static
name|int
name|getTrailerSize
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
name|TRAILER_SIZE
index|[
name|version
index|]
return|;
block|}
specifier|public
name|int
name|getTrailerSize
parameter_list|()
block|{
return|return
name|getTrailerSize
argument_list|(
name|majorVersion
argument_list|)
return|;
block|}
comment|/**    * Write the trailer to a data stream. We support writing version 1 for    * testing and for determining version 1 trailer size. It is also easy to see    * what fields changed in version 2.    *    * @param outputStream    * @throws IOException    */
name|void
name|serialize
parameter_list|(
name|DataOutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|baosDos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|BlockType
operator|.
name|TRAILER
operator|.
name|write
argument_list|(
name|baosDos
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeLong
argument_list|(
name|fileInfoOffset
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeLong
argument_list|(
name|loadOnOpenDataOffset
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeInt
argument_list|(
name|dataIndexCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|==
literal|1
condition|)
block|{
comment|// This used to be metaIndexOffset, but it was not used in version 1.
name|baosDos
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baosDos
operator|.
name|writeLong
argument_list|(
name|uncompressedDataIndexSize
argument_list|)
expr_stmt|;
block|}
name|baosDos
operator|.
name|writeInt
argument_list|(
name|metaIndexCount
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeLong
argument_list|(
name|totalUncompressedBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|==
literal|1
condition|)
block|{
name|baosDos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|entryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This field is long from version 2 onwards.
name|baosDos
operator|.
name|writeLong
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
block|}
name|baosDos
operator|.
name|writeInt
argument_list|(
name|compressionCodec
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|>
literal|1
condition|)
block|{
name|baosDos
operator|.
name|writeInt
argument_list|(
name|numDataIndexLevels
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeLong
argument_list|(
name|firstDataBlockOffset
argument_list|)
expr_stmt|;
name|baosDos
operator|.
name|writeLong
argument_list|(
name|lastDataBlockOffset
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeStringFixedSize
argument_list|(
name|baosDos
argument_list|,
name|comparatorClassName
argument_list|,
name|MAX_COMPARATOR_NAME_LENGTH
argument_list|)
expr_stmt|;
block|}
comment|// serialize the major and minor versions
name|baosDos
operator|.
name|writeInt
argument_list|(
name|materializeVersion
argument_list|(
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize the fixed file trailer from the given stream. The version needs    * to already be specified. Make sure this is consistent with    * {@link #serialize(DataOutputStream)}.    *    * @param inputStream    * @param version    * @throws IOException    */
name|void
name|deserialize
parameter_list|(
name|DataInputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
name|BlockType
operator|.
name|TRAILER
operator|.
name|readAndCheck
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|fileInfoOffset
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|loadOnOpenDataOffset
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|dataIndexCount
operator|=
name|inputStream
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|==
literal|1
condition|)
block|{
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// Read and skip metaIndexOffset.
block|}
else|else
block|{
name|uncompressedDataIndexSize
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|metaIndexCount
operator|=
name|inputStream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|totalUncompressedBytes
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entryCount
operator|=
name|majorVersion
operator|==
literal|1
condition|?
name|inputStream
operator|.
name|readInt
argument_list|()
else|:
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|compressionCodec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|values
argument_list|()
index|[
name|inputStream
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|>
literal|1
condition|)
block|{
name|numDataIndexLevels
operator|=
name|inputStream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|firstDataBlockOffset
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|lastDataBlockOffset
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|comparatorClassName
operator|=
name|Bytes
operator|.
name|readStringFixedSize
argument_list|(
name|inputStream
argument_list|,
name|MAX_COMPARATOR_NAME_LENGTH
argument_list|)
expr_stmt|;
block|}
name|int
name|version
init|=
name|inputStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|expectMajorVersion
argument_list|(
name|extractMajorVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|expectMinorVersion
argument_list|(
name|extractMinorVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"fileinfoOffset="
operator|+
name|fileInfoOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"loadOnOpenDataOffset="
operator|+
name|loadOnOpenDataOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"dataIndexCount="
operator|+
name|dataIndexCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"metaIndexCount="
operator|+
name|metaIndexCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"totalUncomressedBytes="
operator|+
name|totalUncompressedBytes
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"entryCount="
operator|+
name|entryCount
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"compressionCodec="
operator|+
name|compressionCodec
argument_list|)
expr_stmt|;
if|if
condition|(
name|majorVersion
operator|==
literal|2
condition|)
block|{
name|append
argument_list|(
name|sb
argument_list|,
literal|"uncompressedDataIndexSize="
operator|+
name|uncompressedDataIndexSize
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"numDataIndexLevels="
operator|+
name|numDataIndexLevels
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"firstDataBlockOffset="
operator|+
name|firstDataBlockOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"lastDataBlockOffset="
operator|+
name|lastDataBlockOffset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"comparatorClassName="
operator|+
name|comparatorClassName
argument_list|)
expr_stmt|;
block|}
name|append
argument_list|(
name|sb
argument_list|,
literal|"majorVersion="
operator|+
name|majorVersion
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
literal|"minorVersion="
operator|+
name|minorVersion
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Reads a file trailer from the given file.    *    * @param istream the input stream with the ability to seek. Does not have to    *          be buffered, as only one read operation is made.    * @param fileSize the file size. Can be obtained using    *          {@link org.apache.hadoop.fs.FileSystem#getFileStatus(    *          org.apache.hadoop.fs.Path)}.    * @return the fixed file trailer read    * @throws IOException if failed to read from the underlying stream, or the    *           trailer is corrupted, or the version of the trailer is    *           unsupported    */
specifier|public
specifier|static
name|FixedFileTrailer
name|readFromStream
parameter_list|(
name|FSDataInputStream
name|istream
parameter_list|,
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
name|MAX_TRAILER_SIZE
decl_stmt|;
name|long
name|seekPoint
init|=
name|fileSize
operator|-
name|bufferSize
decl_stmt|;
if|if
condition|(
name|seekPoint
operator|<
literal|0
condition|)
block|{
comment|// It is hard to imagine such a small HFile.
name|seekPoint
operator|=
literal|0
expr_stmt|;
name|bufferSize
operator|=
operator|(
name|int
operator|)
name|fileSize
expr_stmt|;
block|}
name|istream
operator|.
name|seek
argument_list|(
name|seekPoint
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|istream
operator|.
name|readFully
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the version from the last int of the file.
name|buf
operator|.
name|position
argument_list|(
name|buf
operator|.
name|limit
argument_list|()
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|buf
operator|.
name|getInt
argument_list|()
decl_stmt|;
comment|// Extract the major and minor versions.
name|int
name|majorVersion
init|=
name|extractMajorVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|int
name|minorVersion
init|=
name|extractMinorVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|checkFormatVersion
argument_list|(
name|majorVersion
argument_list|)
expr_stmt|;
comment|// throws IAE if invalid
name|int
name|trailerSize
init|=
name|getTrailerSize
argument_list|(
name|majorVersion
argument_list|)
decl_stmt|;
name|FixedFileTrailer
name|fft
init|=
operator|new
name|FixedFileTrailer
argument_list|(
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
decl_stmt|;
name|fft
operator|.
name|deserialize
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|bufferSize
operator|-
name|trailerSize
argument_list|,
name|trailerSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fft
return|;
block|}
specifier|public
name|void
name|expectMajorVersion
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
name|majorVersion
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile major version: "
operator|+
name|majorVersion
operator|+
literal|" (expected: "
operator|+
name|expected
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|expectMinorVersion
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
name|minorVersion
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile minor version: "
operator|+
name|minorVersion
operator|+
literal|" (expected: "
operator|+
name|expected
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|expectAtLeastMajorVersion
parameter_list|(
name|int
name|lowerBound
parameter_list|)
block|{
if|if
condition|(
name|majorVersion
operator|<
name|lowerBound
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid HFile major version: "
operator|+
name|majorVersion
operator|+
literal|" (expected: "
operator|+
name|lowerBound
operator|+
literal|" or higher)."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getFileInfoOffset
parameter_list|()
block|{
return|return
name|fileInfoOffset
return|;
block|}
specifier|public
name|void
name|setFileInfoOffset
parameter_list|(
name|long
name|fileInfoOffset
parameter_list|)
block|{
name|this
operator|.
name|fileInfoOffset
operator|=
name|fileInfoOffset
expr_stmt|;
block|}
specifier|public
name|long
name|getLoadOnOpenDataOffset
parameter_list|()
block|{
return|return
name|loadOnOpenDataOffset
return|;
block|}
specifier|public
name|void
name|setLoadOnOpenOffset
parameter_list|(
name|long
name|loadOnOpenDataOffset
parameter_list|)
block|{
name|this
operator|.
name|loadOnOpenDataOffset
operator|=
name|loadOnOpenDataOffset
expr_stmt|;
block|}
specifier|public
name|int
name|getDataIndexCount
parameter_list|()
block|{
return|return
name|dataIndexCount
return|;
block|}
specifier|public
name|void
name|setDataIndexCount
parameter_list|(
name|int
name|dataIndexCount
parameter_list|)
block|{
name|this
operator|.
name|dataIndexCount
operator|=
name|dataIndexCount
expr_stmt|;
block|}
specifier|public
name|int
name|getMetaIndexCount
parameter_list|()
block|{
return|return
name|metaIndexCount
return|;
block|}
specifier|public
name|void
name|setMetaIndexCount
parameter_list|(
name|int
name|metaIndexCount
parameter_list|)
block|{
name|this
operator|.
name|metaIndexCount
operator|=
name|metaIndexCount
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalUncompressedBytes
parameter_list|()
block|{
return|return
name|totalUncompressedBytes
return|;
block|}
specifier|public
name|void
name|setTotalUncompressedBytes
parameter_list|(
name|long
name|totalUncompressedBytes
parameter_list|)
block|{
name|this
operator|.
name|totalUncompressedBytes
operator|=
name|totalUncompressedBytes
expr_stmt|;
block|}
specifier|public
name|long
name|getEntryCount
parameter_list|()
block|{
return|return
name|entryCount
return|;
block|}
specifier|public
name|void
name|setEntryCount
parameter_list|(
name|long
name|newEntryCount
parameter_list|)
block|{
if|if
condition|(
name|majorVersion
operator|==
literal|1
condition|)
block|{
name|int
name|intEntryCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newEntryCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|intEntryCount
operator|!=
name|newEntryCount
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Warning: entry count is "
operator|+
name|newEntryCount
operator|+
literal|" but writing "
operator|+
name|intEntryCount
operator|+
literal|" into the version "
operator|+
name|majorVersion
operator|+
literal|" trailer"
argument_list|)
expr_stmt|;
block|}
name|entryCount
operator|=
name|intEntryCount
expr_stmt|;
return|return;
block|}
name|entryCount
operator|=
name|newEntryCount
expr_stmt|;
block|}
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompressionCodec
parameter_list|()
block|{
return|return
name|compressionCodec
return|;
block|}
specifier|public
name|void
name|setCompressionCodec
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|compressionCodec
parameter_list|)
block|{
name|this
operator|.
name|compressionCodec
operator|=
name|compressionCodec
expr_stmt|;
block|}
specifier|public
name|int
name|getNumDataIndexLevels
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|numDataIndexLevels
return|;
block|}
specifier|public
name|void
name|setNumDataIndexLevels
parameter_list|(
name|int
name|numDataIndexLevels
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDataIndexLevels
operator|=
name|numDataIndexLevels
expr_stmt|;
block|}
specifier|public
name|long
name|getLastDataBlockOffset
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|lastDataBlockOffset
return|;
block|}
specifier|public
name|void
name|setLastDataBlockOffset
parameter_list|(
name|long
name|lastDataBlockOffset
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastDataBlockOffset
operator|=
name|lastDataBlockOffset
expr_stmt|;
block|}
specifier|public
name|long
name|getFirstDataBlockOffset
parameter_list|()
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|firstDataBlockOffset
return|;
block|}
specifier|public
name|void
name|setFirstDataBlockOffset
parameter_list|(
name|long
name|firstDataBlockOffset
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstDataBlockOffset
operator|=
name|firstDataBlockOffset
expr_stmt|;
block|}
comment|/**    * Returns the major version of this HFile format    */
specifier|public
name|int
name|getMajorVersion
parameter_list|()
block|{
return|return
name|majorVersion
return|;
block|}
comment|/**    * Returns the minor version of this HFile format    */
name|int
name|getMinorVersion
parameter_list|()
block|{
return|return
name|minorVersion
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|void
name|setComparatorClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RawComparator
argument_list|>
name|klass
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|comparatorClassName
operator|=
name|klass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|getComparatorClass
parameter_list|(
name|String
name|comparatorClassName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|comparatorClassName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|createComparator
parameter_list|(
name|String
name|comparatorClassName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getComparatorClass
argument_list|(
name|comparatorClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|createComparator
parameter_list|()
throws|throws
name|IOException
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|createComparator
argument_list|(
name|comparatorClassName
argument_list|)
return|;
block|}
specifier|public
name|long
name|getUncompressedDataIndexSize
parameter_list|()
block|{
if|if
condition|(
name|majorVersion
operator|==
literal|1
condition|)
return|return
literal|0
return|;
return|return
name|uncompressedDataIndexSize
return|;
block|}
specifier|public
name|void
name|setUncompressedDataIndexSize
parameter_list|(
name|long
name|uncompressedDataIndexSize
parameter_list|)
block|{
name|expectAtLeastMajorVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|uncompressedDataIndexSize
operator|=
name|uncompressedDataIndexSize
expr_stmt|;
block|}
comment|/**    * Extracts the major version for a 4-byte serialized version data.    * The major version is the 3 least significant bytes    */
specifier|private
specifier|static
name|int
name|extractMajorVersion
parameter_list|(
name|int
name|serializedVersion
parameter_list|)
block|{
return|return
operator|(
name|serializedVersion
operator|&
literal|0x00ffffff
operator|)
return|;
block|}
comment|/**    * Extracts the minor version for a 4-byte serialized version data.    * The major version are the 3 the most significant bytes    */
specifier|private
specifier|static
name|int
name|extractMinorVersion
parameter_list|(
name|int
name|serializedVersion
parameter_list|)
block|{
return|return
operator|(
name|serializedVersion
operator|>>>
literal|24
operator|)
return|;
block|}
comment|/**    * Create a 4 byte serialized version number by combining the    * minor and major version numbers.    */
specifier|private
specifier|static
name|int
name|materializeVersion
parameter_list|(
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|majorVersion
operator|&
literal|0x00ffffff
operator|)
operator||
operator|(
name|minorVersion
operator|<<
literal|24
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

