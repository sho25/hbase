begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueuesZKImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * A cleaner that cleans replication locks on zk which is locked by dead region servers  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationZKLockCleanerChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationZKLockCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|zk
decl_stmt|;
specifier|private
name|ReplicationTracker
name|tracker
decl_stmt|;
specifier|private
name|long
name|ttl
decl_stmt|;
specifier|private
name|ReplicationQueuesZKImpl
name|queues
decl_stmt|;
comment|// Wait some times before delete lock to prevent a session expired RS not dead fully.
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_TTL
init|=
literal|60
operator|*
literal|10
operator|*
literal|1000
decl_stmt|;
comment|//10 min
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|String
name|TTL_CONFIG_KEY
init|=
literal|"hbase.replication.zk.deadrs.lock.ttl"
decl_stmt|;
specifier|public
name|ReplicationZKLockCleanerChore
parameter_list|(
name|Stoppable
name|stopper
parameter_list|,
name|Abortable
name|abortable
parameter_list|,
name|int
name|period
parameter_list|,
name|ZooKeeperWatcher
name|zk
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"ReplicationZKLockCleanerChore"
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|this
operator|.
name|zk
operator|=
name|zk
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|TTL_CONFIG_KEY
argument_list|,
name|DEFAULT_TTL
argument_list|)
expr_stmt|;
name|tracker
operator|=
name|ReplicationFactory
operator|.
name|getReplicationTracker
argument_list|(
name|zk
argument_list|,
name|ReplicationFactory
operator|.
name|getReplicationPeers
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|,
name|stopper
argument_list|)
expr_stmt|;
name|queues
operator|=
operator|new
name|ReplicationQueuesZKImpl
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regionServers
init|=
name|tracker
operator|.
name|getListOfRegionServers
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionServers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|rsSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|regionServers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|replicators
init|=
name|queues
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|replicator
range|:
name|replicators
control|)
block|{
try|try
block|{
name|String
name|lockNode
init|=
name|queues
operator|.
name|getLockZNode
argument_list|(
name|replicator
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zk
argument_list|,
name|lockNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|rsServerNameZnode
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
index|[]
name|array
init|=
name|rsServerNameZnode
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|array
index|[
name|array
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|rsSet
operator|.
name|contains
argument_list|(
name|znode
argument_list|)
condition|)
block|{
name|Stat
name|s
init|=
name|zk
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|lockNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|s
operator|.
name|getMtime
argument_list|()
operator|>
name|this
operator|.
name|ttl
condition|)
block|{
comment|// server is dead, but lock is still there, we have to delete the lock.
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zk
argument_list|,
name|lockNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove lock acquired by dead RS: "
operator|+
name|lockNode
operator|+
literal|" by "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip lock acquired by live RS: "
operator|+
name|lockNode
operator|+
literal|" by "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ignore
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"zk operation interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"zk operation interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

