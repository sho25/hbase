begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceLimitingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceViolationPolicyEnforcement
import|;
end_import

begin_comment
comment|/**  * The default implementation for {@link SpaceViolationPolicyEnforcement}. This is done because all  * tables, whether or not they're in violation now, should be checking bulk loads to proactively  * catch a swell of files that would push the table into violation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultViolationPolicyEnforcement
extends|extends
name|AbstractViolationPolicyEnforcement
block|{
annotation|@
name|Override
specifier|public
name|void
name|enable
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|void
name|disable
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyName
parameter_list|()
block|{
return|return
literal|"BulkLoadVerifying"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|Mutation
name|m
parameter_list|)
throws|throws
name|SpaceLimitingException
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCheckBulkLoads
parameter_list|()
block|{
comment|// Reference check. The singleton is used when no quota exists to check against
return|return
name|SpaceQuotaSnapshot
operator|.
name|getNoSuchSnapshot
argument_list|()
operator|!=
name|quotaSnapshot
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|computeBulkLoadSize
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|SpaceLimitingException
block|{
comment|// Compute the amount of space that could be used to save some arithmetic in the for-loop
specifier|final
name|long
name|sizeAvailableForBulkLoads
init|=
name|quotaSnapshot
operator|.
name|getLimit
argument_list|()
operator|-
name|quotaSnapshot
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|size
operator|+=
name|getFileSize
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpaceLimitingException
argument_list|(
name|getPolicyName
argument_list|()
argument_list|,
literal|"Colud not verify length of file to bulk load: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|size
operator|>
name|sizeAvailableForBulkLoads
condition|)
block|{
throw|throw
operator|new
name|SpaceLimitingException
argument_list|(
name|getPolicyName
argument_list|()
argument_list|,
literal|"Bulk load of "
operator|+
name|paths
operator|+
literal|" is disallowed because the file(s) exceed the limits of a space quota."
argument_list|)
throw|;
block|}
block|}
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

