begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Holds details of the snapshot taken on a MemStore. Details include the snapshot's identifier,  * count of cells in it and total memory size occupied by all the cells, timestamp information of  * all the cells and a scanner to read all cells in it.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MemStoreSnapshot
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
specifier|private
specifier|final
name|int
name|cellsCount
decl_stmt|;
specifier|private
specifier|final
name|long
name|dataSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|heapSize
decl_stmt|;
specifier|private
specifier|final
name|TimeRangeTracker
name|timeRangeTracker
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|tagsPresent
decl_stmt|;
specifier|public
name|MemStoreSnapshot
parameter_list|(
name|long
name|id
parameter_list|,
name|ImmutableSegment
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|cellsCount
operator|=
name|snapshot
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataSize
operator|=
name|snapshot
operator|.
name|keySize
argument_list|()
expr_stmt|;
name|this
operator|.
name|heapSize
operator|=
name|snapshot
operator|.
name|heapSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|timeRangeTracker
operator|=
name|snapshot
operator|.
name|getTimeRangeTracker
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanners
operator|=
name|snapshot
operator|.
name|getScanners
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagsPresent
operator|=
name|snapshot
operator|.
name|isTagsPresent
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return snapshot's identifier.    */
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * @return Number of Cells in this snapshot.    */
specifier|public
name|int
name|getCellsCount
parameter_list|()
block|{
return|return
name|cellsCount
return|;
block|}
comment|/**    * @return Total memory size occupied by this snapshot.    */
specifier|public
name|long
name|getDataSize
parameter_list|()
block|{
return|return
name|dataSize
return|;
block|}
specifier|public
name|long
name|getHeapSize
parameter_list|()
block|{
return|return
name|heapSize
return|;
block|}
comment|/**    * @return {@link TimeRangeTracker} for all the Cells in the snapshot.    */
specifier|public
name|TimeRangeTracker
name|getTimeRangeTracker
parameter_list|()
block|{
return|return
name|timeRangeTracker
return|;
block|}
comment|/**    * @return {@link KeyValueScanner} for iterating over the snapshot    */
specifier|public
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|getScanners
parameter_list|()
block|{
return|return
name|scanners
return|;
block|}
comment|/**    * @return true if tags are present in this snapshot    */
specifier|public
name|boolean
name|isTagsPresent
parameter_list|()
block|{
return|return
name|this
operator|.
name|tagsPresent
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|scanners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

