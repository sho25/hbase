begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|compaction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * This request helps determine if a region has to be compacted based on table's TTL.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MajorCompactionTTLRequest
extends|extends
name|MajorCompactionRequest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MajorCompactionTTLRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|MajorCompactionTTLRequest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RegionInfo
name|region
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Optional
argument_list|<
name|MajorCompactionRequest
argument_list|>
name|newRequest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|MajorCompactionTTLRequest
name|request
init|=
operator|new
name|MajorCompactionTTLRequest
argument_list|(
name|conf
argument_list|,
name|info
argument_list|)
decl_stmt|;
return|return
name|request
operator|.
name|createRequest
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|private
name|Optional
argument_list|<
name|MajorCompactionRequest
argument_list|>
name|createRequest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|familiesToCompact
init|=
name|getStoresRequiringCompaction
argument_list|(
name|htd
argument_list|)
decl_stmt|;
name|MajorCompactionRequest
name|request
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|familiesToCompact
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction families for region: "
operator|+
name|region
operator|+
literal|" CF: "
operator|+
name|familiesToCompact
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|MajorCompactionTTLRequest
argument_list|(
name|conf
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|request
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getStoresRequiringCompaction
parameter_list|(
name|TableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|configuration
argument_list|)
init|)
block|{
name|HRegionFileSystem
name|fileSystem
init|=
name|getFileSystem
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|familyTTLMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|descriptor
range|:
name|htd
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|long
name|ts
init|=
name|getColFamilyCutoffTime
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
comment|// If the table's TTL is forever, lets not compact any of the regions.
if|if
condition|(
name|ts
operator|>
literal|0
operator|&&
name|shouldCFBeCompacted
argument_list|(
name|fileSystem
argument_list|,
name|descriptor
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|ts
argument_list|)
condition|)
block|{
name|familyTTLMap
operator|.
name|put
argument_list|(
name|descriptor
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|familyTTLMap
return|;
block|}
block|}
comment|// If the CF has no TTL, return -1, else return the current time - TTL.
specifier|private
name|long
name|getColFamilyCutoffTime
parameter_list|(
name|ColumnFamilyDescriptor
name|colDesc
parameter_list|)
block|{
if|if
condition|(
name|colDesc
operator|.
name|getTimeToLive
argument_list|()
operator|==
name|HConstants
operator|.
name|FOREVER
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
name|colDesc
operator|.
name|getTimeToLive
argument_list|()
operator|*
literal|1000L
operator|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldIncludeStore
parameter_list|(
name|HRegionFileSystem
name|fileSystem
parameter_list|,
name|String
name|family
parameter_list|,
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|storeFiles
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|StoreFileInfo
name|storeFile
range|:
name|storeFiles
control|)
block|{
comment|// Lets only compact when all files are older than TTL
if|if
condition|(
name|storeFile
operator|.
name|getModificationTime
argument_list|()
operator|>=
name|ts
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is atleast one file in store: "
operator|+
name|family
operator|+
literal|" file: "
operator|+
name|storeFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" with timestamp "
operator|+
name|storeFile
operator|.
name|getModificationTime
argument_list|()
operator|+
literal|" for region: "
operator|+
name|fileSystem
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" older than TTL: "
operator|+
name|ts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

