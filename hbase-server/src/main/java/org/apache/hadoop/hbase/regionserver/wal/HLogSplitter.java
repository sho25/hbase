begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionOpeningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|RegionStoreSequenceIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|StoreSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|LastSequenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This class is responsible for splitting up a bunch of regionserver commit log  * files that are no longer being written to, into new files, one per region for  * region to replay on startup. Delete the old log files when finished.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HLogSplitter
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HLogSplitter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Parameters for split process
specifier|protected
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Major subcomponents of the split process.
comment|// These are separated into inner classes to make testing easier.
name|OutputSink
name|outputSink
decl_stmt|;
name|EntryBuffers
name|entryBuffers
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|disablingOrDisabledTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
comment|// If an exception is thrown by one of the other threads, it will be
comment|// stored here.
specifier|protected
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
comment|// Wait/notify for when data has been produced by the reader thread,
comment|// consumed by the reader thread, or an exception occurred
specifier|final
name|Object
name|dataAvailable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|MonitoredTask
name|status
decl_stmt|;
comment|// For checking the latest flushed sequence id
specifier|protected
specifier|final
name|LastSequenceId
name|sequenceIdChecker
decl_stmt|;
specifier|protected
name|boolean
name|distributedLogReplay
decl_stmt|;
comment|// Map encodedRegionName -> lastFlushedSequenceId
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastFlushedSequenceIds
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map encodedRegionName -> maxSeqIdInStores
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
name|regionMaxSeqIdInStores
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Failed region server that the wal file being split belongs to
specifier|protected
name|String
name|failedServerName
init|=
literal|""
decl_stmt|;
comment|// Number of writer threads
specifier|private
specifier|final
name|int
name|numWriterThreads
decl_stmt|;
comment|// Min batch size when replay WAL edits
specifier|private
specifier|final
name|int
name|minBatchSize
decl_stmt|;
name|HLogSplitter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|ZooKeeperWatcher
name|zkw
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|sequenceIdChecker
operator|=
name|idChecker
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|zkw
expr_stmt|;
name|entryBuffers
operator|=
operator|new
name|EntryBuffers
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.buffersize"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|minBatchSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.wal.logreplay.batch.size"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributedLogReplay
operator|=
name|this
operator|.
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG
argument_list|)
expr_stmt|;
name|this
operator|.
name|numWriterThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.writer.threads"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkw
operator|!=
literal|null
operator|&&
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|outputSink
operator|=
operator|new
name|LogReplayOutputSink
argument_list|(
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ZooKeeperWatcher is passed in as NULL so disable distrubitedLogRepaly."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|distributedLogReplay
operator|=
literal|false
expr_stmt|;
name|outputSink
operator|=
operator|new
name|LogRecoveredEditsOutputSink
argument_list|(
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Splits a HLog file into region's recovered-edits directory.    * This is the main entry point for distributed log splitting from SplitLogWorker.    *<p>    * If the log file has N regions then N recovered.edits files will be produced.    *<p>    * @param rootDir    * @param logfile    * @param fs    * @param conf    * @param reporter    * @param idChecker    * @param zkw ZooKeeperWatcher if it's null, we will back to the old-style log splitting where we    *          dump out recoved.edits files for regions to replay on.    * @return false if it is interrupted by the progress-able.    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|splitLogFile
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|FileStatus
name|logfile
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|,
name|LastSequenceId
name|idChecker
parameter_list|,
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|IOException
block|{
name|HLogSplitter
name|s
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
name|idChecker
argument_list|,
name|zkw
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|// A wrapper to split one log folder using the method used by distributed
comment|// log splitting. Used by tools and unit tests. It should be package private.
comment|// It is public only because TestWALObserver is in a different package,
comment|// which uses this method to to log splitting.
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|split
parameter_list|(
name|Path
name|rootDir
parameter_list|,
name|Path
name|logDir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|logfiles
operator|!=
literal|null
operator|&&
name|logfiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FileStatus
name|logfile
range|:
name|logfiles
control|)
block|{
name|HLogSplitter
name|s
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|splitLogFile
argument_list|(
name|logfile
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|finishSplitLogFile
argument_list|(
name|rootDir
argument_list|,
name|oldLogDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|outputSink
operator|.
name|splits
operator|!=
literal|null
condition|)
block|{
name|splits
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|outputSink
operator|.
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete src dir: "
operator|+
name|logDir
argument_list|)
throw|;
block|}
return|return
name|splits
return|;
block|}
comment|// The real log splitter. It just splits one log file.
name|boolean
name|splitLogFile
parameter_list|(
name|FileStatus
name|logfile
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isCorrupted
init|=
literal|false
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|status
operator|==
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|skipErrors
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
name|HLog
operator|.
name|SPLIT_SKIP_ERRORS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.interval.loglines"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|Path
name|logPath
init|=
name|logfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|outputSinkStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
name|int
name|editsSkipped
init|=
literal|0
decl_stmt|;
try|try
block|{
name|status
operator|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Splitting log file "
operator|+
name|logfile
operator|.
name|getPath
argument_list|()
operator|+
literal|"into a temporary staging area."
argument_list|)
expr_stmt|;
name|long
name|logLength
init|=
name|logfile
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Splitting hlog: "
operator|+
name|logPath
operator|+
literal|", length="
operator|+
name|logLength
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DistributedLogReplay = "
operator|+
name|this
operator|.
name|distributedLogReplay
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Opening log file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Reader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|fs
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|,
name|skipErrors
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptedLogFileException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get reader, corrupted log file "
operator|+
name|logPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ZKSplitLog
operator|.
name|markCorrupted
argument_list|(
name|rootDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|isCorrupted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|markComplete
argument_list|(
literal|"Was nothing to split in log file"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing to split in log file "
operator|+
name|logPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|watcher
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|disablingOrDisabledTables
operator|=
name|ZKTable
operator|.
name|getDisabledOrDisablingTables
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get disabling/disabled tables"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|int
name|numOpenedFilesBeforeReporting
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.report.openedfiles"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|numOpenedFilesLastCheck
init|=
literal|0
decl_stmt|;
name|outputSink
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|outputSink
operator|.
name|startWriterThreads
argument_list|()
expr_stmt|;
name|outputSinkStarted
operator|=
literal|true
expr_stmt|;
name|Entry
name|entry
decl_stmt|;
name|Long
name|lastFlushedSequenceId
init|=
operator|-
literal|1L
decl_stmt|;
name|ServerName
name|serverName
init|=
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|logPath
argument_list|)
decl_stmt|;
name|failedServerName
operator|=
operator|(
name|serverName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|serverName
operator|.
name|getServerName
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|getNextLogLine
argument_list|(
name|in
argument_list|,
name|logPath
argument_list|,
name|skipErrors
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|lastFlushedSequenceId
operator|=
name|lastFlushedSequenceIds
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|distributedLogReplay
condition|)
block|{
name|RegionStoreSequenceIds
name|ids
init|=
name|SplitLogManager
operator|.
name|getRegionFlushedSequenceId
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|failedServerName
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
name|ids
operator|.
name|getLastFlushedSequenceId
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sequenceIdChecker
operator|!=
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
name|sequenceIdChecker
operator|.
name|getLastSequenceId
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|==
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lastFlushedSequenceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastFlushedSequenceId
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
condition|)
block|{
name|editsSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
name|entryBuffers
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
name|int
name|moreWritersFromLastCheck
init|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
operator|-
name|numOpenedFilesLastCheck
decl_stmt|;
comment|// If sufficient edits have passed, check if we should report progress.
if|if
condition|(
name|editsCount
operator|%
name|interval
operator|==
literal|0
operator|||
name|moreWritersFromLastCheck
operator|>
name|numOpenedFilesBeforeReporting
condition|)
block|{
name|numOpenedFilesLastCheck
operator|=
name|this
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
name|String
name|countsStr
init|=
operator|(
name|editsCount
operator|-
operator|(
name|editsSkipped
operator|+
name|outputSink
operator|.
name|getSkippedEdits
argument_list|()
operator|)
operator|)
operator|+
literal|" edits, skipped "
operator|+
name|editsSkipped
operator|+
literal|" edits."
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Split "
operator|+
name|countsStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|CorruptedLogFileException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse, corrupted log file "
operator|+
name|logPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ZKSplitLog
operator|.
name|markCorrupted
argument_list|(
name|rootDir
argument_list|,
name|logfile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|isCorrupted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing writing output logs and closing down."
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputSinkStarted
condition|)
block|{
name|progress_failed
operator|=
name|outputSink
operator|.
name|finishWritingAndClose
argument_list|()
operator|==
literal|null
expr_stmt|;
block|}
name|String
name|msg
init|=
literal|"Processed "
operator|+
name|editsCount
operator|+
literal|" edits across "
operator|+
name|outputSink
operator|.
name|getNumberOfRecoveredRegions
argument_list|()
operator|+
literal|" regions; log file="
operator|+
name|logPath
operator|+
literal|" is corrupted = "
operator|+
name|isCorrupted
operator|+
literal|" progress failed = "
operator|+
name|progress_failed
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|progress_failed
return|;
block|}
comment|/**    * Completes the work done by splitLogFile by archiving logs    *<p>    * It is invoked by SplitLogManager once it knows that one of the    * SplitLogWorkers have completed the splitLogFile() part. If the master    * crashes then this function might get called multiple times.    *<p>    * @param logfile    * @param conf    * @throws IOException    */
specifier|public
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|String
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|logPath
decl_stmt|;
if|if
condition|(
name|FSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|rootdir
argument_list|,
name|logfile
argument_list|)
condition|)
block|{
name|logPath
operator|=
operator|new
name|Path
argument_list|(
name|logfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logPath
operator|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|logfile
argument_list|)
expr_stmt|;
block|}
name|finishSplitLogFile
argument_list|(
name|rootdir
argument_list|,
name|oldLogDir
argument_list|,
name|logPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|finishSplitLogFile
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|Path
name|oldLogDir
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|fs
operator|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZKSplitLog
operator|.
name|isCorrupted
argument_list|(
name|rootdir
argument_list|,
name|logPath
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
argument_list|)
condition|)
block|{
name|corruptedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processedLogs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
name|archiveLogs
argument_list|(
name|corruptedLogs
argument_list|,
name|processedLogs
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|stagingDir
init|=
name|ZKSplitLog
operator|.
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|logPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|stagingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Moves processed logs to a oldLogDir after successful processing Moves    * corrupted logs (any log that couldn't be successfully parsed to corruptDir    * (.corrupt) for later investigation    *    * @param corruptedLogs    * @param processedLogs    * @param oldLogDir    * @param fs    * @param conf    * @throws IOException    */
specifier|private
specifier|static
name|void
name|archiveLogs
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|corruptedLogs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|processedLogs
parameter_list|,
specifier|final
name|Path
name|oldLogDir
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|corruptDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to mkdir "
operator|+
name|corruptDir
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|oldLogDir
argument_list|)
expr_stmt|;
comment|// this method can get restarted or called multiple times for archiving
comment|// the same log files.
for|for
control|(
name|Path
name|corrupted
range|:
name|corruptedLogs
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|corruptDir
argument_list|,
name|corrupted
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|corrupted
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|corrupted
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Moved corrupted log "
operator|+
name|corrupted
operator|+
literal|" to "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Path
name|p
range|:
name|processedLogs
control|)
block|{
name|Path
name|newPath
init|=
name|FSHLog
operator|.
name|getHLogArchivePath
argument_list|(
name|oldLogDir
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|renameAndSetModifyTime
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|newPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move  "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archived processed log "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Path to a file under RECOVERED_EDITS_DIR directory of the region found in    *<code>logEntry</code> named for the sequenceid in the passed    *<code>logEntry</code>: e.g. /hbase/some_table/2323432434/recovered.edits/2332.    * This method also ensures existence of RECOVERED_EDITS_DIR under the region    * creating it if necessary.    * @param fs    * @param logEntry    * @param rootDir HBase root dir.    * @return Path to file into which to dump split log edits.    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|Path
name|getRegionSplitEditsPath
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Entry
name|logEntry
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
name|boolean
name|isCreate
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regiondir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tableDir
argument_list|,
name|encodedRegionName
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regiondir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This region's directory doesn't exist: "
operator|+
name|regiondir
operator|.
name|toString
argument_list|()
operator|+
literal|". It is very likely that it was"
operator|+
literal|" already split so it's safe to discard those edits."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
operator|&&
name|fs
operator|.
name|isFile
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
operator|+
literal|"_"
operator|+
name|encodedRegionName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old file: "
operator|+
name|dir
operator|+
literal|". It could be some "
operator|+
literal|"leftover of an old installation. It should be a folder instead. "
operator|+
literal|"So moving it to "
operator|+
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|dir
argument_list|,
name|tmp
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to sideline old file "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isCreate
operator|&&
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdir failed on "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// Append file name ends with RECOVERED_LOG_TMPFILE_SUFFIX to ensure
comment|// region's replayRecoveredEdits will not delete it
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|logEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|getTmpRecoveredEditsFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|static
name|String
name|getTmpRecoveredEditsFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|fileName
operator|+
name|HLog
operator|.
name|RECOVERED_LOG_TMPFILE_SUFFIX
return|;
block|}
comment|/**    * Get the completed recovered edits file path, renaming it to be by last edit    * in the file from its first edit. Then we could use the name to skip    * recovered edits when doing {@link HRegion#replayRecoveredEditsIfAny}.    * @param srcPath    * @param maximumEditLogSeqNum    * @return dstPath take file's last edit log seq num as the name    */
specifier|static
name|Path
name|getCompletedRecoveredEditsFilePath
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Long
name|maximumEditLogSeqNum
parameter_list|)
block|{
name|String
name|fileName
init|=
name|formatRecoveredEditsFileName
argument_list|(
name|maximumEditLogSeqNum
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|srcPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|static
name|String
name|formatRecoveredEditsFileName
parameter_list|(
specifier|final
name|long
name|seqid
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|seqid
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    *    * @param fs    * @param file    * @param conf    * @return A new Reader instance    * @throws IOException    * @throws CorruptedLogFileException    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|file
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|skipErrors
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|CorruptedLogFileException
block|{
name|Path
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|file
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Reader
name|in
decl_stmt|;
comment|// Check for possibly empty file. With appends, currently Hadoop reports a
comment|// zero length even if the file has been sync'd. Revisit if HDFS-376 or
comment|// HDFS-878 is committed.
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" might be still open, length is 0"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
operator|.
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|=
name|getReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
comment|// TODO should we ignore an empty, not-last log file if skip.errors
comment|// is false? Either way, the caller should decide what to do. E.g.
comment|// ignore if this is the last log in sequence.
comment|// TODO is this scenario still possible if the log has been
comment|// recovered (i.e. closed)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open "
operator|+
name|path
operator|+
literal|" for reading. File is empty"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// EOFException being ignored
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
comment|// A wal file may not exist anymore. Nothing can be recovered so move on
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" doesn't exist anymore."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
operator|||
name|e
operator|instanceof
name|InterruptedIOException
condition|)
block|{
throw|throw
name|e
throw|;
comment|// Don't mark the file corrupted if interrupted, or not skipErrors
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Could not open hlog "
operator|+
name|path
operator|+
literal|" ignoring"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
return|return
name|in
return|;
block|}
specifier|static
specifier|private
name|Entry
name|getNextLogLine
parameter_list|(
name|Reader
name|in
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|skipErrors
parameter_list|)
throws|throws
name|CorruptedLogFileException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// truncated files are expected if a RS crashes (see HBASE-2643)
name|LOG
operator|.
name|info
argument_list|(
literal|"EOF from hlog "
operator|+
name|path
operator|+
literal|".  continuing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the IOE resulted from bad file format,
comment|// then this problem is idempotent and retrying won't help
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ParseException
operator|||
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parse exception "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" from hlog "
operator|+
name|path
operator|+
literal|".  continuing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|skipErrors
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|CorruptedLogFileException
name|t
init|=
operator|new
name|CorruptedLogFileException
argument_list|(
literal|"skipErrors=true Ignoring exception"
operator|+
literal|" while parsing hlog "
operator|+
name|path
operator|+
literal|". Marking as corrupted"
argument_list|)
decl_stmt|;
name|t
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
specifier|private
name|void
name|writerThreadError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for errors in the writer threads. If any is found, rethrow it.    */
specifier|private
name|void
name|checkForErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|thrown
init|=
name|this
operator|.
name|thrown
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|thrown
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a new {@link Writer} for writing log splits.    */
specifier|protected
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link Reader} for reading logs to split.    */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|curLogFile
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|curLogFile
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|/**    * Get current open writers    * @return    */
specifier|private
name|int
name|getNumOpenWriters
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|outputSink
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
name|this
operator|.
name|outputSink
operator|.
name|getNumOpenWriters
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Class which accumulates edits and separates them into a buffer per region    * while simultaneously accounting RAM usage. Blocks if the RAM usage crosses    * a predefined threshold.    *    * Writer threads then pull region-specific buffers from this class.    */
class|class
name|EntryBuffers
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/* Track which regions are currently in the middle of writing. We don't allow        an IO thread to pick up bytes from a region if we're already writing        data for that region in a different IO thread. */
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|currentlyWriting
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|long
name|totalBuffered
init|=
literal|0
decl_stmt|;
name|long
name|maxHeapUsage
decl_stmt|;
name|EntryBuffers
parameter_list|(
name|long
name|maxHeapUsage
parameter_list|)
block|{
name|this
operator|.
name|maxHeapUsage
operator|=
name|maxHeapUsage
expr_stmt|;
block|}
comment|/**      * Append a log entry into the corresponding region buffer.      * Blocks if the total heap usage has crossed the specified threshold.      *      * @throws InterruptedException      * @throws IOException      */
name|void
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RegionEntryBuffer
name|buffer
decl_stmt|;
name|long
name|incrHeap
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|buffer
operator|=
name|buffers
operator|.
name|get
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|RegionEntryBuffer
argument_list|(
name|key
operator|.
name|getTablename
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|put
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|incrHeap
operator|=
name|buffer
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// If we crossed the chunk threshold, wait for more space to be available
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|+=
name|incrHeap
expr_stmt|;
while|while
condition|(
name|totalBuffered
operator|>
name|maxHeapUsage
operator|&&
name|thrown
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Used "
operator|+
name|totalBuffered
operator|+
literal|" bytes of buffered edits, waiting for IO threads..."
argument_list|)
expr_stmt|;
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return RegionEntryBuffer a buffer of edits to be written or replayed.      */
specifier|synchronized
name|RegionEntryBuffer
name|getChunkToWrite
parameter_list|()
block|{
name|long
name|biggestSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|biggestBufferKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|entry
range|:
name|buffers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|size
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|biggestSize
operator|&&
operator|(
operator|!
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|biggestSize
operator|=
name|size
expr_stmt|;
name|biggestBufferKey
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|biggestBufferKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RegionEntryBuffer
name|buffer
init|=
name|buffers
operator|.
name|remove
argument_list|(
name|biggestBufferKey
argument_list|)
decl_stmt|;
name|currentlyWriting
operator|.
name|add
argument_list|(
name|biggestBufferKey
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
name|void
name|doneWriting
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|removed
init|=
name|currentlyWriting
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
assert|assert
name|removed
assert|;
block|}
name|long
name|size
init|=
name|buffer
operator|.
name|heapSize
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|-=
name|size
expr_stmt|;
comment|// We may unblock writers
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|boolean
name|isRegionCurrentlyWriting
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
return|return
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|region
argument_list|)
return|;
block|}
block|}
comment|/**    * A buffer of some number of edits for a given region.    * This accumulates edits and also provides a memory optimization in order to    * share a single byte array instance for the table and region name.    * Also tracks memory usage of the accumulated edits.    */
specifier|static
class|class
name|RegionEntryBuffer
implements|implements
name|HeapSize
block|{
name|long
name|heapInBuffer
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entryBuffer
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
name|RegionEntryBuffer
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|entryBuffer
operator|=
operator|new
name|LinkedList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|long
name|appendEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|internify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryBuffer
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|long
name|incrHeap
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
operator|+
comment|// HLogKey pointers
literal|0
decl_stmt|;
comment|// TODO linkedlist entry
name|heapInBuffer
operator|+=
name|incrHeap
expr_stmt|;
return|return
name|incrHeap
return|;
block|}
specifier|private
name|void
name|internify
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|HLogKey
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|k
operator|.
name|internTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|k
operator|.
name|internEncodedRegionName
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|heapInBuffer
return|;
block|}
block|}
class|class
name|WriterThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
specifier|private
name|OutputSink
name|outputSink
init|=
literal|null
decl_stmt|;
name|WriterThread
parameter_list|(
name|OutputSink
name|sink
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
literal|"WriterThread-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|outputSink
operator|=
name|sink
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doRun
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting thread"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|writerThreadError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRun
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writer thread "
operator|+
name|this
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|RegionEntryBuffer
name|buffer
init|=
name|entryBuffers
operator|.
name|getChunkToWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// No data currently available, wait on some more to show up
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
if|if
condition|(
name|shouldStop
operator|&&
operator|!
name|this
operator|.
name|outputSink
operator|.
name|flush
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldStop
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
continue|continue;
block|}
assert|assert
name|buffer
operator|!=
literal|null
assert|;
try|try
block|{
name|writeBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|entryBuffers
operator|.
name|doneWriting
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeBuffer
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|outputSink
operator|.
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|void
name|finish
parameter_list|()
block|{
synchronized|synchronized
init|(
name|dataAvailable
init|)
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The following class is an abstraction class to provide a common interface to support both    * existing recovered edits file sink and region server WAL edits replay sink    */
specifier|abstract
class|class
name|OutputSink
block|{
specifier|protected
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|SinkWriter
argument_list|>
name|writers
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|SinkWriter
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|regionMaximumEditLogSeqNum
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|WriterThread
argument_list|>
name|writerThreads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/* Set of regions which we've decided should not output edits */
specifier|protected
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|blacklistedRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|closeAndCleanCompleted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|writersClosed
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numThreads
decl_stmt|;
specifier|protected
name|CancelableProgressable
name|reporter
init|=
literal|null
decl_stmt|;
specifier|protected
name|AtomicLong
name|skippedEdits
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
specifier|public
name|OutputSink
parameter_list|(
name|int
name|numWriters
parameter_list|)
block|{
name|numThreads
operator|=
name|numWriters
expr_stmt|;
block|}
name|void
name|setReporter
parameter_list|(
name|CancelableProgressable
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * Start the threads that will pump data from the entryBuffers to the output files.      */
specifier|synchronized
name|void
name|startWriterThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|WriterThread
name|t
init|=
operator|new
name|WriterThread
argument_list|(
name|this
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|writerThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      * Update region's maximum edit log SeqNum.      */
name|void
name|updateRegionMaximumEditLogSeqNum
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionMaximumEditLogSeqNum
init|)
block|{
name|Long
name|currentMaxSeqNum
init|=
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMaxSeqNum
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
operator|>
name|currentMaxSeqNum
condition|)
block|{
name|regionMaximumEditLogSeqNum
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
name|getRegionMaximumEditLogSeqNum
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
return|return
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|region
argument_list|)
return|;
block|}
comment|/**      * @return the number of currently opened writers      */
name|int
name|getNumOpenWriters
parameter_list|()
block|{
return|return
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
name|long
name|getSkippedEdits
parameter_list|()
block|{
return|return
name|this
operator|.
name|skippedEdits
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Wait for writer threads to dump all info to the sink      * @return true when there is no error      * @throws IOException      */
specifier|protected
name|boolean
name|finishWriting
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for split writer threads to finish"
argument_list|)
expr_stmt|;
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
name|t
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
name|checkForErrors
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Split writers finished"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|!
name|progress_failed
operator|)
return|;
block|}
specifier|abstract
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * @return a map from encoded region ID to the number of edits written out for that region.      */
specifier|abstract
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
function_decl|;
comment|/**      * @return number of regions we've recovered      */
specifier|abstract
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
function_decl|;
comment|/**      * @param entry A WAL Edit Entry      * @throws IOException      */
specifier|abstract
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * WriterThread call this function to help flush internal remaining edits in buffer before close      * @return true when underlying sink has something to flush      */
specifier|protected
name|boolean
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Class that manages the output streams from the log splitting process.    */
class|class
name|LogRecoveredEditsOutputSink
extends|extends
name|OutputSink
block|{
specifier|public
name|LogRecoveredEditsOutputSink
parameter_list|(
name|int
name|numWriters
parameter_list|)
block|{
comment|// More threads could potentially write faster at the expense
comment|// of causing more disk seeks as the logs are split.
comment|// 3. After a certain setting (probably around 3) the
comment|// process will be bound on the reader in the current
comment|// implementation anyway.
name|super
argument_list|(
name|numWriters
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return null if failed to report progress      * @throws IOException      */
annotation|@
name|Override
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isSuccessful
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|isSuccessful
operator|=
name|finishWriting
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|result
operator|=
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|closeLogWriters
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|thrown
operator|!=
literal|null
operator|&&
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isSuccessful
condition|)
block|{
name|splits
operator|=
name|result
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|/**      * Close all of the output streams.      * @return the list of paths written.      */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|closeAndCleanCompleted
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|closeThreadPool
init|=
name|Threads
operator|.
name|getBoundedCachedThreadPool
argument_list|(
name|numThreads
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"split-log-closeStream-"
operator|+
name|count
operator|++
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Void
argument_list|>
argument_list|(
name|closeThreadPool
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|SinkWriter
argument_list|>
name|writersEntry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting close of "
operator|+
operator|(
operator|(
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|p
argument_list|)
expr_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|WriterAndPath
name|wap
init|=
operator|(
name|WriterAndPath
operator|)
name|writersEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing "
operator|+
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close log at "
operator|+
name|wap
operator|.
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed wap "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wap
operator|.
name|editsWritten
operator|==
literal|0
condition|)
block|{
comment|// just remove the empty recovered.edits file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|p
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|wap
operator|.
name|p
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting empty "
operator|+
name|wap
operator|.
name|p
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting empty  "
operator|+
name|wap
operator|.
name|p
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
name|Path
name|dst
init|=
name|getCompletedRecoveredEditsFilePath
argument_list|(
name|wap
operator|.
name|p
argument_list|,
name|regionMaximumEditLogSeqNum
operator|.
name|get
argument_list|(
name|writersEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|equals
argument_list|(
name|wap
operator|.
name|p
argument_list|)
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found existing old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|dst
operator|+
literal|", length="
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed deleting of old "
operator|+
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of old "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
comment|// Skip the unit tests which create a splitter that reads and
comment|// writes the data without touching disk.
comment|// TestHLogSplit#testThreading is an example.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|wap
operator|.
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|wap
operator|.
name|p
argument_list|,
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed renaming "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rename "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't rename "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" to "
operator|+
name|dst
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|paths
operator|.
name|add
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|progress_failed
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|progress_failed
operator|&&
name|reporter
operator|!=
literal|null
operator|&&
operator|!
name|reporter
operator|.
name|progress
argument_list|()
condition|)
block|{
name|progress_failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
name|closeAndCleanCompleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|progress_failed
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
name|List
argument_list|<
name|IOException
argument_list|>
name|closeLogWriters
parameter_list|(
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writersClosed
condition|)
block|{
return|return
name|thrown
return|;
block|}
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
block|{
name|thrown
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|t
operator|.
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|writers
init|)
block|{
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SinkWriter
name|tmpWAP
range|:
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|wap
operator|=
operator|(
name|WriterAndPath
operator|)
name|tmpWAP
expr_stmt|;
name|wap
operator|.
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close log at "
operator|+
name|wap
operator|.
name|p
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed log "
operator|+
name|wap
operator|.
name|p
operator|+
literal|" (wrote "
operator|+
name|wap
operator|.
name|editsWritten
operator|+
literal|" edits in "
operator|+
operator|(
name|wap
operator|.
name|nanosSpent
operator|/
literal|1000
operator|/
literal|1000
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|thrown
return|;
block|}
comment|/**      * Get a writer and path for a log starting at the given entry. This function is threadsafe so      * long as multiple threads are always acting on different regions.      * @return null if this region shouldn't output any logs      */
specifier|private
name|WriterAndPath
name|getWriterAndPath
parameter_list|(
name|Entry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|region
index|[]
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
decl_stmt|;
name|WriterAndPath
name|ret
init|=
operator|(
name|WriterAndPath
operator|)
name|writers
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// If we already decided that this region doesn't get any output
comment|// we don't need to check again.
if|if
condition|(
name|blacklistedRegions
operator|.
name|contains
argument_list|(
name|region
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ret
operator|=
name|createWAP
argument_list|(
name|region
argument_list|,
name|entry
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|blacklistedRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|writers
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|WriterAndPath
name|createWAP
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|Entry
name|entry
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|regionedits
init|=
name|getRegionSplitEditsPath
argument_list|(
name|fs
argument_list|,
name|entry
argument_list|,
name|rootdir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionedits
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|regionedits
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found old edits file. It could be the "
operator|+
literal|"result of a previous failed split attempt. Deleting "
operator|+
name|regionedits
operator|+
literal|", length="
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|regionedits
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|regionedits
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of old "
operator|+
name|regionedits
argument_list|)
expr_stmt|;
block|}
block|}
name|Writer
name|w
init|=
name|createWriter
argument_list|(
name|fs
argument_list|,
name|regionedits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating writer path="
operator|+
name|regionedits
operator|+
literal|" region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|new
name|WriterAndPath
argument_list|(
name|regionedits
argument_list|,
name|w
argument_list|)
operator|)
return|;
block|}
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
name|WriterAndPath
name|wap
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|editsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
name|logEntry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
name|wap
operator|=
name|getWriterAndPath
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|wap
operator|==
literal|null
condition|)
block|{
comment|// getWriterAndPath decided we don't need to write these edits
return|return;
block|}
block|}
name|wap
operator|.
name|w
operator|.
name|append
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateRegionMaximumEditLogSeqNum
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
name|editsCount
operator|++
expr_stmt|;
block|}
comment|// Pass along summary statistics
name|wap
operator|.
name|incrementEdits
argument_list|(
name|editsCount
argument_list|)
expr_stmt|;
name|wap
operator|.
name|incrementNanoTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|" Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * @return a map from encoded region ID to the number of edits written out for that region.      */
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writers
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|SinkWriter
argument_list|>
name|entry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**    * Class wraps the actual writer which writes data out and related statistics    */
specifier|private
specifier|abstract
specifier|static
class|class
name|SinkWriter
block|{
comment|/* Count of edits written to this path */
name|long
name|editsWritten
init|=
literal|0
decl_stmt|;
comment|/* Number of nanos spent writing to this log */
name|long
name|nanosSpent
init|=
literal|0
decl_stmt|;
name|void
name|incrementEdits
parameter_list|(
name|int
name|edits
parameter_list|)
block|{
name|editsWritten
operator|+=
name|edits
expr_stmt|;
block|}
name|void
name|incrementNanoTime
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|nanosSpent
operator|+=
name|nanos
expr_stmt|;
block|}
block|}
comment|/**    * Private data structure that wraps a Writer and its Path, also collecting statistics about the    * data written to this output.    */
specifier|private
specifier|final
specifier|static
class|class
name|WriterAndPath
extends|extends
name|SinkWriter
block|{
specifier|final
name|Path
name|p
decl_stmt|;
specifier|final
name|Writer
name|w
decl_stmt|;
name|WriterAndPath
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Writer
name|w
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
block|}
block|}
comment|/**    * Class that manages to replay edits from WAL files directly to assigned fail over region servers    */
class|class
name|LogReplayOutputSink
extends|extends
name|OutputSink
block|{
specifier|private
specifier|static
specifier|final
name|double
name|BUFFER_THRESHOLD
init|=
literal|0.35
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DELIMITER
init|=
literal|"#"
decl_stmt|;
specifier|private
name|long
name|waitRegionOnlineTimeOut
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|recoveredRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RegionServerWriter
argument_list|>
name|writers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RegionServerWriter
argument_list|>
argument_list|()
decl_stmt|;
comment|// online encoded region name -> region location map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HRegionLocation
argument_list|>
name|onlineRegions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HConnection
argument_list|>
name|tableNameToHConnectionMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HConnection
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Map key -> value layout      *<servername>:<table name> -> Queue<Row>      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
argument_list|>
name|serverToBufferQueueMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
comment|// The following sink is used in distrubitedLogReplay mode for entries of regions in a disabling
comment|// table. It's a limitation of distributedLogReplay. Because log replay needs a region is
comment|// assigned and online before it can replay wal edits while regions of disabling/disabled table
comment|// won't be assigned by AM. We can retire this code after HBASE-8234.
specifier|private
name|LogRecoveredEditsOutputSink
name|logRecoveredEditsOutputSink
decl_stmt|;
specifier|private
name|boolean
name|hasEditsInDisablingOrDisabledTables
init|=
literal|false
decl_stmt|;
specifier|public
name|LogReplayOutputSink
parameter_list|(
name|int
name|numWriters
parameter_list|)
block|{
name|super
argument_list|(
name|numWriters
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitRegionOnlineTimeOut
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.splitlog.manager.timeout"
argument_list|,
name|SplitLogManager
operator|.
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|logRecoveredEditsOutputSink
operator|=
operator|new
name|LogRecoveredEditsOutputSink
argument_list|(
name|numWriters
argument_list|)
expr_stmt|;
name|this
operator|.
name|logRecoveredEditsOutputSink
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
name|buffer
operator|.
name|entryBuffer
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got an empty buffer, skipping"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// check if current region in a disabling or disabled table
if|if
condition|(
name|disablingOrDisabledTables
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
comment|// need fall back to old way
name|logRecoveredEditsOutputSink
operator|.
name|append
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|hasEditsInDisablingOrDisabledTables
operator|=
literal|true
expr_stmt|;
comment|// store regions we have recovered so far
name|addToRecoveredRegions
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// group entries by region servers
name|groupEditsByServer
argument_list|(
name|entries
argument_list|)
expr_stmt|;
comment|// process workitems
name|String
name|maxLocKey
init|=
literal|null
decl_stmt|;
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|maxQueue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|serverToBufferQueueMap
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|curQueue
init|=
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|curQueue
operator|.
name|size
argument_list|()
operator|>
name|maxSize
condition|)
block|{
name|maxSize
operator|=
name|curQueue
operator|.
name|size
argument_list|()
expr_stmt|;
name|maxQueue
operator|=
name|curQueue
expr_stmt|;
name|maxLocKey
operator|=
name|key
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxSize
operator|<
name|minBatchSize
operator|&&
name|entryBuffers
operator|.
name|totalBuffered
operator|<
name|BUFFER_THRESHOLD
operator|*
name|entryBuffers
operator|.
name|maxHeapUsage
condition|)
block|{
comment|// buffer more to process
return|return;
block|}
elseif|else
if|if
condition|(
name|maxSize
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|remove
argument_list|(
name|maxLocKey
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxSize
operator|>
literal|0
condition|)
block|{
name|processWorkItems
argument_list|(
name|maxLocKey
argument_list|,
name|maxQueue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addToRecoveredRegions
parameter_list|(
name|String
name|encodedRegionName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|recoveredRegions
operator|.
name|contains
argument_list|(
name|encodedRegionName
argument_list|)
condition|)
block|{
name|recoveredRegions
operator|.
name|add
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Helper function to group WALEntries to individual region servers      * @throws IOException      */
specifier|private
name|void
name|groupEditsByServer
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|nonExistentTables
init|=
literal|null
decl_stmt|;
name|Long
name|cachedLastFlushedSequenceId
init|=
operator|-
literal|1l
decl_stmt|;
for|for
control|(
name|HLog
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|byte
index|[]
name|table
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
decl_stmt|;
name|String
name|encodeRegionNameStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// skip edits of non-existent tables
if|if
condition|(
name|nonExistentTables
operator|!=
literal|null
operator|&&
name|nonExistentTables
operator|.
name|contains
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|this
operator|.
name|skippedEdits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxStoreSequenceIds
init|=
literal|null
decl_stmt|;
name|boolean
name|needSkip
init|=
literal|false
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|Delete
name|del
init|=
literal|null
decl_stmt|;
name|KeyValue
name|lastKV
init|=
literal|null
decl_stmt|;
name|HRegionLocation
name|loc
init|=
literal|null
decl_stmt|;
name|Row
name|preRow
init|=
literal|null
decl_stmt|;
name|HRegionLocation
name|preLoc
init|=
literal|null
decl_stmt|;
name|Row
name|lastAddedRow
init|=
literal|null
decl_stmt|;
comment|// it is not really needed here just be conservative
name|String
name|preKey
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|edit
operator|.
name|getKeyValues
argument_list|()
decl_stmt|;
name|HConnection
name|hconn
init|=
name|this
operator|.
name|getConnectionByTableName
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
comment|// filtering HLog meta entries
comment|// We don't handle HBASE-2231 because we may or may not replay a compaction event.
comment|// Details at https://issues.apache.org/jira/browse/HBASE-2231?focusedCommentId=13647143&
comment|// page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13647143
if|if
condition|(
name|kv
operator|.
name|matchingFamily
argument_list|(
name|WALEdit
operator|.
name|METAFAMILY
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|lastKV
operator|==
literal|null
operator|||
name|lastKV
operator|.
name|getType
argument_list|()
operator|!=
name|kv
operator|.
name|getType
argument_list|()
operator|||
operator|!
name|lastKV
operator|.
name|matchingRow
argument_list|(
name|kv
argument_list|)
condition|)
block|{
if|if
condition|(
name|preRow
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|serverToBufferQueueMap
init|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|queue
init|=
name|serverToBufferQueueMap
operator|.
name|get
argument_list|(
name|preKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|serverToBufferQueueMap
operator|.
name|put
argument_list|(
name|preKey
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|(
name|preLoc
argument_list|,
name|preRow
argument_list|)
argument_list|)
expr_stmt|;
name|lastAddedRow
operator|=
name|preRow
expr_stmt|;
block|}
comment|// store regions we have recovered so far
name|addToRecoveredRegions
argument_list|(
name|preLoc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|loc
operator|=
name|locateRegionAndRefreshLastFlushedSequenceId
argument_list|(
name|hconn
argument_list|,
name|table
argument_list|,
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|encodeRegionNameStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// table has been deleted so skip edits of the table
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
operator|+
literal|" doesn't exist. Skip log replay for region "
operator|+
name|encodeRegionNameStr
argument_list|)
expr_stmt|;
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|encodeRegionNameStr
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonExistentTables
operator|==
literal|null
condition|)
block|{
name|nonExistentTables
operator|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
block|}
name|nonExistentTables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|skippedEdits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|needSkip
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|cachedLastFlushedSequenceId
operator|=
name|lastFlushedSequenceIds
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedLastFlushedSequenceId
operator|!=
literal|null
operator|&&
name|cachedLastFlushedSequenceId
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
condition|)
block|{
comment|// skip the whole HLog entry
name|this
operator|.
name|skippedEdits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|needSkip
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|maxStoreSequenceIds
operator|==
literal|null
condition|)
block|{
name|maxStoreSequenceIds
operator|=
name|regionMaxSeqIdInStores
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxStoreSequenceIds
operator|!=
literal|null
condition|)
block|{
name|Long
name|maxStoreSeqId
init|=
name|maxStoreSequenceIds
operator|.
name|get
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStoreSeqId
operator|==
literal|null
operator|||
name|maxStoreSeqId
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLogSeqNum
argument_list|()
condition|)
block|{
comment|// skip current kv if column family doesn't exist anymore or already flushed
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|del
operator|=
operator|new
name|Delete
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setClusterId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|preRow
operator|=
name|del
expr_stmt|;
block|}
else|else
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setClusterId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|preRow
operator|=
name|put
expr_stmt|;
block|}
name|preKey
operator|=
name|loc
operator|.
name|getHostnamePort
argument_list|()
operator|+
name|KEY_DELIMITER
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|preLoc
operator|=
name|loc
expr_stmt|;
block|}
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|del
operator|.
name|addDeleteMarker
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|lastKV
operator|=
name|kv
expr_stmt|;
block|}
comment|// skip the edit
if|if
condition|(
name|needSkip
condition|)
continue|continue;
comment|// add the last row
if|if
condition|(
name|preRow
operator|!=
literal|null
operator|&&
name|lastAddedRow
operator|!=
name|preRow
condition|)
block|{
synchronized|synchronized
init|(
name|serverToBufferQueueMap
init|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|queue
init|=
name|serverToBufferQueueMap
operator|.
name|get
argument_list|(
name|preKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|serverToBufferQueueMap
operator|.
name|put
argument_list|(
name|preKey
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|(
name|preLoc
argument_list|,
name|preRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// store regions we have recovered so far
name|addToRecoveredRegions
argument_list|(
name|preLoc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Locate destination region based on table name& row. This function also makes sure the      * destination region is online for replay.      * @throws IOException      */
specifier|private
name|HRegionLocation
name|locateRegionAndRefreshLastFlushedSequenceId
parameter_list|(
name|HConnection
name|hconn
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|String
name|originalEncodedRegionName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// fetch location from cache
name|HRegionLocation
name|loc
init|=
name|onlineRegions
operator|.
name|get
argument_list|(
name|originalEncodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
return|return
name|loc
return|;
comment|// fetch location from .META. directly without using cache to avoid hit old dead server
name|loc
operator|=
name|hconn
operator|.
name|getRegionLocation
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't locate location for row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|" of table:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|)
throw|;
block|}
comment|// check if current row moves to a different region due to region merge/split
if|if
condition|(
operator|!
name|originalEncodedRegionName
operator|.
name|equalsIgnoreCase
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
comment|// originalEncodedRegionName should have already flushed
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|originalEncodedRegionName
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|HRegionLocation
name|tmpLoc
init|=
name|onlineRegions
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpLoc
operator|!=
literal|null
condition|)
return|return
name|tmpLoc
return|;
block|}
name|Long
name|lastFlushedSequenceId
init|=
operator|-
literal|1l
decl_stmt|;
name|loc
operator|=
name|waitUntilRegionOnline
argument_list|(
name|loc
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|waitRegionOnlineTimeOut
argument_list|)
expr_stmt|;
name|Long
name|cachedLastFlushedSequenceId
init|=
name|lastFlushedSequenceIds
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// retrieve last flushed sequence Id from ZK. Because region postOpenDeployTasks will
comment|// update the value for the region
name|RegionStoreSequenceIds
name|ids
init|=
name|SplitLogManager
operator|.
name|getRegionFlushedSequenceId
argument_list|(
name|watcher
argument_list|,
name|failedServerName
argument_list|,
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
name|lastFlushedSequenceId
operator|=
name|ids
operator|.
name|getLastFlushedSequenceId
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|storeIds
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreSequenceId
argument_list|>
name|maxSeqIdInStores
init|=
name|ids
operator|.
name|getStoreSequenceIdList
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreSequenceId
name|id
range|:
name|maxSeqIdInStores
control|)
block|{
name|storeIds
operator|.
name|put
argument_list|(
name|id
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|id
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionMaxSeqIdInStores
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|storeIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedLastFlushedSequenceId
operator|==
literal|null
operator|||
name|lastFlushedSequenceId
operator|>
name|cachedLastFlushedSequenceId
condition|)
block|{
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|lastFlushedSequenceId
argument_list|)
expr_stmt|;
block|}
comment|// check if the region to be recovered is marked as recovering in ZK
try|try
block|{
if|if
condition|(
name|SplitLogManager
operator|.
name|isRegionMarkedRecoveringInZK
argument_list|(
name|watcher
argument_list|,
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// region isn't in recovering at all because WAL file may contain a region that has
comment|// been moved to somewhere before hosting RS fails
name|lastFlushedSequenceIds
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"logReplay skip region: "
operator|+
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" because it's not in recovering."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to retrieve recovering state of region "
operator|+
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|onlineRegions
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|loc
argument_list|)
expr_stmt|;
return|return
name|loc
return|;
block|}
specifier|private
name|void
name|processWorkItems
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionServerWriter
name|rsw
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|rsw
operator|=
name|getRegionServerWriter
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|rsw
operator|.
name|sink
operator|.
name|replayEntries
argument_list|(
name|actions
argument_list|)
expr_stmt|;
comment|// Pass along summary statistics
name|rsw
operator|.
name|incrementEdits
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsw
operator|.
name|incrementNanoTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|" Got while writing log entry to log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Wait until region is online on the destination region server      * @param loc      * @param row      * @param timeout How long to wait      * @return True when region is online on the destination region server      * @throws InterruptedException      */
specifier|private
name|HRegionLocation
name|waitUntilRegionOnline
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|endTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
specifier|final
name|long
name|pause
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
decl_stmt|;
name|boolean
name|reloadLocation
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|Throwable
name|cause
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|endTime
operator|>
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Try and get regioninfo from the hosting server.
name|HConnection
name|hconn
init|=
name|getConnectionByTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reloadLocation
condition|)
block|{
name|loc
operator|=
name|hconn
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|BlockingInterface
name|remoteSvr
init|=
name|hconn
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|region
operator|=
name|ProtobufUtil
operator|.
name|getRegionInfo
argument_list|(
name|remoteSvr
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|loc
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|cause
operator|instanceof
name|RegionOpeningException
operator|)
condition|)
block|{
name|reloadLocation
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|long
name|expectedSleep
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|expectedSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted when waiting regon "
operator|+
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" online."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|tries
operator|++
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeout when waiting region "
operator|+
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" online for "
operator|+
name|timeout
operator|+
literal|" milliseconds."
argument_list|,
name|cause
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|curLoc
init|=
literal|null
decl_stmt|;
name|int
name|curSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionLocation
argument_list|,
name|Row
argument_list|>
argument_list|>
name|curQueue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|serverToBufferQueueMap
init|)
block|{
for|for
control|(
name|String
name|locationKey
range|:
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|curQueue
operator|=
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|get
argument_list|(
name|locationKey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|curQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|curSize
operator|=
name|curQueue
operator|.
name|size
argument_list|()
expr_stmt|;
name|curLoc
operator|=
name|locationKey
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|curSize
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|serverToBufferQueueMap
operator|.
name|remove
argument_list|(
name|curLoc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curSize
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|processWorkItems
argument_list|(
name|curLoc
argument_list|,
name|curQueue
argument_list|)
expr_stmt|;
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|void
name|addWriterError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|List
argument_list|<
name|Path
argument_list|>
name|finishWritingAndClose
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|finishWriting
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|hasEditsInDisablingOrDisabledTables
condition|)
block|{
name|splits
operator|=
name|logRecoveredEditsOutputSink
operator|.
name|finishWritingAndClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|splits
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// returns an empty array in order to keep interface same as old way
return|return
name|splits
return|;
block|}
finally|finally
block|{
name|List
argument_list|<
name|IOException
argument_list|>
name|thrown
init|=
name|closeRegionServerWriters
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|!=
literal|null
operator|&&
operator|!
name|thrown
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
name|int
name|getNumOpenWriters
parameter_list|()
block|{
return|return
name|this
operator|.
name|writers
operator|.
name|size
argument_list|()
operator|+
name|this
operator|.
name|logRecoveredEditsOutputSink
operator|.
name|getNumOpenWriters
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|IOException
argument_list|>
name|closeRegionServerWriters
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IOException
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|writersClosed
condition|)
block|{
name|result
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|WriterThread
name|t
range|:
name|writerThreads
control|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|t
operator|.
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|writers
init|)
block|{
for|for
control|(
name|String
name|locationKey
range|:
name|writers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|RegionServerWriter
name|tmpW
init|=
name|writers
operator|.
name|get
argument_list|(
name|locationKey
argument_list|)
decl_stmt|;
try|try
block|{
name|tmpW
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close writer for region server:"
operator|+
name|locationKey
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// close connections
synchronized|synchronized
init|(
name|this
operator|.
name|tableNameToHConnectionMap
init|)
block|{
for|for
control|(
name|byte
index|[]
name|tableName
range|:
name|this
operator|.
name|tableNameToHConnectionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|HConnection
name|hconn
init|=
name|this
operator|.
name|tableNameToHConnectionMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|hconn
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|hconn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writersClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getOutputCounts
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writers
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionServerWriter
argument_list|>
name|entry
range|:
name|writers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|editsWritten
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|int
name|getNumberOfRecoveredRegions
parameter_list|()
block|{
return|return
name|this
operator|.
name|recoveredRegions
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Get a writer and path for a log starting at the given entry. This function is threadsafe so      * long as multiple threads are always acting on different regions.      * @return null if this region shouldn't output any logs      */
specifier|private
name|RegionServerWriter
name|getRegionServerWriter
parameter_list|(
name|String
name|loc
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionServerWriter
name|ret
init|=
name|writers
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|String
name|tableName
init|=
name|getTableFromLocationStr
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid location string:"
operator|+
name|loc
operator|+
literal|" found."
argument_list|)
expr_stmt|;
block|}
name|HConnection
name|hconn
init|=
name|getConnectionByTableName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writers
init|)
block|{
name|ret
operator|=
name|writers
operator|.
name|get
argument_list|(
name|loc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|RegionServerWriter
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|hconn
argument_list|)
expr_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|HConnection
name|getConnectionByTableName
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HConnection
name|hconn
init|=
name|this
operator|.
name|tableNameToHConnectionMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|hconn
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|tableNameToHConnectionMap
init|)
block|{
name|hconn
operator|=
name|this
operator|.
name|tableNameToHConnectionMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hconn
operator|==
literal|null
condition|)
block|{
name|hconn
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameToHConnectionMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|hconn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|hconn
return|;
block|}
specifier|private
name|String
name|getTableFromLocationStr
parameter_list|(
name|String
name|loc
parameter_list|)
block|{
comment|/**        * location key is in format<server name:port>#<table name>        */
name|String
index|[]
name|splits
init|=
name|loc
operator|.
name|split
argument_list|(
name|KEY_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|splits
index|[
literal|1
index|]
return|;
block|}
block|}
comment|/**    * Private data structure that wraps a receiving RS and collecting statistics about the data    * written to this newly assigned RS.    */
specifier|private
specifier|final
specifier|static
class|class
name|RegionServerWriter
extends|extends
name|SinkWriter
block|{
specifier|final
name|WALEditsReplaySink
name|sink
decl_stmt|;
name|RegionServerWriter
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|HConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|sink
operator|=
operator|new
name|WALEditsReplaySink
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
specifier|static
class|class
name|CorruptedLogFileException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|CorruptedLogFileException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

