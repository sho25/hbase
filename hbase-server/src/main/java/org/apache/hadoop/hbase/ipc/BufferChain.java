begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|GatheringByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Chain of ByteBuffers.  * Used writing out an array of byte buffers.  Writes in chunks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BufferChain
block|{
specifier|private
specifier|final
name|ByteBuffer
index|[]
name|buffers
decl_stmt|;
specifier|private
name|int
name|remaining
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|bufferOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
name|BufferChain
parameter_list|(
name|ByteBuffer
modifier|...
name|buffers
parameter_list|)
block|{
for|for
control|(
name|ByteBuffer
name|b
range|:
name|buffers
control|)
block|{
name|this
operator|.
name|remaining
operator|+=
name|b
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
name|remaining
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
comment|/**    * Expensive.  Makes a new buffer to hold a copy of what is in contained ByteBuffers.  This    * call drains this instance; it cannot be used subsequent to the call.    * @return A new byte buffer with the content of all contained ByteBuffers.    */
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalAccessError
argument_list|()
throw|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|this
operator|.
name|remaining
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|bb
range|:
name|this
operator|.
name|buffers
control|)
block|{
name|int
name|length
init|=
name|bb
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|bb
operator|.
name|get
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|remaining
operator|>
literal|0
return|;
block|}
comment|/**    * Write out our chain of buffers in chunks    * @param channel Where to write    * @param chunkSize Size of chunks to write.    * @return Amount written.    * @throws IOException    */
name|long
name|write
parameter_list|(
name|GatheringByteChannel
name|channel
parameter_list|,
name|int
name|chunkSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|chunkRemaining
init|=
name|chunkSize
decl_stmt|;
name|ByteBuffer
name|lastBuffer
init|=
literal|null
decl_stmt|;
name|int
name|bufCount
init|=
literal|0
decl_stmt|;
name|int
name|restoreLimit
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|chunkRemaining
operator|>
literal|0
operator|&&
name|bufferOffset
operator|+
name|bufCount
operator|<
name|buffers
operator|.
name|length
condition|)
block|{
name|lastBuffer
operator|=
name|buffers
index|[
name|bufferOffset
operator|+
name|bufCount
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|lastBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|bufferOffset
operator|++
expr_stmt|;
continue|continue;
block|}
name|bufCount
operator|++
expr_stmt|;
if|if
condition|(
name|lastBuffer
operator|.
name|remaining
argument_list|()
operator|>
name|chunkRemaining
condition|)
block|{
name|restoreLimit
operator|=
name|lastBuffer
operator|.
name|limit
argument_list|()
expr_stmt|;
name|lastBuffer
operator|.
name|limit
argument_list|(
name|lastBuffer
operator|.
name|position
argument_list|()
operator|+
name|chunkRemaining
argument_list|)
expr_stmt|;
name|chunkRemaining
operator|=
literal|0
expr_stmt|;
break|break;
block|}
else|else
block|{
name|chunkRemaining
operator|-=
name|lastBuffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|lastBuffer
operator|!=
literal|null
assert|;
if|if
condition|(
name|chunkRemaining
operator|==
name|chunkSize
condition|)
block|{
assert|assert
operator|!
name|hasRemaining
argument_list|()
assert|;
comment|// no data left to write
return|return
literal|0
return|;
block|}
try|try
block|{
name|long
name|ret
init|=
name|channel
operator|.
name|write
argument_list|(
name|buffers
argument_list|,
name|bufferOffset
argument_list|,
name|bufCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
block|{
name|remaining
operator|-=
name|ret
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|restoreLimit
operator|>=
literal|0
condition|)
block|{
name|lastBuffer
operator|.
name|limit
argument_list|(
name|restoreLimit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
name|ByteBuffer
index|[]
name|getBuffers
parameter_list|()
block|{
return|return
name|this
operator|.
name|buffers
return|;
block|}
block|}
end_class

end_unit

