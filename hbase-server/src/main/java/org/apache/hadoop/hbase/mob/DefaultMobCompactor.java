begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HMobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|DefaultCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Compact passed set of files in the mob-enabled column family.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultMobCompactor
extends|extends
name|DefaultCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultMobCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|mobSizeThreshold
decl_stmt|;
specifier|private
name|HMobStore
name|mobStore
decl_stmt|;
specifier|public
name|DefaultMobCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
comment|// The mob cells reside in the mob-enabled column family which is held by HMobStore.
comment|// During the compaction, the compactor reads the cells from the mob files and
comment|// probably creates new mob files. All of these operations are included in HMobStore,
comment|// so we need to cast the Store to HMobStore.
if|if
condition|(
operator|!
operator|(
name|store
operator|instanceof
name|HMobStore
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The store "
operator|+
name|store
operator|+
literal|" is not a HMobStore"
argument_list|)
throw|;
block|}
name|mobStore
operator|=
operator|(
name|HMobStore
operator|)
name|store
expr_stmt|;
name|mobSizeThreshold
operator|=
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getMobThreshold
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a writer for a new file in a temporary directory.    * @param fd The file details.    * @param smallestReadPoint The smallest mvcc readPoint across all the scanners in this region.    * @return Writer for a new StoreFile in the tmp dir.    * @throws IOException    */
annotation|@
name|Override
specifier|protected
name|Writer
name|createTmpWriter
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make this writer with tags always because of possible new cells with tags.
name|StoreFile
operator|.
name|Writer
name|writer
init|=
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|this
operator|.
name|compactionCompression
argument_list|,
literal|true
argument_list|,
name|fd
operator|.
name|maxMVCCReadpoint
operator|>=
name|smallestReadPoint
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|writer
return|;
block|}
comment|/**    * Performs compaction on a column family with the mob flag enabled.    * This is for when the mob threshold size has changed or if the mob    * column family mode has been toggled via an alter table statement.    * Compacts the files by the following rules.    * 1. If the cell has a mob reference tag, the cell's value is the path of the mob file.    *<ol>    *<li>    * If the value size of a cell is larger than the threshold, this cell is regarded as a mob,    * directly copy the (with mob tag) cell into the new store file.    *</li>    *<li>    * Otherwise, retrieve the mob cell from the mob file, and writes a copy of the cell into    * the new store file.    *</li>    *</ol>    * 2. If the cell doesn't have a reference tag.    *<ol>    *<li>    * If the value size of a cell is larger than the threshold, this cell is regarded as a mob,    * write this cell to a mob file, and write the path of this mob file to the store file.    *</li>    *<li>    * Otherwise, directly write this cell into the store file.    *</li>    *</ol>    * @param fd File details    * @param scanner Where to read from.    * @param writer Where to write to.    * @param smallestReadPoint Smallest read point.    * @param cleanSeqId When true, remove seqId(used to be mvcc) value which is<= smallestReadPoint    * @param major Is a major compaction.    * @return Whether compaction ended; false if it was interrupted for any reason.    */
annotation|@
name|Override
specifier|protected
name|boolean
name|performCompaction
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|CellSink
name|writer
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|boolean
name|cleanSeqId
parameter_list|,
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
comment|// Since scanner.next() can return 'false' but still be delivering data,
comment|// we have to use a do/while loop.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|// Limit to "hbase.hstore.compaction.kv.max" (default 10) to avoid OOME
name|int
name|closeCheckInterval
init|=
name|HStore
operator|.
name|getCloseCheckInterval
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
name|Path
name|path
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileName
init|=
literal|null
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|mobFileWriter
init|=
literal|null
decl_stmt|;
name|long
name|mobCells
init|=
literal|0
decl_stmt|;
name|Tag
name|tableNameTag
init|=
operator|new
name|Tag
argument_list|(
name|TagType
operator|.
name|MOB_TABLE_NAME_TAG_TYPE
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|mobCompactedIntoMobCellsCount
init|=
literal|0
decl_stmt|;
name|long
name|mobCompactedFromMobCellsCount
init|=
literal|0
decl_stmt|;
name|long
name|mobCompactedIntoMobCellsSize
init|=
literal|0
decl_stmt|;
name|long
name|mobCompactedFromMobCellsSize
init|=
literal|0
decl_stmt|;
try|try
block|{
try|try
block|{
comment|// If the mob file writer could not be created, directly write the cell to the store file.
name|mobFileWriter
operator|=
name|mobStore
operator|.
name|createWriterInTmp
argument_list|(
operator|new
name|Date
argument_list|(
name|fd
operator|.
name|latestPutTs
argument_list|)
argument_list|,
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getCompression
argument_list|()
argument_list|,
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to create mob writer, "
operator|+
literal|"we will continue the compaction by writing MOB cells directly in store files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|compactionKVMax
argument_list|)
expr_stmt|;
comment|// output to writer:
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
comment|// TODO remove the KeyValueUtil.ensureKeyValue before merging back to trunk.
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|resetSeqId
argument_list|(
name|smallestReadPoint
argument_list|,
name|cleanSeqId
argument_list|,
name|kv
argument_list|)
expr_stmt|;
if|if
condition|(
name|mobFileWriter
operator|==
literal|null
operator|||
name|kv
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
block|{
comment|// If the mob file writer is null or the kv type is not put, directly write the cell
comment|// to the store file.
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|kv
argument_list|)
condition|)
block|{
if|if
condition|(
name|MobUtils
operator|.
name|hasValidMobRefCellValue
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|int
name|size
init|=
name|MobUtils
operator|.
name|getMobValueLength
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|mobSizeThreshold
condition|)
block|{
comment|// If the value size is larger than the threshold, it's regarded as a mob. Since
comment|// its value is already in the mob file, directly write this cell to the store file
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not larger than the threshold, it's not regarded a mob. Retrieve
comment|// the mob cell from the mob file, and write it back to the store file.
name|Cell
name|cell
init|=
name|mobStore
operator|.
name|resolve
argument_list|(
name|kv
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getValueLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// put the mob data back to the store file
name|KeyValue
name|mobKv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|mobKv
operator|.
name|setSequenceId
argument_list|(
name|kv
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|mobKv
argument_list|)
expr_stmt|;
name|mobCompactedFromMobCellsCount
operator|++
expr_stmt|;
name|mobCompactedFromMobCellsSize
operator|+=
name|cell
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If the value of a file is empty, there might be issues when retrieving,
comment|// directly write the cell to the store file, and leave it to be handled by the
comment|// next compaction.
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The value format of the KeyValue "
operator|+
name|kv
operator|+
literal|" is wrong, its length is less than "
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|kv
operator|.
name|getValueLength
argument_list|()
operator|<=
name|mobSizeThreshold
condition|)
block|{
comment|// If the value size of a cell is not larger than the threshold, directly write it to
comment|// the store file.
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value size of a cell is larger than the threshold, it's regarded as a mob,
comment|// write this cell to a mob file, and write the path to the store file.
name|mobCells
operator|++
expr_stmt|;
comment|// append the original keyValue in the mob file.
name|mobFileWriter
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|KeyValue
name|reference
init|=
name|MobUtils
operator|.
name|createMobRefKeyValue
argument_list|(
name|kv
argument_list|,
name|fileName
argument_list|,
name|tableNameTag
argument_list|)
decl_stmt|;
comment|// write the cell whose value is the path of a mob file to the store file.
name|writer
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|mobCompactedIntoMobCellsCount
operator|++
expr_stmt|;
name|mobCompactedIntoMobCellsSize
operator|+=
name|kv
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
operator|++
name|progress
operator|.
name|currentCompactedKVs
expr_stmt|;
comment|// check periodically to see if a system stop is requested
if|if
condition|(
name|closeCheckInterval
operator|>
literal|0
condition|)
block|{
name|bytesWritten
operator|+=
name|kv
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesWritten
operator|>
name|closeCheckInterval
condition|)
block|{
name|bytesWritten
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|areWritesEnabled
argument_list|()
condition|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
block|}
finally|finally
block|{
if|if
condition|(
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
name|appendMetadataAndCloseWriter
argument_list|(
name|mobFileWriter
argument_list|,
name|fd
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mobCells
operator|>
literal|0
condition|)
block|{
comment|// If the mob file is not empty, commit it.
name|mobStore
operator|.
name|commitFile
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// If the mob file is empty, delete it instead of committing.
name|store
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to delete the temp mob file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mobStore
operator|.
name|updateMobCompactedFromMobCellsCount
argument_list|(
name|mobCompactedFromMobCellsCount
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateMobCompactedIntoMobCellsCount
argument_list|(
name|mobCompactedIntoMobCellsCount
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateMobCompactedFromMobCellsSize
argument_list|(
name|mobCompactedFromMobCellsSize
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateMobCompactedIntoMobCellsSize
argument_list|(
name|mobCompactedIntoMobCellsSize
argument_list|)
expr_stmt|;
name|progress
operator|.
name|complete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

