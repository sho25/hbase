begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|FilterInitializer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ServerConfigurationKeys
operator|.
name|HBASE_HTTP_STATIC_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ServerConfigurationKeys
operator|.
name|DEFAULT_HBASE_HTTP_STATIC_USER
import|;
end_import

begin_comment
comment|/**  * Provides a servlet filter that pretends to authenticate a fake user (Dr.Who)  * so that the web UI is usable for a secure cluster without authentication.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|StaticUserWebFilter
extends|extends
name|FilterInitializer
block|{
specifier|static
specifier|final
name|String
name|DEPRECATED_UGI_KEY
init|=
literal|"dfs.web.ugi"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StaticUserWebFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|User
implements|implements
name|Principal
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|public
name|User
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|User
operator|)
name|other
operator|)
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
specifier|static
class|class
name|StaticUserFilter
implements|implements
name|Filter
block|{
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|// NOTHING
block|}
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
comment|// if the user is already authenticated, don't override it
if|if
condition|(
name|httpRequest
operator|.
name|getRemoteUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HttpServletRequestWrapper
name|wrapper
init|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|httpRequest
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
name|username
return|;
block|}
block|}
decl_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|wrapper
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|conf
parameter_list|)
throws|throws
name|ServletException
block|{
name|this
operator|.
name|username
operator|=
name|conf
operator|.
name|getInitParameter
argument_list|(
name|HBASE_HTTP_STATIC_USER
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
operator|new
name|User
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initFilter
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|getUsernameFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
name|HBASE_HTTP_STATIC_USER
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|container
operator|.
name|addFilter
argument_list|(
literal|"static_user_filter"
argument_list|,
name|StaticUserFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve the static username from the configuration.    */
specifier|static
name|String
name|getUsernameFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|oldStyleUgi
init|=
name|conf
operator|.
name|get
argument_list|(
name|DEPRECATED_UGI_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStyleUgi
operator|!=
literal|null
condition|)
block|{
comment|// We can't use the normal configuration deprecation mechanism here
comment|// since we need to split out the username from the configured UGI.
name|LOG
operator|.
name|warn
argument_list|(
name|DEPRECATED_UGI_KEY
operator|+
literal|" should not be used. Instead, use "
operator|+
name|HBASE_HTTP_STATIC_USER
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|oldStyleUgi
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|parts
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|HBASE_HTTP_STATIC_USER
argument_list|,
name|DEFAULT_HBASE_HTTP_STATIC_USER
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

