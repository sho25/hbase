begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * LossyCounting utility, bounded data structure that maintains approximate high frequency  * elements in data stream.  *  * Bucket size is 1 / error rate.  (Error rate is 0.02 by default)  * Lemma If element
comment|does not appear in set, then is frequency is less than e * N  *       (N is total element counts until now.)  * Based on paper:  * http://www.vldb.org/conf/2002/S10P03.pdf  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LossyCounting
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LossyCounting
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
name|long
name|bucketSize
decl_stmt|;
specifier|private
name|int
name|currentTerm
decl_stmt|;
specifier|private
name|double
name|errorRate
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|data
decl_stmt|;
specifier|private
name|long
name|totalDataCount
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|LossyCountingListener
name|listener
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|Future
argument_list|>
name|fut
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|LossyCountingListener
parameter_list|<
name|T
parameter_list|>
block|{
name|void
name|sweep
parameter_list|(
name|T
name|key
parameter_list|)
function_decl|;
block|}
specifier|public
name|LossyCounting
parameter_list|(
name|double
name|errorRate
parameter_list|,
name|String
name|name
parameter_list|,
name|LossyCountingListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|errorRate
operator|=
name|errorRate
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|errorRate
argument_list|<
literal|0.0
operator|||
name|errorRate
argument_list|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|" Lossy Counting error rate should be within range [0,1]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|bucketSize
operator|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1
operator|/
name|errorRate
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentTerm
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|totalDataCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|data
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|calculateCurrentTerm
argument_list|()
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"lossy-count-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LossyCounting
parameter_list|(
name|String
name|name
parameter_list|,
name|LossyCountingListener
name|listener
parameter_list|)
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
operator|.
name|getDouble
argument_list|(
name|HConstants
operator|.
name|DEFAULT_LOSSY_COUNTING_ERROR_RATE
argument_list|,
literal|0.02
argument_list|)
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addByOne
parameter_list|(
name|T
name|key
parameter_list|)
block|{
comment|//If entry exists, we update the entry by incrementing its frequency by one. Otherwise,
comment|//we create a new entry starting with currentTerm so that it will not be pruned immediately
name|data
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|data
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|currentTerm
operator|!=
literal|0
condition|?
name|currentTerm
operator|-
literal|1
else|:
literal|0
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//update totalDataCount and term
name|totalDataCount
operator|++
expr_stmt|;
name|calculateCurrentTerm
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|addByOne
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalDataCount
operator|%
name|bucketSize
operator|==
literal|0
condition|)
block|{
comment|//sweep the entries at bucket boundaries
comment|//run Sweep
name|Future
name|future
init|=
name|fut
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
operator|&&
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return;
block|}
name|future
operator|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|SweepRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|fut
operator|.
name|set
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * sweep low frequency data    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|sweep
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|data
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|<
name|currentTerm
condition|)
block|{
name|T
name|metric
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|data
operator|.
name|remove
argument_list|(
name|metric
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|sweep
argument_list|(
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Calculate and set current term    */
specifier|private
name|void
name|calculateCurrentTerm
parameter_list|()
block|{
name|this
operator|.
name|currentTerm
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.0
operator|*
name|totalDataCount
operator|/
operator|(
name|double
operator|)
name|bucketSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getBucketSize
parameter_list|()
block|{
return|return
name|bucketSize
return|;
block|}
specifier|public
name|long
name|getDataSize
parameter_list|()
block|{
return|return
name|data
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
name|data
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|T
argument_list|>
name|getElements
parameter_list|()
block|{
return|return
name|data
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|long
name|getCurrentTerm
parameter_list|()
block|{
return|return
name|currentTerm
return|;
block|}
class|class
name|SweepRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Starting sweep of lossyCounting-"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sweep
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while sweeping of lossyCounting-{}"
argument_list|,
name|name
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Future
name|getSweepFuture
parameter_list|()
block|{
return|return
name|fut
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

