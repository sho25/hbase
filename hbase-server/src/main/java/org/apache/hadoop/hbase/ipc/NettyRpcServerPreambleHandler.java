begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Handle connection preamble.  * @since 2.0.0`  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|NettyRpcServerPreambleHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|ByteBuf
argument_list|>
block|{
specifier|private
specifier|final
name|NettyRpcServer
name|rpcServer
decl_stmt|;
specifier|public
name|NettyRpcServerPreambleHandler
parameter_list|(
name|NettyRpcServer
name|rpcServer
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|rpcServer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|NettyServerRpcConnection
name|conn
init|=
name|createNettyServerRpcConnection
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|msg
operator|.
name|readableBytes
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|conn
operator|.
name|processPreamble
argument_list|(
name|buf
argument_list|)
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|ChannelPipeline
name|p
init|=
name|ctx
operator|.
name|pipeline
argument_list|()
decl_stmt|;
operator|(
operator|(
name|NettyRpcFrameDecoder
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"frameDecoder"
argument_list|)
operator|)
operator|.
name|setConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NettyRpcServerRequestDecoder
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"decoder"
argument_list|)
operator|)
operator|.
name|setConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|p
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|p
operator|.
name|remove
argument_list|(
literal|"preambleDecoder"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|NettyServerRpcConnection
name|createNettyServerRpcConnection
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
operator|new
name|NettyServerRpcConnection
argument_list|(
name|rpcServer
argument_list|,
name|channel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

