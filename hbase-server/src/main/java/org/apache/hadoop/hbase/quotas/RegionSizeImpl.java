begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An object encapsulating a Region's size and whether it's been reported to the master since  * the value last changed.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionSizeImpl
implements|implements
name|RegionSize
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionSizeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|HEAP_SIZE
init|=
name|ClassSize
operator|.
name|OBJECT
operator|+
name|ClassSize
operator|.
name|ATOMIC_LONG
operator|+
name|ClassSize
operator|.
name|REFERENCE
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|size
decl_stmt|;
specifier|public
name|RegionSizeImpl
parameter_list|(
name|long
name|initialSize
parameter_list|)
block|{
comment|// A region can never be negative in size. We can prevent this from being a larger problem, but
comment|// we will need to leave ourselves a note to figure out how we got here.
if|if
condition|(
name|initialSize
operator|<
literal|0L
operator|&&
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Nonsensical negative Region size being constructed, this is likely an error"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
operator|new
name|AtomicLong
argument_list|(
name|initialSize
operator|<
literal|0L
condition|?
literal|0L
else|:
name|initialSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|HEAP_SIZE
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionSizeImpl
name|setSize
parameter_list|(
name|long
name|newSize
parameter_list|)
block|{
comment|// Set the new size before advertising that we need to tell the master about it. Worst case
comment|// we have to wait for the next period to report it.
name|size
operator|.
name|set
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionSizeImpl
name|incrementSize
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
name|size
operator|.
name|addAndGet
argument_list|(
name|delta
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

