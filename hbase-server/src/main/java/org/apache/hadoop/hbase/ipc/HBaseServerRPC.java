begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A simple RPC mechanism.  *  * This is a local hbase copy of the hadoop RPC so we can do things like  * address HADOOP-414 for hbase-only and try other hbase-specific  * optimizations.  Class has been renamed to avoid confusing it w/ hadoop  * versions.  *<p>  *  *  * A<i>protocol</i> is a Java interface.  All parameters and return types must  * be Protobuf objects.  * All methods in the protocol should throw only IOException.  No field data of  * the protocol instance is transmitted.  *  * This class provides the server side implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBaseServerRPC
block|{
comment|// Leave this out in the hadoop ipc package but keep class name.  Do this
comment|// so that we dont' get the logging of this class's invocations by doing our
comment|// blanket enabling DEBUG on the o.a.h.h. package.
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.ipc.HBaseServerRPC"
argument_list|)
decl_stmt|;
comment|// cache of RpcEngines by protocol
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|RpcServerEngine
argument_list|>
name|PROTOCOL_ENGINES
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|RpcServerEngine
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Configuration key for the {@link org.apache.hadoop.hbase.ipc.RpcServerEngine} implementation to    * load to handle connection protocols.  Handlers for individual protocols can be    * configured using {@code "hbase.rpc.server.engine." + protocol.class.name}.    */
specifier|public
specifier|static
specifier|final
name|String
name|RPC_ENGINE_PROP
init|=
literal|"hbase.rpc.server.engine"
decl_stmt|;
comment|// track what RpcEngine is used by a proxy class, for stopProxy()
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|RpcServerEngine
argument_list|>
name|PROXY_ENGINES
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|RpcServerEngine
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HBaseServerRPC
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|// no public ctor
comment|// set a protocol to use a non-default RpcEngine
specifier|static
name|void
name|setProtocolEngine
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
name|protocol
parameter_list|,
name|Class
name|engine
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|RPC_ENGINE_PROP
operator|+
literal|"."
operator|+
name|protocol
operator|.
name|getName
argument_list|()
argument_list|,
name|engine
argument_list|,
name|RpcServerEngine
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// return the RpcEngine configured to handle a protocol
specifier|static
specifier|synchronized
name|RpcServerEngine
name|getProtocolEngine
parameter_list|(
name|Class
name|protocol
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|RpcServerEngine
name|engine
init|=
name|PROTOCOL_ENGINES
operator|.
name|get
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
comment|// check for a configured default engine
name|Class
argument_list|<
name|?
argument_list|>
name|defaultEngine
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|RPC_ENGINE_PROP
argument_list|,
name|ProtobufRpcServerEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// check for a per interface override
name|Class
argument_list|<
name|?
argument_list|>
name|impl
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|RPC_ENGINE_PROP
operator|+
literal|"."
operator|+
name|protocol
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultEngine
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using "
operator|+
name|impl
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|protocol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
operator|(
name|RpcServerEngine
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|impl
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocol
operator|.
name|isInterface
argument_list|()
condition|)
name|PROXY_ENGINES
operator|.
name|put
argument_list|(
name|Proxy
operator|.
name|getProxyClass
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|protocol
argument_list|)
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|PROTOCOL_ENGINES
operator|.
name|put
argument_list|(
name|protocol
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
comment|// return the RpcEngine that handles a proxy object
specifier|private
specifier|static
specifier|synchronized
name|RpcServerEngine
name|getProxyEngine
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
return|return
name|PROXY_ENGINES
operator|.
name|get
argument_list|(
name|proxy
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Construct a server for a protocol implementation instance listening on a    * port and address.    *    * @param instance    instance    * @param bindAddress bind address    * @param port        port to bind to    * @param numHandlers number of handlers to start    * @param verbose     verbose flag    * @param conf        configuration    * @return Server    * @throws IOException e    */
specifier|public
specifier|static
name|RpcServer
name|getServer
parameter_list|(
specifier|final
name|Object
name|instance
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|ifaces
parameter_list|,
specifier|final
name|String
name|bindAddress
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|int
name|numHandlers
parameter_list|,
name|int
name|metaHandlerCount
parameter_list|,
specifier|final
name|boolean
name|verbose
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|highPriorityLevel
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getServer
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|instance
argument_list|,
name|ifaces
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
name|numHandlers
argument_list|,
name|metaHandlerCount
argument_list|,
name|verbose
argument_list|,
name|conf
argument_list|,
name|highPriorityLevel
argument_list|)
return|;
block|}
comment|/**    * Construct a server for a protocol implementation instance.    */
specifier|public
specifier|static
name|RpcServer
name|getServer
parameter_list|(
name|Class
name|protocol
parameter_list|,
specifier|final
name|Object
name|instance
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|ifaces
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
specifier|final
name|int
name|numHandlers
parameter_list|,
name|int
name|metaHandlerCount
parameter_list|,
specifier|final
name|boolean
name|verbose
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|highPriorityLevel
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProtocolEngine
argument_list|(
name|protocol
argument_list|,
name|conf
argument_list|)
operator|.
name|getServer
argument_list|(
name|protocol
argument_list|,
name|instance
argument_list|,
name|ifaces
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
name|numHandlers
argument_list|,
name|metaHandlerCount
argument_list|,
name|verbose
argument_list|,
name|conf
argument_list|,
name|highPriorityLevel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

