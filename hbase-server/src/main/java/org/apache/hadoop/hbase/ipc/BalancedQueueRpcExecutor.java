begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * An {@link RpcExecutor} that will balance requests evenly across all its queues, but still remains  * efficient with a single queue via an inlinable queue balancing mechanism. Defaults to FIFO but  * you can pass an alternate queue class to use.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HBaseInterfaceAudience
operator|.
name|COPROC
block|,
name|HBaseInterfaceAudience
operator|.
name|PHOENIX
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|BalancedQueueRpcExecutor
extends|extends
name|RpcExecutor
block|{
specifier|private
specifier|final
name|QueueBalancer
name|balancer
decl_stmt|;
specifier|public
name|BalancedQueueRpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|handlerCount
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CALL_QUEUE_TYPE_CONF_KEY
argument_list|,
name|CALL_QUEUE_TYPE_CONF_DEFAULT
argument_list|)
argument_list|,
name|maxQueueLength
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BalancedQueueRpcExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|String
name|callQueueType
parameter_list|,
specifier|final
name|int
name|maxQueueLength
parameter_list|,
specifier|final
name|PriorityFunction
name|priority
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|handlerCount
argument_list|,
name|callQueueType
argument_list|,
name|maxQueueLength
argument_list|,
name|priority
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|balancer
operator|=
name|getBalancer
argument_list|(
name|this
operator|.
name|numCallQueues
argument_list|)
expr_stmt|;
name|initializeQueues
argument_list|(
name|this
operator|.
name|numCallQueues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dispatch
parameter_list|(
specifier|final
name|CallRunner
name|callTask
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|queueIndex
init|=
name|balancer
operator|.
name|getNextQueue
argument_list|()
decl_stmt|;
name|BlockingQueue
argument_list|<
name|CallRunner
argument_list|>
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|queueIndex
argument_list|)
decl_stmt|;
comment|// that means we can overflow by at most<num reader> size (5), that's ok
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|currentQueueLimit
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|queue
operator|.
name|offer
argument_list|(
name|callTask
argument_list|)
return|;
block|}
block|}
end_class

end_unit

