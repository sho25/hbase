begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|LRUDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HBaseInterfaceAudience
operator|.
name|COPROC
block|,
name|HBaseInterfaceAudience
operator|.
name|PHOENIX
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|ReaderBase
implements|implements
name|AbstractFSWALProvider
operator|.
name|Reader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReaderBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
name|Path
name|path
decl_stmt|;
specifier|protected
name|long
name|edit
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|fileLength
decl_stmt|;
comment|/**    * Compression context to use reading.  Can be null if no compression.    */
specifier|protected
name|CompressionContext
name|compressionContext
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|emptyCompressionContext
init|=
literal|true
decl_stmt|;
comment|/**    * Default constructor.    */
specifier|public
name|ReaderBase
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FSDataInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|fileLength
operator|=
name|this
operator|.
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|String
name|cellCodecClsName
init|=
name|initReader
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|boolean
name|compression
init|=
name|hasCompression
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
comment|// If compression is enabled, new dictionaries are created here.
try|try
block|{
if|if
condition|(
name|compressionContext
operator|==
literal|null
condition|)
block|{
name|compressionContext
operator|=
operator|new
name|CompressionContext
argument_list|(
name|LRUDictionary
operator|.
name|class
argument_list|,
name|FSUtils
operator|.
name|isRecoveredEdits
argument_list|(
name|path
argument_list|)
argument_list|,
name|hasTagCompression
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compressionContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize CompressionContext"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|initAfterCompression
argument_list|(
name|cellCodecClsName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|next
parameter_list|(
name|Entry
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
name|e
init|=
name|reuse
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
operator|new
name|Entry
argument_list|(
operator|new
name|WALKey
argument_list|()
argument_list|,
operator|new
name|WALEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compressionContext
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setCompressionContext
argument_list|(
name|compressionContext
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasEntry
init|=
literal|false
decl_stmt|;
try|try
block|{
name|hasEntry
operator|=
name|readNext
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|TableName
name|tableName
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableName
operator|!=
literal|null
operator|&&
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|OLD_ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// It is old ROOT table edit, ignore it
name|LOG
operator|.
name|info
argument_list|(
literal|"Got an old ROOT edit, ignoring "
argument_list|)
expr_stmt|;
return|return
name|next
argument_list|(
name|e
argument_list|)
return|;
block|}
else|else
throw|throw
name|iae
throw|;
block|}
name|edit
operator|++
expr_stmt|;
if|if
condition|(
name|compressionContext
operator|!=
literal|null
operator|&&
name|emptyCompressionContext
condition|)
block|{
name|emptyCompressionContext
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|hasEntry
condition|?
name|e
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|compressionContext
operator|!=
literal|null
operator|&&
name|emptyCompressionContext
condition|)
block|{
while|while
condition|(
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getPosition
argument_list|()
operator|==
name|pos
condition|)
block|{
name|emptyCompressionContext
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|seekOnFs
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the log reader with a particular stream (may be null).    * Reader assumes ownership of the stream if not null and may use it. Called once.    * @return the class name of cell Codec, null if such information is not available    */
specifier|protected
specifier|abstract
name|String
name|initReader
parameter_list|(
name|FSDataInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Initializes the compression after the shared stuff has been initialized. Called once.    */
specifier|protected
specifier|abstract
name|void
name|initAfterCompression
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Initializes the compression after the shared stuff has been initialized. Called once.    * @param cellCodecClsName class name of cell Codec    */
specifier|protected
specifier|abstract
name|void
name|initAfterCompression
parameter_list|(
name|String
name|cellCodecClsName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return Whether compression is enabled for this log.    */
specifier|protected
specifier|abstract
name|boolean
name|hasCompression
parameter_list|()
function_decl|;
comment|/**    * @return Whether tag compression is enabled for this log.    */
specifier|protected
specifier|abstract
name|boolean
name|hasTagCompression
parameter_list|()
function_decl|;
comment|/**    * Read next entry.    * @param e The entry to read into.    * @return Whether there was anything to read.    */
specifier|protected
specifier|abstract
name|boolean
name|readNext
parameter_list|(
name|Entry
name|e
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Performs a filesystem-level seek to a certain position in an underlying file.    */
specifier|protected
specifier|abstract
name|void
name|seekOnFs
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

