begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The compaction pipeline of a {@link CompactingMemStore}, is a FIFO queue of segments.  * It supports pushing a segment at the head of the pipeline and pulling a segment from the  * tail to flush to disk.  * It also supports swap operation to allow the compactor swap a subset of the segments with a new  * (compacted) one. This swap succeeds only if the version number passed with the list of segments  * to swap is the same as the current version of the pipeline.  * The pipeline version is updated whenever swapping segments or pulling the segment at the tail.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompactionPipeline
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompactionPipeline
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RegionServicesForStores
name|region
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|pipeline
decl_stmt|;
specifier|private
name|long
name|version
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableSegment
name|EMPTY_MEM_STORE_SEGMENT
init|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
literal|null
argument_list|,
name|CompactingMemStore
operator|.
name|DEEP_OVERHEAD_PER_PIPELINE_ITEM
argument_list|)
decl_stmt|;
specifier|public
name|CompactionPipeline
parameter_list|(
name|RegionServicesForStores
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|pipeline
operator|=
operator|new
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|pushHead
parameter_list|(
name|MutableSegment
name|segment
parameter_list|)
block|{
name|ImmutableSegment
name|immutableSegment
init|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|segment
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
return|return
name|addFirst
argument_list|(
name|immutableSegment
argument_list|)
return|;
block|}
block|}
specifier|public
name|ImmutableSegment
name|pullTail
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
if|if
condition|(
name|pipeline
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_MEM_STORE_SEGMENT
return|;
block|}
return|return
name|removeLast
argument_list|()
return|;
block|}
block|}
specifier|public
name|VersionedSegmentsList
name|getVersionedList
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|segmentList
init|=
operator|new
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|VersionedSegmentsList
name|res
init|=
operator|new
name|VersionedSegmentsList
argument_list|(
name|segmentList
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
comment|/**    * Swaps the versioned list at the tail of the pipeline with the new compacted segment.    * Swapping only if there were no changes to the suffix of the list while it was compacted.    * @param versionedList tail of the pipeline that was compacted    * @param segment new compacted segment    * @return true iff swapped tail with new compacted segment    */
specifier|public
name|boolean
name|swap
parameter_list|(
name|VersionedSegmentsList
name|versionedList
parameter_list|,
name|ImmutableSegment
name|segment
parameter_list|)
block|{
if|if
condition|(
name|versionedList
operator|.
name|getVersion
argument_list|()
operator|!=
name|version
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffix
decl_stmt|;
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
if|if
condition|(
name|versionedList
operator|.
name|getVersion
argument_list|()
operator|!=
name|version
condition|)
block|{
return|return
literal|false
return|;
block|}
name|suffix
operator|=
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Swapping pipeline suffix with compacted item. "
operator|+
literal|"Just before the swap the number of segments in pipeline is:"
operator|+
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", and the number of cells in new segment is:"
operator|+
name|segment
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|swapSuffix
argument_list|(
name|suffix
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
comment|// update the global memstore size counter
name|long
name|suffixSize
init|=
name|CompactingMemStore
operator|.
name|getSegmentsSize
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|long
name|newSize
init|=
name|CompactingMemStore
operator|.
name|getSegmentSize
argument_list|(
name|segment
argument_list|)
decl_stmt|;
name|long
name|delta
init|=
name|suffixSize
operator|-
name|newSize
decl_stmt|;
name|long
name|globalMemstoreSize
init|=
name|region
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
operator|-
name|delta
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Suffix size: "
operator|+
name|suffixSize
operator|+
literal|" compacted item size: "
operator|+
name|newSize
operator|+
literal|" globalMemstoreSize: "
operator|+
name|globalMemstoreSize
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|pipeline
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Segment
argument_list|>
name|getSegments
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|Segment
argument_list|>
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|pipeline
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMinSequenceId
parameter_list|()
block|{
name|long
name|minSequenceId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|minSequenceId
operator|=
name|pipeline
operator|.
name|getLast
argument_list|()
operator|.
name|getMinSequenceId
argument_list|()
expr_stmt|;
block|}
return|return
name|minSequenceId
return|;
block|}
specifier|public
name|long
name|getTailSize
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|CompactingMemStore
operator|.
name|getSegmentSize
argument_list|(
name|pipeline
operator|.
name|peekLast
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|swapSuffix
parameter_list|(
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffix
parameter_list|,
name|ImmutableSegment
name|segment
parameter_list|)
block|{
name|version
operator|++
expr_stmt|;
for|for
control|(
name|Segment
name|itemInSuffix
range|:
name|suffix
control|)
block|{
name|itemInSuffix
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|pipeline
operator|.
name|removeAll
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ImmutableSegment
name|removeLast
parameter_list|()
block|{
name|version
operator|++
expr_stmt|;
return|return
name|pipeline
operator|.
name|removeLast
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|addFirst
parameter_list|(
name|ImmutableSegment
name|segment
parameter_list|)
block|{
name|pipeline
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|segment
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// debug method
specifier|private
name|boolean
name|validateSuffixList
parameter_list|(
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty suffix is always valid
return|return
literal|true
return|;
block|}
name|Iterator
argument_list|<
name|ImmutableSegment
argument_list|>
name|pipelineBackwardIterator
init|=
name|pipeline
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffixBackwardIterator
init|=
name|suffix
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|ImmutableSegment
name|suffixCurrent
decl_stmt|;
name|ImmutableSegment
name|pipelineCurrent
decl_stmt|;
for|for
control|(
init|;
name|suffixBackwardIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|pipelineBackwardIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// a suffix longer than pipeline is invalid
return|return
literal|false
return|;
block|}
name|suffixCurrent
operator|=
name|suffixBackwardIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|pipelineCurrent
operator|=
name|pipelineBackwardIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|suffixCurrent
operator|!=
name|pipelineCurrent
condition|)
block|{
comment|// non-matching suffix
return|return
literal|false
return|;
block|}
block|}
comment|// suffix matches pipeline suffix
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

