begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The compaction pipeline of a {@link CompactingMemStore}, is a FIFO queue of segments.  * It supports pushing a segment at the head of the pipeline and removing a segment from the  * tail when it is flushed to disk.  * It also supports swap method to allow the in-memory compaction swap a subset of the segments  * at the tail of the pipeline with a new (compacted) one. This swap succeeds only if the version  * number passed with the list of segments to swap is the same as the current version of the  * pipeline.  * Essentially, there are two methods which can change the structure of the pipeline: pushHead()  * and swap(), the later is used both by a flush to disk and by an in-memory compaction.  * The pipeline version is updated by swap(); it allows to identify conflicting operations at the  * suffix of the pipeline.  *  * The synchronization model is copy-on-write. Methods which change the structure of the  * pipeline (pushHead(), flattenOneSegment() and swap()) apply their changes in the context of a  * lock. They also make a read-only copy of the pipeline's list. Read methods read from a  * read-only copy. If a read method accesses the read-only copy more than once it makes a local  * copy of it to ensure it accesses the same copy.  *  * The methods getVersionedList(), getVersionedTail(), and flattenOneSegment() are also  * protected by a lock since they need to have a consistent (atomic) view of the pipeline list  * and version number.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompactionPipeline
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompactionPipeline
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|3
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|DEEP_OVERHEAD
init|=
name|FIXED_OVERHEAD
operator|+
operator|(
literal|2
operator|*
name|ClassSize
operator|.
name|LINKEDLIST
operator|)
decl_stmt|;
specifier|private
specifier|final
name|RegionServicesForStores
name|region
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|pipeline
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The list is volatile to avoid reading a new allocated reference before the c'tor is executed
specifier|private
specifier|volatile
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|readOnlyCopy
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Version is volatile to ensure it is atomically read when not using a lock
specifier|private
specifier|volatile
name|long
name|version
init|=
literal|0
decl_stmt|;
specifier|public
name|CompactionPipeline
parameter_list|(
name|RegionServicesForStores
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
specifier|public
name|boolean
name|pushHead
parameter_list|(
name|MutableSegment
name|segment
parameter_list|)
block|{
comment|// Record the ImmutableSegment' heap overhead when initialing
name|MemStoreSizing
name|memstoreAccounting
init|=
operator|new
name|NonThreadSafeMemStoreSizing
argument_list|()
decl_stmt|;
name|ImmutableSegment
name|immutableSegment
init|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegment
argument_list|(
name|segment
argument_list|,
name|memstoreAccounting
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|addMemStoreSize
argument_list|(
name|memstoreAccounting
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|memstoreAccounting
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|memstoreAccounting
operator|.
name|getOffHeapSize
argument_list|()
argument_list|,
name|memstoreAccounting
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
name|boolean
name|res
init|=
name|addFirst
argument_list|(
name|immutableSegment
argument_list|)
decl_stmt|;
name|readOnlyCopy
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
specifier|public
name|VersionedSegmentsList
name|getVersionedList
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
return|return
operator|new
name|VersionedSegmentsList
argument_list|(
name|readOnlyCopy
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
specifier|public
name|VersionedSegmentsList
name|getVersionedTail
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|segmentList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pipeline
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|segmentList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|pipeline
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VersionedSegmentsList
argument_list|(
name|segmentList
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
comment|/**    * Swaps the versioned list at the tail of the pipeline with a new segment.    * Swapping only if there were no changes to the suffix of the list since the version list was    * created.    * @param versionedList suffix of the pipeline to be replaced can be tail or all the pipeline    * @param segment new segment to replace the suffix. Can be null if the suffix just needs to be    *                removed.    * @param closeSuffix whether to close the suffix (to release memory), as part of swapping it out    *        During index merge op this will be false and for compaction it will be true.    * @param updateRegionSize whether to update the region size. Update the region size,    *                         when the pipeline is swapped as part of in-memory-flush and    *                         further merge/compaction. Don't update the region size when the    *                         swap is result of the snapshot (flush-to-disk).    * @return true iff swapped tail with new segment    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"VO_VOLATILE_INCREMENT"
argument_list|,
name|justification
operator|=
literal|"Increment is done under a synchronize block so safe"
argument_list|)
specifier|public
name|boolean
name|swap
parameter_list|(
name|VersionedSegmentsList
name|versionedList
parameter_list|,
name|ImmutableSegment
name|segment
parameter_list|,
name|boolean
name|closeSuffix
parameter_list|,
name|boolean
name|updateRegionSize
parameter_list|)
block|{
if|if
condition|(
name|versionedList
operator|.
name|getVersion
argument_list|()
operator|!=
name|version
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffix
decl_stmt|;
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
if|if
condition|(
name|versionedList
operator|.
name|getVersion
argument_list|()
operator|!=
name|version
condition|)
block|{
return|return
literal|false
return|;
block|}
name|suffix
operator|=
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Swapping pipeline suffix; before={}, new segment={}"
argument_list|,
name|versionedList
operator|.
name|getStoreSegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|swapSuffix
argument_list|(
name|suffix
argument_list|,
name|segment
argument_list|,
name|closeSuffix
argument_list|)
expr_stmt|;
name|readOnlyCopy
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|version
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|updateRegionSize
operator|&&
name|region
operator|!=
literal|null
condition|)
block|{
comment|// update the global memstore size counter
name|long
name|suffixDataSize
init|=
name|getSegmentsKeySize
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|long
name|suffixHeapSize
init|=
name|getSegmentsHeapSize
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|long
name|suffixOffHeapSize
init|=
name|getSegmentsOffHeapSize
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|int
name|suffixCellsCount
init|=
name|getSegmentsCellsCount
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|long
name|newDataSize
init|=
literal|0
decl_stmt|;
name|long
name|newHeapSize
init|=
literal|0
decl_stmt|;
name|long
name|newOffHeapSize
init|=
literal|0
decl_stmt|;
name|int
name|newCellsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|newDataSize
operator|=
name|segment
operator|.
name|getDataSize
argument_list|()
expr_stmt|;
name|newHeapSize
operator|=
name|segment
operator|.
name|getHeapSize
argument_list|()
expr_stmt|;
name|newOffHeapSize
operator|=
name|segment
operator|.
name|getOffHeapSize
argument_list|()
expr_stmt|;
name|newCellsCount
operator|=
name|segment
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|long
name|dataSizeDelta
init|=
name|suffixDataSize
operator|-
name|newDataSize
decl_stmt|;
name|long
name|heapSizeDelta
init|=
name|suffixHeapSize
operator|-
name|newHeapSize
decl_stmt|;
name|long
name|offHeapSizeDelta
init|=
name|suffixOffHeapSize
operator|-
name|newOffHeapSize
decl_stmt|;
name|int
name|cellsCountDelta
init|=
name|suffixCellsCount
operator|-
name|newCellsCount
decl_stmt|;
name|region
operator|.
name|addMemStoreSize
argument_list|(
operator|-
name|dataSizeDelta
argument_list|,
operator|-
name|heapSizeDelta
argument_list|,
operator|-
name|offHeapSizeDelta
argument_list|,
operator|-
name|cellsCountDelta
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Suffix data size={}, new segment data size={}, suffix heap size={},new segment heap "
operator|+
literal|"size={} 　suffix off heap size={}, new segment off heap size={}, suffix cells "
operator|+
literal|"count={}, new segment cells count={}"
argument_list|,
name|suffixDataSize
argument_list|,
name|newDataSize
argument_list|,
name|suffixHeapSize
argument_list|,
name|newHeapSize
argument_list|,
name|suffixOffHeapSize
argument_list|,
name|newOffHeapSize
argument_list|,
name|suffixCellsCount
argument_list|,
name|newCellsCount
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|long
name|getSegmentsHeapSize
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|list
parameter_list|)
block|{
name|long
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|list
control|)
block|{
name|res
operator|+=
name|segment
operator|.
name|getHeapSize
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
specifier|static
name|long
name|getSegmentsOffHeapSize
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|list
parameter_list|)
block|{
name|long
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|list
control|)
block|{
name|res
operator|+=
name|segment
operator|.
name|getOffHeapSize
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
specifier|static
name|long
name|getSegmentsKeySize
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|list
parameter_list|)
block|{
name|long
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|list
control|)
block|{
name|res
operator|+=
name|segment
operator|.
name|getDataSize
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
specifier|static
name|int
name|getSegmentsCellsCount
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|list
parameter_list|)
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|list
control|)
block|{
name|res
operator|+=
name|segment
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * If the caller holds the current version, go over the the pipeline and try to flatten each    * segment. Flattening is replacing the ConcurrentSkipListMap based CellSet to CellArrayMap based.    * Flattening of the segment that initially is not based on ConcurrentSkipListMap has no effect.    * Return after one segment is successfully flatten.    *    * @return true iff a segment was successfully flattened    */
specifier|public
name|boolean
name|flattenOneSegment
parameter_list|(
name|long
name|requesterVersion
parameter_list|,
name|CompactingMemStore
operator|.
name|IndexType
name|idxType
parameter_list|,
name|MemStoreCompactionStrategy
operator|.
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
name|requesterVersion
operator|!=
name|version
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Segment flattening failed, because versions do not match. Requester version: "
operator|+
name|requesterVersion
operator|+
literal|", actual version: "
operator|+
name|version
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
synchronized|synchronized
init|(
name|pipeline
init|)
block|{
if|if
condition|(
name|requesterVersion
operator|!=
name|version
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Segment flattening failed, because versions do not match"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ImmutableSegment
name|s
range|:
name|pipeline
control|)
block|{
if|if
condition|(
name|s
operator|.
name|canBeFlattened
argument_list|()
condition|)
block|{
name|s
operator|.
name|waitForUpdates
argument_list|()
expr_stmt|;
comment|// to ensure all updates preceding s in-memory flush have completed
comment|// size to be updated
name|MemStoreSizing
name|newMemstoreAccounting
init|=
operator|new
name|NonThreadSafeMemStoreSizing
argument_list|()
decl_stmt|;
name|ImmutableSegment
name|newS
init|=
name|SegmentFactory
operator|.
name|instance
argument_list|()
operator|.
name|createImmutableSegmentByFlattening
argument_list|(
operator|(
name|CSLMImmutableSegment
operator|)
name|s
argument_list|,
name|idxType
argument_list|,
name|newMemstoreAccounting
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|replaceAtIndex
argument_list|(
name|i
argument_list|,
name|newS
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
comment|// Update the global memstore size counter upon flattening there is no change in the
comment|// data size
name|MemStoreSize
name|mss
init|=
name|newMemstoreAccounting
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|region
operator|.
name|addMemStoreSize
argument_list|(
name|mss
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getOffHeapSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction pipeline segment {} flattened"
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// do not update the global memstore size counter and do not increase the version,
comment|// because all the cells remain in place
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|readOnlyCopy
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|getSegments
parameter_list|()
block|{
return|return
name|readOnlyCopy
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|readOnlyCopy
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMinSequenceId
parameter_list|()
block|{
name|long
name|minSequenceId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|LinkedList
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|localCopy
init|=
name|readOnlyCopy
decl_stmt|;
if|if
condition|(
operator|!
name|localCopy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|minSequenceId
operator|=
name|localCopy
operator|.
name|getLast
argument_list|()
operator|.
name|getMinSequenceId
argument_list|()
expr_stmt|;
block|}
return|return
name|minSequenceId
return|;
block|}
specifier|public
name|MemStoreSize
name|getTailSize
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|localCopy
init|=
name|readOnlyCopy
decl_stmt|;
return|return
name|localCopy
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|MemStoreSize
argument_list|()
else|:
name|localCopy
operator|.
name|peekLast
argument_list|()
operator|.
name|getMemStoreSize
argument_list|()
return|;
block|}
specifier|public
name|MemStoreSize
name|getPipelineSize
parameter_list|()
block|{
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|NonThreadSafeMemStoreSizing
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|localCopy
init|=
name|readOnlyCopy
decl_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|localCopy
control|)
block|{
name|memStoreSizing
operator|.
name|incMemStoreSize
argument_list|(
name|segment
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|memStoreSizing
operator|.
name|getMemStoreSize
argument_list|()
return|;
block|}
specifier|private
name|void
name|swapSuffix
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|suffix
parameter_list|,
name|ImmutableSegment
name|segment
parameter_list|,
name|boolean
name|closeSegmentsInSuffix
parameter_list|)
block|{
name|pipeline
operator|.
name|removeAll
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
name|pipeline
operator|.
name|addLast
argument_list|(
name|segment
argument_list|)
expr_stmt|;
comment|// During index merge we won't be closing the segments undergoing the merge. Segment#close()
comment|// will release the MSLAB chunks to pool. But in case of index merge there wont be any data copy
comment|// from old MSLABs. So the new cells in new segment also refers to same chunks. In case of data
comment|// compaction, we would have copied the cells data from old MSLAB chunks into a new chunk
comment|// created for the result segment. So we can release the chunks associated with the compacted
comment|// segments.
if|if
condition|(
name|closeSegmentsInSuffix
condition|)
block|{
for|for
control|(
name|Segment
name|itemInSuffix
range|:
name|suffix
control|)
block|{
name|itemInSuffix
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// replacing one segment in the pipeline with a new one exactly at the same index
comment|// need to be called only within synchronized block
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"VO_VOLATILE_INCREMENT"
argument_list|,
name|justification
operator|=
literal|"replaceAtIndex is invoked under a synchronize block so safe"
argument_list|)
specifier|private
name|void
name|replaceAtIndex
parameter_list|(
name|int
name|idx
parameter_list|,
name|ImmutableSegment
name|newSegment
parameter_list|)
block|{
name|pipeline
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|newSegment
argument_list|)
expr_stmt|;
name|readOnlyCopy
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
comment|// the version increment is indeed needed, because the swap uses removeAll() method of the
comment|// linked-list that compares the objects to find what to remove.
comment|// The flattening changes the segment object completely (creation pattern) and so
comment|// swap will not proceed correctly after concurrent flattening.
name|version
operator|++
expr_stmt|;
block|}
specifier|public
name|Segment
name|getTail
parameter_list|()
block|{
name|List
argument_list|<
name|?
extends|extends
name|Segment
argument_list|>
name|localCopy
init|=
name|getSegments
argument_list|()
decl_stmt|;
if|if
condition|(
name|localCopy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|localCopy
operator|.
name|get
argument_list|(
name|localCopy
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|addFirst
parameter_list|(
name|ImmutableSegment
name|segment
parameter_list|)
block|{
name|pipeline
operator|.
name|addFirst
argument_list|(
name|segment
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// debug method
specifier|private
name|boolean
name|validateSuffixList
parameter_list|(
name|LinkedList
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty suffix is always valid
return|return
literal|true
return|;
block|}
name|Iterator
argument_list|<
name|ImmutableSegment
argument_list|>
name|pipelineBackwardIterator
init|=
name|pipeline
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ImmutableSegment
argument_list|>
name|suffixBackwardIterator
init|=
name|suffix
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|ImmutableSegment
name|suffixCurrent
decl_stmt|;
name|ImmutableSegment
name|pipelineCurrent
decl_stmt|;
for|for
control|(
init|;
name|suffixBackwardIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|pipelineBackwardIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// a suffix longer than pipeline is invalid
return|return
literal|false
return|;
block|}
name|suffixCurrent
operator|=
name|suffixBackwardIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|pipelineCurrent
operator|=
name|pipelineBackwardIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|suffixCurrent
operator|!=
name|pipelineCurrent
condition|)
block|{
comment|// non-matching suffix
return|return
literal|false
return|;
block|}
block|}
comment|// suffix matches pipeline suffix
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

