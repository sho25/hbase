begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A manager for filesystem space quotas in the RegionServer.  *  * This class is responsible for reading quota violation policies from the quota  * table and then enacting them on the given table.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionServerSpaceQuotaManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionServerSpaceQuotaManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RegionServerServices
name|rsServices
decl_stmt|;
specifier|private
name|SpaceQuotaViolationPolicyRefresherChore
name|spaceQuotaRefresher
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|enforcedPolicies
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|public
name|RegionServerSpaceQuotaManager
parameter_list|(
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|this
operator|.
name|rsServices
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rsServices
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Quota support disabled, not starting space quota manager."
argument_list|)
expr_stmt|;
return|return;
block|}
name|spaceQuotaRefresher
operator|=
operator|new
name|SpaceQuotaViolationPolicyRefresherChore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|enforcedPolicies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|spaceQuotaRefresher
condition|)
block|{
name|spaceQuotaRefresher
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|spaceQuotaRefresher
operator|=
literal|null
expr_stmt|;
block|}
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * @return if the {@code Chore} has been started.    */
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|rsServices
operator|.
name|getConnection
argument_list|()
return|;
block|}
comment|/**    * Returns the collection of tables which have quota violation policies enforced on    * this RegionServer.    */
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|getActiveViolationPolicyEnforcements
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|enforcedPolicies
argument_list|)
return|;
block|}
comment|/**    * Wrapper around {@link QuotaTableUtil#extractViolationPolicy(Result, Map)} for testing.    */
name|void
name|extractViolationPolicy
parameter_list|(
name|Result
name|result
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|activePolicies
parameter_list|)
block|{
name|QuotaTableUtil
operator|.
name|extractViolationPolicy
argument_list|(
name|result
argument_list|,
name|activePolicies
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads all quota violation policies which are to be enforced from the quota table.    *    * @return The collection of tables which are in violation of their quota and the policy which    *    should be enforced.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|getViolationPoliciesToEnforce
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|quotaTable
init|=
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|QuotaTableUtil
operator|.
name|makeQuotaViolationScan
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|activePolicies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
try|try
block|{
name|extractViolationPolicy
argument_list|(
name|result
argument_list|,
name|activePolicies
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Failed to parse result for row "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|activePolicies
return|;
block|}
block|}
comment|/**    * Enforces the given violationPolicy on the given table in this RegionServer.    */
specifier|synchronized
name|void
name|enforceViolationPolicy
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SpaceViolationPolicy
name|violationPolicy
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabling violation policy enforcement on "
operator|+
name|tableName
operator|+
literal|" with policy "
operator|+
name|violationPolicy
argument_list|)
expr_stmt|;
block|}
comment|// Enact the policy
name|enforceOnRegionServer
argument_list|(
name|tableName
argument_list|,
name|violationPolicy
argument_list|)
expr_stmt|;
comment|// Publicize our enacting of the policy
name|enforcedPolicies
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|violationPolicy
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enacts the given violation policy on this table in the RegionServer.    */
name|void
name|enforceOnRegionServer
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SpaceViolationPolicy
name|violationPolicy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
comment|/**    * Disables enforcement on any violation policy on the given<code>tableName</code>.    */
specifier|synchronized
name|void
name|disableViolationPolicyEnforcement
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Disabling violation policy enforcement on "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|disableOnRegionServer
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|enforcedPolicies
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disables any violation policy on this table in the RegionServer.    */
name|void
name|disableOnRegionServer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
name|RegionServerServices
name|getRegionServerServices
parameter_list|()
block|{
return|return
name|rsServices
return|;
block|}
block|}
end_class

end_unit

