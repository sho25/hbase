begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
import|;
end_import

begin_comment
comment|/**  * A manager for filesystem space quotas in the RegionServer.  *  * This class is the centralized point for what a RegionServer knows about space quotas  * on tables. For each table, it tracks two different things: the {@link SpaceQuotaSnapshot}  * and a {@link SpaceViolationPolicyEnforcement} (which may be null when a quota is not  * being violated). Both of these are sensitive on when they were last updated. The  * {link SpaceQutoaViolationPolicyRefresherChore} periodically runs and updates  * the state on<code>this</code>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionServerSpaceQuotaManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionServerSpaceQuotaManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RegionServerServices
name|rsServices
decl_stmt|;
specifier|private
name|SpaceQuotaRefresherChore
name|spaceQuotaRefresher
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
argument_list|>
name|currentQuotaSnapshots
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicyEnforcement
argument_list|>
name|enforcedPolicies
decl_stmt|;
specifier|private
name|SpaceViolationPolicyEnforcementFactory
name|factory
decl_stmt|;
specifier|private
name|RegionSizeStore
name|regionSizeStore
decl_stmt|;
specifier|private
name|RegionSizeReportingChore
name|regionSizeReporter
decl_stmt|;
specifier|public
name|RegionServerSpaceQuotaManager
parameter_list|(
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|this
argument_list|(
name|rsServices
argument_list|,
name|SpaceViolationPolicyEnforcementFactory
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|RegionServerSpaceQuotaManager
parameter_list|(
name|RegionServerServices
name|rsServices
parameter_list|,
name|SpaceViolationPolicyEnforcementFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|rsServices
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rsServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|enforcedPolicies
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentQuotaSnapshots
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize the size store to not track anything -- create the real one if we're start()'ed
name|this
operator|.
name|regionSizeStore
operator|=
name|NoOpRegionSizeStore
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|QuotaUtil
operator|.
name|isQuotaEnabled
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Quota support disabled, not starting space quota manager."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|started
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RegionServerSpaceQuotaManager has already been started!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Start the chores
name|this
operator|.
name|spaceQuotaRefresher
operator|=
operator|new
name|SpaceQuotaRefresherChore
argument_list|(
name|this
argument_list|,
name|rsServices
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|rsServices
operator|.
name|getChoreService
argument_list|()
operator|.
name|scheduleChore
argument_list|(
name|spaceQuotaRefresher
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionSizeReporter
operator|=
operator|new
name|RegionSizeReportingChore
argument_list|(
name|rsServices
argument_list|)
expr_stmt|;
name|rsServices
operator|.
name|getChoreService
argument_list|()
operator|.
name|scheduleChore
argument_list|(
name|regionSizeReporter
argument_list|)
expr_stmt|;
comment|// Instantiate the real RegionSizeStore
name|this
operator|.
name|regionSizeStore
operator|=
name|RegionSizeStoreFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createStore
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|spaceQuotaRefresher
operator|!=
literal|null
condition|)
block|{
name|spaceQuotaRefresher
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|spaceQuotaRefresher
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|regionSizeReporter
operator|!=
literal|null
condition|)
block|{
name|regionSizeReporter
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|regionSizeReporter
operator|=
literal|null
expr_stmt|;
block|}
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * @return if the {@code Chore} has been started.    */
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
comment|/**    * Copies the last {@link SpaceQuotaSnapshot}s that were recorded. The current view    * of what the RegionServer thinks the table's utilization is.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|copyQuotaSnapshots
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|currentQuotaSnapshots
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Updates the current {@link SpaceQuotaSnapshot}s for the RegionServer.    *    * @param newSnapshots The space quota snapshots.    */
specifier|public
name|void
name|updateQuotaSnapshot
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|newSnapshots
parameter_list|)
block|{
name|currentQuotaSnapshots
operator|.
name|set
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|newSnapshots
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object well-suited for the RegionServer to use in verifying active policies.    */
specifier|public
name|ActivePolicyEnforcement
name|getActiveEnforcements
parameter_list|()
block|{
return|return
operator|new
name|ActivePolicyEnforcement
argument_list|(
name|copyActiveEnforcements
argument_list|()
argument_list|,
name|copyQuotaSnapshots
argument_list|()
argument_list|,
name|rsServices
argument_list|)
return|;
block|}
comment|/**    * Converts a map of table to {@link SpaceViolationPolicyEnforcement}s into    * {@link SpaceViolationPolicy}s.    */
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|getActivePoliciesAsMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicyEnforcement
argument_list|>
name|enforcements
init|=
name|copyActiveEnforcements
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|policies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicyEnforcement
argument_list|>
name|entry
range|:
name|enforcements
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getQuotaSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|policies
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|policies
return|;
block|}
comment|/**    * Enforces the given violationPolicy on the given table in this RegionServer.    */
specifier|public
name|void
name|enforceViolationPolicy
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|SpaceQuotaStatus
name|status
init|=
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|tableName
operator|+
literal|" is not in violation. Violation policy should not be enabled."
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabling violation policy enforcement on "
operator|+
name|tableName
operator|+
literal|" with policy "
operator|+
name|status
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Construct this outside of the lock
specifier|final
name|SpaceViolationPolicyEnforcement
name|enforcement
init|=
name|getFactory
argument_list|()
operator|.
name|create
argument_list|(
name|getRegionServerServices
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
comment|// "Enables" the policy
comment|// HBASE-XXXX: Should this synchronize on the actual table name instead of the map? That would
comment|// allow policy enable/disable on different tables to happen concurrently. As written now, only
comment|// one table will be allowed to transition at a time. This is probably OK, but not sure if
comment|// it would become a bottleneck at large clusters/number of tables.
synchronized|synchronized
init|(
name|enforcedPolicies
init|)
block|{
try|try
block|{
name|enforcement
operator|.
name|enable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to enable space violation policy for "
operator|+
name|tableName
operator|+
literal|". This table will not enter violation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|enforcedPolicies
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|enforcement
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Disables enforcement on any violation policy on the given<code>tableName</code>.    */
specifier|public
name|void
name|disableViolationPolicyEnforcement
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Disabling violation policy enforcement on "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// "Disables" the policy
synchronized|synchronized
init|(
name|enforcedPolicies
init|)
block|{
name|SpaceViolationPolicyEnforcement
name|enforcement
init|=
name|enforcedPolicies
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|enforcement
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|enforcement
operator|.
name|disable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to disable space violation policy for "
operator|+
name|tableName
operator|+
literal|". This table will remain in violation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|enforcedPolicies
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|enforcement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns whether or not compactions should be disabled for the given<code>tableName</code> per    * a space quota violation policy. A convenience method.    *    * @param tableName The table to check    * @return True if compactions should be disabled for the table, false otherwise.    */
specifier|public
name|boolean
name|areCompactionsDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|SpaceViolationPolicyEnforcement
name|enforcement
init|=
name|this
operator|.
name|enforcedPolicies
operator|.
name|get
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enforcement
operator|!=
literal|null
condition|)
block|{
return|return
name|enforcement
operator|.
name|areCompactionsDisabled
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the {@link RegionSizeStore} tracking filesystem utilization by each region.    *    * @return A {@link RegionSizeStore} implementation.    */
specifier|public
name|RegionSizeStore
name|getRegionSizeStore
parameter_list|()
block|{
return|return
name|regionSizeStore
return|;
block|}
comment|/**    * Builds the protobuf message to inform the Master of files being archived.    *    * @param tn The table the files previously belonged to.    * @param archivedFiles The files and their size in bytes that were archived.    * @return The protobuf representation    */
specifier|public
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
name|buildFileArchiveRequest
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|Collection
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|archivedFiles
parameter_list|)
block|{
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
operator|.
name|Builder
name|builder
init|=
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|TableName
name|protoTn
init|=
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tn
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|archivedFile
range|:
name|archivedFiles
control|)
block|{
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
operator|.
name|FileWithSize
name|fws
init|=
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
operator|.
name|FileWithSize
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|archivedFile
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|archivedFile
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
name|protoTn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addArchivedFiles
argument_list|(
name|fws
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RegionServerStatusProtos
operator|.
name|FileArchiveNotificationRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Reporting file archival to Master: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
comment|/**    * Returns the collection of tables which have quota violation policies enforced on    * this RegionServer.    */
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicyEnforcement
argument_list|>
name|copyActiveEnforcements
parameter_list|()
block|{
comment|// Allows reads to happen concurrently (or while the map is being updated)
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|enforcedPolicies
argument_list|)
return|;
block|}
name|RegionServerServices
name|getRegionServerServices
parameter_list|()
block|{
return|return
name|rsServices
return|;
block|}
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|rsServices
operator|.
name|getConnection
argument_list|()
return|;
block|}
name|SpaceViolationPolicyEnforcementFactory
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

