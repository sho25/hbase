begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link RegionSizeStore} implementation backed by a ConcurrentHashMap. We expected similar  * amounts of reads and writes to the "store", so using a RWLock is not going to provide any  * exceptional gains.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionSizeStoreImpl
implements|implements
name|RegionSizeStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionSizeStoreImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|sizeOfEntry
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|+
name|ClassSize
operator|.
name|OBJECT
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
comment|// TODO Have RegionInfo implement HeapSize. 100B is an approximation based on a heapdump.
operator|+
name|ClassSize
operator|.
name|OBJECT
operator|+
literal|100
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|RegionInfo
argument_list|,
name|RegionSize
argument_list|>
name|store
decl_stmt|;
specifier|public
name|RegionSizeStoreImpl
parameter_list|()
block|{
name|store
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|RegionSize
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|store
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionSize
name|getRegionSize
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|regionInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting space quota size for "
operator|+
name|regionInfo
operator|+
literal|" to "
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Atomic. Either sets the new size for the first time, or replaces the existing value.
name|store
operator|.
name|compute
argument_list|(
name|regionInfo
argument_list|,
operator|(
name|key
operator|,
name|value
operator|)
operator|->
name|value
operator|==
literal|null
condition|?
operator|new
name|RegionSizeImpl
argument_list|(
name|size
argument_list|)
else|:
name|value
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementRegionSize
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Updating space quota size for "
operator|+
name|regionInfo
operator|+
literal|" with a delta of "
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
comment|// Atomic. Recomputes the stored value with the delta if there is one, otherwise use the delta.
name|store
operator|.
name|compute
argument_list|(
name|regionInfo
argument_list|,
operator|(
name|key
operator|,
name|value
operator|)
operator|->
name|value
operator|==
literal|null
condition|?
operator|new
name|RegionSizeImpl
argument_list|(
name|delta
argument_list|)
else|:
name|value
operator|.
name|incrementSize
argument_list|(
name|delta
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RegionSize
name|remove
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|store
operator|.
name|remove
argument_list|(
name|regionInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
comment|// Will have to iterate over each element if RegionInfo implements HeapSize, for now it's just
comment|// a simple calculation.
return|return
name|sizeOfEntry
operator|*
name|store
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|store
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|store
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|store
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

