begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class is responsible for the tracking and enforcement of Deletes  * during the course of a Scan operation.  *  * It only has to enforce Delete and DeleteColumn, since the  * DeleteFamily is handled at a higher level.  *  *<p>  * This class is utilized through three methods:  *<ul><li>{@link #add} when encountering a Delete or DeleteColumn  *<li>{@link #isDeleted} when checking if a Put KeyValue has been deleted  *<li>{@link #update} when reaching the end of a StoreFile or row for scans  *<p>  * This class is NOT thread-safe as queries are never multi-threaded  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ScanDeleteTracker
implements|implements
name|DeleteTracker
block|{
specifier|private
name|boolean
name|hasFamilyStamp
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|familyStamp
init|=
literal|0L
decl_stmt|;
specifier|private
name|byte
index|[]
name|deleteBuffer
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|deleteOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|deleteLength
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|deleteType
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|deleteTimestamp
init|=
literal|0L
decl_stmt|;
comment|/**    * Constructor for ScanDeleteTracker    */
specifier|public
name|ScanDeleteTracker
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add the specified KeyValue to the list of deletes to check against for    * this row operation.    *<p>    * This is called when a Delete is encountered in a StoreFile.    * @param buffer KeyValue buffer    * @param qualifierOffset column qualifier offset    * @param qualifierLength column qualifier length    * @param timestamp timestamp    * @param type delete type as byte    */
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|qualifierOffset
parameter_list|,
name|int
name|qualifierLength
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFamilyStamp
operator|||
name|timestamp
operator|>
name|familyStamp
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|hasFamilyStamp
operator|=
literal|true
expr_stmt|;
name|familyStamp
operator|=
name|timestamp
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|deleteBuffer
operator|!=
literal|null
operator|&&
name|type
operator|<
name|deleteType
condition|)
block|{
comment|// same column, so ignore less specific delete
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|,
name|buffer
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// new column, or more general delete type
name|deleteBuffer
operator|=
name|buffer
expr_stmt|;
name|deleteOffset
operator|=
name|qualifierOffset
expr_stmt|;
name|deleteLength
operator|=
name|qualifierLength
expr_stmt|;
name|deleteType
operator|=
name|type
expr_stmt|;
name|deleteTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
comment|// missing else is never called.
block|}
comment|/**    * Check if the specified KeyValue buffer has been deleted by a previously    * seen delete.    *    * @param buffer KeyValue buffer    * @param qualifierOffset column qualifier offset    * @param qualifierLength column qualifier length    * @param timestamp timestamp    * @return deleteResult    */
annotation|@
name|Override
specifier|public
name|DeleteResult
name|isDeleted
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|qualifierOffset
parameter_list|,
name|int
name|qualifierLength
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
if|if
condition|(
name|hasFamilyStamp
operator|&&
name|timestamp
operator|<=
name|familyStamp
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|FAMILY_DELETED
return|;
block|}
if|if
condition|(
name|deleteBuffer
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|,
name|buffer
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|deleteType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|COLUMN_DELETED
return|;
block|}
comment|// Delete (aka DeleteVersion)
comment|// If the timestamp is the same, keep this one
if|if
condition|(
name|timestamp
operator|==
name|deleteTimestamp
condition|)
block|{
return|return
name|DeleteResult
operator|.
name|VERSION_DELETED
return|;
block|}
comment|// use assert or not?
assert|assert
name|timestamp
operator|<
name|deleteTimestamp
assert|;
comment|// different timestamp, let's clear the buffer.
name|deleteBuffer
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
comment|// Next column case.
name|deleteBuffer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"isDelete failed: deleteBuffer="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|,
name|deleteLength
argument_list|)
operator|+
literal|", qualifier="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|buffer
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
operator|+
literal|", timestamp="
operator|+
name|timestamp
operator|+
literal|", comparison result: "
operator|+
name|ret
argument_list|)
throw|;
block|}
block|}
return|return
name|DeleteResult
operator|.
name|NOT_DELETED
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|deleteBuffer
operator|==
literal|null
operator|&&
operator|!
name|hasFamilyStamp
return|;
block|}
annotation|@
name|Override
comment|// called between every row.
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|hasFamilyStamp
operator|=
literal|false
expr_stmt|;
name|familyStamp
operator|=
literal|0L
expr_stmt|;
name|deleteBuffer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
comment|// should not be called at all even (!)
specifier|public
name|void
name|update
parameter_list|()
block|{
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

