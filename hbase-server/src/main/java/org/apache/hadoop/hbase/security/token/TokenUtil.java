begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Utility methods for obtaining authentication tokens.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|TokenUtil
block|{
comment|// This class is referenced indirectly by User out in common; instances are created by reflection
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TokenUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Obtain and return an authentication token for the current user.    * @param conn The HBase cluster connection    * @throws IOException if a remote error or serialization problem occurs.    * @return the authentication token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|obtainToken
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|meta
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|CoprocessorRpcChannel
name|rpcChannel
init|=
name|meta
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|BlockingInterface
name|service
init|=
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|newBlockingStub
argument_list|(
name|rpcChannel
argument_list|)
decl_stmt|;
name|AuthenticationProtos
operator|.
name|GetAuthenticationTokenResponse
name|response
init|=
name|service
operator|.
name|getAuthenticationToken
argument_list|(
literal|null
argument_list|,
name|AuthenticationProtos
operator|.
name|GetAuthenticationTokenRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|toToken
argument_list|(
name|response
operator|.
name|getToken
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Converts a Token instance (with embedded identifier) to the protobuf representation.    *    * @param token the Token instance to copy    * @return the protobuf Token message    */
specifier|public
specifier|static
name|AuthenticationProtos
operator|.
name|Token
name|toToken
parameter_list|(
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|Builder
name|builder
init|=
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIdentifier
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPassword
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setService
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Obtain and return an authentication token for the current user.    * @param conn The HBase cluster connection    * @return the authentication token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|obtainToken
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|obtainToken
argument_list|(
name|conn
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Text
name|getClusterId
parameter_list|(
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|token
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|?
name|token
operator|.
name|getService
argument_list|()
else|:
operator|new
name|Text
argument_list|(
literal|"default"
argument_list|)
return|;
block|}
comment|/**    * Obtain an authentication token for the given user and add it to the    * user's credentials.    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    */
specifier|public
specifier|static
name|void
name|obtainAndCacheToken
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No token returned for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Obtained token "
operator|+
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|user
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|ie
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|e
argument_list|,
literal|"Unexpected exception obtaining token for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Obtain an authentication token on behalf of the given user and add it to    * the credentials for the given map reduce job.    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @param job The job instance in which the token should be stored    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    */
specifier|public
specifier|static
name|void
name|obtainTokenForJob
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
name|User
name|user
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No token returned for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Text
name|clusterId
init|=
name|getClusterId
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Obtained token "
operator|+
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" on cluster "
operator|+
name|clusterId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|clusterId
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|ie
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|e
argument_list|,
literal|"Unexpected exception obtaining token for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Obtain an authentication token on behalf of the given user and add it to    * the credentials for the given map reduce job.    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @param job The job configuration in which the token should be stored    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    */
specifier|public
specifier|static
name|void
name|obtainTokenForJob
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
specifier|final
name|JobConf
name|job
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No token returned for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Text
name|clusterId
init|=
name|getClusterId
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Obtained token "
operator|+
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" on cluster "
operator|+
name|clusterId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|clusterId
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|ie
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|e
argument_list|,
literal|"Unexpected exception obtaining token for user "
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks for an authentication token for the given user, obtaining a new token if necessary,    * and adds it to the credentials for the given map reduce job.    *    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @param job The job configuration in which the token should be stored    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    */
specifier|public
specifier|static
name|void
name|addTokenForJob
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
specifier|final
name|JobConf
name|job
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|getAuthToken
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks for an authentication token for the given user, obtaining a new token if necessary,    * and adds it to the credentials for the given map reduce job.    *    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @param job The job instance in which the token should be stored    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    */
specifier|public
specifier|static
name|void
name|addTokenForJob
parameter_list|(
specifier|final
name|Connection
name|conn
parameter_list|,
name|User
name|user
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|getAuthToken
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if an authentication tokens exists for the connected cluster,    * obtaining one if needed and adding it to the user's credentials.    *    * @param conn The HBase cluster connection    * @param user The user for whom to obtain the token    * @throws IOException If making a remote call to the authentication service fails    * @throws InterruptedException If executing as the given user is interrupted    * @return true if the token was added, false if it already existed    */
specifier|public
specifier|static
name|boolean
name|addTokenIfMissing
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|getAuthToken
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|obtainToken
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get the authentication token of the user for the cluster specified in the configuration    * @return null if the user does not have the token, otherwise the auth token for the cluster.    */
specifier|private
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|getAuthToken
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"TokenUtil-getAuthToken"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|clusterId
init|=
name|ZKClusterId
operator|.
name|readClusterIdZNode
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get cluster ID"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AuthenticationTokenSelector
argument_list|()
operator|.
name|selectToken
argument_list|(
operator|new
name|Text
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|user
operator|.
name|getTokens
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Converts a protobuf Token message back into a Token instance.    *    * @param proto the protobuf Token message    * @return the Token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|toToken
parameter_list|(
name|AuthenticationProtos
operator|.
name|Token
name|proto
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<>
argument_list|(
name|proto
operator|.
name|hasIdentifier
argument_list|()
condition|?
name|proto
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|proto
operator|.
name|hasPassword
argument_list|()
condition|?
name|proto
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|AuthenticationTokenIdentifier
operator|.
name|AUTH_TOKEN_TYPE
argument_list|,
name|proto
operator|.
name|hasService
argument_list|()
condition|?
operator|new
name|Text
argument_list|(
name|proto
operator|.
name|getService
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

