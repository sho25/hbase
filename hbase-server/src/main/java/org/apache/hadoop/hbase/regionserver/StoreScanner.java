begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|IsolationLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
operator|.
name|LimitScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
operator|.
name|NextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|handler
operator|.
name|ParallelSeekHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|CompactionScanQueryMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|ScanQueryMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|UserScanQueryMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_comment
comment|/**  * Scanner scans both the memstore and the Store. Coalesce KeyValue stream into List&lt;KeyValue&gt;  * for a single row.  *<p>  * The implementation is not thread safe. So there will be no race between next and close. The only  * exception is updateReaders, it will be called in the memstore flush thread to indicate that there  * is a flush.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|StoreScanner
extends|extends
name|NonReversedNonLazyKeyValueScanner
implements|implements
name|KeyValueScanner
implements|,
name|InternalScanner
implements|,
name|ChangedReadersObserver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoreScanner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// In unit tests, the store could be null
specifier|protected
specifier|final
name|HStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
specifier|private
name|ScanQueryMatcher
name|matcher
decl_stmt|;
specifier|protected
name|KeyValueHeap
name|heap
decl_stmt|;
specifier|private
name|boolean
name|cacheBlocks
decl_stmt|;
specifier|private
name|long
name|countPerRow
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|storeLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|storeOffset
init|=
literal|0
decl_stmt|;
comment|// Used to indicate that the scanner has closed (see HBASE-1107)
specifier|private
specifier|volatile
name|boolean
name|closing
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|get
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|explicitColumnQuery
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useRowColBloom
decl_stmt|;
comment|/**    * A flag that enables StoreFileScanner parallel-seeking    */
specifier|private
name|boolean
name|parallelSeekEnabled
init|=
literal|false
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Scan
name|scan
decl_stmt|;
specifier|private
specifier|final
name|long
name|oldestUnexpiredTS
decl_stmt|;
specifier|private
specifier|final
name|long
name|now
decl_stmt|;
specifier|private
specifier|final
name|int
name|minVersions
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxRowSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|cellsPerHeartbeatCheck
decl_stmt|;
comment|// 1) Collects all the KVHeap that are eagerly getting closed during the
comment|//    course of a scan
comment|// 2) Collects the unused memstore scanners. If we close the memstore scanners
comment|//    before sending data to client, the chunk may be reclaimed by other
comment|//    updates and the data will be corrupt.
specifier|private
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scannersForDelayedClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The number of KVs seen by the scanner. Includes explicitly skipped KVs, but not    * KVs skipped via seeking to next row/column. TODO: estimate them?    */
specifier|private
name|long
name|kvsScanned
init|=
literal|0
decl_stmt|;
specifier|private
name|Cell
name|prevCell
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|long
name|preadMaxBytes
decl_stmt|;
specifier|private
name|long
name|bytesRead
decl_stmt|;
comment|/** We don't ever expect to change this, the constant is just for clarity. */
specifier|static
specifier|final
name|boolean
name|LAZY_SEEK_ENABLED_BY_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STORESCANNER_PARALLEL_SEEK_ENABLE
init|=
literal|"hbase.storescanner.parallel.seek.enable"
decl_stmt|;
comment|/** Used during unit testing to ensure that lazy seek does save seek ops */
specifier|private
specifier|static
name|boolean
name|lazySeekEnabledGlobally
init|=
name|LAZY_SEEK_ENABLED_BY_DEFAULT
decl_stmt|;
comment|/**    * The number of cells scanned in between timeout checks. Specifying a larger value means that    * timeout checks will occur less frequently. Specifying a small value will lead to more frequent    * timeout checks.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK
init|=
literal|"hbase.cells.scanned.per.heartbeat.check"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK}.    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK
init|=
literal|10000
decl_stmt|;
comment|/**    * If the read type if Scan.ReadType.DEFAULT, we will start with pread, and if the kvs we scanned    * reaches this limit, we will reopen the scanner with stream. The default value is 4 times of    * block size for this store.    */
specifier|public
specifier|static
specifier|final
name|String
name|STORESCANNER_PREAD_MAX_BYTES
init|=
literal|"hbase.storescanner.pread.max.bytes"
decl_stmt|;
specifier|private
specifier|final
name|Scan
operator|.
name|ReadType
name|readType
decl_stmt|;
comment|// A flag whether use pread for scan
comment|// it maybe changed if we use Scan.ReadType.DEFAULT and we have read lots of data.
specifier|private
name|boolean
name|scanUsePread
decl_stmt|;
comment|// Indicates whether there was flush during the course of the scan
specifier|private
specifier|volatile
name|boolean
name|flushed
init|=
literal|false
decl_stmt|;
comment|// generally we get one file from a flush
specifier|private
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|flushedstoreFileScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Since CompactingMemstore is now default, we get three memstore scanners from a flush
specifier|private
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memStoreScannersAfterFlush
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// The current list of scanners
annotation|@
name|VisibleForTesting
specifier|final
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|currentScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// flush update lock
specifier|private
specifier|final
name|ReentrantLock
name|flushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// lock for closing.
specifier|private
specifier|final
name|ReentrantLock
name|closeLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|long
name|readPt
decl_stmt|;
specifier|private
name|boolean
name|topChanged
init|=
literal|false
decl_stmt|;
comment|/** An internal constructor. */
specifier|private
name|StoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|int
name|numColumns
parameter_list|,
name|long
name|readPt
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|,
name|ScanType
name|scanType
parameter_list|)
block|{
name|this
operator|.
name|readPt
operator|=
name|readPt
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|cacheBlocks
operator|=
name|cacheBlocks
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scanInfo
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
name|scan
operator|.
name|isGetScan
argument_list|()
expr_stmt|;
name|explicitColumnQuery
operator|=
name|numColumns
operator|>
literal|0
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|now
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|oldestUnexpiredTS
operator|=
name|scan
operator|.
name|isRaw
argument_list|()
condition|?
literal|0L
else|:
name|now
operator|-
name|scanInfo
operator|.
name|getTtl
argument_list|()
expr_stmt|;
name|this
operator|.
name|minVersions
operator|=
name|scanInfo
operator|.
name|getMinVersions
argument_list|()
expr_stmt|;
comment|// We look up row-column Bloom filters for multi-column queries as part of
comment|// the seek operation. However, we also look the row-column Bloom filter
comment|// for multi-row (non-"get") scans because this is not done in
comment|// StoreFile.passesBloomFilter(Scan, SortedSet<byte[]>).
name|this
operator|.
name|useRowColBloom
operator|=
name|numColumns
operator|>
literal|1
operator|||
operator|(
operator|!
name|get
operator|&&
name|numColumns
operator|==
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|maxRowSize
operator|=
name|scanInfo
operator|.
name|getTableMaxRowSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|get
condition|)
block|{
name|this
operator|.
name|readType
operator|=
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
expr_stmt|;
name|this
operator|.
name|scanUsePread
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scanType
operator|!=
name|ScanType
operator|.
name|USER_SCAN
condition|)
block|{
comment|// For compaction scanners never use Pread as already we have stream based scanners on the
comment|// store files to be compacted
name|this
operator|.
name|readType
operator|=
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
expr_stmt|;
name|this
operator|.
name|scanUsePread
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|scan
operator|.
name|getReadType
argument_list|()
operator|==
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
condition|)
block|{
name|this
operator|.
name|readType
operator|=
name|scanInfo
operator|.
name|isUsePread
argument_list|()
condition|?
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
else|:
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|readType
operator|=
name|scan
operator|.
name|getReadType
argument_list|()
expr_stmt|;
block|}
comment|// Always start with pread unless user specific stream. Will change to stream later if
comment|// readType is default if the scan keeps running for a long time.
name|this
operator|.
name|scanUsePread
operator|=
name|this
operator|.
name|readType
operator|!=
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
expr_stmt|;
block|}
name|this
operator|.
name|preadMaxBytes
operator|=
name|scanInfo
operator|.
name|getPreadMaxBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|cellsPerHeartbeatCheck
operator|=
name|scanInfo
operator|.
name|getCellsPerTimeoutCheck
argument_list|()
expr_stmt|;
comment|// Parallel seeking is on if the config allows and more there is more than one store file.
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|RegionServerServices
name|rsService
init|=
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|getRegionServerServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsService
operator|!=
literal|null
operator|&&
name|scanInfo
operator|.
name|isParallelSeekEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|parallelSeekEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|rsService
operator|.
name|getExecutorService
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addCurrentScanners
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
block|{
name|this
operator|.
name|currentScanners
operator|.
name|addAll
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opens a scanner across memstore, snapshot, and all StoreFiles. Assumes we    * are not in a compaction.    *    * @param store who we scan    * @param scan the spec    * @param columns which columns we are scanning    * @throws IOException    */
specifier|public
name|StoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|store
argument_list|,
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
operator|!=
literal|null
condition|?
name|columns
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|,
name|readPt
argument_list|,
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|,
name|ScanType
operator|.
name|USER_SCAN
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|scan
operator|.
name|isRaw
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cannot specify any column for a raw scan"
argument_list|)
throw|;
block|}
name|matcher
operator|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
name|store
operator|.
name|getCoprocessorHost
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|addChangedReaderObserver
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Pass columns to try to filter out unnecessary StoreFiles.
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|selectScannersFrom
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanners
argument_list|(
name|cacheBlocks
argument_list|,
name|scanUsePread
argument_list|,
literal|false
argument_list|,
name|matcher
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|,
name|this
operator|.
name|readPt
argument_list|)
argument_list|)
decl_stmt|;
comment|// Seek all scanners to the start of the Row (or if the exact matching row
comment|// key does not exist, then to the start of the next matching Row).
comment|// Always check bloom filter to optimize the top row seek for delete
comment|// family marker.
name|seekScanners
argument_list|(
name|scanners
argument_list|,
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|explicitColumnQuery
operator|&&
name|lazySeekEnabledGlobally
argument_list|,
name|parallelSeekEnabled
argument_list|)
expr_stmt|;
comment|// set storeLimit
name|this
operator|.
name|storeLimit
operator|=
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
expr_stmt|;
comment|// set rowOffset
name|this
operator|.
name|storeOffset
operator|=
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
expr_stmt|;
name|addCurrentScanners
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
comment|// Combine all seeked scanners with a heap
name|resetKVHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// remove us from the HStore#changedReaderObservers here or we'll have no chance to
comment|// and might cause memory leak
name|store
operator|.
name|deleteChangedReaderObserver
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// a dummy scan instance for compaction.
specifier|private
specifier|static
specifier|final
name|Scan
name|SCAN_FOR_COMPACTION
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|/**    * Used for store file compaction and memstore compaction.    *<p>    * Opens a scanner across specified StoreFiles/MemStoreSegments.    * @param store who we scan    * @param scanners ancillary scanners    * @param smallestReadPoint the readPoint that we should use for tracking versions    */
specifier|public
name|StoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scanners
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used for compactions that drop deletes from a limited range of rows.    *<p>    * Opens a scanner across specified StoreFiles.    * @param store who we scan    * @param scanners ancillary scanners    * @param smallestReadPoint the readPoint that we should use for tracking versions    * @param dropDeletesFromRow The inclusive left bound of the range; can be EMPTY_START_ROW.    * @param dropDeletesToRow The exclusive right bound of the range; can be EMPTY_END_ROW.    */
specifier|public
name|StoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scanners
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|,
name|dropDeletesFromRow
argument_list|,
name|dropDeletesToRow
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|store
argument_list|,
name|SCAN_FOR_COMPACTION
argument_list|,
name|scanInfo
argument_list|,
literal|0
argument_list|,
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|getReadPoint
argument_list|(
name|IsolationLevel
operator|.
name|READ_COMMITTED
argument_list|)
argument_list|,
literal|false
argument_list|,
name|scanType
argument_list|)
expr_stmt|;
assert|assert
name|scanType
operator|!=
name|ScanType
operator|.
name|USER_SCAN
assert|;
name|matcher
operator|=
name|CompactionScanQueryMatcher
operator|.
name|create
argument_list|(
name|scanInfo
argument_list|,
name|scanType
argument_list|,
name|smallestReadPoint
argument_list|,
name|earliestPutTs
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
name|dropDeletesFromRow
argument_list|,
name|dropDeletesToRow
argument_list|,
name|store
operator|.
name|getCoprocessorHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filter the list of scanners using Bloom filters, time range, TTL, etc.
name|scanners
operator|=
name|selectScannersFrom
argument_list|(
name|store
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
comment|// Seek all scanners to the initial key
name|seekScanners
argument_list|(
name|scanners
argument_list|,
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|,
name|parallelSeekEnabled
argument_list|)
expr_stmt|;
name|addCurrentScanners
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
comment|// Combine all seeked scanners with a heap
name|resetKVHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|seekAllScanner
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Seek all scanners to the initial key
name|seekScanners
argument_list|(
name|scanners
argument_list|,
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|,
name|parallelSeekEnabled
argument_list|)
expr_stmt|;
name|addCurrentScanners
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
name|resetKVHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|// For mob compaction only as we do not have a Store instance when doing mob compaction.
specifier|public
name|StoreScanner
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|SCAN_FOR_COMPACTION
argument_list|,
name|scanInfo
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|,
name|scanType
argument_list|)
expr_stmt|;
assert|assert
name|scanType
operator|!=
name|ScanType
operator|.
name|USER_SCAN
assert|;
name|this
operator|.
name|matcher
operator|=
name|CompactionScanQueryMatcher
operator|.
name|create
argument_list|(
name|scanInfo
argument_list|,
name|scanType
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0L
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|seekAllScanner
argument_list|(
name|scanInfo
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
block|}
comment|// Used to instantiate a scanner for user scan in test
annotation|@
name|VisibleForTesting
name|StoreScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 0 is passed as readpoint because the test bypasses Store
name|this
argument_list|(
literal|null
argument_list|,
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
operator|!=
literal|null
condition|?
name|columns
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|,
literal|0L
argument_list|,
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|,
name|ScanType
operator|.
name|USER_SCAN
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|columns
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|seekAllScanner
argument_list|(
name|scanInfo
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
block|}
comment|// Used to instantiate a scanner for compaction in test
annotation|@
name|VisibleForTesting
name|StoreScanner
parameter_list|(
name|ScanInfo
name|scanInfo
parameter_list|,
name|OptionalInt
name|maxVersions
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 0 is passed as readpoint because the test bypasses Store
name|this
argument_list|(
literal|null
argument_list|,
name|maxVersions
operator|.
name|isPresent
argument_list|()
condition|?
operator|new
name|Scan
argument_list|()
operator|.
name|readVersions
argument_list|(
name|maxVersions
operator|.
name|getAsInt
argument_list|()
argument_list|)
else|:
name|SCAN_FOR_COMPACTION
argument_list|,
name|scanInfo
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
literal|false
argument_list|,
name|scanType
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
name|CompactionScanQueryMatcher
operator|.
name|create
argument_list|(
name|scanInfo
argument_list|,
name|scanType
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
argument_list|,
name|oldestUnexpiredTS
argument_list|,
name|now
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|seekAllScanner
argument_list|(
name|scanInfo
argument_list|,
name|scanners
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|boolean
name|isScanUsePread
parameter_list|()
block|{
return|return
name|this
operator|.
name|scanUsePread
return|;
block|}
comment|/**    * Seek the specified scanners with the given key    * @param scanners    * @param seekKey    * @param isLazy true if using lazy seek    * @param isParallelSeek true if using parallel seek    * @throws IOException    */
specifier|protected
name|void
name|seekScanners
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|Cell
name|seekKey
parameter_list|,
name|boolean
name|isLazy
parameter_list|,
name|boolean
name|isParallelSeek
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Seek all scanners to the start of the Row (or if the exact matching row
comment|// key does not exist, then to the start of the next matching Row).
comment|// Always check bloom filter to optimize the top row seek for delete
comment|// family marker.
if|if
condition|(
name|isLazy
condition|)
block|{
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|requestSeek
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isParallelSeek
condition|)
block|{
name|long
name|totalScannersSoughtBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|isUserScan
argument_list|()
operator|&&
name|totalScannersSoughtBytes
operator|>=
name|maxRowSize
condition|)
block|{
throw|throw
operator|new
name|RowTooBigException
argument_list|(
literal|"Max row size allowed: "
operator|+
name|maxRowSize
operator|+
literal|", but row is bigger than that"
argument_list|)
throw|;
block|}
name|scanner
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|scanner
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|totalScannersSoughtBytes
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|parallelSeek
argument_list|(
name|scanners
argument_list|,
name|seekKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|resetKVHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Combine all seeked scanners with a heap
name|heap
operator|=
name|newKVHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|KeyValueHeap
name|newKVHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
return|;
block|}
comment|/**    * Filters the given list of scanners using Bloom filter, time range, and TTL.    *<p>    * Will be overridden by testcase so declared as protected.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|selectScannersFrom
parameter_list|(
name|HStore
name|store
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|allScanners
parameter_list|)
block|{
name|boolean
name|memOnly
decl_stmt|;
name|boolean
name|filesOnly
decl_stmt|;
if|if
condition|(
name|scan
operator|instanceof
name|InternalScan
condition|)
block|{
name|InternalScan
name|iscan
init|=
operator|(
name|InternalScan
operator|)
name|scan
decl_stmt|;
name|memOnly
operator|=
name|iscan
operator|.
name|isCheckOnlyMemStore
argument_list|()
expr_stmt|;
name|filesOnly
operator|=
name|iscan
operator|.
name|isCheckOnlyStoreFiles
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|memOnly
operator|=
literal|false
expr_stmt|;
name|filesOnly
operator|=
literal|false
expr_stmt|;
block|}
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allScanners
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// We can only exclude store files based on TTL if minVersions is set to 0.
comment|// Otherwise, we might have to return KVs that have technically expired.
name|long
name|expiredTimestampCutoff
init|=
name|minVersions
operator|==
literal|0
condition|?
name|oldestUnexpiredTS
else|:
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// include only those scan files which pass all filters
for|for
control|(
name|KeyValueScanner
name|kvs
range|:
name|allScanners
control|)
block|{
name|boolean
name|isFile
init|=
name|kvs
operator|.
name|isFileScanner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isFile
operator|&&
name|filesOnly
operator|)
operator|||
operator|(
name|isFile
operator|&&
name|memOnly
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|kvs
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|expiredTimestampCutoff
argument_list|)
condition|)
block|{
name|scanners
operator|.
name|add
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kvs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|scanners
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|peek
parameter_list|()
block|{
return|return
name|heap
operator|!=
literal|null
condition|?
name|heap
operator|.
name|peek
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|next
parameter_list|()
block|{
comment|// throw runtime exception perhaps?
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Never call StoreScanner.next()"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|boolean
name|withDelayedScannersClose
parameter_list|)
block|{
name|closeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If the closeLock is acquired then any subsequent updateReaders()
comment|// call is ignored.
try|try
block|{
if|if
condition|(
name|this
operator|.
name|closing
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|withDelayedScannersClose
condition|)
block|{
name|this
operator|.
name|closing
operator|=
literal|true
expr_stmt|;
block|}
comment|// For mob compaction, we do not have a store.
if|if
condition|(
name|this
operator|.
name|store
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|deleteChangedReaderObserver
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withDelayedScannersClose
condition|)
block|{
name|clearAndClose
argument_list|(
name|scannersForDelayedClose
argument_list|)
expr_stmt|;
name|clearAndClose
argument_list|(
name|memStoreScannersAfterFlush
argument_list|)
expr_stmt|;
name|clearAndClose
argument_list|(
name|flushedstoreFileScanners
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentScanners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|heap
operator|=
literal|null
expr_stmt|;
comment|// CLOSED!
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scannersForDelayedClose
operator|.
name|add
argument_list|(
name|this
operator|.
name|heap
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentScanners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|heap
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|closeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seek
parameter_list|(
name|Cell
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkFlushed
argument_list|()
condition|)
block|{
name|reopenAfterFlush
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|heap
operator|.
name|seek
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Get the next row of values from this Store.    * @param outResult    * @param scannerContext    * @return true if there are more rows, false if scanner is done    */
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|outResult
parameter_list|,
name|ScannerContext
name|scannerContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scannerContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Scanner context cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|checkFlushed
argument_list|()
operator|&&
name|reopenAfterFlush
argument_list|()
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
comment|// if the heap was left null, then the scanners had previously run out anyways, close and
comment|// return.
if|if
condition|(
name|this
operator|.
name|heap
operator|==
literal|null
condition|)
block|{
comment|// By this time partial close should happened because already heap is null
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
name|Cell
name|cell
init|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
comment|// only call setRow if the row changes; avoids confusing the query matcher
comment|// if scanning intra-row
comment|// If no limits exists in the scope LimitScope.Between_Cells then we are sure we are changing
comment|// rows. Else it is possible we are still traversing the same row so we must perform the row
comment|// comparison.
if|if
condition|(
operator|!
name|scannerContext
operator|.
name|hasAnyLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_CELLS
argument_list|)
operator|||
name|matcher
operator|.
name|currentRow
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|countPerRow
operator|=
literal|0
expr_stmt|;
name|matcher
operator|.
name|setToNewRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
comment|// Clear progress away unless invoker has indicated it should be kept.
if|if
condition|(
operator|!
name|scannerContext
operator|.
name|getKeepProgress
argument_list|()
condition|)
block|{
name|scannerContext
operator|.
name|clearProgress
argument_list|()
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|LOOP
label|:
do|do
block|{
comment|// Update and check the time limit based on the configured value of cellsPerTimeoutCheck
comment|// Or if the preadMaxBytes is reached and we may want to return so we can switch to stream in
comment|// the shipped method below.
if|if
condition|(
name|kvsScanned
operator|%
name|cellsPerHeartbeatCheck
operator|==
literal|0
operator|||
operator|(
name|scanUsePread
operator|&&
name|readType
operator|==
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
operator|&&
name|bytesRead
operator|>
name|preadMaxBytes
operator|)
condition|)
block|{
if|if
condition|(
name|scannerContext
operator|.
name|checkTimeLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_CELLS
argument_list|)
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|TIME_LIMIT_REACHED
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
block|}
comment|// Do object compare - we set prevKV from the same heap.
if|if
condition|(
name|prevCell
operator|!=
name|cell
condition|)
block|{
operator|++
name|kvsScanned
expr_stmt|;
block|}
name|checkScanOrder
argument_list|(
name|prevCell
argument_list|,
name|cell
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|int
name|cellSize
init|=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|bytesRead
operator|+=
name|cellSize
expr_stmt|;
if|if
condition|(
name|scanUsePread
operator|&&
name|readType
operator|==
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
operator|&&
name|bytesRead
operator|>
name|preadMaxBytes
condition|)
block|{
comment|// return immediately if we want to switch from pread to stream. We need this because we can
comment|// only switch in the shipped method, if user use a filter to filter out everything and rpc
comment|// timeout is very large then the shipped method will never be called until the whole scan
comment|// is finished, but at that time we have already scan all the data...
comment|// See HBASE-20457 for more details.
comment|// And there is still a scenario that can not be handled. If we have a very large row, which
comment|// have millions of qualifiers, and filter.filterRow is used, then even if we set the flag
comment|// here, we still need to scan all the qualifiers before returning...
name|scannerContext
operator|.
name|returnImmediately
argument_list|()
expr_stmt|;
block|}
name|prevCell
operator|=
name|cell
expr_stmt|;
name|scannerContext
operator|.
name|setLastPeekedCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|topChanged
operator|=
literal|false
expr_stmt|;
name|ScanQueryMatcher
operator|.
name|MatchCode
name|qcode
init|=
name|matcher
operator|.
name|match
argument_list|(
name|cell
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|qcode
condition|)
block|{
case|case
name|INCLUDE
case|:
case|case
name|INCLUDE_AND_SEEK_NEXT_ROW
case|:
case|case
name|INCLUDE_AND_SEEK_NEXT_COL
case|:
name|Filter
name|f
init|=
name|matcher
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|cell
operator|=
name|f
operator|.
name|transformCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|countPerRow
operator|++
expr_stmt|;
if|if
condition|(
name|storeLimit
operator|>
operator|-
literal|1
operator|&&
name|this
operator|.
name|countPerRow
operator|>
operator|(
name|storeLimit
operator|+
name|storeOffset
operator|)
condition|)
block|{
comment|// do what SEEK_NEXT_ROW does.
if|if
condition|(
operator|!
name|matcher
operator|.
name|moreRowsMayExistAfter
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
name|matcher
operator|.
name|clearCurrentRow
argument_list|()
expr_stmt|;
name|seekToNextRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
break|break
name|LOOP
break|;
block|}
comment|// add to results only if we have skipped #storeOffset kvs
comment|// also update metric accordingly
if|if
condition|(
name|this
operator|.
name|countPerRow
operator|>
name|storeOffset
condition|)
block|{
name|outResult
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
comment|// Update local tracking information
name|count
operator|++
expr_stmt|;
name|totalBytesRead
operator|+=
name|cellSize
expr_stmt|;
comment|// Update the progress of the scanner context
name|scannerContext
operator|.
name|incrementSizeProgress
argument_list|(
name|cellSize
argument_list|,
name|cell
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|scannerContext
operator|.
name|incrementBatchProgress
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|isUserScan
argument_list|()
operator|&&
name|totalBytesRead
operator|>
name|maxRowSize
condition|)
block|{
throw|throw
operator|new
name|RowTooBigException
argument_list|(
literal|"Max row size allowed: "
operator|+
name|maxRowSize
operator|+
literal|", but the row is bigger than that."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|qcode
operator|==
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
condition|)
block|{
if|if
condition|(
operator|!
name|matcher
operator|.
name|moreRowsMayExistAfter
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
name|matcher
operator|.
name|clearCurrentRow
argument_list|()
expr_stmt|;
name|seekOrSkipToNextRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qcode
operator|==
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
condition|)
block|{
name|seekOrSkipToNextColumn
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scannerContext
operator|.
name|checkBatchLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_CELLS
argument_list|)
condition|)
block|{
break|break
name|LOOP
break|;
block|}
if|if
condition|(
name|scannerContext
operator|.
name|checkSizeLimit
argument_list|(
name|LimitScope
operator|.
name|BETWEEN_CELLS
argument_list|)
condition|)
block|{
break|break
name|LOOP
break|;
block|}
continue|continue;
case|case
name|DONE
case|:
comment|// Optimization for Gets! If DONE, no more to get on this row, early exit!
if|if
condition|(
name|get
condition|)
block|{
comment|// Then no more to this row... exit.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
name|matcher
operator|.
name|clearCurrentRow
argument_list|()
expr_stmt|;
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
case|case
name|DONE_SCAN
case|:
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
case|case
name|SEEK_NEXT_ROW
case|:
comment|// This is just a relatively simple end of scan fix, to short-cut end
comment|// us if there is an endKey in the scan.
if|if
condition|(
operator|!
name|matcher
operator|.
name|moreRowsMayExistAfter
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
name|matcher
operator|.
name|clearCurrentRow
argument_list|()
expr_stmt|;
name|seekOrSkipToNextRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|NextState
name|stateAfterSeekNextRow
init|=
name|needToReturn
argument_list|(
name|outResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateAfterSeekNextRow
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|stateAfterSeekNextRow
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
break|break;
case|case
name|SEEK_NEXT_COL
case|:
name|seekOrSkipToNextColumn
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|NextState
name|stateAfterSeekNextColumn
init|=
name|needToReturn
argument_list|(
name|outResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateAfterSeekNextColumn
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|stateAfterSeekNextColumn
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
break|break;
case|case
name|SKIP
case|:
name|this
operator|.
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
break|break;
case|case
name|SEEK_NEXT_USING_HINT
case|:
name|Cell
name|nextKV
init|=
name|matcher
operator|.
name|getNextKeyHint
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextKV
operator|!=
literal|null
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|nextKV
argument_list|,
name|cell
argument_list|)
operator|>
literal|0
condition|)
block|{
name|seekAsDirection
argument_list|(
name|nextKV
argument_list|)
expr_stmt|;
name|NextState
name|stateAfterSeekByHint
init|=
name|needToReturn
argument_list|(
name|outResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateAfterSeekByHint
operator|!=
literal|null
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|stateAfterSeekByHint
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UNEXPECTED"
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|(
name|cell
operator|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
comment|// No more keys
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Do all cleanup except heap.close()
return|return
name|scannerContext
operator|.
name|setScannerState
argument_list|(
name|NextState
operator|.
name|NO_MORE_VALUES
argument_list|)
operator|.
name|hasMoreValues
argument_list|()
return|;
block|}
comment|/**    * If the top cell won't be flushed into disk, the new top cell may be    * changed after #reopenAfterFlush. Because the older top cell only exist    * in the memstore scanner but the memstore scanner is replaced by hfile    * scanner after #reopenAfterFlush. If the row of top cell is changed,    * we should return the current cells. Otherwise, we may return    * the cells across different rows.    * @param outResult the cells which are visible for user scan    * @return null is the top cell doesn't change. Otherwise, the NextState    *         to return    */
specifier|private
name|NextState
name|needToReturn
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|outResult
parameter_list|)
block|{
if|if
condition|(
operator|!
name|outResult
operator|.
name|isEmpty
argument_list|()
operator|&&
name|topChanged
condition|)
block|{
return|return
name|heap
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|?
name|NextState
operator|.
name|NO_MORE_VALUES
else|:
name|NextState
operator|.
name|MORE_VALUES
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|seekOrSkipToNextRow
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If it is a Get Scan, then we know that we are done with this row; there are no more
comment|// rows beyond the current one: don't try to optimize.
if|if
condition|(
operator|!
name|get
condition|)
block|{
if|if
condition|(
name|trySkipToNextRow
argument_list|(
name|cell
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|seekToNextRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|seekOrSkipToNextColumn
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|trySkipToNextColumn
argument_list|(
name|cell
argument_list|)
condition|)
block|{
name|seekAsDirection
argument_list|(
name|matcher
operator|.
name|getKeyForNextColumn
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * See if we should actually SEEK or rather just SKIP to the next Cell (see HBASE-13109).    * ScanQueryMatcher may issue SEEK hints, such as seek to next column, next row,    * or seek to an arbitrary seek key. This method decides whether a seek is the most efficient    * _actual_ way to get us to the requested cell (SEEKs are more expensive than SKIP, SKIP,    * SKIP inside the current, loaded block).    * It does this by looking at the next indexed key of the current HFile. This key    * is then compared with the _SEEK_ key, where a SEEK key is an artificial 'last possible key    * on the row' (only in here, we avoid actually creating a SEEK key; in the compare we work with    * the current Cell but compare as though it were a seek key; see down in    * matcher.compareKeyForNextRow, etc). If the compare gets us onto the    * next block we *_SEEK, otherwise we just SKIP to the next requested cell.    *    *<p>Other notes:    *<ul>    *<li>Rows can straddle block boundaries</li>    *<li>Versions of columns can straddle block boundaries (i.e. column C1 at T1 might be in a    * different block than column C1 at T2)</li>    *<li>We want to SKIP if the chance is high that we'll find the desired Cell after a    * few SKIPs...</li>    *<li>We want to SEEK when the chance is high that we'll be able to seek    * past many Cells, especially if we know we need to go to the next block.</li>    *</ul>    *<p>A good proxy (best effort) to determine whether SKIP is better than SEEK is whether    * we'll likely end up seeking to the next block (or past the next block) to get our next column.    * Example:    *<pre>    * |    BLOCK 1              |     BLOCK 2                   |    * |  r1/c1, r1/c2, r1/c3    |    r1/c4, r1/c5, r2/c1        |    *                                   ^         ^    *                                   |         |    *                           Next Index Key   SEEK_NEXT_ROW (before r2/c1)    *    *    * |    BLOCK 1                       |     BLOCK 2                      |    * |  r1/c1/t5, r1/c1/t4, r1/c1/t3    |    r1/c1/t2, r1/c1/T1, r1/c2/T3  |    *                                            ^              ^    *                                            |              |    *                                    Next Index Key        SEEK_NEXT_COL    *</pre>    * Now imagine we want columns c1 and c3 (see first diagram above), the 'Next Index Key' of r1/c4    * is> r1/c3 so we should seek to get to the c1 on the next row, r2. In second case, say we only    * want one version of c1, after we have it, a SEEK_COL will be issued to get to c2. Looking at    * the 'Next Index Key', it would land us in the next block, so we should SEEK. In other scenarios    * where the SEEK will not land us in the next block, it is very likely better to issues a series    * of SKIPs.    * @param cell current cell    * @return true means skip to next row, false means not    */
annotation|@
name|VisibleForTesting
specifier|protected
name|boolean
name|trySkipToNextRow
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|nextCell
init|=
literal|null
decl_stmt|;
comment|// used to guard against a changed next indexed key by doing a identity comparison
comment|// when the identity changes we need to compare the bytes again
name|Cell
name|previousIndexedKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|Cell
name|nextIndexedKey
init|=
name|getNextIndexedKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextIndexedKey
operator|!=
literal|null
operator|&&
name|nextIndexedKey
operator|!=
name|KeyValueScanner
operator|.
name|NO_NEXT_INDEXED_KEY
operator|&&
operator|(
name|nextIndexedKey
operator|==
name|previousIndexedKey
operator|||
name|matcher
operator|.
name|compareKeyForNextRow
argument_list|(
name|nextIndexedKey
argument_list|,
name|cell
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
operator|++
name|kvsScanned
expr_stmt|;
name|previousIndexedKey
operator|=
name|nextIndexedKey
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
operator|(
name|nextCell
operator|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|cell
argument_list|,
name|nextCell
argument_list|)
condition|)
do|;
return|return
literal|true
return|;
block|}
comment|/**    * See {@link org.apache.hadoop.hbase.regionserver.StoreScanner#trySkipToNextRow(Cell)}    * @param cell current cell    * @return true means skip to next column, false means not    */
annotation|@
name|VisibleForTesting
specifier|protected
name|boolean
name|trySkipToNextColumn
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|nextCell
init|=
literal|null
decl_stmt|;
comment|// used to guard against a changed next indexed key by doing a identity comparison
comment|// when the identity changes we need to compare the bytes again
name|Cell
name|previousIndexedKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|Cell
name|nextIndexedKey
init|=
name|getNextIndexedKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextIndexedKey
operator|!=
literal|null
operator|&&
name|nextIndexedKey
operator|!=
name|KeyValueScanner
operator|.
name|NO_NEXT_INDEXED_KEY
operator|&&
operator|(
name|nextIndexedKey
operator|==
name|previousIndexedKey
operator|||
name|matcher
operator|.
name|compareKeyForNextColumn
argument_list|(
name|nextIndexedKey
argument_list|,
name|cell
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
operator|++
name|kvsScanned
expr_stmt|;
name|previousIndexedKey
operator|=
name|nextIndexedKey
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
operator|(
name|nextCell
operator|=
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|CellUtil
operator|.
name|matchingRowColumn
argument_list|(
name|cell
argument_list|,
name|nextCell
argument_list|)
condition|)
do|;
comment|// We need this check because it may happen that the new scanner that we get
comment|// during heap.next() is requiring reseek due of fake KV previously generated for
comment|// ROWCOL bloom filter optimization. See HBASE-19863 for more details
if|if
condition|(
name|nextCell
operator|!=
literal|null
operator|&&
name|matcher
operator|.
name|compareKeyForNextColumn
argument_list|(
name|nextCell
argument_list|,
name|cell
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadPoint
parameter_list|()
block|{
return|return
name|this
operator|.
name|readPt
return|;
block|}
specifier|private
specifier|static
name|void
name|clearAndClose
parameter_list|(
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|)
block|{
for|for
control|(
name|KeyValueScanner
name|s
range|:
name|scanners
control|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|scanners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Implementation of ChangedReadersObserver
annotation|@
name|Override
specifier|public
name|void
name|updateReaders
parameter_list|(
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|sfs
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memStoreScanners
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|sfs
argument_list|)
operator|&&
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|memStoreScanners
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|updateReaders
init|=
literal|false
decl_stmt|;
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|closeLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
comment|// The reason for doing this is that when the current store scanner does not retrieve
comment|// any new cells, then the scanner is considered to be done. The heap of this scanner
comment|// is not closed till the shipped() call is completed. Hence in that case if at all
comment|// the partial close (close (false)) has been called before updateReaders(), there is no
comment|// need for the updateReaders() to happen.
name|LOG
operator|.
name|debug
argument_list|(
literal|"StoreScanner already has the close lock. There is no need to updateReaders"
argument_list|)
expr_stmt|;
comment|// no lock acquired.
return|return;
block|}
comment|// lock acquired
name|updateReaders
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|closing
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"StoreScanner already closing. There is no need to updateReaders"
argument_list|)
expr_stmt|;
return|return;
block|}
name|flushed
operator|=
literal|true
expr_stmt|;
specifier|final
name|boolean
name|isCompaction
init|=
literal|false
decl_stmt|;
name|boolean
name|usePread
init|=
name|get
operator|||
name|scanUsePread
decl_stmt|;
comment|// SEE HBASE-19468 where the flushed files are getting compacted even before a scanner
comment|// calls next(). So its better we create scanners here rather than next() call. Ensure
comment|// these scanners are properly closed() whether or not the scan is completed successfully
comment|// Eagerly creating scanners so that we have the ref counting ticking on the newly created
comment|// store files. In case of stream scanners this eager creation does not induce performance
comment|// penalty because in scans (that uses stream scanners) the next() call is bound to happen.
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|store
operator|.
name|getScanners
argument_list|(
name|sfs
argument_list|,
name|cacheBlocks
argument_list|,
name|get
argument_list|,
name|usePread
argument_list|,
name|isCompaction
argument_list|,
name|matcher
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|this
operator|.
name|readPt
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|flushedstoreFileScanners
operator|.
name|addAll
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|memStoreScanners
argument_list|)
condition|)
block|{
name|clearAndClose
argument_list|(
name|memStoreScannersAfterFlush
argument_list|)
expr_stmt|;
name|memStoreScannersAfterFlush
operator|.
name|addAll
argument_list|(
name|memStoreScanners
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateReaders
condition|)
block|{
name|closeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Let the next() call handle re-creating and seeking
block|}
comment|/**    * @return if top of heap has changed (and KeyValueHeap has to try the next KV)    */
specifier|protected
specifier|final
name|boolean
name|reopenAfterFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// here we can make sure that we have a Store instance so no null check on store.
name|Cell
name|lastTop
init|=
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// When we have the scan object, should we not pass it to getScanners() to get a limited set of
comment|// scanners? We did so in the constructor and we could have done it now by storing the scan
comment|// object from the constructor
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
decl_stmt|;
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|allScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|flushedstoreFileScanners
operator|.
name|size
argument_list|()
operator|+
name|memStoreScannersAfterFlush
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allScanners
operator|.
name|addAll
argument_list|(
name|flushedstoreFileScanners
argument_list|)
expr_stmt|;
name|allScanners
operator|.
name|addAll
argument_list|(
name|memStoreScannersAfterFlush
argument_list|)
expr_stmt|;
name|scanners
operator|=
name|selectScannersFrom
argument_list|(
name|store
argument_list|,
name|allScanners
argument_list|)
expr_stmt|;
comment|// Clear the current set of flushed store files scanners so that they don't get added again
name|flushedstoreFileScanners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|memStoreScannersAfterFlush
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Seek the new scanners to the last key
name|seekScanners
argument_list|(
name|scanners
argument_list|,
name|lastTop
argument_list|,
literal|false
argument_list|,
name|parallelSeekEnabled
argument_list|)
expr_stmt|;
comment|// remove the older memstore scanner
for|for
control|(
name|int
name|i
init|=
name|currentScanners
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|currentScanners
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isFileScanner
argument_list|()
condition|)
block|{
name|scannersForDelayedClose
operator|.
name|add
argument_list|(
name|currentScanners
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we add the memstore scanner to the end of currentScanners
break|break;
block|}
block|}
comment|// add the newly created scanners on the flushed files and the current active memstore scanner
name|addCurrentScanners
argument_list|(
name|scanners
argument_list|)
expr_stmt|;
comment|// Combine all seeked scanners with a heap
name|resetKVHeap
argument_list|(
name|this
operator|.
name|currentScanners
argument_list|,
name|store
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resetQueryMatcher
argument_list|(
name|lastTop
argument_list|)
expr_stmt|;
if|if
condition|(
name|heap
operator|.
name|peek
argument_list|()
operator|==
literal|null
operator|||
name|store
operator|.
name|getComparator
argument_list|()
operator|.
name|compareRows
argument_list|(
name|lastTop
argument_list|,
name|this
operator|.
name|heap
operator|.
name|peek
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storescanner.peek() is changed where before = "
operator|+
name|lastTop
operator|.
name|toString
argument_list|()
operator|+
literal|",and after = "
operator|+
name|heap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|topChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|topChanged
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|topChanged
return|;
block|}
specifier|private
name|void
name|resetQueryMatcher
parameter_list|(
name|Cell
name|lastTopKey
parameter_list|)
block|{
comment|// Reset the state of the Query Matcher and set to top row.
comment|// Only reset and call setRow if the row changes; avoids confusing the
comment|// query matcher if scanning intra-row.
name|Cell
name|cell
init|=
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|lastTopKey
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|matcher
operator|.
name|currentRow
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|!
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|cell
argument_list|,
name|matcher
operator|.
name|currentRow
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|countPerRow
operator|=
literal|0
expr_stmt|;
comment|// The setToNewRow will call reset internally
name|matcher
operator|.
name|setToNewRow
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check whether scan as expected order    * @param prevKV    * @param kv    * @param comparator    * @throws IOException    */
specifier|protected
name|void
name|checkScanOrder
parameter_list|(
name|Cell
name|prevKV
parameter_list|,
name|Cell
name|kv
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check that the heap gives us KVs in an increasing order.
assert|assert
name|prevKV
operator|==
literal|null
operator|||
name|comparator
operator|==
literal|null
operator|||
name|comparator
operator|.
name|compare
argument_list|(
name|prevKV
argument_list|,
name|kv
argument_list|)
operator|<=
literal|0
operator|:
literal|"Key "
operator|+
name|prevKV
operator|+
literal|" followed by a "
operator|+
literal|"smaller key "
operator|+
name|kv
operator|+
literal|" in cf "
operator|+
name|store
assert|;
block|}
specifier|protected
name|boolean
name|seekToNextRow
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reseek
argument_list|(
name|PrivateCellUtil
operator|.
name|createLastOnRow
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Do a reseek in a normal StoreScanner(scan forward)    * @param kv    * @return true if scanner has values left, false if end of scanner    * @throws IOException    */
specifier|protected
name|boolean
name|seekAsDirection
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reseek
argument_list|(
name|kv
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkFlushed
argument_list|()
condition|)
block|{
name|reopenAfterFlush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|explicitColumnQuery
operator|&&
name|lazySeekEnabledGlobally
condition|)
block|{
return|return
name|heap
operator|.
name|requestSeek
argument_list|(
name|kv
argument_list|,
literal|true
argument_list|,
name|useRowColBloom
argument_list|)
return|;
block|}
return|return
name|heap
operator|.
name|reseek
argument_list|(
name|kv
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|trySwitchToStreamRead
parameter_list|()
block|{
if|if
condition|(
name|readType
operator|!=
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
operator|||
operator|!
name|scanUsePread
operator|||
name|closing
operator|||
name|heap
operator|.
name|peek
argument_list|()
operator|==
literal|null
operator|||
name|bytesRead
operator|<
name|preadMaxBytes
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Switch to stream read (scanned={} bytes) of {}"
argument_list|,
name|bytesRead
argument_list|,
name|this
operator|.
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|scanUsePread
operator|=
literal|false
expr_stmt|;
name|Cell
name|lastTop
init|=
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memstoreScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scannersToClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|kvs
range|:
name|currentScanners
control|)
block|{
if|if
condition|(
operator|!
name|kvs
operator|.
name|isFileScanner
argument_list|()
condition|)
block|{
comment|// collect memstorescanners here
name|memstoreScanners
operator|.
name|add
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scannersToClose
operator|.
name|add
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|fileScanners
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|newCurrentScanners
decl_stmt|;
name|KeyValueHeap
name|newHeap
decl_stmt|;
try|try
block|{
comment|// We must have a store instance here so no null check
comment|// recreate the scanners on the current file scanners
name|fileScanners
operator|=
name|store
operator|.
name|recreateScanners
argument_list|(
name|scannersToClose
argument_list|,
name|cacheBlocks
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|matcher
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|,
name|readPt
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileScanners
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|seekScanners
argument_list|(
name|fileScanners
argument_list|,
name|lastTop
argument_list|,
literal|false
argument_list|,
name|parallelSeekEnabled
argument_list|)
expr_stmt|;
name|newCurrentScanners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fileScanners
operator|.
name|size
argument_list|()
operator|+
name|memstoreScanners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|newCurrentScanners
operator|.
name|addAll
argument_list|(
name|fileScanners
argument_list|)
expr_stmt|;
name|newCurrentScanners
operator|.
name|addAll
argument_list|(
name|memstoreScanners
argument_list|)
expr_stmt|;
name|newHeap
operator|=
name|newKVHeap
argument_list|(
name|newCurrentScanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to switch to stream read"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileScanners
operator|!=
literal|null
condition|)
block|{
name|fileScanners
operator|.
name|forEach
argument_list|(
name|KeyValueScanner
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|currentScanners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addCurrentScanners
argument_list|(
name|newCurrentScanners
argument_list|)
expr_stmt|;
name|this
operator|.
name|heap
operator|=
name|newHeap
expr_stmt|;
name|resetQueryMatcher
argument_list|(
name|lastTop
argument_list|)
expr_stmt|;
name|scannersToClose
operator|.
name|forEach
argument_list|(
name|KeyValueScanner
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|boolean
name|checkFlushed
parameter_list|()
block|{
comment|// check the var without any lock. Suppose even if we see the old
comment|// value here still it is ok to continue because we will not be resetting
comment|// the heap but will continue with the referenced memstore's snapshot. For compactions
comment|// any way we don't need the updateReaders at all to happen as we still continue with
comment|// the older files
if|if
condition|(
name|flushed
condition|)
block|{
comment|// If there is a flush and the current scan is notified on the flush ensure that the
comment|// scan's heap gets reset and we do a seek on the newly flushed file.
if|if
condition|(
name|this
operator|.
name|closing
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// reset the flag
name|flushed
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Seek storefiles in parallel to optimize IO latency as much as possible    * @param scanners the list {@link KeyValueScanner}s to be read from    * @param kv the KeyValue on which the operation is being requested    * @throws IOException    */
specifier|private
name|void
name|parallelSeek
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
specifier|final
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scanners
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|storeFileScannerCount
init|=
name|scanners
operator|.
name|size
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|storeFileScannerCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParallelSeekHandler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|storeFileScannerCount
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
if|if
condition|(
name|scanner
operator|instanceof
name|StoreFileScanner
condition|)
block|{
name|ParallelSeekHandler
name|seekHandler
init|=
operator|new
name|ParallelSeekHandler
argument_list|(
name|scanner
argument_list|,
name|kv
argument_list|,
name|this
operator|.
name|readPt
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
name|seekHandler
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|seekHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scanner
operator|.
name|seek
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
for|for
control|(
name|ParallelSeekHandler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|.
name|getErr
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|handler
operator|.
name|getErr
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Used in testing.    * @return all scanners in no particular order    */
annotation|@
name|VisibleForTesting
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|getAllScannersForTesting
parameter_list|()
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|allScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|KeyValueScanner
name|current
init|=
name|heap
operator|.
name|getCurrentForTesting
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|allScanners
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|heap
operator|.
name|getHeap
argument_list|()
control|)
name|allScanners
operator|.
name|add
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
return|return
name|allScanners
return|;
block|}
specifier|static
name|void
name|enableLazySeekGlobally
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|lazySeekEnabledGlobally
operator|=
name|enable
expr_stmt|;
block|}
comment|/**    * @return The estimated number of KVs seen by this scanner (includes some skipped KVs).    */
specifier|public
name|long
name|getEstimatedNumberOfKvsScanned
parameter_list|()
block|{
return|return
name|this
operator|.
name|kvsScanned
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextIndexedKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|heap
operator|.
name|getNextIndexedKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shipped
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|prevCell
operator|!=
literal|null
condition|)
block|{
comment|// Do the copy here so that in case the prevCell ref is pointing to the previous
comment|// blocks we can safely release those blocks.
comment|// This applies to blocks that are got from Bucket cache, L1 cache and the blocks
comment|// fetched from HDFS. Copying this would ensure that we let go the references to these
comment|// blocks so that they can be GCed safely(in case of bucket cache)
name|prevCell
operator|=
name|KeyValueUtil
operator|.
name|toNewKeyCell
argument_list|(
name|this
operator|.
name|prevCell
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
comment|// There wont be further fetch of Cells from these scanners. Just close.
name|clearAndClose
argument_list|(
name|scannersForDelayedClose
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|heap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|heap
operator|.
name|shipped
argument_list|()
expr_stmt|;
comment|// When switching from pread to stream, we will open a new scanner for each store file, but
comment|// the old scanner may still track the HFileBlocks we have scanned but not sent back to client
comment|// yet. If we close the scanner immediately then the HFileBlocks may be messed up by others
comment|// before we serialize and send it back to client. The HFileBlocks will be released in shipped
comment|// method, so we here will also open new scanners and close old scanners in shipped method.
comment|// See HBASE-18055 for more details.
name|trySwitchToStreamRead
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

