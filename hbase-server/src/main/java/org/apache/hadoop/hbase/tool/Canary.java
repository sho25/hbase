begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|Canary
operator|.
name|RegionTask
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * HBase Canary Tool, that that can be used to do  * "canary monitoring" of a running HBase cluster.  *  * Here are two modes  * 1. region mode - Foreach region tries to get one row per column family  * and outputs some information about failure or latency.  *  * 2. regionserver mode - Foreach regionserver tries to get one row from one table  * selected randomly and outputs some information about failure or latency.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Canary
implements|implements
name|Tool
block|{
comment|// Sink interface used by the canary to outputs information
specifier|public
interface|interface
name|Sink
block|{
specifier|public
name|long
name|getReadFailureCount
parameter_list|()
function_decl|;
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
function_decl|;
specifier|public
name|long
name|getWriteFailureCount
parameter_list|()
function_decl|;
specifier|public
name|void
name|publishWriteFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishWriteFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishWriteTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
function_decl|;
block|}
comment|// new extended sink for output regionserver mode info
comment|// do not change the Sink interface directly due to maintaining the API
specifier|public
interface|interface
name|ExtendedSink
extends|extends
name|Sink
block|{
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|server
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|server
parameter_list|,
name|long
name|msTime
parameter_list|)
function_decl|;
block|}
comment|// Simple implementation of canary sink that allows to plot on
comment|// file or standard output timings or failures.
specifier|public
specifier|static
class|class
name|StdOutSink
implements|implements
name|Sink
block|{
specifier|protected
name|AtomicLong
name|readFailureCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|writeFailureCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getReadFailureCount
parameter_list|()
block|{
return|return
name|readFailureCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|readFailureCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|readFailureCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s column family %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s column family %s in %dms"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|msTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteFailureCount
parameter_list|()
block|{
return|return
name|writeFailureCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishWriteFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|writeFailureCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"write to region %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishWriteFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|writeFailureCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"write to region %s column family %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishWriteTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"write to region %s column family %s in %dms"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|msTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// a ExtendedSink implementation
specifier|public
specifier|static
class|class
name|RegionServerStdOutSink
extends|extends
name|StdOutSink
implements|implements
name|ExtendedSink
block|{
annotation|@
name|Override
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|server
parameter_list|)
block|{
name|readFailureCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Read from table:%s on region server:%s"
argument_list|,
name|table
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|server
parameter_list|,
name|long
name|msTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Read from table:%s on region server:%s in %dms"
argument_list|,
name|table
argument_list|,
name|server
argument_list|,
name|msTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For each column family of the region tries to get one row and outputs the latency, or the    * failure.    */
specifier|static
class|class
name|RegionTask
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
enum|enum
name|TaskType
block|{
name|READ
block|,
name|WRITE
block|}
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|HRegionInfo
name|region
decl_stmt|;
specifier|private
name|Sink
name|sink
decl_stmt|;
specifier|private
name|TaskType
name|taskType
decl_stmt|;
name|RegionTask
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|Sink
name|sink
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|READ
case|:
return|return
name|read
argument_list|()
return|;
case|case
name|WRITE
case|:
return|return
name|write
argument_list|()
return|;
default|default:
return|return
name|read
argument_list|()
return|;
block|}
block|}
specifier|public
name|Void
name|read
parameter_list|()
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading table descriptor for table %s"
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|tableDesc
operator|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sniffRegion failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|region
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close table failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|rs
init|=
literal|null
decl_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|stopWatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|startKey
operator|=
name|region
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
comment|// Can't do a get on empty start row so do a Scan of first element if any instead.
if|if
condition|(
name|startKey
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|get
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading from table %s region %s column family %s and key %s"
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|startKey
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rs
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sink
operator|.
name|publishReadTiming
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|stopWatch
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|scan
operator|=
literal|null
expr_stmt|;
name|get
operator|=
literal|null
expr_stmt|;
name|startKey
operator|=
literal|null
expr_stmt|;
block|}
block|}
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close table failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Check writes for the canary table      * @return      */
specifier|private
name|Void
name|write
parameter_list|()
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|tableDesc
operator|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
name|byte
index|[]
name|rowToCheck
init|=
name|region
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowToCheck
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|rowToCheck
operator|=
operator|new
name|byte
index|[]
block|{
literal|0x0
block|}
expr_stmt|;
block|}
name|int
name|writeValueSize
init|=
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_VALUE_SIZE_KEY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowToCheck
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|writeValueSize
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"writing to table %s region %s column family %s and key %s"
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rowToCheck
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|sink
operator|.
name|publishWriteTiming
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishWriteFailure
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishWriteFailure
argument_list|(
name|region
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get one row from a region on the regionserver and outputs the latency, or the failure.    */
specifier|static
class|class
name|RegionServerTask
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|String
name|serverName
decl_stmt|;
specifier|private
name|HRegionInfo
name|region
decl_stmt|;
specifier|private
name|ExtendedSink
name|sink
decl_stmt|;
specifier|private
name|AtomicLong
name|successes
decl_stmt|;
name|RegionServerTask
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|serverName
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ExtendedSink
name|sink
parameter_list|,
name|AtomicLong
name|successes
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
name|this
operator|.
name|successes
operator|=
name|successes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
comment|// monitor one region on every region server
name|stopWatch
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|tableName
operator|=
name|region
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|startKey
operator|=
name|region
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
comment|// Can't do a get on empty start row so do a Scan of first element if any instead.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading from region server %s table %s region %s and key %s"
argument_list|,
name|serverName
argument_list|,
name|region
operator|.
name|getTable
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startKey
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|get
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|s
operator|.
name|next
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|successes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sink
operator|.
name|publishReadTiming
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|stopWatch
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|tnfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Table may be deleted"
argument_list|,
name|tnfe
argument_list|)
expr_stmt|;
comment|// This is ignored because it doesn't imply that the regionserver is dead
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|tnee
parameter_list|)
block|{
comment|// This is considered a success since we got a response.
name|successes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The targeted table was disabled.  Assuming success."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|dnrioe
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|dnrioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* DO NOTHING */
name|LOG
operator|.
name|error
argument_list|(
literal|"Close table failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|scan
operator|=
literal|null
expr_stmt|;
name|get
operator|=
literal|null
expr_stmt|;
name|startKey
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|USAGE_EXIT_CODE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INIT_ERROR_EXIT_CODE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT_ERROR_EXIT_CODE
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERROR_EXIT_CODE
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_INTERVAL
init|=
literal|6000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_TIMEOUT
init|=
literal|600000
decl_stmt|;
comment|// 10 mins
specifier|private
specifier|static
specifier|final
name|int
name|MAX_THREADS_NUM
init|=
literal|16
decl_stmt|;
comment|// #threads to contact regions
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Canary
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableName
name|DEFAULT_WRITE_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"canary"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CANARY_TABLE_FAMILY_NAME
init|=
literal|"Test"
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|interval
init|=
literal|0
decl_stmt|;
specifier|private
name|Sink
name|sink
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|useRegExp
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
specifier|private
name|boolean
name|failOnError
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|regionServerMode
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|regionServerAllRegions
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|writeSniffing
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|treatFailureAsError
init|=
literal|false
decl_stmt|;
specifier|private
name|TableName
name|writeTableName
init|=
name|DEFAULT_WRITE_TABLE_NAME
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
comment|// threads to retrieve data from regionservers
specifier|public
name|Canary
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|RegionServerStdOutSink
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Canary
parameter_list|(
name|ExecutorService
name|executor
parameter_list|,
name|Sink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|private
name|int
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|// Process command line args
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
comment|// command line args must be in the form: [opts] [table 1 [table 2 ...]]
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid command line options"
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
comment|// user asked for help, print the help and quit.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-daemon"
argument_list|)
operator|&&
name|interval
operator|==
literal|0
condition|)
block|{
comment|// user asked for daemon mode, set a default interval between checks
name|interval
operator|=
name|DEFAULT_INTERVAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-interval"
argument_list|)
condition|)
block|{
comment|// user has specified an interval for canary breaths (-interval N)
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-interval needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|interval
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-interval needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-regionserver"
argument_list|)
condition|)
block|{
name|this
operator|.
name|regionServerMode
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-allRegions"
argument_list|)
condition|)
block|{
name|this
operator|.
name|regionServerAllRegions
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-writeSniffing"
argument_list|)
condition|)
block|{
name|this
operator|.
name|writeSniffing
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-treatFailureAsError"
argument_list|)
condition|)
block|{
name|this
operator|.
name|treatFailureAsError
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-e"
argument_list|)
condition|)
block|{
name|this
operator|.
name|useRegExp
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-t"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-t needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|timeout
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-t needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-writeTable"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-writeTable needs a string value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|writeTableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-f"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-f needs a boolean value argument (true|false)."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|failOnError
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no options match
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|+
literal|" options is invalid."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
comment|// keep track of first table name specified by the user
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|regionServerAllRegions
operator|&&
operator|!
name|this
operator|.
name|regionServerMode
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-allRegions can only be specified in regionserver mode."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|index
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ChoreService
name|choreService
init|=
literal|null
decl_stmt|;
comment|// Launches chore for refreshing kerberos credentials if security is enabled.
comment|// Please see http://hbase.apache.org/book.html#_running_canary_in_a_kerberos_enabled_cluster
comment|// for more details.
specifier|final
name|ScheduledChore
name|authChore
init|=
name|AuthUtil
operator|.
name|getAuthChore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|authChore
operator|!=
literal|null
condition|)
block|{
name|choreService
operator|=
operator|new
name|ChoreService
argument_list|(
literal|"CANARY_TOOL"
argument_list|)
expr_stmt|;
name|choreService
operator|.
name|scheduleChore
argument_list|(
name|authChore
argument_list|)
expr_stmt|;
block|}
comment|// Start to prepare the stuffs
name|Monitor
name|monitor
init|=
literal|null
decl_stmt|;
name|Thread
name|monitorThread
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|long
name|currentTimeLength
init|=
literal|0
decl_stmt|;
comment|// Get a connection to use in below.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|this
operator|.
name|conf
argument_list|)
init|)
block|{
do|do
block|{
comment|// Do monitor !!
try|try
block|{
name|monitor
operator|=
name|this
operator|.
name|newMonitor
argument_list|(
name|connection
argument_list|,
name|index
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|monitorThread
operator|=
operator|new
name|Thread
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|monitorThread
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|monitor
operator|.
name|isDone
argument_list|()
condition|)
block|{
comment|// wait for 1 sec
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// exit if any error occurs
if|if
condition|(
name|this
operator|.
name|failOnError
operator|&&
name|monitor
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|monitorThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|monitor
operator|.
name|initialized
condition|)
block|{
return|return
name|monitor
operator|.
name|errorCode
return|;
block|}
else|else
block|{
return|return
name|INIT_ERROR_EXIT_CODE
return|;
block|}
block|}
name|currentTimeLength
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
if|if
condition|(
name|currentTimeLength
operator|>
name|this
operator|.
name|timeout
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The monitor is running too long ("
operator|+
name|currentTimeLength
operator|+
literal|") after timeout limit:"
operator|+
name|this
operator|.
name|timeout
operator|+
literal|" will be killed itself !!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|monitor
operator|.
name|initialized
condition|)
block|{
return|return
name|TIMEOUT_ERROR_EXIT_CODE
return|;
block|}
else|else
block|{
return|return
name|INIT_ERROR_EXIT_CODE
return|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|failOnError
operator|&&
name|monitor
operator|.
name|finalCheckForErrors
argument_list|()
condition|)
block|{
name|monitorThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|monitor
operator|.
name|errorCode
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
name|monitor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|interval
operator|>
literal|0
condition|)
do|;
block|}
comment|// try-with-resources close
if|if
condition|(
name|choreService
operator|!=
literal|null
condition|)
block|{
name|choreService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|monitor
operator|.
name|errorCode
return|;
block|}
specifier|private
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Usage: bin/hbase %s [opts] [table1 [table2]...] | [regionserver1 [regionserver2]..]%n"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" where [opts] are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -help          Show this help and exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -regionserver  replace the table argument to regionserver,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"      which means to enable regionserver mode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -allRegions    Tries all regions on a regionserver,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"      only works in regionserver mode."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -daemon        Continuous check at defined intervals."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -interval<N>  Interval between checks (sec)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -e             Use table/regionserver as regular expression"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"      which means the table/regionserver is regular expression pattern"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -f<B>         stop whole program if first error occurs,"
operator|+
literal|" default is true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -t<N>         timeout for a check, default is 600000 (milisecs)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -writeSniffing enable the write sniffing in canary"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -treatFailureAsError treats read / write failure as error"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -writeTable    The table used for write sniffing."
operator|+
literal|" Default is hbase:canary"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -D<configProperty>=<value> assigning or override the configuration params"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|USAGE_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
comment|/**    * A Factory method for {@link Monitor}.    * Can be overridden by user.    * @param index a start index for monitor target    * @param args args passed from user    * @return a Monitor instance    */
specifier|public
name|Monitor
name|newMonitor
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
name|int
name|index
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|Monitor
name|monitor
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|monitorTargets
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|int
name|length
init|=
name|args
operator|.
name|length
operator|-
name|index
decl_stmt|;
name|monitorTargets
operator|=
operator|new
name|String
index|[
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
name|index
argument_list|,
name|monitorTargets
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|regionServerMode
condition|)
block|{
name|monitor
operator|=
operator|new
name|RegionServerMonitor
argument_list|(
name|connection
argument_list|,
name|monitorTargets
argument_list|,
name|this
operator|.
name|useRegExp
argument_list|,
operator|(
name|ExtendedSink
operator|)
name|this
operator|.
name|sink
argument_list|,
name|this
operator|.
name|executor
argument_list|,
name|this
operator|.
name|regionServerAllRegions
argument_list|,
name|this
operator|.
name|treatFailureAsError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|monitor
operator|=
operator|new
name|RegionMonitor
argument_list|(
name|connection
argument_list|,
name|monitorTargets
argument_list|,
name|this
operator|.
name|useRegExp
argument_list|,
name|this
operator|.
name|sink
argument_list|,
name|this
operator|.
name|executor
argument_list|,
name|this
operator|.
name|writeSniffing
argument_list|,
name|this
operator|.
name|writeTableName
argument_list|,
name|this
operator|.
name|treatFailureAsError
argument_list|)
expr_stmt|;
block|}
return|return
name|monitor
return|;
block|}
comment|// a Monitor super-class can be extended by users
specifier|public
specifier|static
specifier|abstract
class|class
name|Monitor
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Admin
name|admin
decl_stmt|;
specifier|protected
name|String
index|[]
name|targets
decl_stmt|;
specifier|protected
name|boolean
name|useRegExp
decl_stmt|;
specifier|protected
name|boolean
name|treatFailureAsError
decl_stmt|;
specifier|protected
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|errorCode
init|=
literal|0
decl_stmt|;
specifier|protected
name|Sink
name|sink
decl_stmt|;
specifier|protected
name|ExecutorService
name|executor
decl_stmt|;
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
name|errorCode
operator|!=
literal|0
return|;
block|}
specifier|public
name|boolean
name|finalCheckForErrors
parameter_list|()
block|{
if|if
condition|(
name|errorCode
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|treatFailureAsError
operator|&&
operator|(
name|sink
operator|.
name|getReadFailureCount
argument_list|()
operator|>
literal|0
operator|||
name|sink
operator|.
name|getWriteFailureCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|admin
operator|!=
literal|null
condition|)
name|this
operator|.
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Monitor
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
index|[]
name|monitorTargets
parameter_list|,
name|boolean
name|useRegExp
parameter_list|,
name|Sink
name|sink
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|boolean
name|treatFailureAsError
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|connection
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"connection shall not be null"
argument_list|)
throw|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|targets
operator|=
name|monitorTargets
expr_stmt|;
name|this
operator|.
name|useRegExp
operator|=
name|useRegExp
expr_stmt|;
name|this
operator|.
name|treatFailureAsError
operator|=
name|treatFailureAsError
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
function_decl|;
specifier|protected
name|boolean
name|initAdmin
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|admin
condition|)
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Initial HBaseAdmin failed..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|INIT_ERROR_EXIT_CODE
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|admin
operator|.
name|isAborted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HBaseAdmin aborted"
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|INIT_ERROR_EXIT_CODE
expr_stmt|;
block|}
return|return
operator|!
name|this
operator|.
name|hasError
argument_list|()
return|;
block|}
block|}
comment|// a monitor for region mode
specifier|private
specifier|static
class|class
name|RegionMonitor
extends|extends
name|Monitor
block|{
comment|// 10 minutes
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WRITE_TABLE_CHECK_PERIOD
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 days
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WRITE_DATA_TTL
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|private
name|long
name|lastCheckTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|writeSniffing
decl_stmt|;
specifier|private
name|TableName
name|writeTableName
decl_stmt|;
specifier|private
name|int
name|writeDataTTL
decl_stmt|;
specifier|private
name|float
name|regionsLowerLimit
decl_stmt|;
specifier|private
name|float
name|regionsUpperLimit
decl_stmt|;
specifier|private
name|int
name|checkPeriod
decl_stmt|;
specifier|public
name|RegionMonitor
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
index|[]
name|monitorTargets
parameter_list|,
name|boolean
name|useRegExp
parameter_list|,
name|Sink
name|sink
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|boolean
name|writeSniffing
parameter_list|,
name|TableName
name|writeTableName
parameter_list|,
name|boolean
name|treatFailureAsError
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|monitorTargets
argument_list|,
name|useRegExp
argument_list|,
name|sink
argument_list|,
name|executor
argument_list|,
name|treatFailureAsError
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|connection
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|writeSniffing
operator|=
name|writeSniffing
expr_stmt|;
name|this
operator|.
name|writeTableName
operator|=
name|writeTableName
expr_stmt|;
name|this
operator|.
name|writeDataTTL
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_DATA_TTL_KEY
argument_list|,
name|DEFAULT_WRITE_DATA_TTL
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsLowerLimit
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_PERSERVER_REGIONS_LOWERLIMIT_KEY
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsUpperLimit
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_PERSERVER_REGIONS_UPPERLIMIT_KEY
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkPeriod
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_TABLE_CHECK_PERIOD_KEY
argument_list|,
name|DEFAULT_WRITE_TABLE_CHECK_PERIOD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|initAdmin
argument_list|()
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|taskFutures
init|=
operator|new
name|LinkedList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|targets
operator|!=
literal|null
operator|&&
name|this
operator|.
name|targets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|tables
init|=
name|generateMonitorTables
argument_list|(
name|this
operator|.
name|targets
argument_list|)
decl_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|taskFutures
operator|.
name|addAll
argument_list|(
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|table
argument_list|,
name|executor
argument_list|,
name|TaskType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|taskFutures
operator|.
name|addAll
argument_list|(
name|sniff
argument_list|(
name|TaskType
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeSniffing
condition|)
block|{
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|lastCheckTime
operator|>
name|checkPeriod
condition|)
block|{
try|try
block|{
name|checkWriteTableDistribution
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Check canary table distribution failed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|lastCheckTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
comment|// sniff canary table with write operation
name|taskFutures
operator|.
name|addAll
argument_list|(
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|writeTableName
argument_list|)
argument_list|,
name|executor
argument_list|,
name|TaskType
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|taskFutures
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sniff region failed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Run regionMonitor failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|ERROR_EXIT_CODE
expr_stmt|;
block|}
block|}
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|generateMonitorTables
parameter_list|(
name|String
index|[]
name|monitorTargets
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|returnTables
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|useRegExp
condition|)
block|{
name|Pattern
name|pattern
init|=
literal|null
decl_stmt|;
name|HTableDescriptor
index|[]
name|tds
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tmpTables
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading list of tables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tds
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|tds
operator|==
literal|null
condition|)
block|{
name|tds
operator|=
operator|new
name|HTableDescriptor
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|String
name|monitorTarget
range|:
name|monitorTargets
control|)
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|monitorTarget
argument_list|)
expr_stmt|;
for|for
control|(
name|HTableDescriptor
name|td
range|:
name|tds
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|td
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|tmpTables
operator|.
name|add
argument_list|(
name|td
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Communicate with admin failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|tmpTables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|returnTables
operator|=
name|tmpTables
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tmpTables
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"No HTable found, tablePattern:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|monitorTargets
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|INIT_ERROR_EXIT_CODE
expr_stmt|;
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|returnTables
operator|=
name|monitorTargets
expr_stmt|;
block|}
return|return
name|returnTables
return|;
block|}
comment|/*      * canary entry point to monitor all the tables.      */
specifier|private
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|sniff
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading list of tables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|taskFutures
init|=
operator|new
name|LinkedList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|admin
operator|.
name|listTables
argument_list|()
control|)
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|writeTableName
argument_list|)
operator|)
condition|)
block|{
name|taskFutures
operator|.
name|addAll
argument_list|(
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|table
argument_list|,
name|executor
argument_list|,
name|taskType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|taskFutures
return|;
block|}
specifier|private
name|void
name|checkWriteTableDistribution
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|writeTableName
argument_list|)
condition|)
block|{
name|int
name|numberOfServers
init|=
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfServers
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No live regionservers"
argument_list|)
throw|;
block|}
name|createWriteTable
argument_list|(
name|numberOfServers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|writeTableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|writeTableName
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfServers
init|=
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|writeTableName
argument_list|)
decl_stmt|;
name|int
name|numberOfRegions
init|=
name|pairs
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfRegions
argument_list|<
name|numberOfServers
operator|*
name|regionsLowerLimit
operator|||
name|numberOfRegions
argument_list|>
name|numberOfServers
operator|*
name|regionsUpperLimit
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|writeTableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|writeTableName
argument_list|)
expr_stmt|;
name|createWriteTable
argument_list|(
name|numberOfServers
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|ServerName
argument_list|>
name|serverSet
init|=
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|serverSet
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfCoveredServers
init|=
name|serverSet
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfCoveredServers
operator|<
name|numberOfServers
condition|)
block|{
name|admin
operator|.
name|balancer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createWriteTable
parameter_list|(
name|int
name|numberOfServers
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numberOfRegions
init|=
call|(
name|int
call|)
argument_list|(
name|numberOfServers
operator|*
name|regionsLowerLimit
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of live regionservers: "
operator|+
name|numberOfServers
operator|+
literal|", "
operator|+
literal|"pre-splitting the canary table into "
operator|+
name|numberOfRegions
operator|+
literal|" regions "
operator|+
literal|"(current lower limit of regions per server is "
operator|+
name|regionsLowerLimit
operator|+
literal|" and you can change it by config: "
operator|+
name|HConstants
operator|.
name|HBASE_CANARY_WRITE_PERSERVER_REGIONS_LOWERLIMIT_KEY
operator|+
literal|" )"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|writeTableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|family
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|CANARY_TABLE_FAMILY_NAME
argument_list|)
decl_stmt|;
name|family
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|family
operator|.
name|setTimeToLive
argument_list|(
name|writeDataTTL
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|RegionSplitter
operator|.
name|HexStringSplit
argument_list|()
operator|.
name|split
argument_list|(
name|numberOfRegions
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Canary entry point for specified table.    * @throws Exception    */
specifier|public
specifier|static
name|void
name|sniff
parameter_list|(
specifier|final
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|sniff
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|TaskType
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
comment|/**    * Canary entry point for specified table with task type(read/write)    * @throws Exception    */
specifier|public
specifier|static
name|void
name|sniff
parameter_list|(
specifier|final
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|taskFutures
init|=
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
operator|new
name|StdOutSink
argument_list|()
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|taskFutures
control|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Canary entry point for specified table.    * @throws Exception    */
specifier|private
specifier|static
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|sniff
parameter_list|(
specifier|final
name|Admin
name|admin
parameter_list|,
specifier|final
name|Sink
name|sink
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"checking table is enabled and getting table descriptor for table %s"
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|Canary
operator|.
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|executor
argument_list|,
name|taskType
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s is not enabled"
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
comment|/*    * Loops over regions that owns this table, and output some information abouts the state.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|sniff
parameter_list|(
specifier|final
name|Admin
name|admin
parameter_list|,
specifier|final
name|Sink
name|sink
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading list of regions for table %s"
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RegionTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionTask
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|RegionTask
argument_list|(
name|admin
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
argument_list|,
name|sink
argument_list|,
name|taskType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
return|;
block|}
comment|// a monitor for regionserver mode
specifier|private
specifier|static
class|class
name|RegionServerMonitor
extends|extends
name|Monitor
block|{
specifier|private
name|boolean
name|allRegions
decl_stmt|;
specifier|public
name|RegionServerMonitor
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
index|[]
name|monitorTargets
parameter_list|,
name|boolean
name|useRegExp
parameter_list|,
name|ExtendedSink
name|sink
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|boolean
name|allRegions
parameter_list|,
name|boolean
name|treatFailureAsError
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|monitorTargets
argument_list|,
name|useRegExp
argument_list|,
name|sink
argument_list|,
name|executor
argument_list|,
name|treatFailureAsError
argument_list|)
expr_stmt|;
name|this
operator|.
name|allRegions
operator|=
name|allRegions
expr_stmt|;
block|}
specifier|private
name|ExtendedSink
name|getSink
parameter_list|()
block|{
return|return
operator|(
name|ExtendedSink
operator|)
name|this
operator|.
name|sink
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|initAdmin
argument_list|()
operator|&&
name|this
operator|.
name|checkNoTableNames
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|rsAndRMap
init|=
name|this
operator|.
name|filterRegionServerByName
argument_list|()
decl_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|monitorRegionServers
argument_list|(
name|rsAndRMap
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkNoTableNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|foundTableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading list of tables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|tableNames
operator|=
name|this
operator|.
name|admin
operator|.
name|listTableNames
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get listTableNames failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|INIT_ERROR_EXIT_CODE
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|targets
operator|==
literal|null
operator|||
name|this
operator|.
name|targets
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|target
range|:
name|this
operator|.
name|targets
control|)
block|{
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|foundTableNames
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|foundTableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot pass a tablename when using the -regionserver "
operator|+
literal|"option, tablenames:"
operator|+
name|foundTableNames
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|USAGE_EXIT_CODE
expr_stmt|;
block|}
return|return
name|foundTableNames
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|private
name|void
name|monitorRegionServers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|rsAndRMap
parameter_list|)
block|{
name|List
argument_list|<
name|RegionServerTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionServerTask
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|successMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|rsAndRMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|serverName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AtomicLong
name|successes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|successMap
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|successes
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|allRegions
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|RegionServerTask
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|serverName
argument_list|,
name|region
argument_list|,
name|getSink
argument_list|()
argument_list|,
name|successes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// random select a region if flag not set
name|HRegionInfo
name|region
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|RegionServerTask
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|serverName
argument_list|,
name|region
argument_list|,
name|getSink
argument_list|()
argument_list|,
name|successes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|this
operator|.
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sniff regionserver failed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|ERROR_EXIT_CODE
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|allRegions
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|rsAndRMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|serverName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully read "
operator|+
name|successMap
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|+
literal|" regions out of "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" on regionserver:"
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|this
operator|.
name|errorCode
operator|=
name|ERROR_EXIT_CODE
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Sniff regionserver interrupted!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|filterRegionServerByName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|regionServerAndRegionsMap
init|=
name|this
operator|.
name|getAllRegionServerByName
argument_list|()
decl_stmt|;
name|regionServerAndRegionsMap
operator|=
name|this
operator|.
name|doFilterRegionServerByName
argument_list|(
name|regionServerAndRegionsMap
argument_list|)
expr_stmt|;
return|return
name|regionServerAndRegionsMap
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|getAllRegionServerByName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|rsAndRMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|RegionLocator
name|regionLocator
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"reading list of tables and locations"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
index|[]
name|tableDescs
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|tableDesc
range|:
name|tableDescs
control|)
block|{
name|table
operator|=
name|this
operator|.
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|regionLocator
operator|=
name|this
operator|.
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|regionLocator
operator|.
name|getAllRegionLocations
argument_list|()
control|)
block|{
name|ServerName
name|rs
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|rsName
init|=
name|rs
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|HRegionInfo
name|r
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsAndRMap
operator|.
name|containsKey
argument_list|(
name|rsName
argument_list|)
condition|)
block|{
name|regions
operator|=
name|rsAndRMap
operator|.
name|get
argument_list|(
name|rsName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|rsAndRMap
operator|.
name|put
argument_list|(
name|rsName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Get HTables info failed"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|errorCode
operator|=
name|INIT_ERROR_EXIT_CODE
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Close table failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rsAndRMap
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|doFilterRegionServerByName
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|fullRsAndRMap
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|filteredRsAndRMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|targets
operator|!=
literal|null
operator|&&
name|this
operator|.
name|targets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|filteredRsAndRMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Pattern
name|pattern
init|=
literal|null
decl_stmt|;
name|Matcher
name|matcher
init|=
literal|null
decl_stmt|;
name|boolean
name|regExpFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|rsName
range|:
name|this
operator|.
name|targets
control|)
block|{
if|if
condition|(
name|this
operator|.
name|useRegExp
condition|)
block|{
name|regExpFound
operator|=
literal|false
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|rsName
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|fullRsAndRMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|filteredRsAndRMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|regExpFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|regExpFound
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No RegionServerInfo found, regionServerPattern:"
operator|+
name|rsName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fullRsAndRMap
operator|.
name|containsKey
argument_list|(
name|rsName
argument_list|)
condition|)
block|{
name|filteredRsAndRMap
operator|.
name|put
argument_list|(
name|rsName
argument_list|,
name|fullRsAndRMap
operator|.
name|get
argument_list|(
name|rsName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No RegionServerInfo found, regionServerName:"
operator|+
name|rsName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|filteredRsAndRMap
operator|=
name|fullRsAndRMap
expr_stmt|;
block|}
return|return
name|filteredRsAndRMap
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// loading the generic options to conf
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.canary.threads.num"
argument_list|,
name|MAX_THREADS_NUM
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of exection threads "
operator|+
name|numThreads
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Sink
argument_list|>
name|sinkClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.canary.sink.class"
argument_list|,
name|RegionServerStdOutSink
operator|.
name|class
argument_list|,
name|Sink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Sink
name|sink
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|sinkClass
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Canary
argument_list|(
name|executor
argument_list|,
name|sink
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

