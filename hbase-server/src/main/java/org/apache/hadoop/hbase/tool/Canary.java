begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_comment
comment|/**  * HBase Canary Tool, that that can be used to do  * "canary monitoring" of a running HBase cluster.  *  * Foreach region tries to get one row per column family  * and outputs some information about failure or latency.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Canary
implements|implements
name|Tool
block|{
comment|// Sink interface used by the canary to outputs information
specifier|public
interface|interface
name|Sink
block|{
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
function_decl|;
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
function_decl|;
block|}
comment|// Simple implementation of canary sink that allows to plot on
comment|// file or standard output timings or failures.
specifier|public
specifier|static
class|class
name|StdOutSink
implements|implements
name|Sink
block|{
annotation|@
name|Override
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadFailure
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s column family %s failed"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publishReadTiming
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|,
name|long
name|msTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"read from region %s column family %s in %dms"
argument_list|,
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|msTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_INTERVAL
init|=
literal|6000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Canary
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|interval
init|=
literal|0
decl_stmt|;
specifier|private
name|Sink
name|sink
init|=
literal|null
decl_stmt|;
specifier|public
name|Canary
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|StdOutSink
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Canary
parameter_list|(
name|Sink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|sink
operator|=
name|sink
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|tables_index
init|=
operator|-
literal|1
decl_stmt|;
comment|// Process command line args
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|tables_index
operator|>=
literal|0
condition|)
block|{
comment|// command line args must be in the form: [opts] [table 1 [table 2 ...]]
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid command line options"
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
comment|// user asked for help, print the help and quit.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-daemon"
argument_list|)
operator|&&
name|interval
operator|==
literal|0
condition|)
block|{
comment|// user asked for daemon mode, set a default interval between checks
name|interval
operator|=
name|DEFAULT_INTERVAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-interval"
argument_list|)
condition|)
block|{
comment|// user has specified an interval for canary breaths (-interval N)
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-interval needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|interval
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-interval needs a numeric value argument."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no options match
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|+
literal|" options is invalid."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tables_index
operator|<
literal|0
condition|)
block|{
comment|// keep track of first table name specified by the user
name|tables_index
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// initialize HBase conf and admin
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
comment|// lets the canary monitor the cluster
do|do
block|{
if|if
condition|(
name|admin
operator|.
name|isAborted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HBaseAdmin aborted"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
if|if
condition|(
name|tables_index
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|tables_index
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sniff
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|interval
operator|>
literal|0
condition|)
do|;
block|}
finally|finally
block|{
name|this
operator|.
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
specifier|private
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Usage: bin/hbase %s [opts] [table 1 [table 2...]]%n"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" where [opts] are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -help          Show this help and exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -daemon        Continuous check at defined intervals."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -interval<N>  Interval between checks (sec)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*    * canary entry point to monitor all the tables.    */
specifier|private
name|void
name|sniff
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|admin
operator|.
name|listTables
argument_list|()
control|)
block|{
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Canary entry point for specified table.    * @param admin    * @param tableName    * @throws Exception    */
specifier|public
specifier|static
name|void
name|sniff
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|sniff
argument_list|(
name|admin
argument_list|,
operator|new
name|StdOutSink
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Canary entry point for specified table.    * @param admin    * @param sink    * @param tableName    * @throws Exception    */
specifier|private
specifier|static
name|void
name|sniff
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|Sink
name|sink
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|sniff
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s is not available"
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Loops over regions that owns this table,    * and output some information abouts the state.    */
specifier|private
specifier|static
name|void
name|sniff
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|Sink
name|sink
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|)
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
return|return;
block|}
for|for
control|(
name|HRegionInfo
name|region
range|:
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|sniffRegion
argument_list|(
name|admin
argument_list|,
name|sink
argument_list|,
name|region
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|region
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * For each column family of the region tries to get one row    * and outputs the latency, or the failure.    */
specifier|private
specifier|static
name|void
name|sniffRegion
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|Sink
name|sink
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|HTable
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|tableDesc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|tableDesc
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|stopWatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|startKey
init|=
name|region
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|startKey
operator|==
literal|null
operator|||
name|startKey
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
comment|// Can't do a get on empty start row so do a Scan of first element if any instead.
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sink
operator|.
name|publishReadTiming
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|stopWatch
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sink
operator|.
name|publishReadTiming
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|stopWatch
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sink
operator|.
name|publishReadFailure
argument_list|(
name|region
argument_list|,
name|column
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Canary
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

