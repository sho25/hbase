begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupHandler
operator|.
name|BACKUPSTATUS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupUtil
operator|.
name|BackupCompleteData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * This class provides 'hbase:backup' table API  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|BackupSystemTable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupSystemTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_NAMESPACE
init|=
literal|"hbase"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_NAME
init|=
literal|"backup"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAMESPACE
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|familyName
init|=
literal|"f"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// Connection to HBase cluster
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
comment|// Cluster configuration
specifier|private
specifier|static
name|Configuration
name|config
decl_stmt|;
comment|// singleton
specifier|private
specifier|static
name|BackupSystemTable
name|table
decl_stmt|;
comment|/**    * Get instance by a given configuration    * @param conf - HBase configuration    * @return instance of BackupSystemTable    * @throws IOException exception    */
specifier|public
specifier|synchronized
specifier|static
name|BackupSystemTable
name|getTable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|config
operator|=
name|conf
expr_stmt|;
comment|// Verify hbase:system exists
name|createSystemTableIfNotExists
argument_list|()
expr_stmt|;
name|table
operator|=
operator|new
name|BackupSystemTable
argument_list|()
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
comment|/**    * TODO: refactor    * @throws IOException exception    */
specifier|public
specifier|static
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Gets table name    * @return table name    */
specifier|public
specifier|static
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|private
specifier|static
name|void
name|createSystemTableIfNotExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|ttl
init|=
name|config
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|BACKUP_SYSTEM_TTL_KEY
argument_list|,
name|HConstants
operator|.
name|BACKUP_SYSTEM_TTL_DEFAULT
argument_list|)
decl_stmt|;
name|colDesc
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|BackupSystemTable
parameter_list|()
block|{   }
comment|/**    * Updates status (state) of a backup session in hbase:backup table    * @param context context    * @throws IOException exception    */
specifier|public
name|void
name|updateBackupStatus
parameter_list|(
name|BackupContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"update backup status in hbase:backup for: "
operator|+
name|context
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" set status="
operator|+
name|context
operator|.
name|getFlag
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|BackupSystemTableHelper
operator|.
name|createPutForBackupContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Deletes backup status from hbase:backup table    * @param backupId backup id    * @throws IOException exception    */
specifier|public
name|void
name|deleteBackupStatus
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete backup status in hbase:backup for "
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
name|BackupSystemTableHelper
operator|.
name|createDeletForBackupContext
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reads backup status object (instance of BackupContext) from hbase:backup table    * @param backupId - backupId    * @return Current status of backup session or null    */
specifier|public
name|BackupContext
name|readBackupStatus
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read backup status from hbase:backup for: "
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|BackupSystemTableHelper
operator|.
name|createGetForBackupContext
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|BackupSystemTableHelper
operator|.
name|resultToBackupContext
argument_list|(
name|res
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read the last backup start code (timestamp) of last successful backup. Will return null if    * there is no start code stored on hbase or the value is of length 0. These two cases indicate    * there is no successful backup completed so far.    * @return the timestamp of last successful backup    * @throws IOException exception    */
specifier|public
name|String
name|readBackupStartCode
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read backup start code from hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|BackupSystemTableHelper
operator|.
name|createGetForStartCode
argument_list|()
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Cell
name|cell
init|=
name|res
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|val
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Write the start code (timestamp) to hbase:backup. If passed in null, then write 0 byte.    * @param startCode start code    * @throws IOException exception    */
specifier|public
name|void
name|writeBackupStartCode
parameter_list|(
name|String
name|startCode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write backup start code to hbase:backup "
operator|+
name|startCode
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|BackupSystemTableHelper
operator|.
name|createPutForStartCode
argument_list|(
name|startCode
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the Region Servers log information after the last log roll from hbase:backup.    * @return RS log info    * @throws IOException exception    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readRegionServerLastLogRollResult
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read region server last roll log result to hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|BackupSystemTableHelper
operator|.
name|createScanForReadRegionServerLastLogRollResult
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|cell
init|=
name|res
operator|.
name|current
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|server
init|=
name|BackupSystemTableHelper
operator|.
name|getServerNameForReadRegionServerLastLogRollResult
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|rsTimestampMap
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rsTimestampMap
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes Region Server last roll log result (timestamp) to hbase:backup table    * @param server - Region Server name    * @param fileName - last log timestamp    * @throws IOException exception    */
specifier|public
name|void
name|writeRegionServerLastLogRollResult
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write region server last roll log result to hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|BackupSystemTableHelper
operator|.
name|createPutForRegionServerLastLogRollResult
argument_list|(
name|server
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get all completed backup information (in desc order by time)    * @return history info of BackupCompleteData    * @throws IOException exception    */
specifier|public
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|getBackupHistory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get backup history from hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|BackupSystemTableHelper
operator|.
name|createScanForBackupHistory
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|BackupContext
name|context
init|=
name|BackupSystemTableHelper
operator|.
name|cellToBackupContext
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFlag
argument_list|()
operator|!=
name|BACKUPSTATUS
operator|.
name|COMPLETE
condition|)
block|{
continue|continue;
block|}
name|BackupCompleteData
name|history
init|=
operator|new
name|BackupCompleteData
argument_list|()
decl_stmt|;
name|history
operator|.
name|setBackupToken
argument_list|(
name|context
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|setStartTime
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|context
operator|.
name|getStartTs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|history
operator|.
name|setEndTime
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|context
operator|.
name|getEndTs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|history
operator|.
name|setBackupRootPath
argument_list|(
name|context
operator|.
name|getTargetRootDir
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|setTableList
argument_list|(
name|context
operator|.
name|getTableListAsString
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|setType
argument_list|(
name|context
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|setBytesCopied
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|context
operator|.
name|getTotalBytesCopied
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|fromExistingSnapshot
argument_list|()
condition|)
block|{
name|history
operator|.
name|markFromExistingSnapshot
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|history
argument_list|)
expr_stmt|;
block|}
return|return
name|BackupUtil
operator|.
name|sortHistoryListDesc
argument_list|(
name|list
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get all backup session with a given status (in desc order by time)    * @param status status    * @return history info of backup contexts    * @throws IOException exception    */
specifier|public
name|ArrayList
argument_list|<
name|BackupContext
argument_list|>
name|getBackupContexts
parameter_list|(
name|BACKUPSTATUS
name|status
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get backup contexts from hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupContext
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupContext
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|BackupSystemTableHelper
operator|.
name|createScanForBackupHistory
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|BackupContext
name|context
init|=
name|BackupSystemTableHelper
operator|.
name|cellToBackupContext
argument_list|(
name|res
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFlag
argument_list|()
operator|!=
name|status
condition|)
block|{
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Write the current timestamps for each regionserver to hbase:backup after a successful full or    * incremental backup. The saved timestamp is of the last log file that was backed up already.    * @param tables tables    * @param newTimestamps timestamps    * @throws IOException exception    */
specifier|public
name|void
name|writeRegionServerLogTimestamp
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newTimestamps
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write RS log ts to HBASE_BACKUP"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|newTimestamps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|host
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|timestamp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
name|BackupUtil
operator|.
name|FIELD_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
operator|.
name|append
argument_list|(
name|BackupUtil
operator|.
name|RECORD_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|String
name|smap
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|Put
name|put
init|=
name|BackupSystemTableHelper
operator|.
name|createPutForWriteRegionServerLogTimestamp
argument_list|(
name|table
argument_list|,
name|smap
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read the timestamp for each region server log after the last successful backup. Each table has    * its own set of the timestamps. The info is stored for each table as a concatenated string of    * rs->timestapmp    * @return the timestamp for each region server. key: tableName value:    *         RegionServer,PreviousTimeStamp    * @throws IOException exception    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|readLogTimestampMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"read RS log ts from HBASE_BACKUP"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tableTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|BackupSystemTableHelper
operator|.
name|createScanForReadLogTimestampMap
argument_list|()
decl_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|cell
init|=
name|res
operator|.
name|current
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|tabName
init|=
name|BackupSystemTableHelper
operator|.
name|getTableNameForReadLogTimestampMap
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lastBackup
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
comment|// TODO
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data of last backup data from HBASE_BACKUP "
operator|+
literal|"is empty. Create a backup first."
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
index|[]
name|records
init|=
name|s
operator|.
name|split
argument_list|(
name|BackupUtil
operator|.
name|RECORD_SEPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|record
range|:
name|records
control|)
block|{
name|String
index|[]
name|flds
init|=
name|record
operator|.
name|split
argument_list|(
name|BackupUtil
operator|.
name|FIELD_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|flds
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"data from HBASE_BACKUP is corrupted: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|flds
argument_list|)
argument_list|)
throw|;
block|}
name|lastBackup
operator|.
name|put
argument_list|(
name|flds
index|[
literal|0
index|]
argument_list|,
name|flds
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|tableTimestampMap
operator|.
name|put
argument_list|(
name|tabName
argument_list|,
name|lastBackup
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableTimestampMap
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the current tables covered by incremental backup.    * @return set of tableNames    * @throws IOException exception    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIncrementalBackupTableSet
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get incr backup table set from hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|BackupSystemTableHelper
operator|.
name|createGetForIncrBackupTableSet
argument_list|()
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|set
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|res
operator|.
name|listCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
comment|// qualifier = table name - we use table names as qualifiers
comment|// TODO ns:table as qualifier?
name|set
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add tables to global incremental backup set    * @param tables - set of tables    * @throws IOException exception    */
specifier|public
name|void
name|addIncrementalBackupTableSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"add incr backup table set to hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|BackupSystemTableHelper
operator|.
name|createPutForIncrBackupTableSet
argument_list|(
name|tables
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Register WAL files as eligible for deletion    * @param files files    * @throws IOException exception    */
specifier|public
name|void
name|addWALFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"add WAL files to hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|BackupSystemTableHelper
operator|.
name|createPutsForAddWALFiles
argument_list|(
name|files
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check if WAL file is eligible for deletion    * @param file file    * @return true, if - yes.    * @throws IOException exception    */
specifier|public
name|boolean
name|checkWALFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Check if WAL file has been already backuped in hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|BackupSystemTableHelper
operator|.
name|createGetForCheckWALFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks if we have at least one backup session in hbase:backup This API is used by    * BackupLogCleaner    * @return true, if - at least one session exists in hbase:backup table    * @throws IOException exception    */
specifier|public
name|boolean
name|hasBackupSessions
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"has backup sessions from hbase:backup"
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|BackupSystemTableHelper
operator|.
name|createScanForBackupHistory
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

