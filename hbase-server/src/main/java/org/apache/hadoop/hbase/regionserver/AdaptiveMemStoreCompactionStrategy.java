begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Adaptive is a heuristic that chooses whether to apply data compaction or not based on the  * level of redundancy in the data. Adaptive triggers redundancy elimination only for those  * stores where positive impact is expected.  *  * Adaptive uses two parameters to determine whether to perform redundancy elimination.  * The first parameter, u, estimates the ratio of unique keys in the memory store based on the  * fraction of unique keys encountered during the previous merge of segment indices.  * The second is the perceived probability (compactionProbability) that the store can benefit from  * redundancy elimination. Initially, compactionProbability=0.5; it then grows exponentially by  * 2% whenever a compaction is successful and decreased by 2% whenever a compaction did not meet  * the expectation. It is reset back to the default value (namely 0.5) upon disk flush.  *  * Adaptive triggers redundancy elimination with probability compactionProbability if the  * fraction of redundant keys 1-u exceeds a parameter threshold compactionThreshold.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AdaptiveMemStoreCompactionStrategy
extends|extends
name|MemStoreCompactionStrategy
block|{
specifier|private
specifier|static
specifier|final
name|String
name|name
init|=
literal|"ADAPTIVE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADAPTIVE_COMPACTION_THRESHOLD_KEY
init|=
literal|"hbase.hregion.compacting.memstore.adaptive.compaction.threshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|ADAPTIVE_COMPACTION_THRESHOLD_DEFAULT
init|=
literal|0.5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADAPTIVE_INITIAL_COMPACTION_PROBABILITY_KEY
init|=
literal|"hbase.hregion.compacting.memstore.adaptive.compaction.probability"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|ADAPTIVE_INITIAL_COMPACTION_PROBABILITY_DEFAULT
init|=
literal|0.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|ADAPTIVE_PROBABILITY_FACTOR
init|=
literal|1.02
decl_stmt|;
specifier|private
name|double
name|compactionThreshold
decl_stmt|;
specifier|private
name|double
name|initialCompactionProbability
decl_stmt|;
specifier|private
name|double
name|compactionProbability
decl_stmt|;
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|double
name|numCellsInVersionedList
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|compacted
init|=
literal|false
decl_stmt|;
specifier|public
name|AdaptiveMemStoreCompactionStrategy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|cfName
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|cfName
argument_list|)
expr_stmt|;
name|compactionThreshold
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|ADAPTIVE_COMPACTION_THRESHOLD_KEY
argument_list|,
name|ADAPTIVE_COMPACTION_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|initialCompactionProbability
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|ADAPTIVE_INITIAL_COMPACTION_PROBABILITY_KEY
argument_list|,
name|ADAPTIVE_INITIAL_COMPACTION_PROBABILITY_DEFAULT
argument_list|)
expr_stmt|;
name|resetStats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Action
name|getAction
parameter_list|(
name|VersionedSegmentsList
name|versionedList
parameter_list|)
block|{
if|if
condition|(
name|versionedList
operator|.
name|getEstimatedUniquesFrac
argument_list|()
operator|<
literal|1.0
operator|-
name|compactionThreshold
condition|)
block|{
name|double
name|r
init|=
name|rand
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|<
name|compactionProbability
condition|)
block|{
name|numCellsInVersionedList
operator|=
name|versionedList
operator|.
name|getNumOfCells
argument_list|()
expr_stmt|;
name|compacted
operator|=
literal|true
expr_stmt|;
return|return
name|compact
argument_list|(
name|versionedList
argument_list|,
name|name
operator|+
literal|" (compaction probability="
operator|+
name|compactionProbability
operator|+
literal|")"
argument_list|)
return|;
block|}
block|}
name|compacted
operator|=
literal|false
expr_stmt|;
return|return
name|simpleMergeOrFlatten
argument_list|(
name|versionedList
argument_list|,
name|name
operator|+
literal|" (compaction probability="
operator|+
name|compactionProbability
operator|+
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateStats
parameter_list|(
name|Segment
name|replacement
parameter_list|)
block|{
if|if
condition|(
name|compacted
condition|)
block|{
if|if
condition|(
name|replacement
operator|.
name|getCellsCount
argument_list|()
operator|/
name|numCellsInVersionedList
operator|<
literal|1.0
operator|-
name|compactionThreshold
condition|)
block|{
comment|// compaction was a good decision - increase probability
name|compactionProbability
operator|*=
name|ADAPTIVE_PROBABILITY_FACTOR
expr_stmt|;
if|if
condition|(
name|compactionProbability
operator|>
literal|1.0
condition|)
block|{
name|compactionProbability
operator|=
literal|1.0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// compaction was NOT a good decision - decrease probability
name|compactionProbability
operator|/=
name|ADAPTIVE_PROBABILITY_FACTOR
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetStats
parameter_list|()
block|{
name|compactionProbability
operator|=
name|initialCompactionProbability
expr_stmt|;
block|}
specifier|protected
name|Action
name|getMergingAction
parameter_list|()
block|{
return|return
name|Action
operator|.
name|MERGE_COUNT_UNIQUE_KEYS
return|;
block|}
specifier|protected
name|Action
name|getFlattenAction
parameter_list|()
block|{
return|return
name|Action
operator|.
name|FLATTEN
return|;
block|}
block|}
end_class

end_unit

