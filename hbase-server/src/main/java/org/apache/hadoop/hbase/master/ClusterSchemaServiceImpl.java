begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServiceNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|CreateNamespaceProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|DeleteNamespaceProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ModifyNamespaceProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ClusterSchemaServiceImpl
extends|extends
name|AbstractService
implements|implements
name|ClusterSchemaService
block|{
specifier|private
specifier|final
name|TableNamespaceManager
name|tableNamespaceManager
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|EMPTY_NAMESPACE_LIST
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|NamespaceDescriptor
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterSchemaServiceImpl
parameter_list|(
specifier|final
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|tableNamespaceManager
operator|=
operator|new
name|TableNamespaceManager
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
block|}
comment|// All below are synchronized so consistent view on whether running or not.
specifier|private
specifier|synchronized
name|void
name|checkIsRunning
parameter_list|()
throws|throws
name|ServiceNotRunningException
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
throw|throw
operator|new
name|ServiceNotRunningException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
try|try
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNamespaceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|notifyFailed
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
comment|// This is no stop for the table manager.
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableNamespaceManager
name|getTableNamespaceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableNamespaceManager
return|;
block|}
specifier|private
name|long
name|submitProcedure
parameter_list|(
specifier|final
name|Procedure
argument_list|<
name|?
argument_list|>
name|procedure
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
throws|throws
name|ServiceNotRunningException
block|{
name|checkIsRunning
argument_list|()
expr_stmt|;
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|pe
init|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
return|return
name|pe
operator|.
name|submitProcedure
argument_list|(
name|procedure
argument_list|,
name|nonceKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|createNamespace
parameter_list|(
name|NamespaceDescriptor
name|namespaceDescriptor
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitProcedure
argument_list|(
operator|new
name|CreateNamespaceProcedure
argument_list|(
name|this
operator|.
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|namespaceDescriptor
argument_list|)
argument_list|,
name|nonceKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|modifyNamespace
parameter_list|(
name|NamespaceDescriptor
name|namespaceDescriptor
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitProcedure
argument_list|(
operator|new
name|ModifyNamespaceProcedure
argument_list|(
name|this
operator|.
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|namespaceDescriptor
argument_list|)
argument_list|,
name|nonceKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitProcedure
argument_list|(
operator|new
name|DeleteNamespaceProcedure
argument_list|(
name|this
operator|.
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|nonceKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceDescriptor
name|getNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
name|nsd
init|=
name|getTableNamespaceManager
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsd
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NamespaceNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
return|return
name|nsd
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|getNamespaces
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIsRunning
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|set
init|=
name|getTableNamespaceManager
argument_list|()
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
operator|||
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|EMPTY_NAMESPACE_LIST
return|;
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
end_class

end_unit

