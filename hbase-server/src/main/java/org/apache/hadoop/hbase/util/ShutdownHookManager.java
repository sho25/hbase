begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * This class provides ShutdownHookManager shims for HBase to interact with the Hadoop 1.0.x and the  * Hadoop 2.0+ series.  *   * NOTE: No testing done against 0.22.x, or 0.21.x.  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|ShutdownHookManager
block|{
specifier|private
specifier|static
name|ShutdownHookManager
name|instance
decl_stmt|;
specifier|static
name|Class
name|shutdownHookManagerClass
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
comment|// This class exists in hadoop 2.0+ but not in Hadoop 20.x/1.x
name|shutdownHookManagerClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.util.ShutdownHookManager"
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|ShutdownHookManagerV2
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|instance
operator|=
operator|new
name|ShutdownHookManagerV1
argument_list|()
expr_stmt|;
block|}
block|}
specifier|abstract
specifier|public
name|void
name|addShutdownHook
parameter_list|(
name|Thread
name|shutdownHook
parameter_list|,
name|int
name|priority
parameter_list|)
function_decl|;
specifier|abstract
specifier|public
name|boolean
name|removeShutdownHook
parameter_list|(
name|Runnable
name|shutdownHook
parameter_list|)
function_decl|;
specifier|public
specifier|static
name|void
name|affixShutdownHook
parameter_list|(
name|Thread
name|shutdownHook
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|instance
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|deleteShutdownHook
parameter_list|(
name|Runnable
name|shutdownHook
parameter_list|)
block|{
return|return
name|instance
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ShutdownHookManagerV1
extends|extends
name|ShutdownHookManager
block|{
comment|// priority is ignored in hadoop versions earlier than 2.0
specifier|public
name|void
name|addShutdownHook
parameter_list|(
name|Thread
name|shutdownHookThread
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHookThread
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeShutdownHook
parameter_list|(
name|Runnable
name|shutdownHook
parameter_list|)
block|{
name|Thread
name|shutdownHookThread
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|shutdownHook
operator|instanceof
name|Thread
operator|)
condition|)
block|{
name|shutdownHookThread
operator|=
operator|new
name|Thread
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
else|else
name|shutdownHookThread
operator|=
operator|(
name|Thread
operator|)
name|shutdownHook
expr_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHookThread
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShutdownHookManagerV2
extends|extends
name|ShutdownHookManager
block|{
specifier|public
name|void
name|addShutdownHook
parameter_list|(
name|Thread
name|shutdownHookThread
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
try|try
block|{
name|Methods
operator|.
name|call
argument_list|(
name|shutdownHookManagerClass
argument_list|,
name|Methods
operator|.
name|call
argument_list|(
name|shutdownHookManagerClass
argument_list|,
literal|null
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"addShutdownHook"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Runnable
operator|.
name|class
block|,
name|int
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|shutdownHookThread
block|,
name|priority
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"we could not use ShutdownHookManager.addShutdownHook"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|removeShutdownHook
parameter_list|(
name|Runnable
name|shutdownHook
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Boolean
operator|)
name|Methods
operator|.
name|call
argument_list|(
name|shutdownHookManagerClass
argument_list|,
name|Methods
operator|.
name|call
argument_list|(
name|shutdownHookManagerClass
argument_list|,
literal|null
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"removeShutdownHook"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Runnable
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|shutdownHook
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"we could not use ShutdownHookManager"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

