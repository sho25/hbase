begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|VersionInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RequestTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceInfo
import|;
end_import

begin_comment
comment|/** Reads calls from a connection and queues them for handling. */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"VO_VOLATILE_INCREMENT"
argument_list|,
name|justification
operator|=
literal|"False positive according to http://sourceforge.net/p/findbugs/bugs/1032/"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|SimpleServerRpcConnection
extends|extends
name|ServerRpcConnection
block|{
specifier|final
name|SocketChannel
name|channel
decl_stmt|;
specifier|private
name|ByteBuff
name|data
decl_stmt|;
specifier|private
name|ByteBuffer
name|dataLengthBuffer
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentLinkedDeque
argument_list|<
name|SimpleServerCall
argument_list|>
name|responseQueue
init|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|responseWriteLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongAdder
name|rpcCount
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
comment|// number of outstanding rpcs
specifier|private
name|long
name|lastContact
decl_stmt|;
specifier|private
specifier|final
name|Socket
name|socket
decl_stmt|;
specifier|private
specifier|final
name|SimpleRpcServerResponder
name|responder
decl_stmt|;
specifier|public
name|SimpleServerRpcConnection
parameter_list|(
name|SimpleRpcServer
name|rpcServer
parameter_list|,
name|SocketChannel
name|channel
parameter_list|,
name|long
name|lastContact
parameter_list|)
block|{
name|super
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|lastContact
operator|=
name|lastContact
expr_stmt|;
name|this
operator|.
name|data
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataLengthBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|channel
operator|.
name|socket
argument_list|()
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|socket
operator|.
name|getInetAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hostAddress
operator|=
literal|"*Unknown*"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hostAddress
operator|=
name|addr
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|remotePort
operator|=
name|socket
operator|.
name|getPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|rpcServer
operator|.
name|socketSendBufferSize
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|setSendBufferSize
argument_list|(
name|rpcServer
operator|.
name|socketSendBufferSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Connection: unable to set socket send buffer size to "
operator|+
name|rpcServer
operator|.
name|socketSendBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|saslCall
operator|=
operator|new
name|SimpleServerCall
argument_list|(
name|SASL_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|,
name|rpcServer
operator|.
name|responder
argument_list|)
expr_stmt|;
name|this
operator|.
name|setConnectionHeaderResponseCall
operator|=
operator|new
name|SimpleServerCall
argument_list|(
name|CONNECTION_HEADER_RESPONSE_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|,
name|rpcServer
operator|.
name|responder
argument_list|)
expr_stmt|;
name|this
operator|.
name|authFailedCall
operator|=
operator|new
name|SimpleServerCall
argument_list|(
name|AUTHORIZATION_FAILED_CALLID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|,
name|rpcServer
operator|.
name|responder
argument_list|)
expr_stmt|;
name|this
operator|.
name|responder
operator|=
name|rpcServer
operator|.
name|responder
expr_stmt|;
block|}
specifier|public
name|void
name|setLastContact
parameter_list|(
name|long
name|lastContact
parameter_list|)
block|{
name|this
operator|.
name|lastContact
operator|=
name|lastContact
expr_stmt|;
block|}
specifier|public
name|long
name|getLastContact
parameter_list|()
block|{
return|return
name|lastContact
return|;
block|}
comment|/* Return true if the connection has no outstanding rpc */
name|boolean
name|isIdle
parameter_list|()
block|{
return|return
name|rpcCount
operator|.
name|sum
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/* Decrement the outstanding RPC count */
specifier|protected
name|void
name|decRpcCount
parameter_list|()
block|{
name|rpcCount
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
comment|/* Increment the outstanding RPC count */
specifier|protected
name|void
name|incRpcCount
parameter_list|()
block|{
name|rpcCount
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|readPreamble
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
decl_stmt|;
comment|// Check for 'HBas' magic.
name|this
operator|.
name|dataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|,
name|dataLengthBuffer
operator|.
name|array
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|doBadPreambleHandling
argument_list|(
literal|"Expected HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|)
operator|+
literal|" but received HEADER="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|dataLengthBuffer
operator|.
name|array
argument_list|()
argument_list|)
operator|+
literal|" from "
operator|+
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// Now read the next two bytes, the version and the auth to use.
name|ByteBuffer
name|versionAndAuthBytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|count
operator|=
name|this
operator|.
name|rpcServer
operator|.
name|channelRead
argument_list|(
name|channel
argument_list|,
name|versionAndAuthBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|0
operator|||
name|versionAndAuthBytes
operator|.
name|remaining
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
return|return
name|count
return|;
block|}
name|int
name|version
init|=
name|versionAndAuthBytes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
name|authbyte
init|=
name|versionAndAuthBytes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|authMethod
operator|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authbyte
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|SimpleRpcServer
operator|.
name|CURRENT_VERSION
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
return|return
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|WrongVersionException
argument_list|(
name|msg
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|authMethod
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|getFatalConnectionString
argument_list|(
name|version
argument_list|,
name|authbyte
argument_list|)
decl_stmt|;
return|return
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|BadAuthException
argument_list|(
name|msg
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|allowFallbackToSimpleAuth
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|authenticationFallback
argument_list|()
expr_stmt|;
name|authenticatedWithFallback
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|AccessDeniedException
name|ae
init|=
operator|new
name|AccessDeniedException
argument_list|(
literal|"Authentication is required"
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
name|authFailedResponse
argument_list|,
name|authFailedCall
argument_list|,
name|ae
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|authFailedCall
operator|.
name|sendResponseIfReady
argument_list|()
expr_stmt|;
throw|throw
name|ae
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|rpcServer
operator|.
name|isSecurityEnabled
operator|&&
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|doRawSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|SaslUtil
operator|.
name|SWITCH_TO_SIMPLE_AUTH
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
comment|// client has already sent the initial Sasl message and we
comment|// should ignore it. Both client and server should fall back
comment|// to simple auth from now on.
name|skipInitialSaslHandshake
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|useSasl
operator|=
literal|true
expr_stmt|;
block|}
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connectionPreambleRead
operator|=
literal|true
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|private
name|int
name|read4Bytes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|dataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|rpcServer
operator|.
name|channelRead
argument_list|(
name|channel
argument_list|,
name|this
operator|.
name|dataLengthBuffer
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Read off the wire. If there is not enough data to read, update the connection state with what    * we have and returns.    * @return Returns -1 if failure (and caller will close connection), else zero or more.    * @throws IOException    * @throws InterruptedException    */
specifier|public
name|int
name|readAndProcess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Try and read in an int. If new connection, the int will hold the 'HBas' HEADER. If it
comment|// does, read in the rest of the connection preamble, the version and the auth method.
comment|// Else it will be length of the data to read (or -1 if a ping). We catch the integer
comment|// length into the 4-byte this.dataLengthBuffer.
name|int
name|count
init|=
name|read4Bytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|0
operator|||
name|dataLengthBuffer
operator|.
name|remaining
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
return|return
name|count
return|;
block|}
comment|// If we have not read the connection setup preamble, look to see if that is on the wire.
if|if
condition|(
operator|!
name|connectionPreambleRead
condition|)
block|{
name|count
operator|=
name|readPreamble
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|connectionPreambleRead
condition|)
block|{
return|return
name|count
return|;
block|}
name|count
operator|=
name|read4Bytes
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|0
operator|||
name|dataLengthBuffer
operator|.
name|remaining
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
return|return
name|count
return|;
block|}
block|}
comment|// We have read a length and we have read the preamble. It is either the connection header
comment|// or it is a request.
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|dataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|dataLength
init|=
name|dataLengthBuffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataLength
operator|==
name|RpcClient
operator|.
name|PING_CALL_ID
condition|)
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
comment|// covers the !useSasl too
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
comment|// ping message
block|}
block|}
if|if
condition|(
name|dataLength
operator|<
literal|0
condition|)
block|{
comment|// A data length of zero is legal.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unexpected data length "
operator|+
name|dataLength
operator|+
literal|"!! from "
operator|+
name|getHostAddress
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataLength
operator|>
name|this
operator|.
name|rpcServer
operator|.
name|maxRequestSize
condition|)
block|{
name|String
name|msg
init|=
literal|"RPC data length of "
operator|+
name|dataLength
operator|+
literal|" received from "
operator|+
name|getHostAddress
argument_list|()
operator|+
literal|" is greater than max allowed "
operator|+
name|this
operator|.
name|rpcServer
operator|.
name|maxRequestSize
operator|+
literal|". Set \""
operator|+
name|SimpleRpcServer
operator|.
name|MAX_REQUEST_SIZE
operator|+
literal|"\" on server to override this limit (not recommended)"
decl_stmt|;
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionHeaderRead
operator|&&
name|connectionPreambleRead
condition|)
block|{
name|incRpcCount
argument_list|()
expr_stmt|;
comment|// Construct InputStream for the non-blocking SocketChannel
comment|// We need the InputStream because we want to read only the request header
comment|// instead of the whole rpc.
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleServerRpcConnection
operator|.
name|this
operator|.
name|rpcServer
operator|.
name|channelRead
argument_list|(
name|channel
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|x
init|=
name|buf
operator|.
name|get
argument_list|()
decl_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|x
return|;
block|}
block|}
decl_stmt|;
name|CodedInputStream
name|cis
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|int
name|headerSize
init|=
name|cis
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
name|Message
operator|.
name|Builder
name|builder
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|cis
argument_list|,
name|headerSize
argument_list|)
expr_stmt|;
name|RequestHeader
name|header
init|=
operator|(
name|RequestHeader
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Notify the client about the offending request
name|SimpleServerCall
name|reqTooBig
init|=
operator|new
name|SimpleServerCall
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|,
name|this
operator|.
name|service
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|addr
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|,
name|responder
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|exception
argument_list|(
name|SimpleRpcServer
operator|.
name|REQUEST_TOO_BIG_EXCEPTION
argument_list|)
expr_stmt|;
comment|// Make sure the client recognizes the underlying exception
comment|// Otherwise, throw a DoNotRetryIOException.
if|if
condition|(
name|VersionInfoUtil
operator|.
name|hasMinimumVersion
argument_list|(
name|connectionHeader
operator|.
name|getVersionInfo
argument_list|()
argument_list|,
name|RequestTooBigException
operator|.
name|MAJOR_VERSION
argument_list|,
name|RequestTooBigException
operator|.
name|MINOR_VERSION
argument_list|)
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
literal|null
argument_list|,
name|reqTooBig
argument_list|,
name|SimpleRpcServer
operator|.
name|REQUEST_TOO_BIG_EXCEPTION
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
literal|null
argument_list|,
name|reqTooBig
argument_list|,
operator|new
name|DoNotRetryIOException
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// We are going to close the connection, make sure we process the response
comment|// before that. In rare case when this fails, we still close the connection.
name|responseWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|responder
operator|.
name|processResponse
argument_list|(
name|reqTooBig
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|responseWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Close the connection
return|return
operator|-
literal|1
return|;
block|}
comment|// Initialize this.data with a ByteBuff.
comment|// This call will allocate a ByteBuff to read request into and assign to this.data
comment|// Also when we use some buffer(s) from pool, it will create a CallCleanup instance also and
comment|// assign to this.callCleanup
name|initByteBuffToReadInto
argument_list|(
name|dataLength
argument_list|)
expr_stmt|;
comment|// Increment the rpc count. This counter will be decreased when we write
comment|// the response. If we want the connection to be detected as idle properly, we
comment|// need to keep the inc / dec correct.
name|incRpcCount
argument_list|()
expr_stmt|;
block|}
name|count
operator|=
name|channelDataRead
argument_list|(
name|channel
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>=
literal|0
operator|&&
name|data
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// count==0 if dataLength == 0
name|process
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|// It creates the ByteBuff and CallCleanup and assign to Connection instance.
specifier|private
name|void
name|initByteBuffToReadInto
parameter_list|(
name|int
name|length
parameter_list|)
block|{
comment|// We create random on heap buffers are read into those when
comment|// 1. ByteBufferPool is not there.
comment|// 2. When the size of the req is very small. Using a large sized (64 KB) buffer from pool is
comment|// waste then. Also if all the reqs are of this size, we will be creating larger sized
comment|// buffers and pool them permanently. This include Scan/Get request and DDL kind of reqs like
comment|// RegionOpen.
comment|// 3. If it is an initial handshake signal or initial connection request. Any way then
comment|// condition 2 itself will match
comment|// 4. When SASL use is ON.
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
operator|==
literal|null
operator|||
name|skipInitialSaslHandshake
operator|||
operator|!
name|connectionHeaderRead
operator|||
name|useSasl
operator|||
name|length
operator|<
name|this
operator|.
name|rpcServer
operator|.
name|minSizeForReservoirUse
condition|)
block|{
name|this
operator|.
name|data
operator|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Pair
argument_list|<
name|ByteBuff
argument_list|,
name|CallCleanup
argument_list|>
name|pair
init|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|minSizeForReservoirUse
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|this
operator|.
name|data
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|this
operator|.
name|callCleanup
operator|=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|channelDataRead
parameter_list|(
name|ReadableByteChannel
name|channel
parameter_list|,
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|buf
operator|.
name|read
argument_list|(
name|channel
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|metrics
operator|.
name|receivedBytes
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Process the data buffer and clean the connection state for the next call.    */
specifier|private
name|void
name|process
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|skipInitialSaslHandshake
condition|)
block|{
name|skipInitialSaslHandshake
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|useSasl
condition|)
block|{
name|saslReadAndProcess
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOneRpc
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Clean for the next call
name|data
operator|=
literal|null
expr_stmt|;
comment|// For the GC
name|this
operator|.
name|callCleanup
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|doBadPreambleHandling
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doBadPreambleHandling
argument_list|(
name|msg
argument_list|,
operator|new
name|FatalConnectionException
argument_list|(
name|msg
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|doBadPreambleHandling
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|SimpleServerCall
name|fakeCall
init|=
operator|new
name|SimpleServerCall
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
literal|null
argument_list|,
name|responder
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|setupResponse
argument_list|(
literal|null
argument_list|,
name|fakeCall
argument_list|,
name|e
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
comment|// Returning -1 closes out the connection.
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|data
operator|=
literal|null
expr_stmt|;
name|callCleanup
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
return|return;
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignored exception"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{       }
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|SimpleRpcServer
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignored exception"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConnectionOpen
parameter_list|()
block|{
return|return
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SimpleServerCall
name|createCall
parameter_list|(
name|int
name|id
parameter_list|,
name|BlockingService
name|service
parameter_list|,
name|MethodDescriptor
name|md
parameter_list|,
name|RequestHeader
name|header
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|long
name|size
parameter_list|,
name|TraceInfo
name|tinfo
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|,
name|int
name|timeout
parameter_list|,
name|CallCleanup
name|reqCleanup
parameter_list|)
block|{
return|return
operator|new
name|SimpleServerCall
argument_list|(
name|id
argument_list|,
name|service
argument_list|,
name|md
argument_list|,
name|header
argument_list|,
name|param
argument_list|,
name|cellScanner
argument_list|,
name|this
argument_list|,
name|size
argument_list|,
name|tinfo
argument_list|,
name|remoteAddress
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|reservoir
argument_list|,
name|this
operator|.
name|rpcServer
operator|.
name|cellBlockBuilder
argument_list|,
name|reqCleanup
argument_list|,
name|this
operator|.
name|responder
argument_list|)
return|;
block|}
block|}
end_class

end_unit

