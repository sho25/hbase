begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|HadoopKerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|AccessChecker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccessChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|AUDITLOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"SecurityLogger."
operator|+
name|AccessChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AuthManager
name|authManager
decl_stmt|;
comment|/** Group service to retrieve the user group information */
specifier|private
specifier|static
name|Groups
name|groupService
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isAuthorizationSupported
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Constructor with existing configuration    *    * @param conf Existing configuration to use    */
specifier|public
name|AccessChecker
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|authManager
operator|=
operator|new
name|AuthManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initGroupService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AuthManager
name|getAuthManager
parameter_list|()
block|{
return|return
name|authManager
return|;
block|}
comment|/**    * Authorizes that the current user has any of the given permissions to access the table.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type.    * @param tableName   Table requested    * @param permissions Actions being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requireAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|accessUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has global privileges for the given action.    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param filterUser User name to be filtered from permission as requested    * @param perm The action being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if authorization is denied    */
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|requireGlobalPermission
argument_list|(
name|user
argument_list|,
name|request
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|filterUser
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param perm      Action being requested    * @param tableName Affected table name.    * @param familyMap Affected column families.    * @param filterUser User name to be filtered from permission as requested    */
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|String
name|filterUser
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorizeUserGlobal
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|addExtraParam
argument_list|(
literal|"filterUser"
argument_list|,
name|filterUser
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param perm      Action being requested    * @param namespace The given namespace    */
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|authResult
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorizeUserGlobal
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param namespace Name space as requested    * @param filterUser User name to be filtered from permission as requested    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorizeUserNamespace
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|addExtraParam
argument_list|(
literal|"filterUser"
argument_list|,
name|filterUser
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param namespace  The given namespace    * @param tableName Table requested    * @param familyMap    Column family map requested    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorizeUserNamespace
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param tableName Table requested    * @param family    Column family requested    * @param qualifier Column qualifier requested    * @param filterUser User name to be filtered from permission as requested    * @param permissions Actions being requested    * @throws IOException if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|addExtraParam
argument_list|(
literal|"filterUser"
argument_list|,
name|filterUser
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    *    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param tableName Table requested    * @param family    Column family param    * @param qualifier Column qualifier param    * @throws IOException           if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requireTablePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check if caller is granting or revoking superusers's or supergroups's permissions.    * @param request request name    * @param caller caller    * @param userToBeChecked target user or group    * @throws IOException AccessDeniedException if target user is superuser    */
specifier|public
name|void
name|performOnSuperuser
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|caller
parameter_list|,
name|String
name|userToBeChecked
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|userGroups
operator|.
name|add
argument_list|(
name|userToBeChecked
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|AuthUtil
operator|.
name|isGroupPrincipal
argument_list|(
name|userToBeChecked
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|getUserGroups
argument_list|(
name|userToBeChecked
argument_list|)
control|)
block|{
name|userGroups
operator|.
name|add
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|userGroups
control|)
block|{
if|if
condition|(
name|Superusers
operator|.
name|isSuperUser
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|AuthResult
name|result
init|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Granting or revoking superusers's or supergroups's permissions is not allowed"
argument_list|,
name|caller
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|result
operator|.
name|getReason
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|checkLockPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
index|[]
name|regionInfos
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
operator|!
name|namespace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requireNamespacePermission
argument_list|(
name|user
argument_list|,
name|reason
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableName
operator|!=
literal|null
operator|||
operator|(
name|regionInfos
operator|!=
literal|null
operator|&&
name|regionInfos
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
comment|// So, either a table or regions op. If latter, check perms ons table.
name|TableName
name|tn
init|=
name|tableName
operator|!=
literal|null
condition|?
name|tableName
else|:
name|regionInfos
index|[
literal|0
index|]
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|requireTablePermission
argument_list|(
name|user
argument_list|,
name|reason
argument_list|,
name|tn
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid lock level when requesting permissions."
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|logResult
parameter_list|(
name|AuthResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Access {} for user {}; reason: {}; remote address: {}; request: {}; context: {}"
argument_list|,
operator|(
name|result
operator|.
name|isAllowed
argument_list|()
condition|?
literal|"allowed"
else|:
literal|"denied"
operator|)
argument_list|,
operator|(
name|result
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getUser
argument_list|()
operator|.
name|getShortName
argument_list|()
else|:
literal|"UNKNOWN"
operator|)
argument_list|,
name|result
operator|.
name|getReason
argument_list|()
argument_list|,
name|RpcServer
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|map
argument_list|(
name|InetAddress
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|,
name|result
operator|.
name|getRequest
argument_list|()
argument_list|,
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Validate the hasPermission operation caller with the filter user. Self check doesn't require    * any privilege but for others caller must have ADMIN privilege.    */
specifier|public
name|User
name|validateCallerWithFilterUser
parameter_list|(
name|User
name|caller
parameter_list|,
name|TablePermission
name|tPerm
parameter_list|,
name|String
name|inputUserName
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|filterUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|caller
operator|.
name|getShortName
argument_list|()
operator|.
name|equals
argument_list|(
name|inputUserName
argument_list|)
condition|)
block|{
comment|// User should have admin privilege if checking permission for other users
name|requirePermission
argument_list|(
name|caller
argument_list|,
literal|"hasPermission"
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|inputUserName
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
comment|// Initialize user instance for the input user name
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|getUserGroups
argument_list|(
name|inputUserName
argument_list|)
decl_stmt|;
name|filterUser
operator|=
operator|new
name|InputUser
argument_list|(
name|inputUserName
argument_list|,
name|groups
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// User don't need ADMIN privilege for self check.
comment|// Setting action as null in AuthResult to display empty action in audit log
name|AuthResult
name|result
init|=
name|AuthResult
operator|.
name|allow
argument_list|(
literal|"hasPermission"
argument_list|,
literal|"Self user validation allowed"
argument_list|,
name|caller
argument_list|,
literal|null
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|filterUser
operator|=
name|caller
expr_stmt|;
block|}
return|return
name|filterUser
return|;
block|}
comment|/**    * A temporary user class to instantiate User instance based on the name and groups.    */
specifier|public
specifier|static
class|class
name|InputUser
extends|extends
name|User
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|shortName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|groups
decl_stmt|;
specifier|public
name|InputUser
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|groups
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|shortName
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|shortName
operator|=
operator|new
name|HadoopKerberosName
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal principal name "
operator|+
name|this
operator|.
name|name
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
return|return
name|shortName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getGroupNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|groups
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|runAs
parameter_list|(
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Method not supported, this class has limited implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|runAs
parameter_list|(
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Method not supported, this class has limited implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
block|}
comment|/*    * Initialize the group service.    */
specifier|private
name|void
name|initGroupService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|groupService
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|User
operator|.
name|TestingGroups
operator|.
name|TEST_CONF
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|UserProvider
operator|.
name|setGroups
argument_list|(
operator|new
name|User
operator|.
name|TestingGroups
argument_list|(
name|UserProvider
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|groupService
operator|=
name|UserProvider
operator|.
name|getGroups
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|groupService
operator|=
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Retrieve the groups of the given user.    * @param user User name    * @return Groups    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getUserGroups
parameter_list|(
name|String
name|user
parameter_list|)
block|{
try|try
block|{
return|return
name|groupService
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred while retrieving group for "
operator|+
name|user
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
comment|/**    * Authorizes that if the current user has the given permissions.    * @param user Active user to which authorization checks should be applied    * @param request Request type    * @param permission Actions being requested    * @return True if the user has the specific permission    */
specifier|public
name|boolean
name|hasUserPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|tPerm
init|=
operator|(
name|TablePermission
operator|)
name|permission
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
name|AuthResult
name|authResult
init|=
name|permissionGranted
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
decl_stmt|;
name|AccessChecker
operator|.
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|permission
operator|instanceof
name|NamespacePermission
condition|)
block|{
name|NamespacePermission
name|nsPerm
init|=
operator|(
name|NamespacePermission
operator|)
name|permission
decl_stmt|;
name|AuthResult
name|authResult
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|nsPerm
operator|.
name|getActions
argument_list|()
control|)
block|{
if|if
condition|(
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserNamespace
argument_list|(
name|user
argument_list|,
name|nsPerm
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|action
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace action allowed"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Namespace action denied"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|AccessChecker
operator|.
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
name|AuthResult
name|authResult
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|action
range|:
name|permission
operator|.
name|getActions
argument_list|()
control|)
block|{
if|if
condition|(
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserGlobal
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global action allowed"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global action denied"
argument_list|,
name|user
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|AccessChecker
operator|.
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authResult
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|AuthResult
name|permissionGranted
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|Action
name|permRequest
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|map
init|=
name|makeFamilyMap
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
return|return
name|permissionGranted
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|map
argument_list|)
return|;
block|}
comment|/**    * Check the current user for authorization to perform a specific action against the given set of    * row data.    *<p>    * Note: Ordering of the authorization checks has been carefully optimized to short-circuit the    * most common requests and minimize the amount of processing required.    *</p>    * @param request User request    * @param user User name    * @param permRequest the action being requested    * @param tableName Table name    * @param families the map of column families to qualifiers present in the request    * @return an authorization result    */
specifier|public
name|AuthResult
name|permissionGranted
parameter_list|(
name|String
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|Action
name|permRequest
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|families
parameter_list|)
block|{
comment|// 1. All users need read access to hbase:meta table.
comment|// this is a very common operation, so deal with it quickly.
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
if|if
condition|(
name|permRequest
operator|==
name|Action
operator|.
name|READ
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"All users allowed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"No user associated with request!"
argument_list|,
literal|null
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 2. check for the table-level, if successful we can short-circuit
if|if
condition|(
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 3. check permissions against the requested families
if|if
condition|(
name|families
operator|!=
literal|null
operator|&&
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// all families must pass
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// a) check for family level access
if|if
condition|(
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
continue|continue;
comment|// family-level permission overrides per-qualifier
block|}
comment|// b) qualifier level access can still succeed
if|if
condition|(
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
comment|// for each qualifier of the family
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|familySet
init|=
operator|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|familySet
control|)
block|{
if|if
condition|(
operator|!
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|qualifier
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
comment|// List<Cell>
name|List
argument_list|<
name|Cell
argument_list|>
name|cellList
init|=
operator|(
name|List
argument_list|<
name|Cell
argument_list|>
operator|)
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cellList
control|)
block|{
if|if
condition|(
operator|!
name|getAuthManager
argument_list|()
operator|.
name|authorizeUserTable
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|,
name|permRequest
argument_list|)
condition|)
block|{
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed qualifier check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no qualifiers and family-level check already failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Failed family check"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|makeFamilyMap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// all family checks passed
return|return
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"All family checks passed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|// 4. no families to check and table level access failed
return|return
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"No families to check and table permission failed"
argument_list|,
name|user
argument_list|,
name|permRequest
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|makeFamilyMap
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|qualifier
operator|!=
literal|null
condition|?
name|ImmutableSet
operator|.
name|of
argument_list|(
name|qualifier
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|familyMap
return|;
block|}
block|}
end_class

end_unit

