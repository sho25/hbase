begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|AccessChecker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|AUDITLOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"SecurityLogger."
operator|+
name|AccessChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TableAuthManager
name|authManager
decl_stmt|;
comment|/**    * if we are active, usually false, only true if "hbase.security.authorization"    * has been set to true in site configuration.see HBASE-19483.    */
specifier|private
name|boolean
name|authorizationEnabled
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isAuthorizationSupported
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Constructor with existing configuration    *    * @param conf Existing configuration to use    * @param zkw reference to the {@link ZKWatcher}    */
specifier|public
name|AccessChecker
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ZKWatcher
name|zkw
parameter_list|)
throws|throws
name|RuntimeException
block|{
comment|// If zk is null or IOException while obtaining auth manager,
comment|// throw RuntimeException so that the coprocessor is unloaded.
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|authManager
operator|=
name|TableAuthManager
operator|.
name|getOrCreate
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error obtaining AccessChecker"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Error obtaining AccessChecker, zk found null."
argument_list|)
throw|;
block|}
name|authorizationEnabled
operator|=
name|isAuthorizationSupported
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableAuthManager
name|getAuthManager
parameter_list|()
block|{
return|return
name|authManager
return|;
block|}
comment|/**    * Authorizes that the current user has any of the given permissions to access the table.    *    * @param tableName   Table requested    * @param permissions Actions being requested    * @throws IOException           if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requireAccess
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|hasAccess
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has global privileges for the given action.    *    * @param perm The action being requested    * @throws IOException           if obtaining the current user fails    * @throws AccessDeniedException if authorization is denied    */
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|requireGlobalPermission
argument_list|(
name|user
argument_list|,
name|request
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    *    * @param perm      Action being requested    * @param tableName Affected table name.    * @param familyMap Affected column families.    */
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
name|tableName
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks that the user has the given global permission. The generated    * audit log message will contain context information for the operation    * being authorized, based on the given parameters.    *    * @param perm      Action being requested    * @param namespace The given namespace    */
specifier|public
name|void
name|requireGlobalPermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|Action
name|perm
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|authResult
decl_stmt|;
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
condition|)
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Global check allowed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authResult
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Global check failed"
argument_list|,
name|user
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authResult
operator|.
name|getParams
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|logResult
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions for user '"
operator|+
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
operator|.
name|getShortName
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"' (global, action="
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    *    * @param namespace  The given namespace    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks that the user has the given global or namespace permission.    *    * @param namespace  The given namespace    * @param permissions Actions being requested    */
specifier|public
name|void
name|requireNamespacePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|namespace
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Namespace permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setFamilies
argument_list|(
name|familyMap
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    *    * @param tableName Table requested    * @param family    Column family requested    * @param qualifier Column qualifier requested    * @throws IOException           if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requirePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authorizes that the current user has any of the given permissions for the    * given table, column family and column qualifier.    *    * @param tableName Table requested    * @param family    Column family param    * @param qualifier Column qualifier param    * @throws IOException           if obtaining the current user fails    * @throws AccessDeniedException if user has no authorization    */
specifier|public
name|void
name|requireTablePermission
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|request
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Action
modifier|...
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthResult
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|permission
range|:
name|permissions
control|)
block|{
if|if
condition|(
name|authManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|permission
argument_list|)
condition|)
block|{
name|result
operator|=
name|AuthResult
operator|.
name|allow
argument_list|(
name|request
argument_list|,
literal|"Table permission granted"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// rest of the world
name|result
operator|=
name|AuthResult
operator|.
name|deny
argument_list|(
name|request
argument_list|,
literal|"Insufficient permissions"
argument_list|,
name|user
argument_list|,
name|permission
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|result
operator|.
name|getParams
argument_list|()
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|logResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizationEnabled
operator|&&
operator|!
name|result
operator|.
name|isAllowed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Insufficient permissions "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|checkLockPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
index|[]
name|regionInfos
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
operator|!
name|namespace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requireNamespacePermission
argument_list|(
name|user
argument_list|,
name|reason
argument_list|,
name|namespace
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableName
operator|!=
literal|null
operator|||
operator|(
name|regionInfos
operator|!=
literal|null
operator|&&
name|regionInfos
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
comment|// So, either a table or regions op. If latter, check perms ons table.
name|TableName
name|tn
init|=
name|tableName
operator|!=
literal|null
condition|?
name|tableName
else|:
name|regionInfos
index|[
literal|0
index|]
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|requireTablePermission
argument_list|(
name|user
argument_list|,
name|reason
argument_list|,
name|tn
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Invalid lock level when requesting permissions."
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|logResult
parameter_list|(
name|AuthResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|AUDITLOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|AUDITLOG
operator|.
name|trace
argument_list|(
literal|"Access "
operator|+
operator|(
name|result
operator|.
name|isAllowed
argument_list|()
condition|?
literal|"allowed"
else|:
literal|"denied"
operator|)
operator|+
literal|" for user "
operator|+
operator|(
name|result
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getUser
argument_list|()
operator|.
name|getShortName
argument_list|()
else|:
literal|"UNKNOWN"
operator|)
operator|+
literal|"; reason: "
operator|+
name|result
operator|.
name|getReason
argument_list|()
operator|+
literal|"; remote address: "
operator|+
name|RpcServer
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|map
argument_list|(
name|InetAddress
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
operator|+
literal|"; request: "
operator|+
name|result
operator|.
name|getRequest
argument_list|()
operator|+
literal|"; context: "
operator|+
name|result
operator|.
name|toContextString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

