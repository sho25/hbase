begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|RSProcedureCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|KeyLocker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_comment
comment|/**  * This callable is used to do the real split WAL task. It is called by  * {@link org.apache.hadoop.hbase.master.procedure.SplitWALRemoteProcedure} from master and executed  * by executor service which is in charge of executing the events of EventType.RS_LOG_REPLAY  *  * When execute this callable, it will call SplitLogWorker.splitLog() to split the WAL.  * If the return value is SplitLogWorker.TaskExecutor.Status.DONE, it means the task is successful  * and it will return null to end the call. Otherwise it will throw an exception and let  * {@link org.apache.hadoop.hbase.master.procedure.SplitWALRemoteProcedure} to handle this problem.  *  * This class is to replace the zk-based WAL splitting related code, {@link SplitLogWorker},  * {@link org.apache.hadoop.hbase.coordination.SplitLogWorkerCoordination} and  * {@link org.apache.hadoop.hbase.coordination.ZkSplitLogWorkerCoordination} can be removed after  * we switch to procedure-based WAL splitting.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitWALCallable
implements|implements
name|RSProcedureCallable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitWALCallable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|walPath
decl_stmt|;
specifier|private
name|Exception
name|initError
decl_stmt|;
specifier|private
name|HRegionServer
name|rs
decl_stmt|;
specifier|private
specifier|final
name|KeyLocker
argument_list|<
name|String
argument_list|>
name|splitWALLocks
init|=
operator|new
name|KeyLocker
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|Lock
name|splitWALLock
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|byte
index|[]
name|parameter
parameter_list|,
name|HRegionServer
name|rs
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|rs
operator|=
name|rs
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|SplitWALParameter
name|param
init|=
name|MasterProcedureProtos
operator|.
name|SplitWALParameter
operator|.
name|parseFrom
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
name|this
operator|.
name|walPath
operator|=
name|param
operator|.
name|getWalPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"parse proto buffer of split WAL request failed "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|initError
operator|=
name|e
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventType
name|getEventType
parameter_list|()
block|{
return|return
name|EventType
operator|.
name|RS_LOG_REPLAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|initError
operator|!=
literal|null
condition|)
block|{
throw|throw
name|initError
throw|;
block|}
comment|//grab a lock
name|splitWALLock
operator|=
name|splitWALLocks
operator|.
name|acquireLock
argument_list|(
name|walPath
argument_list|)
expr_stmt|;
try|try
block|{
name|splitWal
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"split WAL {} succeed."
argument_list|,
name|walPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to split WAL {}."
argument_list|,
name|walPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|splitWALLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getWalPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|walPath
return|;
block|}
specifier|private
name|void
name|splitWal
parameter_list|()
throws|throws
name|IOException
block|{
name|SplitLogWorker
operator|.
name|TaskExecutor
operator|.
name|Status
name|status
init|=
name|SplitLogWorker
operator|.
name|splitLog
argument_list|(
name|walPath
argument_list|,
literal|null
argument_list|,
name|rs
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|rs
argument_list|,
name|rs
argument_list|,
name|rs
operator|.
name|getWalFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|SplitLogWorker
operator|.
name|TaskExecutor
operator|.
name|Status
operator|.
name|DONE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Split WAL "
operator|+
name|walPath
operator|+
literal|" failed at server "
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

