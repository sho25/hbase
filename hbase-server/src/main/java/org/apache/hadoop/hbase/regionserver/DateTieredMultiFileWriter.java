begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * class for cell sink that separates the provided cells into multiple files for date tiered  * compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DateTieredMultiFileWriter
extends|extends
name|AbstractMultiFileWriter
block|{
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|StoreFileWriter
argument_list|>
name|lowerBoundary2Writer
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|needEmptyFile
decl_stmt|;
comment|/**    * @param needEmptyFile whether need to create an empty store file if we haven't written out    *          anything.    */
specifier|public
name|DateTieredMultiFileWriter
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|lowerBoundaries
parameter_list|,
name|boolean
name|needEmptyFile
parameter_list|)
block|{
for|for
control|(
name|Long
name|lowerBoundary
range|:
name|lowerBoundaries
control|)
block|{
name|lowerBoundary2Writer
operator|.
name|put
argument_list|(
name|lowerBoundary
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|needEmptyFile
operator|=
name|needEmptyFile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|StoreFileWriter
argument_list|>
name|entry
init|=
name|lowerBoundary2Writer
operator|.
name|floorEntry
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
name|writerFactory
operator|.
name|createWriter
argument_list|()
expr_stmt|;
name|lowerBoundary2Writer
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|StoreFileWriter
argument_list|>
name|writers
parameter_list|()
block|{
return|return
name|lowerBoundary2Writer
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|preCommitWriters
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|needEmptyFile
condition|)
block|{
return|return;
block|}
for|for
control|(
name|StoreFileWriter
name|writer
range|:
name|lowerBoundary2Writer
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
comment|// we haven't written out any data, create an empty file to retain metadata
name|lowerBoundary2Writer
operator|.
name|put
argument_list|(
name|lowerBoundary2Writer
operator|.
name|firstKey
argument_list|()
argument_list|,
name|writerFactory
operator|.
name|createWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

