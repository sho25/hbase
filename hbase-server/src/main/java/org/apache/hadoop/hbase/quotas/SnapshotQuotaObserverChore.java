begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MetricsMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * A Master-invoked {@code Chore} that computes the size of each snapshot which was created from  * a table which has a space quota.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SnapshotQuotaObserverChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotQuotaObserverChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|SNAPSHOT_QUOTA_CHORE_PERIOD_KEY
init|=
literal|"hbase.master.quotas.snapshot.chore.period"
decl_stmt|;
specifier|static
specifier|final
name|int
name|SNAPSHOT_QUOTA_CHORE_PERIOD_DEFAULT
init|=
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
comment|// 5 minutes in millis
specifier|static
specifier|final
name|String
name|SNAPSHOT_QUOTA_CHORE_DELAY_KEY
init|=
literal|"hbase.master.quotas.snapshot.chore.delay"
decl_stmt|;
specifier|static
specifier|final
name|long
name|SNAPSHOT_QUOTA_CHORE_DELAY_DEFAULT
init|=
literal|1000L
operator|*
literal|60L
decl_stmt|;
comment|// 1 minute in millis
specifier|static
specifier|final
name|String
name|SNAPSHOT_QUOTA_CHORE_TIMEUNIT_KEY
init|=
literal|"hbase.master.quotas.snapshot.chore.timeunit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SNAPSHOT_QUOTA_CHORE_TIMEUNIT_DEFAULT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|MetricsMaster
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|SnapshotQuotaObserverChore
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|MetricsMaster
name|metrics
parameter_list|)
block|{
name|this
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|master
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|master
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
name|SnapshotQuotaObserverChore
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|MetricsMaster
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|QuotaObserverChore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|stopper
argument_list|,
name|getPeriod
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getInitialDelay
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getTimeUnit
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Computing sizes of snapshots for quota management."
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|_chore
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|metrics
condition|)
block|{
name|metrics
operator|.
name|incrementSnapshotObserverTime
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1_000_000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to compute the size of snapshots, will retry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|_chore
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Gets all tables with quotas that also have snapshots.
comment|// This values are all of the snapshots that we need to compute the size of.
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|snapshotsToComputeSize
init|=
name|getSnapshotsToComputeSize
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|metrics
condition|)
block|{
name|metrics
operator|.
name|incrementSnapshotFetchTime
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1_000_000
argument_list|)
expr_stmt|;
block|}
comment|// For each table, compute the size of each snapshot
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotsWithSize
init|=
name|computeSnapshotSizes
argument_list|(
name|snapshotsToComputeSize
argument_list|)
decl_stmt|;
comment|// Write the size data to the quota table.
name|persistSnapshotSizes
argument_list|(
name|snapshotsWithSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetches each table with a quota (table or namespace quota), and then fetch the name of each    * snapshot which was created from that table.    *    * @return A mapping of table to snapshots created from that table    */
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|getSnapshotsToComputeSize
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesToFetchSnapshotsFrom
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|QuotaFilter
name|filter
init|=
operator|new
name|QuotaFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|addTypeFilter
argument_list|(
name|QuotaType
operator|.
name|SPACE
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|// Pull all of the tables that have quotas (direct, or from namespace)
for|for
control|(
name|QuotaSettings
name|qs
range|:
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|filter
argument_list|)
control|)
block|{
name|String
name|ns
init|=
name|qs
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|qs
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|==
name|ns
operator|&&
literal|null
operator|==
name|tn
operator|)
operator|||
operator|(
literal|null
operator|!=
name|ns
operator|&&
literal|null
operator|!=
name|tn
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected only one of namespace and tablename to be null"
argument_list|)
throw|;
block|}
comment|// Collect either the table name itself, or all of the tables in the namespace
if|if
condition|(
literal|null
operator|!=
name|ns
condition|)
block|{
name|tablesToFetchSnapshotsFrom
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|admin
operator|.
name|listTableNamesByNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tablesToFetchSnapshotsFrom
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Fetch all snapshots that were created from these tables
return|return
name|getSnapshotsFromTables
argument_list|(
name|admin
argument_list|,
name|tablesToFetchSnapshotsFrom
argument_list|)
return|;
block|}
block|}
comment|/**    * Computes a mapping of originating {@code TableName} to snapshots, when the {@code TableName}    * exists in the provided {@code Set}.    */
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|getSnapshotsFromTables
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesToFetchSnapshotsFrom
parameter_list|)
throws|throws
name|IOException
block|{
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|snapshotsToCompute
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
name|sd
range|:
name|admin
operator|.
name|listSnapshots
argument_list|()
control|)
block|{
name|TableName
name|tn
init|=
name|sd
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tablesToFetchSnapshotsFrom
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|sd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|snapshotsToCompute
return|;
block|}
comment|/**    * Computes the size of each snapshot provided given the current files referenced by the table.    *    * @param snapshotsToComputeSize The snapshots to compute the size of    * @return A mapping of table to snapshot created from that table and the snapshot's size.    */
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|computeSnapshotSizes
parameter_list|(
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|snapshotsToComputeSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotSizes
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|snapshotsToComputeSize
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|TableName
name|tn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|snapshotNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sort the snapshots so we process them in lexicographic order. This ensures that multiple
comment|// invocations of this Chore do not more the size ownership of some files between snapshots
comment|// that reference the file (prevents size ownership from moving between snapshots).
name|Collections
operator|.
name|sort
argument_list|(
name|snapshotNames
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Get the map of store file names to store file path for this table
comment|// TODO is the store-file name unique enough? Does this need to be region+family+storefile?
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tableReferencedStoreFiles
decl_stmt|;
try|try
block|{
name|tableReferencedStoreFiles
operator|=
name|FSUtils
operator|.
name|getTableStoreFilePathMap
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|)
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Paths for "
operator|+
name|tn
operator|+
literal|": "
operator|+
name|tableReferencedStoreFiles
argument_list|)
expr_stmt|;
block|}
comment|// For each snapshot on this table, get the files which the snapshot references which
comment|// the table does not.
name|Set
argument_list|<
name|String
argument_list|>
name|snapshotReferencedFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|snapshotName
range|:
name|snapshotNames
control|)
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotDescription
name|sd
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|sd
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Files referenced by other snapshots: "
operator|+
name|snapshotReferencedFiles
argument_list|)
expr_stmt|;
block|}
comment|// Get the set of files from the manifest that this snapshot references which are not also
comment|// referenced by the originating table.
name|Set
argument_list|<
name|StoreFileReference
argument_list|>
name|unreferencedStoreFileNames
init|=
name|getStoreFilesFromSnapshot
argument_list|(
name|manifest
argument_list|,
parameter_list|(
name|sfn
parameter_list|)
lambda|->
operator|!
name|tableReferencedStoreFiles
operator|.
name|contains
argument_list|(
name|sfn
argument_list|)
operator|&&
operator|!
name|snapshotReferencedFiles
operator|.
name|contains
argument_list|(
name|sfn
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Snapshot "
operator|+
name|snapshotName
operator|+
literal|" solely references the files: "
operator|+
name|unreferencedStoreFileNames
argument_list|)
expr_stmt|;
block|}
comment|// Compute the size of the store files for this snapshot
name|long
name|size
init|=
name|getSizeOfStoreFiles
argument_list|(
name|tn
argument_list|,
name|unreferencedStoreFileNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Computed size of "
operator|+
name|snapshotName
operator|+
literal|" to be "
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Persist this snapshot's size into the map
name|snapshotSizes
operator|.
name|put
argument_list|(
name|tn
argument_list|,
operator|new
name|SnapshotWithSize
argument_list|(
name|snapshotName
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that we don't double-count the same file
for|for
control|(
name|StoreFileReference
name|ref
range|:
name|unreferencedStoreFileNames
control|)
block|{
for|for
control|(
name|String
name|fileName
range|:
name|ref
operator|.
name|getFamilyToFilesMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|snapshotReferencedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the amount of time it took to compute the snapshot's size
if|if
condition|(
literal|null
operator|!=
name|metrics
condition|)
block|{
name|metrics
operator|.
name|incrementSnapshotSizeComputationTime
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1_000_000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|snapshotSizes
return|;
block|}
comment|/**    * Extracts the names of the store files referenced by this snapshot which satisfy the given    * predicate (the predicate returns {@code true}).    */
name|Set
argument_list|<
name|StoreFileReference
argument_list|>
name|getStoreFilesFromSnapshot
parameter_list|(
name|SnapshotManifest
name|manifest
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|Set
argument_list|<
name|StoreFileReference
argument_list|>
name|references
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For each region referenced by the snapshot
for|for
control|(
name|SnapshotRegionManifest
name|rm
range|:
name|manifest
operator|.
name|getRegionManifests
argument_list|()
control|)
block|{
name|StoreFileReference
name|regionReference
init|=
operator|new
name|StoreFileReference
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|rm
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// For each column family in this region
for|for
control|(
name|FamilyFiles
name|ff
range|:
name|rm
operator|.
name|getFamilyFilesList
argument_list|()
control|)
block|{
specifier|final
name|String
name|familyName
init|=
name|ff
operator|.
name|getFamilyName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
comment|// And each store file in that family
for|for
control|(
name|StoreFile
name|sf
range|:
name|ff
operator|.
name|getStoreFilesList
argument_list|()
control|)
block|{
name|String
name|storeFileName
init|=
name|sf
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// A snapshot only "inherits" a files size if it uniquely refers to it (no table
comment|// and no other snapshot references it).
if|if
condition|(
name|filter
operator|.
name|test
argument_list|(
name|storeFileName
argument_list|)
condition|)
block|{
name|regionReference
operator|.
name|addFamilyStoreFile
argument_list|(
name|familyName
argument_list|,
name|storeFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Only add this Region reference if we retained any files.
if|if
condition|(
operator|!
name|regionReference
operator|.
name|getFamilyToFilesMapping
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|regionReference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|references
return|;
block|}
comment|/**    * Calculates the directory in HDFS for a table based on the configuration.    */
name|Path
name|getTableDir
parameter_list|(
name|TableName
name|tn
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|tn
argument_list|)
return|;
block|}
comment|/**    * Computes the size of each store file in {@code storeFileNames}    */
name|long
name|getSizeOfStoreFiles
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|Set
argument_list|<
name|StoreFileReference
argument_list|>
name|storeFileNames
parameter_list|)
block|{
return|return
name|storeFileNames
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingLong
argument_list|(
parameter_list|(
name|sfr
parameter_list|)
lambda|->
name|getSizeOfStoreFile
argument_list|(
name|tn
argument_list|,
name|sfr
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Computes the size of the store files for a single region.    */
name|long
name|getSizeOfStoreFile
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|StoreFileReference
name|storeFileName
parameter_list|)
block|{
name|String
name|regionName
init|=
name|storeFileName
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
return|return
name|storeFileName
operator|.
name|getFamilyToFilesMapping
argument_list|()
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingLong
argument_list|(
parameter_list|(
name|e
parameter_list|)
lambda|->
name|getSizeOfStoreFile
argument_list|(
name|tn
argument_list|,
name|regionName
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Computes the size of the store file given its name, region and family name in    * the archive directory.    */
name|long
name|getSizeOfStoreFile
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|String
name|regionName
parameter_list|,
name|String
name|family
parameter_list|,
name|String
name|storeFile
parameter_list|)
block|{
name|Path
name|familyArchivePath
decl_stmt|;
try|try
block|{
name|familyArchivePath
operator|=
name|HFileArchiveUtil
operator|.
name|getStoreArchivePath
argument_list|(
name|conf
argument_list|,
name|tn
argument_list|,
name|regionName
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not compute path for the archive directory for the region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0L
return|;
block|}
name|Path
name|fileArchivePath
init|=
operator|new
name|Path
argument_list|(
name|familyArchivePath
argument_list|,
name|storeFile
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|fileArchivePath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fileArchivePath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|status
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expected "
operator|+
name|fileArchivePath
operator|+
literal|" to be a file but was a directory, ignoring reference"
argument_list|)
expr_stmt|;
return|return
literal|0L
return|;
block|}
return|return
name|status
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not obtain the status of "
operator|+
name|fileArchivePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0L
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expected "
operator|+
name|fileArchivePath
operator|+
literal|" to exist but does not, ignoring reference."
argument_list|)
expr_stmt|;
return|return
literal|0L
return|;
block|}
comment|/**    * Writes the snapshot sizes to the {@code hbase:quota} table.    *    * @param snapshotsWithSize The snapshot sizes to write.    */
name|void
name|persistSnapshotSizes
parameter_list|(
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotsWithSize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|quotaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
comment|// Write each snapshot size for the table
name|persistSnapshotSizes
argument_list|(
name|quotaTable
argument_list|,
name|snapshotsWithSize
argument_list|)
expr_stmt|;
comment|// Write a size entry for all snapshots in a namespace
name|persistSnapshotSizesByNS
argument_list|(
name|quotaTable
argument_list|,
name|snapshotsWithSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the snapshot sizes to the provided {@code table}.    */
name|void
name|persistSnapshotSizes
parameter_list|(
name|Table
name|table
parameter_list|,
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotsWithSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Convert each entry in the map to a Put and write them to the quota table
name|table
operator|.
name|put
argument_list|(
name|snapshotsWithSize
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|QuotaTableUtil
operator|.
name|createPutForSnapshotSize
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rolls up the snapshot sizes by namespace and writes a single record for each namespace    * which is the size of all snapshots in that namespace.    */
name|void
name|persistSnapshotSizesByNS
parameter_list|(
name|Table
name|quotaTable
parameter_list|,
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotsWithSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|namespaceSnapshotSizes
init|=
name|groupSnapshotSizesByNamespace
argument_list|(
name|snapshotsWithSize
argument_list|)
decl_stmt|;
name|quotaTable
operator|.
name|put
argument_list|(
name|namespaceSnapshotSizes
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|QuotaTableUtil
operator|.
name|createPutForNamespaceSnapshotSize
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sums the snapshot sizes for each namespace.    */
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|groupSnapshotSizesByNamespace
parameter_list|(
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|SnapshotWithSize
argument_list|>
name|snapshotsWithSize
parameter_list|)
block|{
return|return
name|snapshotsWithSize
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
comment|// Convert TableName into the namespace string
parameter_list|(
name|e
parameter_list|)
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
comment|// Sum the values for namespace
name|Collectors
operator|.
name|mapping
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|,
name|Collectors
operator|.
name|summingLong
argument_list|(
parameter_list|(
name|sws
parameter_list|)
lambda|->
name|sws
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * A struct encapsulating the name of a snapshot and its "size" on the filesystem. This size is    * defined as the amount of filesystem space taken by the files the snapshot refers to which    * the originating table no longer refers to.    */
specifier|static
class|class
name|SnapshotWithSize
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
name|SnapshotWithSize
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SnapshotWithSize
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SnapshotWithSize
name|other
init|=
operator|(
name|SnapshotWithSize
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|&&
name|size
operator|==
name|other
operator|.
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"SnapshotWithSize:["
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|size
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * A reference to a collection of files in the archive directory for a single region.    */
specifier|static
class|class
name|StoreFileReference
block|{
specifier|private
specifier|final
name|String
name|regionName
decl_stmt|;
specifier|private
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|familyToFiles
decl_stmt|;
name|StoreFileReference
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
name|this
operator|.
name|regionName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|familyToFiles
operator|=
name|HashMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|String
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFamilyToFilesMapping
parameter_list|()
block|{
return|return
name|familyToFiles
return|;
block|}
name|void
name|addFamilyStoreFile
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|storeFileName
parameter_list|)
block|{
name|familyToFiles
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|storeFileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|regionName
argument_list|)
operator|.
name|append
argument_list|(
name|familyToFiles
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|StoreFileReference
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StoreFileReference
name|other
init|=
operator|(
name|StoreFileReference
operator|)
name|o
decl_stmt|;
return|return
name|regionName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|regionName
argument_list|)
operator|&&
name|familyToFiles
operator|.
name|equals
argument_list|(
name|other
operator|.
name|familyToFiles
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"StoreFileReference[region="
argument_list|)
operator|.
name|append
argument_list|(
name|regionName
argument_list|)
operator|.
name|append
argument_list|(
literal|", files="
argument_list|)
operator|.
name|append
argument_list|(
name|familyToFiles
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Extracts the period for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore period or the default value.    */
specifier|static
name|int
name|getPeriod
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|SNAPSHOT_QUOTA_CHORE_PERIOD_KEY
argument_list|,
name|SNAPSHOT_QUOTA_CHORE_PERIOD_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the initial delay for the chore from the configuration.    *    * @param conf The configuration object.    * @return The configured chore initial delay or the default value.    */
specifier|static
name|long
name|getInitialDelay
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|SNAPSHOT_QUOTA_CHORE_DELAY_KEY
argument_list|,
name|SNAPSHOT_QUOTA_CHORE_DELAY_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Extracts the time unit for the chore period and initial delay from the configuration. The    * configuration value for {@link #SNAPSHOT_QUOTA_CHORE_TIMEUNIT_KEY} must correspond to    * a {@link TimeUnit} value.    *    * @param conf The configuration object.    * @return The configured time unit for the chore period and initial delay or the default value.    */
specifier|static
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SNAPSHOT_QUOTA_CHORE_TIMEUNIT_KEY
argument_list|,
name|SNAPSHOT_QUOTA_CHORE_TIMEUNIT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

