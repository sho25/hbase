begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|normalizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Normalization plan to split region.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitNormalizationPlan
implements|implements
name|NormalizationPlan
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitNormalizationPlan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RegionInfo
name|regionInfo
decl_stmt|;
specifier|private
name|byte
index|[]
name|splitPoint
decl_stmt|;
specifier|public
name|SplitNormalizationPlan
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|splitPoint
operator|=
name|splitPoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PlanType
name|getType
parameter_list|()
block|{
return|return
name|PlanType
operator|.
name|SPLIT
return|;
block|}
specifier|public
name|RegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
specifier|public
name|void
name|setRegionInfo
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getSplitPoint
parameter_list|()
block|{
return|return
name|splitPoint
return|;
block|}
specifier|public
name|void
name|setSplitPoint
parameter_list|(
name|byte
index|[]
name|splitPoint
parameter_list|)
block|{
name|this
operator|.
name|splitPoint
operator|=
name|splitPoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SplitNormalizationPlan{"
operator|+
literal|"regionInfo="
operator|+
name|regionInfo
operator|+
literal|", splitPoint="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
operator|+
literal|'}'
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Admin
name|admin
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing splitting normalization plan: "
operator|+
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|splitRegion
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during region split: "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

