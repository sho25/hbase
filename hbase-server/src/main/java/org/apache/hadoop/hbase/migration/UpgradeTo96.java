begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileV1Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ZKDataMigrator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_class
specifier|public
class|class
name|UpgradeTo96
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UpgradeTo96
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|/**    * whether to do overall upgrade (namespace and znodes)    */
specifier|private
name|boolean
name|upgrade
decl_stmt|;
comment|/**    * whether to check for HFileV1    */
specifier|private
name|boolean
name|checkForHFileV1
decl_stmt|;
comment|/**    * Path of directory to check for HFileV1    */
specifier|private
name|String
name|dirToCheckForHFileV1
decl_stmt|;
name|UpgradeTo96
parameter_list|()
block|{
name|setOptions
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setOptions
parameter_list|()
block|{
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Help"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"check"
argument_list|,
literal|false
argument_list|,
literal|"Run upgrade check; looks for HFileV1 "
operator|+
literal|" under ${hbase.rootdir} or provided 'dir' directory."
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"execute"
argument_list|,
literal|false
argument_list|,
literal|"Run upgrade; zk and hdfs must be up, hbase down"
argument_list|)
argument_list|)
expr_stmt|;
name|Option
name|pathOption
init|=
operator|new
name|Option
argument_list|(
literal|"dir"
argument_list|,
literal|true
argument_list|,
literal|"Relative path of dir to check for HFileV1s."
argument_list|)
decl_stmt|;
name|pathOption
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|pathOption
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|parseOption
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|false
return|;
comment|// no args shows help.
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"execute"
argument_list|)
condition|)
name|upgrade
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"check"
argument_list|)
condition|)
name|checkForHFileV1
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|checkForHFileV1
operator|&&
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"dir"
argument_list|)
condition|)
block|{
name|this
operator|.
name|dirToCheckForHFileV1
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"dir"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"$bin/hbase upgrade -check [-dir DIR]|-execute"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Read http://hbase.apache.org/book.html#upgrade0.96 before attempting upgrade"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Example usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run upgrade check; looks for HFileV1s under ${hbase.rootdir}:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" $ bin/hbase upgrade -check"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run the upgrade: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" $ bin/hbase upgrade -execute"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|parseOption
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|checkForHFileV1
condition|)
block|{
name|int
name|res
init|=
name|doHFileV1Check
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"No HFileV1 found."
argument_list|)
expr_stmt|;
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There are some HFileV1, or corrupt files (files with incorrect major version)."
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|// if the user wants to upgrade, check for any HBase live process.
comment|// If yes, prompt the user to stop them
elseif|else
if|if
condition|(
name|upgrade
condition|)
block|{
if|if
condition|(
name|isAnyHBaseProcessAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Some HBase processes are still alive, or znodes not expired yet. "
operator|+
literal|"Please stop them before upgrade or try after some time."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Some HBase processes are still alive, or znodes not expired yet"
argument_list|)
throw|;
block|}
return|return
name|executeUpgrade
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|isAnyHBaseProcessAlive
parameter_list|()
throws|throws
name|IOException
block|{
name|ZooKeeperWatcher
name|zkw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|"Check Live Processes."
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
specifier|private
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got aborted with reason: "
operator|+
name|why
operator|+
literal|", and error: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|liveProcessesExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|baseZNode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|backupMasterAddressesZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|backupMasters
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|backupMasterAddressesZNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|backupMasters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Backup master(s) "
operator|+
name|backupMasters
operator|+
literal|" are alive or backup-master znodes not expired."
argument_list|)
expr_stmt|;
name|liveProcessesExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regionServers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|regionServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Region server(s) "
operator|+
name|regionServers
operator|+
literal|" are alive or rs znodes not expired."
argument_list|)
expr_stmt|;
name|liveProcessesExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getMasterAddressZNode
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getMasterAddressZNode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Active master at address "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|+
literal|" is still alive or master znode not expired."
argument_list|)
expr_stmt|;
name|liveProcessesExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|liveProcessesExists
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception while checking live hbase processes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
block|{
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|doHFileV1Check
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dirToCheckForHFileV1
operator|!=
literal|null
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|+
name|dirToCheckForHFileV1
block|}
expr_stmt|;
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
operator|new
name|HFileV1Detector
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Executes the upgrade process. It involves:    *<ul>    *<li> Upgrading Namespace    *<li> Upgrading Znodes    *<li> Log splitting    *</ul>    * @throws Exception    */
specifier|private
name|int
name|executeUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|executeTool
argument_list|(
literal|"Namespace upgrade"
argument_list|,
operator|new
name|NamespaceUpgrade
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--upgrade"
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|executeTool
argument_list|(
literal|"Znode upgrade"
argument_list|,
operator|new
name|ZKDataMigrator
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doOfflineLogSplitting
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|executeTool
parameter_list|(
name|String
name|toolMessage
parameter_list|,
name|Tool
name|tool
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|int
name|expectedResult
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|toolMessage
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|tool
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--upgrade"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|expectedResult
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|toolMessage
operator|+
literal|"returned "
operator|+
name|res
operator|+
literal|", expected "
operator|+
name|expectedResult
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected return code from "
operator|+
name|toolMessage
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully completed "
operator|+
name|toolMessage
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs log splitting for all regionserver directories.    * @throws Exception    */
specifier|private
name|void
name|doOfflineLogSplitting
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Log splitting"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FSUtils
operator|.
name|getCurrentFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|regionServerLogDirs
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerLogDirs
operator|==
literal|null
operator|||
name|regionServerLogDirs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No log directories to split, returning"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
for|for
control|(
name|FileStatus
name|regionServerLogDir
range|:
name|regionServerLogDirs
control|)
block|{
comment|// split its log dir, if exists
name|HLogSplitter
operator|.
name|split
argument_list|(
name|rootDir
argument_list|,
name|regionServerLogDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully completed Log splitting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception while doing Log splitting "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|UpgradeTo96
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

