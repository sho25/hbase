begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|conf
operator|.
name|ConfigurationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Config manager for RegionsRecovery Chore - Dynamically reload config and update chore  * accordingly  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionsRecoveryConfigManager
implements|implements
name|ConfigurationObserver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionsRecoveryConfigManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|hMaster
decl_stmt|;
specifier|private
name|int
name|prevMaxStoreFileRefCount
decl_stmt|;
specifier|private
name|int
name|prevRegionsRecoveryInterval
decl_stmt|;
name|RegionsRecoveryConfigManager
parameter_list|(
specifier|final
name|HMaster
name|hMaster
parameter_list|)
block|{
name|this
operator|.
name|hMaster
operator|=
name|hMaster
expr_stmt|;
name|Configuration
name|conf
init|=
name|hMaster
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|prevMaxStoreFileRefCount
operator|=
name|getMaxStoreFileRefCount
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|prevRegionsRecoveryInterval
operator|=
name|getRegionsRecoveryChoreInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onConfigurationChange
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|int
name|newMaxStoreFileRefCount
init|=
name|getMaxStoreFileRefCount
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newRegionsRecoveryInterval
init|=
name|getRegionsRecoveryChoreInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevMaxStoreFileRefCount
operator|==
name|newMaxStoreFileRefCount
operator|&&
name|prevRegionsRecoveryInterval
operator|==
name|newRegionsRecoveryInterval
condition|)
block|{
comment|// no need to re-schedule the chore with updated config
comment|// as there is no change in desired configs
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Config Reload for RegionsRecovery Chore. prevMaxStoreFileRefCount: {},"
operator|+
literal|" newMaxStoreFileRefCount: {}, prevRegionsRecoveryInterval: {}, "
operator|+
literal|"newRegionsRecoveryInterval: {}"
argument_list|,
name|prevMaxStoreFileRefCount
argument_list|,
name|newMaxStoreFileRefCount
argument_list|,
name|prevRegionsRecoveryInterval
argument_list|,
name|newRegionsRecoveryInterval
argument_list|)
expr_stmt|;
name|RegionsRecoveryChore
name|regionsRecoveryChore
init|=
operator|new
name|RegionsRecoveryChore
argument_list|(
name|this
operator|.
name|hMaster
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|hMaster
argument_list|)
decl_stmt|;
name|ChoreService
name|choreService
init|=
name|this
operator|.
name|hMaster
operator|.
name|getChoreService
argument_list|()
decl_stmt|;
comment|// Regions Reopen based on very high storeFileRefCount is considered enabled
comment|// only if hbase.regions.recovery.store.file.ref.count has value> 0
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|newMaxStoreFileRefCount
operator|>
literal|0
condition|)
block|{
comment|// reschedule the chore
comment|// provide mayInterruptIfRunning - false to take care of completion
comment|// of in progress task if any
name|choreService
operator|.
name|cancelChore
argument_list|(
name|regionsRecoveryChore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|choreService
operator|.
name|scheduleChore
argument_list|(
name|regionsRecoveryChore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|choreService
operator|.
name|cancelChore
argument_list|(
name|regionsRecoveryChore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|prevMaxStoreFileRefCount
operator|=
name|newMaxStoreFileRefCount
expr_stmt|;
name|this
operator|.
name|prevRegionsRecoveryInterval
operator|=
name|newRegionsRecoveryInterval
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getMaxStoreFileRefCount
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|STORE_FILE_REF_COUNT_THRESHOLD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_STORE_FILE_REF_COUNT_THRESHOLD
argument_list|)
return|;
block|}
specifier|private
name|int
name|getRegionsRecoveryChoreInterval
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|REGIONS_RECOVERY_INTERVAL
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGIONS_RECOVERY_INTERVAL
argument_list|)
return|;
block|}
block|}
end_class

end_unit

