begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * A utility class to manage a set of locks. Each lock is identified by a String which serves  * as a key. Typical usage is:<p>  * class Example{  * private final static KeyLocker<String> locker = new Locker<String>();  *<p/>  * public void foo(String s){  * Lock lock = locker.acquireLock(s);  * try {  * // whatever  * }finally{  * lock.unlock();  * }  * }  * }  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|KeyLocker
parameter_list|<
name|K
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|KeyLocker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The number of lock we want to easily support. It's not a maximum.
specifier|private
specifier|static
specifier|final
name|int
name|NB_CONCURRENT_LOCKS
init|=
literal|1000
decl_stmt|;
comment|// We need an atomic counter to manage the number of users using the lock and free it when
comment|//  it's equal to zero.
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Pair
argument_list|<
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|Pair
argument_list|<
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|>
argument_list|(
name|NB_CONCURRENT_LOCKS
argument_list|)
decl_stmt|;
comment|/**    * Return a lock for the given key. The lock is already locked.    *    * @param key    */
specifier|public
name|ReentrantLock
name|acquireLock
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must not be null"
argument_list|)
throw|;
name|Pair
argument_list|<
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|,
name|AtomicInteger
argument_list|>
name|lock
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|lock
operator|=
name|locks
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
operator|new
name|Pair
argument_list|<
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|(
operator|new
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|.
name|getSecond
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|lock
operator|.
name|getFirst
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|lock
operator|.
name|getFirst
argument_list|()
return|;
block|}
comment|/**    * Free the lock for the given key.    */
specifier|private
specifier|synchronized
name|void
name|releaseLock
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Pair
argument_list|<
name|KeyLock
argument_list|<
name|K
argument_list|>
argument_list|,
name|AtomicInteger
argument_list|>
name|lock
init|=
name|locks
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lock
operator|.
name|getSecond
argument_list|()
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|locks
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Can't release the lock for "
operator|+
name|key
operator|+
literal|", this key is not in the key list."
operator|+
literal|" known keys are: "
operator|+
name|locks
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|KeyLock
parameter_list|<
name|K
parameter_list|>
extends|extends
name|ReentrantLock
block|{
specifier|private
specifier|final
name|KeyLocker
argument_list|<
name|K
argument_list|>
name|locker
decl_stmt|;
specifier|private
specifier|final
name|K
name|lockId
decl_stmt|;
specifier|private
name|KeyLock
parameter_list|(
name|KeyLocker
argument_list|<
name|K
argument_list|>
name|locker
parameter_list|,
name|K
name|lockId
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|locker
operator|=
name|locker
expr_stmt|;
name|this
operator|.
name|lockId
operator|=
name|lockId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|super
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|releaseLock
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

