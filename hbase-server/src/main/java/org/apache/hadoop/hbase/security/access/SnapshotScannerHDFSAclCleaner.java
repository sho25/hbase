begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|BaseHFileCleanerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of a file cleaner that checks if a empty directory with no subdirs and subfiles is  * deletable when user scan snapshot feature is enabled  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|SnapshotScannerHDFSAclCleaner
extends|extends
name|BaseHFileCleanerDelegate
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnapshotScannerHDFSAclCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
specifier|private
name|boolean
name|userScanSnapshotEnabled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|.
name|containsKey
argument_list|(
name|HMaster
operator|.
name|MASTER
argument_list|)
condition|)
block|{
name|this
operator|.
name|master
operator|=
operator|(
name|HMaster
operator|)
name|params
operator|.
name|get
argument_list|(
name|HMaster
operator|.
name|MASTER
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|userScanSnapshotEnabled
operator|=
name|isUserScanSnapshotEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isFileDeletable
parameter_list|(
name|FileStatus
name|fStat
parameter_list|)
block|{
comment|// This plugin does not handle the file deletions, so return true by default
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmptyDirDeletable
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
if|if
condition|(
name|userScanSnapshotEnabled
condition|)
block|{
comment|/*        * If user scan snapshot feature is enabled(see HBASE-21995), then when namespace or table        * exists, the archive namespace or table directories should not be deleted because the HDFS        * acls are set at these directories; the archive data directory should not be deleted because        * the HDFS acls of global permission is set at this directory.        */
return|return
name|isEmptyArchiveDirDeletable
argument_list|(
name|dir
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isUserScanSnapshotEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|masterCoprocessors
init|=
name|conf
operator|.
name|get
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|)
decl_stmt|;
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|SnapshotScannerHDFSAclHelper
operator|.
name|USER_SCAN_SNAPSHOT_ENABLE
argument_list|,
literal|false
argument_list|)
operator|&&
name|masterCoprocessors
operator|.
name|contains
argument_list|(
name|SnapshotScannerHDFSAclController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|masterCoprocessors
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isEmptyArchiveDirDeletable
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isArchiveDataDir
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isArchiveNamespaceDir
argument_list|(
name|dir
argument_list|)
operator|&&
name|namespaceExists
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isArchiveTableDir
argument_list|(
name|dir
argument_list|)
operator|&&
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|dir
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Check if empty dir {} is deletable error"
argument_list|,
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|isArchiveDataDir
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
condition|)
block|{
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|isArchiveNamespaceDir
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|!=
literal|null
operator|&&
name|isArchiveDataDir
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|isArchiveTableDir
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|!=
literal|null
operator|&&
name|isArchiveNamespaceDir
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|namespaceExists
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|master
operator|!=
literal|null
operator|&&
name|master
operator|.
name|listNamespaces
argument_list|()
operator|.
name|contains
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|master
operator|!=
literal|null
operator|&&
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

