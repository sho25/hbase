begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|LeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|NonLeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|Operator
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ExpressionExpander
block|{
specifier|public
name|ExpressionNode
name|expand
parameter_list|(
name|ExpressionNode
name|src
parameter_list|)
block|{
if|if
condition|(
operator|!
name|src
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|NonLeafExpressionNode
name|nlExp
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|src
decl_stmt|;
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|childExps
init|=
name|nlExp
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
name|Operator
name|outerOp
init|=
name|nlExp
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|isToBeExpanded
argument_list|(
name|childExps
argument_list|)
condition|)
block|{
comment|// Any of the child exp is a non leaf exp with& or | operator
name|NonLeafExpressionNode
name|newNode
init|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|nlExp
operator|.
name|getOperator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionNode
name|exp
range|:
name|childExps
control|)
block|{
if|if
condition|(
name|exp
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
name|newNode
operator|.
name|addChildExp
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newNode
operator|.
name|addChildExp
argument_list|(
name|expand
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nlExp
operator|=
name|expandNonLeaf
argument_list|(
name|newNode
argument_list|,
name|outerOp
argument_list|)
expr_stmt|;
block|}
return|return
name|nlExp
return|;
block|}
if|if
condition|(
name|src
operator|instanceof
name|NonLeafExpressionNode
operator|&&
operator|(
operator|(
name|NonLeafExpressionNode
operator|)
name|src
operator|)
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|NOT
condition|)
block|{
comment|// Negate the exp
return|return
name|negate
argument_list|(
operator|(
name|NonLeafExpressionNode
operator|)
name|src
argument_list|)
return|;
block|}
return|return
name|src
return|;
block|}
specifier|private
name|ExpressionNode
name|negate
parameter_list|(
name|NonLeafExpressionNode
name|nlExp
parameter_list|)
block|{
name|ExpressionNode
name|notChild
init|=
name|nlExp
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|notChild
operator|instanceof
name|LeafExpressionNode
condition|)
block|{
return|return
name|nlExp
return|;
block|}
name|NonLeafExpressionNode
name|nlNotChild
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|notChild
decl_stmt|;
if|if
condition|(
name|nlNotChild
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|NOT
condition|)
block|{
comment|// negate the negate
return|return
name|nlNotChild
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Operator
name|negateOp
init|=
name|nlNotChild
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
condition|?
name|Operator
operator|.
name|OR
else|:
name|Operator
operator|.
name|AND
decl_stmt|;
name|NonLeafExpressionNode
name|newNode
init|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|negateOp
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionNode
name|expNode
range|:
name|nlNotChild
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|NonLeafExpressionNode
name|negateNode
init|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|)
decl_stmt|;
name|negateNode
operator|.
name|addChildExp
argument_list|(
name|expNode
operator|.
name|deepClone
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|addChildExp
argument_list|(
name|expand
argument_list|(
name|negateNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newNode
return|;
block|}
specifier|private
name|boolean
name|isToBeExpanded
parameter_list|(
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|childExps
parameter_list|)
block|{
for|for
control|(
name|ExpressionNode
name|exp
range|:
name|childExps
control|)
block|{
if|if
condition|(
operator|!
name|exp
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|NonLeafExpressionNode
name|expandNonLeaf
parameter_list|(
name|NonLeafExpressionNode
name|newNode
parameter_list|,
name|Operator
name|outerOp
parameter_list|)
block|{
comment|// Now go for the merge or expansion across brackets
name|List
argument_list|<
name|ExpressionNode
argument_list|>
name|newChildExps
init|=
name|newNode
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
assert|assert
name|newChildExps
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
name|ExpressionNode
name|leftChild
init|=
name|newChildExps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExpressionNode
name|rightChild
init|=
name|newChildExps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightChild
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
comment|// Merge the single right node into the left side
assert|assert
name|leftChild
operator|instanceof
name|NonLeafExpressionNode
assert|;
name|newNode
operator|=
name|mergeChildNodes
argument_list|(
name|newNode
argument_list|,
name|outerOp
argument_list|,
name|rightChild
argument_list|,
operator|(
name|NonLeafExpressionNode
operator|)
name|leftChild
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leftChild
operator|.
name|isSingleNode
argument_list|()
condition|)
block|{
comment|// Merge the single left node into the right side
assert|assert
name|rightChild
operator|instanceof
name|NonLeafExpressionNode
assert|;
name|newNode
operator|=
name|mergeChildNodes
argument_list|(
name|newNode
argument_list|,
name|outerOp
argument_list|,
name|leftChild
argument_list|,
operator|(
name|NonLeafExpressionNode
operator|)
name|rightChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Both the child exp nodes are non single.
name|NonLeafExpressionNode
name|leftChildNLE
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|leftChild
decl_stmt|;
name|NonLeafExpressionNode
name|rightChildNLE
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|rightChild
decl_stmt|;
if|if
condition|(
name|outerOp
operator|==
name|leftChildNLE
operator|.
name|getOperator
argument_list|()
operator|&&
name|outerOp
operator|==
name|rightChildNLE
operator|.
name|getOperator
argument_list|()
condition|)
block|{
comment|// Merge
name|NonLeafExpressionNode
name|leftChildNLEClone
init|=
name|leftChildNLE
operator|.
name|deepClone
argument_list|()
decl_stmt|;
name|leftChildNLEClone
operator|.
name|addChildExps
argument_list|(
name|rightChildNLE
operator|.
name|getChildExps
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|=
name|leftChildNLEClone
expr_stmt|;
block|}
else|else
block|{
comment|// (a | b)& (c& d) ...
if|if
condition|(
name|outerOp
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// (a | b) | (c& d)
if|if
condition|(
name|leftChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
operator|&&
name|rightChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
name|leftChildNLE
operator|.
name|addChildExp
argument_list|(
name|rightChildNLE
argument_list|)
expr_stmt|;
name|newNode
operator|=
name|leftChildNLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leftChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
operator|&&
name|rightChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// (a& b) | (c | d)
name|rightChildNLE
operator|.
name|addChildExp
argument_list|(
name|leftChildNLE
argument_list|)
expr_stmt|;
name|newNode
operator|=
name|rightChildNLE
expr_stmt|;
block|}
comment|// (a& b) | (c& d)
comment|// This case no need to do any thing
block|}
else|else
block|{
comment|// outer op is&
comment|// (a | b)& (c& d) => (a& c& d) | (b& c& d)
if|if
condition|(
name|leftChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
operator|&&
name|rightChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
name|newNode
operator|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionNode
name|exp
range|:
name|leftChildNLE
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|NonLeafExpressionNode
name|rightChildNLEClone
init|=
name|rightChildNLE
operator|.
name|deepClone
argument_list|()
decl_stmt|;
name|rightChildNLEClone
operator|.
name|addChildExp
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|addChildExp
argument_list|(
name|rightChildNLEClone
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|leftChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|AND
operator|&&
name|rightChildNLE
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// (a& b)& (c | d) => (a& b& c) | (a& b& d)
name|newNode
operator|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionNode
name|exp
range|:
name|rightChildNLE
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|NonLeafExpressionNode
name|leftChildNLEClone
init|=
name|leftChildNLE
operator|.
name|deepClone
argument_list|()
decl_stmt|;
name|leftChildNLEClone
operator|.
name|addChildExp
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|addChildExp
argument_list|(
name|leftChildNLEClone
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// (a | b)& (c | d) => (a& c) | (a& d) | (b& c) | (b& d)
name|newNode
operator|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionNode
name|leftExp
range|:
name|leftChildNLE
operator|.
name|getChildExps
argument_list|()
control|)
block|{
for|for
control|(
name|ExpressionNode
name|rightExp
range|:
name|rightChildNLE
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|NonLeafExpressionNode
name|newChild
init|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
decl_stmt|;
name|newChild
operator|.
name|addChildExp
argument_list|(
name|leftExp
operator|.
name|deepClone
argument_list|()
argument_list|)
expr_stmt|;
name|newChild
operator|.
name|addChildExp
argument_list|(
name|rightExp
operator|.
name|deepClone
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|addChildExp
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|newNode
return|;
block|}
specifier|private
name|NonLeafExpressionNode
name|mergeChildNodes
parameter_list|(
name|NonLeafExpressionNode
name|newOuterNode
parameter_list|,
name|Operator
name|outerOp
parameter_list|,
name|ExpressionNode
name|lChild
parameter_list|,
name|NonLeafExpressionNode
name|nlChild
parameter_list|)
block|{
comment|// Merge the single right/left node into the other side
if|if
condition|(
name|nlChild
operator|.
name|getOperator
argument_list|()
operator|==
name|outerOp
condition|)
block|{
name|NonLeafExpressionNode
name|leftChildNLEClone
init|=
name|nlChild
operator|.
name|deepClone
argument_list|()
decl_stmt|;
name|leftChildNLEClone
operator|.
name|addChildExp
argument_list|(
name|lChild
argument_list|)
expr_stmt|;
name|newOuterNode
operator|=
name|leftChildNLEClone
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outerOp
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
assert|assert
name|nlChild
operator|.
name|getOperator
argument_list|()
operator|==
name|Operator
operator|.
name|OR
assert|;
comment|// outerOp is& here. We need to expand the node here
comment|// (a | b)& c -> (a& c) | (b& c)
comment|// OR
comment|// c& (a | b) -> (c& a) | (c& b)
name|newOuterNode
operator|=
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionNode
name|exp
range|:
name|nlChild
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|newOuterNode
operator|.
name|addChildExp
argument_list|(
operator|new
name|NonLeafExpressionNode
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|exp
argument_list|,
name|lChild
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newOuterNode
return|;
block|}
block|}
end_class

end_unit

