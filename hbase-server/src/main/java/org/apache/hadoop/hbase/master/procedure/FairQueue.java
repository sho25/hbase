begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AvlUtil
operator|.
name|AvlIterableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FairQueue
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
specifier|private
name|Queue
argument_list|<
name|T
argument_list|>
name|queueHead
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasRunnables
parameter_list|()
block|{
return|return
name|size
operator|>
literal|0
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Queue
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|)
block|{
comment|// For normal priority queue, just append it to the tail
if|if
condition|(
name|queueHead
operator|==
literal|null
operator|||
name|queue
operator|.
name|getPriority
argument_list|()
operator|==
literal|1
condition|)
block|{
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|append
argument_list|(
name|queueHead
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return;
block|}
comment|// Find the one which priority is less than us
comment|// For now only TableQueue and ServerQueue has priority. For TableQueue there are only a small
comment|// number of tables which have higher priority, and for ServerQueue there is only one server
comment|// which could carry meta which leads to a higher priority, so this will not be an expensive
comment|// operation.
name|Queue
argument_list|<
name|T
argument_list|>
name|base
init|=
name|queueHead
decl_stmt|;
do|do
block|{
if|if
condition|(
name|base
operator|.
name|getPriority
argument_list|()
operator|<
name|queue
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|prepend
argument_list|(
name|queueHead
argument_list|,
name|base
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return;
block|}
name|base
operator|=
name|AvlIterableList
operator|.
name|readNext
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|base
operator|!=
name|queueHead
condition|)
do|;
comment|// no one is lower than us, append to the tail
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|append
argument_list|(
name|queueHead
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Queue
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|)
block|{
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|remove
argument_list|(
name|queueHead
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
block|}
specifier|public
name|Queue
argument_list|<
name|T
argument_list|>
name|poll
parameter_list|()
block|{
if|if
condition|(
name|queueHead
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Queue
argument_list|<
name|T
argument_list|>
name|q
init|=
name|queueHead
decl_stmt|;
do|do
block|{
if|if
condition|(
name|q
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|.
name|getPriority
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// for the normal priority queue, remove it and append it to the tail
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|remove
argument_list|(
name|queueHead
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|queueHead
operator|=
name|AvlIterableList
operator|.
name|append
argument_list|(
name|queueHead
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
name|q
operator|=
name|AvlIterableList
operator|.
name|readNext
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|q
operator|!=
name|queueHead
condition|)
do|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

