begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Keeps KVs that are scoped other than local  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ScopeWALEntryFilter
implements|implements
name|WALEntryFilter
implements|,
name|WALCellFilter
block|{
specifier|private
specifier|final
name|BulkLoadCellFilter
name|bulkLoadFilter
init|=
operator|new
name|BulkLoadCellFilter
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
comment|// Do not filter out an entire entry by replication scopes. As now we support serial
comment|// replication, the sequence id of a marker is also needed by upper layer. We will filter out
comment|// all the cells in the filterCell method below if the replication scopes is null or empty.
return|return
name|entry
return|;
block|}
specifier|private
name|boolean
name|hasGlobalScope
parameter_list|(
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
name|Integer
name|scope
init|=
name|scopes
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
return|return
name|scope
operator|!=
literal|null
operator|&&
name|scope
operator|.
name|intValue
argument_list|()
operator|==
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|filterCell
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getReplicationScopes
argument_list|()
decl_stmt|;
if|if
condition|(
name|scopes
operator|==
literal|null
operator|||
name|scopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|cell
argument_list|,
name|WALEdit
operator|.
name|METAFAMILY
argument_list|,
name|WALEdit
operator|.
name|BULK_LOAD
argument_list|)
condition|)
block|{
return|return
name|bulkLoadFilter
operator|.
name|filterCell
argument_list|(
name|cell
argument_list|,
operator|new
name|Predicate
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
operator|!
name|hasGlobalScope
argument_list|(
name|scopes
argument_list|,
name|family
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|hasGlobalScope
argument_list|(
name|scopes
argument_list|,
name|family
argument_list|)
condition|?
name|cell
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

