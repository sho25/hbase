begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Keeps KVs that are scoped other than local  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ScopeWALEntryFilter
implements|implements
name|WALEntryFilter
block|{
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getScopes
argument_list|()
decl_stmt|;
if|if
condition|(
name|scopes
operator|==
literal|null
operator|||
name|scopes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getKeyValues
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|kvs
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|KeyValue
name|kv
init|=
name|kvs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// The scope will be null or empty if
comment|// there's nothing to replicate in that WALEdit
if|if
condition|(
operator|!
name|scopes
operator|.
name|containsKey
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|||
name|scopes
operator|.
name|get
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|==
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
condition|)
block|{
name|kvs
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|kvs
operator|.
name|size
argument_list|()
operator|<
name|size
operator|/
literal|2
condition|)
block|{
name|kvs
operator|.
name|trimToSize
argument_list|()
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

