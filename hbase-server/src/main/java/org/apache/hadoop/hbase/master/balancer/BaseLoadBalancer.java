begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * The base class for load balancers. It provides the the functions used to by  * {@link AssignmentManager} to assign regions in the edge cases. It doesn't  * provide an implementation of the actual balancing algorithm.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseLoadBalancer
implements|implements
name|LoadBalancer
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MIN_SERVER_BALANCE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|TABLES_ON_MASTER
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Regions of these tables will be put on the master regionserver by default.    */
static|static
block|{
name|TABLES_ON_MASTER
operator|.
name|add
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TABLES_ON_MASTER
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TABLES_ON_MASTER
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if a region belongs to some small system table.    * If so, it may be expected to be put on the master regionserver.    */
specifier|protected
specifier|static
name|boolean
name|shouldBeOnMaster
parameter_list|(
name|HRegionInfo
name|region
parameter_list|)
block|{
return|return
name|TABLES_ON_MASTER
operator|.
name|contains
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * An efficient array based implementation similar to ClusterState for keeping    * the status of the cluster in terms of region assignment and distribution.    * To be used by LoadBalancers.    */
specifier|protected
specifier|static
class|class
name|Cluster
block|{
name|ServerName
name|masterServerName
decl_stmt|;
name|ServerName
index|[]
name|servers
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tables
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
decl_stmt|;
name|Deque
argument_list|<
name|RegionLoad
argument_list|>
index|[]
name|regionLoads
decl_stmt|;
name|boolean
index|[]
name|backupMasterFlags
decl_stmt|;
name|int
name|activeMasterIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
index|[]
index|[]
name|regionLocations
decl_stmt|;
comment|//regionIndex -> list of serverIndex sorted by locality
name|int
index|[]
index|[]
name|regionsPerServer
decl_stmt|;
comment|//serverIndex -> region list
name|int
index|[]
name|regionIndexToServerIndex
decl_stmt|;
comment|//regionIndex -> serverIndex
name|int
index|[]
name|initialRegionIndexToServerIndex
decl_stmt|;
comment|//regionIndex -> serverIndex (initial cluster state)
name|int
index|[]
name|regionIndexToTableIndex
decl_stmt|;
comment|//regionIndex -> tableIndex
name|int
index|[]
index|[]
name|numRegionsPerServerPerTable
decl_stmt|;
comment|//serverIndex -> tableIndex -> # regions
name|int
index|[]
name|numMaxRegionsPerTable
decl_stmt|;
comment|//tableIndex -> max number of regions in a single RS
name|int
name|numUserRegionsOnMaster
decl_stmt|;
comment|//number of user regions on the active master
name|Integer
index|[]
name|serverIndicesSortedByRegionCount
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|serversToIndex
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tablesToIndex
decl_stmt|;
name|int
name|numRegions
decl_stmt|;
name|int
name|numServers
decl_stmt|;
name|int
name|numTables
decl_stmt|;
name|int
name|numMovedRegions
init|=
literal|0
decl_stmt|;
comment|//num moved regions from the initial configuration
comment|// num of moved regions away from master that should be on the master
name|int
name|numMovedMasterHostedRegions
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Cluster
parameter_list|(
name|ServerName
name|masterServerName
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|RegionLoad
argument_list|>
argument_list|>
name|loads
parameter_list|,
name|RegionLocationFinder
name|regionFinder
parameter_list|,
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
parameter_list|)
block|{
name|this
operator|.
name|masterServerName
operator|=
name|masterServerName
expr_stmt|;
name|serversToIndex
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|tablesToIndex
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
comment|//regionsToIndex = new HashMap<HRegionInfo, Integer>();
comment|//TODO: We should get the list of tables from master
name|tables
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|numRegions
operator|=
literal|0
expr_stmt|;
name|int
name|serverIndex
init|=
literal|0
decl_stmt|;
comment|// Use servername and port as there can be dead servers in this list. We want everything with
comment|// a matching hostname and port to have the same index.
for|for
control|(
name|ServerName
name|sn
range|:
name|clusterState
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|serversToIndex
operator|.
name|get
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|serversToIndex
operator|.
name|put
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|serverIndex
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Count how many regions there are.
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|numRegions
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|numServers
operator|=
name|serversToIndex
operator|.
name|size
argument_list|()
expr_stmt|;
name|regionsPerServer
operator|=
operator|new
name|int
index|[
name|serversToIndex
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|servers
operator|=
operator|new
name|ServerName
index|[
name|numServers
index|]
expr_stmt|;
name|regions
operator|=
operator|new
name|HRegionInfo
index|[
name|numRegions
index|]
expr_stmt|;
name|regionIndexToServerIndex
operator|=
operator|new
name|int
index|[
name|numRegions
index|]
expr_stmt|;
name|initialRegionIndexToServerIndex
operator|=
operator|new
name|int
index|[
name|numRegions
index|]
expr_stmt|;
name|regionIndexToTableIndex
operator|=
operator|new
name|int
index|[
name|numRegions
index|]
expr_stmt|;
name|regionLoads
operator|=
operator|new
name|Deque
index|[
name|numRegions
index|]
expr_stmt|;
name|regionLocations
operator|=
operator|new
name|int
index|[
name|numRegions
index|]
index|[]
expr_stmt|;
name|serverIndicesSortedByRegionCount
operator|=
operator|new
name|Integer
index|[
name|numServers
index|]
expr_stmt|;
name|backupMasterFlags
operator|=
operator|new
name|boolean
index|[
name|numServers
index|]
expr_stmt|;
name|int
name|tableIndex
init|=
literal|0
decl_stmt|,
name|regionIndex
init|=
literal|0
decl_stmt|,
name|regionPerServerIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|serverIndex
operator|=
name|serversToIndex
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// keep the servername if this is the first server name for this hostname
comment|// or this servername has the newest startcode.
if|if
condition|(
name|servers
index|[
name|serverIndex
index|]
operator|==
literal|null
operator|||
name|servers
index|[
name|serverIndex
index|]
operator|.
name|getStartcode
argument_list|()
operator|<
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getStartcode
argument_list|()
condition|)
block|{
name|servers
index|[
name|serverIndex
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|backupMasterFlags
index|[
name|serverIndex
index|]
operator|=
name|backupMasters
operator|!=
literal|null
operator|&&
name|backupMasters
operator|.
name|contains
argument_list|(
name|servers
index|[
name|serverIndex
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionsPerServer
index|[
name|serverIndex
index|]
operator|!=
literal|null
condition|)
block|{
comment|// there is another server with the same hostAndPort in ClusterState.
comment|// allocate the array for the total size
name|regionsPerServer
index|[
name|serverIndex
index|]
operator|=
operator|new
name|int
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|regionsPerServer
index|[
name|serverIndex
index|]
operator|.
name|length
index|]
expr_stmt|;
block|}
else|else
block|{
name|regionsPerServer
index|[
name|serverIndex
index|]
operator|=
operator|new
name|int
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
name|serverIndicesSortedByRegionCount
index|[
name|serverIndex
index|]
operator|=
name|serverIndex
expr_stmt|;
if|if
condition|(
name|servers
index|[
name|serverIndex
index|]
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
name|activeMasterIndex
operator|=
name|serverIndex
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shouldBeOnMaster
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|numUserRegionsOnMaster
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|clusterState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|serverIndex
operator|=
name|serversToIndex
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|regionPerServerIndex
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|Integer
name|idx
init|=
name|tablesToIndex
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|idx
operator|=
name|tableIndex
expr_stmt|;
name|tablesToIndex
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableIndex
operator|++
argument_list|)
expr_stmt|;
block|}
name|regions
index|[
name|regionIndex
index|]
operator|=
name|region
expr_stmt|;
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|=
name|serverIndex
expr_stmt|;
name|initialRegionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|=
name|serverIndex
expr_stmt|;
name|regionIndexToTableIndex
index|[
name|regionIndex
index|]
operator|=
name|idx
expr_stmt|;
name|regionsPerServer
index|[
name|serverIndex
index|]
index|[
name|regionPerServerIndex
operator|++
index|]
operator|=
name|regionIndex
expr_stmt|;
comment|// region load
if|if
condition|(
name|loads
operator|!=
literal|null
condition|)
block|{
name|Deque
argument_list|<
name|RegionLoad
argument_list|>
name|rl
init|=
name|loads
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
comment|// That could have failed if the RegionLoad is using the other regionName
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
comment|// Try getting the region load using encoded name.
name|rl
operator|=
name|loads
operator|.
name|get
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionLoads
index|[
name|regionIndex
index|]
operator|=
name|rl
expr_stmt|;
block|}
if|if
condition|(
name|regionFinder
operator|!=
literal|null
condition|)
block|{
comment|//region location
name|List
argument_list|<
name|ServerName
argument_list|>
name|loc
init|=
name|regionFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|regionLocations
index|[
name|regionIndex
index|]
operator|=
operator|new
name|int
index|[
name|loc
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|regionLocations
index|[
name|regionIndex
index|]
index|[
name|i
index|]
operator|=
name|loc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
operator|(
name|serversToIndex
operator|.
name|get
argument_list|(
name|loc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|serversToIndex
operator|.
name|get
argument_list|(
name|loc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
name|regionIndex
operator|++
expr_stmt|;
block|}
block|}
name|numTables
operator|=
name|tables
operator|.
name|size
argument_list|()
expr_stmt|;
name|numRegionsPerServerPerTable
operator|=
operator|new
name|int
index|[
name|numServers
index|]
index|[
name|numTables
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTables
condition|;
name|j
operator|++
control|)
block|{
name|numRegionsPerServerPerTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionIndexToServerIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|numRegionsPerServerPerTable
index|[
name|regionIndexToServerIndex
index|[
name|i
index|]
index|]
index|[
name|regionIndexToTableIndex
index|[
name|i
index|]
index|]
operator|++
expr_stmt|;
block|}
name|numMaxRegionsPerTable
operator|=
operator|new
name|int
index|[
name|numTables
index|]
expr_stmt|;
for|for
control|(
name|serverIndex
operator|=
literal|0
init|;
name|serverIndex
operator|<
name|numRegionsPerServerPerTable
operator|.
name|length
condition|;
name|serverIndex
operator|++
control|)
block|{
for|for
control|(
name|tableIndex
operator|=
literal|0
init|;
name|tableIndex
operator|<
name|numRegionsPerServerPerTable
index|[
name|serverIndex
index|]
operator|.
name|length
condition|;
name|tableIndex
operator|++
control|)
block|{
if|if
condition|(
name|numRegionsPerServerPerTable
index|[
name|serverIndex
index|]
index|[
name|tableIndex
index|]
operator|>
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
condition|)
block|{
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
operator|=
name|numRegionsPerServerPerTable
index|[
name|serverIndex
index|]
index|[
name|tableIndex
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|moveOrSwapRegion
parameter_list|(
name|int
name|lServer
parameter_list|,
name|int
name|rServer
parameter_list|,
name|int
name|lRegion
parameter_list|,
name|int
name|rRegion
parameter_list|)
block|{
if|if
condition|(
name|servers
index|[
name|lServer
index|]
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lRegion
operator|>=
literal|0
operator|&&
operator|!
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|lRegion
index|]
argument_list|)
condition|)
block|{
name|numUserRegionsOnMaster
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|rRegion
operator|>=
literal|0
operator|&&
operator|!
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|rRegion
index|]
argument_list|)
condition|)
block|{
name|numUserRegionsOnMaster
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|servers
index|[
name|rServer
index|]
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|lRegion
operator|>=
literal|0
operator|&&
operator|!
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|lRegion
index|]
argument_list|)
condition|)
block|{
name|numUserRegionsOnMaster
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|rRegion
operator|>=
literal|0
operator|&&
operator|!
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|rRegion
index|]
argument_list|)
condition|)
block|{
name|numUserRegionsOnMaster
operator|--
expr_stmt|;
block|}
block|}
comment|//swap
if|if
condition|(
name|rRegion
operator|>=
literal|0
operator|&&
name|lRegion
operator|>=
literal|0
condition|)
block|{
name|regionMoved
argument_list|(
name|rRegion
argument_list|,
name|rServer
argument_list|,
name|lServer
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|rServer
index|]
operator|=
name|replaceRegion
argument_list|(
name|regionsPerServer
index|[
name|rServer
index|]
argument_list|,
name|rRegion
argument_list|,
name|lRegion
argument_list|)
expr_stmt|;
name|regionMoved
argument_list|(
name|lRegion
argument_list|,
name|lServer
argument_list|,
name|rServer
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|lServer
index|]
operator|=
name|replaceRegion
argument_list|(
name|regionsPerServer
index|[
name|lServer
index|]
argument_list|,
name|lRegion
argument_list|,
name|rRegion
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rRegion
operator|>=
literal|0
condition|)
block|{
comment|//move rRegion
name|regionMoved
argument_list|(
name|rRegion
argument_list|,
name|rServer
argument_list|,
name|lServer
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|rServer
index|]
operator|=
name|removeRegion
argument_list|(
name|regionsPerServer
index|[
name|rServer
index|]
argument_list|,
name|rRegion
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|lServer
index|]
operator|=
name|addRegion
argument_list|(
name|regionsPerServer
index|[
name|lServer
index|]
argument_list|,
name|rRegion
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lRegion
operator|>=
literal|0
condition|)
block|{
comment|//move lRegion
name|regionMoved
argument_list|(
name|lRegion
argument_list|,
name|lServer
argument_list|,
name|rServer
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|lServer
index|]
operator|=
name|removeRegion
argument_list|(
name|regionsPerServer
index|[
name|lServer
index|]
argument_list|,
name|lRegion
argument_list|)
expr_stmt|;
name|regionsPerServer
index|[
name|rServer
index|]
operator|=
name|addRegion
argument_list|(
name|regionsPerServer
index|[
name|rServer
index|]
argument_list|,
name|lRegion
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Region moved out of the server */
name|void
name|regionMoved
parameter_list|(
name|int
name|regionIndex
parameter_list|,
name|int
name|oldServerIndex
parameter_list|,
name|int
name|newServerIndex
parameter_list|)
block|{
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|=
name|newServerIndex
expr_stmt|;
if|if
condition|(
name|initialRegionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|==
name|newServerIndex
condition|)
block|{
name|numMovedRegions
operator|--
expr_stmt|;
comment|//region moved back to original location
if|if
condition|(
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|regionIndex
index|]
argument_list|)
operator|&&
name|isActiveMaster
argument_list|(
name|newServerIndex
argument_list|)
condition|)
block|{
comment|// Master hosted region moved back to the active master
name|numMovedMasterHostedRegions
operator|--
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|initialRegionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|==
name|oldServerIndex
condition|)
block|{
name|numMovedRegions
operator|++
expr_stmt|;
comment|//region moved from original location
if|if
condition|(
name|shouldBeOnMaster
argument_list|(
name|regions
index|[
name|regionIndex
index|]
argument_list|)
operator|&&
name|isActiveMaster
argument_list|(
name|oldServerIndex
argument_list|)
condition|)
block|{
comment|// Master hosted region moved away from active the master
name|numMovedMasterHostedRegions
operator|++
expr_stmt|;
block|}
block|}
name|int
name|tableIndex
init|=
name|regionIndexToTableIndex
index|[
name|regionIndex
index|]
decl_stmt|;
name|numRegionsPerServerPerTable
index|[
name|oldServerIndex
index|]
index|[
name|tableIndex
index|]
operator|--
expr_stmt|;
name|numRegionsPerServerPerTable
index|[
name|newServerIndex
index|]
index|[
name|tableIndex
index|]
operator|++
expr_stmt|;
comment|//check whether this caused maxRegionsPerTable in the new Server to be updated
if|if
condition|(
name|numRegionsPerServerPerTable
index|[
name|newServerIndex
index|]
index|[
name|tableIndex
index|]
operator|>
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
condition|)
block|{
name|numRegionsPerServerPerTable
index|[
name|newServerIndex
index|]
index|[
name|tableIndex
index|]
operator|=
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|numRegionsPerServerPerTable
index|[
name|oldServerIndex
index|]
index|[
name|tableIndex
index|]
operator|+
literal|1
operator|)
operator|==
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
condition|)
block|{
comment|//recompute maxRegionsPerTable since the previous value was coming from the old server
for|for
control|(
name|int
name|serverIndex
init|=
literal|0
init|;
name|serverIndex
operator|<
name|numRegionsPerServerPerTable
operator|.
name|length
condition|;
name|serverIndex
operator|++
control|)
block|{
if|if
condition|(
name|numRegionsPerServerPerTable
index|[
name|serverIndex
index|]
index|[
name|tableIndex
index|]
operator|>
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
condition|)
block|{
name|numMaxRegionsPerTable
index|[
name|tableIndex
index|]
operator|=
name|numRegionsPerServerPerTable
index|[
name|serverIndex
index|]
index|[
name|tableIndex
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
index|[]
name|removeRegion
parameter_list|(
name|int
index|[]
name|regions
parameter_list|,
name|int
name|regionIndex
parameter_list|)
block|{
comment|//TODO: this maybe costly. Consider using linked lists
name|int
index|[]
name|newRegions
init|=
operator|new
name|int
index|[
name|regions
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|regions
index|[
name|i
index|]
operator|==
name|regionIndex
condition|)
block|{
break|break;
block|}
name|newRegions
index|[
name|i
index|]
operator|=
name|regions
index|[
name|i
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|regions
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|newRegions
argument_list|,
name|i
argument_list|,
name|newRegions
operator|.
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
return|return
name|newRegions
return|;
block|}
name|int
index|[]
name|addRegion
parameter_list|(
name|int
index|[]
name|regions
parameter_list|,
name|int
name|regionIndex
parameter_list|)
block|{
name|int
index|[]
name|newRegions
init|=
operator|new
name|int
index|[
name|regions
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|regions
argument_list|,
literal|0
argument_list|,
name|newRegions
argument_list|,
literal|0
argument_list|,
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
name|newRegions
index|[
name|newRegions
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|regionIndex
expr_stmt|;
return|return
name|newRegions
return|;
block|}
name|int
index|[]
name|replaceRegion
parameter_list|(
name|int
index|[]
name|regions
parameter_list|,
name|int
name|regionIndex
parameter_list|,
name|int
name|newRegionIndex
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|regions
index|[
name|i
index|]
operator|==
name|regionIndex
condition|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|newRegionIndex
expr_stmt|;
break|break;
block|}
block|}
return|return
name|regions
return|;
block|}
name|void
name|sortServersByRegionCount
parameter_list|()
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|serverIndicesSortedByRegionCount
argument_list|,
name|numRegionsComparator
argument_list|)
expr_stmt|;
block|}
name|int
name|getNumRegions
parameter_list|(
name|int
name|server
parameter_list|)
block|{
return|return
name|regionsPerServer
index|[
name|server
index|]
operator|.
name|length
return|;
block|}
name|boolean
name|isBackupMaster
parameter_list|(
name|int
name|server
parameter_list|)
block|{
return|return
name|backupMasterFlags
index|[
name|server
index|]
return|;
block|}
name|boolean
name|isActiveMaster
parameter_list|(
name|int
name|server
parameter_list|)
block|{
return|return
name|activeMasterIndex
operator|==
name|server
return|;
block|}
specifier|private
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|numRegionsComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|integer
parameter_list|,
name|Integer
name|integer2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNumRegions
argument_list|(
name|integer
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getNumRegions
argument_list|(
name|integer2
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|desc
init|=
literal|"Cluster{"
operator|+
literal|"servers=["
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|servers
control|)
block|{
name|desc
operator|+=
name|sn
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|", "
expr_stmt|;
block|}
name|desc
operator|+=
literal|", serverIndicesSortedByRegionCount="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|serverIndicesSortedByRegionCount
argument_list|)
operator|+
literal|", regionsPerServer=["
expr_stmt|;
for|for
control|(
name|int
index|[]
name|r
range|:
name|regionsPerServer
control|)
block|{
name|desc
operator|+=
name|Arrays
operator|.
name|toString
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|desc
operator|+=
literal|"]"
operator|+
literal|", numMaxRegionsPerTable="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|numMaxRegionsPerTable
argument_list|)
operator|+
literal|", numRegions="
operator|+
name|numRegions
operator|+
literal|", numServers="
operator|+
name|numServers
operator|+
literal|", numTables="
operator|+
name|numTables
operator|+
literal|", numMovedRegions="
operator|+
name|numMovedRegions
operator|+
literal|", numMovedMasterHostedRegions="
operator|+
name|numMovedMasterHostedRegions
operator|+
literal|'}'
expr_stmt|;
return|return
name|desc
return|;
block|}
block|}
comment|// slop for regions
specifier|protected
name|float
name|slop
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The weight means that each region on the active/backup master is
comment|// equal to that many regions on a normal regionserver, in calculating
comment|// the region load by the load balancer. So that the active/backup master
comment|// can host less (or equal if weight = 1) regions than normal regionservers.
comment|//
comment|// The weight can be used to control the number of regions on backup
comment|// masters, which shouldn't host as many regions as normal regionservers.
comment|// So that we don't need to move around too many regions when a
comment|// backup master becomes the active one.
comment|//
comment|// Currently, the active master weight is used only by StockasticLoadBalancer.
comment|// Generally, we don't put any user regions on the active master, which
comment|// only hosts regions of tables defined in TABLES_ON_MASTER.
comment|// That's why the default activeMasterWeight is high.
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_MASTER_WEIGHT_KEY
init|=
literal|"hbase.balancer.backupMasterWeight"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BACKUP_MASTER_WEIGHT
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE_MASTER_WEIGHT_KEY
init|=
literal|"hbase.balancer.activeMasterWeight"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ACTIVE_MASTER_WEIGHT
init|=
literal|200
decl_stmt|;
specifier|protected
name|int
name|activeMasterWeight
decl_stmt|;
specifier|protected
name|int
name|backupMasterWeight
decl_stmt|;
comment|// a flag to indicate if assigning regions to backup masters
specifier|protected
name|boolean
name|usingBackupMasters
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|excludedServers
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ServerName
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|MetricsBalancer
name|metricsBalancer
init|=
operator|new
name|MetricsBalancer
argument_list|()
decl_stmt|;
specifier|protected
name|ClusterStatus
name|clusterStatus
init|=
literal|null
decl_stmt|;
specifier|protected
name|ServerName
name|masterServerName
decl_stmt|;
specifier|protected
name|MasterServices
name|services
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setSlop
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
name|slop
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|slop
operator|>
literal|1
condition|)
name|slop
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|activeMasterWeight
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ACTIVE_MASTER_WEIGHT_KEY
argument_list|,
name|DEFAULT_ACTIVE_MASTER_WEIGHT
argument_list|)
expr_stmt|;
name|backupMasterWeight
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BACKUP_MASTER_WEIGHT_KEY
argument_list|,
name|DEFAULT_BACKUP_MASTER_WEIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupMasterWeight
operator|<
literal|1
condition|)
block|{
name|usingBackupMasters
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup master won't host any region since "
operator|+
name|BACKUP_MASTER_WEIGHT_KEY
operator|+
literal|" is "
operator|+
name|backupMasterWeight
operator|+
literal|"(<1)"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setSlop
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|slop
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
operator|(
name|float
operator|)
literal|0.2
argument_list|)
expr_stmt|;
block|}
comment|/**    * If there is any server excluded, filter it out from the cluster map so    * we won't assign any region to it, assuming none's already assigned there.    */
specifier|protected
name|void
name|filterExcludedServers
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterMap
parameter_list|)
block|{
if|if
condition|(
name|excludedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No server to filter out
return|return;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|clusterMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|en
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludedServers
operator|.
name|contains
argument_list|(
name|en
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|en
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Balance the regions that should be on master regionserver.    */
specifier|protected
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceMasterRegions
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterMap
parameter_list|)
block|{
if|if
condition|(
name|services
operator|==
literal|null
operator|||
name|clusterMap
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|clusterMap
operator|.
name|get
argument_list|(
name|masterServerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|ServerName
argument_list|>
name|keyIt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
name|shouldBeOnMaster
argument_list|(
name|region
argument_list|)
condition|)
continue|continue;
comment|// Find a non-master regionserver to host the region
if|if
condition|(
name|keyIt
operator|==
literal|null
operator|||
operator|!
name|keyIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|keyIt
operator|=
name|clusterMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|ServerName
name|dest
init|=
name|keyIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterServerName
operator|.
name|equals
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|dest
operator|=
name|keyIt
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// Move this region away from the master regionserver
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|masterServerName
argument_list|,
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|plans
operator|==
literal|null
condition|)
block|{
name|plans
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server
range|:
name|clusterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|masterServerName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|server
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shouldBeOnMaster
argument_list|(
name|region
argument_list|)
condition|)
continue|continue;
comment|// Move this region to the master regionserver
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|server
operator|.
name|getKey
argument_list|()
argument_list|,
name|masterServerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|plans
operator|==
literal|null
condition|)
block|{
name|plans
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plans
return|;
block|}
specifier|public
name|void
name|excludeServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|usingBackupMasters
condition|)
name|excludedServers
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getExcludedServers
parameter_list|()
block|{
return|return
name|excludedServers
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClusterStatus
parameter_list|(
name|ClusterStatus
name|st
parameter_list|)
block|{
name|this
operator|.
name|clusterStatus
operator|=
name|st
expr_stmt|;
if|if
condition|(
name|st
operator|==
literal|null
operator|||
name|usingBackupMasters
condition|)
return|return;
comment|// Not assign any region to backup masters.
comment|// Put them on the excluded server list.
comment|// Assume there won't be too much backup masters
comment|// re/starting, so this won't leak much memory.
name|excludedServers
operator|.
name|addAll
argument_list|(
name|st
operator|.
name|getBackupMasters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMasterServices
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|masterServerName
operator|=
name|masterServices
operator|.
name|getServerName
argument_list|()
expr_stmt|;
name|excludedServers
operator|.
name|remove
argument_list|(
name|masterServerName
argument_list|)
expr_stmt|;
name|this
operator|.
name|services
operator|=
name|masterServices
expr_stmt|;
block|}
specifier|protected
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getBackupMasters
parameter_list|()
block|{
return|return
name|clusterStatus
operator|==
literal|null
condition|?
literal|null
else|:
name|clusterStatus
operator|.
name|getBackupMasters
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|needsBalance
parameter_list|(
name|ClusterLoadState
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|.
name|getNumServers
argument_list|()
operator|<
name|MIN_SERVER_BALANCE
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because only "
operator|+
name|cs
operator|.
name|getNumServers
argument_list|()
operator|+
literal|" active regionserver(s)"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Check if we even need to do any load balancing
comment|// HBASE-3681 check sloppiness first
name|float
name|average
init|=
name|cs
operator|.
name|getLoadAverage
argument_list|()
decl_stmt|;
comment|// for logging
name|int
name|floor
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
operator|*
operator|(
literal|1
operator|-
name|slop
operator|)
argument_list|)
decl_stmt|;
name|int
name|ceiling
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
operator|*
operator|(
literal|1
operator|+
name|slop
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cs
operator|.
name|getMaxLoad
argument_list|()
operator|>
name|ceiling
operator|||
name|cs
operator|.
name|getMinLoad
argument_list|()
operator|<
name|floor
operator|)
condition|)
block|{
name|NavigableMap
argument_list|<
name|ServerAndLoad
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serversByLoad
init|=
name|cs
operator|.
name|getServersByLoad
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// If nothing to balance, then don't say anything unless trace-level logging.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping load balancing because balanced cluster; "
operator|+
literal|"servers="
operator|+
name|cs
operator|.
name|getNumServers
argument_list|()
operator|+
literal|"(backupMasters="
operator|+
name|cs
operator|.
name|getNumBackupMasters
argument_list|()
operator|+
literal|") regions="
operator|+
name|cs
operator|.
name|getNumRegions
argument_list|()
operator|+
literal|" average="
operator|+
name|average
operator|+
literal|" "
operator|+
literal|"mostloaded="
operator|+
name|serversByLoad
operator|.
name|lastKey
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|+
literal|" leastloaded="
operator|+
name|serversByLoad
operator|.
name|firstKey
argument_list|()
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Generates a bulk assignment plan to be used on cluster startup using a    * simple round-robin assignment.    *<p>    * Takes a list of all the regions and all the servers in the cluster and    * returns a map of each server to the regions that it should be assigned.    *<p>    * Currently implemented as a round-robin assignment. Same invariant as load    * balancing, all servers holding floor(avg) or ceiling(avg).    *    * TODO: Use block locations from HDFS to place regions with their blocks    *    * @param regions all regions    * @param servers all servers    * @return map of server to the regions it should take, or null if no    *         assignment is possible (ie. no regions or no servers)    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|metricsBalancer
operator|.
name|incrMiscInvocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
name|normalizeServers
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|servers
operator|==
literal|null
condition|?
literal|0
else|:
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numBackupMasters
init|=
name|backupMasters
operator|==
literal|null
condition|?
literal|0
else|:
name|backupMasters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|==
literal|0
operator|&&
name|numBackupMasters
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do round robin assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|+
name|numBackupMasters
operator|==
literal|1
condition|)
block|{
comment|// Only one server, nothing fancy we can do here
name|ServerName
name|server
init|=
name|numServers
operator|>
literal|0
condition|?
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|backupMasters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regions
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|assignments
return|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|masterRegions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numServers
operator|>
literal|0
operator|&&
name|servers
operator|.
name|contains
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
name|masterRegions
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|numServers
operator|==
literal|1
condition|)
block|{
comment|// The only server in servers is the master,
comment|// Assign all regions to backup masters
name|numServers
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|int
name|total
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Get the number of regions to be assigned
comment|// to backup masters based on the weight
name|int
name|numRegions
init|=
name|total
operator|*
name|numBackupMasters
operator|/
operator|(
name|numServers
operator|*
name|backupMasterWeight
operator|+
name|numBackupMasters
operator|)
decl_stmt|;
if|if
condition|(
name|numRegions
operator|>
literal|0
condition|)
block|{
comment|// backupMasters can't be null, according to the formula, numBackupMasters != 0
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
literal|0
argument_list|,
name|numRegions
argument_list|,
name|backupMasters
argument_list|,
name|masterRegions
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|int
name|remainder
init|=
name|total
operator|-
name|numRegions
decl_stmt|;
if|if
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
comment|// servers can't be null, or contains the master only since numServers != 0
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|numRegions
argument_list|,
name|remainder
argument_list|,
name|servers
argument_list|,
name|masterRegions
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|masterRegions
operator|!=
literal|null
operator|&&
operator|!
name|masterRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|masterServerName
argument_list|,
name|masterRegions
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Generates an immediate assignment plan to be used by a new master for    * regions in transition that do not have an already known destination.    *    * Takes a list of regions that need immediate assignment and a list of all    * available servers. Returns a map of regions to the server they should be    * assigned to.    *    * This method will return quickly and does not do any intelligent balancing.    * The goal is to make a fast decision not the best decision possible.    *    * Currently this is random.    *    * @param regions    * @param servers    * @return map of regions to the server it should be assigned to    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|immediateAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|metricsBalancer
operator|.
name|incrMiscInvocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do random assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
name|normalizeServers
argument_list|(
name|servers
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|,
name|backupMasters
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Used to assign a single region to a random server.    */
annotation|@
name|Override
specifier|public
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|metricsBalancer
operator|.
name|incrMiscInvocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do random assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|randomAssignment
argument_list|(
name|regionInfo
argument_list|,
name|servers
argument_list|,
name|normalizeServers
argument_list|(
name|servers
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generates a bulk assignment startup plan, attempting to reuse the existing    * assignment information from META, but adjusting for the specified list of    * available/online servers available for assignment.    *<p>    * Takes a map of all regions to their existing assignment from META. Also    * takes a list of online servers for regions to be assigned to. Attempts to    * retain all assignment, so in some instances initial assignment will not be    * completely balanced.    *<p>    * Any leftover regions without an existing server to be assigned to will be    * assigned randomly to available servers.    *    * @param regions regions and existing assignment from meta    * @param servers available servers    * @return map of servers and regions to be assigned to them    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
comment|// Update metrics
name|metricsBalancer
operator|.
name|incrMiscInvocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
operator|||
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
name|normalizeServers
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|servers
operator|==
literal|null
condition|?
literal|0
else|:
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numBackupMasters
init|=
name|backupMasters
operator|==
literal|null
condition|?
literal|0
else|:
name|backupMasters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|==
literal|0
operator|&&
name|numBackupMasters
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do retain assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|+
name|numBackupMasters
operator|==
literal|1
condition|)
block|{
comment|// Only one server, nothing fancy we can do here
name|ServerName
name|server
init|=
name|numServers
operator|>
literal|0
condition|?
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|backupMasters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regions
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|assignments
return|;
block|}
comment|// Group all of the old assignments by their hostname.
comment|// We can't group directly by ServerName since the servers all have
comment|// new start-codes.
comment|// Group the servers by their hostname. It's possible we have multiple
comment|// servers on the same host on different ports.
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
name|serversByHostname
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|servers
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
name|serversByHostname
operator|.
name|put
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numBackupMasters
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ServerName
name|server
range|:
name|backupMasters
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Collection of the hostnames that used to have regions
comment|// assigned, but for which we no longer have any RS running
comment|// after the cluster restart.
name|Set
argument_list|<
name|String
argument_list|>
name|oldHostsNoLongerPresent
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
comment|// Master regionserver is in the server list.
name|boolean
name|masterIncluded
init|=
name|servers
operator|.
name|contains
argument_list|(
name|masterServerName
argument_list|)
decl_stmt|;
name|int
name|numRandomAssignments
init|=
literal|0
decl_stmt|;
name|int
name|numRetainedAssigments
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|oldServerName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|localServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
block|{
name|localServers
operator|=
name|serversByHostname
operator|.
name|get
argument_list|(
name|oldServerName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|masterIncluded
operator|&&
name|shouldBeOnMaster
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|assignments
operator|.
name|get
argument_list|(
name|masterServerName
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|localServers
operator|.
name|contains
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
name|numRetainedAssigments
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numRandomAssignments
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No servers on the new cluster match up with this hostname,
comment|// assign randomly.
name|ServerName
name|randomServer
init|=
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|,
name|backupMasters
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|get
argument_list|(
name|randomServer
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRandomAssignments
operator|++
expr_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
name|oldHostsNoLongerPresent
operator|.
name|add
argument_list|(
name|oldServerName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localServers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// the usual case - one new server on same host
name|assignments
operator|.
name|get
argument_list|(
name|localServers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRetainedAssigments
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// multiple new servers in the cluster on this same host
name|int
name|size
init|=
name|localServers
operator|.
name|size
argument_list|()
decl_stmt|;
name|ServerName
name|target
init|=
name|localServers
operator|.
name|contains
argument_list|(
name|oldServerName
argument_list|)
condition|?
name|oldServerName
else|:
name|localServers
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|get
argument_list|(
name|target
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRetainedAssigments
operator|++
expr_stmt|;
block|}
block|}
name|String
name|randomAssignMsg
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|numRandomAssignments
operator|>
literal|0
condition|)
block|{
name|randomAssignMsg
operator|=
name|numRandomAssignments
operator|+
literal|" regions were assigned "
operator|+
literal|"to random hosts, since the old hosts for these regions are no "
operator|+
literal|"longer present in the cluster. These hosts were:\n  "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|join
argument_list|(
name|oldHostsNoLongerPresent
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reassigned "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions. "
operator|+
name|numRetainedAssigments
operator|+
literal|" retained the pre-restart assignment. "
operator|+
name|randomAssignMsg
argument_list|)
expr_stmt|;
return|return
name|assignments
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|HBaseIOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|regionOnline
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|regionOffline
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Load Balancer stop requested: "
operator|+
name|why
argument_list|)
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Prepare the list of target regionservers so that it doesn't    * contain any excluded server, or backup master. Those backup masters    * used to be in the original list are returned.    */
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|normalizeServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|excludedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|servers
operator|.
name|removeAll
argument_list|(
name|excludedServers
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|allBackupMasters
init|=
name|getBackupMasters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allBackupMasters
operator|!=
literal|null
operator|&&
operator|!
name|allBackupMasters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ServerName
name|server
range|:
name|allBackupMasters
control|)
block|{
if|if
condition|(
operator|!
name|servers
operator|.
name|contains
argument_list|(
name|server
argument_list|)
condition|)
block|{
comment|// Ignore backup masters not included
continue|continue;
block|}
name|servers
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupMasters
operator|==
literal|null
condition|)
block|{
name|backupMasters
operator|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|backupMasters
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|backupMasters
return|;
block|}
comment|/**    * Used to assign a single region to a random server. The input should    * have been already normalized: 1) servers doesn't include any exclude sever,    * 2) servers doesn't include any backup master, 3) backupMasters contains    * only backup masters that are intended to host this region, i.e, it    * may not have all the backup masters.    */
specifier|private
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
parameter_list|)
block|{
name|int
name|numServers
init|=
name|servers
operator|==
literal|null
condition|?
literal|0
else|:
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numBackupMasters
init|=
name|backupMasters
operator|==
literal|null
condition|?
literal|0
else|:
name|backupMasters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numServers
operator|==
literal|0
operator|&&
name|numBackupMasters
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do random assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|servers
operator|!=
literal|null
operator|&&
name|shouldBeOnMaster
argument_list|(
name|regionInfo
argument_list|)
operator|&&
name|servers
operator|.
name|contains
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
return|return
name|masterServerName
return|;
block|}
comment|// Generate a random number weighted more towards
comment|// regular regionservers instead of backup masters.
comment|// This formula is chosen for simplicity.
name|int
name|i
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|numBackupMasters
operator|+
name|numServers
operator|*
name|backupMasterWeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|numBackupMasters
condition|)
block|{
return|return
name|backupMasters
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
name|i
operator|=
operator|(
name|i
operator|-
name|numBackupMasters
operator|)
operator|/
name|backupMasterWeight
expr_stmt|;
name|ServerName
name|sn
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
comment|// Try to avoid master for a user region
if|if
condition|(
name|numServers
operator|>
literal|1
condition|)
block|{
name|i
operator|=
operator|(
name|i
operator|==
literal|0
condition|?
literal|1
else|:
name|i
operator|-
literal|1
operator|)
expr_stmt|;
name|sn
operator|=
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBackupMasters
operator|>
literal|0
condition|)
block|{
name|sn
operator|=
name|backupMasters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sn
return|;
block|}
comment|/**    * Round robin a chunk of a list of regions to a list of servers    */
specifier|private
name|void
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|masterRegions
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
parameter_list|)
block|{
name|boolean
name|masterIncluded
init|=
name|servers
operator|.
name|contains
argument_list|(
name|masterServerName
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|skipServers
init|=
name|numServers
decl_stmt|;
if|if
condition|(
name|masterIncluded
condition|)
block|{
name|skipServers
operator|--
expr_stmt|;
block|}
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|float
operator|)
name|numRegions
operator|/
name|skipServers
argument_list|)
decl_stmt|;
name|int
name|serverIdx
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|numServers
argument_list|)
decl_stmt|;
name|int
name|regionIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numServers
condition|;
name|j
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|servers
operator|.
name|get
argument_list|(
operator|(
name|j
operator|+
name|serverIdx
operator|)
operator|%
name|numServers
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterIncluded
operator|&&
name|server
operator|.
name|equals
argument_list|(
name|masterServerName
argument_list|)
condition|)
block|{
comment|// Don't put non-special region on the master regionserver,
comment|// So that it is not overloaded.
continue|continue;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|serverRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|regionIdx
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|+=
name|skipServers
control|)
block|{
name|HRegionInfo
name|region
init|=
name|regions
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i
operator|%
name|numRegions
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterRegions
operator|==
literal|null
operator|||
operator|!
name|shouldBeOnMaster
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|serverRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Master is in the list and this is a special region
name|masterRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|serverRegions
argument_list|)
expr_stmt|;
name|regionIdx
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

