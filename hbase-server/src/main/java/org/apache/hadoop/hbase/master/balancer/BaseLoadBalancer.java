begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * The base class for load balancers. It provides the the functions used to by  * {@link AssignmentManager} to assign regions in the edge cases. It doesn't  * provide an implementation of the actual balancing algorithm.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseLoadBalancer
implements|implements
name|LoadBalancer
block|{
comment|// slop for regions
specifier|private
name|float
name|slop
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MasterServices
name|services
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|slop
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
operator|(
name|float
operator|)
literal|0.2
argument_list|)
expr_stmt|;
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
name|slop
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|slop
operator|>
literal|1
condition|)
name|slop
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
specifier|public
name|void
name|setClusterStatus
parameter_list|(
name|ClusterStatus
name|st
parameter_list|)
block|{
comment|// Not used except for the StocasticBalancer
block|}
specifier|public
name|void
name|setMasterServices
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|masterServices
expr_stmt|;
block|}
specifier|protected
name|boolean
name|needsBalance
parameter_list|(
name|ClusterLoadState
name|cs
parameter_list|)
block|{
comment|// Check if we even need to do any load balancing
name|float
name|average
init|=
name|cs
operator|.
name|getLoadAverage
argument_list|()
decl_stmt|;
comment|// for logging
comment|// HBASE-3681 check sloppiness first
name|int
name|floor
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
operator|*
operator|(
literal|1
operator|-
name|slop
operator|)
argument_list|)
decl_stmt|;
name|int
name|ceiling
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
operator|*
operator|(
literal|1
operator|+
name|slop
operator|)
argument_list|)
decl_stmt|;
return|return
name|cs
operator|.
name|getMinLoad
argument_list|()
operator|>
name|ceiling
operator|||
name|cs
operator|.
name|getMaxLoad
argument_list|()
operator|<
name|floor
return|;
block|}
comment|/**    * Generates a bulk assignment plan to be used on cluster startup using a    * simple round-robin assignment.    *<p>    * Takes a list of all the regions and all the servers in the cluster and    * returns a map of each server to the regions that it should be assigned.    *<p>    * Currently implemented as a round-robin assignment. Same invariant as load    * balancing, all servers holding floor(avg) or ceiling(avg).    *    * TODO: Use block locations from HDFS to place regions with their blocks    *    * @param regions all regions    * @param servers all servers    * @return map of server to the regions it should take, or null if no    *         assignment is possible (ie. no regions or no servers)    */
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|roundRobinAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|regions
operator|.
name|isEmpty
argument_list|()
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numRegions
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|float
operator|)
name|numRegions
operator|/
name|numServers
argument_list|)
decl_stmt|;
name|int
name|serverIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numServers
operator|>
literal|1
condition|)
block|{
name|serverIdx
operator|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|numServers
argument_list|)
expr_stmt|;
block|}
name|int
name|regionIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numServers
condition|;
name|j
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|servers
operator|.
name|get
argument_list|(
operator|(
name|j
operator|+
name|serverIdx
operator|)
operator|%
name|numServers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|serverRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|regionIdx
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|+=
name|numServers
control|)
block|{
name|serverRegions
operator|.
name|add
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
operator|%
name|numRegions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|serverRegions
argument_list|)
expr_stmt|;
name|regionIdx
operator|++
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Generates an immediate assignment plan to be used by a new master for    * regions in transition that do not have an already known destination.    *    * Takes a list of regions that need immediate assignment and a list of all    * available servers. Returns a map of regions to the server they should be    * assigned to.    *    * This method will return quickly and does not do any intelligent balancing.    * The goal is to make a fast decision not the best decision possible.    *    * Currently this is random.    *    * @param regions    * @param servers    * @return map of regions to the server it should be assigned to    */
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|immediateAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
comment|/**    * Used to assign a single region to a random server.    */
specifier|public
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wanted to do random assignment but no servers to assign to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|servers
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generates a bulk assignment startup plan, attempting to reuse the existing    * assignment information from META, but adjusting for the specified list of    * available/online servers available for assignment.    *<p>    * Takes a map of all regions to their existing assignment from META. Also    * takes a list of online servers for regions to be assigned to. Attempts to    * retain all assignment, so in some instances initial assignment will not be    * completely balanced.    *<p>    * Any leftover regions without an existing server to be assigned to will be    * assigned randomly to available servers.    *    * @param regions regions and existing assignment from meta    * @param servers available servers    * @return map of servers and regions to be assigned to them    */
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
comment|// Group all of the old assignments by their hostname.
comment|// We can't group directly by ServerName since the servers all have
comment|// new start-codes.
comment|// Group the servers by their hostname. It's possible we have multiple
comment|// servers on the same host on different ports.
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerName
argument_list|>
name|serversByHostname
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|servers
control|)
block|{
name|serversByHostname
operator|.
name|put
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
comment|// Now come up with new assignments
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|servers
control|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|server
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Collection of the hostnames that used to have regions
comment|// assigned, but for which we no longer have any RS running
comment|// after the cluster restart.
name|Set
argument_list|<
name|String
argument_list|>
name|oldHostsNoLongerPresent
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
name|int
name|numRandomAssignments
init|=
literal|0
decl_stmt|;
name|int
name|numRetainedAssigments
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|oldServerName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|localServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
block|{
name|localServers
operator|=
name|serversByHostname
operator|.
name|get
argument_list|(
name|oldServerName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No servers on the new cluster match up with this hostname,
comment|// assign randomly.
name|ServerName
name|randomServer
init|=
name|servers
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|get
argument_list|(
name|randomServer
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRandomAssignments
operator|++
expr_stmt|;
if|if
condition|(
name|oldServerName
operator|!=
literal|null
condition|)
name|oldHostsNoLongerPresent
operator|.
name|add
argument_list|(
name|oldServerName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localServers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// the usual case - one new server on same host
name|assignments
operator|.
name|get
argument_list|(
name|localServers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRetainedAssigments
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// multiple new servers in the cluster on this same host
name|int
name|size
init|=
name|localServers
operator|.
name|size
argument_list|()
decl_stmt|;
name|ServerName
name|target
init|=
name|localServers
operator|.
name|get
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|get
argument_list|(
name|target
argument_list|)
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|numRetainedAssigments
operator|++
expr_stmt|;
block|}
block|}
name|String
name|randomAssignMsg
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|numRandomAssignments
operator|>
literal|0
condition|)
block|{
name|randomAssignMsg
operator|=
name|numRandomAssignments
operator|+
literal|" regions were assigned "
operator|+
literal|"to random hosts, since the old hosts for these regions are no "
operator|+
literal|"longer present in the cluster. These hosts were:\n  "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|join
argument_list|(
name|oldHostsNoLongerPresent
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reassigned "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions. "
operator|+
name|numRetainedAssigments
operator|+
literal|" retained the pre-restart assignment. "
operator|+
name|randomAssignMsg
argument_list|)
expr_stmt|;
return|return
name|assignments
return|;
block|}
block|}
end_class

end_unit

