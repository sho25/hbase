begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|WALLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_comment
comment|/**  * Tool for dumping snapshot information.  *<ol>  *<li> Table Descriptor  *<li> Snapshot creation time, type, format version, ...  *<li> List of hfiles and wals  *<li> Stats about hfiles and logs sizes, percentage of shared with the source table, ...  *</ol>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|SnapshotInfo
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Statistics about the snapshot    *<ol>    *<li> How many store files and logs are in the archive    *<li> How many store files and logs are shared with the table    *<li> Total store files and logs size and shared amount    *</ol>    */
specifier|public
specifier|static
class|class
name|SnapshotStats
block|{
comment|/** Information about the file referenced by the snapshot */
specifier|static
class|class
name|FileInfo
block|{
specifier|private
specifier|final
name|boolean
name|corrupted
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|inArchive
decl_stmt|;
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
name|FileInfo
parameter_list|(
specifier|final
name|boolean
name|inArchive
parameter_list|,
specifier|final
name|long
name|size
parameter_list|,
specifier|final
name|boolean
name|corrupted
parameter_list|)
block|{
name|this
operator|.
name|corrupted
operator|=
name|corrupted
expr_stmt|;
name|this
operator|.
name|inArchive
operator|=
name|inArchive
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/** @return true if the file is in the archive */
specifier|public
name|boolean
name|inArchive
parameter_list|()
block|{
return|return
name|this
operator|.
name|inArchive
return|;
block|}
comment|/** @return true if the file is corrupted */
specifier|public
name|boolean
name|isCorrupted
parameter_list|()
block|{
return|return
name|this
operator|.
name|corrupted
return|;
block|}
comment|/** @return true if the file is missing */
specifier|public
name|boolean
name|isMissing
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
operator|<
literal|0
return|;
block|}
comment|/** @return the file size */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
return|;
block|}
name|String
name|getStateToString
parameter_list|()
block|{
if|if
condition|(
name|isCorrupted
argument_list|()
condition|)
return|return
literal|"CORRUPTED"
return|;
if|if
condition|(
name|isMissing
argument_list|()
condition|)
return|return
literal|"NOT FOUND"
return|;
if|if
condition|(
name|inArchive
argument_list|()
condition|)
return|return
literal|"archive"
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|AtomicInteger
name|hfilesArchiveCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|hfilesCorrupted
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|hfilesMissing
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|hfilesCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|hfilesMobCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|logsMissing
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|logsCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|hfilesArchiveSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|hfilesSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|hfilesMobSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|nonSharedHfilesArchiveSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|logSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshot
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|snapshotTable
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
name|SnapshotStats
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotTable
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
name|SnapshotStats
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|snapshotTable
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
comment|/** @return the snapshot descriptor */
specifier|public
name|SnapshotDescription
name|getSnapshotDescription
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDescription
argument_list|(
name|this
operator|.
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotType
argument_list|(
name|this
operator|.
name|snapshot
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|snapshot
operator|.
name|getOwner
argument_list|()
argument_list|,
name|this
operator|.
name|snapshot
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|this
operator|.
name|snapshot
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return true if the snapshot is corrupted */
specifier|public
name|boolean
name|isSnapshotCorrupted
parameter_list|()
block|{
return|return
name|hfilesMissing
operator|.
name|get
argument_list|()
operator|>
literal|0
operator|||
name|logsMissing
operator|.
name|get
argument_list|()
operator|>
literal|0
operator|||
name|hfilesCorrupted
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/** @return the number of available store files */
specifier|public
name|int
name|getStoreFilesCount
parameter_list|()
block|{
return|return
name|hfilesCount
operator|.
name|get
argument_list|()
operator|+
name|hfilesArchiveCount
operator|.
name|get
argument_list|()
operator|+
name|hfilesMobCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of available store files in the archive */
specifier|public
name|int
name|getArchivedStoreFilesCount
parameter_list|()
block|{
return|return
name|hfilesArchiveCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of available store files in the mob dir */
specifier|public
name|int
name|getMobStoreFilesCount
parameter_list|()
block|{
return|return
name|hfilesMobCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of available log files */
specifier|public
name|int
name|getLogsCount
parameter_list|()
block|{
return|return
name|logsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of missing store files */
specifier|public
name|int
name|getMissingStoreFilesCount
parameter_list|()
block|{
return|return
name|hfilesMissing
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of corrupted store files */
specifier|public
name|int
name|getCorruptedStoreFilesCount
parameter_list|()
block|{
return|return
name|hfilesCorrupted
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the number of missing log files */
specifier|public
name|int
name|getMissingLogsCount
parameter_list|()
block|{
return|return
name|logsMissing
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the total size of the store files referenced by the snapshot */
specifier|public
name|long
name|getStoreFilesSize
parameter_list|()
block|{
return|return
name|hfilesSize
operator|.
name|get
argument_list|()
operator|+
name|hfilesArchiveSize
operator|.
name|get
argument_list|()
operator|+
name|hfilesMobSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the total size of the store files shared */
specifier|public
name|long
name|getSharedStoreFilesSize
parameter_list|()
block|{
return|return
name|hfilesSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the total size of the store files in the archive */
specifier|public
name|long
name|getArchivedStoreFileSize
parameter_list|()
block|{
return|return
name|hfilesArchiveSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the total size of the store files in the mob store*/
specifier|public
name|long
name|getMobStoreFilesSize
parameter_list|()
block|{
return|return
name|hfilesMobSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the total size of the store files in the archive which is not shared      *    with other snapshots and tables      *      *    This is only calculated when      *  {@link #getSnapshotStats(Configuration, HBaseProtos.SnapshotDescription, Map)}      *    is called with a non-null Map      */
specifier|public
name|long
name|getNonSharedArchivedStoreFilesSize
parameter_list|()
block|{
return|return
name|nonSharedHfilesArchiveSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @return the percentage of the shared store files */
specifier|public
name|float
name|getSharedStoreFilePercentage
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|hfilesSize
operator|.
name|get
argument_list|()
operator|/
operator|(
name|getStoreFilesSize
argument_list|()
operator|)
operator|)
operator|*
literal|100
return|;
block|}
comment|/** @return the percentage of the mob store files */
specifier|public
name|float
name|getMobStoreFilePercentage
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|hfilesMobSize
operator|.
name|get
argument_list|()
operator|/
operator|(
name|getStoreFilesSize
argument_list|()
operator|)
operator|)
operator|*
literal|100
return|;
block|}
comment|/** @return the total log size */
specifier|public
name|long
name|getLogsSize
parameter_list|()
block|{
return|return
name|logSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Check if for a give file in archive, if there are other snapshots/tables still      * reference it.      * @param filePath file path in archive      * @param snapshotFilesMap a map for store files in snapshots about how many snapshots refer      *                         to it.      * @return true or false      */
specifier|private
name|boolean
name|isArchivedFileStillReferenced
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|snapshotFilesMap
parameter_list|)
block|{
name|Integer
name|c
init|=
name|snapshotFilesMap
operator|.
name|get
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|// Check if there are other snapshots or table from clone_snapshot() (via back-reference)
comment|// still reference to it.
if|if
condition|(
operator|(
name|c
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|c
operator|==
literal|1
operator|)
condition|)
block|{
name|Path
name|parentDir
init|=
name|filePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|backRefDir
init|=
name|HFileLink
operator|.
name|getBackReferencesDir
argument_list|(
name|parentDir
argument_list|,
name|filePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|backRefDir
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// For the purpose of this function, IOException is ignored and treated as
comment|// the file is still being referenced.
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Add the specified store file to the stats      * @param region region encoded Name      * @param family family name      * @param storeFile store file name      * @param filesMap store files map for all snapshots, it may be null      * @return the store file information      */
name|FileInfo
name|addStoreFile
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|filesMap
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileLink
name|link
init|=
name|HFileLink
operator|.
name|build
argument_list|(
name|conf
argument_list|,
name|snapshotTable
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
argument_list|,
name|storeFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isCorrupted
init|=
literal|false
decl_stmt|;
name|boolean
name|inArchive
init|=
literal|false
decl_stmt|;
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|inArchive
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|link
operator|.
name|getArchivePath
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|link
operator|.
name|getArchivePath
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|hfilesArchiveSize
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|hfilesArchiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// If store file is not shared with other snapshots and tables,
comment|// increase nonSharedHfilesArchiveSize
if|if
condition|(
operator|(
name|filesMap
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|isArchivedFileStillReferenced
argument_list|(
name|link
operator|.
name|getArchivePath
argument_list|()
argument_list|,
name|filesMap
argument_list|)
condition|)
block|{
name|nonSharedHfilesArchiveSize
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inArchive
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|link
operator|.
name|getMobPath
argument_list|()
argument_list|)
condition|)
block|{
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|link
operator|.
name|getMobPath
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|hfilesMobSize
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|hfilesMobCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|link
operator|.
name|getFileStatus
argument_list|(
name|fs
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|hfilesSize
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|hfilesCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|isCorrupted
operator|=
operator|(
name|storeFile
operator|.
name|hasFileSize
argument_list|()
operator|&&
name|storeFile
operator|.
name|getFileSize
argument_list|()
operator|!=
name|size
operator|)
expr_stmt|;
if|if
condition|(
name|isCorrupted
condition|)
name|hfilesCorrupted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|hfilesMissing
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FileInfo
argument_list|(
name|inArchive
argument_list|,
name|size
argument_list|,
name|isCorrupted
argument_list|)
return|;
block|}
comment|/**      * Add the specified log file to the stats      * @param server server name      * @param logfile log file name      * @return the log information      */
name|FileInfo
name|addLogFile
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|logfile
parameter_list|)
throws|throws
name|IOException
block|{
name|WALLink
name|logLink
init|=
operator|new
name|WALLink
argument_list|(
name|conf
argument_list|,
name|server
argument_list|,
name|logfile
argument_list|)
decl_stmt|;
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|size
operator|=
name|logLink
operator|.
name|getFileStatus
argument_list|(
name|fs
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|logSize
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|logsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|logsMissing
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FileInfo
argument_list|(
literal|false
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|printSizeInBytes
init|=
literal|false
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|SnapshotManifest
name|snapshotManifest
decl_stmt|;
annotation|@
name|Override
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"REC_CATCH_EXCEPTION"
argument_list|,
name|justification
operator|=
literal|"Intentional"
argument_list|)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|listSnapshots
init|=
literal|false
decl_stmt|;
name|String
name|snapshotName
init|=
literal|null
decl_stmt|;
name|boolean
name|showSchema
init|=
literal|false
decl_stmt|;
name|boolean
name|showFiles
init|=
literal|false
decl_stmt|;
name|boolean
name|showStats
init|=
literal|false
decl_stmt|;
comment|// Process command line args
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-snapshot"
argument_list|)
condition|)
block|{
name|snapshotName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-files"
argument_list|)
condition|)
block|{
name|showFiles
operator|=
literal|true
expr_stmt|;
name|showStats
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-stats"
argument_list|)
condition|)
block|{
name|showStats
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-schema"
argument_list|)
condition|)
block|{
name|showSchema
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-remote-dir"
argument_list|)
condition|)
block|{
name|Path
name|sourceDir
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
decl_stmt|;
name|URI
name|defaultFs
init|=
name|sourceDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|defaultFs
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|sourceDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-list-snapshots"
argument_list|)
condition|)
block|{
name|listSnapshots
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-size-in-bytes"
argument_list|)
condition|)
block|{
name|printSizeInBytes
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UNEXPECTED: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
comment|// FindBugs: REC_CATCH_EXCEPTION
block|}
block|}
comment|// List Available Snapshots
if|if
condition|(
name|listSnapshots
condition|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s | %-20s | %s%n"
argument_list|,
literal|"SNAPSHOT"
argument_list|,
literal|"CREATION TIME"
argument_list|,
literal|"TABLE NAME"
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotDescription
name|desc
range|:
name|getSnapshotList
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s | %20s | %s%n"
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|desc
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|desc
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|snapshotName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Missing snapshot name!"
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fs="
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" root="
operator|+
name|rootDir
argument_list|)
expr_stmt|;
comment|// Load snapshot information
if|if
condition|(
operator|!
name|loadSnapshotInfo
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshotName
operator|+
literal|"' not found!"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|printInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|showSchema
condition|)
name|printSchema
argument_list|()
expr_stmt|;
name|printFiles
argument_list|(
name|showFiles
argument_list|,
name|showStats
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Load snapshot info and table descriptor for the specified snapshot    * @param snapshotName name of the snapshot to load    * @return false if snapshot is not found    */
specifier|private
name|boolean
name|loadSnapshotInfo
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshotName
operator|+
literal|"' not found in: "
operator|+
name|snapshotDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
name|snapshotManifest
operator|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Dump the {@link SnapshotDescription}    */
specifier|private
name|void
name|printInfo
parameter_list|()
block|{
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|snapshotManifest
operator|.
name|getSnapshotDescription
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Snapshot Info"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   Name: "
operator|+
name|snapshotDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   Type: "
operator|+
name|snapshotDesc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Table: "
operator|+
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Format: "
operator|+
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created: "
operator|+
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dump the {@link HTableDescriptor}    */
specifier|private
name|void
name|printSchema
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Table Descriptor"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|snapshotManifest
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**    * Collect the hfiles and logs statistics of the snapshot and    * dump the file list if requested and the collected information.    */
specifier|private
name|void
name|printFiles
parameter_list|(
specifier|final
name|boolean
name|showFiles
parameter_list|,
specifier|final
name|boolean
name|showStats
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|showFiles
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Snapshot Files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------------------------------"
argument_list|)
expr_stmt|;
block|}
comment|// Collect information about hfiles and logs in the snapshot
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|snapshotManifest
operator|.
name|getSnapshotDescription
argument_list|()
decl_stmt|;
specifier|final
name|String
name|table
init|=
name|snapshotDesc
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|SnapshotDescription
name|desc
init|=
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotType
argument_list|(
name|snapshotDesc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|snapshotDesc
operator|.
name|getOwner
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SnapshotStats
name|stats
init|=
operator|new
name|SnapshotStats
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|concurrentVisitReferencedFiles
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|fs
argument_list|,
name|snapshotManifest
argument_list|,
literal|"SnapshotInfo"
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|SnapshotVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storeFile
operator|.
name|hasReference
argument_list|()
condition|)
return|return;
name|SnapshotStats
operator|.
name|FileInfo
name|info
init|=
name|stats
operator|.
name|addStoreFile
argument_list|(
name|regionInfo
argument_list|,
name|family
argument_list|,
name|storeFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|showFiles
condition|)
block|{
name|String
name|state
init|=
name|info
operator|.
name|getStateToString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%8s %s/%s/%s/%s %s%n"
argument_list|,
operator|(
name|info
operator|.
name|isMissing
argument_list|()
condition|?
literal|"-"
else|:
name|fileSizeToString
argument_list|(
name|info
operator|.
name|getSize
argument_list|()
argument_list|)
operator|)
argument_list|,
name|table
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
argument_list|,
name|storeFile
operator|.
name|getName
argument_list|()
argument_list|,
name|state
operator|==
literal|null
condition|?
literal|""
else|:
literal|"("
operator|+
name|state
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Dump the stats
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|isSnapshotCorrupted
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"**************************************************************"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"BAD SNAPSHOT: %d hfile(s) and %d log(s) missing.%n"
argument_list|,
name|stats
operator|.
name|getMissingStoreFilesCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getMissingLogsCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"              %d hfile(s) corrupted.%n"
argument_list|,
name|stats
operator|.
name|getCorruptedStoreFilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"**************************************************************"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showStats
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%d HFiles (%d in archive, %d in mob storage), total size %s "
operator|+
literal|"(%.2f%% %s shared with the source table, %.2f%% %s in mob dir)%n"
argument_list|,
name|stats
operator|.
name|getStoreFilesCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getArchivedStoreFilesCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getMobStoreFilesCount
argument_list|()
argument_list|,
name|fileSizeToString
argument_list|(
name|stats
operator|.
name|getStoreFilesSize
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getSharedStoreFilePercentage
argument_list|()
argument_list|,
name|fileSizeToString
argument_list|(
name|stats
operator|.
name|getSharedStoreFilesSize
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getMobStoreFilePercentage
argument_list|()
argument_list|,
name|fileSizeToString
argument_list|(
name|stats
operator|.
name|getMobStoreFilesSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%d Logs, total size %s%n"
argument_list|,
name|stats
operator|.
name|getLogsCount
argument_list|()
argument_list|,
name|fileSizeToString
argument_list|(
name|stats
operator|.
name|getLogsSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|fileSizeToString
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|printSizeInBytes
condition|?
name|Long
operator|.
name|toString
argument_list|(
name|size
argument_list|)
else|:
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|size
argument_list|)
return|;
block|}
specifier|private
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Usage: bin/hbase snapshot info [options]%n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" where [options] are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -h|-help                Show this help and exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -remote-dir             Root directory that contains the snapshots."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -list-snapshots         List all the available snapshots and exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -size-in-bytes          Print the size of the files in bytes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -snapshot NAME          Snapshot to examine."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -files                  Files and logs list."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -stats                  Files and logs stats."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -schema                 Describe the snapshotted table."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  hbase snapshot info \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -snapshot MySnapshot -files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the snapshot stats    * @param conf the {@link Configuration} to use    * @param snapshot {@link SnapshotDescription} to get stats from    * @return the snapshot stats    */
specifier|public
specifier|static
name|SnapshotStats
name|getSnapshotStats
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|getSnapshotStats
argument_list|(
name|conf
argument_list|,
name|snapshotDesc
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns the snapshot stats    * @param conf the {@link Configuration} to use    * @param snapshotDesc  HBaseProtos.SnapshotDescription to get stats from    * @param filesMap {@link Map} store files map for all snapshots, it may be null    * @return the snapshot stats    */
specifier|public
specifier|static
name|SnapshotStats
name|getSnapshotStats
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|filesMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotDesc
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
decl_stmt|;
specifier|final
name|SnapshotStats
name|stats
init|=
operator|new
name|SnapshotStats
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDesc
argument_list|)
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|concurrentVisitReferencedFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|,
literal|"SnapshotsStatsAggregation"
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|SnapshotVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|storeFile
operator|.
name|hasReference
argument_list|()
condition|)
block|{
name|stats
operator|.
name|addStoreFile
argument_list|(
name|regionInfo
argument_list|,
name|family
argument_list|,
name|storeFile
argument_list|,
name|filesMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
comment|/**    * Returns the list of available snapshots in the specified location    * @param conf the {@link Configuration} to use    * @return the list of snapshots    */
specifier|public
specifier|static
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|getSnapshotList
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotDir
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshotLists
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|(
name|snapshots
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|snapshotDirStat
range|:
name|snapshots
control|)
block|{
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDirStat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|snapshotLists
operator|.
name|add
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|createSnapshotType
argument_list|(
name|snapshotDesc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|snapshotDesc
operator|.
name|getOwner
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotLists
return|;
block|}
comment|/**    * Gets the store files map for snapshot    * @param conf the {@link Configuration} to use    * @param snapshot {@link SnapshotDescription} to get stats from    * @param exec the {@link ExecutorService} to use    * @param filesMap {@link Map} the map to put the mapping entries    * @param uniqueHFilesArchiveSize {@link AtomicLong} the accumulated store file size in archive    * @param uniqueHFilesSize {@link AtomicLong} the accumulated store file size shared    * @param uniqueHFilesMobSize {@link AtomicLong} the accumulated mob store file size shared    * @return the snapshot stats    */
specifier|private
specifier|static
name|void
name|getSnapshotFilesMap
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|ExecutorService
name|exec
parameter_list|,
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|filesMap
parameter_list|,
specifier|final
name|AtomicLong
name|uniqueHFilesArchiveSize
parameter_list|,
specifier|final
name|AtomicLong
name|uniqueHFilesSize
parameter_list|,
specifier|final
name|AtomicLong
name|uniqueHFilesMobSize
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotDesc
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|concurrentVisitReferencedFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|manifest
argument_list|,
name|exec
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|SnapshotVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|storeFile
operator|.
name|hasReference
argument_list|()
condition|)
block|{
name|HFileLink
name|link
init|=
name|HFileLink
operator|.
name|build
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|family
argument_list|,
name|storeFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
decl_stmt|;
name|Integer
name|count
decl_stmt|;
name|Path
name|p
decl_stmt|;
name|AtomicLong
name|al
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|link
operator|.
name|getArchivePath
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|=
name|link
operator|.
name|getArchivePath
argument_list|()
expr_stmt|;
name|al
operator|=
name|uniqueHFilesArchiveSize
expr_stmt|;
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|link
operator|.
name|getMobPath
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|=
name|link
operator|.
name|getMobPath
argument_list|()
expr_stmt|;
name|al
operator|=
name|uniqueHFilesMobSize
expr_stmt|;
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|link
operator|.
name|getOriginPath
argument_list|()
expr_stmt|;
name|al
operator|=
name|uniqueHFilesSize
expr_stmt|;
name|size
operator|=
name|link
operator|.
name|getFileStatus
argument_list|(
name|fs
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
comment|// If it has been counted, do not double count
name|count
operator|=
name|filesMap
operator|.
name|get
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|count
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|al
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|filesMap
operator|.
name|put
argument_list|(
name|p
argument_list|,
operator|++
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the map of store files based on path for all snapshots    * @param conf the {@link Configuration} to use    * @param uniqueHFilesArchiveSize pass out the size for store files in archive    * @param uniqueHFilesSize pass out the size for store files shared    * @param uniqueHFilesMobSize pass out the size for mob store files shared    * @return the map of store files    */
specifier|public
specifier|static
name|Map
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|getSnapshotsFilesMap
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|AtomicLong
name|uniqueHFilesArchiveSize
parameter_list|,
name|AtomicLong
name|uniqueHFilesSize
parameter_list|,
name|AtomicLong
name|uniqueHFilesMobSize
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshotList
init|=
name|getSnapshotList
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|fileMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ExecutorService
name|exec
init|=
name|SnapshotManifest
operator|.
name|createExecutor
argument_list|(
name|conf
argument_list|,
literal|"SnapshotsFilesMapping"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|SnapshotDescription
name|snapshot
range|:
name|snapshotList
control|)
block|{
name|getSnapshotFilesMap
argument_list|(
name|conf
argument_list|,
name|snapshot
argument_list|,
name|exec
argument_list|,
name|fileMap
argument_list|,
name|uniqueHFilesArchiveSize
argument_list|,
name|uniqueHFilesSize
argument_list|,
name|uniqueHFilesMobSize
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
return|return
name|fileMap
return|;
block|}
comment|/**    * The guts of the {@link #main} method.    * Call this method to avoid the {@link #main(String[])} System.exit.    * @param args    * @return errCode    * @throws Exception    */
specifier|static
name|int
name|innerMain
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|SnapshotInfo
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|innerMain
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

