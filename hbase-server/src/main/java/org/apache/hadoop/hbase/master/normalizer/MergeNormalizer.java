begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|normalizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of MergeNormalizer Logic in use:  *<ol>  *<li>get all regions of a given table  *<li>get avg size S of each region (by total size of store files reported in RegionLoad)  *<li>two regions R1 and its neighbour R2 are merged, if R1 + R2&lt; S, and all such regions are  * returned to be merged  *<li>Otherwise, no action is performed  *</ol>  *<p>  * Considering the split policy takes care of splitting region we also want a way to merge when  * regions are too small. It is little different than what  * {@link org.apache.hadoop.hbase.master.normalizer.SimpleRegionNormalizer} does. Instead of doing  * splits and merge both to achieve average region size in cluster for a table. We only merge  * regions(older than defined age) and rely on Split policy for region splits. The goal of this  * normalizer is to merge small regions to make size of regions close to average size (which is  * either average size or depends on either target region size or count in that order). Consider  * region with size 1,2,3,4,10,10,10,5,4,3. If minimum merge age is set to 0 days this algorithm  * will find the average size as 7.2 assuming we haven't provided target region count or size. Now  * we will find all those adjacent region which if merged doesn't exceed the average size. so we  * will merge 1-2, 3-4, 4,3 in our first run. To get best results from this normalizer theoretically  * we should set target region size between 0.5 to 0.75 of configured maximum file size. If we set  * min merge age as 3 we create plan as above and see if we have a plan which has both regions as  * new(age less than 3) we discard such plans and we consider the regions even if one of the region  * is old enough to be merged.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MergeNormalizer
extends|extends
name|AbstractRegionNormalizer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergeNormalizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|minRegionCount
decl_stmt|;
specifier|private
name|int
name|minRegionAge
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|skippedCount
init|=
operator|new
name|long
index|[
name|NormalizationPlan
operator|.
name|PlanType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
specifier|public
name|MergeNormalizer
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|minRegionCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.normalizer.min.region.count"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|minRegionAge
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.normalizer.min.region.merge.age"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|planSkipped
parameter_list|(
name|RegionInfo
name|hri
parameter_list|,
name|NormalizationPlan
operator|.
name|PlanType
name|type
parameter_list|)
block|{
name|skippedCount
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSkippedCount
parameter_list|(
name|NormalizationPlan
operator|.
name|PlanType
name|type
parameter_list|)
block|{
return|return
name|skippedCount
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|NormalizationPlan
argument_list|>
name|computePlanForTable
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|HBaseIOException
block|{
name|List
argument_list|<
name|NormalizationPlan
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shouldNormalize
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// at least one of the two regions should be older than MIN_REGION_AGE days
name|List
argument_list|<
name|NormalizationPlan
argument_list|>
name|normalizationPlans
init|=
name|getMergeNormalizationPlan
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|NormalizationPlan
name|plan
range|:
name|normalizationPlans
control|)
block|{
if|if
condition|(
name|plan
operator|instanceof
name|MergeNormalizationPlan
condition|)
block|{
name|RegionInfo
name|hri
init|=
operator|(
operator|(
name|MergeNormalizationPlan
operator|)
name|plan
operator|)
operator|.
name|getFirstRegion
argument_list|()
decl_stmt|;
name|RegionInfo
name|hri2
init|=
operator|(
operator|(
name|MergeNormalizationPlan
operator|)
name|plan
operator|)
operator|.
name|getSecondRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOldEnoughToMerge
argument_list|(
name|hri
argument_list|)
operator|||
name|isOldEnoughToMerge
argument_list|(
name|hri2
argument_list|)
condition|)
block|{
name|plans
operator|.
name|add
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping region {} and {} as they are both new"
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|hri2
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|plans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No normalization needed, regions look good for table: {}"
argument_list|,
name|table
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|plans
return|;
block|}
specifier|private
name|boolean
name|isOldEnoughToMerge
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
block|{
name|Timestamp
name|currentTime
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Timestamp
name|hriTime
init|=
operator|new
name|Timestamp
argument_list|(
name|hri
operator|.
name|getRegionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isOld
init|=
operator|new
name|Timestamp
argument_list|(
name|hriTime
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
name|minRegionAge
argument_list|)
argument_list|)
operator|.
name|before
argument_list|(
name|currentTime
argument_list|)
decl_stmt|;
return|return
name|isOld
return|;
block|}
specifier|private
name|boolean
name|shouldNormalize
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|boolean
name|normalize
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
operator|||
name|table
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Normalization of system table {} isn't allowed"
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isMergeEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge disabled for table: {}"
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRegions
operator|==
literal|null
operator|||
name|tableRegions
operator|.
name|size
argument_list|()
operator|<
name|minRegionCount
condition|)
block|{
name|int
name|nrRegions
init|=
name|tableRegions
operator|==
literal|null
condition|?
literal|0
else|:
name|tableRegions
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table {} has {} regions, required min number of regions for normalizer to run is {} , "
operator|+
literal|"not running normalizer"
argument_list|,
name|table
argument_list|,
name|nrRegions
argument_list|,
name|minRegionCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|normalize
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|normalize
return|;
block|}
block|}
end_class

end_unit

