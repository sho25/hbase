begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Subclass if the server knows the region is now on another server.  * This allows the client to call the new region server without calling the master.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RegionMovedException
extends|extends
name|NotServingRegionException
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionMovedException
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7232903522310558396L
decl_stmt|;
specifier|private
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|long
name|startCode
decl_stmt|;
specifier|private
specifier|final
name|long
name|locationSeqNum
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST_FIELD
init|=
literal|"hostname="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_FIELD
init|=
literal|"port="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STARTCODE_FIELD
init|=
literal|"startCode="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCATIONSEQNUM_FIELD
init|=
literal|"locationSeqNum="
decl_stmt|;
specifier|public
name|RegionMovedException
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|long
name|locationSeqNum
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|serverName
operator|.
name|getHostname
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|serverName
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|startCode
operator|=
name|serverName
operator|.
name|getStartcode
argument_list|()
expr_stmt|;
name|this
operator|.
name|locationSeqNum
operator|=
name|locationSeqNum
expr_stmt|;
block|}
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
operator|new
name|ServerName
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLocationSeqNum
parameter_list|()
block|{
return|return
name|locationSeqNum
return|;
block|}
comment|/**    * For hadoop.ipc internal call. Do NOT use.    * We have to parse the hostname to recreate the exception.    * The input is the one generated by {@link #getMessage()}    */
specifier|public
name|RegionMovedException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|posHostname
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|HOST_FIELD
argument_list|)
operator|+
name|HOST_FIELD
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|posPort
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|PORT_FIELD
argument_list|)
operator|+
name|PORT_FIELD
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|posStartCode
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|STARTCODE_FIELD
argument_list|)
operator|+
name|STARTCODE_FIELD
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|posSeqNum
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|LOCATIONSEQNUM_FIELD
argument_list|)
operator|+
name|LOCATIONSEQNUM_FIELD
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|tmpHostname
init|=
literal|null
decl_stmt|;
name|int
name|tmpPort
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|tmpStartCode
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|tmpSeqNum
init|=
name|HConstants
operator|.
name|NO_SEQNUM
decl_stmt|;
try|try
block|{
comment|// TODO: this whole thing is extremely brittle.
name|tmpHostname
operator|=
name|s
operator|.
name|substring
argument_list|(
name|posHostname
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|posHostname
argument_list|)
argument_list|)
expr_stmt|;
name|tmpPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|posPort
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|posPort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpStartCode
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|posStartCode
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|posStartCode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSeqNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|posSeqNum
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|posSeqNum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't parse the hostname, port and startCode from this string: "
operator|+
name|s
operator|+
literal|", continuing"
argument_list|)
expr_stmt|;
block|}
name|hostname
operator|=
name|tmpHostname
expr_stmt|;
name|port
operator|=
name|tmpPort
expr_stmt|;
name|startCode
operator|=
name|tmpStartCode
expr_stmt|;
name|locationSeqNum
operator|=
name|tmpSeqNum
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
comment|// TODO: deserialization above depends on this. That is bad, but also means this
comment|// should be modified carefully.
return|return
literal|"Region moved to: "
operator|+
name|HOST_FIELD
operator|+
name|hostname
operator|+
literal|" "
operator|+
name|PORT_FIELD
operator|+
name|port
operator|+
literal|" "
operator|+
name|STARTCODE_FIELD
operator|+
name|startCode
operator|+
literal|". As of "
operator|+
name|LOCATIONSEQNUM_FIELD
operator|+
name|locationSeqNum
operator|+
literal|"."
return|;
block|}
comment|/**    * Look for a RegionMovedException in the exception:    *  - hadoop.ipc wrapped exceptions    *  - nested exceptions    * Returns null if we didn't find the exception or if it was not readable.    */
specifier|public
specifier|static
name|RegionMovedException
name|find
parameter_list|(
name|Object
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
operator|||
operator|!
operator|(
name|exception
operator|instanceof
name|Throwable
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Throwable
name|cur
init|=
operator|(
name|Throwable
operator|)
name|exception
decl_stmt|;
name|RegionMovedException
name|res
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|res
operator|==
literal|null
operator|&&
name|cur
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cur
operator|instanceof
name|RegionMovedException
condition|)
block|{
name|res
operator|=
operator|(
name|RegionMovedException
operator|)
name|cur
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cur
operator|instanceof
name|RemoteException
condition|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|cur
decl_stmt|;
name|Exception
name|e
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|RegionMovedException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
comment|// unwrapRemoteException can return the exception given as a parameter when it cannot
comment|//  unwrap it. In this case, there is no need to look further
comment|// noinspection ObjectEquality
if|if
condition|(
name|e
operator|!=
name|re
condition|)
block|{
name|res
operator|=
name|find
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|cur
operator|=
name|cur
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|!=
literal|null
operator|&&
operator|(
name|res
operator|.
name|getPort
argument_list|()
operator|<
literal|0
operator|||
name|res
operator|.
name|getHostname
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
comment|// We failed to parse the exception. Let's act as we don't find the exception.
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|res
return|;
block|}
block|}
block|}
end_class

end_unit

