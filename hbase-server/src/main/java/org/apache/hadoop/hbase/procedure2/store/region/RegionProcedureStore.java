begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|NO_NONCE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|LeaseRecovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStoreBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * A procedure store which uses a region to store all the procedures.  *<p/>  * FileSystem layout:  *  *<pre>  * hbase  *   |  *   --MasterProcs  *       |  *       --data  *       |  |  *       |  --/master/procedure/&lt;encoded-region-name&gt;<---- The region data  *       |      |  *       |      --replay<---- The edits to replay  *       |  *       --WALs  *          |  *          --&lt;master-server-name&gt;<---- The WAL dir for active master  *          |  *          --&lt;master-server-name&gt;-dead<---- The WAL dir dead master  *</pre>  *  * We use p:d column to store the serialized protobuf format procedure, and when deleting we will  * first fill the info:proc column with an empty byte array, and then actually delete them in the  * {@link #cleanup()} method. This is because that we need to retain the max procedure id, so we can  * not directly delete a procedure row as we do not know if it is the one with the max procedure id.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionProcedureStore
extends|extends
name|ProcedureStoreBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAX_WALS_KEY
init|=
literal|"hbase.procedure.store.region.maxwals"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_WALS
init|=
literal|10
decl_stmt|;
specifier|static
specifier|final
name|String
name|USE_HSYNC_KEY
init|=
literal|"hbase.procedure.store.region.wal.hsync"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MASTER_PROCEDURE_DIR
init|=
literal|"MasterProcs"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOGCLEANER_PLUGINS
init|=
literal|"hbase.procedure.store.region.logcleaner.plugins"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPLAY_EDITS_DIR
init|=
literal|"recovered.wals"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEAD_WAL_DIR_SUFFIX
init|=
literal|"-dead"
decl_stmt|;
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"master:procedure"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|PROC_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|REGION_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableDescriptor
name|TABLE_DESC
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|LeaseRecovery
name|leaseRecovery
decl_stmt|;
specifier|private
name|WALFactory
name|walFactory
decl_stmt|;
annotation|@
name|VisibleForTesting
name|HRegion
name|region
decl_stmt|;
specifier|private
name|RegionFlusherAndCompactor
name|flusherAndCompactor
decl_stmt|;
annotation|@
name|VisibleForTesting
name|RegionProcedureStoreWALRoller
name|walRoller
decl_stmt|;
specifier|private
name|int
name|numThreads
decl_stmt|;
specifier|public
name|RegionProcedureStore
parameter_list|(
name|Server
name|server
parameter_list|,
name|LeaseRecovery
name|leaseRecovery
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|leaseRecovery
operator|=
name|leaseRecovery
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|setRunning
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the Region Procedure Store, number threads={}"
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
block|}
specifier|private
name|void
name|shutdownWAL
parameter_list|()
block|{
if|if
condition|(
name|walFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|walFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to shutdown WAL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|closeRegion
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|region
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
if|if
condition|(
operator|!
name|setRunning
argument_list|(
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the Region Procedure Store, isAbort={}"
argument_list|,
name|abort
argument_list|)
expr_stmt|;
if|if
condition|(
name|flusherAndCompactor
operator|!=
literal|null
condition|)
block|{
name|flusherAndCompactor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// if abort, we shutdown wal first to fail the ongoing updates to the region, and then close the
comment|// region, otherwise there will be dead lock.
if|if
condition|(
name|abort
condition|)
block|{
name|shutdownWAL
argument_list|()
expr_stmt|;
name|closeRegion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeRegion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|shutdownWAL
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|walRoller
operator|!=
literal|null
condition|)
block|{
name|walRoller
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumThreads
parameter_list|()
block|{
return|return
name|numThreads
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|setRunningProcedureCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
comment|// useless for region based storage.
return|return
name|count
return|;
block|}
specifier|private
name|WAL
name|createWAL
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|logName
init|=
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|walDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WALDir={}"
argument_list|,
name|walDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|walDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Master procedure store has already created directory at "
operator|+
name|walDir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|walDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not create master procedure wal directory "
operator|+
name|walDir
argument_list|)
throw|;
block|}
name|WAL
name|wal
init|=
name|walFactory
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|walRoller
operator|.
name|addWAL
argument_list|(
name|wal
argument_list|)
expr_stmt|;
return|return
name|wal
return|;
block|}
specifier|private
name|HRegion
name|bootstrap
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|regionInfo
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|REGION_ID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|tmpTableDir
init|=
name|CommonFSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|TABLE_NAME
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"-tmp"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tmpTableDir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|tmpTableDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not delete partial created proc region "
operator|+
name|tmpTableDir
argument_list|)
throw|;
block|}
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|fs
argument_list|,
name|tmpTableDir
argument_list|,
name|TABLE_DESC
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|tableDir
init|=
name|CommonFSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmpTableDir
argument_list|,
name|tableDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not rename "
operator|+
name|tmpTableDir
operator|+
literal|" to "
operator|+
name|tableDir
argument_list|)
throw|;
block|}
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
return|return
name|HRegion
operator|.
name|openHRegionFromTableDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|regionInfo
argument_list|,
name|TABLE_DESC
argument_list|,
name|wal
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|HRegion
name|open
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|factoryId
init|=
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|CommonFSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|,
name|p
lambda|->
name|RegionInfo
operator|.
name|isEncodedRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|replayEditsDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|REPLAY_EDITS_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|replayEditsDir
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|replayEditsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create replay directory: "
operator|+
name|replayEditsDir
argument_list|)
throw|;
block|}
name|Path
name|walsDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|walDir
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|walsDir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|walDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|walDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|factoryId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"This should not happen in real production as we have not created our WAL "
operator|+
literal|"directory yet, ignore if you are running a procedure related UT"
argument_list|)
expr_stmt|;
block|}
name|Path
name|deadWALDir
decl_stmt|;
if|if
condition|(
operator|!
name|walDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|DEAD_WAL_DIR_SUFFIX
argument_list|)
condition|)
block|{
name|deadWALDir
operator|=
operator|new
name|Path
argument_list|(
name|walDir
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|walDir
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|DEAD_WAL_DIR_SUFFIX
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|walDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|deadWALDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not rename "
operator|+
name|walDir
operator|+
literal|" to "
operator|+
name|deadWALDir
operator|+
literal|" when recovering lease of proc store"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed {} to {} as it is dead"
argument_list|,
name|walDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|deadWALDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deadWALDir
operator|=
name|walDir
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} is already marked as dead"
argument_list|,
name|deadWALDir
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|walFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|deadWALDir
argument_list|)
control|)
block|{
name|Path
name|replayEditsFile
init|=
operator|new
name|Path
argument_list|(
name|replayEditsDir
argument_list|,
name|walFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|leaseRecovery
operator|.
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|walFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|walFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|replayEditsFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not rename "
operator|+
name|walFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|replayEditsFile
operator|+
literal|" when recovering lease of proc store"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed {} to {}"
argument_list|,
name|walFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|replayEditsFile
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete empty proc wal dir {}"
argument_list|,
name|deadWALDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|deadWALDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|RegionInfo
name|regionInfo
init|=
name|HRegionFileSystem
operator|.
name|loadRegionInfoFileContent
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|)
decl_stmt|;
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HRegion
operator|.
name|SPECIAL_RECOVERED_EDITS_DIR
argument_list|,
name|replayEditsDir
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|HRegion
operator|.
name|openHRegionFromTableDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|regionInfo
argument_list|,
name|TABLE_DESC
argument_list|,
name|wal
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|tryMigrate
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|server
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|procWALDir
init|=
operator|new
name|Path
argument_list|(
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|WALProcedureStore
operator|.
name|MASTER_PROCEDURE_LOGDIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|procWALDir
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"The old procedure wal directory {} exists, start migrating"
argument_list|,
name|procWALDir
argument_list|)
expr_stmt|;
name|WALProcedureStore
name|store
init|=
operator|new
name|WALProcedureStore
argument_list|(
name|conf
argument_list|,
name|leaseRecovery
argument_list|)
decl_stmt|;
name|store
operator|.
name|start
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|store
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|MutableLong
name|maxProcIdSet
init|=
operator|new
name|MutableLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|MutableLong
name|maxProcIdFromProcs
init|=
operator|new
name|MutableLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|store
operator|.
name|load
argument_list|(
operator|new
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|maxProcIdSet
operator|.
name|setValue
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|procIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|procCount
operator|++
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|getProcId
argument_list|()
operator|>
name|maxProcIdFromProcs
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|maxProcIdFromProcs
operator|.
name|setValue
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrated {} procedures"
argument_list|,
name|procCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|corruptedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Corrupted procedure {}"
argument_list|,
name|procIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|corruptedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|corruptedCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There are "
operator|+
name|corruptedCount
operator|+
literal|" corrupted procedures when"
operator|+
literal|" migrating from the old WAL based store to the new region based store, please"
operator|+
literal|" fix them before upgrading again."
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The max pid is {}, and the max pid of all loaded procedures is {}"
argument_list|,
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
argument_list|,
name|maxProcIdFromProcs
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Theoretically, the maxProcIdSet should be greater than or equal to maxProcIdFromProcs, but
comment|// anyway, let's do a check here.
if|if
condition|(
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
operator|>
name|maxProcIdFromProcs
operator|.
name|longValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// let's add a fake row to retain the max proc id
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
operator|<
name|maxProcIdFromProcs
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The max pid is less than the max pid of all loaded procedures"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|procWALDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete the migrated proc wal directory "
operator|+
name|procWALDir
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Migration finished"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recoverLease
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting Region Procedure Store lease recovery..."
argument_list|)
expr_stmt|;
name|Configuration
name|baseConf
init|=
name|server
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|CommonFSUtils
operator|.
name|getWALFileSystem
argument_list|(
name|baseConf
argument_list|)
decl_stmt|;
name|Path
name|globalWALRootDir
init|=
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|baseConf
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|globalWALRootDir
argument_list|,
name|MASTER_PROCEDURE_DIR
argument_list|)
decl_stmt|;
comment|// we will override some configurations so create a new one.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|baseConf
argument_list|)
decl_stmt|;
name|CommonFSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|RegionFlusherAndCompactor
operator|.
name|setupConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AbstractFSWAL
operator|.
name|MAX_LOGS
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_WALS_KEY
argument_list|,
name|DEFAULT_MAX_WALS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|USE_HSYNC_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HRegion
operator|.
name|WAL_HSYNC_CONF_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|USE_HSYNC_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|AbstractFSWAL
operator|.
name|RING_BUFFER_SLOT_COUNT
argument_list|,
name|IntMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
literal|16
operator|*
name|numThreads
argument_list|)
argument_list|)
expr_stmt|;
name|walRoller
operator|=
name|RegionProcedureStoreWALRoller
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|server
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|globalWALRootDir
argument_list|)
expr_stmt|;
name|walRoller
operator|.
name|start
argument_list|()
expr_stmt|;
name|walFactory
operator|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|tableDir
init|=
name|CommonFSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tableDir
argument_list|)
condition|)
block|{
comment|// load the existing region.
name|region
operator|=
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// bootstrapping...
name|region
operator|=
name|bootstrap
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
block|}
name|flusherAndCompactor
operator|=
operator|new
name|RegionFlusherAndCompactor
argument_list|(
name|conf
argument_list|,
name|server
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|walRoller
operator|.
name|setFlusherAndCompactor
argument_list|(
name|flusherAndCompactor
argument_list|)
expr_stmt|;
name|tryMigrate
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ProcedureProtos
operator|.
name|Procedure
argument_list|>
name|procs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|maxProcId
init|=
literal|0
decl_stmt|;
try|try
init|(
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|moreRows
decl_stmt|;
do|do
block|{
name|moreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
name|maxProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxProcId
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getValueLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ProcedureProtos
operator|.
name|Procedure
name|proto
init|=
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|parser
argument_list|()
operator|.
name|parseFrom
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|procs
operator|.
name|add
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|moreRows
condition|)
do|;
block|}
name|loader
operator|.
name|setMaxProcId
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
name|ProcedureTree
name|tree
init|=
name|ProcedureTree
operator|.
name|build
argument_list|(
name|procs
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|tree
operator|.
name|getValidProcs
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|handleCorrupted
argument_list|(
name|tree
operator|.
name|getCorruptedProcs
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|serializePut
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcedureProtos
operator|.
name|Procedure
name|proto
init|=
name|ProcedureUtil
operator|.
name|convertToProtoProcedure
argument_list|(
name|proc
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rowsToLock
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// As we need to keep the max procedure id, here we can not simply delete the procedure, just fill
comment|// the proc column with an empty array.
specifier|private
name|void
name|serializeDelete
parameter_list|(
name|long
name|procId
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
parameter_list|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|rowsToLock
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|,
name|Procedure
argument_list|<
name|?
argument_list|>
index|[]
name|subProcs
parameter_list|)
block|{
if|if
condition|(
name|subProcs
operator|==
literal|null
operator|||
name|subProcs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// same with update, just insert a single procedure
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subProcs
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subProcs
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|serializePut
argument_list|(
name|proc
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
for|for
control|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|subProc
range|:
name|subProcs
control|)
block|{
name|serializePut
argument_list|(
name|subProc
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mutations
argument_list|,
name|rowsToLock
argument_list|,
name|NO_NONCE
argument_list|,
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to insert proc {}, sub procs {}"
argument_list|,
name|proc
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|subProcs
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
index|[]
name|procs
parameter_list|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|procs
operator|.
name|length
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|procs
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
range|:
name|procs
control|)
block|{
name|serializePut
argument_list|(
name|proc
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mutations
argument_list|,
name|rowsToLock
argument_list|,
name|NO_NONCE
argument_list|,
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to insert procs {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|procs
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
block|{
try|try
block|{
name|ProcedureProtos
operator|.
name|Procedure
name|proto
init|=
name|ProcedureUtil
operator|.
name|convertToProtoProcedure
argument_list|(
name|proc
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to update proc {}"
argument_list|,
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
try|try
block|{
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|procId
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to delete pid={}"
argument_list|,
name|procId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|parentProc
parameter_list|,
name|long
index|[]
name|subProcIds
parameter_list|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subProcIds
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subProcIds
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|serializePut
argument_list|(
name|parentProc
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|subProcId
range|:
name|subProcIds
control|)
block|{
name|serializeDelete
argument_list|(
name|subProcId
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mutations
argument_list|,
name|rowsToLock
argument_list|,
name|NO_NONCE
argument_list|,
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to delete parent proc {}, sub pids={}"
argument_list|,
name|parentProc
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|subProcIds
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|long
index|[]
name|procIds
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
name|delete
argument_list|(
name|procIds
index|[
name|offset
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|procId
init|=
name|procIds
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|serializeDelete
argument_list|(
name|procId
argument_list|,
name|mutations
argument_list|,
name|rowsToLock
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|region
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mutations
argument_list|,
name|rowsToLock
argument_list|,
name|NO_NONCE
argument_list|,
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"Failed to delete pids={}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|procIds
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|flusherAndCompactor
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
comment|// actually delete the procedures if it is not the one with the max procedure id.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|PROC_QUALIFIER
argument_list|)
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
argument_list|)
init|)
block|{
comment|// skip the row with max procedure id
name|boolean
name|moreRows
init|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|moreRows
condition|)
block|{
name|moreRows
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to clean up delete procedures"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

