begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ZKReplicationStorageBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKSyncReplicationReplayWALWorkerStorage
extends|extends
name|ZKReplicationStorageBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WORKERS_ZNODE
init|=
literal|"zookeeper.znode.sync.replication.replaywal.workers"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WORKERS_ZNODE_DEFAULT
init|=
literal|"replaywal-workers"
decl_stmt|;
comment|/**    * The name of the znode that contains a list of workers to replay wal.    */
specifier|private
specifier|final
name|String
name|workersZNode
decl_stmt|;
specifier|public
name|ZKSyncReplicationReplayWALWorkerStorage
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|workersZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|WORKERS_ZNODE
argument_list|,
name|WORKERS_ZNODE_DEFAULT
argument_list|)
decl_stmt|;
name|workersZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|workersZNodeName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getPeerNode
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|workersZNode
argument_list|,
name|peerId
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add peer id="
operator|+
name|peerId
operator|+
literal|" to replaywal-workers storage"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zookeeper
argument_list|,
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove peer id="
operator|+
name|peerId
operator|+
literal|" to replaywal-workers storage"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getPeerWorkerNode
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ServerName
name|worker
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|,
name|worker
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPeerWorker
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ServerName
name|worker
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|getPeerWorkerNode
argument_list|(
name|peerId
argument_list|,
name|worker
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add worker="
operator|+
name|worker
operator|+
literal|" for peer id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removePeerWorker
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ServerName
name|worker
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zookeeper
argument_list|,
name|getPeerWorkerNode
argument_list|(
name|peerId
argument_list|,
name|worker
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove worker="
operator|+
name|worker
operator|+
literal|" for peer id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getPeerWorkers
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|children
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ServerName
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to list workers for peer id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

