begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
operator|.
name|PipelineController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Class which accumulates edits and separates them into a buffer per region while simultaneously  * accounting RAM usage. Blocks if the RAM usage crosses a predefined threshold. Writer threads then  * pull region-specific buffers from this class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|EntryBuffers
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntryBuffers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PipelineController
name|controller
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|/*    * Track which regions are currently in the middle of writing. We don't allow an IO thread to pick    * up bytes from a region if we're already writing data for that region in a different IO thread.    */
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|currentlyWriting
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|totalBuffered
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maxHeapUsage
decl_stmt|;
specifier|public
name|EntryBuffers
parameter_list|(
name|PipelineController
name|controller
parameter_list|,
name|long
name|maxHeapUsage
parameter_list|)
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|maxHeapUsage
operator|=
name|maxHeapUsage
expr_stmt|;
block|}
comment|/**    * Append a log entry into the corresponding region buffer. Blocks if the total heap usage has    * crossed the specified threshold.    */
name|void
name|appendEntry
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|WALKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RegionEntryBuffer
name|buffer
decl_stmt|;
name|long
name|incrHeap
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|buffer
operator|=
name|buffers
operator|.
name|get
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|RegionEntryBuffer
argument_list|(
name|key
operator|.
name|getTableName
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|put
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|incrHeap
operator|=
name|buffer
operator|.
name|appendEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// If we crossed the chunk threshold, wait for more space to be available
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|+=
name|incrHeap
expr_stmt|;
while|while
condition|(
name|totalBuffered
operator|>
name|maxHeapUsage
operator|&&
name|controller
operator|.
name|thrown
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Used {} bytes of buffered edits, waiting for IO threads"
argument_list|,
name|totalBuffered
argument_list|)
expr_stmt|;
name|controller
operator|.
name|dataAvailable
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|controller
operator|.
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|controller
operator|.
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return RegionEntryBuffer a buffer of edits to be written.    */
specifier|synchronized
name|RegionEntryBuffer
name|getChunkToWrite
parameter_list|()
block|{
name|long
name|biggestSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|biggestBufferKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionEntryBuffer
argument_list|>
name|entry
range|:
name|buffers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|size
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|biggestSize
operator|&&
operator|(
operator|!
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|biggestSize
operator|=
name|size
expr_stmt|;
name|biggestBufferKey
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|biggestBufferKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RegionEntryBuffer
name|buffer
init|=
name|buffers
operator|.
name|remove
argument_list|(
name|biggestBufferKey
argument_list|)
decl_stmt|;
name|currentlyWriting
operator|.
name|add
argument_list|(
name|biggestBufferKey
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
name|void
name|doneWriting
parameter_list|(
name|RegionEntryBuffer
name|buffer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|removed
init|=
name|currentlyWriting
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|encodedRegionName
argument_list|)
decl_stmt|;
assert|assert
name|removed
assert|;
block|}
name|long
name|size
init|=
name|buffer
operator|.
name|heapSize
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|controller
operator|.
name|dataAvailable
init|)
block|{
name|totalBuffered
operator|-=
name|size
expr_stmt|;
comment|// We may unblock writers
name|controller
operator|.
name|dataAvailable
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|synchronized
name|boolean
name|isRegionCurrentlyWriting
parameter_list|(
name|byte
index|[]
name|region
parameter_list|)
block|{
return|return
name|currentlyWriting
operator|.
name|contains
argument_list|(
name|region
argument_list|)
return|;
block|}
comment|/**    * A buffer of some number of edits for a given region.    * This accumulates edits and also provides a memory optimization in order to    * share a single byte array instance for the table and region name.    * Also tracks memory usage of the accumulated edits.    */
specifier|static
class|class
name|RegionEntryBuffer
implements|implements
name|HeapSize
block|{
specifier|private
name|long
name|heapInBuffer
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WAL
operator|.
name|Entry
argument_list|>
name|entryBuffer
decl_stmt|;
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodedRegionName
decl_stmt|;
name|RegionEntryBuffer
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|entryBuffer
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|long
name|appendEntry
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|internify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryBuffer
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// TODO linkedlist entry
name|long
name|incrHeap
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
comment|// WALKey pointers
name|heapInBuffer
operator|+=
name|incrHeap
expr_stmt|;
return|return
name|incrHeap
return|;
block|}
specifier|private
name|void
name|internify
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|WALKeyImpl
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|k
operator|.
name|internTableName
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|k
operator|.
name|internEncodedRegionName
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|heapInBuffer
return|;
block|}
specifier|public
name|byte
index|[]
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|encodedRegionName
return|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
block|}
block|}
end_class

end_unit

