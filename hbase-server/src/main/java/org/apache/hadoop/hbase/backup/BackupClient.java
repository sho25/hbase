begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BACKUP_COMMAND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Backup HBase tables locally or on a remote cluster Serve as client entry point for the following  * features: - Full Backup provide local and remote back/restore for a list of tables - Incremental  * backup to build on top of full backup as daily/weekly backup - Convert incremental backup WAL  * files into hfiles - Merge several backup images into one(like merge weekly into monthly) - Add  * and remove table to and from Backup image - Cancel a backup process - Full backup based on  * existing snapshot - Describe information of a backup image  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|BackupClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Options
name|opt
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|BackupClient
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|// define supported options
name|opt
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
literal|"all"
argument_list|,
literal|false
argument_list|,
literal|"All tables"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"Enable debug loggings"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
literal|"t"
argument_list|,
literal|true
argument_list|,
literal|"Table name"
argument_list|)
expr_stmt|;
comment|// create configuration instance
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
comment|// disable irrelevant loggers to avoid it mess up command output
name|disableUselessLoggers
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|parseAndRun
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the configuration from a given one.    * @param newConf A new given configuration    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|setConf
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
name|conf
operator|=
name|newConf
expr_stmt|;
name|BackupUtil
operator|.
name|setConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|BackupUtil
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|private
specifier|static
name|void
name|disableUselessLoggers
parameter_list|()
block|{
comment|// disable zookeeper log to avoid it mess up command output
name|Logger
name|zkLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.zookeeper"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Zookeeper log level before set: "
operator|+
name|zkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|zkLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Zookeeper log level after set: "
operator|+
name|zkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable hbase zookeeper tool log to avoid it mess up command output
name|Logger
name|hbaseZkLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.zookeeper"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase zookeeper log level before set: "
operator|+
name|hbaseZkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseZkLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase Zookeeper log level after set: "
operator|+
name|hbaseZkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable hbase client log to avoid it mess up command output
name|Logger
name|hbaseClientLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.client"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase client log level before set: "
operator|+
name|hbaseClientLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseClientLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase client log level after set: "
operator|+
name|hbaseClientLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|parseAndRun
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cmd
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|remainArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|BackupCommands
operator|.
name|createCommand
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_COMMAND
operator|.
name|HELP
argument_list|,
literal|null
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|remainArgs
operator|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|remainArgs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|CommandLine
name|cmdline
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmdline
operator|=
operator|new
name|PosixParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opt
argument_list|,
name|remainArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|BACKUP_COMMAND
name|type
init|=
name|BACKUP_COMMAND
operator|.
name|HELP
decl_stmt|;
if|if
condition|(
name|BACKUP_COMMAND
operator|.
name|CREATE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BACKUP_COMMAND
operator|.
name|CREATE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BACKUP_COMMAND
operator|.
name|HELP
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BACKUP_COMMAND
operator|.
name|HELP
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unsupported command for backup: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|// enable debug logging
name|Logger
name|backupClientLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.backup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
literal|"debug"
argument_list|)
condition|)
block|{
name|backupClientLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backupClientLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
name|BackupCommands
operator|.
name|createCommand
argument_list|(
name|type
argument_list|,
name|cmdline
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**    * Send backup request to server, and monitor the progress if necessary    * @param backupType : full or incremental    * @param backupRootPath : the rooPath specified by user    * @param tableListStr : the table list specified by user    * @param snapshot : using existing snapshot if specified by user (in future jira)    * @return backupId backup id    * @throws IOException exception    * @throws KeeperException excpetion    */
specifier|public
specifier|static
name|String
name|create
parameter_list|(
name|String
name|backupType
parameter_list|,
name|String
name|backupRootPath
parameter_list|,
name|String
name|tableListStr
parameter_list|,
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|backupId
init|=
name|BackupRestoreConstants
operator|.
name|BACKUPID_PREFIX
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// check target path first, confirm it doesn't exist before backup
name|boolean
name|isTargetExist
init|=
literal|false
decl_stmt|;
try|try
block|{
name|isTargetExist
operator|=
name|HBackupFileSystem
operator|.
name|checkPathExist
argument_list|(
name|backupRootPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|expMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|newMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expMsg
operator|.
name|contains
argument_list|(
literal|"No FileSystem for scheme"
argument_list|)
condition|)
block|{
name|newMsg
operator|=
literal|"Unsupported filesystem scheme found in the backup target url. Error Message: "
operator|+
name|newMsg
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|newMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|newMsg
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|isTargetExist
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using existing backup root dir: "
operator|+
name|backupRootPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup root dir "
operator|+
name|backupRootPath
operator|+
literal|" does not exist. Will be created."
argument_list|)
expr_stmt|;
block|}
comment|// table list specified for backup, trigger backup on specified tables
name|String
name|tableList
init|=
name|tableListStr
decl_stmt|;
comment|// (tableListStr == null) ? null : tableListStr.replaceAll(
comment|// BackupRestoreConstants.TABLENAME_DELIMITER_IN_COMMAND,
comment|// BackupRestoreConstants.TABLENAME_DELIMITER_IN_ZNODE);
try|try
block|{
name|requestBackup
argument_list|(
name|backupId
argument_list|,
name|backupType
argument_list|,
name|tableList
argument_list|,
name|backupRootPath
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|!=
literal|null
operator|&&
operator|(
name|errMsg
operator|.
name|startsWith
argument_list|(
literal|"Non-existing tables found"
argument_list|)
operator|||
name|errMsg
operator|.
name|startsWith
argument_list|(
literal|"Snapshot is not found"
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
operator|+
literal|", please check your command"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|backupId
return|;
block|}
comment|/**    * Prepare and submit Backup request    * @param backupId : backup_timestame (something like backup_1398729212626)    * @param backupType : full or incremental    * @param tableList : tables to be backuped    * @param targetRootDir : specified by user    * @param snapshot : use existing snapshot if specified by user (for future jira)    * @throws IOException exception    */
specifier|protected
specifier|static
name|void
name|requestBackup
parameter_list|(
name|String
name|backupId
parameter_list|,
name|String
name|backupType
parameter_list|,
name|String
name|tableList
parameter_list|,
name|String
name|targetRootDir
parameter_list|,
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|BackupManager
name|backupManager
init|=
literal|null
decl_stmt|;
name|BackupContext
name|backupContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot option specified, backup type and table option will be ignored,\n"
operator|+
literal|"full backup will be taken based on the given snapshot."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"backup using existing Snapshot will be implemented in future jira"
argument_list|)
throw|;
block|}
name|HBaseAdmin
name|hbadmin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|backupManager
operator|=
operator|new
name|BackupManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|tables
init|=
name|tableList
decl_stmt|;
if|if
condition|(
name|backupType
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|incrTableSet
init|=
name|backupManager
operator|.
name|getIncrementalBackupTableSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|incrTableSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incremental backup table set contains no table.\n"
operator|+
literal|"Use 'backup create full' or 'backup stop' to \n "
operator|+
literal|"change the tables covered by incremental backup."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No table covered by incremental backup."
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|incrTableSet
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|tableName
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental backup for the following table set: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tables
operator|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
expr_stmt|;
block|}
comment|// check whether table exists first before starting real request
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|tableNames
init|=
name|tables
operator|.
name|split
argument_list|(
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|noneExistingTableList
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hbadmin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
operator|!
name|hbadmin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|noneExistingTableList
operator|==
literal|null
condition|)
block|{
name|noneExistingTableList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|noneExistingTableList
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|noneExistingTableList
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|backupType
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incremental backup table set contains no-exising table: "
operator|+
name|noneExistingTableList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Throw exception only in full mode - we try to backup non-existing table
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Non-existing tables found in the table list: "
operator|+
name|noneExistingTableList
argument_list|)
throw|;
block|}
block|}
block|}
comment|// if any target table backup dir already exist, then no backup action taken
name|String
index|[]
name|tableNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
operator|!
name|tables
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|tableNames
operator|=
name|tables
operator|.
name|split
argument_list|(
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableNames
operator|!=
literal|null
operator|&&
name|tableNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|table
range|:
name|tableNames
control|)
block|{
name|String
name|targetTableBackupDir
init|=
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|targetRootDir
argument_list|,
name|backupId
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|targetTableBackupDirPath
init|=
operator|new
name|Path
argument_list|(
name|targetTableBackupDir
argument_list|)
decl_stmt|;
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|targetTableBackupDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFs
operator|.
name|exists
argument_list|(
name|targetTableBackupDirPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target backup directory "
operator|+
name|targetTableBackupDir
operator|+
literal|" exists already."
argument_list|)
throw|;
block|}
block|}
block|}
name|backupContext
operator|=
name|backupManager
operator|.
name|createBackupContext
argument_list|(
name|backupId
argument_list|,
name|backupType
argument_list|,
name|tables
argument_list|,
name|targetRootDir
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|backupManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|backupManager
operator|.
name|dispatchRequest
argument_list|(
name|backupContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackupException
name|e
parameter_list|)
block|{
comment|// suppress the backup exception wrapped within #initialize or #dispatchRequest, backup
comment|// exception has already been handled normally
name|StackTraceElement
index|[]
name|stes
init|=
name|e
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|stes
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|ste
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Backup Exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hbadmin
operator|!=
literal|null
condition|)
block|{
name|hbadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

