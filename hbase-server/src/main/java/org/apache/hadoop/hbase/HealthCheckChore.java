begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HealthChecker
operator|.
name|HealthCheckerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Class HealthCheckChore for running health checker regularly.  */
end_comment

begin_class
specifier|public
class|class
name|HealthCheckChore
extends|extends
name|ScheduledChore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HealthCheckChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HealthChecker
name|healthChecker
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|private
name|int
name|threshold
decl_stmt|;
specifier|private
name|int
name|numTimesUnhealthy
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|failureWindow
decl_stmt|;
specifier|private
name|long
name|startWindow
decl_stmt|;
specifier|public
name|HealthCheckChore
parameter_list|(
name|int
name|sleepTime
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
literal|"HealthChecker"
argument_list|,
name|stopper
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Health Check Chore runs every "
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|sleepTime
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|String
name|healthCheckScript
init|=
name|this
operator|.
name|config
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HEALTH_SCRIPT_LOC
argument_list|)
decl_stmt|;
name|long
name|scriptTimeout
init|=
name|this
operator|.
name|config
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HEALTH_SCRIPT_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HEALTH_SCRIPT_TIMEOUT
argument_list|)
decl_stmt|;
name|healthChecker
operator|=
operator|new
name|HealthChecker
argument_list|()
expr_stmt|;
name|healthChecker
operator|.
name|init
argument_list|(
name|healthCheckScript
argument_list|,
name|scriptTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HEALTH_FAILURE_THRESHOLD
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HEALTH_FAILURE_THRESHOLD
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureWindow
operator|=
operator|(
name|long
operator|)
name|this
operator|.
name|threshold
operator|*
operator|(
name|long
operator|)
name|sleepTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|HealthReport
name|report
init|=
name|healthChecker
operator|.
name|checkHealth
argument_list|()
decl_stmt|;
name|boolean
name|isHealthy
init|=
operator|(
name|report
operator|.
name|getStatus
argument_list|()
operator|==
name|HealthCheckerExitStatus
operator|.
name|SUCCESS
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isHealthy
condition|)
block|{
name|boolean
name|needToStop
init|=
name|decideToStop
argument_list|()
decl_stmt|;
if|if
condition|(
name|needToStop
condition|)
block|{
name|this
operator|.
name|getStopper
argument_list|()
operator|.
name|stop
argument_list|(
literal|"The  node reported unhealthy "
operator|+
name|threshold
operator|+
literal|" number of times consecutively."
argument_list|)
expr_stmt|;
block|}
comment|// Always log health report.
name|LOG
operator|.
name|info
argument_list|(
literal|"Health status at "
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|" : "
operator|+
name|report
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|decideToStop
parameter_list|()
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|numTimesUnhealthy
operator|==
literal|0
condition|)
block|{
comment|// First time we are seeing a failure. No need to stop, just
comment|// record the time.
name|numTimesUnhealthy
operator|++
expr_stmt|;
name|startWindow
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWindow
operator|)
operator|<
name|failureWindow
condition|)
block|{
name|numTimesUnhealthy
operator|++
expr_stmt|;
if|if
condition|(
name|numTimesUnhealthy
operator|==
name|threshold
condition|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|stop
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Outside of failure window, so we reset to 1.
name|numTimesUnhealthy
operator|=
literal|1
expr_stmt|;
name|startWindow
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|stop
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|stop
return|;
block|}
block|}
end_class

end_unit

