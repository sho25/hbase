begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|StripeCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|StripeCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionThroughputController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The storage engine that implements the stripe-based store/compaction scheme.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|StripeStoreEngine
extends|extends
name|StoreEngine
argument_list|<
name|StripeStoreFlusher
argument_list|,
name|StripeCompactionPolicy
argument_list|,
name|StripeCompactor
argument_list|,
name|StripeStoreFileManager
argument_list|>
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StripeStoreEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|StripeStoreConfig
name|config
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|needsCompaction
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
block|{
return|return
name|this
operator|.
name|compactionPolicy
operator|.
name|needsCompactions
argument_list|(
name|this
operator|.
name|storeFileManager
argument_list|,
name|filesCompacting
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionContext
name|createCompaction
parameter_list|()
block|{
return|return
operator|new
name|StripeCompaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createComponents
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Store
name|store
parameter_list|,
name|KVComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|StripeStoreConfig
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactionPolicy
operator|=
operator|new
name|StripeCompactionPolicy
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeFileManager
operator|=
operator|new
name|StripeStoreFileManager
argument_list|(
name|comparator
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|storeFlusher
operator|=
operator|new
name|StripeStoreFlusher
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|this
operator|.
name|compactionPolicy
argument_list|,
name|this
operator|.
name|storeFileManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactor
operator|=
operator|new
name|StripeCompactor
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
comment|/**    * Represents one instance of stripe compaction, with the necessary context and flow.    */
specifier|private
class|class
name|StripeCompaction
extends|extends
name|CompactionContext
block|{
specifier|private
name|StripeCompactionPolicy
operator|.
name|StripeCompactionRequest
name|stripeRequest
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|preSelect
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
block|{
return|return
name|compactionPolicy
operator|.
name|preSelectFilesForCoprocessor
argument_list|(
name|storeFileManager
argument_list|,
name|filesCompacting
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|select
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|,
name|boolean
name|isUserCompaction
parameter_list|,
name|boolean
name|mayUseOffPeak
parameter_list|,
name|boolean
name|forceMajor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|stripeRequest
operator|=
name|compactionPolicy
operator|.
name|selectCompaction
argument_list|(
name|storeFileManager
argument_list|,
name|filesCompacting
argument_list|,
name|mayUseOffPeak
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|=
operator|(
name|this
operator|.
name|stripeRequest
operator|==
literal|null
operator|)
condition|?
operator|new
name|CompactionRequest
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
argument_list|)
else|:
name|this
operator|.
name|stripeRequest
operator|.
name|getRequest
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|stripeRequest
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forceSelect
parameter_list|(
name|CompactionRequest
name|request
parameter_list|)
block|{
name|super
operator|.
name|forceSelect
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stripeRequest
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stripeRequest
operator|.
name|setRequest
argument_list|(
name|this
operator|.
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stripe store is forced to take an arbitrary file list and compact it."
argument_list|)
expr_stmt|;
name|this
operator|.
name|stripeRequest
operator|=
name|compactionPolicy
operator|.
name|createEmptyRequest
argument_list|(
name|storeFileManager
argument_list|,
name|this
operator|.
name|request
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|CompactionThroughputController
name|throughputController
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|stripeRequest
operator|!=
literal|null
argument_list|,
literal|"Cannot compact without selection"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|stripeRequest
operator|.
name|execute
argument_list|(
name|compactor
argument_list|,
name|throughputController
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

