begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Maintains lists of permission grants to users and groups to allow for  * authorization checks by {@link AccessController}.  *  *<p>  * Access control lists are stored in an "internal" metadata table named  * {@code _acl_}. Each table's permission grants are stored as a separate row,  * keyed by the table name. KeyValues for permissions assignments are stored  * in one of the formats:  *<pre>  * Key                      Desc  * --------                 --------  * user                     table level permissions for a user [R=read, W=write]  * group                    table level permissions for a group  * user,family              column family level permissions for a user  * group,family             column family level permissions for a group  * user,family,qualifier    column qualifier level permissions for a user  * group,family,qualifier   column qualifier level permissions for a group  *</pre>  *<p>  * All values are encoded as byte arrays containing the codes from the  * org.apache.hadoop.hbase.security.access.TablePermission.Action enum.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AccessControlLists
block|{
comment|/** Internal storage table for access control lists */
specifier|public
specifier|static
specifier|final
name|TableName
name|ACL_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"acl"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ACL_GLOBAL_NAME
init|=
name|ACL_TABLE_NAME
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/** Column family used to store ACL grants */
specifier|public
specifier|static
specifier|final
name|String
name|ACL_LIST_FAMILY_STR
init|=
literal|"l"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ACL_LIST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ACL_LIST_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** KV tag to store per cell access control lists */
specifier|public
specifier|static
specifier|final
name|byte
name|ACL_TAG_TYPE
init|=
name|TagType
operator|.
name|ACL_TAG_TYPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|NAMESPACE_PREFIX
init|=
literal|'@'
decl_stmt|;
comment|/**    * Delimiter to separate user, column family, and qualifier in    * _acl_ table info: column keys */
specifier|public
specifier|static
specifier|final
name|char
name|ACL_KEY_DELIMITER
init|=
literal|','
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AccessControlLists
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create the ACL table    * @param master    * @throws IOException    */
specifier|static
name|void
name|createACLTable
parameter_list|(
name|MasterServices
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|master
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
comment|// Set cache data blocks in L1 if more than one cache tier deployed; e.g. this will
comment|// be the case if we are using CombinedBlockCache (Bucket Cache).
operator|.
name|setCacheDataInL1
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stores a new user permission grant in the access control lists table.    * @param conf the configuration    * @param userPerm the details of the permission to be granted    * @throws IOException in the case of an error accessing the metadata table    */
specifier|static
name|void
name|addUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|userPerm
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|userPermissionRowKey
argument_list|(
name|userPerm
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|userPermissionKey
argument_list|(
name|userPerm
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|actions
operator|==
literal|null
operator|)
operator|||
operator|(
name|actions
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"No actions associated with user '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|userPerm
operator|.
name|getUser
argument_list|()
argument_list|)
operator|+
literal|"'"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|value
index|[
name|i
index|]
operator|=
name|actions
index|[
name|i
index|]
operator|.
name|code
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|addImmutable
argument_list|(
name|ACL_LIST_FAMILY
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing permission with rowKey "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKey
argument_list|)
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
operator|+
literal|": "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Removes a previously granted permission from the stored access control    * lists.  The {@link TablePermission} being removed must exactly match what    * is stored -- no wildcard matching is attempted.  Ie, if user "bob" has    * been granted "READ" access to the "data" table, but only to column family    * plus qualifier "info:colA", then trying to call this method with only    * user "bob" and the table name "data" (but without specifying the    * column qualifier "info:colA") will have no effect.    *    * @param conf the configuration    * @param userPerm the details of the permission to be revoked    * @throws IOException if there is an error accessing the metadata table    */
specifier|static
name|void
name|removeUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|userPermissionRowKey
argument_list|(
name|userPerm
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|userPermissionKey
argument_list|(
name|userPerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permission "
operator|+
name|userPerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|.
name|addColumns
argument_list|(
name|ACL_LIST_FAMILY
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove specified table from the _acl_ table.    */
specifier|static
name|void
name|removeTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove specified namespace from the acl table.    */
specifier|static
name|void
name|removeNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed namespace "
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove specified table column from the acl table.    */
specifier|static
name|void
name|removeTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed column "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|column
argument_list|)
operator|+
literal|" from table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|String
name|columnName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%s%s%s)|(%s%s)$"
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|columnName
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|columnName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifierSet
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|res
range|:
name|scanner
control|)
block|{
for|for
control|(
name|byte
index|[]
name|q
range|:
name|res
operator|.
name|getFamilyMap
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
operator|.
name|navigableKeySet
argument_list|()
control|)
block|{
name|qualifierSet
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qualifierSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifierSet
control|)
block|{
name|d
operator|.
name|addColumns
argument_list|(
name|ACL_LIST_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|byte
index|[]
name|userPermissionRowKey
parameter_list|(
name|UserPermission
name|userPerm
parameter_list|)
block|{
name|byte
index|[]
name|row
decl_stmt|;
if|if
condition|(
name|userPerm
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|userPerm
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userPerm
operator|.
name|isGlobal
argument_list|()
condition|)
block|{
name|row
operator|=
name|ACL_GLOBAL_NAME
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
name|userPerm
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
comment|/**    * Build qualifier key from user permission:    *  username    *  username,family    *  username,family,qualifier    */
specifier|static
name|byte
index|[]
name|userPermissionKey
parameter_list|(
name|UserPermission
name|userPerm
parameter_list|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|userPerm
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|userPerm
operator|.
name|getFamily
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|userPerm
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|family
operator|!=
literal|null
operator|&&
name|family
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|key
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
name|ACL_KEY_DELIMITER
block|}
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
operator|&&
name|qualifier
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|key
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
name|ACL_KEY_DELIMITER
block|}
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|key
return|;
block|}
comment|/**    * Returns {@code true} if the given region is part of the {@code _acl_}    * metadata table.    */
specifier|static
name|boolean
name|isAclRegion
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
name|ACL_TABLE_NAME
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if the given table is {@code _acl_} metadata table.    */
specifier|static
name|boolean
name|isAclTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|ACL_TABLE_NAME
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Loads all of the permission grants stored in a region of the {@code _acl_}    * table.    *    * @param aclRegion    * @return a map of the permissions for this table.    * @throws IOException    */
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|loadAll
parameter_list|(
name|Region
name|aclRegion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isAclRegion
argument_list|(
name|aclRegion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can only load permissions from "
operator|+
name|ACL_TABLE_NAME
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|allPerms
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|// do a full scan of _acl_ table
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|InternalScanner
name|iScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iScanner
operator|=
name|aclRegion
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|iScanner
operator|.
name|next
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|byte
index|[]
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|row
control|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|permissionsOfUserOnTable
init|=
name|parsePermissionRecord
argument_list|(
name|entry
argument_list|,
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissionsOfUserOnTable
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
name|permissionsOfUserOnTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|TablePermission
name|permissions
init|=
name|permissionsOfUserOnTable
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|allPerms
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|iScanner
operator|!=
literal|null
condition|)
block|{
name|iScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allPerms
return|;
block|}
comment|/**    * Load all permissions from the region server holding {@code _acl_},    * primarily intended for testing purposes.    */
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|loadAll
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|allPerms
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|// do a full scan of _acl_, filtering on only first table region rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|row
range|:
name|scanner
control|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|resultPerms
init|=
name|parsePermissions
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|allPerms
operator|.
name|put
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|resultPerms
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|allPerms
return|;
block|}
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|getTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|tableName
operator|!=
literal|null
condition|?
name|tableName
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|getNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reads user permission assignments stored in the<code>l:</code> column    * family of the first table row in<code>_acl_</code>.    *    *<p>    * See {@link AccessControlLists class documentation} for the key structure    * used for storage.    *</p>    */
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|getPermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|entryName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entryName
operator|==
literal|null
condition|)
name|entryName
operator|=
name|ACL_GLOBAL_NAME
expr_stmt|;
comment|// for normal user tables, we just read the table row from _acl_
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|row
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|perms
operator|=
name|parsePermissions
argument_list|(
name|entryName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No permissions found in "
operator|+
name|ACL_TABLE_NAME
operator|+
literal|" for acl entry "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entryName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Returns the currently granted permissions for a given table as a list of    * user plus associated permissions.    */
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|entryName
parameter_list|)
throws|throws
name|IOException
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|allPerms
init|=
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|entryName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNamespaceEntry
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
comment|// Namespace
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|allPerms
operator|.
name|entries
argument_list|()
control|)
block|{
name|UserPermission
name|up
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Table
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|allPerms
operator|.
name|entries
argument_list|()
control|)
block|{
name|UserPermission
name|up
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perms
return|;
block|}
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|parsePermissions
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|permissionsOfUserOnTable
init|=
name|parsePermissionRecord
argument_list|(
name|entryName
argument_list|,
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissionsOfUserOnTable
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
name|permissionsOfUserOnTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|TablePermission
name|permissions
init|=
name|permissionsOfUserOnTable
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|perms
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|parsePermissionRecord
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|,
name|Cell
name|kv
parameter_list|)
block|{
comment|// return X given a set of permissions encoded in the permissionRecord kv.
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|ACL_LIST_FAMILY
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|key
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read acl: kv ["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
argument_list|)
operator|+
literal|": "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// check for a column family appended to the key
comment|// TODO: avoid the string conversion to make this more efficient
name|String
name|username
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//Handle namespace entry
if|if
condition|(
name|isNamespaceEntry
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|(
name|username
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fromNamespaceEntry
argument_list|(
name|entryName
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|//Handle table and global entry
comment|//TODO global entry should be handled differently
name|int
name|idx
init|=
name|username
operator|.
name|indexOf
argument_list|(
name|ACL_KEY_DELIMITER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|permFamily
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|permQualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|idx
operator|<
name|username
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|String
name|remainder
init|=
name|username
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|username
operator|=
name|username
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|idx
operator|=
name|remainder
operator|.
name|indexOf
argument_list|(
name|ACL_KEY_DELIMITER
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|idx
operator|<
name|remainder
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|permFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|permQualifier
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|(
name|username
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entryName
argument_list|)
argument_list|,
name|permFamily
argument_list|,
name|permQualifier
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Writes a set of permissions as {@link org.apache.hadoop.io.Writable} instances    * and returns the resulting byte array.    *    * Writes a set of permission [user: table permission]    */
specifier|public
specifier|static
name|byte
index|[]
name|writePermissionsAsBytes
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|ProtobufUtil
operator|.
name|toUserTablePermissions
argument_list|(
name|perms
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reads a set of permissions as {@link org.apache.hadoop.io.Writable} instances    * from the input stream.    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|readPermissions
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|data
argument_list|,
name|pblen
argument_list|,
name|data
operator|.
name|length
operator|-
name|pblen
argument_list|)
expr_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toUserTablePermissions
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|user
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|userPerms
init|=
operator|(
name|List
operator|)
name|HbaseObjectWritableFor96Migration
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|perms
operator|.
name|putAll
argument_list|(
name|user
argument_list|,
name|userPerms
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|perms
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isNamespaceEntry
parameter_list|(
name|String
name|entryName
parameter_list|)
block|{
return|return
name|entryName
operator|!=
literal|null
operator|&&
name|entryName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|NAMESPACE_PREFIX
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNamespaceEntry
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|)
block|{
return|return
name|entryName
operator|!=
literal|null
operator|&&
name|entryName
operator|.
name|length
operator|!=
literal|0
operator|&&
name|entryName
index|[
literal|0
index|]
operator|==
name|NAMESPACE_PREFIX
return|;
block|}
specifier|public
specifier|static
name|String
name|toNamespaceEntry
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|NAMESPACE_PREFIX
operator|+
name|namespace
return|;
block|}
specifier|public
specifier|static
name|String
name|fromNamespaceEntry
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
name|NAMESPACE_PREFIX
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument is not a valid namespace entry"
argument_list|)
throw|;
return|return
name|namespace
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|toNamespaceEntry
parameter_list|(
name|byte
index|[]
name|namespace
parameter_list|)
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|namespace
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|NAMESPACE_PREFIX
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespace
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|1
argument_list|,
name|namespace
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|fromNamespaceEntry
parameter_list|(
name|byte
index|[]
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
index|[
literal|0
index|]
operator|!=
name|NAMESPACE_PREFIX
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument is not a valid namespace entry: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|namespace
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|namespace
argument_list|,
literal|1
argument_list|,
name|namespace
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Permission
argument_list|>
name|getCellPermissionsForUser
parameter_list|(
name|User
name|user
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Save an object allocation where we can
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Permission
argument_list|>
name|results
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
init|=
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|ACL_TAG_TYPE
condition|)
block|{
comment|// Deserialize the table permissions from the KV
comment|// TODO: This can be improved. Don't build UsersAndPermissions just to unpack it again,
comment|// use the builder
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|tag
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|tag
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|tag
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|TagUtil
operator|.
name|cloneValue
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|kvPerms
init|=
name|ProtobufUtil
operator|.
name|toUsersAndPermissions
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// Are there permissions for this user?
name|List
argument_list|<
name|Permission
argument_list|>
name|userPerms
init|=
name|kvPerms
operator|.
name|get
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPerms
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|userPerms
argument_list|)
expr_stmt|;
block|}
comment|// Are there permissions for any of the groups this user belongs to?
name|String
name|groupNames
index|[]
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groupNames
control|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|groupPerms
init|=
name|kvPerms
operator|.
name|get
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|groupPerms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

