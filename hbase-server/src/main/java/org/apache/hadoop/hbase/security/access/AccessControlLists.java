begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Maintains lists of permission grants to users and groups to allow for  * authorization checks by {@link AccessController}.  *  *<p>  * Access control lists are stored in an "internal" metadata table named  * {@code _acl_}. Each table's permission grants are stored as a separate row,  * keyed by the table name. KeyValues for permissions assignments are stored  * in one of the formats:  *<pre>  * Key                      Desc  * --------                 --------  * user                     table level permissions for a user [R=read, W=write]  * group                    table level permissions for a group  * user,family              column family level permissions for a user  * group,family             column family level permissions for a group  * user,family,qualifier    column qualifier level permissions for a user  * group,family,qualifier   column qualifier level permissions for a group  *</pre>  *<p>  * All values are encoded as byte arrays containing the codes from the  * org.apache.hadoop.hbase.security.access.TablePermission.Action enum.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AccessControlLists
block|{
comment|/** Internal storage table for access control lists */
specifier|public
specifier|static
specifier|final
name|TableName
name|ACL_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"acl"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ACL_GLOBAL_NAME
init|=
name|ACL_TABLE_NAME
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/** Column family used to store ACL grants */
specifier|public
specifier|static
specifier|final
name|String
name|ACL_LIST_FAMILY_STR
init|=
literal|"l"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ACL_LIST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ACL_LIST_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** KV tag to store per cell access control lists */
specifier|public
specifier|static
specifier|final
name|byte
name|ACL_TAG_TYPE
init|=
name|TagType
operator|.
name|ACL_TAG_TYPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|NAMESPACE_PREFIX
init|=
literal|'@'
decl_stmt|;
comment|/**    * Delimiter to separate user, column family, and qualifier in    * _acl_ table info: column keys */
specifier|public
specifier|static
specifier|final
name|char
name|ACL_KEY_DELIMITER
init|=
literal|','
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccessControlLists
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Stores a new user permission grant in the access control lists table.    * @param conf the configuration    * @param userPerm the details of the permission to be granted    * @param t acl table instance. It is closed upon method return.    * @throws IOException in the case of an error accessing the metadata table    */
specifier|public
specifier|static
name|void
name|addUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|,
name|Table
name|t
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
name|permission
init|=
name|userPerm
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|permission
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|userPermissionRowKey
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|userPermissionKey
argument_list|(
name|userPerm
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|actions
operator|==
literal|null
operator|)
operator|||
operator|(
name|actions
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"No actions associated with user '"
operator|+
name|userPerm
operator|.
name|getUser
argument_list|()
operator|+
literal|"'"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actionSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeExistingPermissions
condition|)
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|rowKey
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UserPermission
name|currentPerm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|UserPermission
name|perm
range|:
name|perms
control|)
block|{
if|if
condition|(
name|userPerm
operator|.
name|equalsExceptActions
argument_list|(
name|perm
argument_list|)
condition|)
block|{
name|currentPerm
operator|=
name|perm
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|currentPerm
operator|!=
literal|null
operator|&&
name|currentPerm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actionSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|currentPerm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// merge current action with new action.
name|actionSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
comment|// serialize to byte array.
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|actionSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|action
range|:
name|actionSet
control|)
block|{
name|value
index|[
name|index
operator|++
index|]
operator|=
name|action
operator|.
name|code
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|key
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing permission with rowKey "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKey
argument_list|)
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
operator|+
literal|": "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|addUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|addUserPermission
argument_list|(
name|conf
argument_list|,
name|userPerm
argument_list|,
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes a previously granted permission from the stored access control    * lists.  The {@link TablePermission} being removed must exactly match what    * is stored -- no wildcard matching is attempted.  Ie, if user "bob" has    * been granted "READ" access to the "data" table, but only to column family    * plus qualifier "info:colA", then trying to call this method with only    * user "bob" and the table name "data" (but without specifying the    * column qualifier "info:colA") will have no effect.    *    * @param conf the configuration    * @param userPerm the details of the permission to be revoked    * @param t acl table    * @throws IOException if there is an error accessing the metadata table    */
specifier|public
specifier|static
name|void
name|removeUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|userPerm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
operator|||
name|userPerm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|removePermissionRecord
argument_list|(
name|conf
argument_list|,
name|userPerm
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Get all the global user permissions from the acl table
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permsList
init|=
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|userPermissionRowKey
argument_list|(
name|userPerm
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|remainingActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|dropActions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|userPerm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|UserPermission
name|perm
range|:
name|permsList
control|)
block|{
comment|// Find the user and remove only the requested permissions
if|if
condition|(
name|perm
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|userPerm
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|oldAction
range|:
name|perm
operator|.
name|getPermission
argument_list|()
operator|.
name|getActions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dropActions
operator|.
name|contains
argument_list|(
name|oldAction
argument_list|)
condition|)
block|{
name|remainingActions
operator|.
name|add
argument_list|(
name|oldAction
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingActions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|perm
operator|.
name|getPermission
argument_list|()
operator|.
name|setActions
argument_list|(
name|remainingActions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|remainingActions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
name|perm
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removePermissionRecord
argument_list|(
name|conf
argument_list|,
name|userPerm
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed permission "
operator|+
name|userPerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|removePermissionRecord
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|userPermissionRowKey
argument_list|(
name|userPerm
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|ACL_LIST_FAMILY
argument_list|,
name|userPermissionKey
argument_list|(
name|userPerm
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove specified table from the _acl_ table.    */
specifier|static
name|void
name|removeTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove specified namespace from the acl table.    */
specifier|static
name|void
name|removeNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed namespace "
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|private
name|void
name|removeTablePermissions
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Table
name|table
parameter_list|,
name|boolean
name|closeTable
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|String
name|columnName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%s%s%s)|(%s%s)$"
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|columnName
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|ACL_KEY_DELIMITER
argument_list|,
name|columnName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifierSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|scanner
control|)
block|{
for|for
control|(
name|byte
index|[]
name|q
range|:
name|res
operator|.
name|getFamilyMap
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
operator|.
name|navigableKeySet
argument_list|()
control|)
block|{
name|qualifierSet
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qualifierSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifierSet
control|)
block|{
name|d
operator|.
name|addColumns
argument_list|(
name|ACL_LIST_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|closeTable
condition|)
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove specified table column from the acl table.    */
specifier|static
name|void
name|removeTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing permissions of removed column "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|column
argument_list|)
operator|+
literal|" from table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|removeTablePermissions
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|byte
index|[]
name|userPermissionRowKey
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
name|byte
index|[]
name|row
decl_stmt|;
if|if
condition|(
name|permission
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|tablePerm
init|=
operator|(
name|TablePermission
operator|)
name|permission
decl_stmt|;
name|row
operator|=
name|tablePerm
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|permission
operator|instanceof
name|NamespacePermission
condition|)
block|{
name|NamespacePermission
name|nsPerm
init|=
operator|(
name|NamespacePermission
operator|)
name|permission
decl_stmt|;
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|nsPerm
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// permission instanceof TablePermission
name|row
operator|=
name|ACL_GLOBAL_NAME
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
comment|/**    * Build qualifier key from user permission:    *  username    *  username,family    *  username,family,qualifier    */
specifier|static
name|byte
index|[]
name|userPermissionKey
parameter_list|(
name|UserPermission
name|permission
parameter_list|)
block|{
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|permission
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|getPermission
argument_list|()
operator|.
name|getAccessScope
argument_list|()
operator|==
name|Permission
operator|.
name|Scope
operator|.
name|TABLE
condition|)
block|{
name|TablePermission
name|tablePermission
init|=
operator|(
name|TablePermission
operator|)
name|permission
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|family
operator|=
name|tablePermission
operator|.
name|getFamily
argument_list|()
expr_stmt|;
name|qualifier
operator|=
name|tablePermission
operator|.
name|getQualifier
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|family
operator|!=
literal|null
operator|&&
name|family
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|key
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
name|ACL_KEY_DELIMITER
block|}
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
operator|&&
name|qualifier
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|key
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
name|ACL_KEY_DELIMITER
block|}
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|key
return|;
block|}
comment|/**    * Returns {@code true} if the given region is part of the {@code _acl_}    * metadata table.    */
specifier|static
name|boolean
name|isAclRegion
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
name|ACL_TABLE_NAME
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if the given table is {@code _acl_} metadata table.    */
specifier|static
name|boolean
name|isAclTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|ACL_TABLE_NAME
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Loads all of the permission grants stored in a region of the {@code _acl_}    * table.    *    * @param aclRegion    * @return a map of the permissions for this table.    * @throws IOException    */
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
argument_list|>
name|loadAll
parameter_list|(
name|Region
name|aclRegion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isAclRegion
argument_list|(
name|aclRegion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can only load permissions from "
operator|+
name|ACL_TABLE_NAME
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
argument_list|>
name|allPerms
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|// do a full scan of _acl_ table
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|InternalScanner
name|iScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iScanner
operator|=
name|aclRegion
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|iScanner
operator|.
name|next
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|byte
index|[]
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|row
control|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permissionsOfUserOnTable
init|=
name|parsePermissionRecord
argument_list|(
name|entry
argument_list|,
name|kv
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissionsOfUserOnTable
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
name|permissionsOfUserOnTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Permission
name|permission
init|=
name|permissionsOfUserOnTable
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|username
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|username
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|allPerms
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|iScanner
operator|!=
literal|null
condition|)
block|{
name|iScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allPerms
return|;
block|}
comment|/**    * Load all permissions from the region server holding {@code _acl_},    * primarily intended for testing purposes.    */
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
argument_list|>
name|loadAll
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
argument_list|>
name|allPerms
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|// do a full scan of _acl_, filtering on only first table region rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
comment|// TODO: Pass in a Connection rather than create one each time.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|row
range|:
name|scanner
control|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|resultPerms
init|=
name|parsePermissions
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allPerms
operator|.
name|put
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|resultPerms
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|allPerms
return|;
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|getTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|tableName
operator|!=
literal|null
condition|?
name|tableName
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|getNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Reads user permission assignments stored in the<code>l:</code> column family of the first    * table row in<code>_acl_</code>.    *<p>    * See {@link AccessControlLists class documentation} for the key structure used for storage.    *</p>    */
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|getPermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|entryName
parameter_list|,
name|Table
name|t
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|hasFilterUser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entryName
operator|==
literal|null
condition|)
name|entryName
operator|=
name|ACL_GLOBAL_NAME
expr_stmt|;
comment|// for normal user tables, we just read the table row from _acl_
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|ACL_LIST_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|row
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|row
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|row
operator|=
name|t
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|perms
operator|=
name|parsePermissions
argument_list|(
name|entryName
argument_list|,
name|row
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|,
name|user
argument_list|,
name|hasFilterUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No permissions found in "
operator|+
name|ACL_TABLE_NAME
operator|+
literal|" for acl entry "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entryName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Returns the currently granted permissions for a given table as the specified user plus    * associated permissions.    */
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserTablePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|hasFilterUser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|,
name|userName
argument_list|,
name|hasFilterUser
argument_list|)
return|;
block|}
comment|/**    * Returns the currently granted permissions for a given namespace as the specified user plus    * associated permissions.    */
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserNamespacePermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|hasFilterUser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUserPermissions
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|user
argument_list|,
name|hasFilterUser
argument_list|)
return|;
block|}
comment|/**    * Returns the currently granted permissions for a given table/namespace with associated    * permissions based on the specified column family, column qualifier and user name.    * @param conf the configuration    * @param entryName Table name or the namespace    * @param cf Column family    * @param cq Column qualifier    * @param user User name to be filtered from permission as requested    * @param hasFilterUser true if filter user is provided, otherwise false.    * @return List of UserPermissions    * @throws IOException on failure    */
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|entryName
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|hasFilterUser
parameter_list|)
throws|throws
name|IOException
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|allPerms
init|=
name|getPermissions
argument_list|(
name|conf
argument_list|,
name|entryName
argument_list|,
literal|null
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|,
name|user
argument_list|,
name|hasFilterUser
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|entry
range|:
name|allPerms
operator|.
name|entries
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Parse and filter permission based on the specified column family, column qualifier and user    * name.    */
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|parsePermissions
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|,
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|hasFilterUser
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permissionsOfUserOnTable
init|=
name|parsePermissionRecord
argument_list|(
name|entryName
argument_list|,
name|kv
argument_list|,
name|cf
argument_list|,
name|cq
argument_list|,
name|hasFilterUser
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissionsOfUserOnTable
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
name|permissionsOfUserOnTable
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Permission
name|permission
init|=
name|permissionsOfUserOnTable
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|username
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|username
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|perms
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|parsePermissionRecord
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|,
name|Cell
name|kv
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|,
name|boolean
name|filterPerms
parameter_list|,
name|String
name|filterUser
parameter_list|)
block|{
comment|// return X given a set of permissions encoded in the permissionRecord kv.
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|ACL_LIST_FAMILY
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|key
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read acl: entry["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|entryName
argument_list|)
operator|+
literal|"], kv ["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
argument_list|)
operator|+
literal|": "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// check for a column family appended to the key
comment|// TODO: avoid the string conversion to make this more efficient
name|String
name|username
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Retrieve group list for the filterUser if cell key is a group.
comment|// Group list is not required when filterUser itself a group
name|List
argument_list|<
name|String
argument_list|>
name|filterUserGroups
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filterPerms
condition|)
block|{
if|if
condition|(
name|username
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'@'
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|filterUser
argument_list|)
operator|&&
name|filterUser
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'@'
condition|)
block|{
name|filterUserGroups
operator|=
name|AccessChecker
operator|.
name|getUserGroups
argument_list|(
name|filterUser
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle namespace entry
if|if
condition|(
name|isNamespaceEntry
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
comment|// Filter the permissions cell record if client query
if|if
condition|(
name|filterPerms
operator|&&
operator|!
name|validateFilterUser
argument_list|(
name|username
argument_list|,
name|filterUser
argument_list|,
name|filterUserGroups
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|username
argument_list|,
name|Permission
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fromNamespaceEntry
argument_list|(
name|entryName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withActionCodes
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|// Handle global entry
if|if
condition|(
name|isGlobalEntry
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
comment|// Filter the permissions cell record if client query
if|if
condition|(
name|filterPerms
operator|&&
operator|!
name|validateFilterUser
argument_list|(
name|username
argument_list|,
name|filterUser
argument_list|,
name|filterUserGroups
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|username
argument_list|,
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|withActionCodes
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|// Handle table entry
name|int
name|idx
init|=
name|username
operator|.
name|indexOf
argument_list|(
name|ACL_KEY_DELIMITER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|permFamily
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|permQualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|idx
operator|<
name|username
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|String
name|remainder
init|=
name|username
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|username
operator|=
name|username
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|idx
operator|=
name|remainder
operator|.
name|indexOf
argument_list|(
name|ACL_KEY_DELIMITER
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|idx
operator|<
name|remainder
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|permFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|permQualifier
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|remainder
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Filter the permissions cell record if client query
if|if
condition|(
name|filterPerms
condition|)
block|{
comment|// ACL table contain 3 types of cell key entries; hbase:Acl, namespace and table. So to filter
comment|// the permission cell records additional validations are required at CF, CQ and username.
comment|// Here we can proceed based on client input whether it contain filterUser.
comment|// Validate the filterUser when specified
if|if
condition|(
name|filterUser
operator|!=
literal|null
operator|&&
operator|!
name|validateFilterUser
argument_list|(
name|username
argument_list|,
name|filterUser
argument_list|,
name|filterUserGroups
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|validateCFAndCQ
argument_list|(
name|permFamily
argument_list|,
name|cf
argument_list|,
name|permQualifier
argument_list|,
name|cq
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|username
argument_list|,
name|Permission
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entryName
argument_list|)
argument_list|)
operator|.
name|withFamily
argument_list|(
name|permFamily
argument_list|)
operator|.
name|withQualifier
argument_list|(
name|permQualifier
argument_list|)
operator|.
name|withActionCodes
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Validate the cell key with the client filterUser if specified in the query input. 1. If cell    * key (username) is not a group then check whether client filterUser is equal to username 2. If    * cell key (username) is a group then check whether client filterUser belongs to the cell key    * group (username) 3. In case when both filterUser and username are group names then cell will be    * filtered if not equal.    */
specifier|private
specifier|static
name|boolean
name|validateFilterUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|filterUser
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filterUserGroups
parameter_list|)
block|{
if|if
condition|(
name|filterUserGroups
operator|==
literal|null
condition|)
block|{
comment|// Validate user name or group names whether equal
if|if
condition|(
name|filterUser
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// Check whether filter user belongs to the cell key group.
return|return
name|filterUserGroups
operator|.
name|contains
argument_list|(
name|username
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/*    * Validate the cell with client CF and CQ if specified in the query input. 1. If CF is NULL, then    * no need of further validation, result should include all CF and CQ. 2. IF CF specified and    * equal then validation required at CQ level if CF specified in client input, otherwise return    * all CQ records.    */
specifier|private
specifier|static
name|boolean
name|validateCFAndCQ
parameter_list|(
name|byte
index|[]
name|permFamily
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|permQualifier
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|)
block|{
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|cf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cf
argument_list|,
name|permFamily
argument_list|)
condition|)
block|{
if|if
condition|(
name|cq
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|cq
argument_list|,
name|permQualifier
argument_list|)
condition|)
block|{
comment|// if CQ specified and didn't match then ignore this cell
name|include
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if CF specified and didn't match then ignore this cell
name|include
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|include
return|;
block|}
comment|/**    * Writes a set of permissions as {@link org.apache.hadoop.io.Writable} instances and returns the    * resulting byte array. Writes a set of permission [user: table permission]    */
specifier|public
specifier|static
name|byte
index|[]
name|writePermissionsAsBytes
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|perms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|AccessControlUtil
operator|.
name|toUserTablePermissions
argument_list|(
name|perms
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|// This is part of the old HbaseObjectWritableFor96Migration.
specifier|private
specifier|static
specifier|final
name|int
name|LIST_CODE
init|=
literal|61
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WRITABLE_CODE
init|=
literal|14
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WRITABLE_NOT_ENCODED
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Permission
argument_list|>
name|readWritableUserPermission
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
assert|assert
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
operator|==
name|LIST_CODE
assert|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
operator|==
name|WRITABLE_CODE
assert|;
assert|assert
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
operator|==
name|WRITABLE_NOT_ENCODED
assert|;
name|String
name|className
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Writable
name|instance
init|=
name|WritableFactories
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|instance
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|(
name|Permission
operator|)
name|instance
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|readUserPermission
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|data
argument_list|,
name|pblen
argument_list|,
name|data
operator|.
name|length
operator|-
name|pblen
argument_list|)
expr_stmt|;
return|return
name|AccessControlUtil
operator|.
name|toUserPermission
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// TODO: We have to re-write non-PB data as PB encoded. Otherwise we will carry old Writables
comment|// forever (here and a couple of other places).
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|userPermission
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|user
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|readWritableUserPermission
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
name|userPermission
operator|.
name|put
argument_list|(
name|user
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|userPermission
return|;
block|}
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|readPermissions
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|data
argument_list|,
name|pblen
argument_list|,
name|data
operator|.
name|length
operator|-
name|pblen
argument_list|)
expr_stmt|;
return|return
name|AccessControlUtil
operator|.
name|toPermission
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// TODO: We have to re-write non-PB data as PB encoded. Otherwise we will carry old Writables
comment|// forever (here and a couple of other places).
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|user
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|perms
operator|.
name|putAll
argument_list|(
name|user
argument_list|,
name|readWritableUserPermission
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|perms
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isGlobalEntry
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|)
block|{
return|return
name|entryName
operator|!=
literal|null
operator|&&
name|TableName
operator|.
name|valueOf
argument_list|(
name|entryName
argument_list|)
operator|.
name|equals
argument_list|(
name|ACL_TABLE_NAME
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNamespaceEntry
parameter_list|(
name|String
name|entryName
parameter_list|)
block|{
return|return
name|entryName
operator|!=
literal|null
operator|&&
name|entryName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|NAMESPACE_PREFIX
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNamespaceEntry
parameter_list|(
name|byte
index|[]
name|entryName
parameter_list|)
block|{
return|return
name|entryName
operator|!=
literal|null
operator|&&
name|entryName
operator|.
name|length
operator|!=
literal|0
operator|&&
name|entryName
index|[
literal|0
index|]
operator|==
name|NAMESPACE_PREFIX
return|;
block|}
specifier|public
specifier|static
name|String
name|toNamespaceEntry
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|NAMESPACE_PREFIX
operator|+
name|namespace
return|;
block|}
specifier|public
specifier|static
name|String
name|fromNamespaceEntry
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
name|NAMESPACE_PREFIX
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument is not a valid namespace entry"
argument_list|)
throw|;
return|return
name|namespace
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|toNamespaceEntry
parameter_list|(
name|byte
index|[]
name|namespace
parameter_list|)
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|namespace
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|NAMESPACE_PREFIX
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespace
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|1
argument_list|,
name|namespace
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|fromNamespaceEntry
parameter_list|(
name|byte
index|[]
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
index|[
literal|0
index|]
operator|!=
name|NAMESPACE_PREFIX
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument is not a valid namespace entry: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|namespace
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|namespace
argument_list|,
literal|1
argument_list|,
name|namespace
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Permission
argument_list|>
name|getCellPermissionsForUser
parameter_list|(
name|User
name|user
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Save an object allocation where we can
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Permission
argument_list|>
name|results
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
init|=
name|PrivateCellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
name|tagsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|ACL_TAG_TYPE
condition|)
block|{
comment|// Deserialize the table permissions from the KV
comment|// TODO: This can be improved. Don't build UsersAndPermissions just to unpack it again,
comment|// use the builder
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|tag
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|tag
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|tag
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|Tag
operator|.
name|cloneValue
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|kvPerms
init|=
name|AccessControlUtil
operator|.
name|toUsersAndPermissions
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// Are there permissions for this user?
name|List
argument_list|<
name|Permission
argument_list|>
name|userPerms
init|=
name|kvPerms
operator|.
name|get
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userPerms
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|userPerms
argument_list|)
expr_stmt|;
block|}
comment|// Are there permissions for any of the groups this user belongs to?
name|String
name|groupNames
index|[]
init|=
name|user
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|group
range|:
name|groupNames
control|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|groupPerms
init|=
name|kvPerms
operator|.
name|get
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|group
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|groupPerms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

