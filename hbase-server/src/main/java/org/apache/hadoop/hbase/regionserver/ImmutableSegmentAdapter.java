begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionBackedScanner
import|;
end_import

begin_comment
comment|/**  * This segment is adapting a mutable segment making it into an immutable segment.  * This is used when a mutable segment is moved to being a snapshot or pushed into a compaction  * pipeline, that consists only of immutable segments.  * The compaction may generate different type of immutable segment  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ImmutableSegmentAdapter
extends|extends
name|ImmutableSegment
block|{
specifier|final
specifier|private
name|MutableSegment
name|adaptee
decl_stmt|;
specifier|public
name|ImmutableSegmentAdapter
parameter_list|(
name|MutableSegment
name|segment
parameter_list|)
block|{
name|super
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|this
operator|.
name|adaptee
operator|=
name|segment
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|KeyValueScanner
name|getKeyValueScanner
parameter_list|()
block|{
return|return
operator|new
name|CollectionBackedScanner
argument_list|(
name|adaptee
operator|.
name|getCellSet
argument_list|()
argument_list|,
name|adaptee
operator|.
name|getComparator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentScanner
name|getSegmentScanner
parameter_list|(
name|long
name|readPoint
parameter_list|)
block|{
return|return
name|adaptee
operator|.
name|getSegmentScanner
argument_list|(
name|readPoint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|adaptee
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCellsCount
parameter_list|()
block|{
return|return
name|adaptee
operator|.
name|getCellsCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|add
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|adaptee
operator|.
name|add
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getFirstAfter
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|adaptee
operator|.
name|getFirstAfter
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|adaptee
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|maybeCloneWithAllocator
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|adaptee
operator|.
name|maybeCloneWithAllocator
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|setSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|adaptee
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|adaptee
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|rollback
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|adaptee
operator|.
name|rollback
argument_list|(
name|cell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CellSet
name|getCellSet
parameter_list|()
block|{
return|return
name|adaptee
operator|.
name|getCellSet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|adaptee
operator|.
name|dump
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

