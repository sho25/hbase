begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * Internal class used to check and consume quota if exceed throttle quota is enabled. Exceed  * throttle quota means, user can over consume user/namespace/table quota if region server has  * additional available quota because other users don't consume at the same time.  *  * There are some limits when enable exceed throttle quota:  * 1. Must set at least one read and one write region server throttle quota;  * 2. All region server throttle quotas must be in seconds time unit. Because once previous requests  * exceed their quota and consume region server quota, quota in other time units may be refilled in  * a long time, this may affect later requests.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ExceedOperationQuota
extends|extends
name|DefaultOperationQuota
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExceedOperationQuota
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|QuotaLimiter
name|regionServerLimiter
decl_stmt|;
specifier|public
name|ExceedOperationQuota
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|QuotaLimiter
name|regionServerLimiter
parameter_list|,
specifier|final
name|QuotaLimiter
modifier|...
name|limiters
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|limiters
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerLimiter
operator|=
name|regionServerLimiter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkQuota
parameter_list|(
name|int
name|numWrites
parameter_list|,
name|int
name|numReads
parameter_list|,
name|int
name|numScans
parameter_list|)
throws|throws
name|RpcThrottlingException
block|{
if|if
condition|(
name|regionServerLimiter
operator|.
name|isBypass
argument_list|()
condition|)
block|{
comment|// If region server limiter is bypass, which means no region server quota is set, check and
comment|// throttle by all other quotas. In this condition, exceed throttle quota will not work.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exceed throttle quota is enabled but no region server quotas found"
argument_list|)
expr_stmt|;
name|super
operator|.
name|checkQuota
argument_list|(
name|numWrites
argument_list|,
name|numReads
argument_list|,
name|numScans
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 1. Update estimate quota which will be consumed
name|updateEstimateConsumeQuota
argument_list|(
name|numWrites
argument_list|,
name|numReads
argument_list|,
name|numScans
argument_list|)
expr_stmt|;
comment|// 2. Check if region server limiter is enough. If not, throw RpcThrottlingException.
name|regionServerLimiter
operator|.
name|checkQuota
argument_list|(
name|numWrites
argument_list|,
name|writeConsumed
argument_list|,
name|numReads
operator|+
name|numScans
argument_list|,
name|readConsumed
argument_list|,
name|writeCapacityUnitConsumed
argument_list|,
name|readCapacityUnitConsumed
argument_list|)
expr_stmt|;
comment|// 3. Check if other limiters are enough. If not, exceed other limiters because region server
comment|// limiter is enough.
name|boolean
name|exceed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|super
operator|.
name|checkQuota
argument_list|(
name|numWrites
argument_list|,
name|numReads
argument_list|,
name|numScans
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RpcThrottlingException
name|e
parameter_list|)
block|{
name|exceed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read/Write requests num exceeds quota: writes:{} reads:{} scan:{}, "
operator|+
literal|"try use region server quota"
argument_list|,
name|numWrites
argument_list|,
name|numReads
argument_list|,
name|numScans
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 4. Region server limiter is enough and grab estimated consume quota.
name|readAvailable
operator|=
name|Math
operator|.
name|max
argument_list|(
name|readAvailable
argument_list|,
name|regionServerLimiter
operator|.
name|getReadAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|writeAvailable
operator|=
name|Math
operator|.
name|max
argument_list|(
name|writeAvailable
argument_list|,
name|regionServerLimiter
operator|.
name|getWriteAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|regionServerLimiter
operator|.
name|grabQuota
argument_list|(
name|numWrites
argument_list|,
name|writeConsumed
argument_list|,
name|numReads
operator|+
name|numScans
argument_list|,
name|readConsumed
argument_list|,
name|writeCapacityUnitConsumed
argument_list|,
name|writeCapacityUnitConsumed
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceed
condition|)
block|{
comment|// 5. Other quota limiter is exceeded and has not been grabbed (because throw
comment|// RpcThrottlingException in Step 3), so grab it.
for|for
control|(
specifier|final
name|QuotaLimiter
name|limiter
range|:
name|limiters
control|)
block|{
name|limiter
operator|.
name|grabQuota
argument_list|(
name|numWrites
argument_list|,
name|writeConsumed
argument_list|,
name|numReads
operator|+
name|numScans
argument_list|,
name|readConsumed
argument_list|,
name|writeCapacityUnitConsumed
argument_list|,
name|writeCapacityUnitConsumed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeDiff
operator|!=
literal|0
condition|)
block|{
name|regionServerLimiter
operator|.
name|consumeWrite
argument_list|(
name|writeDiff
argument_list|,
name|writeCapacityUnitDiff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readDiff
operator|!=
literal|0
condition|)
block|{
name|regionServerLimiter
operator|.
name|consumeRead
argument_list|(
name|readDiff
argument_list|,
name|readCapacityUnitDiff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

