begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_comment
comment|/**  * Utility methods for interacting with the hbase.root file system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FSVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|StoreFileVisitor
block|{
name|void
name|storeFile
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|String
name|hfileName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|FSVisitor
parameter_list|()
block|{
comment|// private constructor for utility class
block|}
comment|/**    * Iterate over the table store files    *    * @param fs {@link FileSystem}    * @param tableDir {@link Path} to the table directory    * @param visitor callback object to get the store files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitTableStoreFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|StoreFileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|regions
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|RegionDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No regions under directory:"
operator|+
name|tableDir
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|FileStatus
name|region
range|:
name|regions
control|)
block|{
name|visitRegionStoreFiles
argument_list|(
name|fs
argument_list|,
name|region
operator|.
name|getPath
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterate over the region store files    *    * @param fs {@link FileSystem}    * @param regionDir {@link Path} to the region directory    * @param visitor callback object to get the store files    * @throws IOException if an error occurred while scanning the directory    */
specifier|public
specifier|static
name|void
name|visitRegionStoreFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionDir
parameter_list|,
specifier|final
name|StoreFileVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|families
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|regionDir
argument_list|,
operator|new
name|FSUtils
operator|.
name|FamilyDirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|families
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No families under region directory:"
operator|+
name|regionDir
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|PathFilter
name|fileFilter
init|=
operator|new
name|FSUtils
operator|.
name|FileFilter
argument_list|(
name|fs
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|family
range|:
name|families
control|)
block|{
name|Path
name|familyDir
init|=
name|family
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|familyName
init|=
name|familyDir
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// get all the storeFiles in the family
name|FileStatus
index|[]
name|storeFiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|familyDir
argument_list|,
name|fileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFiles
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No hfiles found for family: "
operator|+
name|familyDir
operator|+
literal|", skipping."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
for|for
control|(
name|FileStatus
name|hfile
range|:
name|storeFiles
control|)
block|{
name|Path
name|hfilePath
init|=
name|hfile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|storeFile
argument_list|(
name|regionDir
operator|.
name|getName
argument_list|()
argument_list|,
name|familyName
argument_list|,
name|hfilePath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

