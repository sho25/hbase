begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Counters kept by the distributed WAL split log process.  * Used by master and regionserver packages.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SplitLogCounters
block|{
comment|//SplitLogManager counters
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_start
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_success
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_new_unexpected_hlogs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_start
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_success
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_log_split_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_create_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_create_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_already_exists
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_create_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_create_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_get_data_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_get_data_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_get_data_nonode
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_get_data_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_get_data_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_resubmit
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_null_data
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_orphan_task_acquired
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_wait_for_zk_delete
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_unacquired_orphan_done
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_threshold_reached
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_missing_state_in_delete
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_heartbeat
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_rescan
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_rescan_deleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_task_deleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_unassigned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_relist_logdir
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_dead_server_task
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// SplitLogWorker counters
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_no_data
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_exception
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_owned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_lost_race
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_acquired
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_resigned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_done
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_heartbeat
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_acquired_rescan
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_get_data_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_get_data_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_get_data_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_preempt_task
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_heartbeat_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_final_transition_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|AtomicLong
name|tot_wkr_task_grabing
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|resetCounters
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
operator|(
operator|new
name|SplitLogCounters
argument_list|()
operator|)
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|fld
range|:
name|cl
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
operator|(
operator|(
name|AtomicLong
operator|)
name|fld
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

