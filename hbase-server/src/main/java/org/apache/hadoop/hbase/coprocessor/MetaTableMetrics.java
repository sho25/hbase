begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LossyCounting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * A coprocessor that collects metrics from meta table.  *<p>  * These metrics will be available through the regular Hadoop metrics2 sinks (ganglia, opentsdb,  * etc) as well as JMX output.  *</p>  * @see MetaTableMetrics  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetaTableMetrics
implements|implements
name|RegionCoprocessor
block|{
specifier|private
name|ExampleRegionObserverMeta
name|observer
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Metric
argument_list|>
argument_list|>
name|requestsMap
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|regionCoprocessorEnv
decl_stmt|;
specifier|private
name|LossyCounting
name|clientMetricsLossyCounting
decl_stmt|;
specifier|private
name|boolean
name|active
init|=
literal|false
decl_stmt|;
enum|enum
name|MetaTableOps
block|{
name|GET
block|,
name|PUT
block|,
name|DELETE
block|;   }
specifier|private
name|ImmutableMap
argument_list|<
name|Class
argument_list|,
name|MetaTableOps
argument_list|>
name|opsNameMap
init|=
name|ImmutableMap
operator|.
expr|<
name|Class
decl_stmt|,
name|MetaTableOps
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|Put
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|PUT
argument_list|)
decl|.
name|put
argument_list|(
name|Get
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|GET
argument_list|)
decl|.
name|put
argument_list|(
name|Delete
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|DELETE
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
class|class
name|ExampleRegionObserverMeta
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|isMetaTableOp
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return;
block|}
name|tableMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|clientMetricRegisterAndMark
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|regionMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|opMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|opWithClientMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|get
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|isMetaTableOp
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return;
block|}
name|tableMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|clientMetricRegisterAndMark
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|regionMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|opMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|opWithClientMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|isMetaTableOp
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return;
block|}
name|tableMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|clientMetricRegisterAndMark
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|regionMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|opMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|opWithClientMetricRegisterAndMark
argument_list|(
name|e
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|markMeterIfPresent
parameter_list|(
name|String
name|requestMeter
parameter_list|)
block|{
if|if
condition|(
name|requestMeter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Metric
name|metric
init|=
name|requestsMap
operator|.
name|get
argument_list|(
name|requestMeter
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|?
name|requestsMap
operator|.
name|get
argument_list|(
name|requestMeter
argument_list|)
operator|.
name|get
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|metric
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|Meter
operator|)
name|metric
operator|)
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerMeterIfNotPresent
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|String
name|requestMeter
parameter_list|)
block|{
if|if
condition|(
name|requestMeter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|requestsMap
operator|.
name|containsKey
argument_list|(
name|requestMeter
argument_list|)
condition|)
block|{
name|MetricRegistry
name|registry
init|=
name|regionCoprocessorEnv
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
name|registry
operator|.
name|meter
argument_list|(
name|requestMeter
argument_list|)
expr_stmt|;
name|requestsMap
operator|.
name|put
argument_list|(
name|requestMeter
argument_list|,
name|registry
operator|.
name|get
argument_list|(
name|requestMeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Registers and counts lossyCount for Meters that kept by lossy counting.      * By using lossy count to maintain meters, at most 7 / e meters will be kept  (e is error rate)      * e.g. when e is 0.02 by default, at most 50 Clients request metrics will be kept      *      also, all kept elements have frequency higher than e * N. (N is total count)      * @param e Region coprocessor environment      * @param requestMeter meter to be registered      * @param lossyCounting lossyCounting object for one type of meters.      */
specifier|private
name|void
name|registerLossyCountingMeterIfNotPresent
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|String
name|requestMeter
parameter_list|,
name|LossyCounting
name|lossyCounting
parameter_list|)
block|{
if|if
condition|(
name|requestMeter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|metersToBeRemoved
init|=
name|lossyCounting
operator|.
name|addByOne
argument_list|(
name|requestMeter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|requestsMap
operator|.
name|containsKey
argument_list|(
name|requestMeter
argument_list|)
operator|&&
name|metersToBeRemoved
operator|.
name|contains
argument_list|(
name|requestMeter
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|meter
range|:
name|metersToBeRemoved
control|)
block|{
comment|//cleanup requestsMap according swept data from lossy count;
name|requestsMap
operator|.
name|remove
argument_list|(
name|meter
argument_list|)
expr_stmt|;
name|MetricRegistry
name|registry
init|=
name|regionCoprocessorEnv
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|meter
argument_list|)
expr_stmt|;
block|}
comment|// newly added meter is swept by lossy counting cleanup. No need to put it into requestsMap.
return|return;
block|}
if|if
condition|(
operator|!
name|requestsMap
operator|.
name|containsKey
argument_list|(
name|requestMeter
argument_list|)
condition|)
block|{
name|MetricRegistry
name|registry
init|=
name|regionCoprocessorEnv
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
name|registry
operator|.
name|meter
argument_list|(
name|requestMeter
argument_list|)
expr_stmt|;
name|requestsMap
operator|.
name|put
argument_list|(
name|requestMeter
argument_list|,
name|registry
operator|.
name|get
argument_list|(
name|requestMeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get table name from Ops such as: get, put, delete.      * @param op such as get, put or delete.      */
specifier|private
name|String
name|getTableNameFromOp
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|String
name|tableRowKey
init|=
operator|new
name|String
argument_list|(
operator|(
operator|(
name|Row
operator|)
name|op
operator|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRowKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|tableName
operator|=
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|?
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
else|:
literal|null
expr_stmt|;
return|return
name|tableName
return|;
block|}
comment|/**      * Get regionId from Ops such as: get, put, delete.      * @param op  such as get, put or delete.      */
specifier|private
name|String
name|getRegionIdFromOp
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
name|String
name|regionId
init|=
literal|null
decl_stmt|;
name|String
name|tableRowKey
init|=
operator|new
name|String
argument_list|(
operator|(
operator|(
name|Row
operator|)
name|op
operator|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRowKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|regionId
operator|=
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|>
literal|2
condition|?
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|2
index|]
else|:
literal|null
expr_stmt|;
return|return
name|regionId
return|;
block|}
specifier|private
name|boolean
name|isMetaTableOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|clientMetricRegisterAndMark
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
name|String
name|clientIP
init|=
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|!=
literal|null
condition|?
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
decl_stmt|;
name|String
name|clientRequestMeter
init|=
name|clientRequestMeterName
argument_list|(
name|clientIP
argument_list|)
decl_stmt|;
name|registerLossyCountingMeterIfNotPresent
argument_list|(
name|e
argument_list|,
name|clientRequestMeter
argument_list|,
name|clientMetricsLossyCounting
argument_list|)
expr_stmt|;
name|markMeterIfPresent
argument_list|(
name|clientRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|tableMetricRegisterAndMark
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Row
name|op
parameter_list|)
block|{
comment|// Mark the meta table meter whenever the coprocessor is called
name|String
name|tableName
init|=
name|getTableNameFromOp
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|String
name|tableRequestMeter
init|=
name|tableMeterName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|registerMeterIfNotPresent
argument_list|(
name|e
argument_list|,
name|tableRequestMeter
argument_list|)
expr_stmt|;
name|markMeterIfPresent
argument_list|(
name|tableRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|regionMetricRegisterAndMark
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Row
name|op
parameter_list|)
block|{
comment|// Mark the meta table meter whenever the coprocessor is called
name|String
name|regionId
init|=
name|getRegionIdFromOp
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|String
name|regionRequestMeter
init|=
name|regionMeterName
argument_list|(
name|regionId
argument_list|)
decl_stmt|;
name|registerMeterIfNotPresent
argument_list|(
name|e
argument_list|,
name|regionRequestMeter
argument_list|)
expr_stmt|;
name|markMeterIfPresent
argument_list|(
name|regionRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|opMetricRegisterAndMark
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Row
name|op
parameter_list|)
block|{
name|String
name|opMeterName
init|=
name|opMeterName
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|registerMeterIfNotPresent
argument_list|(
name|e
argument_list|,
name|opMeterName
argument_list|)
expr_stmt|;
name|markMeterIfPresent
argument_list|(
name|opMeterName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|opWithClientMetricRegisterAndMark
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Object
name|op
parameter_list|)
block|{
name|String
name|opWithClientMeterName
init|=
name|opWithClientMeterName
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|registerMeterIfNotPresent
argument_list|(
name|e
argument_list|,
name|opWithClientMeterName
argument_list|)
expr_stmt|;
name|markMeterIfPresent
argument_list|(
name|opWithClientMeterName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|opWithClientMeterName
parameter_list|(
name|Object
name|op
parameter_list|)
block|{
name|String
name|clientIP
init|=
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|!=
literal|null
condition|?
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|clientIP
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|MetaTableOps
name|ops
init|=
name|opsNameMap
operator|.
name|get
argument_list|(
name|op
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|opWithClientMeterName
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|ops
condition|)
block|{
case|case
name|GET
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_get_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_put_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_delete_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|opWithClientMeterName
return|;
block|}
specifier|private
name|String
name|opMeterName
parameter_list|(
name|Object
name|op
parameter_list|)
block|{
name|MetaTableOps
name|ops
init|=
name|opsNameMap
operator|.
name|get
argument_list|(
name|op
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|opMeterName
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|ops
condition|)
block|{
case|case
name|GET
case|:
name|opMeterName
operator|=
literal|"MetaTable_get_request"
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|opMeterName
operator|=
literal|"MetaTable_put_request"
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|opMeterName
operator|=
literal|"MetaTable_delete_request"
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|opMeterName
return|;
block|}
specifier|private
name|String
name|tableMeterName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_table_%s_request"
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|String
name|clientRequestMeterName
parameter_list|(
name|String
name|clientIP
parameter_list|)
block|{
if|if
condition|(
name|clientIP
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_request"
argument_list|,
name|clientIP
argument_list|)
return|;
block|}
specifier|private
name|String
name|regionMeterName
parameter_list|(
name|String
name|regionId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_region_%s_request"
argument_list|,
name|regionId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
operator|&&
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|new
name|String
argument_list|(
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|regionCoprocessorEnv
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
expr_stmt|;
name|observer
operator|=
operator|new
name|ExampleRegionObserverMeta
argument_list|()
expr_stmt|;
name|requestsMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|clientMetricsLossyCounting
operator|=
operator|new
name|LossyCounting
argument_list|()
expr_stmt|;
comment|// only be active mode when this region holds meta table.
name|active
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|observer
operator|=
operator|new
name|ExampleRegionObserverMeta
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
comment|// since meta region can move around, clear stale metrics when stop.
for|for
control|(
name|String
name|meterName
range|:
name|requestsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MetricRegistry
name|registry
init|=
name|regionCoprocessorEnv
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|meterName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

