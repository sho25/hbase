begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LossyCounting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * A coprocessor that collects metrics from meta table.  *<p>  * These metrics will be available through the regular Hadoop metrics2 sinks (ganglia, opentsdb,  * etc) as well as JMX output.  *</p>  * @see MetaTableMetrics  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetaTableMetrics
implements|implements
name|RegionCoprocessor
block|{
specifier|private
name|ExampleRegionObserverMeta
name|observer
decl_stmt|;
specifier|private
name|MetricRegistry
name|registry
decl_stmt|;
specifier|private
name|LossyCounting
argument_list|<
name|String
argument_list|>
name|clientMetricsLossyCounting
decl_stmt|,
name|regionMetricsLossyCounting
decl_stmt|;
specifier|private
name|boolean
name|active
init|=
literal|false
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|metrics
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
enum|enum
name|MetaTableOps
block|{
name|GET
block|,
name|PUT
block|,
name|DELETE
block|,   }
specifier|private
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
argument_list|,
name|MetaTableOps
argument_list|>
name|opsNameMap
init|=
name|ImmutableMap
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
condition|,
name|MetaTableOps
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Put
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|PUT
argument_list|)
operator|.
name|put
argument_list|(
name|Get
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|GET
argument_list|)
operator|.
name|put
argument_list|(
name|Delete
operator|.
name|class
argument_list|,
name|MetaTableOps
operator|.
name|DELETE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
class|class
name|ExampleRegionObserverMeta
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|registerAndMarkMetrics
argument_list|(
name|e
argument_list|,
name|get
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Put
name|put
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|registerAndMarkMetrics
argument_list|(
name|e
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Delete
name|delete
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
block|{
name|registerAndMarkMetrics
argument_list|(
name|e
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerAndMarkMetrics
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|isMetaTableOp
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return;
block|}
name|tableMetricRegisterAndMark
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|clientMetricRegisterAndMark
argument_list|()
expr_stmt|;
name|regionMetricRegisterAndMark
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|opMetricRegisterAndMark
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|opWithClientMetricRegisterAndMark
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get table name from Ops such as: get, put, delete.      * @param op such as get, put or delete.      */
specifier|private
name|String
name|getTableNameFromOp
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
specifier|final
name|String
name|tableRowKey
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|op
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tableRowKey
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
index|[]
name|splits
init|=
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|splits
operator|.
name|length
operator|>
literal|0
condition|?
name|splits
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
comment|/**      * Get regionId from Ops such as: get, put, delete.      * @param op  such as get, put or delete.      */
specifier|private
name|String
name|getRegionIdFromOp
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
specifier|final
name|String
name|tableRowKey
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|op
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tableRowKey
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
index|[]
name|splits
init|=
name|tableRowKey
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|splits
operator|.
name|length
operator|>
literal|2
condition|?
name|splits
index|[
literal|2
index|]
else|:
literal|null
return|;
block|}
specifier|private
name|boolean
name|isMetaTableOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|clientMetricRegisterAndMark
parameter_list|()
block|{
comment|// Mark client metric
name|String
name|clientIP
init|=
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|!=
literal|null
condition|?
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|clientIP
operator|==
literal|null
operator|||
name|clientIP
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|clientRequestMeter
init|=
name|clientRequestMeterName
argument_list|(
name|clientIP
argument_list|)
decl_stmt|;
name|clientMetricsLossyCounting
operator|.
name|add
argument_list|(
name|clientRequestMeter
argument_list|)
expr_stmt|;
name|registerAndMarkMeter
argument_list|(
name|clientRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|tableMetricRegisterAndMark
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
comment|// Mark table metric
name|String
name|tableName
init|=
name|getTableNameFromOp
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|tableRequestMeter
init|=
name|tableMeterName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|registerAndMarkMeter
argument_list|(
name|tableRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|regionMetricRegisterAndMark
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
comment|// Mark region metric
name|String
name|regionId
init|=
name|getRegionIdFromOp
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionId
operator|==
literal|null
operator|||
name|regionId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|regionRequestMeter
init|=
name|regionMeterName
argument_list|(
name|regionId
argument_list|)
decl_stmt|;
name|regionMetricsLossyCounting
operator|.
name|add
argument_list|(
name|regionRequestMeter
argument_list|)
expr_stmt|;
name|registerAndMarkMeter
argument_list|(
name|regionRequestMeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|opMetricRegisterAndMark
parameter_list|(
name|Row
name|op
parameter_list|)
block|{
comment|// Mark access type ["get", "put", "delete"] metric
name|String
name|opMeterName
init|=
name|opMeterName
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|opMeterName
operator|==
literal|null
operator|||
name|opMeterName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|registerAndMarkMeter
argument_list|(
name|opMeterName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|opWithClientMetricRegisterAndMark
parameter_list|(
name|Object
name|op
parameter_list|)
block|{
comment|// // Mark client + access type metric
name|String
name|opWithClientMeterName
init|=
name|opWithClientMeterName
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|opWithClientMeterName
operator|==
literal|null
operator|||
name|opWithClientMeterName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|registerAndMarkMeter
argument_list|(
name|opWithClientMeterName
argument_list|)
expr_stmt|;
block|}
comment|// Helper function to register and mark meter if not present
specifier|private
name|void
name|registerAndMarkMeter
parameter_list|(
name|String
name|requestMeter
parameter_list|)
block|{
if|if
condition|(
name|requestMeter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|registry
operator|.
name|get
argument_list|(
name|requestMeter
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|requestMeter
argument_list|)
expr_stmt|;
block|}
name|registry
operator|.
name|meter
argument_list|(
name|requestMeter
argument_list|)
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|opWithClientMeterName
parameter_list|(
name|Object
name|op
parameter_list|)
block|{
comment|// Extract meter name containing the client IP
name|String
name|clientIP
init|=
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|!=
literal|null
condition|?
name|RpcServer
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|clientIP
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|MetaTableOps
name|ops
init|=
name|opsNameMap
operator|.
name|get
argument_list|(
name|op
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|opWithClientMeterName
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|ops
condition|)
block|{
case|case
name|GET
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_get_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_put_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|opWithClientMeterName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_delete_request"
argument_list|,
name|clientIP
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|opWithClientMeterName
return|;
block|}
specifier|private
name|String
name|opMeterName
parameter_list|(
name|Object
name|op
parameter_list|)
block|{
comment|// Extract meter name containing the access type
name|MetaTableOps
name|ops
init|=
name|opsNameMap
operator|.
name|get
argument_list|(
name|op
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|opMeterName
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|ops
condition|)
block|{
case|case
name|GET
case|:
name|opMeterName
operator|=
literal|"MetaTable_get_request"
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|opMeterName
operator|=
literal|"MetaTable_put_request"
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|opMeterName
operator|=
literal|"MetaTable_delete_request"
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|opMeterName
return|;
block|}
specifier|private
name|String
name|tableMeterName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
comment|// Extract meter name containing the table name
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_table_%s_request"
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|String
name|clientRequestMeterName
parameter_list|(
name|String
name|clientIP
parameter_list|)
block|{
comment|// Extract meter name containing the client IP
if|if
condition|(
name|clientIP
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_client_%s_lossy_request"
argument_list|,
name|clientIP
argument_list|)
return|;
block|}
specifier|private
name|String
name|regionMeterName
parameter_list|(
name|String
name|regionId
parameter_list|)
block|{
comment|// Extract meter name containing the region ID
return|return
name|String
operator|.
name|format
argument_list|(
literal|"MetaTable_region_%s_lossy_request"
argument_list|,
name|regionId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|observer
operator|=
operator|new
name|ExampleRegionObserverMeta
argument_list|()
expr_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
operator|&&
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
name|RegionCoprocessorEnvironment
name|regionCoprocessorEnv
init|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|registry
operator|=
name|regionCoprocessorEnv
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
expr_stmt|;
name|LossyCounting
operator|.
name|LossyCountingListener
argument_list|<
name|String
argument_list|>
name|listener
init|=
name|key
lambda|->
block|{
name|registry
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|regionCoprocessorEnv
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|clientMetricsLossyCounting
operator|=
operator|new
name|LossyCounting
argument_list|<>
argument_list|(
literal|"clientMetaMetrics"
argument_list|,
name|conf
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|regionMetricsLossyCounting
operator|=
operator|new
name|LossyCounting
argument_list|<>
argument_list|(
literal|"regionMetaMetrics"
argument_list|,
name|conf
argument_list|,
name|listener
argument_list|)
expr_stmt|;
comment|// only be active mode when this region holds meta table.
name|active
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// since meta region can move around, clear stale metrics when stop.
for|for
control|(
name|String
name|metric
range|:
name|metrics
control|)
block|{
name|registry
operator|.
name|remove
argument_list|(
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

