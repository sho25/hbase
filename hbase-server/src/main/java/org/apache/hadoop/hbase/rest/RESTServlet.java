begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTablePool
import|;
end_import

begin_comment
comment|/**  * Singleton class encapsulating global REST servlet state and functions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RESTServlet
implements|implements
name|Constants
block|{
specifier|private
specifier|static
name|RESTServlet
name|INSTANCE
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|HTablePool
name|pool
decl_stmt|;
specifier|private
specifier|final
name|MetricsREST
name|metrics
init|=
operator|new
name|MetricsREST
argument_list|()
decl_stmt|;
comment|/**    * @return the RESTServlet singleton instance    * @throws IOException    */
specifier|public
specifier|synchronized
specifier|static
name|RESTServlet
name|getInstance
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|INSTANCE
operator|!=
literal|null
operator|)
assert|;
return|return
name|INSTANCE
return|;
block|}
comment|/**    * @param conf Existing configuration to use in rest servlet    * @return the RESTServlet singleton instance    * @throws IOException    */
specifier|public
specifier|synchronized
specifier|static
name|RESTServlet
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|RESTServlet
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
specifier|public
specifier|synchronized
specifier|static
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|!=
literal|null
condition|)
name|INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Constructor with existing configuration    * @param conf existing configuration    * @throws IOException.    */
name|RESTServlet
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|HTablePool
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|HTablePool
name|getTablePool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
name|MetricsREST
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Helper method to determine if server should    * only respond to GET HTTP method requests.    * @return boolean for server read-only state    */
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

