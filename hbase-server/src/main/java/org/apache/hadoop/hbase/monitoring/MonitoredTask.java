begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|MonitoredTask
extends|extends
name|Cloneable
block|{
enum|enum
name|State
block|{
name|RUNNING
block|,
name|WAITING
block|,
name|COMPLETE
block|,
name|ABORTED
block|}
specifier|public
interface|interface
name|StatusJournalEntry
block|{
name|String
name|getStatus
parameter_list|()
function_decl|;
name|long
name|getTimeStamp
parameter_list|()
function_decl|;
block|}
name|long
name|getStartTime
parameter_list|()
function_decl|;
name|String
name|getDescription
parameter_list|()
function_decl|;
name|String
name|getStatus
parameter_list|()
function_decl|;
name|long
name|getStatusTime
parameter_list|()
function_decl|;
name|State
name|getState
parameter_list|()
function_decl|;
name|long
name|getStateTime
parameter_list|()
function_decl|;
name|long
name|getCompletionTimestamp
parameter_list|()
function_decl|;
name|long
name|getWarnTime
parameter_list|()
function_decl|;
name|void
name|markComplete
parameter_list|(
name|String
name|msg
parameter_list|)
function_decl|;
name|void
name|pause
parameter_list|(
name|String
name|msg
parameter_list|)
function_decl|;
name|void
name|resume
parameter_list|(
name|String
name|msg
parameter_list|)
function_decl|;
name|void
name|abort
parameter_list|(
name|String
name|msg
parameter_list|)
function_decl|;
name|void
name|expireNow
parameter_list|()
function_decl|;
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
function_decl|;
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
function_decl|;
name|void
name|setWarnTime
parameter_list|(
specifier|final
name|long
name|t
parameter_list|)
function_decl|;
name|List
argument_list|<
name|StatusJournalEntry
argument_list|>
name|getStatusJournal
parameter_list|()
function_decl|;
comment|/**    * Enable journal that will store all statuses that have been set along with the time stamps when    * they were set.    * @param includeCurrentStatus whether to include the current set status in the journal    */
name|void
name|enableStatusJournal
parameter_list|(
name|boolean
name|includeCurrentStatus
parameter_list|)
function_decl|;
name|void
name|disableStatusJournal
parameter_list|()
function_decl|;
name|String
name|prettyPrintJournal
parameter_list|()
function_decl|;
comment|/**    * Explicitly mark this status as able to be cleaned up,    * even though it might not be complete.    */
name|void
name|cleanup
parameter_list|()
function_decl|;
comment|/**    * Public exposure of Object.clone() in order to allow clients to easily     * capture current state.    * @return a copy of the object whose references will not change    */
name|MonitoredTask
name|clone
parameter_list|()
function_decl|;
comment|/**    * Creates a string map of internal details for extensible exposure of     * monitored tasks.    * @return A Map containing information for this task.    */
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates a JSON object for parseable exposure of monitored tasks.    * @return An encoded JSON object containing information for this task.    */
name|String
name|toJSON
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

