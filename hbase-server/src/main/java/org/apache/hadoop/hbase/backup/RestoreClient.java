begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupManifest
operator|.
name|BackupImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * The main class which interprets the given arguments and trigger restore operation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|RestoreClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RestoreClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Options
name|opt
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|BackupImage
argument_list|>
name|lastRestoreImagesSet
decl_stmt|;
comment|// delimiter in tablename list in restore command
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER_IN_COMMAND
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_OVERWRITE
init|=
literal|"overwrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_CHECK
init|=
literal|"check"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_AUTOMATIC
init|=
literal|"automatic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: hbase restore<backup_root_path><backup_id><tables> [tableMapping] \n"
operator|+
literal|"       [-overwrite] [-check] [-automatic]\n"
operator|+
literal|" backup_root_path  The parent location where the backup images are stored\n"
operator|+
literal|" backup_id         The id identifying the backup image\n"
operator|+
literal|" table(s)          Table(s) from the backup image to be restored.\n"
operator|+
literal|"                   Tables are separated by comma.\n"
operator|+
literal|" Options:\n"
operator|+
literal|"   tableMapping    A comma separated list of target tables.\n"
operator|+
literal|"                   If specified, each table in<tables> must have a mapping.\n"
operator|+
literal|"   -overwrite      With this option, restore overwrites to the existing table "
operator|+
literal|"if there's any in\n"
operator|+
literal|"                   restore target. The existing table must be online before restore.\n"
operator|+
literal|"   -check          With this option, restore sequence and dependencies are checked\n"
operator|+
literal|"                   and verified without executing the restore\n"
operator|+
literal|"   -automatic      With this option, all the dependencies are automatically restored\n"
operator|+
literal|"                   together with this backup image following the correct order.\n"
operator|+
literal|"                   The restore dependencies can be checked by using \"-check\" "
operator|+
literal|"option,\n"
operator|+
literal|"                   or using \"hbase backup describe\" command. Without this option, "
operator|+
literal|"only\n"
operator|+
literal|"                   this backup image is restored\n"
decl_stmt|;
specifier|private
name|RestoreClient
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|// define supported options
name|opt
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|OPTION_OVERWRITE
argument_list|,
literal|false
argument_list|,
literal|"Overwrite the data if any of the restore target tables exists"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|OPTION_CHECK
argument_list|,
literal|false
argument_list|,
literal|"Check restore sequence and dependencies"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|OPTION_AUTOMATIC
argument_list|,
literal|false
argument_list|,
literal|"Restore all dependencies"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"Enable debug logging"
argument_list|)
expr_stmt|;
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
comment|// disable irrelevant loggers to avoid it mess up command output
name|disableUselessLoggers
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|parseAndRun
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|parseAndRun
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CommandLine
name|cmd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmd
operator|=
operator|new
name|PosixParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opt
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// enable debug logging
name|Logger
name|backupClientLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.backup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"debug"
argument_list|)
condition|)
block|{
name|backupClientLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
comment|// whether to overwrite to existing table if any, false by default
name|boolean
name|isOverwrite
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPTION_OVERWRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOverwrite
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found -overwrite option in restore command, "
operator|+
literal|"will overwrite to existing table if any in the restore target"
argument_list|)
expr_stmt|;
block|}
comment|// whether to only check the dependencies, false by default
name|boolean
name|check
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPTION_CHECK
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found -check option in restore command, "
operator|+
literal|"will check and verify the dependencies"
argument_list|)
expr_stmt|;
block|}
comment|// whether to restore all dependencies, false by default
name|boolean
name|autoRestore
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPTION_AUTOMATIC
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoRestore
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found -automatic option in restore command, "
operator|+
literal|"will automatically retore all the dependencies"
argument_list|)
expr_stmt|;
block|}
comment|// parse main restore command options
name|String
index|[]
name|remainArgs
init|=
name|cmd
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainArgs
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: missing arguments"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|backupRootDir
init|=
name|remainArgs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|backupId
init|=
name|remainArgs
index|[
literal|1
index|]
decl_stmt|;
name|String
name|tables
init|=
name|remainArgs
index|[
literal|2
index|]
decl_stmt|;
name|String
name|tableMapping
init|=
operator|(
name|remainArgs
operator|.
name|length
operator|>
literal|3
operator|)
condition|?
name|remainArgs
index|[
literal|3
index|]
else|:
literal|null
decl_stmt|;
name|String
index|[]
name|sTableArray
init|=
operator|(
name|tables
operator|!=
literal|null
operator|)
condition|?
name|tables
operator|.
name|split
argument_list|(
name|DELIMITER_IN_COMMAND
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
index|[]
name|tTableArray
init|=
operator|(
name|tableMapping
operator|!=
literal|null
operator|)
condition|?
name|tableMapping
operator|.
name|split
argument_list|(
name|DELIMITER_IN_COMMAND
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|tableMapping
operator|!=
literal|null
operator|&&
name|tTableArray
operator|!=
literal|null
operator|&&
operator|(
name|sTableArray
operator|.
name|length
operator|!=
name|tTableArray
operator|.
name|length
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: table mapping mismatch: "
operator|+
name|tables
operator|+
literal|" : "
operator|+
name|tableMapping
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HBackupFileSystem
name|hBackupFS
init|=
operator|new
name|HBackupFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|backupRootDir
argument_list|)
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|restore_stage1
argument_list|(
name|hBackupFS
argument_list|,
name|backupRootDir
argument_list|,
name|backupId
argument_list|,
name|check
argument_list|,
name|autoRestore
argument_list|,
name|sTableArray
argument_list|,
name|tTableArray
argument_list|,
name|isOverwrite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Restore operation. Stage 1: validate backupManifest, and check target tables    * @param hBackupFS to access the backup image    * @param backupRootDir The root dir for backup image    * @param backupId The backup id for image to be restored    * @param check True if only do dependency check    * @param autoRestore True if automatically restore following the dependency    * @param sTableArray The array of tables to be restored    * @param tTableArray The array of mapping tables to restore to    * @param isOverwrite True then do restore overwrite if target table exists, otherwise fail the    *          request if target table exists    * @return True if only do dependency check    * @throws IOException if any failure during restore    */
specifier|public
specifier|static
name|boolean
name|restore_stage1
parameter_list|(
name|HBackupFileSystem
name|hBackupFS
parameter_list|,
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|,
name|boolean
name|check
parameter_list|,
name|boolean
name|autoRestore
parameter_list|,
name|String
index|[]
name|sTableArray
parameter_list|,
name|String
index|[]
name|tTableArray
parameter_list|,
name|boolean
name|isOverwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
argument_list|()
decl_stmt|;
comment|// check and load backup image manifest for the tables
name|hBackupFS
operator|.
name|checkImageManifestExist
argument_list|(
name|backupManifestMap
argument_list|,
name|sTableArray
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Check and validate the backup image and its dependencies
if|if
condition|(
name|check
operator|||
name|autoRestore
condition|)
block|{
if|if
condition|(
name|validate
argument_list|(
name|backupManifestMap
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking backup images: ok"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|errMsg
init|=
literal|"Some dependencies are missing for restore"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
comment|// return true if only for check
if|if
condition|(
name|check
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tTableArray
operator|==
literal|null
condition|)
block|{
name|tTableArray
operator|=
name|sTableArray
expr_stmt|;
block|}
comment|// check the target tables
name|checkTargetTables
argument_list|(
name|tTableArray
argument_list|,
name|isOverwrite
argument_list|)
expr_stmt|;
comment|// start restore process
name|Set
argument_list|<
name|BackupImage
argument_list|>
name|restoreImageSet
init|=
name|restore_stage2
argument_list|(
name|hBackupFS
argument_list|,
name|backupManifestMap
argument_list|,
name|sTableArray
argument_list|,
name|tTableArray
argument_list|,
name|autoRestore
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore for "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|sTableArray
argument_list|)
operator|+
literal|" are successful!"
argument_list|)
expr_stmt|;
name|lastRestoreImagesSet
operator|=
name|restoreImageSet
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR: restore failed with error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// not only for check, return false
return|return
literal|false
return|;
block|}
comment|/**    * Get last restore image set. The value is globally set for the latest finished restore.    * @return the last restore image set    */
specifier|public
specifier|static
name|Set
argument_list|<
name|BackupImage
argument_list|>
name|getLastRestoreImagesSet
parameter_list|()
block|{
return|return
name|lastRestoreImagesSet
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validate
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
name|manifestEntry
range|:
name|backupManifestMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|table
init|=
name|manifestEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
name|imageSet
init|=
operator|new
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|depList
init|=
name|manifestEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getDependentListByTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|depList
operator|!=
literal|null
operator|&&
operator|!
name|depList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|imageSet
operator|.
name|addAll
argument_list|(
name|depList
argument_list|)
expr_stmt|;
block|}
comment|// todo merge
name|LOG
operator|.
name|debug
argument_list|(
literal|"merge will be implemented in future jira"
argument_list|)
expr_stmt|;
comment|// BackupUtil.clearMergedImages(table, imageSet, conf);
name|LOG
operator|.
name|info
argument_list|(
literal|"Dependent image(s) from old to new:"
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|imageSet
control|)
block|{
name|String
name|imageDir
init|=
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|image
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HBackupFileSystem
operator|.
name|checkPathExist
argument_list|(
name|imageDir
argument_list|,
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR: backup image does not exist: "
operator|+
name|imageDir
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// TODO More validation?
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup image: "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" for '"
operator|+
name|table
operator|+
literal|"' is available"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isValid
return|;
block|}
comment|/**    * Validate target Tables    * @param tTableArray: target tables    * @param isOverwrite overwrite existing table    * @throws IOException exception    */
specifier|private
specifier|static
name|void
name|checkTargetTables
parameter_list|(
name|String
index|[]
name|tTableArray
parameter_list|,
name|boolean
name|isOverwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|existTableList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|disabledTableList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// check if the tables already exist
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tTableArray
control|)
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
name|existTableList
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
name|disabledTableList
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HBase table "
operator|+
name|tableName
operator|+
literal|" does not exist. It will be create during backup process"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|existTableList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isOverwrite
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Existing table found in the restore target, please add \"-overwrite\" "
operator|+
literal|"option in the command if you mean to restore to these existing tables"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Existing table list in restore target: "
operator|+
name|existTableList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Existing table found in target while no \"-overwrite\" "
operator|+
literal|"option found"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|disabledTableList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Found offline table in the restore target, "
operator|+
literal|"please enable them before restore with \"-overwrite\" option"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Offline table list in restore target: "
operator|+
name|disabledTableList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found offline table in the target when restore with \"-overwrite\" option"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Restore operation. Stage 2: resolved Backup Image dependency    * @param hBackupFS to access the backup image    * @param backupManifestMap : tableName,  Manifest    * @param sTableArray The array of tables to be restored    * @param tTableArray The array of mapping tables to restore to    * @param autoRestore : yes, restore all the backup images on the dependency list    * @return set of BackupImages restored    * @throws IOException exception    */
specifier|private
specifier|static
name|Set
argument_list|<
name|BackupImage
argument_list|>
name|restore_stage2
parameter_list|(
name|HBackupFileSystem
name|hBackupFS
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
parameter_list|,
name|String
index|[]
name|sTableArray
parameter_list|,
name|String
index|[]
name|tTableArray
parameter_list|,
name|boolean
name|autoRestore
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
name|restoreImageSet
init|=
operator|new
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sTableArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|restoreImageSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|table
init|=
name|sTableArray
index|[
name|i
index|]
decl_stmt|;
name|BackupManifest
name|manifest
init|=
name|backupManifestMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoRestore
condition|)
block|{
comment|// Get the image list of this backup for restore in time order from old
comment|// to new.
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
name|restoreList
init|=
operator|new
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
argument_list|(
name|manifest
operator|.
name|getDependentListByTable
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"need to clear merged Image. to be implemented in future jira"
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|restoreList
control|)
block|{
name|restoreImage
argument_list|(
name|image
argument_list|,
name|table
argument_list|,
name|tTableArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|restoreImageSet
operator|.
name|addAll
argument_list|(
name|restoreList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BackupImage
name|image
init|=
name|manifest
operator|.
name|getBackupImage
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupImage
argument_list|>
name|depList
init|=
name|manifest
operator|.
name|getDependentListByTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
comment|// The dependency list always contains self.
if|if
condition|(
name|depList
operator|!=
literal|null
operator|&&
name|depList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Backup image "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" depends on other images.\n"
operator|+
literal|"this operation will only restore the delta contained within backupImage "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|restoreImage
argument_list|(
name|image
argument_list|,
name|table
argument_list|,
name|tTableArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|restoreImageSet
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoRestore
condition|)
block|{
if|if
condition|(
name|restoreImageSet
operator|!=
literal|null
operator|&&
operator|!
name|restoreImageSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore includes the following image(s):"
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|restoreImageSet
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  Backup: "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" "
operator|+
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|image
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|restoreImageSet
return|;
block|}
comment|/**    * Restore operation handle each backupImage    * @param image: backupImage    * @param sTable: table to be restored    * @param tTable: table to be restored to    * @throws IOException exception    */
specifier|private
specifier|static
name|void
name|restoreImage
parameter_list|(
name|BackupImage
name|image
parameter_list|,
name|String
name|sTable
parameter_list|,
name|String
name|tTable
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|rootDir
init|=
name|image
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Image root dir "
operator|+
name|rootDir
argument_list|)
expr_stmt|;
name|String
name|backupId
init|=
name|image
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|HBackupFileSystem
name|hFS
init|=
operator|new
name|HBackupFileSystem
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|)
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|RestoreUtil
name|restoreTool
init|=
operator|new
name|RestoreUtil
argument_list|(
name|conf
argument_list|,
name|hFS
argument_list|)
decl_stmt|;
name|BackupManifest
name|manifest
init|=
name|hFS
operator|.
name|getManifest
argument_list|(
name|sTable
argument_list|)
decl_stmt|;
name|Path
name|tableBackupPath
init|=
name|hFS
operator|.
name|getTableBackupPath
argument_list|(
name|sTable
argument_list|)
decl_stmt|;
comment|// todo: convert feature will be provided in a future jira
name|boolean
name|converted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|manifest
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_FULL
argument_list|)
operator|||
name|converted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring '"
operator|+
name|sTable
operator|+
literal|"' to '"
operator|+
name|tTable
operator|+
literal|"' from "
operator|+
operator|(
name|converted
condition|?
literal|"converted"
else|:
literal|"full"
operator|)
operator|+
literal|" backup image "
operator|+
name|tableBackupPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|restoreTool
operator|.
name|fullRestoreTable
argument_list|(
name|tableBackupPath
argument_list|,
name|sTable
argument_list|,
name|tTable
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// incremental Backup
name|String
name|logBackupDir
init|=
name|HBackupFileSystem
operator|.
name|getLogBackupDir
argument_list|(
name|image
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring '"
operator|+
name|sTable
operator|+
literal|"' to '"
operator|+
name|tTable
operator|+
literal|"' from incremental backup image "
operator|+
name|logBackupDir
argument_list|)
expr_stmt|;
name|restoreTool
operator|.
name|incrementalRestoreTable
argument_list|(
name|logBackupDir
argument_list|,
operator|new
name|String
index|[]
block|{
name|sTable
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|tTable
block|}
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|sTable
operator|+
literal|" has been successfully restored to "
operator|+
name|tTable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the configuration from a given one.    * @param newConf A new given configuration    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|setConf
parameter_list|(
name|Configuration
name|newConf
parameter_list|)
block|{
name|conf
operator|=
name|newConf
expr_stmt|;
block|}
comment|/**    * Get and merge Hadoop and HBase configuration.    * @throws IOException exception    */
specifier|protected
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|RestoreClient
operator|.
name|class
init|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conf
return|;
block|}
specifier|private
specifier|static
name|void
name|disableUselessLoggers
parameter_list|()
block|{
comment|// disable zookeeper log to avoid it mess up command output
name|Logger
name|zkLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.zookeeper"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Zookeeper log level before set: "
operator|+
name|zkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|zkLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Zookeeper log level after set: "
operator|+
name|zkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable hbase zookeeper tool log to avoid it mess up command output
name|Logger
name|hbaseZkLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.zookeeper"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase zookeeper log level before set: "
operator|+
name|hbaseZkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseZkLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase Zookeeper log level after set: "
operator|+
name|hbaseZkLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable hbase client log to avoid it mess up command output
name|Logger
name|hbaseClientLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.client"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase client log level before set: "
operator|+
name|hbaseClientLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseClientLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBase client log level after set: "
operator|+
name|hbaseClientLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable other related log to avoid mess up command output
name|Logger
name|otherLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.io.hfile"
argument_list|)
decl_stmt|;
name|otherLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|otherLogger
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.util"
argument_list|)
expr_stmt|;
name|otherLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|otherLogger
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.mapreduce"
argument_list|)
expr_stmt|;
name|otherLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

