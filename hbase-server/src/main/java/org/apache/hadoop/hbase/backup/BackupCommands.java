begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BACKUP_COMMAND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * General backup commands, options and usage messages  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|final
class|class
name|BackupCommands
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: hbase backup COMMAND\n"
operator|+
literal|"where COMMAND is one of:\n"
operator|+
literal|"  create     create a new backup image\n"
operator|+
literal|"Enter \'help COMMAND\' to see help message for each command\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_CMD_USAGE
init|=
literal|"Usage: hbase backup create<type><backup_root_path> [tables] [-s name] [-convert] "
operator|+
literal|"[-silent]\n"
operator|+
literal|" type          \"full\" to create a full backup image;\n"
operator|+
literal|"               \"incremental\" to create an incremental backup image\n"
operator|+
literal|" backup_root_path   The full root path to store the backup image,\n"
operator|+
literal|"                    the prefix can be gpfs, hdfs or webhdfs\n"
operator|+
literal|" Options:\n"
operator|+
literal|"   tables      If no tables (\"\") are specified, all tables are backed up. "
operator|+
literal|"Otherwise it is a\n"
operator|+
literal|"               comma separated list of tables.\n"
operator|+
literal|"   -s name     Use the specified snapshot for full backup\n"
operator|+
literal|"   -convert    For an incremental backup, convert WAL files to HFiles\n"
decl_stmt|;
interface|interface
name|Command
block|{
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|BackupCommands
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
specifier|static
name|Command
name|createCommand
parameter_list|(
name|BACKUP_COMMAND
name|type
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|Command
name|cmd
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
name|cmd
operator|=
operator|new
name|CreateCommand
argument_list|(
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|HELP
case|:
default|default:
name|cmd
operator|=
operator|new
name|HelpCommand
argument_list|(
name|cmdline
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|cmd
return|;
block|}
specifier|private
specifier|static
class|class
name|CreateCommand
implements|implements
name|Command
block|{
name|CommandLine
name|cmdline
decl_stmt|;
name|CreateCommand
parameter_list|(
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: missing arguments"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
argument_list|<
literal|2
operator|||
name|args
operator|.
name|length
argument_list|>
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: wrong number of arguments"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_FULL
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|&&
operator|!
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: invalid backup type"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|snapshot
init|=
name|cmdline
operator|.
name|hasOption
argument_list|(
literal|'s'
argument_list|)
condition|?
name|cmdline
operator|.
name|getOptionValue
argument_list|(
literal|'s'
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|tables
init|=
operator|(
name|args
operator|.
name|length
operator|==
literal|3
operator|)
condition|?
name|args
index|[
literal|2
index|]
else|:
literal|null
decl_stmt|;
try|try
block|{
name|BackupClient
operator|.
name|create
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|tables
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|HelpCommand
implements|implements
name|Command
block|{
name|CommandLine
name|cmdline
decl_stmt|;
name|HelpCommand
parameter_list|(
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Only support check help message of a single command type"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|BACKUP_COMMAND
operator|.
name|CREATE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
comment|// other commands will be supported in future jira
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

