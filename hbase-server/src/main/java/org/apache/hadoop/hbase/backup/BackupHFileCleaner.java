begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|BaseHFileCleanerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Implementation of a file cleaner that checks if an hfile is still referenced by backup before  * deleting it from hfile archive directory.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|BackupHFileCleaner
extends|extends
name|BaseHFileCleanerDelegate
implements|implements
name|Abortable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupHFileCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aborted
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|long
name|prevReadFromBackupTbl
init|=
literal|0
decl_stmt|,
comment|// timestamp of most recent read from backup:system table
name|secondPrevReadFromBackupTbl
init|=
literal|0
decl_stmt|;
comment|// timestamp of 2nd most recent read from backup:system table
comment|//used by unit test to skip reading backup:system
specifier|private
name|boolean
name|checkForFullyBackedUpTables
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TableName
argument_list|>
name|fullyBackedUpTables
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFilenameFromBulkLoad
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
index|[]
name|maps
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|filenames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
range|:
name|maps
control|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|List
argument_list|<
name|Path
argument_list|>
name|paths
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|filenames
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filenames
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|loadHFileRefs
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BackupSystemTable
name|tbl
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
index|[]
name|res
init|=
name|tbl
operator|.
name|readBulkLoadedFiles
argument_list|(
literal|null
argument_list|,
name|tableList
argument_list|)
decl_stmt|;
name|secondPrevReadFromBackupTbl
operator|=
name|prevReadFromBackupTbl
expr_stmt|;
name|prevReadFromBackupTbl
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
return|return
name|getFilenameFromBulkLoad
argument_list|(
name|res
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|setCheckForFullyBackedUpTables
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|checkForFullyBackedUpTables
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|getDeletableFiles
parameter_list|(
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
name|files
return|;
block|}
comment|// obtain the Set of TableName's which have been fully backed up
comment|// so that we filter BulkLoad to be returned from server
if|if
condition|(
name|checkForFullyBackedUpTables
condition|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
return|return
name|files
return|;
try|try
init|(
name|BackupSystemTable
name|tbl
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|fullyBackedUpTables
operator|=
name|tbl
operator|.
name|getTablesForBackupType
argument_list|(
name|BackupType
operator|.
name|FULL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get tables which have been fully backed up, skipping checking"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|fullyBackedUpTables
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|hfileRefs
decl_stmt|;
try|try
block|{
name|hfileRefs
operator|=
name|loadHFileRefs
argument_list|(
name|fullyBackedUpTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read hfile references, skipping checking deletable files"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|deletables
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|files
argument_list|,
operator|new
name|Predicate
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|FileStatus
name|file
parameter_list|)
block|{
comment|// If the file is recent, be conservative and wait for one more scan of backup:system table
if|if
condition|(
name|file
operator|.
name|getModificationTime
argument_list|()
operator|>
name|secondPrevReadFromBackupTbl
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|hfile
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|foundHFileRef
init|=
name|hfileRefs
operator|.
name|contains
argument_list|(
name|hfile
argument_list|)
decl_stmt|;
return|return
operator|!
name|foundHFileRef
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|deletables
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileDeletable
parameter_list|(
name|FileStatus
name|fStat
parameter_list|)
block|{
comment|// work is done in getDeletableFiles()
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't establish connection"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stopped
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got "
operator|+
name|ioe
operator|+
literal|" when closing connection"
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aborting ReplicationHFileCleaner because "
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
block|}
end_class

end_unit

