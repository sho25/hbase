begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|BUCKET_CACHE_SIZE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
operator|.
name|BlockCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|MemorySizeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Stores all of the cache objects and configuration for a single HFile.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CacheConfig
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheConfig
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Disabled cache configuration    */
specifier|public
specifier|static
specifier|final
name|CacheConfig
name|DISABLED
init|=
operator|new
name|CacheConfig
argument_list|()
decl_stmt|;
comment|/**    * Configuration key to cache data blocks on read. Bloom blocks and index blocks are always be    * cached if the block cache is enabled.    */
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_DATA_ON_READ_KEY
init|=
literal|"hbase.block.data.cacheonread"
decl_stmt|;
comment|/**    * Configuration key to cache data blocks on write. There are separate    * switches for bloom blocks and non-root index blocks.    */
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_BLOCKS_ON_WRITE_KEY
init|=
literal|"hbase.rs.cacheblocksonwrite"
decl_stmt|;
comment|/**    * Configuration key to cache leaf and intermediate-level index blocks on    * write.    */
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
init|=
literal|"hfile.block.index.cacheonwrite"
decl_stmt|;
comment|/**    * Configuration key to cache compound bloom filter blocks on write.    */
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
init|=
literal|"hfile.block.bloom.cacheonwrite"
decl_stmt|;
comment|/**    * Configuration key to cache data blocks in compressed and/or encrypted format.    */
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_DATA_BLOCKS_COMPRESSED_KEY
init|=
literal|"hbase.block.data.cachecompressed"
decl_stmt|;
comment|/**    * Configuration key to evict all blocks of a given file from the block cache    * when the file is closed.    */
specifier|public
specifier|static
specifier|final
name|String
name|EVICT_BLOCKS_ON_CLOSE_KEY
init|=
literal|"hbase.rs.evictblocksonclose"
decl_stmt|;
comment|/**    * Configuration keys for Bucket cache    */
comment|/**    * If the chosen ioengine can persist its state across restarts, the path to the file to persist    * to. This file is NOT the data file. It is a file into which we will serialize the map of    * what is in the data file. For example, if you pass the following argument as    * BUCKET_CACHE_IOENGINE_KEY ("hbase.bucketcache.ioengine"),    *<code>file:/tmp/bucketcache.data</code>, then we will write the bucketcache data to the file    *<code>/tmp/bucketcache.data</code> but the metadata on where the data is in the supplied file    * is an in-memory map that needs to be persisted across restarts. Where to store this    * in-memory state is what you supply here: e.g.<code>/tmp/bucketcache.map</code>.    */
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_PERSISTENT_PATH_KEY
init|=
literal|"hbase.bucketcache.persistent.path"
decl_stmt|;
comment|/**    * If the bucket cache is used in league with the lru on-heap block cache (meta blocks such    * as indices and blooms are kept in the lru blockcache and the data blocks in the    * bucket cache).    */
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_COMBINED_KEY
init|=
literal|"hbase.bucketcache.combinedcache.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_WRITER_THREADS_KEY
init|=
literal|"hbase.bucketcache.writer.threads"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_WRITER_QUEUE_KEY
init|=
literal|"hbase.bucketcache.writer.queuelength"
decl_stmt|;
comment|/**    * A comma-delimited array of values for use as bucket sizes.    */
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_BUCKETS_KEY
init|=
literal|"hbase.bucketcache.bucket.sizes"
decl_stmt|;
comment|/**    * Defaults for Bucket cache    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_BUCKET_CACHE_COMBINED
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUCKET_CACHE_WRITER_THREADS
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUCKET_CACHE_WRITER_QUEUE
init|=
literal|64
decl_stmt|;
comment|/**    * Configuration key to prefetch all blocks of a given file into the block cache    * when the file is opened.    */
specifier|public
specifier|static
specifier|final
name|String
name|PREFETCH_BLOCKS_ON_OPEN_KEY
init|=
literal|"hbase.rs.prefetchblocksonopen"
decl_stmt|;
comment|/**    * The target block size used by blockcache instances. Defaults to    * {@link HConstants#DEFAULT_BLOCKSIZE}.    * TODO: this config point is completely wrong, as it's used to determine the    * target block size of BlockCache instances. Rename.    */
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKCACHE_BLOCKSIZE_KEY
init|=
literal|"hbase.offheapcache.minblocksize"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTERNAL_BLOCKCACHE_KEY
init|=
literal|"hbase.blockcache.use.external"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|EXTERNAL_BLOCKCACHE_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTERNAL_BLOCKCACHE_CLASS_KEY
init|=
literal|"hbase.blockcache.external.class"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DROP_BEHIND_CACHE_COMPACTION_KEY
init|=
literal|"hbase.hfile.drop.behind.compaction"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DROP_BEHIND_CACHE_COMPACTION_DEFAULT
init|=
literal|true
decl_stmt|;
comment|/**    * Enum of all built in external block caches.    * This is used for config.    */
specifier|private
specifier|static
enum|enum
name|ExternalBlockCaches
block|{
name|memcached
argument_list|(
literal|"org.apache.hadoop.hbase.io.hfile.MemcachedBlockCache"
argument_list|)
block|;
comment|// TODO(eclark): Consider more. Redis, etc.
name|Class
argument_list|<
name|?
extends|extends
name|BlockCache
argument_list|>
name|clazz
decl_stmt|;
name|ExternalBlockCaches
parameter_list|(
name|String
name|clazzName
parameter_list|)
block|{
try|try
block|{
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockCache
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnef
parameter_list|)
block|{
name|clazz
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|ExternalBlockCaches
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockCache
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
block|}
comment|// Defaults
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_DATA_ON_READ
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_DATA_ON_WRITE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_IN_MEMORY
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_INDEXES_ON_WRITE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_EVICT_ON_CLOSE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_DATA_COMPRESSED
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PREFETCH_ON_OPEN
init|=
literal|false
decl_stmt|;
comment|/** Local reference to the block cache, null if completely disabled */
specifier|private
specifier|final
name|BlockCache
name|blockCache
decl_stmt|;
comment|/**    * Whether blocks should be cached on read (default is on if there is a    * cache but this can be turned off on a per-family or per-request basis).    * If off we will STILL cache meta blocks; i.e. INDEX and BLOOM types.    * This cannot be disabled.    */
specifier|private
name|boolean
name|cacheDataOnRead
decl_stmt|;
comment|/** Whether blocks should be flagged as in-memory when being cached */
specifier|private
specifier|final
name|boolean
name|inMemory
decl_stmt|;
comment|/** Whether data blocks should be cached when new files are written */
specifier|private
name|boolean
name|cacheDataOnWrite
decl_stmt|;
comment|/** Whether index blocks should be cached when new files are written */
specifier|private
specifier|final
name|boolean
name|cacheIndexesOnWrite
decl_stmt|;
comment|/** Whether compound bloom filter blocks should be cached on write */
specifier|private
specifier|final
name|boolean
name|cacheBloomsOnWrite
decl_stmt|;
comment|/** Whether blocks of a file should be evicted when the file is closed */
specifier|private
name|boolean
name|evictOnClose
decl_stmt|;
comment|/** Whether data blocks should be stored in compressed and/or encrypted form in the cache */
specifier|private
specifier|final
name|boolean
name|cacheDataCompressed
decl_stmt|;
comment|/** Whether data blocks should be prefetched into the cache */
specifier|private
specifier|final
name|boolean
name|prefetchOnOpen
decl_stmt|;
comment|/**    * If true and if more than one tier in this cache deploy -- e.g. CombinedBlockCache has an L1    * and an L2 tier -- then cache data blocks up in the L1 tier (The meta blocks are likely being    * cached up in L1 already.  At least this is the case if CombinedBlockCache).    */
specifier|private
name|boolean
name|cacheDataInL1
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|dropBehindCompaction
decl_stmt|;
comment|/**    * Create a cache configuration using the specified configuration object and    * family descriptor.    * @param conf hbase configuration    * @param family column family configuration    */
specifier|public
name|CacheConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HColumnDescriptor
name|family
parameter_list|)
block|{
name|this
argument_list|(
name|CacheConfig
operator|.
name|instantiateBlockCache
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_DATA_ON_READ_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_ON_READ
argument_list|)
operator|&&
name|family
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|,
name|family
operator|.
name|isInMemory
argument_list|()
argument_list|,
comment|// For the following flags we enable them regardless of per-schema settings
comment|// if they are enabled in the global configuration.
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_ON_WRITE
argument_list|)
operator|||
name|family
operator|.
name|isCacheDataOnWrite
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_INDEXES_ON_WRITE
argument_list|)
operator|||
name|family
operator|.
name|isCacheIndexesOnWrite
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
argument_list|)
operator|||
name|family
operator|.
name|isCacheBloomsOnWrite
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|EVICT_BLOCKS_ON_CLOSE_KEY
argument_list|,
name|DEFAULT_EVICT_ON_CLOSE
argument_list|)
operator|||
name|family
operator|.
name|isEvictBlocksOnClose
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_DATA_BLOCKS_COMPRESSED_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_COMPRESSED
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|PREFETCH_BLOCKS_ON_OPEN_KEY
argument_list|,
name|DEFAULT_PREFETCH_ON_OPEN
argument_list|)
operator|||
name|family
operator|.
name|isPrefetchBlocksOnOpen
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|HColumnDescriptor
operator|.
name|CACHE_DATA_IN_L1
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_CACHE_DATA_IN_L1
argument_list|)
operator|||
name|family
operator|.
name|isCacheDataInL1
argument_list|()
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|DROP_BEHIND_CACHE_COMPACTION_KEY
argument_list|,
name|DROP_BEHIND_CACHE_COMPACTION_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created cacheConfig for "
operator|+
name|family
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|": "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a cache configuration using the specified configuration object and    * defaults for family level settings. Only use if no column family context. Prefer    * {@link CacheConfig#CacheConfig(Configuration, HColumnDescriptor)}    * @see #CacheConfig(Configuration, HColumnDescriptor)    * @param conf hbase configuration    */
specifier|public
name|CacheConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|CacheConfig
operator|.
name|instantiateBlockCache
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_DATA_ON_READ_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_ON_READ
argument_list|)
argument_list|,
name|DEFAULT_IN_MEMORY
argument_list|,
comment|// This is a family-level setting so can't be set
comment|// strictly from conf
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_ON_WRITE
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_INDEXES_ON_WRITE
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
argument_list|,
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|EVICT_BLOCKS_ON_CLOSE_KEY
argument_list|,
name|DEFAULT_EVICT_ON_CLOSE
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|CACHE_DATA_BLOCKS_COMPRESSED_KEY
argument_list|,
name|DEFAULT_CACHE_DATA_COMPRESSED
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|PREFETCH_BLOCKS_ON_OPEN_KEY
argument_list|,
name|DEFAULT_PREFETCH_ON_OPEN
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|HColumnDescriptor
operator|.
name|CACHE_DATA_IN_L1
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_CACHE_DATA_IN_L1
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|DROP_BEHIND_CACHE_COMPACTION_KEY
argument_list|,
name|DROP_BEHIND_CACHE_COMPACTION_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created cacheConfig: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a block cache configuration with the specified cache and configuration parameters.    * @param blockCache reference to block cache, null if completely disabled    * @param cacheDataOnRead whether DATA blocks should be cached on read (we always cache INDEX    *          blocks and BLOOM blocks; this cannot be disabled).    * @param inMemory whether blocks should be flagged as in-memory    * @param cacheDataOnWrite whether data blocks should be cached on write    * @param cacheIndexesOnWrite whether index blocks should be cached on write    * @param cacheBloomsOnWrite whether blooms should be cached on write    * @param evictOnClose whether blocks should be evicted when HFile is closed    * @param cacheDataCompressed whether to store blocks as compressed in the cache    * @param prefetchOnOpen whether to prefetch blocks upon open    * @param cacheDataInL1 If more than one cache tier deployed, if true, cache this column families    *          data blocks up in the L1 tier.    * @param dropBehindCompaction indicate that we should set drop behind to true when open a store    *          file reader for compaction    */
name|CacheConfig
parameter_list|(
specifier|final
name|BlockCache
name|blockCache
parameter_list|,
specifier|final
name|boolean
name|cacheDataOnRead
parameter_list|,
specifier|final
name|boolean
name|inMemory
parameter_list|,
specifier|final
name|boolean
name|cacheDataOnWrite
parameter_list|,
specifier|final
name|boolean
name|cacheIndexesOnWrite
parameter_list|,
specifier|final
name|boolean
name|cacheBloomsOnWrite
parameter_list|,
specifier|final
name|boolean
name|evictOnClose
parameter_list|,
specifier|final
name|boolean
name|cacheDataCompressed
parameter_list|,
specifier|final
name|boolean
name|prefetchOnOpen
parameter_list|,
specifier|final
name|boolean
name|cacheDataInL1
parameter_list|,
specifier|final
name|boolean
name|dropBehindCompaction
parameter_list|)
block|{
name|this
operator|.
name|blockCache
operator|=
name|blockCache
expr_stmt|;
name|this
operator|.
name|cacheDataOnRead
operator|=
name|cacheDataOnRead
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
name|inMemory
expr_stmt|;
name|this
operator|.
name|cacheDataOnWrite
operator|=
name|cacheDataOnWrite
expr_stmt|;
name|this
operator|.
name|cacheIndexesOnWrite
operator|=
name|cacheIndexesOnWrite
expr_stmt|;
name|this
operator|.
name|cacheBloomsOnWrite
operator|=
name|cacheBloomsOnWrite
expr_stmt|;
name|this
operator|.
name|evictOnClose
operator|=
name|evictOnClose
expr_stmt|;
name|this
operator|.
name|cacheDataCompressed
operator|=
name|cacheDataCompressed
expr_stmt|;
name|this
operator|.
name|prefetchOnOpen
operator|=
name|prefetchOnOpen
expr_stmt|;
name|this
operator|.
name|cacheDataInL1
operator|=
name|cacheDataInL1
expr_stmt|;
name|this
operator|.
name|dropBehindCompaction
operator|=
name|dropBehindCompaction
expr_stmt|;
block|}
comment|/**    * Constructs a cache configuration copied from the specified configuration.    * @param cacheConf    */
specifier|public
name|CacheConfig
parameter_list|(
name|CacheConfig
name|cacheConf
parameter_list|)
block|{
name|this
argument_list|(
name|cacheConf
operator|.
name|blockCache
argument_list|,
name|cacheConf
operator|.
name|cacheDataOnRead
argument_list|,
name|cacheConf
operator|.
name|inMemory
argument_list|,
name|cacheConf
operator|.
name|cacheDataOnWrite
argument_list|,
name|cacheConf
operator|.
name|cacheIndexesOnWrite
argument_list|,
name|cacheConf
operator|.
name|cacheBloomsOnWrite
argument_list|,
name|cacheConf
operator|.
name|evictOnClose
argument_list|,
name|cacheConf
operator|.
name|cacheDataCompressed
argument_list|,
name|cacheConf
operator|.
name|prefetchOnOpen
argument_list|,
name|cacheConf
operator|.
name|cacheDataInL1
argument_list|,
name|cacheConf
operator|.
name|dropBehindCompaction
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CacheConfig
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks whether the block cache is enabled.    */
specifier|public
name|boolean
name|isBlockCacheEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockCache
operator|!=
literal|null
return|;
block|}
comment|/**    * Returns the block cache.    * @return the block cache, or null if caching is completely disabled    */
specifier|public
name|BlockCache
name|getBlockCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockCache
return|;
block|}
comment|/**    * Returns whether the DATA blocks of this HFile should be cached on read or not (we always    * cache the meta blocks, the INDEX and BLOOM blocks).    * @return true if blocks should be cached on read, false if not    */
specifier|public
name|boolean
name|shouldCacheDataOnRead
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|cacheDataOnRead
return|;
block|}
specifier|public
name|boolean
name|shouldDropBehindCompaction
parameter_list|()
block|{
return|return
name|dropBehindCompaction
return|;
block|}
comment|/**    * Should we cache a block of a particular category? We always cache    * important blocks such as index blocks, as long as the block cache is    * available.    */
specifier|public
name|boolean
name|shouldCacheBlockOnRead
parameter_list|(
name|BlockCategory
name|category
parameter_list|)
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
operator|(
name|cacheDataOnRead
operator|||
name|category
operator|==
name|BlockCategory
operator|.
name|INDEX
operator|||
name|category
operator|==
name|BlockCategory
operator|.
name|BLOOM
operator|||
operator|(
name|prefetchOnOpen
operator|&&
operator|(
name|category
operator|!=
name|BlockCategory
operator|.
name|META
operator|&&
name|category
operator|!=
name|BlockCategory
operator|.
name|UNKNOWN
operator|)
operator|)
operator|)
return|;
block|}
comment|/**    * @return true if blocks in this file should be flagged as in-memory    */
specifier|public
name|boolean
name|isInMemory
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|inMemory
return|;
block|}
comment|/**    * @return True if cache data blocks in L1 tier (if more than one tier in block cache deploy).    */
specifier|public
name|boolean
name|isCacheDataInL1
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|cacheDataInL1
return|;
block|}
comment|/**    * @return true if data blocks should be written to the cache when an HFile is    *         written, false if not    */
specifier|public
name|boolean
name|shouldCacheDataOnWrite
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|cacheDataOnWrite
return|;
block|}
comment|/**    * Only used for testing.    * @param cacheDataOnWrite whether data blocks should be written to the cache    *                         when an HFile is written    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setCacheDataOnWrite
parameter_list|(
name|boolean
name|cacheDataOnWrite
parameter_list|)
block|{
name|this
operator|.
name|cacheDataOnWrite
operator|=
name|cacheDataOnWrite
expr_stmt|;
block|}
comment|/**    * Only used for testing.    * @param cacheDataInL1 Whether to cache data blocks up in l1 (if a multi-tier cache    * implementation).    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setCacheDataInL1
parameter_list|(
name|boolean
name|cacheDataInL1
parameter_list|)
block|{
name|this
operator|.
name|cacheDataInL1
operator|=
name|cacheDataInL1
expr_stmt|;
block|}
comment|/**    * @return true if index blocks should be written to the cache when an HFile    *         is written, false if not    */
specifier|public
name|boolean
name|shouldCacheIndexesOnWrite
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|cacheIndexesOnWrite
return|;
block|}
comment|/**    * @return true if bloom blocks should be written to the cache when an HFile    *         is written, false if not    */
specifier|public
name|boolean
name|shouldCacheBloomsOnWrite
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|cacheBloomsOnWrite
return|;
block|}
comment|/**    * @return true if blocks should be evicted from the cache when an HFile    *         reader is closed, false if not    */
specifier|public
name|boolean
name|shouldEvictOnClose
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|evictOnClose
return|;
block|}
comment|/**    * Only used for testing.    * @param evictOnClose whether blocks should be evicted from the cache when an    *                     HFile reader is closed    */
specifier|public
name|void
name|setEvictOnClose
parameter_list|(
name|boolean
name|evictOnClose
parameter_list|)
block|{
name|this
operator|.
name|evictOnClose
operator|=
name|evictOnClose
expr_stmt|;
block|}
comment|/**    * @return true if data blocks should be compressed in the cache, false if not    */
specifier|public
name|boolean
name|shouldCacheDataCompressed
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|cacheDataOnRead
operator|&&
name|this
operator|.
name|cacheDataCompressed
return|;
block|}
comment|/**    * @return true if this {@link BlockCategory} should be compressed in blockcache, false otherwise    */
specifier|public
name|boolean
name|shouldCacheCompressed
parameter_list|(
name|BlockCategory
name|category
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isBlockCacheEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|DATA
case|:
return|return
name|this
operator|.
name|cacheDataOnRead
operator|&&
name|this
operator|.
name|cacheDataCompressed
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * @return true if blocks should be prefetched into the cache on open, false if not    */
specifier|public
name|boolean
name|shouldPrefetchOnOpen
parameter_list|()
block|{
return|return
name|isBlockCacheEnabled
argument_list|()
operator|&&
name|this
operator|.
name|prefetchOnOpen
return|;
block|}
comment|/**    * Return true if we may find this type of block in block cache.    *<p>    * TODO: today {@code family.isBlockCacheEnabled()} only means {@code cacheDataOnRead}, so here we    * consider lots of other configurations such as {@code cacheDataOnWrite}. We should fix this in    * the future, {@code cacheDataOnWrite} should honor the CF level {@code isBlockCacheEnabled}    * configuration.    */
specifier|public
name|boolean
name|shouldReadBlockFromCache
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isBlockCacheEnabled
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cacheDataOnRead
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|prefetchOnOpen
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cacheDataOnWrite
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|blockType
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|blockType
operator|.
name|getCategory
argument_list|()
operator|==
name|BlockCategory
operator|.
name|BLOOM
operator|||
name|blockType
operator|.
name|getCategory
argument_list|()
operator|==
name|BlockCategory
operator|.
name|INDEX
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * If we make sure the block could not be cached, we will not acquire the lock    * otherwise we will acquire lock    */
specifier|public
name|boolean
name|shouldLockOnCacheMiss
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
block|{
if|if
condition|(
name|blockType
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|shouldCacheBlockOnRead
argument_list|(
name|blockType
operator|.
name|getCategory
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isBlockCacheEnabled
argument_list|()
condition|)
block|{
return|return
literal|"CacheConfig:disabled"
return|;
block|}
return|return
literal|"blockCache="
operator|+
name|getBlockCache
argument_list|()
operator|+
literal|", cacheDataOnRead="
operator|+
name|shouldCacheDataOnRead
argument_list|()
operator|+
literal|", cacheDataOnWrite="
operator|+
name|shouldCacheDataOnWrite
argument_list|()
operator|+
literal|", cacheIndexesOnWrite="
operator|+
name|shouldCacheIndexesOnWrite
argument_list|()
operator|+
literal|", cacheBloomsOnWrite="
operator|+
name|shouldCacheBloomsOnWrite
argument_list|()
operator|+
literal|", cacheEvictOnClose="
operator|+
name|shouldEvictOnClose
argument_list|()
operator|+
literal|", cacheDataCompressed="
operator|+
name|shouldCacheDataCompressed
argument_list|()
operator|+
literal|", prefetchOnOpen="
operator|+
name|shouldPrefetchOnOpen
argument_list|()
return|;
block|}
comment|// Static block cache reference and methods
comment|/**    * Static reference to the block cache, or null if no caching should be used    * at all.    */
comment|// Clear this if in tests you'd make more than one block cache instance.
annotation|@
name|VisibleForTesting
specifier|static
name|BlockCache
name|GLOBAL_BLOCK_CACHE_INSTANCE
decl_stmt|;
specifier|private
specifier|static
name|LruBlockCache
name|GLOBAL_L1_CACHE_INSTANCE
decl_stmt|;
comment|/** Boolean whether we have disabled the block cache entirely. */
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|blockCacheDisabled
init|=
literal|false
decl_stmt|;
comment|/**    * @param c Configuration to use.    * @return An L1 instance.  Currently an instance of LruBlockCache.    */
specifier|public
specifier|static
name|LruBlockCache
name|getL1
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
return|return
name|getL1Internal
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**    * @param c Configuration to use.    * @return An L1 instance.  Currently an instance of LruBlockCache.    */
specifier|private
specifier|synchronized
specifier|static
name|LruBlockCache
name|getL1Internal
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
if|if
condition|(
name|GLOBAL_L1_CACHE_INSTANCE
operator|!=
literal|null
condition|)
return|return
name|GLOBAL_L1_CACHE_INSTANCE
return|;
specifier|final
name|long
name|lruCacheSize
init|=
name|MemorySizeUtil
operator|.
name|getLruCacheSize
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|lruCacheSize
operator|<
literal|0
condition|)
block|{
name|blockCacheDisabled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|blockCacheDisabled
condition|)
return|return
literal|null
return|;
name|int
name|blockSize
init|=
name|c
operator|.
name|getInt
argument_list|(
name|BLOCKCACHE_BLOCKSIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocating LruBlockCache size="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|lruCacheSize
argument_list|)
operator|+
literal|", blockSize="
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|GLOBAL_L1_CACHE_INSTANCE
operator|=
operator|new
name|LruBlockCache
argument_list|(
name|lruCacheSize
argument_list|,
name|blockSize
argument_list|,
literal|true
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|GLOBAL_L1_CACHE_INSTANCE
return|;
block|}
comment|/**    * @param c Configuration to use.    * @return Returns L2 block cache instance (for now it is BucketCache BlockCache all the time)    * or null if not supposed to be a L2.    */
specifier|private
specifier|static
name|BlockCache
name|getL2
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
specifier|final
name|boolean
name|useExternal
init|=
name|c
operator|.
name|getBoolean
argument_list|(
name|EXTERNAL_BLOCKCACHE_KEY
argument_list|,
name|EXTERNAL_BLOCKCACHE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to use "
operator|+
operator|(
name|useExternal
condition|?
literal|" External"
else|:
literal|" Internal"
operator|)
operator|+
literal|" l2 cache"
argument_list|)
expr_stmt|;
block|}
comment|// If we want to use an external block cache then create that.
if|if
condition|(
name|useExternal
condition|)
block|{
return|return
name|getExternalBlockcache
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|// otherwise use the bucket cache.
return|return
name|getBucketCache
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BlockCache
name|getExternalBlockcache
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
name|Class
name|klass
init|=
literal|null
decl_stmt|;
comment|// Get the class, from the config. s
try|try
block|{
name|klass
operator|=
name|ExternalBlockCaches
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|EXTERNAL_BLOCKCACHE_CLASS_KEY
argument_list|,
literal|"memcache"
argument_list|)
argument_list|)
operator|.
name|clazz
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exception
parameter_list|)
block|{
try|try
block|{
name|klass
operator|=
name|c
operator|.
name|getClass
argument_list|(
name|EXTERNAL_BLOCKCACHE_CLASS_KEY
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hbase.io.hfile.MemcachedBlockCache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// Now try and create an instance of the block cache.
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating external block cache of type: "
operator|+
name|klass
argument_list|)
expr_stmt|;
return|return
operator|(
name|BlockCache
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|c
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating external block cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|BlockCache
name|getBucketCache
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
comment|// Check for L2.  ioengine name must be non-null.
name|String
name|bucketCacheIOEngineName
init|=
name|c
operator|.
name|get
argument_list|(
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketCacheIOEngineName
operator|==
literal|null
operator|||
name|bucketCacheIOEngineName
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|int
name|blockSize
init|=
name|c
operator|.
name|getInt
argument_list|(
name|BLOCKCACHE_BLOCKSIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|bucketCacheSize
init|=
name|MemorySizeUtil
operator|.
name|getBucketCacheSize
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketCacheSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bucketCacheSize<= 0; Check "
operator|+
name|BUCKET_CACHE_SIZE_KEY
operator|+
literal|" setting and/or server java heap size"
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
literal|"hbase.bucketcache.percentage.in.combinedcache"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration 'hbase.bucketcache.percentage.in.combinedcache' is no longer "
operator|+
literal|"respected. See comments in http://hbase.apache.org/book.html#_changes_of_note"
argument_list|)
expr_stmt|;
block|}
name|int
name|writerThreads
init|=
name|c
operator|.
name|getInt
argument_list|(
name|BUCKET_CACHE_WRITER_THREADS_KEY
argument_list|,
name|DEFAULT_BUCKET_CACHE_WRITER_THREADS
argument_list|)
decl_stmt|;
name|int
name|writerQueueLen
init|=
name|c
operator|.
name|getInt
argument_list|(
name|BUCKET_CACHE_WRITER_QUEUE_KEY
argument_list|,
name|DEFAULT_BUCKET_CACHE_WRITER_QUEUE
argument_list|)
decl_stmt|;
name|String
name|persistentPath
init|=
name|c
operator|.
name|get
argument_list|(
name|BUCKET_CACHE_PERSISTENT_PATH_KEY
argument_list|)
decl_stmt|;
name|String
index|[]
name|configuredBucketSizes
init|=
name|c
operator|.
name|getStrings
argument_list|(
name|BUCKET_CACHE_BUCKETS_KEY
argument_list|)
decl_stmt|;
name|int
index|[]
name|bucketSizes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configuredBucketSizes
operator|!=
literal|null
condition|)
block|{
name|bucketSizes
operator|=
operator|new
name|int
index|[
name|configuredBucketSizes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configuredBucketSizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bucketSizes
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|configuredBucketSizes
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|BucketCache
name|bucketCache
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|ioErrorsTolerationDuration
init|=
name|c
operator|.
name|getInt
argument_list|(
literal|"hbase.bucketcache.ioengine.errors.tolerated.duration"
argument_list|,
name|BucketCache
operator|.
name|DEFAULT_ERROR_TOLERATION_DURATION
argument_list|)
decl_stmt|;
comment|// Bucket cache logs its stats on creation internal to the constructor.
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
name|bucketCacheIOEngineName
argument_list|,
name|bucketCacheSize
argument_list|,
name|blockSize
argument_list|,
name|bucketSizes
argument_list|,
name|writerThreads
argument_list|,
name|writerQueueLen
argument_list|,
name|persistentPath
argument_list|,
name|ioErrorsTolerationDuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't instantiate bucket cache"
argument_list|,
name|ioex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioex
argument_list|)
throw|;
block|}
return|return
name|bucketCache
return|;
block|}
comment|/**    * Returns the block cache or<code>null</code> in case none should be used.    * Sets GLOBAL_BLOCK_CACHE_INSTANCE    *    * @param conf  The current configuration.    * @return The block cache or<code>null</code>.    */
specifier|public
specifier|static
specifier|synchronized
name|BlockCache
name|instantiateBlockCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|!=
literal|null
condition|)
return|return
name|GLOBAL_BLOCK_CACHE_INSTANCE
return|;
if|if
condition|(
name|blockCacheDisabled
condition|)
return|return
literal|null
return|;
name|LruBlockCache
name|l1
init|=
name|getL1Internal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// blockCacheDisabled is set as a side-effect of getL1Internal(), so check it again after the call.
if|if
condition|(
name|blockCacheDisabled
condition|)
return|return
literal|null
return|;
name|BlockCache
name|l2
init|=
name|getL2
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|l2
operator|==
literal|null
condition|)
block|{
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
name|l1
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|useExternal
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|EXTERNAL_BLOCKCACHE_KEY
argument_list|,
name|EXTERNAL_BLOCKCACHE_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|combinedWithLru
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|BUCKET_CACHE_COMBINED_KEY
argument_list|,
name|DEFAULT_BUCKET_CACHE_COMBINED
argument_list|)
decl_stmt|;
if|if
condition|(
name|useExternal
condition|)
block|{
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
operator|new
name|InclusiveCombinedBlockCache
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|combinedWithLru
condition|)
block|{
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
operator|new
name|CombinedBlockCache
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// L1 and L2 are not 'combined'.  They are connected via the LruBlockCache victimhandler
comment|// mechanism.  It is a little ugly but works according to the following: when the
comment|// background eviction thread runs, blocks evicted from L1 will go to L2 AND when we get
comment|// a block from the L1 cache, if not in L1, we will search L2.
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
name|l1
expr_stmt|;
block|}
block|}
name|l1
operator|.
name|setVictimCache
argument_list|(
name|l2
argument_list|)
expr_stmt|;
block|}
return|return
name|GLOBAL_BLOCK_CACHE_INSTANCE
return|;
block|}
comment|// Supposed to use only from tests. Some tests want to reinit the Global block cache instance
annotation|@
name|VisibleForTesting
specifier|static
specifier|synchronized
name|void
name|clearGlobalInstances
parameter_list|()
block|{
name|GLOBAL_L1_CACHE_INSTANCE
operator|=
literal|null
expr_stmt|;
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

