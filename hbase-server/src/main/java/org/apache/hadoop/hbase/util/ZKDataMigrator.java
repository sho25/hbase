begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * utlity method to migrate zookeeper data across HBase versions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKDataMigrator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKDataMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Method for table states migration.    * Used when upgrading from pre-2.0 to 2.0    * Reading state from zk, applying them to internal state    * and delete.    * Used by master to clean migration from zk based states to    * table descriptor based states.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableState
operator|.
name|State
argument_list|>
name|queryForTableStates
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableState
operator|.
name|State
argument_list|>
name|rv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|tableZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
return|return
name|rv
return|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TableState
operator|.
name|State
name|newState
init|=
name|TableState
operator|.
name|State
operator|.
name|ENABLED
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ENABLED
case|:
name|newState
operator|=
name|TableState
operator|.
name|State
operator|.
name|ENABLED
expr_stmt|;
break|break;
case|case
name|DISABLED
case|:
name|newState
operator|=
name|TableState
operator|.
name|State
operator|.
name|DISABLED
expr_stmt|;
break|break;
case|case
name|DISABLING
case|:
name|newState
operator|=
name|TableState
operator|.
name|State
operator|.
name|DISABLING
expr_stmt|;
break|break;
case|case
name|ENABLING
case|:
name|newState
operator|=
name|TableState
operator|.
name|State
operator|.
name|ENABLING
expr_stmt|;
break|break;
default|default:
block|}
block|}
name|rv
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
return|return
name|rv
return|;
block|}
comment|/**    * Gets table state from ZK.    * @param zkw ZKWatcher instance to use    * @param tableName table we're checking    * @return Null or {@link ZooKeeperProtos.DeprecatedTableState.State} found in znode.    * @throws KeeperException    */
annotation|@
name|Deprecated
specifier|private
specifier|static
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|State
name|getTableState
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|znode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
try|try
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|data
argument_list|,
name|magicLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|magicLen
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|KeeperException
name|ke
init|=
operator|new
name|KeeperException
operator|.
name|DataInconsistencyException
argument_list|()
decl_stmt|;
name|ke
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ke
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

