begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureStateSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureYieldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|StateMachineProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
import|;
end_import

begin_comment
comment|/**  * Leave here only for checking if we can successfully start the master.  * @deprecated Do not use any more, leave it here only for compatible. The recovery work will be  *             done in {@link ServerCrashProcedure} directly, and the initial work for meta table  *             will be done by {@link InitMetaProcedure}.  * @see ServerCrashProcedure  * @see InitMetaProcedure  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RecoverMetaProcedure
extends|extends
name|StateMachineProcedure
argument_list|<
name|MasterProcedureEnv
argument_list|,
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
argument_list|>
implements|implements
name|MetaProcedureInterface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecoverMetaProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ServerName
name|failedMetaServer
decl_stmt|;
specifier|private
name|boolean
name|shouldSplitWal
decl_stmt|;
specifier|private
name|int
name|replicaId
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|public
name|RecoverMetaProcedure
parameter_list|()
block|{    }
annotation|@
name|Override
specifier|protected
name|Flow
name|executeFromState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
name|state
parameter_list|)
throws|throws
name|ProcedureSuspendedException
throws|,
name|ProcedureYieldException
throws|,
name|InterruptedException
block|{
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
name|MasterProcedureEnv
name|env
parameter_list|,
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
name|recoverMetaState
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Can't rollback
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unhandled state="
operator|+
name|recoverMetaState
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
name|getState
parameter_list|(
name|int
name|stateId
parameter_list|)
block|{
return|return
name|RecoverMetaState
operator|.
name|forNumber
argument_list|(
name|stateId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
name|recoverMetaState
parameter_list|)
block|{
return|return
name|recoverMetaState
operator|.
name|getNumber
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MasterProcedureProtos
operator|.
name|RecoverMetaState
name|getInitialState
parameter_list|()
block|{
return|return
name|RecoverMetaState
operator|.
name|RECOVER_META_PREPARE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|toStringClassDetails
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" failedMetaServer="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|failedMetaServer
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", splitWal="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shouldSplitWal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|RecoverMetaStateData
operator|.
name|Builder
name|state
init|=
name|MasterProcedureProtos
operator|.
name|RecoverMetaStateData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setShouldSplitWal
argument_list|(
name|shouldSplitWal
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedMetaServer
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|setFailedMetaServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|failedMetaServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|setReplicaId
argument_list|(
name|replicaId
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|state
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|ProcedureStateSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|MasterProcedureProtos
operator|.
name|RecoverMetaStateData
name|state
init|=
name|serializer
operator|.
name|deserialize
argument_list|(
name|MasterProcedureProtos
operator|.
name|RecoverMetaStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|shouldSplitWal
operator|=
name|state
operator|.
name|hasShouldSplitWal
argument_list|()
operator|&&
name|state
operator|.
name|getShouldSplitWal
argument_list|()
expr_stmt|;
name|this
operator|.
name|failedMetaServer
operator|=
name|state
operator|.
name|hasFailedMetaServer
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|state
operator|.
name|getFailedMetaServer
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|replicaId
operator|=
name|state
operator|.
name|hasReplicaId
argument_list|()
condition|?
name|state
operator|.
name|getReplicaId
argument_list|()
else|:
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
expr_stmt|;
block|}
block|}
end_class

end_unit

