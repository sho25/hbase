begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_comment
comment|/**  * Copy over each of the files in a region's recovered.edits directory to the region's snapshot  * directory.  *<p>  * This is a serial operation over each of the files in the recovered.edits directory and also  * streams all the bytes to the client and then back to the filesystem, so the files being copied  * should be<b>small</b> or it will (a) suck up a lot of bandwidth, and (b) take a long time.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CopyRecoveredEditsTask
extends|extends
name|SnapshotTask
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CopyRecoveredEditsTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|regiondir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|outputDir
decl_stmt|;
comment|/**    * @param snapshot Snapshot being taken    * @param monitor error monitor for the snapshot    * @param fs {@link FileSystem} where the snapshot is being taken    * @param regionDir directory for the region to examine for edits    * @param snapshotRegionDir directory for the region in the snapshot    */
specifier|public
name|CopyRecoveredEditsTask
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|,
name|ForeignExceptionDispatcher
name|monitor
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|regionDir
parameter_list|,
name|Path
name|snapshotRegionDir
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|regiondir
operator|=
name|regionDir
expr_stmt|;
name|this
operator|.
name|outputDir
operator|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|snapshotRegionDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|HLogUtil
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
comment|// copy over each file.
comment|// this is really inefficient (could be trivially parallelized), but is
comment|// really simple to reason about.
for|for
control|(
name|Path
name|source
range|:
name|files
control|)
block|{
comment|// check to see if the file is zero length, in which case we can skip it
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getLen
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
comment|// its not zero length, so copy over the file
name|Path
name|out
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying "
operator|+
name|source
operator|+
literal|" to "
operator|+
name|out
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|fs
argument_list|,
name|source
argument_list|,
name|fs
argument_list|,
name|out
argument_list|,
literal|true
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for errors to the running operation after each file
name|this
operator|.
name|rethrowException
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

