begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A subclass of TableStateManager that mirrors change in state out to zookeeper for hbase-1.x  * clients to pick up; hbase-1.x clients read table state of zookeeper rather than from hbase:meta  * as hbase-2.x clients do. Set "hbase.mirror.table.state.to.zookeeper" to false to disable  * mirroring. See in HMaster where we make the choice. The below does zk updates on a best-effort  * basis only. If we fail updating zk we keep going because only hbase1 clients suffer; we'll just  * log at WARN level.  * @deprecated Since 2.0.0. To be removed in 3.0.0. ZKRegistry#getMetaTableState reads  *   mirrored state so add alternative mechanism before purge else cannot disable hbase:meta table  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MirroringTableStateManager
extends|extends
name|TableStateManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MirroringTableStateManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set this key to true in Configuration to enable mirroring of table state out to zookeeper so    * hbase-1.x clients can pick-up table state. Default value is 'true'.    */
specifier|static
specifier|final
name|String
name|MIRROR_TABLE_STATE_TO_ZK_KEY
init|=
literal|"hbase.mirror.table.state.to.zookeeper"
decl_stmt|;
specifier|public
name|MirroringTableStateManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|metaStateUpdated
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|State
name|newState
parameter_list|)
throws|throws
name|IOException
block|{
name|updateZooKeeper
argument_list|(
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|metaStateDeleted
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteZooKeeper
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateZooKeeper
parameter_list|(
name|TableState
name|tableState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableState
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|znode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|tableZNode
argument_list|,
name|tableState
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure znode exists.
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|znode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
comment|// Now set newState
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|ZooKeeperProtos
operator|.
name|DeprecatedTableState
operator|.
name|State
operator|.
name|valueOf
argument_list|(
name|tableState
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|znode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// Only hbase1 clients suffer if this fails.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed setting table state to zookeeper mirrored for hbase-1.x clients"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This method is called by the super class on each row it finds in the hbase:meta table with
comment|// table state in it.
annotation|@
name|Override
specifier|protected
name|void
name|fixTableState
parameter_list|(
name|TableState
name|tableState
parameter_list|)
throws|throws
name|IOException
block|{
name|updateZooKeeper
argument_list|(
name|tableState
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

