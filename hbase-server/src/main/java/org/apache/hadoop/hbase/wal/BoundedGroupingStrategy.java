begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|RegionGroupingProvider
operator|.
name|RegionGroupingStrategy
import|;
end_import

begin_comment
comment|/**  * A WAL grouping strategy that limits the number of delegate providers (i.e. wal group) to  * "hbase.wal.regiongrouping.numgroups".  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BoundedGroupingStrategy
implements|implements
name|RegionGroupingStrategy
block|{
specifier|static
specifier|final
name|String
name|NUM_REGION_GROUPS
init|=
literal|"hbase.wal.regiongrouping.numgroups"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_REGION_GROUPS
init|=
literal|2
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|groupNameCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|String
index|[]
name|groupNames
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|group
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|)
block|{
name|String
name|idStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|String
name|groupName
init|=
name|groupNameCache
operator|.
name|get
argument_list|(
name|idStr
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|groupName
condition|)
block|{
name|groupName
operator|=
name|groupNames
index|[
name|counter
operator|.
name|getAndIncrement
argument_list|()
operator|%
name|groupNames
operator|.
name|length
index|]
expr_stmt|;
name|String
name|extantName
init|=
name|groupNameCache
operator|.
name|putIfAbsent
argument_list|(
name|idStr
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|extantName
operator|!=
literal|null
condition|)
block|{
return|return
name|extantName
return|;
block|}
block|}
return|return
name|groupName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|providerId
parameter_list|)
block|{
name|int
name|regionGroupNumber
init|=
name|config
operator|.
name|getInt
argument_list|(
name|NUM_REGION_GROUPS
argument_list|,
name|DEFAULT_NUM_REGION_GROUPS
argument_list|)
decl_stmt|;
name|groupNames
operator|=
operator|new
name|String
index|[
name|regionGroupNumber
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionGroupNumber
condition|;
name|i
operator|++
control|)
block|{
name|groupNames
index|[
name|i
index|]
operator|=
name|providerId
operator|+
name|GROUP_NAME_DELIMITER
operator|+
literal|"regiongroup-"
operator|+
name|i
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

