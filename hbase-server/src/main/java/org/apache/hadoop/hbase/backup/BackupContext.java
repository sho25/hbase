begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * An object to encapsulate the information for each backup request  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|BackupContext
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2401435114454300992L
decl_stmt|;
comment|// backup id: a timestamp when we request the backup
specifier|private
name|String
name|backupId
decl_stmt|;
comment|// backup type, full or incremental
specifier|private
name|String
name|type
decl_stmt|;
comment|// target root directory for storing the backup files
specifier|private
name|String
name|targetRootDir
decl_stmt|;
comment|// overall backup status
specifier|private
name|BackupHandler
operator|.
name|BACKUPSTATUS
name|flag
decl_stmt|;
comment|// overall backup phase
specifier|private
name|BackupHandler
operator|.
name|BACKUPPHASE
name|phase
decl_stmt|;
comment|// overall backup failure message
specifier|private
name|String
name|failedMsg
decl_stmt|;
comment|// backup status map for all tables
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BackupStatus
argument_list|>
name|backupStatusMap
decl_stmt|;
comment|// actual start timestamp of the backup process
specifier|private
name|long
name|startTs
decl_stmt|;
comment|// actual end timestamp of the backup process, could be fail or complete
specifier|private
name|long
name|endTs
decl_stmt|;
comment|// the total bytes of incremental logs copied
specifier|private
name|long
name|totalBytesCopied
decl_stmt|;
comment|// for incremental backup, the location of the backed-up hlogs
specifier|private
name|String
name|hlogTargetDir
init|=
literal|null
decl_stmt|;
comment|// incremental backup file list
specifier|transient
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
decl_stmt|;
comment|// new region server log timestamps for table set after distributed log roll
comment|// key - table name, value - map of RegionServer hostname -> last log rolled timestamp
specifier|transient
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tableSetTimestampMap
decl_stmt|;
comment|// cancel flag
specifier|private
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
comment|// backup progress string
specifier|private
name|String
name|progress
decl_stmt|;
specifier|public
name|BackupContext
parameter_list|()
block|{   }
specifier|public
name|BackupContext
parameter_list|(
name|String
name|backupId
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|tables
parameter_list|,
name|String
name|targetRootDir
parameter_list|,
name|String
name|snapshot
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|backupStatusMap
operator|==
literal|null
condition|)
block|{
name|backupStatusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BackupStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|targetRootDir
operator|=
name|targetRootDir
expr_stmt|;
name|this
operator|.
name|addTables
argument_list|(
name|tables
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_TYPE_INCR
argument_list|)
condition|)
block|{
name|setHlogTargetDir
argument_list|(
name|HBackupFileSystem
operator|.
name|getLogBackupDir
argument_list|(
name|targetRootDir
argument_list|,
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|startTs
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|endTs
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Set progress string    * @param msg progress message    */
specifier|public
name|void
name|setProgress
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|progress
operator|=
name|msg
expr_stmt|;
block|}
comment|/**    * Get current progress msg    */
specifier|public
name|String
name|getProgress
parameter_list|()
block|{
return|return
name|progress
return|;
block|}
comment|/**    * Mark cancel flag.    */
specifier|public
name|void
name|markCancel
parameter_list|()
block|{
name|this
operator|.
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Has been marked as cancelled or not.    * @return True if marked as cancelled    */
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|this
operator|.
name|cancelled
return|;
block|}
specifier|public
name|String
name|getBackupId
parameter_list|()
block|{
return|return
name|backupId
return|;
block|}
specifier|public
name|void
name|setBackupId
parameter_list|(
name|String
name|backupId
parameter_list|)
block|{
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
block|}
specifier|public
name|BackupStatus
name|getBackupStatus
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
name|this
operator|.
name|backupStatusMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFailedMsg
parameter_list|()
block|{
return|return
name|failedMsg
return|;
block|}
specifier|public
name|void
name|setFailedMsg
parameter_list|(
name|String
name|failedMsg
parameter_list|)
block|{
name|this
operator|.
name|failedMsg
operator|=
name|failedMsg
expr_stmt|;
block|}
specifier|public
name|long
name|getStartTs
parameter_list|()
block|{
return|return
name|startTs
return|;
block|}
specifier|public
name|void
name|setStartTs
parameter_list|(
name|long
name|startTs
parameter_list|)
block|{
name|this
operator|.
name|startTs
operator|=
name|startTs
expr_stmt|;
block|}
specifier|public
name|long
name|getEndTs
parameter_list|()
block|{
return|return
name|endTs
return|;
block|}
specifier|public
name|void
name|setEndTs
parameter_list|(
name|long
name|endTs
parameter_list|)
block|{
name|this
operator|.
name|endTs
operator|=
name|endTs
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalBytesCopied
parameter_list|()
block|{
return|return
name|totalBytesCopied
return|;
block|}
specifier|public
name|BackupHandler
operator|.
name|BACKUPSTATUS
name|getFlag
parameter_list|()
block|{
return|return
name|flag
return|;
block|}
specifier|public
name|void
name|setFlag
parameter_list|(
name|BackupHandler
operator|.
name|BACKUPSTATUS
name|flag
parameter_list|)
block|{
name|this
operator|.
name|flag
operator|=
name|flag
expr_stmt|;
block|}
specifier|public
name|BackupHandler
operator|.
name|BACKUPPHASE
name|getPhase
parameter_list|()
block|{
return|return
name|phase
return|;
block|}
specifier|public
name|void
name|setPhase
parameter_list|(
name|BackupHandler
operator|.
name|BACKUPPHASE
name|phase
parameter_list|)
block|{
name|this
operator|.
name|phase
operator|=
name|phase
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setSnapshotName
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|this
operator|.
name|backupStatusMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
operator|.
name|setSnapshotName
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSnapshotName
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
name|this
operator|.
name|backupStatusMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
operator|.
name|getSnapshotName
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSnapshotNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|snapshotNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupStatus
name|backupStatus
range|:
name|this
operator|.
name|backupStatusMap
operator|.
name|values
argument_list|()
control|)
block|{
name|snapshotNames
operator|.
name|add
argument_list|(
name|backupStatus
operator|.
name|getSnapshotName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotNames
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|()
block|{
return|return
name|this
operator|.
name|backupStatusMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTableListAsString
parameter_list|()
block|{
return|return
name|BackupUtil
operator|.
name|concat
argument_list|(
name|backupStatusMap
operator|.
name|keySet
argument_list|()
argument_list|,
literal|";"
argument_list|)
return|;
block|}
specifier|public
name|void
name|addTables
parameter_list|(
name|String
index|[]
name|tables
parameter_list|)
block|{
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|BackupStatus
name|backupStatus
init|=
operator|new
name|BackupStatus
argument_list|(
name|table
argument_list|,
name|this
operator|.
name|targetRootDir
argument_list|,
name|this
operator|.
name|backupId
argument_list|)
decl_stmt|;
name|this
operator|.
name|backupStatusMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|backupStatus
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTargetRootDir
parameter_list|()
block|{
return|return
name|targetRootDir
return|;
block|}
specifier|public
name|void
name|setHlogTargetDir
parameter_list|(
name|String
name|hlogTagetDir
parameter_list|)
block|{
name|this
operator|.
name|hlogTargetDir
operator|=
name|hlogTagetDir
expr_stmt|;
block|}
specifier|public
name|String
name|getHLogTargetDir
parameter_list|()
block|{
return|return
name|hlogTargetDir
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIncrBackupFileList
parameter_list|()
block|{
return|return
name|incrBackupFileList
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|setIncrBackupFileList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|incrBackupFileList
parameter_list|)
block|{
name|this
operator|.
name|incrBackupFileList
operator|=
name|incrBackupFileList
expr_stmt|;
return|return
name|this
operator|.
name|incrBackupFileList
return|;
block|}
comment|/**    * Set the new region server log timestamps after distributed log roll    * @param newTableSetTimestampMap table timestamp map    */
specifier|public
name|void
name|setIncrTimestampMap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|newTableSetTimestampMap
parameter_list|)
block|{
name|this
operator|.
name|tableSetTimestampMap
operator|=
name|newTableSetTimestampMap
expr_stmt|;
block|}
comment|/**    * Get new region server log timestamps after distributed log roll    * @return new region server log timestamps    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getIncrTimestampMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableSetTimestampMap
return|;
block|}
comment|/**    * Get existing snapshot if backing up from existing snapshot.    * @return The existing snapshot, null if not backing up from existing snapshot    */
specifier|public
name|String
name|getExistingSnapshot
parameter_list|()
block|{
comment|// this feature will be supported in another Jira
return|return
literal|null
return|;
block|}
comment|/**    * Check whether this backup context are for backing up from existing snapshot or not.    * @return true if it is for backing up from existing snapshot, otherwise false    */
specifier|public
name|boolean
name|fromExistingSnapshot
parameter_list|()
block|{
comment|// this feature will be supported in later jiras
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getTableBySnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|BackupStatus
argument_list|>
name|entry
range|:
name|this
operator|.
name|backupStatusMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|snapshotName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSnapshotName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|BackupContext
name|fromByteArray
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
return|return
operator|(
name|BackupContext
operator|)
name|ois
operator|.
name|readObject
argument_list|()
return|;
block|}
block|}
end_class

end_unit

