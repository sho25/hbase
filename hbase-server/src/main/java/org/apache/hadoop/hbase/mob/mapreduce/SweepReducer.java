begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InvalidFamilyOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
operator|.
name|PartitionedMobCompactionRequest
operator|.
name|CompactionPartitionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
operator|.
name|SweepJob
operator|.
name|DummyMobAbortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
operator|.
name|SweepJob
operator|.
name|SweepCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultMemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * The reducer of a sweep job.  * This reducer merges the small mob files into bigger ones, and write visited  * names of mob files to a sequence file which is used by the sweep job to delete  * the unused mob files.  * The key of the input is a file name, the value is a collection of KeyValues  * (the value format of KeyValue is valueLength + fileName) in HBase.  * In this reducer, we could know how many cells exist in HBase for a mob file.  * If the existCellSize/mobFileSize< compactionRatio, this mob  * file needs to be merged.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SweepReducer
extends|extends
name|Reducer
argument_list|<
name|Text
argument_list|,
name|KeyValue
argument_list|,
name|Writable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SweepReducer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
specifier|private
name|MemStoreWrapper
name|memstore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|familyDir
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConfig
decl_stmt|;
specifier|private
name|long
name|compactionBegin
decl_stmt|;
specifier|private
name|BufferedMutator
name|table
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|family
decl_stmt|;
specifier|private
name|long
name|mobCompactionDelay
decl_stmt|;
specifier|private
name|Path
name|mobTableDir
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|Connection
name|c
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// the MOB_SWEEP_JOB_DELAY is ONE_DAY by default. Its value is only changed when testing.
name|mobCompactionDelay
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|SweepJob
operator|.
name|MOB_SWEEP_JOB_DELAY
argument_list|,
name|SweepJob
operator|.
name|ONE_DAY
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|)
decl_stmt|;
name|String
name|familyName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TableInputFormat
operator|.
name|SCAN_COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|this
operator|.
name|familyDir
operator|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tn
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|c
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|family
operator|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tn
argument_list|)
operator|.
name|getFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
comment|// this column family might be removed, directly return.
throw|throw
operator|new
name|InvalidFamilyOperationException
argument_list|(
literal|"Column family '"
operator|+
name|familyName
operator|+
literal|"' does not exist. It might be removed."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close the HBaseAdmin"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// disable the block cache.
name|Configuration
name|copyOfConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|copyOfConf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheConfig
operator|=
operator|new
name|CacheConfig
argument_list|(
name|copyOfConf
argument_list|)
expr_stmt|;
name|table
operator|=
name|c
operator|.
name|getBufferedMutator
argument_list|(
operator|new
name|BufferedMutatorParams
argument_list|(
name|tn
argument_list|)
operator|.
name|writeBufferSize
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|=
operator|new
name|MemStoreWrapper
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
operator|new
name|DefaultMemStore
argument_list|()
argument_list|,
name|cacheConfig
argument_list|)
expr_stmt|;
comment|// The start time of the sweep tool.
comment|// Only the mob files whose creation time is older than startTime-oneDay will be handled by the
comment|// reducer since it brings inconsistency to handle the latest mob files.
name|this
operator|.
name|compactionBegin
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MOB_SWEEP_TOOL_COMPACTION_START_DATE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mobTableDir
operator|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tn
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SweepPartition
name|createPartition
parameter_list|(
name|CompactionPartitionId
name|id
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SweepPartition
argument_list|(
name|id
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|jobId
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|SweepJob
operator|.
name|SWEEP_JOB_ID
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|SweepJob
operator|.
name|SWEEP_JOB_SERVERNAME
argument_list|)
decl_stmt|;
name|String
name|sweeperNode
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|SweepJob
operator|.
name|SWEEP_JOB_TABLE_NODE
argument_list|)
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|jobId
argument_list|,
operator|new
name|DummyMobAbortable
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SweepJobNodeTracker
name|tracker
init|=
operator|new
name|SweepJobNodeTracker
argument_list|(
name|zkw
argument_list|,
name|sweeperNode
argument_list|,
name|owner
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// create a sequence contains all the visited file names in this reducer.
name|String
name|dir
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|SweepJob
operator|.
name|WORKING_VISITED_DIR_KEY
argument_list|)
decl_stmt|;
name|Path
name|nameFilePath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
name|MobConstants
operator|.
name|EMPTY_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|fout
operator|=
name|fs
operator|.
name|create
argument_list|(
name|nameFilePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fout
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CompactionPartitionId
name|id
decl_stmt|;
name|SweepPartition
name|partition
init|=
literal|null
decl_stmt|;
comment|// the mob files which have the same start key and date are in the same partition.
while|while
condition|(
name|context
operator|.
name|nextKey
argument_list|()
condition|)
block|{
name|Text
name|key
init|=
name|context
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|String
name|keyString
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|id
operator|=
name|createPartitionId
argument_list|(
name|keyString
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|partition
operator|||
operator|!
name|id
operator|.
name|equals
argument_list|(
name|partition
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// It's the first mob file in the current partition.
if|if
condition|(
literal|null
operator|!=
name|partition
condition|)
block|{
comment|// this mob file is in different partitions with the previous mob file.
comment|// directly close.
name|partition
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// create a new one
name|partition
operator|=
name|createPartition
argument_list|(
name|id
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
comment|// run the partition
name|partition
operator|.
name|execute
argument_list|(
name|key
argument_list|,
name|context
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|partition
condition|)
block|{
name|partition
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fout
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * The mob files which have the same start key and date are in the same partition.    * The files in the same partition are merged together into bigger ones.    */
specifier|public
class|class
name|SweepPartition
block|{
specifier|private
specifier|final
name|CompactionPartitionId
name|id
decl_stmt|;
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
name|boolean
name|memstoreUpdated
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|mergeSmall
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MobFileStatus
argument_list|>
name|fileStatusMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MobFileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|toBeDeleted
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SweepPartition
parameter_list|(
name|CompactionPartitionId
name|id
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|memstore
operator|.
name|setPartitionId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CompactionPartitionId
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * Prepares the map of files.      *      * @throws IOException      */
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStats
init|=
name|listStatus
argument_list|(
name|familyDir
argument_list|,
name|id
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fileStats
condition|)
block|{
return|return;
block|}
name|int
name|smallFileCount
init|=
literal|0
decl_stmt|;
name|float
name|compactionRatio
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|MobConstants
operator|.
name|MOB_SWEEP_TOOL_COMPACTION_RATIO
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_SWEEP_TOOL_MOB_COMPACTION_RATIO
argument_list|)
decl_stmt|;
name|long
name|compactionMergeableSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|MobConstants
operator|.
name|MOB_SWEEP_TOOL_COMPACTION_MERGEABLE_SIZE
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_SWEEP_TOOL_MOB_COMPACTION_MERGEABLE_SIZE
argument_list|)
decl_stmt|;
comment|// list the files. Just merge the hfiles, don't merge the hfile links.
comment|// prepare the map of mob files. The key is the file name, the value is the file status.
for|for
control|(
name|FileStatus
name|fileStat
range|:
name|fileStats
control|)
block|{
name|MobFileStatus
name|mobFileStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|mobFileStatus
operator|=
operator|new
name|MobFileStatus
argument_list|(
name|fileStat
argument_list|,
name|compactionRatio
argument_list|,
name|compactionMergeableSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|mobFileStatus
operator|.
name|needMerge
argument_list|()
condition|)
block|{
name|smallFileCount
operator|++
expr_stmt|;
block|}
comment|// key is file name (not hfile name), value is hfile status.
name|fileStatusMap
operator|.
name|put
argument_list|(
name|fileStat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mobFileStatus
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smallFileCount
operator|>=
literal|2
condition|)
block|{
comment|// merge the files only when there're more than 1 files in the same partition.
name|this
operator|.
name|mergeSmall
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Flushes the data into mob files and store files, and archives the small      * files after they're merged.      * @throws IOException      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|id
condition|)
block|{
return|return;
block|}
comment|// flush remain key values into mob files
if|if
condition|(
name|memstoreUpdated
condition|)
block|{
name|memstore
operator|.
name|flushMemStore
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|toBeDeleted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// delete samll files after compaction
for|for
control|(
name|Path
name|path
range|:
name|toBeDeleted
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[In Partition close] Delete the file "
operator|+
name|path
operator|+
literal|" in partition close"
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|cacheConfig
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|storeFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|MobUtils
operator|.
name|removeMobFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|mobTableDir
argument_list|,
name|family
operator|.
name|getName
argument_list|()
argument_list|,
name|storeFiles
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|SweepCounter
operator|.
name|FILE_TO_BE_MERGE_OR_CLEAN
argument_list|)
operator|.
name|increment
argument_list|(
name|storeFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to archive the store files "
operator|+
name|storeFiles
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|storeFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|fileStatusMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Merges the small mob files into bigger ones.      * @param fileName The current mob file name.      * @param values The collection of KeyValues in this mob file.      * @throws IOException      */
specifier|public
name|void
name|execute
parameter_list|(
name|Text
name|fileName
parameter_list|,
name|Iterable
argument_list|<
name|KeyValue
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|values
condition|)
block|{
return|return;
block|}
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[In reducer] The file name: "
operator|+
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MobFileStatus
name|mobFileStat
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|mobFileStat
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[In reducer] Cannot find the file, probably this record is obsolete"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// only handle the files that are older then one day.
if|if
condition|(
name|compactionBegin
operator|-
name|mobFileStat
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getModificationTime
argument_list|()
operator|<=
name|mobCompactionDelay
condition|)
block|{
return|return;
block|}
comment|// write the hfile name
name|writer
operator|.
name|append
argument_list|(
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|,
name|MobConstants
operator|.
name|EMPTY_STRING
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|HashSet
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|values
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|getValueLength
argument_list|()
operator|>
name|Bytes
operator|.
name|SIZEOF_INT
condition|)
block|{
name|mobFileStat
operator|.
name|addValidSize
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|kvs
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
comment|// If the mob file is a invalid one or a small one, merge it into new/bigger ones.
if|if
condition|(
name|mobFileStat
operator|.
name|needClean
argument_list|()
operator|||
operator|(
name|mergeSmall
operator|&&
name|mobFileStat
operator|.
name|needMerge
argument_list|()
operator|)
condition|)
block|{
name|context
operator|.
name|getCounter
argument_list|(
name|SweepCounter
operator|.
name|INPUT_FILE_COUNT
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MobFile
name|file
init|=
name|MobFile
operator|.
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|cacheConfig
argument_list|)
decl_stmt|;
name|StoreFileScanner
name|scanner
init|=
literal|null
decl_stmt|;
name|file
operator|.
name|open
argument_list|()
expr_stmt|;
try|try
block|{
name|scanner
operator|=
name|file
operator|.
name|getScanner
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|seek
argument_list|(
name|CellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|cell
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|cell
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|kvs
operator|.
name|contains
argument_list|(
name|cell
argument_list|)
condition|)
block|{
comment|// write the KeyValue existing in HBase to the memstore.
name|memstore
operator|.
name|addToMemstore
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|memstoreUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|toBeDeleted
operator|.
name|add
argument_list|(
name|mobFileStat
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Lists the files with the same prefix.      * @param p The file path.      * @param prefix The prefix.      * @return The files with the same prefix.      * @throws IOException      */
specifier|private
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|,
operator|new
name|PathPrefixFilter
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|PathPrefixFilter
implements|implements
name|PathFilter
block|{
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|public
name|PathPrefixFilter
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates the partition id.    * @param fileNameAsString The current file name, in string.    * @return The partition id.    */
specifier|private
name|CompactionPartitionId
name|createPartitionId
parameter_list|(
name|String
name|fileNameAsString
parameter_list|)
block|{
name|MobFileName
name|fileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|fileNameAsString
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompactionPartitionId
argument_list|(
name|fileName
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|fileName
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The mob file status used in the sweep reduecer.    */
specifier|private
specifier|static
class|class
name|MobFileStatus
block|{
specifier|private
name|FileStatus
name|fileStatus
decl_stmt|;
specifier|private
name|int
name|validSize
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|float
name|compactionRatio
init|=
name|MobConstants
operator|.
name|DEFAULT_SWEEP_TOOL_MOB_COMPACTION_RATIO
decl_stmt|;
specifier|private
name|long
name|compactionMergeableSize
init|=
name|MobConstants
operator|.
name|DEFAULT_SWEEP_TOOL_MOB_COMPACTION_MERGEABLE_SIZE
decl_stmt|;
comment|/**      * @param fileStatus The current FileStatus.      * @param compactionRatio compactionRatio the invalid ratio.      * If there're too many cells deleted in a mob file, it's regarded as invalid,      * and needs to be written to a new one.      * If existingCellSize/fileSize< compactionRatio, it's regarded as a invalid one.      * @param compactionMergeableSize compactionMergeableSize If the size of a mob file is less      * than this value, it's regarded as a small file and needs to be merged      */
specifier|public
name|MobFileStatus
parameter_list|(
name|FileStatus
name|fileStatus
parameter_list|,
name|float
name|compactionRatio
parameter_list|,
name|long
name|compactionMergeableSize
parameter_list|)
block|{
name|this
operator|.
name|fileStatus
operator|=
name|fileStatus
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|fileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|validSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|compactionRatio
operator|=
name|compactionRatio
expr_stmt|;
name|this
operator|.
name|compactionMergeableSize
operator|=
name|compactionMergeableSize
expr_stmt|;
block|}
comment|/**      * Add size to this file.      * @param size The size to be added.      */
specifier|public
name|void
name|addValidSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|validSize
operator|+=
name|size
expr_stmt|;
block|}
comment|/**      * Whether the mob files need to be cleaned.      * If there're too many cells deleted in this mob file, it needs to be cleaned.      * @return True if it needs to be cleaned.      */
specifier|public
name|boolean
name|needClean
parameter_list|()
block|{
return|return
name|validSize
operator|<
name|compactionRatio
operator|*
name|size
return|;
block|}
comment|/**      * Whether the mob files need to be merged.      * If this mob file is too small, it needs to be merged.      * @return True if it needs to be merged.      */
specifier|public
name|boolean
name|needMerge
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
operator|<
name|compactionMergeableSize
return|;
block|}
comment|/**      * Gets the file status.      * @return The file status.      */
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|()
block|{
return|return
name|fileStatus
return|;
block|}
block|}
block|}
end_class

end_unit

